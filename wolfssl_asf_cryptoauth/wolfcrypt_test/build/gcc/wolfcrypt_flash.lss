
wolfcrypt_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002f088  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002f088  0002f088  0003f088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000290  20000000  0002f090  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000002b0  20000290  0002f320  00040290  2**2
                  ALLOC
  4 .stack        00006000  20000540  0002f5d0  00040290  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00040290  2**0
                  CONTENTS, READONLY
  6 .comment      0000006e  00000000  00000000  000402b8  2**0
                  CONTENTS, READONLY
  7 .debug_info   000621ef  00000000  00000000  00040326  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008b32  00000000  00000000  000a2515  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000027a8  00000000  00000000  000ab047  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002398  00000000  00000000  000ad7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000264ce  00000000  00000000  000afb87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00028036  00000000  00000000  000d6055  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a6da5  00000000  00000000  000fe08b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00009938  00000000  00000000  001a4e30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
       0:	20006540 	.word	0x20006540
       4:	00004e49 	.word	0x00004e49
       8:	00004f39 	.word	0x00004f39
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       c:	000008b9 	.word	0x000008b9
	...

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
      2c:	00004f39 	.word	0x00004f39
	...

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
      38:	00004f39 	.word	0x00004f39
      3c:	00004f39 	.word	0x00004f39
      40:	00004f39 	.word	0x00004f39
      44:	00004f39 	.word	0x00004f39
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
      48:	00004f39 	.word	0x00004f39
      4c:	0000217d 	.word	0x0000217d
      50:	00004f39 	.word	0x00004f39
				while (rtc_count_is_syncing(module)) {
      54:	00004f39 	.word	0x00004f39
      58:	00004f39 	.word	0x00004f39
      5c:	00004f39 	.word	0x00004f39
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
      60:	00004f39 	.word	0x00004f39
      64:	00002019 	.word	0x00002019
      68:	00002031 	.word	0x00002031
      6c:	00002049 	.word	0x00002049
      70:	00002061 	.word	0x00002061
      74:	00002079 	.word	0x00002079
      78:	00002091 	.word	0x00002091
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
      7c:	0000328d 	.word	0x0000328d
      80:	0000329d 	.word	0x0000329d
      84:	000032ad 	.word	0x000032ad
      88:	00004f39 	.word	0x00004f39
      8c:	00004f39 	.word	0x00004f39
      90:	00004f39 	.word	0x00004f39
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
      94:	00004f39 	.word	0x00004f39

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
      98:	00004f39 	.word	0x00004f39
      9c:	00004f39 	.word	0x00004f39
      a0:	00004f39 	.word	0x00004f39
      a4:	00004f39 	.word	0x00004f39

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
      a8:	00004f39 	.word	0x00004f39
      ac:	00004f39 	.word	0x00004f39
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
				while (rtc_count_is_syncing(module)) {
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000290 	.word	0x20000290
      d4:	00000000 	.word	0x00000000
      d8:	0002f090 	.word	0x0002f090

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     100:	00000000 	.word	0x00000000
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     104:	20000294 	.word	0x20000294
     108:	0002f090 	.word	0x0002f090
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     10c:	0002f090 	.word	0x0002f090
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     11a:	4b10      	ldr	r3, [pc, #64]	; (15c <cpu_irq_enter_critical+0x48>)
     11c:	681b      	ldr	r3, [r3, #0]
     11e:	2b00      	cmp	r3, #0
     120:	d112      	bne.n	148 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     122:	f3ef 8310 	mrs	r3, PRIMASK
     126:	607b      	str	r3, [r7, #4]
  return(result);
     128:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     12a:	2b00      	cmp	r3, #0
     12c:	d109      	bne.n	142 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     12e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     130:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     134:	4b0a      	ldr	r3, [pc, #40]	; (160 <cpu_irq_enter_critical+0x4c>)
     136:	2200      	movs	r2, #0
     138:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <cpu_irq_enter_critical+0x50>)
     13c:	2201      	movs	r2, #1
     13e:	701a      	strb	r2, [r3, #0]
     140:	e002      	b.n	148 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     142:	4b08      	ldr	r3, [pc, #32]	; (164 <cpu_irq_enter_critical+0x50>)
     144:	2200      	movs	r2, #0
     146:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     148:	4b04      	ldr	r3, [pc, #16]	; (15c <cpu_irq_enter_critical+0x48>)
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	1c5a      	adds	r2, r3, #1
     14e:	4b03      	ldr	r3, [pc, #12]	; (15c <cpu_irq_enter_critical+0x48>)
     150:	601a      	str	r2, [r3, #0]
}
     152:	46c0      	nop			; (mov r8, r8)
     154:	46bd      	mov	sp, r7
     156:	b002      	add	sp, #8
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	200002ac 	.word	0x200002ac
     160:	20000000 	.word	0x20000000
     164:	200002b0 	.word	0x200002b0

00000168 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     168:	b580      	push	{r7, lr}
     16a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     16c:	4b0b      	ldr	r3, [pc, #44]	; (19c <cpu_irq_leave_critical+0x34>)
     16e:	681b      	ldr	r3, [r3, #0]
     170:	1e5a      	subs	r2, r3, #1
     172:	4b0a      	ldr	r3, [pc, #40]	; (19c <cpu_irq_leave_critical+0x34>)
     174:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     176:	4b09      	ldr	r3, [pc, #36]	; (19c <cpu_irq_leave_critical+0x34>)
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b00      	cmp	r3, #0
     17c:	d10a      	bne.n	194 <cpu_irq_leave_critical+0x2c>
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <cpu_irq_leave_critical+0x38>)
     180:	781b      	ldrb	r3, [r3, #0]
     182:	b2db      	uxtb	r3, r3
     184:	2b00      	cmp	r3, #0
     186:	d005      	beq.n	194 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     188:	4b06      	ldr	r3, [pc, #24]	; (1a4 <cpu_irq_leave_critical+0x3c>)
     18a:	2201      	movs	r2, #1
     18c:	701a      	strb	r2, [r3, #0]
     18e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     192:	b662      	cpsie	i
	}
}
     194:	46c0      	nop			; (mov r8, r8)
     196:	46bd      	mov	sp, r7
     198:	bd80      	pop	{r7, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	200002ac 	.word	0x200002ac
     1a0:	200002b0 	.word	0x200002b0
     1a4:	20000000 	.word	0x20000000

000001a8 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b082      	sub	sp, #8
     1ac:	af00      	add	r7, sp, #0
     1ae:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     1b0:	687b      	ldr	r3, [r7, #4]
     1b2:	2b00      	cmp	r3, #0
     1b4:	d00c      	beq.n	1d0 <delay_cycles+0x28>
		SysTick->LOAD = n;
     1b6:	4b08      	ldr	r3, [pc, #32]	; (1d8 <delay_cycles+0x30>)
     1b8:	687a      	ldr	r2, [r7, #4]
     1ba:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     1bc:	4b06      	ldr	r3, [pc, #24]	; (1d8 <delay_cycles+0x30>)
     1be:	2200      	movs	r2, #0
     1c0:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	4b04      	ldr	r3, [pc, #16]	; (1d8 <delay_cycles+0x30>)
     1c6:	681a      	ldr	r2, [r3, #0]
     1c8:	2380      	movs	r3, #128	; 0x80
     1ca:	025b      	lsls	r3, r3, #9
     1cc:	4013      	ands	r3, r2
     1ce:	d0f9      	beq.n	1c4 <delay_cycles+0x1c>
		};
	}
}
     1d0:	46c0      	nop			; (mov r8, r8)
     1d2:	46bd      	mov	sp, r7
     1d4:	b002      	add	sp, #8
     1d6:	bd80      	pop	{r7, pc}
     1d8:	e000e010 	.word	0xe000e010

000001dc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     1dc:	b580      	push	{r7, lr}
     1de:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     1e0:	2000      	movs	r0, #0
     1e2:	f004 fc33 	bl	4a4c <system_gclk_gen_get_hz>
     1e6:	0002      	movs	r2, r0
     1e8:	4b0e      	ldr	r3, [pc, #56]	; (224 <delay_init+0x48>)
     1ea:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     1ec:	4b0d      	ldr	r3, [pc, #52]	; (224 <delay_init+0x48>)
     1ee:	681a      	ldr	r2, [r3, #0]
     1f0:	23fa      	movs	r3, #250	; 0xfa
     1f2:	0099      	lsls	r1, r3, #2
     1f4:	0010      	movs	r0, r2
     1f6:	f023 f951 	bl	2349c <__aeabi_uidiv>
     1fa:	0003      	movs	r3, r0
     1fc:	001a      	movs	r2, r3
     1fe:	4b09      	ldr	r3, [pc, #36]	; (224 <delay_init+0x48>)
     200:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     202:	4b08      	ldr	r3, [pc, #32]	; (224 <delay_init+0x48>)
     204:	681a      	ldr	r2, [r3, #0]
     206:	23fa      	movs	r3, #250	; 0xfa
     208:	0099      	lsls	r1, r3, #2
     20a:	0010      	movs	r0, r2
     20c:	f023 f946 	bl	2349c <__aeabi_uidiv>
     210:	0003      	movs	r3, r0
     212:	001a      	movs	r2, r3
     214:	4b04      	ldr	r3, [pc, #16]	; (228 <delay_init+0x4c>)
     216:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     218:	4b04      	ldr	r3, [pc, #16]	; (22c <delay_init+0x50>)
     21a:	2205      	movs	r2, #5
     21c:	601a      	str	r2, [r3, #0]
}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	46bd      	mov	sp, r7
     222:	bd80      	pop	{r7, pc}
     224:	20000004 	.word	0x20000004
     228:	20000008 	.word	0x20000008
     22c:	e000e010 	.word	0xe000e010

00000230 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     230:	b580      	push	{r7, lr}
     232:	b082      	sub	sp, #8
     234:	af00      	add	r7, sp, #0
     236:	6078      	str	r0, [r7, #4]
	while (n--) {
     238:	e004      	b.n	244 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     23a:	4b07      	ldr	r3, [pc, #28]	; (258 <delay_cycles_us+0x28>)
     23c:	681b      	ldr	r3, [r3, #0]
     23e:	0018      	movs	r0, r3
     240:	f7ff ffb2 	bl	1a8 <delay_cycles>
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     244:	687b      	ldr	r3, [r7, #4]
     246:	1e5a      	subs	r2, r3, #1
     248:	607a      	str	r2, [r7, #4]
     24a:	2b00      	cmp	r3, #0
     24c:	d1f5      	bne.n	23a <delay_cycles_us+0xa>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     24e:	46c0      	nop			; (mov r8, r8)
     250:	46bd      	mov	sp, r7
     252:	b002      	add	sp, #8
     254:	bd80      	pop	{r7, pc}
     256:	46c0      	nop			; (mov r8, r8)
     258:	20000008 	.word	0x20000008

0000025c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	6078      	str	r0, [r7, #4]
	while (n--) {
     264:	e004      	b.n	270 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     266:	4b07      	ldr	r3, [pc, #28]	; (284 <delay_cycles_ms+0x28>)
     268:	681b      	ldr	r3, [r3, #0]
     26a:	0018      	movs	r0, r3
     26c:	f7ff ff9c 	bl	1a8 <delay_cycles>
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     270:	687b      	ldr	r3, [r7, #4]
     272:	1e5a      	subs	r2, r3, #1
     274:	607a      	str	r2, [r7, #4]
     276:	2b00      	cmp	r3, #0
     278:	d1f5      	bne.n	266 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	46bd      	mov	sp, r7
     27e:	b002      	add	sp, #8
     280:	bd80      	pop	{r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	20000004 	.word	0x20000004

00000288 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     288:	b580      	push	{r7, lr}
     28a:	b084      	sub	sp, #16
     28c:	af00      	add	r7, sp, #0
     28e:	0002      	movs	r2, r0
     290:	1dfb      	adds	r3, r7, #7
     292:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     294:	230f      	movs	r3, #15
     296:	18fb      	adds	r3, r7, r3
     298:	1dfa      	adds	r2, r7, #7
     29a:	7812      	ldrb	r2, [r2, #0]
     29c:	09d2      	lsrs	r2, r2, #7
     29e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     2a0:	230e      	movs	r3, #14
     2a2:	18fb      	adds	r3, r7, r3
     2a4:	1dfa      	adds	r2, r7, #7
     2a6:	7812      	ldrb	r2, [r2, #0]
     2a8:	0952      	lsrs	r2, r2, #5
     2aa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     2ac:	4b0d      	ldr	r3, [pc, #52]	; (2e4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     2ae:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     2b0:	230f      	movs	r3, #15
     2b2:	18fb      	adds	r3, r7, r3
     2b4:	781b      	ldrb	r3, [r3, #0]
     2b6:	2b00      	cmp	r3, #0
     2b8:	d10f      	bne.n	2da <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     2ba:	230f      	movs	r3, #15
     2bc:	18fb      	adds	r3, r7, r3
     2be:	781b      	ldrb	r3, [r3, #0]
     2c0:	009b      	lsls	r3, r3, #2
     2c2:	2210      	movs	r2, #16
     2c4:	4694      	mov	ip, r2
     2c6:	44bc      	add	ip, r7
     2c8:	4463      	add	r3, ip
     2ca:	3b08      	subs	r3, #8
     2cc:	681a      	ldr	r2, [r3, #0]
     2ce:	230e      	movs	r3, #14
     2d0:	18fb      	adds	r3, r7, r3
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	01db      	lsls	r3, r3, #7
     2d6:	18d3      	adds	r3, r2, r3
     2d8:	e000      	b.n	2dc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     2da:	2300      	movs	r3, #0
	}
}
     2dc:	0018      	movs	r0, r3
     2de:	46bd      	mov	sp, r7
     2e0:	b004      	add	sp, #16
     2e2:	bd80      	pop	{r7, pc}
     2e4:	41004400 	.word	0x41004400

000002e8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	b082      	sub	sp, #8
     2ec:	af00      	add	r7, sp, #0
     2ee:	0002      	movs	r2, r0
     2f0:	1dfb      	adds	r3, r7, #7
     2f2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     2f4:	1dfb      	adds	r3, r7, #7
     2f6:	781b      	ldrb	r3, [r3, #0]
     2f8:	0018      	movs	r0, r3
     2fa:	f7ff ffc5 	bl	288 <system_pinmux_get_group_from_gpio_pin>
     2fe:	0003      	movs	r3, r0
}
     300:	0018      	movs	r0, r3
     302:	46bd      	mov	sp, r7
     304:	b002      	add	sp, #8
     306:	bd80      	pop	{r7, pc}

00000308 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     308:	b580      	push	{r7, lr}
     30a:	b082      	sub	sp, #8
     30c:	af00      	add	r7, sp, #0
     30e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     310:	687b      	ldr	r3, [r7, #4]
     312:	2200      	movs	r2, #0
     314:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     316:	687b      	ldr	r3, [r7, #4]
     318:	2201      	movs	r2, #1
     31a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	2200      	movs	r2, #0
     320:	709a      	strb	r2, [r3, #2]
}
     322:	46c0      	nop			; (mov r8, r8)
     324:	46bd      	mov	sp, r7
     326:	b002      	add	sp, #8
     328:	bd80      	pop	{r7, pc}
     32a:	46c0      	nop			; (mov r8, r8)

0000032c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     32c:	b580      	push	{r7, lr}
     32e:	b084      	sub	sp, #16
     330:	af00      	add	r7, sp, #0
     332:	0002      	movs	r2, r0
     334:	1dfb      	adds	r3, r7, #7
     336:	701a      	strb	r2, [r3, #0]
     338:	1dbb      	adds	r3, r7, #6
     33a:	1c0a      	adds	r2, r1, #0
     33c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     33e:	1dfb      	adds	r3, r7, #7
     340:	781b      	ldrb	r3, [r3, #0]
     342:	0018      	movs	r0, r3
     344:	f7ff ffd0 	bl	2e8 <port_get_group_from_gpio_pin>
     348:	0003      	movs	r3, r0
     34a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     34c:	1dfb      	adds	r3, r7, #7
     34e:	781b      	ldrb	r3, [r3, #0]
     350:	221f      	movs	r2, #31
     352:	4013      	ands	r3, r2
     354:	2201      	movs	r2, #1
     356:	409a      	lsls	r2, r3
     358:	0013      	movs	r3, r2
     35a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     35c:	1dbb      	adds	r3, r7, #6
     35e:	781b      	ldrb	r3, [r3, #0]
     360:	2b00      	cmp	r3, #0
     362:	d003      	beq.n	36c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     364:	68fb      	ldr	r3, [r7, #12]
     366:	68ba      	ldr	r2, [r7, #8]
     368:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     36a:	e002      	b.n	372 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     36c:	68fb      	ldr	r3, [r7, #12]
     36e:	68ba      	ldr	r2, [r7, #8]
     370:	615a      	str	r2, [r3, #20]
	}
}
     372:	46c0      	nop			; (mov r8, r8)
     374:	46bd      	mov	sp, r7
     376:	b004      	add	sp, #16
     378:	bd80      	pop	{r7, pc}
     37a:	46c0      	nop			; (mov r8, r8)

0000037c <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
     37c:	b580      	push	{r7, lr}
     37e:	b084      	sub	sp, #16
     380:	af00      	add	r7, sp, #0
     382:	0002      	movs	r2, r0
     384:	1dfb      	adds	r3, r7, #7
     386:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     388:	1dfb      	adds	r3, r7, #7
     38a:	781b      	ldrb	r3, [r3, #0]
     38c:	0018      	movs	r0, r3
     38e:	f7ff ffab 	bl	2e8 <port_get_group_from_gpio_pin>
     392:	0003      	movs	r3, r0
     394:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     396:	1dfb      	adds	r3, r7, #7
     398:	781b      	ldrb	r3, [r3, #0]
     39a:	221f      	movs	r2, #31
     39c:	4013      	ands	r3, r2
     39e:	2201      	movs	r2, #1
     3a0:	409a      	lsls	r2, r3
     3a2:	0013      	movs	r3, r2
     3a4:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     3a6:	68fb      	ldr	r3, [r7, #12]
     3a8:	68ba      	ldr	r2, [r7, #8]
     3aa:	61da      	str	r2, [r3, #28]
}
     3ac:	46c0      	nop			; (mov r8, r8)
     3ae:	46bd      	mov	sp, r7
     3b0:	b004      	add	sp, #16
     3b2:	bd80      	pop	{r7, pc}

000003b4 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     3b4:	b580      	push	{r7, lr}
     3b6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     3b8:	4b04      	ldr	r3, [pc, #16]	; (3cc <system_interrupt_enable_global+0x18>)
     3ba:	2201      	movs	r2, #1
     3bc:	701a      	strb	r2, [r3, #0]
     3be:	f3bf 8f5f 	dmb	sy
     3c2:	b662      	cpsie	i
}
     3c4:	46c0      	nop			; (mov r8, r8)
     3c6:	46bd      	mov	sp, r7
     3c8:	bd80      	pop	{r7, pc}
     3ca:	46c0      	nop			; (mov r8, r8)
     3cc:	20000000 	.word	0x20000000

000003d0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b082      	sub	sp, #8
     3d4:	af00      	add	r7, sp, #0
     3d6:	0002      	movs	r2, r0
     3d8:	1dfb      	adds	r3, r7, #7
     3da:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3dc:	4b06      	ldr	r3, [pc, #24]	; (3f8 <system_interrupt_enable+0x28>)
     3de:	1dfa      	adds	r2, r7, #7
     3e0:	7812      	ldrb	r2, [r2, #0]
     3e2:	0011      	movs	r1, r2
     3e4:	221f      	movs	r2, #31
     3e6:	400a      	ands	r2, r1
     3e8:	2101      	movs	r1, #1
     3ea:	4091      	lsls	r1, r2
     3ec:	000a      	movs	r2, r1
     3ee:	601a      	str	r2, [r3, #0]
}
     3f0:	46c0      	nop			; (mov r8, r8)
     3f2:	46bd      	mov	sp, r7
     3f4:	b002      	add	sp, #8
     3f6:	bd80      	pop	{r7, pc}
     3f8:	e000e100 	.word	0xe000e100

000003fc <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     3fc:	b580      	push	{r7, lr}
     3fe:	b084      	sub	sp, #16
     400:	af00      	add	r7, sp, #0
     402:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     404:	687b      	ldr	r3, [r7, #4]
     406:	681b      	ldr	r3, [r3, #0]
     408:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     40a:	68fb      	ldr	r3, [r7, #12]
     40c:	69db      	ldr	r3, [r3, #28]
     40e:	1e5a      	subs	r2, r3, #1
     410:	4193      	sbcs	r3, r2
     412:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     414:	0018      	movs	r0, r3
     416:	46bd      	mov	sp, r7
     418:	b004      	add	sp, #16
     41a:	bd80      	pop	{r7, pc}

0000041c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     41c:	b580      	push	{r7, lr}
     41e:	b082      	sub	sp, #8
     420:	af00      	add	r7, sp, #0
     422:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     424:	46c0      	nop			; (mov r8, r8)
     426:	687b      	ldr	r3, [r7, #4]
     428:	0018      	movs	r0, r3
     42a:	f7ff ffe7 	bl	3fc <usart_is_syncing>
     42e:	1e03      	subs	r3, r0, #0
     430:	d1f9      	bne.n	426 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     432:	46c0      	nop			; (mov r8, r8)
     434:	46bd      	mov	sp, r7
     436:	b002      	add	sp, #8
     438:	bd80      	pop	{r7, pc}
     43a:	46c0      	nop			; (mov r8, r8)

0000043c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     43c:	b580      	push	{r7, lr}
     43e:	b082      	sub	sp, #8
     440:	af00      	add	r7, sp, #0
     442:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     444:	687b      	ldr	r3, [r7, #4]
     446:	2280      	movs	r2, #128	; 0x80
     448:	05d2      	lsls	r2, r2, #23
     44a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     44c:	687b      	ldr	r3, [r7, #4]
     44e:	2200      	movs	r2, #0
     450:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     452:	687b      	ldr	r3, [r7, #4]
     454:	22ff      	movs	r2, #255	; 0xff
     456:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     458:	687b      	ldr	r3, [r7, #4]
     45a:	2200      	movs	r2, #0
     45c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     45e:	687b      	ldr	r3, [r7, #4]
     460:	2200      	movs	r2, #0
     462:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     464:	687b      	ldr	r3, [r7, #4]
     466:	2296      	movs	r2, #150	; 0x96
     468:	0192      	lsls	r2, r2, #6
     46a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	2224      	movs	r2, #36	; 0x24
     470:	2101      	movs	r1, #1
     472:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     474:	687b      	ldr	r3, [r7, #4]
     476:	2225      	movs	r2, #37	; 0x25
     478:	2101      	movs	r1, #1
     47a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     47c:	687b      	ldr	r3, [r7, #4]
     47e:	2226      	movs	r2, #38	; 0x26
     480:	2100      	movs	r1, #0
     482:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     484:	687b      	ldr	r3, [r7, #4]
     486:	2227      	movs	r2, #39	; 0x27
     488:	2100      	movs	r1, #0
     48a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	2200      	movs	r2, #0
     490:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     492:	687b      	ldr	r3, [r7, #4]
     494:	2288      	movs	r2, #136	; 0x88
     496:	0352      	lsls	r2, r2, #13
     498:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	222c      	movs	r2, #44	; 0x2c
     49e:	2100      	movs	r1, #0
     4a0:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	222d      	movs	r2, #45	; 0x2d
     4a6:	2100      	movs	r1, #0
     4a8:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     4aa:	687b      	ldr	r3, [r7, #4]
     4ac:	2200      	movs	r2, #0
     4ae:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     4b0:	687b      	ldr	r3, [r7, #4]
     4b2:	2200      	movs	r2, #0
     4b4:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	2200      	movs	r2, #0
     4ba:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     4bc:	687b      	ldr	r3, [r7, #4]
     4be:	2200      	movs	r2, #0
     4c0:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     4c2:	687b      	ldr	r3, [r7, #4]
     4c4:	2200      	movs	r2, #0
     4c6:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	2200      	movs	r2, #0
     4cc:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	2200      	movs	r2, #0
     4d2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     4d4:	687b      	ldr	r3, [r7, #4]
     4d6:	2200      	movs	r2, #0
     4d8:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	2200      	movs	r2, #0
     4de:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	2200      	movs	r2, #0
     4e4:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     4e6:	687b      	ldr	r3, [r7, #4]
     4e8:	2213      	movs	r2, #19
     4ea:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     4ec:	687b      	ldr	r3, [r7, #4]
     4ee:	2200      	movs	r2, #0
     4f0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	46bd      	mov	sp, r7
     4f6:	b002      	add	sp, #8
     4f8:	bd80      	pop	{r7, pc}
     4fa:	46c0      	nop			; (mov r8, r8)

000004fc <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     4fc:	b580      	push	{r7, lr}
     4fe:	b084      	sub	sp, #16
     500:	af00      	add	r7, sp, #0
     502:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     504:	687b      	ldr	r3, [r7, #4]
     506:	681b      	ldr	r3, [r3, #0]
     508:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	681b      	ldr	r3, [r3, #0]
     50e:	0018      	movs	r0, r3
     510:	f001 fd60 	bl	1fd4 <_sercom_get_interrupt_vector>
     514:	0003      	movs	r3, r0
     516:	0018      	movs	r0, r3
     518:	f7ff ff5a 	bl	3d0 <system_interrupt_enable>
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	0018      	movs	r0, r3
     520:	f7ff ff7c 	bl	41c <_usart_wait_for_sync>

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     524:	68fb      	ldr	r3, [r7, #12]
     526:	681b      	ldr	r3, [r3, #0]
     528:	2202      	movs	r2, #2
     52a:	431a      	orrs	r2, r3
     52c:	68fb      	ldr	r3, [r7, #12]
     52e:	601a      	str	r2, [r3, #0]
}
     530:	46c0      	nop			; (mov r8, r8)
     532:	46bd      	mov	sp, r7
     534:	b004      	add	sp, #16
     536:	bd80      	pop	{r7, pc}

00000538 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     538:	b580      	push	{r7, lr}
     53a:	b084      	sub	sp, #16
     53c:	af00      	add	r7, sp, #0
     53e:	60f8      	str	r0, [r7, #12]
     540:	60b9      	str	r1, [r7, #8]
     542:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
     544:	687a      	ldr	r2, [r7, #4]
     546:	68b9      	ldr	r1, [r7, #8]
     548:	68fb      	ldr	r3, [r7, #12]
     54a:	0018      	movs	r0, r3
     54c:	f003 f8d4 	bl	36f8 <usart_init>
     550:	1e03      	subs	r3, r0, #0
     552:	d101      	bne.n	558 <usart_serial_init+0x20>
		return true;
     554:	2301      	movs	r3, #1
     556:	e000      	b.n	55a <usart_serial_init+0x22>
	}
	else {
		return false;
     558:	2300      	movs	r3, #0
	}
}
     55a:	0018      	movs	r0, r3
     55c:	46bd      	mov	sp, r7
     55e:	b004      	add	sp, #16
     560:	bd80      	pop	{r7, pc}
     562:	46c0      	nop			; (mov r8, r8)

00000564 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     564:	b580      	push	{r7, lr}
     566:	b082      	sub	sp, #8
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
     56c:	000a      	movs	r2, r1
     56e:	1cfb      	adds	r3, r7, #3
     570:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     572:	46c0      	nop			; (mov r8, r8)
     574:	1cfb      	adds	r3, r7, #3
     576:	781b      	ldrb	r3, [r3, #0]
     578:	b29a      	uxth	r2, r3
     57a:	687b      	ldr	r3, [r7, #4]
     57c:	0011      	movs	r1, r2
     57e:	0018      	movs	r0, r3
     580:	f003 f9de 	bl	3940 <usart_write_wait>
     584:	1e03      	subs	r3, r0, #0
     586:	d1f5      	bne.n	574 <usart_serial_putchar+0x10>

	return STATUS_OK;
     588:	2300      	movs	r3, #0
}
     58a:	0018      	movs	r0, r3
     58c:	46bd      	mov	sp, r7
     58e:	b002      	add	sp, #8
     590:	bd80      	pop	{r7, pc}
     592:	46c0      	nop			; (mov r8, r8)

00000594 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     594:	b580      	push	{r7, lr}
     596:	b084      	sub	sp, #16
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
     59c:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     59e:	230e      	movs	r3, #14
     5a0:	18fb      	adds	r3, r7, r3
     5a2:	2200      	movs	r2, #0
     5a4:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	230e      	movs	r3, #14
     5aa:	18fa      	adds	r2, r7, r3
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	0011      	movs	r1, r2
     5b0:	0018      	movs	r0, r3
     5b2:	f003 f9f5 	bl	39a0 <usart_read_wait>
     5b6:	1e03      	subs	r3, r0, #0
     5b8:	d1f6      	bne.n	5a8 <usart_serial_getchar+0x14>

	*c = temp;
     5ba:	230e      	movs	r3, #14
     5bc:	18fb      	adds	r3, r7, r3
     5be:	881b      	ldrh	r3, [r3, #0]
     5c0:	b2da      	uxtb	r2, r3
     5c2:	683b      	ldr	r3, [r7, #0]
     5c4:	701a      	strb	r2, [r3, #0]
}
     5c6:	46c0      	nop			; (mov r8, r8)
     5c8:	46bd      	mov	sp, r7
     5ca:	b004      	add	sp, #16
     5cc:	bd80      	pop	{r7, pc}
     5ce:	46c0      	nop			; (mov r8, r8)

000005d0 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     5d0:	b580      	push	{r7, lr}
     5d2:	b084      	sub	sp, #16
     5d4:	af00      	add	r7, sp, #0
     5d6:	60f8      	str	r0, [r7, #12]
     5d8:	60b9      	str	r1, [r7, #8]
     5da:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     5dc:	4b10      	ldr	r3, [pc, #64]	; (620 <stdio_serial_init+0x50>)
     5de:	68fa      	ldr	r2, [r7, #12]
     5e0:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     5e2:	4b10      	ldr	r3, [pc, #64]	; (624 <stdio_serial_init+0x54>)
     5e4:	4a10      	ldr	r2, [pc, #64]	; (628 <stdio_serial_init+0x58>)
     5e6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     5e8:	4b10      	ldr	r3, [pc, #64]	; (62c <stdio_serial_init+0x5c>)
     5ea:	4a11      	ldr	r2, [pc, #68]	; (630 <stdio_serial_init+0x60>)
     5ec:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
     5ee:	687a      	ldr	r2, [r7, #4]
     5f0:	68b9      	ldr	r1, [r7, #8]
     5f2:	68fb      	ldr	r3, [r7, #12]
     5f4:	0018      	movs	r0, r3
     5f6:	f7ff ff9f 	bl	538 <usart_serial_init>
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     5fa:	4b0e      	ldr	r3, [pc, #56]	; (634 <stdio_serial_init+0x64>)
     5fc:	681b      	ldr	r3, [r3, #0]
     5fe:	689b      	ldr	r3, [r3, #8]
     600:	2100      	movs	r1, #0
     602:	0018      	movs	r0, r3
     604:	f025 fde8 	bl	261d8 <setbuf>
	setbuf(stdin, NULL);
     608:	4b0a      	ldr	r3, [pc, #40]	; (634 <stdio_serial_init+0x64>)
     60a:	681b      	ldr	r3, [r3, #0]
     60c:	685b      	ldr	r3, [r3, #4]
     60e:	2100      	movs	r1, #0
     610:	0018      	movs	r0, r3
     612:	f025 fde1 	bl	261d8 <setbuf>
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     616:	46c0      	nop			; (mov r8, r8)
     618:	46bd      	mov	sp, r7
     61a:	b004      	add	sp, #16
     61c:	bd80      	pop	{r7, pc}
     61e:	46c0      	nop			; (mov r8, r8)
     620:	200004f8 	.word	0x200004f8
     624:	200004f4 	.word	0x200004f4
     628:	00000565 	.word	0x00000565
     62c:	200004f0 	.word	0x200004f0
     630:	00000595 	.word	0x00000595
     634:	20000120 	.word	0x20000120

00000638 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
     638:	b580      	push	{r7, lr}
     63a:	b084      	sub	sp, #16
     63c:	af00      	add	r7, sp, #0
     63e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     640:	687b      	ldr	r3, [r7, #4]
     642:	681b      	ldr	r3, [r3, #0]
     644:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     646:	46c0      	nop			; (mov r8, r8)
     648:	68fb      	ldr	r3, [r7, #12]
     64a:	689b      	ldr	r3, [r3, #8]
     64c:	2202      	movs	r2, #2
     64e:	4013      	ands	r3, r2
     650:	d1fa      	bne.n	648 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     652:	68fb      	ldr	r3, [r7, #12]
     654:	681b      	ldr	r3, [r3, #0]
     656:	2202      	movs	r2, #2
     658:	431a      	orrs	r2, r3
     65a:	68fb      	ldr	r3, [r7, #12]
     65c:	601a      	str	r2, [r3, #0]
}
     65e:	46c0      	nop			; (mov r8, r8)
     660:	46bd      	mov	sp, r7
     662:	b004      	add	sp, #16
     664:	bd80      	pop	{r7, pc}
     666:	46c0      	nop			; (mov r8, r8)

00000668 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
     668:	b580      	push	{r7, lr}
     66a:	b082      	sub	sp, #8
     66c:	af00      	add	r7, sp, #0
     66e:	6078      	str	r0, [r7, #4]
	time->second = 0;
     670:	687b      	ldr	r3, [r7, #4]
     672:	2200      	movs	r2, #0
     674:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
     676:	687b      	ldr	r3, [r7, #4]
     678:	2200      	movs	r2, #0
     67a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	2200      	movs	r2, #0
     680:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
     682:	687b      	ldr	r3, [r7, #4]
     684:	2200      	movs	r2, #0
     686:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
     688:	687b      	ldr	r3, [r7, #4]
     68a:	2201      	movs	r2, #1
     68c:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
     68e:	687b      	ldr	r3, [r7, #4]
     690:	2201      	movs	r2, #1
     692:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
     694:	687b      	ldr	r3, [r7, #4]
     696:	22fa      	movs	r2, #250	; 0xfa
     698:	00d2      	lsls	r2, r2, #3
     69a:	80da      	strh	r2, [r3, #6]
}
     69c:	46c0      	nop			; (mov r8, r8)
     69e:	46bd      	mov	sp, r7
     6a0:	b002      	add	sp, #8
     6a2:	bd80      	pop	{r7, pc}

000006a4 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
     6a4:	b580      	push	{r7, lr}
     6a6:	b086      	sub	sp, #24
     6a8:	af00      	add	r7, sp, #0
     6aa:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
     6ac:	230c      	movs	r3, #12
     6ae:	18fb      	adds	r3, r7, r3
     6b0:	0018      	movs	r0, r3
     6b2:	f7ff ffd9 	bl	668 <rtc_calendar_get_time_defaults>

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	22a0      	movs	r2, #160	; 0xa0
     6ba:	0112      	lsls	r2, r2, #4
     6bc:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
     6be:	687b      	ldr	r3, [r7, #4]
     6c0:	2200      	movs	r2, #0
     6c2:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
     6c4:	687b      	ldr	r3, [r7, #4]
     6c6:	2200      	movs	r2, #0
     6c8:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	2200      	movs	r2, #0
     6ce:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	22fa      	movs	r2, #250	; 0xfa
     6d4:	00d2      	lsls	r2, r2, #3
     6d6:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
     6d8:	2317      	movs	r3, #23
     6da:	18fb      	adds	r3, r7, r3
     6dc:	2200      	movs	r2, #0
     6de:	701a      	strb	r2, [r3, #0]
     6e0:	e025      	b.n	72e <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
     6e2:	2317      	movs	r3, #23
     6e4:	18fb      	adds	r3, r7, r3
     6e6:	781a      	ldrb	r2, [r3, #0]
     6e8:	6879      	ldr	r1, [r7, #4]
     6ea:	2008      	movs	r0, #8
     6ec:	0013      	movs	r3, r2
     6ee:	009b      	lsls	r3, r3, #2
     6f0:	189b      	adds	r3, r3, r2
     6f2:	005b      	lsls	r3, r3, #1
     6f4:	18cb      	adds	r3, r1, r3
     6f6:	181a      	adds	r2, r3, r0
     6f8:	230c      	movs	r3, #12
     6fa:	18fb      	adds	r3, r7, r3
     6fc:	0010      	movs	r0, r2
     6fe:	0019      	movs	r1, r3
     700:	2308      	movs	r3, #8
     702:	001a      	movs	r2, r3
     704:	f024 fff3 	bl	256ee <memcpy>
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
     708:	2317      	movs	r3, #23
     70a:	18fb      	adds	r3, r7, r3
     70c:	781a      	ldrb	r2, [r3, #0]
     70e:	6879      	ldr	r1, [r7, #4]
     710:	0013      	movs	r3, r2
     712:	009b      	lsls	r3, r3, #2
     714:	189b      	adds	r3, r3, r2
     716:	005b      	lsls	r3, r3, #1
     718:	18cb      	adds	r3, r1, r3
     71a:	3310      	adds	r3, #16
     71c:	2206      	movs	r2, #6
     71e:	701a      	strb	r2, [r3, #0]
	config->clock_24h           = false;
	config->year_init_value     = 2000;
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
     720:	2317      	movs	r3, #23
     722:	18fb      	adds	r3, r7, r3
     724:	781a      	ldrb	r2, [r3, #0]
     726:	2317      	movs	r3, #23
     728:	18fb      	adds	r3, r7, r3
     72a:	3201      	adds	r2, #1
     72c:	701a      	strb	r2, [r3, #0]
     72e:	2317      	movs	r3, #23
     730:	18fb      	adds	r3, r7, r3
     732:	781b      	ldrb	r3, [r3, #0]
     734:	2b00      	cmp	r3, #0
     736:	d0d4      	beq.n	6e2 <rtc_calendar_get_config_defaults+0x3e>
		config->alarm[i].time = time;
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
	}
}
     738:	46c0      	nop			; (mov r8, r8)
     73a:	46bd      	mov	sp, r7
     73c:	b006      	add	sp, #24
     73e:	bd80      	pop	{r7, pc}

00000740 <HardFault_HandlerC>:
double current_time(int reset);
void HardFault_HandlerC(uint32_t *hardfault_args);

/* Hard fault handler */
void HardFault_HandlerC(uint32_t *hardfault_args)
{
     740:	b580      	push	{r7, lr}
     742:	b090      	sub	sp, #64	; 0x40
     744:	af00      	add	r7, sp, #0
     746:	6078      	str	r0, [r7, #4]
	volatile uint32_t _DFSR;
	volatile uint32_t _AFSR;
	volatile uint32_t _BFAR;
	volatile uint32_t _MMAR;

	stacked_r0 = ((uint32_t)hardfault_args[0]);
     748:	687b      	ldr	r3, [r7, #4]
     74a:	681b      	ldr	r3, [r3, #0]
     74c:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1 = ((uint32_t)hardfault_args[1]);
     74e:	687b      	ldr	r3, [r7, #4]
     750:	3304      	adds	r3, #4
     752:	681b      	ldr	r3, [r3, #0]
     754:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2 = ((uint32_t)hardfault_args[2]);
     756:	687b      	ldr	r3, [r7, #4]
     758:	3308      	adds	r3, #8
     75a:	681b      	ldr	r3, [r3, #0]
     75c:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3 = ((uint32_t)hardfault_args[3]);
     75e:	687b      	ldr	r3, [r7, #4]
     760:	330c      	adds	r3, #12
     762:	681b      	ldr	r3, [r3, #0]
     764:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((uint32_t)hardfault_args[4]);
     766:	687b      	ldr	r3, [r7, #4]
     768:	3310      	adds	r3, #16
     76a:	681b      	ldr	r3, [r3, #0]
     76c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr = ((uint32_t)hardfault_args[5]);
     76e:	687b      	ldr	r3, [r7, #4]
     770:	3314      	adds	r3, #20
     772:	681b      	ldr	r3, [r3, #0]
     774:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc = ((uint32_t)hardfault_args[6]);
     776:	687b      	ldr	r3, [r7, #4]
     778:	3318      	adds	r3, #24
     77a:	681b      	ldr	r3, [r3, #0]
     77c:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((uint32_t)hardfault_args[7]);
     77e:	687b      	ldr	r3, [r7, #4]
     780:	331c      	adds	r3, #28
     782:	681b      	ldr	r3, [r3, #0]
     784:	623b      	str	r3, [r7, #32]

    // Configurable Fault Status Register
    // Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile uint32_t *)(0xE000ED28)));
     786:	4b37      	ldr	r3, [pc, #220]	; (864 <HardFault_HandlerC+0x124>)
     788:	681b      	ldr	r3, [r3, #0]
     78a:	61fb      	str	r3, [r7, #28]

	// Hard Fault Status Register
	_HFSR = (*((volatile uint32_t *)(0xE000ED2C)));
     78c:	4b36      	ldr	r3, [pc, #216]	; (868 <HardFault_HandlerC+0x128>)
     78e:	681b      	ldr	r3, [r3, #0]
     790:	61bb      	str	r3, [r7, #24]

	// Debug Fault Status Register
	_DFSR = (*((volatile uint32_t *)(0xE000ED30)));
     792:	4b36      	ldr	r3, [pc, #216]	; (86c <HardFault_HandlerC+0x12c>)
     794:	681b      	ldr	r3, [r3, #0]
     796:	617b      	str	r3, [r7, #20]

	// Auxiliary Fault Status Register
	_AFSR = (*((volatile uint32_t *)(0xE000ED3C)));
     798:	4b35      	ldr	r3, [pc, #212]	; (870 <HardFault_HandlerC+0x130>)
     79a:	681b      	ldr	r3, [r3, #0]
     79c:	613b      	str	r3, [r7, #16]

	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile uint32_t *)(0xE000ED34)));
     79e:	4b35      	ldr	r3, [pc, #212]	; (874 <HardFault_HandlerC+0x134>)
     7a0:	681b      	ldr	r3, [r3, #0]
     7a2:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile uint32_t *)(0xE000ED38)));
     7a4:	4b34      	ldr	r3, [pc, #208]	; (878 <HardFault_HandlerC+0x138>)
     7a6:	681b      	ldr	r3, [r3, #0]
     7a8:	60fb      	str	r3, [r7, #12]

    printf ("\n\nHard fault handler (all numbers in hex):\n");
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <HardFault_HandlerC+0x13c>)
     7ac:	0018      	movs	r0, r3
     7ae:	f025 fce7 	bl	26180 <iprintf>
    printf ("R0 = %x\n", (unsigned int)stacked_r0);
     7b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     7b4:	4b32      	ldr	r3, [pc, #200]	; (880 <HardFault_HandlerC+0x140>)
     7b6:	0011      	movs	r1, r2
     7b8:	0018      	movs	r0, r3
     7ba:	f025 fce1 	bl	26180 <iprintf>
    printf ("R1 = %x\n", (unsigned int)stacked_r1);
     7be:	6bba      	ldr	r2, [r7, #56]	; 0x38
     7c0:	4b30      	ldr	r3, [pc, #192]	; (884 <HardFault_HandlerC+0x144>)
     7c2:	0011      	movs	r1, r2
     7c4:	0018      	movs	r0, r3
     7c6:	f025 fcdb 	bl	26180 <iprintf>
    printf ("R2 = %x\n", (unsigned int)stacked_r2);
     7ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     7cc:	4b2e      	ldr	r3, [pc, #184]	; (888 <HardFault_HandlerC+0x148>)
     7ce:	0011      	movs	r1, r2
     7d0:	0018      	movs	r0, r3
     7d2:	f025 fcd5 	bl	26180 <iprintf>
    printf ("R3 = %x\n", (unsigned int)stacked_r3);
     7d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     7d8:	4b2c      	ldr	r3, [pc, #176]	; (88c <HardFault_HandlerC+0x14c>)
     7da:	0011      	movs	r1, r2
     7dc:	0018      	movs	r0, r3
     7de:	f025 fccf 	bl	26180 <iprintf>
    printf ("R12 = %x\n", (unsigned int)stacked_r12);
     7e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     7e4:	4b2a      	ldr	r3, [pc, #168]	; (890 <HardFault_HandlerC+0x150>)
     7e6:	0011      	movs	r1, r2
     7e8:	0018      	movs	r0, r3
     7ea:	f025 fcc9 	bl	26180 <iprintf>
    printf ("LR [R14] = %x  subroutine call return address\n", (unsigned int)stacked_lr);
     7ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
     7f0:	4b28      	ldr	r3, [pc, #160]	; (894 <HardFault_HandlerC+0x154>)
     7f2:	0011      	movs	r1, r2
     7f4:	0018      	movs	r0, r3
     7f6:	f025 fcc3 	bl	26180 <iprintf>
    printf ("PC [R15] = %x  program counter\n", (unsigned int)stacked_pc);
     7fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     7fc:	4b26      	ldr	r3, [pc, #152]	; (898 <HardFault_HandlerC+0x158>)
     7fe:	0011      	movs	r1, r2
     800:	0018      	movs	r0, r3
     802:	f025 fcbd 	bl	26180 <iprintf>
    printf ("PSR = %x\n", (unsigned int)stacked_psr);
     806:	6a3a      	ldr	r2, [r7, #32]
     808:	4b24      	ldr	r3, [pc, #144]	; (89c <HardFault_HandlerC+0x15c>)
     80a:	0011      	movs	r1, r2
     80c:	0018      	movs	r0, r3
     80e:	f025 fcb7 	bl	26180 <iprintf>
    printf ("CFSR = %x\n", (unsigned int)_CFSR);
     812:	69fa      	ldr	r2, [r7, #28]
     814:	4b22      	ldr	r3, [pc, #136]	; (8a0 <HardFault_HandlerC+0x160>)
     816:	0011      	movs	r1, r2
     818:	0018      	movs	r0, r3
     81a:	f025 fcb1 	bl	26180 <iprintf>
    printf ("HFSR = %x\n", (unsigned int)_HFSR);
     81e:	69ba      	ldr	r2, [r7, #24]
     820:	4b20      	ldr	r3, [pc, #128]	; (8a4 <HardFault_HandlerC+0x164>)
     822:	0011      	movs	r1, r2
     824:	0018      	movs	r0, r3
     826:	f025 fcab 	bl	26180 <iprintf>
    printf ("DFSR = %x\n", (unsigned int)_DFSR);
     82a:	697a      	ldr	r2, [r7, #20]
     82c:	4b1e      	ldr	r3, [pc, #120]	; (8a8 <HardFault_HandlerC+0x168>)
     82e:	0011      	movs	r1, r2
     830:	0018      	movs	r0, r3
     832:	f025 fca5 	bl	26180 <iprintf>
    printf ("AFSR = %x\n", (unsigned int)_AFSR);
     836:	693a      	ldr	r2, [r7, #16]
     838:	4b1c      	ldr	r3, [pc, #112]	; (8ac <HardFault_HandlerC+0x16c>)
     83a:	0011      	movs	r1, r2
     83c:	0018      	movs	r0, r3
     83e:	f025 fc9f 	bl	26180 <iprintf>
    printf ("MMAR = %x\n", (unsigned int)_MMAR);
     842:	68ba      	ldr	r2, [r7, #8]
     844:	4b1a      	ldr	r3, [pc, #104]	; (8b0 <HardFault_HandlerC+0x170>)
     846:	0011      	movs	r1, r2
     848:	0018      	movs	r0, r3
     84a:	f025 fc99 	bl	26180 <iprintf>
    printf ("BFAR = %x\n", (unsigned int)_BFAR);
     84e:	68fa      	ldr	r2, [r7, #12]
     850:	4b18      	ldr	r3, [pc, #96]	; (8b4 <HardFault_HandlerC+0x174>)
     852:	0011      	movs	r1, r2
     854:	0018      	movs	r0, r3
     856:	f025 fc93 	bl	26180 <iprintf>

    // Break into the debugger
	__asm("BKPT #0\n");
     85a:	be00      	bkpt	0x0000
}
     85c:	46c0      	nop			; (mov r8, r8)
     85e:	46bd      	mov	sp, r7
     860:	b010      	add	sp, #64	; 0x40
     862:	bd80      	pop	{r7, pc}
     864:	e000ed28 	.word	0xe000ed28
     868:	e000ed2c 	.word	0xe000ed2c
     86c:	e000ed30 	.word	0xe000ed30
     870:	e000ed3c 	.word	0xe000ed3c
     874:	e000ed34 	.word	0xe000ed34
     878:	e000ed38 	.word	0xe000ed38
     87c:	000283c8 	.word	0x000283c8
     880:	000283f4 	.word	0x000283f4
     884:	00028400 	.word	0x00028400
     888:	0002840c 	.word	0x0002840c
     88c:	00028418 	.word	0x00028418
     890:	00028424 	.word	0x00028424
     894:	00028430 	.word	0x00028430
     898:	00028460 	.word	0x00028460
     89c:	00028480 	.word	0x00028480
     8a0:	0002848c 	.word	0x0002848c
     8a4:	00028498 	.word	0x00028498
     8a8:	000284a4 	.word	0x000284a4
     8ac:	000284b0 	.word	0x000284b0
     8b0:	000284bc 	.word	0x000284bc
     8b4:	000284c8 	.word	0x000284c8

000008b8 <HardFault_Handler>:

__attribute__( ( naked ) )
void HardFault_Handler(void)
{
	__asm(
     8b8:	2004      	movs	r0, #4
     8ba:	4671      	mov	r1, lr
     8bc:	4208      	tst	r0, r1
     8be:	d002      	beq.n	8c6 <using_msp>
     8c0:	f3ef 8009 	mrs	r0, PSP
     8c4:	e001      	b.n	8ca <call_c>

000008c6 <using_msp>:
     8c6:	f3ef 8008 	mrs	r0, MSP

000008ca <call_c>:
     8ca:	4a01      	ldr	r2, [pc, #4]	; (8d0 <call_c+0x6>)
     8cc:	4710      	bx	r2
		"  mrs r0, msp         \n"
		"call_c:               \n"
		"  ldr r2, =HardFault_HandlerC \n"
		"  bx r2               \n"
	);
}
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	00000741 	.word	0x00000741

000008d4 <tcc_callback_overflow>:
    port_pin_toggle_output_level(LED0_PIN);
}
#else
static void tcc_callback_overflow(
		struct tcc_module *const module_inst)
{
     8d4:	b580      	push	{r7, lr}
     8d6:	b082      	sub	sp, #8
     8d8:	af00      	add	r7, sp, #0
     8da:	6078      	str	r0, [r7, #4]
	secondCount++;
     8dc:	4b05      	ldr	r3, [pc, #20]	; (8f4 <tcc_callback_overflow+0x20>)
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	1c5a      	adds	r2, r3, #1
     8e2:	4b04      	ldr	r3, [pc, #16]	; (8f4 <tcc_callback_overflow+0x20>)
     8e4:	601a      	str	r2, [r3, #0]
    port_pin_toggle_output_level(LED0_PIN);
     8e6:	203e      	movs	r0, #62	; 0x3e
     8e8:	f7ff fd48 	bl	37c <port_pin_toggle_output_level>
}
     8ec:	46c0      	nop			; (mov r8, r8)
     8ee:	46bd      	mov	sp, r7
     8f0:	b002      	add	sp, #8
     8f2:	bd80      	pop	{r7, pc}
     8f4:	200002e8 	.word	0x200002e8

000008f8 <configure_tcc>:
#ifndef USE_RTC_COUNTER
/**
 * Configure TCC
 */
static void configure_tcc(void)
{
     8f8:	b580      	push	{r7, lr}
     8fa:	b0aa      	sub	sp, #168	; 0xa8
     8fc:	af00      	add	r7, sp, #0
	struct tcc_config tcc_conf;
	tcc_get_config_defaults(&tcc_conf, TCC0);
     8fe:	4a14      	ldr	r2, [pc, #80]	; (950 <configure_tcc+0x58>)
     900:	1d3b      	adds	r3, r7, #4
     902:	0011      	movs	r1, r2
     904:	0018      	movs	r0, r3
     906:	f001 ff1d 	bl	2744 <tcc_get_config_defaults>

    /**
     * Timer period is 1ms = Prescaler(16) * Period(2000) / Clock(32khz).
     */
	tcc_conf.counter.clock_source = GCLK_GENERATOR_1;
     90a:	1d3b      	adds	r3, r7, #4
     90c:	2201      	movs	r2, #1
     90e:	729a      	strb	r2, [r3, #10]
	tcc_conf.counter.period = 2000;
     910:	1d3b      	adds	r3, r7, #4
     912:	22fa      	movs	r2, #250	; 0xfa
     914:	00d2      	lsls	r2, r2, #3
     916:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV16;
     918:	1d3b      	adds	r3, r7, #4
     91a:	2204      	movs	r2, #4
     91c:	72da      	strb	r2, [r3, #11]
	tcc_init(&tcc_instance, TCC0, &tcc_conf);
     91e:	1d3a      	adds	r2, r7, #4
     920:	490b      	ldr	r1, [pc, #44]	; (950 <configure_tcc+0x58>)
     922:	4b0c      	ldr	r3, [pc, #48]	; (954 <configure_tcc+0x5c>)
     924:	0018      	movs	r0, r3
     926:	f002 fa39 	bl	2d9c <tcc_init>
	tcc_enable(&tcc_instance);
     92a:	4b0a      	ldr	r3, [pc, #40]	; (954 <configure_tcc+0x5c>)
     92c:	0018      	movs	r0, r3
     92e:	f7ff fe83 	bl	638 <tcc_enable>

	tcc_register_callback(&tcc_instance, tcc_callback_overflow, TCC_CALLBACK_OVERFLOW);
     932:	4909      	ldr	r1, [pc, #36]	; (958 <configure_tcc+0x60>)
     934:	4b07      	ldr	r3, [pc, #28]	; (954 <configure_tcc+0x5c>)
     936:	2200      	movs	r2, #0
     938:	0018      	movs	r0, r3
     93a:	f002 fc5b 	bl	31f4 <tcc_register_callback>
    tcc_enable_callback(&tcc_instance, TCC_CALLBACK_OVERFLOW);
     93e:	4b05      	ldr	r3, [pc, #20]	; (954 <configure_tcc+0x5c>)
     940:	2100      	movs	r1, #0
     942:	0018      	movs	r0, r3
     944:	f002 fc76 	bl	3234 <tcc_enable_callback>
}
     948:	46c0      	nop			; (mov r8, r8)
     94a:	46bd      	mov	sp, r7
     94c:	b02a      	add	sp, #168	; 0xa8
     94e:	bd80      	pop	{r7, pc}
     950:	42002000 	.word	0x42002000
     954:	20000488 	.word	0x20000488
     958:	000008d5 	.word	0x000008d5

0000095c <configure_rtc_calendar>:
                     (__DATE__[1]+__DATE__[2] == 218) ? 5  : (__DATE__[1]+__DATE__[2] == 227) ? 6  : \
                     (__DATE__[1]+__DATE__[2] == 225) ? 7  : (__DATE__[1]+__DATE__[2] == 220) ? 8  : \
                     (__DATE__[1]+__DATE__[2] == 213) ? 9  : (__DATE__[1]+__DATE__[2] == 215) ? 10 : \
                     (__DATE__[1]+__DATE__[2] == 229) ? 11 : (__DATE__[1]+__DATE__[2] == 200) ? 12 : 0)
static void configure_rtc_calendar(void)
{
     95c:	b580      	push	{r7, lr}
     95e:	b088      	sub	sp, #32
     960:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	struct rtc_calendar_time time;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
     962:	230c      	movs	r3, #12
     964:	18fb      	adds	r3, r7, r3
     966:	0018      	movs	r0, r3
     968:	f7ff fe9c 	bl	6a4 <rtc_calendar_get_config_defaults>
	alarm.minute = 0;
	alarm.second = 4;
	config_rtc_calendar.alarm[0].time = alarm;
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
#endif
	config_rtc_calendar.clock_24h     = true;
     96c:	230c      	movs	r3, #12
     96e:	18fb      	adds	r3, r7, r3
     970:	2201      	movs	r2, #1
     972:	711a      	strb	r2, [r3, #4]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
     974:	230c      	movs	r3, #12
     976:	18fa      	adds	r2, r7, r3
     978:	4967      	ldr	r1, [pc, #412]	; (b18 <configure_rtc_calendar+0x1bc>)
     97a:	4b68      	ldr	r3, [pc, #416]	; (b1c <configure_rtc_calendar+0x1c0>)
     97c:	0018      	movs	r0, r3
     97e:	f001 fda1 	bl	24c4 <rtc_calendar_init>
	rtc_calendar_enable(&rtc_instance);
     982:	4b66      	ldr	r3, [pc, #408]	; (b1c <configure_rtc_calendar+0x1c0>)
     984:	0018      	movs	r0, r3
     986:	f001 fc4f 	bl	2228 <rtc_calendar_enable>

	/* Set current time. */
	time.year   = BUILD_YEAR;
     98a:	2332      	movs	r3, #50	; 0x32
     98c:	b29b      	uxth	r3, r3
     98e:	22fa      	movs	r2, #250	; 0xfa
     990:	0092      	lsls	r2, r2, #2
     992:	4353      	muls	r3, r2
     994:	b29a      	uxth	r2, r3
     996:	2330      	movs	r3, #48	; 0x30
     998:	b29b      	uxth	r3, r3
     99a:	2164      	movs	r1, #100	; 0x64
     99c:	434b      	muls	r3, r1
     99e:	b29b      	uxth	r3, r3
     9a0:	18d3      	adds	r3, r2, r3
     9a2:	b29a      	uxth	r2, r3
     9a4:	2331      	movs	r3, #49	; 0x31
     9a6:	b29b      	uxth	r3, r3
     9a8:	1c19      	adds	r1, r3, #0
     9aa:	0089      	lsls	r1, r1, #2
     9ac:	18cb      	adds	r3, r1, r3
     9ae:	18db      	adds	r3, r3, r3
     9b0:	b29b      	uxth	r3, r3
     9b2:	18d3      	adds	r3, r2, r3
     9b4:	b29a      	uxth	r2, r3
     9b6:	2339      	movs	r3, #57	; 0x39
     9b8:	b29b      	uxth	r3, r3
     9ba:	18d3      	adds	r3, r2, r3
     9bc:	b29b      	uxth	r3, r3
     9be:	4a58      	ldr	r2, [pc, #352]	; (b20 <configure_rtc_calendar+0x1c4>)
     9c0:	4694      	mov	ip, r2
     9c2:	4463      	add	r3, ip
     9c4:	b29a      	uxth	r2, r3
     9c6:	1d3b      	adds	r3, r7, #4
     9c8:	80da      	strh	r2, [r3, #6]
	time.month  = BUILD_MONTH;
     9ca:	2370      	movs	r3, #112	; 0x70
     9cc:	001a      	movs	r2, r3
     9ce:	2372      	movs	r3, #114	; 0x72
     9d0:	18d3      	adds	r3, r2, r3
     9d2:	2bcf      	cmp	r3, #207	; 0xcf
     9d4:	d059      	beq.n	a8a <configure_rtc_calendar+0x12e>
     9d6:	2370      	movs	r3, #112	; 0x70
     9d8:	001a      	movs	r2, r3
     9da:	2372      	movs	r3, #114	; 0x72
     9dc:	18d3      	adds	r3, r2, r3
     9de:	2bc7      	cmp	r3, #199	; 0xc7
     9e0:	d051      	beq.n	a86 <configure_rtc_calendar+0x12a>
     9e2:	2370      	movs	r3, #112	; 0x70
     9e4:	001a      	movs	r2, r3
     9e6:	2372      	movs	r3, #114	; 0x72
     9e8:	18d3      	adds	r3, r2, r3
     9ea:	2bd3      	cmp	r3, #211	; 0xd3
     9ec:	d049      	beq.n	a82 <configure_rtc_calendar+0x126>
     9ee:	2370      	movs	r3, #112	; 0x70
     9f0:	001a      	movs	r2, r3
     9f2:	2372      	movs	r3, #114	; 0x72
     9f4:	18d3      	adds	r3, r2, r3
     9f6:	2be2      	cmp	r3, #226	; 0xe2
     9f8:	d041      	beq.n	a7e <configure_rtc_calendar+0x122>
     9fa:	2370      	movs	r3, #112	; 0x70
     9fc:	001a      	movs	r2, r3
     9fe:	2372      	movs	r3, #114	; 0x72
     a00:	18d3      	adds	r3, r2, r3
     a02:	2bda      	cmp	r3, #218	; 0xda
     a04:	d039      	beq.n	a7a <configure_rtc_calendar+0x11e>
     a06:	2370      	movs	r3, #112	; 0x70
     a08:	001a      	movs	r2, r3
     a0a:	2372      	movs	r3, #114	; 0x72
     a0c:	18d3      	adds	r3, r2, r3
     a0e:	2be3      	cmp	r3, #227	; 0xe3
     a10:	d031      	beq.n	a76 <configure_rtc_calendar+0x11a>
     a12:	2370      	movs	r3, #112	; 0x70
     a14:	001a      	movs	r2, r3
     a16:	2372      	movs	r3, #114	; 0x72
     a18:	18d3      	adds	r3, r2, r3
     a1a:	2be1      	cmp	r3, #225	; 0xe1
     a1c:	d029      	beq.n	a72 <configure_rtc_calendar+0x116>
     a1e:	2370      	movs	r3, #112	; 0x70
     a20:	001a      	movs	r2, r3
     a22:	2372      	movs	r3, #114	; 0x72
     a24:	18d3      	adds	r3, r2, r3
     a26:	2bdc      	cmp	r3, #220	; 0xdc
     a28:	d021      	beq.n	a6e <configure_rtc_calendar+0x112>
     a2a:	2370      	movs	r3, #112	; 0x70
     a2c:	001a      	movs	r2, r3
     a2e:	2372      	movs	r3, #114	; 0x72
     a30:	18d3      	adds	r3, r2, r3
     a32:	2bd5      	cmp	r3, #213	; 0xd5
     a34:	d019      	beq.n	a6a <configure_rtc_calendar+0x10e>
     a36:	2370      	movs	r3, #112	; 0x70
     a38:	001a      	movs	r2, r3
     a3a:	2372      	movs	r3, #114	; 0x72
     a3c:	18d3      	adds	r3, r2, r3
     a3e:	2bd7      	cmp	r3, #215	; 0xd7
     a40:	d011      	beq.n	a66 <configure_rtc_calendar+0x10a>
     a42:	2370      	movs	r3, #112	; 0x70
     a44:	001a      	movs	r2, r3
     a46:	2372      	movs	r3, #114	; 0x72
     a48:	18d3      	adds	r3, r2, r3
     a4a:	2be5      	cmp	r3, #229	; 0xe5
     a4c:	d009      	beq.n	a62 <configure_rtc_calendar+0x106>
     a4e:	2370      	movs	r3, #112	; 0x70
     a50:	001a      	movs	r2, r3
     a52:	2372      	movs	r3, #114	; 0x72
     a54:	18d3      	adds	r3, r2, r3
     a56:	2bc8      	cmp	r3, #200	; 0xc8
     a58:	d101      	bne.n	a5e <configure_rtc_calendar+0x102>
     a5a:	230c      	movs	r3, #12
     a5c:	e016      	b.n	a8c <configure_rtc_calendar+0x130>
     a5e:	2300      	movs	r3, #0
     a60:	e014      	b.n	a8c <configure_rtc_calendar+0x130>
     a62:	230b      	movs	r3, #11
     a64:	e012      	b.n	a8c <configure_rtc_calendar+0x130>
     a66:	230a      	movs	r3, #10
     a68:	e010      	b.n	a8c <configure_rtc_calendar+0x130>
     a6a:	2309      	movs	r3, #9
     a6c:	e00e      	b.n	a8c <configure_rtc_calendar+0x130>
     a6e:	2308      	movs	r3, #8
     a70:	e00c      	b.n	a8c <configure_rtc_calendar+0x130>
     a72:	2307      	movs	r3, #7
     a74:	e00a      	b.n	a8c <configure_rtc_calendar+0x130>
     a76:	2306      	movs	r3, #6
     a78:	e008      	b.n	a8c <configure_rtc_calendar+0x130>
     a7a:	2305      	movs	r3, #5
     a7c:	e006      	b.n	a8c <configure_rtc_calendar+0x130>
     a7e:	2304      	movs	r3, #4
     a80:	e004      	b.n	a8c <configure_rtc_calendar+0x130>
     a82:	2303      	movs	r3, #3
     a84:	e002      	b.n	a8c <configure_rtc_calendar+0x130>
     a86:	2302      	movs	r3, #2
     a88:	e000      	b.n	a8c <configure_rtc_calendar+0x130>
     a8a:	2301      	movs	r3, #1
     a8c:	1d3a      	adds	r2, r7, #4
     a8e:	7153      	strb	r3, [r2, #5]
	time.day    = BUILD_DAY;
     a90:	2320      	movs	r3, #32
     a92:	1c1a      	adds	r2, r3, #0
     a94:	0092      	lsls	r2, r2, #2
     a96:	18d3      	adds	r3, r2, r3
     a98:	18db      	adds	r3, r3, r3
     a9a:	b2db      	uxtb	r3, r3
     a9c:	2235      	movs	r2, #53	; 0x35
     a9e:	189b      	adds	r3, r3, r2
     aa0:	b2da      	uxtb	r2, r3
     aa2:	2320      	movs	r3, #32
     aa4:	2b20      	cmp	r3, #32
     aa6:	d101      	bne.n	aac <configure_rtc_calendar+0x150>
     aa8:	2370      	movs	r3, #112	; 0x70
     aaa:	e000      	b.n	aae <configure_rtc_calendar+0x152>
     aac:	2310      	movs	r3, #16
     aae:	1ad3      	subs	r3, r2, r3
     ab0:	b2da      	uxtb	r2, r3
     ab2:	1d3b      	adds	r3, r7, #4
     ab4:	711a      	strb	r2, [r3, #4]
	time.hour   = BUILD_HOUR;
     ab6:	2330      	movs	r3, #48	; 0x30
     ab8:	1c1a      	adds	r2, r3, #0
     aba:	0092      	lsls	r2, r2, #2
     abc:	18d3      	adds	r3, r2, r3
     abe:	18db      	adds	r3, r3, r3
     ac0:	b2db      	uxtb	r3, r3
     ac2:	2237      	movs	r2, #55	; 0x37
     ac4:	189b      	adds	r3, r3, r2
     ac6:	b2db      	uxtb	r3, r3
     ac8:	3b10      	subs	r3, #16
     aca:	b2da      	uxtb	r2, r3
     acc:	1d3b      	adds	r3, r7, #4
     ace:	709a      	strb	r2, [r3, #2]
	time.minute = BUILD_MINUTE;
     ad0:	2330      	movs	r3, #48	; 0x30
     ad2:	1c1a      	adds	r2, r3, #0
     ad4:	0092      	lsls	r2, r2, #2
     ad6:	18d3      	adds	r3, r2, r3
     ad8:	18db      	adds	r3, r3, r3
     ada:	b2db      	uxtb	r3, r3
     adc:	2230      	movs	r2, #48	; 0x30
     ade:	189b      	adds	r3, r3, r2
     ae0:	b2db      	uxtb	r3, r3
     ae2:	3b10      	subs	r3, #16
     ae4:	b2da      	uxtb	r2, r3
     ae6:	1d3b      	adds	r3, r7, #4
     ae8:	705a      	strb	r2, [r3, #1]
	time.second = BUILD_SECOND;
     aea:	2334      	movs	r3, #52	; 0x34
     aec:	1c1a      	adds	r2, r3, #0
     aee:	0092      	lsls	r2, r2, #2
     af0:	18d3      	adds	r3, r2, r3
     af2:	18db      	adds	r3, r3, r3
     af4:	b2db      	uxtb	r3, r3
     af6:	2233      	movs	r2, #51	; 0x33
     af8:	189b      	adds	r3, r3, r2
     afa:	b2db      	uxtb	r3, r3
     afc:	3b10      	subs	r3, #16
     afe:	b2da      	uxtb	r2, r3
     b00:	1d3b      	adds	r3, r7, #4
     b02:	701a      	strb	r2, [r3, #0]
	rtc_calendar_set_time(&rtc_instance, &time);
     b04:	1d3a      	adds	r2, r7, #4
     b06:	4b05      	ldr	r3, [pc, #20]	; (b1c <configure_rtc_calendar+0x1c0>)
     b08:	0011      	movs	r1, r2
     b0a:	0018      	movs	r0, r3
     b0c:	f001 fd18 	bl	2540 <rtc_calendar_set_time>
}
     b10:	46c0      	nop			; (mov r8, r8)
     b12:	46bd      	mov	sp, r7
     b14:	b008      	add	sp, #32
     b16:	bd80      	pop	{r7, pc}
     b18:	40001400 	.word	0x40001400
     b1c:	20000480 	.word	0x20000480
     b20:	00002fb0 	.word	0x00002fb0

00000b24 <configure_console>:

/**
 *  Configure UART console.
 */
static void configure_console(void)
{
     b24:	b580      	push	{r7, lr}
     b26:	b090      	sub	sp, #64	; 0x40
     b28:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
     b2a:	003b      	movs	r3, r7
     b2c:	0018      	movs	r0, r3
     b2e:	f7ff fc85 	bl	43c <usart_get_config_defaults>
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
     b32:	003b      	movs	r3, r7
     b34:	2280      	movs	r2, #128	; 0x80
     b36:	0352      	lsls	r2, r2, #13
     b38:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
     b3a:	003b      	movs	r3, r7
     b3c:	4a0f      	ldr	r2, [pc, #60]	; (b7c <configure_console+0x58>)
     b3e:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
     b40:	003b      	movs	r3, r7
     b42:	4a0f      	ldr	r2, [pc, #60]	; (b80 <configure_console+0x5c>)
     b44:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
     b46:	003b      	movs	r3, r7
     b48:	2201      	movs	r2, #1
     b4a:	4252      	negs	r2, r2
     b4c:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
     b4e:	003b      	movs	r3, r7
     b50:	2201      	movs	r2, #1
     b52:	4252      	negs	r2, r2
     b54:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
     b56:	003b      	movs	r3, r7
     b58:	22e1      	movs	r2, #225	; 0xe1
     b5a:	0252      	lsls	r2, r2, #9
     b5c:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
     b5e:	003a      	movs	r2, r7
     b60:	4908      	ldr	r1, [pc, #32]	; (b84 <configure_console+0x60>)
     b62:	4b09      	ldr	r3, [pc, #36]	; (b88 <configure_console+0x64>)
     b64:	0018      	movs	r0, r3
     b66:	f7ff fd33 	bl	5d0 <stdio_serial_init>
	usart_enable(&cdc_uart_module);
     b6a:	4b07      	ldr	r3, [pc, #28]	; (b88 <configure_console+0x64>)
     b6c:	0018      	movs	r0, r3
     b6e:	f7ff fcc5 	bl	4fc <usart_enable>
}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	46bd      	mov	sp, r7
     b76:	b010      	add	sp, #64	; 0x40
     b78:	bd80      	pop	{r7, pc}
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	00160002 	.word	0x00160002
     b80:	00170002 	.word	0x00170002
     b84:	42001400 	.word	0x42001400
     b88:	200002b4 	.word	0x200002b4

00000b8c <main>:
} func_args;

static func_args args = { 0 };

int main(void)
{
     b8c:	b590      	push	{r4, r7, lr}
     b8e:	b08d      	sub	sp, #52	; 0x34
     b90:	af00      	add	r7, sp, #0
    int test_num = 0;
     b92:	2300      	movs	r3, #0
     b94:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint8_t welcomeStr[] = "Atmel SAMD21 wolfCrypt Test/Benchmark\r\n";
     b96:	1d3b      	adds	r3, r7, #4
     b98:	4a2e      	ldr	r2, [pc, #184]	; (c54 <main+0xc8>)
     b9a:	ca13      	ldmia	r2!, {r0, r1, r4}
     b9c:	c313      	stmia	r3!, {r0, r1, r4}
     b9e:	ca13      	ldmia	r2!, {r0, r1, r4}
     ba0:	c313      	stmia	r3!, {r0, r1, r4}
     ba2:	ca13      	ldmia	r2!, {r0, r1, r4}
     ba4:	c313      	stmia	r3!, {r0, r1, r4}
     ba6:	6812      	ldr	r2, [r2, #0]
     ba8:	601a      	str	r2, [r3, #0]
	struct port_config pin;

	/* Initialize system */
	system_init();
     baa:	f004 f93d 	bl	4e28 <system_init>
    delay_init();
     bae:	f7ff fb15 	bl	1dc <delay_init>

#ifdef DEBUG_CLOCKS
    clock_debug_init();
#endif

	configure_console();
     bb2:	f7ff ffb7 	bl	b24 <configure_console>

#ifdef USE_RTC_COUNTER
    configure_rtc_count();
#else
    configure_tcc();
     bb6:	f7ff fe9f 	bl	8f8 <configure_tcc>
    configure_rtc_calendar();
     bba:	f7ff fecf 	bl	95c <configure_rtc_calendar>
#endif

    system_interrupt_enable_global();
     bbe:	f7ff fbf9 	bl	3b4 <system_interrupt_enable_global>

    /* Configure LED */
	port_get_config_defaults(&pin);
     bc2:	003b      	movs	r3, r7
     bc4:	0018      	movs	r0, r3
     bc6:	f7ff fb9f 	bl	308 <port_get_config_defaults>
	pin.direction = PORT_PIN_DIR_OUTPUT;
     bca:	003b      	movs	r3, r7
     bcc:	2201      	movs	r2, #1
     bce:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED0_PIN, &pin);
     bd0:	003b      	movs	r3, r7
     bd2:	0019      	movs	r1, r3
     bd4:	203e      	movs	r0, #62	; 0x3e
     bd6:	f000 f929 	bl	e2c <port_pin_set_config>
	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
     bda:	2101      	movs	r1, #1
     bdc:	203e      	movs	r0, #62	; 0x3e
     bde:	f7ff fba5 	bl	32c <port_pin_set_output_level>

    /* Send welcome message to UART */
	usart_write_buffer_wait(&cdc_uart_module, welcomeStr, sizeof(welcomeStr));
     be2:	1d39      	adds	r1, r7, #4
     be4:	4b1c      	ldr	r3, [pc, #112]	; (c58 <main+0xcc>)
     be6:	2228      	movs	r2, #40	; 0x28
     be8:	0018      	movs	r0, r3
     bea:	f002 ff4d 	bl	3a88 <usart_write_buffer_wait>

    wolfCrypt_Init();
     bee:	f004 fd27 	bl	5640 <wolfCrypt_Init>

    do
    {
#ifndef NO_CRYPT_TEST
        printf("\nCrypt Test %d:\n", test_num);
     bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     bf4:	4b19      	ldr	r3, [pc, #100]	; (c5c <main+0xd0>)
     bf6:	0011      	movs	r1, r2
     bf8:	0018      	movs	r0, r3
     bfa:	f025 fac1 	bl	26180 <iprintf>
        wolfcrypt_test(&args);
     bfe:	4b18      	ldr	r3, [pc, #96]	; (c60 <main+0xd4>)
     c00:	0018      	movs	r0, r3
     c02:	f010 f85b 	bl	10cbc <wolfcrypt_test>
        printf("Crypt Test %d: Return code %d\n", test_num, args.return_code);
     c06:	4b16      	ldr	r3, [pc, #88]	; (c60 <main+0xd4>)
     c08:	689a      	ldr	r2, [r3, #8]
     c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     c0c:	4b15      	ldr	r3, [pc, #84]	; (c64 <main+0xd8>)
     c0e:	0018      	movs	r0, r3
     c10:	f025 fab6 	bl	26180 <iprintf>
#endif

#ifndef NO_CRYPT_BENCHMARK
        printf("\nBenchmark Test %d:\n", test_num);
     c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c16:	4b14      	ldr	r3, [pc, #80]	; (c68 <main+0xdc>)
     c18:	0011      	movs	r1, r2
     c1a:	0018      	movs	r0, r3
     c1c:	f025 fab0 	bl	26180 <iprintf>
        benchmark_test(&args);
     c20:	4b0f      	ldr	r3, [pc, #60]	; (c60 <main+0xd4>)
     c22:	0018      	movs	r0, r3
     c24:	f016 fde4 	bl	177f0 <benchmark_test>
        printf("Benchmark Test %d: Return code %d\n", test_num, args.return_code);
     c28:	4b0d      	ldr	r3, [pc, #52]	; (c60 <main+0xd4>)
     c2a:	689a      	ldr	r2, [r3, #8]
     c2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     c2e:	4b0f      	ldr	r3, [pc, #60]	; (c6c <main+0xe0>)
     c30:	0018      	movs	r0, r3
     c32:	f025 faa5 	bl	26180 <iprintf>
#endif

        test_num++;
     c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c38:	3301      	adds	r3, #1
     c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    } while(args.return_code == 0);
     c3c:	4b08      	ldr	r3, [pc, #32]	; (c60 <main+0xd4>)
     c3e:	689b      	ldr	r3, [r3, #8]
     c40:	2b00      	cmp	r3, #0
     c42:	d0d6      	beq.n	bf2 <main+0x66>

    wolfCrypt_Cleanup();
     c44:	f004 fd18 	bl	5678 <wolfCrypt_Cleanup>

    return 0;
     c48:	2300      	movs	r3, #0
}
     c4a:	0018      	movs	r0, r3
     c4c:	46bd      	mov	sp, r7
     c4e:	b00d      	add	sp, #52	; 0x34
     c50:	bd90      	pop	{r4, r7, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	00028544 	.word	0x00028544
     c58:	200002b4 	.word	0x200002b4
     c5c:	000284d4 	.word	0x000284d4
     c60:	200002ec 	.word	0x200002ec
     c64:	000284e8 	.word	0x000284e8
     c68:	00028508 	.word	0x00028508
     c6c:	00028520 	.word	0x00028520

00000c70 <current_time>:

double current_time(int reset)
{
     c70:	b5b0      	push	{r4, r5, r7, lr}
     c72:	b084      	sub	sp, #16
     c74:	af00      	add	r7, sp, #0
     c76:	6078      	str	r0, [r7, #4]
#ifdef USE_RTC_COUNTER
    uint32_t timer = rtc_count_get_count(&rtc_instance);
#else
    uint32_t timer = tcc_get_count_value(&tcc_instance);
     c78:	4b11      	ldr	r3, [pc, #68]	; (cc0 <current_time+0x50>)
     c7a:	0018      	movs	r0, r3
     c7c:	f002 fa5c 	bl	3138 <tcc_get_count_value>
     c80:	0003      	movs	r3, r0
     c82:	60fb      	str	r3, [r7, #12]
    timer /= 2;
     c84:	68fb      	ldr	r3, [r7, #12]
     c86:	085b      	lsrs	r3, r3, #1
     c88:	60fb      	str	r3, [r7, #12]
#endif
    //printf("seconds=%lu, timer=%lu\n", secondCount, timer);
    return (double)secondCount + (((double)timer) / 1000);
     c8a:	4b0e      	ldr	r3, [pc, #56]	; (cc4 <current_time+0x54>)
     c8c:	681b      	ldr	r3, [r3, #0]
     c8e:	0018      	movs	r0, r3
     c90:	f024 fc5a 	bl	25548 <__aeabi_ui2d>
     c94:	0004      	movs	r4, r0
     c96:	000d      	movs	r5, r1
     c98:	68f8      	ldr	r0, [r7, #12]
     c9a:	f024 fc55 	bl	25548 <__aeabi_ui2d>
     c9e:	2200      	movs	r2, #0
     ca0:	4b09      	ldr	r3, [pc, #36]	; (cc8 <current_time+0x58>)
     ca2:	f023 f9e7 	bl	24074 <__aeabi_ddiv>
     ca6:	0002      	movs	r2, r0
     ca8:	000b      	movs	r3, r1
     caa:	0020      	movs	r0, r4
     cac:	0029      	movs	r1, r5
     cae:	f022 feb5 	bl	23a1c <__aeabi_dadd>
     cb2:	0003      	movs	r3, r0
     cb4:	000c      	movs	r4, r1
}
     cb6:	0018      	movs	r0, r3
     cb8:	0021      	movs	r1, r4
     cba:	46bd      	mov	sp, r7
     cbc:	b004      	add	sp, #16
     cbe:	bdb0      	pop	{r4, r5, r7, pc}
     cc0:	20000488 	.word	0x20000488
     cc4:	200002e8 	.word	0x200002e8
     cc8:	408f4000 	.word	0x408f4000

00000ccc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     ccc:	b580      	push	{r7, lr}
     cce:	b084      	sub	sp, #16
     cd0:	af00      	add	r7, sp, #0
     cd2:	0002      	movs	r2, r0
     cd4:	1dfb      	adds	r3, r7, #7
     cd6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     cd8:	230f      	movs	r3, #15
     cda:	18fb      	adds	r3, r7, r3
     cdc:	1dfa      	adds	r2, r7, #7
     cde:	7812      	ldrb	r2, [r2, #0]
     ce0:	09d2      	lsrs	r2, r2, #7
     ce2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     ce4:	230e      	movs	r3, #14
     ce6:	18fb      	adds	r3, r7, r3
     ce8:	1dfa      	adds	r2, r7, #7
     cea:	7812      	ldrb	r2, [r2, #0]
     cec:	0952      	lsrs	r2, r2, #5
     cee:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     cf0:	4b0d      	ldr	r3, [pc, #52]	; (d28 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     cf2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     cf4:	230f      	movs	r3, #15
     cf6:	18fb      	adds	r3, r7, r3
     cf8:	781b      	ldrb	r3, [r3, #0]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d10f      	bne.n	d1e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     cfe:	230f      	movs	r3, #15
     d00:	18fb      	adds	r3, r7, r3
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	009b      	lsls	r3, r3, #2
     d06:	2210      	movs	r2, #16
     d08:	4694      	mov	ip, r2
     d0a:	44bc      	add	ip, r7
     d0c:	4463      	add	r3, ip
     d0e:	3b08      	subs	r3, #8
     d10:	681a      	ldr	r2, [r3, #0]
     d12:	230e      	movs	r3, #14
     d14:	18fb      	adds	r3, r7, r3
     d16:	781b      	ldrb	r3, [r3, #0]
     d18:	01db      	lsls	r3, r3, #7
     d1a:	18d3      	adds	r3, r2, r3
     d1c:	e000      	b.n	d20 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     d1e:	2300      	movs	r3, #0
	}
}
     d20:	0018      	movs	r0, r3
     d22:	46bd      	mov	sp, r7
     d24:	b004      	add	sp, #16
     d26:	bd80      	pop	{r7, pc}
     d28:	41004400 	.word	0x41004400

00000d2c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     d2c:	b580      	push	{r7, lr}
     d2e:	b082      	sub	sp, #8
     d30:	af00      	add	r7, sp, #0
     d32:	0002      	movs	r2, r0
     d34:	1dfb      	adds	r3, r7, #7
     d36:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     d38:	1dfb      	adds	r3, r7, #7
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	0018      	movs	r0, r3
     d3e:	f7ff ffc5 	bl	ccc <system_pinmux_get_group_from_gpio_pin>
     d42:	0003      	movs	r3, r0
}
     d44:	0018      	movs	r0, r3
     d46:	46bd      	mov	sp, r7
     d48:	b002      	add	sp, #8
     d4a:	bd80      	pop	{r7, pc}

00000d4c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     d4c:	b580      	push	{r7, lr}
     d4e:	b082      	sub	sp, #8
     d50:	af00      	add	r7, sp, #0
     d52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	2200      	movs	r2, #0
     d58:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     d5a:	687b      	ldr	r3, [r7, #4]
     d5c:	2201      	movs	r2, #1
     d5e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	2200      	movs	r2, #0
     d64:	709a      	strb	r2, [r3, #2]
}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	46bd      	mov	sp, r7
     d6a:	b002      	add	sp, #8
     d6c:	bd80      	pop	{r7, pc}
     d6e:	46c0      	nop			; (mov r8, r8)

00000d70 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     d70:	b580      	push	{r7, lr}
     d72:	b084      	sub	sp, #16
     d74:	af00      	add	r7, sp, #0
     d76:	0002      	movs	r2, r0
     d78:	1dfb      	adds	r3, r7, #7
     d7a:	701a      	strb	r2, [r3, #0]
     d7c:	1dbb      	adds	r3, r7, #6
     d7e:	1c0a      	adds	r2, r1, #0
     d80:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     d82:	1dfb      	adds	r3, r7, #7
     d84:	781b      	ldrb	r3, [r3, #0]
     d86:	0018      	movs	r0, r3
     d88:	f7ff ffd0 	bl	d2c <port_get_group_from_gpio_pin>
     d8c:	0003      	movs	r3, r0
     d8e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d90:	1dfb      	adds	r3, r7, #7
     d92:	781b      	ldrb	r3, [r3, #0]
     d94:	221f      	movs	r2, #31
     d96:	4013      	ands	r3, r2
     d98:	2201      	movs	r2, #1
     d9a:	409a      	lsls	r2, r3
     d9c:	0013      	movs	r3, r2
     d9e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     da0:	1dbb      	adds	r3, r7, #6
     da2:	781b      	ldrb	r3, [r3, #0]
     da4:	2b00      	cmp	r3, #0
     da6:	d003      	beq.n	db0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     da8:	68fb      	ldr	r3, [r7, #12]
     daa:	68ba      	ldr	r2, [r7, #8]
     dac:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     dae:	e002      	b.n	db6 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     db0:	68fb      	ldr	r3, [r7, #12]
     db2:	68ba      	ldr	r2, [r7, #8]
     db4:	615a      	str	r2, [r3, #20]
	}
}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	46bd      	mov	sp, r7
     dba:	b004      	add	sp, #16
     dbc:	bd80      	pop	{r7, pc}
     dbe:	46c0      	nop			; (mov r8, r8)

00000dc0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     dc0:	b580      	push	{r7, lr}
     dc2:	b082      	sub	sp, #8
     dc4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     dc6:	1d3b      	adds	r3, r7, #4
     dc8:	0018      	movs	r0, r3
     dca:	f7ff ffbf 	bl	d4c <port_get_config_defaults>

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     dce:	1d3b      	adds	r3, r7, #4
     dd0:	2201      	movs	r2, #1
     dd2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     dd4:	1d3b      	adds	r3, r7, #4
     dd6:	0019      	movs	r1, r3
     dd8:	203e      	movs	r0, #62	; 0x3e
     dda:	f000 f827 	bl	e2c <port_pin_set_config>
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     dde:	2101      	movs	r1, #1
     de0:	203e      	movs	r0, #62	; 0x3e
     de2:	f7ff ffc5 	bl	d70 <port_pin_set_output_level>

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     de6:	1d3b      	adds	r3, r7, #4
     de8:	2200      	movs	r2, #0
     dea:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     dec:	1d3b      	adds	r3, r7, #4
     dee:	2201      	movs	r2, #1
     df0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     df2:	1d3b      	adds	r3, r7, #4
     df4:	0019      	movs	r1, r3
     df6:	200f      	movs	r0, #15
     df8:	f000 f818 	bl	e2c <port_pin_set_config>
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     dfc:	46c0      	nop			; (mov r8, r8)
     dfe:	46bd      	mov	sp, r7
     e00:	b002      	add	sp, #8
     e02:	bd80      	pop	{r7, pc}

00000e04 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     e04:	b580      	push	{r7, lr}
     e06:	b082      	sub	sp, #8
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	2280      	movs	r2, #128	; 0x80
     e10:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	2200      	movs	r2, #0
     e16:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	2201      	movs	r2, #1
     e1c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	2200      	movs	r2, #0
     e22:	70da      	strb	r2, [r3, #3]
}
     e24:	46c0      	nop			; (mov r8, r8)
     e26:	46bd      	mov	sp, r7
     e28:	b002      	add	sp, #8
     e2a:	bd80      	pop	{r7, pc}

00000e2c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e2c:	b580      	push	{r7, lr}
     e2e:	b084      	sub	sp, #16
     e30:	af00      	add	r7, sp, #0
     e32:	0002      	movs	r2, r0
     e34:	6039      	str	r1, [r7, #0]
     e36:	1dfb      	adds	r3, r7, #7
     e38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     e3a:	230c      	movs	r3, #12
     e3c:	18fb      	adds	r3, r7, r3
     e3e:	0018      	movs	r0, r3
     e40:	f7ff ffe0 	bl	e04 <system_pinmux_get_config_defaults>

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     e44:	230c      	movs	r3, #12
     e46:	18fb      	adds	r3, r7, r3
     e48:	2280      	movs	r2, #128	; 0x80
     e4a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e4c:	683b      	ldr	r3, [r7, #0]
     e4e:	781a      	ldrb	r2, [r3, #0]
     e50:	230c      	movs	r3, #12
     e52:	18fb      	adds	r3, r7, r3
     e54:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e56:	683b      	ldr	r3, [r7, #0]
     e58:	785a      	ldrb	r2, [r3, #1]
     e5a:	230c      	movs	r3, #12
     e5c:	18fb      	adds	r3, r7, r3
     e5e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e60:	683b      	ldr	r3, [r7, #0]
     e62:	789a      	ldrb	r2, [r3, #2]
     e64:	230c      	movs	r3, #12
     e66:	18fb      	adds	r3, r7, r3
     e68:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e6a:	230c      	movs	r3, #12
     e6c:	18fa      	adds	r2, r7, r3
     e6e:	1dfb      	adds	r3, r7, #7
     e70:	781b      	ldrb	r3, [r3, #0]
     e72:	0011      	movs	r1, r2
     e74:	0018      	movs	r0, r3
     e76:	f003 ffb1 	bl	4ddc <system_pinmux_pin_set_config>
}
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	46bd      	mov	sp, r7
     e7e:	b004      	add	sp, #16
     e80:	bd80      	pop	{r7, pc}
     e82:	46c0      	nop			; (mov r8, r8)

00000e84 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     e84:	b580      	push	{r7, lr}
     e86:	b082      	sub	sp, #8
     e88:	af00      	add	r7, sp, #0
     e8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     e8c:	687b      	ldr	r3, [r7, #4]
     e8e:	2200      	movs	r2, #0
     e90:	701a      	strb	r2, [r3, #0]
}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	46bd      	mov	sp, r7
     e96:	b002      	add	sp, #8
     e98:	bd80      	pop	{r7, pc}
     e9a:	46c0      	nop			; (mov r8, r8)

00000e9c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     e9c:	b580      	push	{r7, lr}
     e9e:	b082      	sub	sp, #8
     ea0:	af00      	add	r7, sp, #0
     ea2:	0002      	movs	r2, r0
     ea4:	6039      	str	r1, [r7, #0]
     ea6:	1dfb      	adds	r3, r7, #7
     ea8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     eaa:	1dfb      	adds	r3, r7, #7
     eac:	781b      	ldrb	r3, [r3, #0]
     eae:	2b01      	cmp	r3, #1
     eb0:	d00a      	beq.n	ec8 <system_apb_clock_set_mask+0x2c>
     eb2:	2b02      	cmp	r3, #2
     eb4:	d00f      	beq.n	ed6 <system_apb_clock_set_mask+0x3a>
     eb6:	2b00      	cmp	r3, #0
     eb8:	d114      	bne.n	ee4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     eba:	4b0e      	ldr	r3, [pc, #56]	; (ef4 <system_apb_clock_set_mask+0x58>)
     ebc:	4a0d      	ldr	r2, [pc, #52]	; (ef4 <system_apb_clock_set_mask+0x58>)
     ebe:	6991      	ldr	r1, [r2, #24]
     ec0:	683a      	ldr	r2, [r7, #0]
     ec2:	430a      	orrs	r2, r1
     ec4:	619a      	str	r2, [r3, #24]
			break;
     ec6:	e00f      	b.n	ee8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     ec8:	4b0a      	ldr	r3, [pc, #40]	; (ef4 <system_apb_clock_set_mask+0x58>)
     eca:	4a0a      	ldr	r2, [pc, #40]	; (ef4 <system_apb_clock_set_mask+0x58>)
     ecc:	69d1      	ldr	r1, [r2, #28]
     ece:	683a      	ldr	r2, [r7, #0]
     ed0:	430a      	orrs	r2, r1
     ed2:	61da      	str	r2, [r3, #28]
			break;
     ed4:	e008      	b.n	ee8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ed6:	4b07      	ldr	r3, [pc, #28]	; (ef4 <system_apb_clock_set_mask+0x58>)
     ed8:	4a06      	ldr	r2, [pc, #24]	; (ef4 <system_apb_clock_set_mask+0x58>)
     eda:	6a11      	ldr	r1, [r2, #32]
     edc:	683a      	ldr	r2, [r7, #0]
     ede:	430a      	orrs	r2, r1
     ee0:	621a      	str	r2, [r3, #32]
			break;
     ee2:	e001      	b.n	ee8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     ee4:	2317      	movs	r3, #23
     ee6:	e000      	b.n	eea <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     ee8:	2300      	movs	r3, #0
}
     eea:	0018      	movs	r0, r3
     eec:	46bd      	mov	sp, r7
     eee:	b002      	add	sp, #8
     ef0:	bd80      	pop	{r7, pc}
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	40000400 	.word	0x40000400

00000ef8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     ef8:	b580      	push	{r7, lr}
     efa:	b082      	sub	sp, #8
     efc:	af00      	add	r7, sp, #0
     efe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	2280      	movs	r2, #128	; 0x80
     f04:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	2200      	movs	r2, #0
     f0a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f0c:	687b      	ldr	r3, [r7, #4]
     f0e:	2201      	movs	r2, #1
     f10:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     f12:	687b      	ldr	r3, [r7, #4]
     f14:	2200      	movs	r2, #0
     f16:	70da      	strb	r2, [r3, #3]
}
     f18:	46c0      	nop			; (mov r8, r8)
     f1a:	46bd      	mov	sp, r7
     f1c:	b002      	add	sp, #8
     f1e:	bd80      	pop	{r7, pc}

00000f20 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     f20:	b580      	push	{r7, lr}
     f22:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     f24:	4b05      	ldr	r3, [pc, #20]	; (f3c <system_is_debugger_present+0x1c>)
     f26:	789b      	ldrb	r3, [r3, #2]
     f28:	b2db      	uxtb	r3, r3
     f2a:	001a      	movs	r2, r3
     f2c:	2302      	movs	r3, #2
     f2e:	4013      	ands	r3, r2
     f30:	1e5a      	subs	r2, r3, #1
     f32:	4193      	sbcs	r3, r2
     f34:	b2db      	uxtb	r3, r3
}
     f36:	0018      	movs	r0, r3
     f38:	46bd      	mov	sp, r7
     f3a:	bd80      	pop	{r7, pc}
     f3c:	41002000 	.word	0x41002000

00000f40 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     f40:	b580      	push	{r7, lr}
     f42:	b084      	sub	sp, #16
     f44:	af00      	add	r7, sp, #0
     f46:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     f4e:	68fb      	ldr	r3, [r7, #12]
     f50:	69db      	ldr	r3, [r3, #28]
     f52:	2207      	movs	r2, #7
     f54:	4013      	ands	r3, r2
     f56:	1e5a      	subs	r2, r3, #1
     f58:	4193      	sbcs	r3, r2
     f5a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     f5c:	0018      	movs	r0, r3
     f5e:	46bd      	mov	sp, r7
     f60:	b004      	add	sp, #16
     f62:	bd80      	pop	{r7, pc}

00000f64 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     f64:	b580      	push	{r7, lr}
     f66:	b082      	sub	sp, #8
     f68:	af00      	add	r7, sp, #0
     f6a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     f6c:	46c0      	nop			; (mov r8, r8)
     f6e:	687b      	ldr	r3, [r7, #4]
     f70:	0018      	movs	r0, r3
     f72:	f7ff ffe5 	bl	f40 <i2c_master_is_syncing>
     f76:	1e03      	subs	r3, r0, #0
     f78:	d1f9      	bne.n	f6e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	46bd      	mov	sp, r7
     f7e:	b002      	add	sp, #8
     f80:	bd80      	pop	{r7, pc}
     f82:	46c0      	nop			; (mov r8, r8)

00000f84 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
     f84:	b580      	push	{r7, lr}
     f86:	b084      	sub	sp, #16
     f88:	af00      	add	r7, sp, #0
     f8a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f8c:	687b      	ldr	r3, [r7, #4]
     f8e:	681b      	ldr	r3, [r3, #0]
     f90:	60fb      	str	r3, [r7, #12]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
     f92:	687b      	ldr	r3, [r7, #4]
     f94:	0018      	movs	r0, r3
     f96:	f7ff ffe5 	bl	f64 <_i2c_master_wait_for_sync>

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
     f9a:	68fb      	ldr	r3, [r7, #12]
     f9c:	2283      	movs	r2, #131	; 0x83
     f9e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
     fa0:	68fb      	ldr	r3, [r7, #12]
     fa2:	2283      	movs	r2, #131	; 0x83
     fa4:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     fa6:	68fb      	ldr	r3, [r7, #12]
     fa8:	681b      	ldr	r3, [r3, #0]
     faa:	2202      	movs	r2, #2
     fac:	4393      	bics	r3, r2
     fae:	001a      	movs	r2, r3
     fb0:	68fb      	ldr	r3, [r7, #12]
     fb2:	601a      	str	r2, [r3, #0]

}
     fb4:	46c0      	nop			; (mov r8, r8)
     fb6:	46bd      	mov	sp, r7
     fb8:	b004      	add	sp, #16
     fba:	bd80      	pop	{r7, pc}

00000fbc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     fbc:	b5b0      	push	{r4, r5, r7, lr}
     fbe:	b096      	sub	sp, #88	; 0x58
     fc0:	af00      	add	r7, sp, #0
     fc2:	6178      	str	r0, [r7, #20]
     fc4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     fc6:	2300      	movs	r3, #0
     fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
     fca:	2300      	movs	r3, #0
     fcc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
     fce:	2300      	movs	r3, #0
     fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
     fd2:	233b      	movs	r3, #59	; 0x3b
     fd4:	2210      	movs	r2, #16
     fd6:	4694      	mov	ip, r2
     fd8:	44bc      	add	ip, r7
     fda:	4463      	add	r3, ip
     fdc:	2200      	movs	r2, #0
     fde:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     fe0:	697b      	ldr	r3, [r7, #20]
     fe2:	681b      	ldr	r3, [r3, #0]
     fe4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
     fe6:	697b      	ldr	r3, [r7, #20]
     fe8:	681b      	ldr	r3, [r3, #0]
     fea:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     fec:	2323      	movs	r3, #35	; 0x23
     fee:	2210      	movs	r2, #16
     ff0:	18ba      	adds	r2, r7, r2
     ff2:	18d4      	adds	r4, r2, r3
     ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ff6:	0018      	movs	r0, r3
     ff8:	f000 ff84 	bl	1f04 <_sercom_get_sercom_inst_index>
     ffc:	0003      	movs	r3, r0
     ffe:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1000:	230c      	movs	r3, #12
    1002:	2210      	movs	r2, #16
    1004:	4694      	mov	ip, r2
    1006:	44bc      	add	ip, r7
    1008:	4463      	add	r3, ip
    100a:	0018      	movs	r0, r3
    100c:	f7ff ff74 	bl	ef8 <system_pinmux_get_config_defaults>

	uint32_t pad0 = config->pinmux_pad0;
    1010:	693b      	ldr	r3, [r7, #16]
    1012:	69db      	ldr	r3, [r3, #28]
    1014:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    1016:	693b      	ldr	r3, [r7, #16]
    1018:	6a1b      	ldr	r3, [r3, #32]
    101a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    101c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    101e:	2b00      	cmp	r3, #0
    1020:	d106      	bne.n	1030 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1024:	2100      	movs	r1, #0
    1026:	0018      	movs	r0, r3
    1028:	f000 fe8e 	bl	1d48 <_sercom_get_default_pad>
    102c:	0003      	movs	r3, r0
    102e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    1030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1032:	b2da      	uxtb	r2, r3
    1034:	230c      	movs	r3, #12
    1036:	2110      	movs	r1, #16
    1038:	468c      	mov	ip, r1
    103a:	44bc      	add	ip, r7
    103c:	4463      	add	r3, ip
    103e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1040:	230c      	movs	r3, #12
    1042:	2210      	movs	r2, #16
    1044:	4694      	mov	ip, r2
    1046:	44bc      	add	ip, r7
    1048:	4463      	add	r3, ip
    104a:	2202      	movs	r2, #2
    104c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    104e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1050:	0c1b      	lsrs	r3, r3, #16
    1052:	b2db      	uxtb	r3, r3
    1054:	220c      	movs	r2, #12
    1056:	2110      	movs	r1, #16
    1058:	468c      	mov	ip, r1
    105a:	44bc      	add	ip, r7
    105c:	4462      	add	r2, ip
    105e:	0011      	movs	r1, r2
    1060:	0018      	movs	r0, r3
    1062:	f003 febb 	bl	4ddc <system_pinmux_pin_set_config>

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    1066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1068:	2b00      	cmp	r3, #0
    106a:	d106      	bne.n	107a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    106e:	2101      	movs	r1, #1
    1070:	0018      	movs	r0, r3
    1072:	f000 fe69 	bl	1d48 <_sercom_get_default_pad>
    1076:	0003      	movs	r3, r0
    1078:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    107a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    107c:	b2da      	uxtb	r2, r3
    107e:	230c      	movs	r3, #12
    1080:	2110      	movs	r1, #16
    1082:	468c      	mov	ip, r1
    1084:	44bc      	add	ip, r7
    1086:	4463      	add	r3, ip
    1088:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    108a:	230c      	movs	r3, #12
    108c:	2210      	movs	r2, #16
    108e:	4694      	mov	ip, r2
    1090:	44bc      	add	ip, r7
    1092:	4463      	add	r3, ip
    1094:	2202      	movs	r2, #2
    1096:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    109a:	0c1b      	lsrs	r3, r3, #16
    109c:	b2db      	uxtb	r3, r3
    109e:	220c      	movs	r2, #12
    10a0:	2110      	movs	r1, #16
    10a2:	468c      	mov	ip, r1
    10a4:	44bc      	add	ip, r7
    10a6:	4462      	add	r2, ip
    10a8:	0011      	movs	r1, r2
    10aa:	0018      	movs	r0, r3
    10ac:	f003 fe96 	bl	4ddc <system_pinmux_pin_set_config>

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    10b0:	693b      	ldr	r3, [r7, #16]
    10b2:	8a9a      	ldrh	r2, [r3, #20]
    10b4:	697b      	ldr	r3, [r7, #20]
    10b6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    10b8:	693b      	ldr	r3, [r7, #16]
    10ba:	8ada      	ldrh	r2, [r3, #22]
    10bc:	697b      	ldr	r3, [r7, #20]
    10be:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    10c0:	693b      	ldr	r3, [r7, #16]
    10c2:	7e1b      	ldrb	r3, [r3, #24]
    10c4:	2b00      	cmp	r3, #0
    10c6:	d103      	bne.n	10d0 <_i2c_master_set_config+0x114>
    10c8:	f7ff ff2a 	bl	f20 <system_is_debugger_present>
    10cc:	1e03      	subs	r3, r0, #0
    10ce:	d002      	beq.n	10d6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    10d0:	2380      	movs	r3, #128	; 0x80
    10d2:	657b      	str	r3, [r7, #84]	; 0x54
    10d4:	e001      	b.n	10da <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    10d6:	2300      	movs	r3, #0
    10d8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    10da:	693b      	ldr	r3, [r7, #16]
    10dc:	691b      	ldr	r3, [r3, #16]
    10de:	2b00      	cmp	r3, #0
    10e0:	d004      	beq.n	10ec <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    10e2:	693b      	ldr	r3, [r7, #16]
    10e4:	691b      	ldr	r3, [r3, #16]
    10e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    10e8:	4313      	orrs	r3, r2
    10ea:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    10ec:	693b      	ldr	r3, [r7, #16]
    10ee:	689b      	ldr	r3, [r3, #8]
    10f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    10f2:	4313      	orrs	r3, r2
    10f4:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    10f6:	693b      	ldr	r3, [r7, #16]
    10f8:	2224      	movs	r2, #36	; 0x24
    10fa:	5c9b      	ldrb	r3, [r3, r2]
    10fc:	2b00      	cmp	r3, #0
    10fe:	d004      	beq.n	110a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1102:	2280      	movs	r2, #128	; 0x80
    1104:	05d2      	lsls	r2, r2, #23
    1106:	4313      	orrs	r3, r2
    1108:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    110a:	693b      	ldr	r3, [r7, #16]
    110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    110e:	2b00      	cmp	r3, #0
    1110:	d004      	beq.n	111c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    1112:	693b      	ldr	r3, [r7, #16]
    1114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1118:	4313      	orrs	r3, r2
    111a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    111c:	693b      	ldr	r3, [r7, #16]
    111e:	222c      	movs	r2, #44	; 0x2c
    1120:	5c9b      	ldrb	r3, [r3, r2]
    1122:	2b00      	cmp	r3, #0
    1124:	d105      	bne.n	1132 <_i2c_master_set_config+0x176>
    1126:	693b      	ldr	r3, [r7, #16]
    1128:	689a      	ldr	r2, [r3, #8]
    112a:	2380      	movs	r3, #128	; 0x80
    112c:	049b      	lsls	r3, r3, #18
    112e:	429a      	cmp	r2, r3
    1130:	d104      	bne.n	113c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1134:	2280      	movs	r2, #128	; 0x80
    1136:	0512      	lsls	r2, r2, #20
    1138:	4313      	orrs	r3, r2
    113a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    113c:	693b      	ldr	r3, [r7, #16]
    113e:	222d      	movs	r2, #45	; 0x2d
    1140:	5c9b      	ldrb	r3, [r3, r2]
    1142:	2b00      	cmp	r3, #0
    1144:	d004      	beq.n	1150 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1148:	2280      	movs	r2, #128	; 0x80
    114a:	0412      	lsls	r2, r2, #16
    114c:	4313      	orrs	r3, r2
    114e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    1150:	693b      	ldr	r3, [r7, #16]
    1152:	222e      	movs	r2, #46	; 0x2e
    1154:	5c9b      	ldrb	r3, [r3, r2]
    1156:	2b00      	cmp	r3, #0
    1158:	d004      	beq.n	1164 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    115a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    115c:	2280      	movs	r2, #128	; 0x80
    115e:	03d2      	lsls	r2, r2, #15
    1160:	4313      	orrs	r3, r2
    1162:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1166:	681a      	ldr	r2, [r3, #0]
    1168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    116a:	431a      	orrs	r2, r3
    116c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    116e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1172:	2280      	movs	r2, #128	; 0x80
    1174:	0052      	lsls	r2, r2, #1
    1176:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1178:	2323      	movs	r3, #35	; 0x23
    117a:	2210      	movs	r2, #16
    117c:	4694      	mov	ip, r2
    117e:	44bc      	add	ip, r7
    1180:	4463      	add	r3, ip
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	3314      	adds	r3, #20
    1186:	b2db      	uxtb	r3, r3
    1188:	0018      	movs	r0, r3
    118a:	f003 fd49 	bl	4c20 <system_gclk_chan_get_hz>
    118e:	0003      	movs	r3, r0
    1190:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    1192:	693b      	ldr	r3, [r7, #16]
    1194:	681b      	ldr	r3, [r3, #0]
    1196:	22fa      	movs	r2, #250	; 0xfa
    1198:	0092      	lsls	r2, r2, #2
    119a:	4353      	muls	r3, r2
    119c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    119e:	693b      	ldr	r3, [r7, #16]
    11a0:	685b      	ldr	r3, [r3, #4]
    11a2:	22fa      	movs	r2, #250	; 0xfa
    11a4:	0092      	lsls	r2, r2, #2
    11a6:	4353      	muls	r3, r2
    11a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    11aa:	693b      	ldr	r3, [r7, #16]
    11ac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    11ae:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    11b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    11b2:	f024 f9c9 	bl	25548 <__aeabi_ui2d>
    11b6:	0004      	movs	r4, r0
    11b8:	000d      	movs	r5, r1
    11ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    11bc:	f024 f9c4 	bl	25548 <__aeabi_ui2d>
    11c0:	60b8      	str	r0, [r7, #8]
    11c2:	60f9      	str	r1, [r7, #12]
    11c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    11c6:	f024 f9bf 	bl	25548 <__aeabi_ui2d>
    11ca:	4a68      	ldr	r2, [pc, #416]	; (136c <_i2c_master_set_config+0x3b0>)
    11cc:	4b68      	ldr	r3, [pc, #416]	; (1370 <_i2c_master_set_config+0x3b4>)
    11ce:	f023 fb75 	bl	248bc <__aeabi_dmul>
    11d2:	0002      	movs	r2, r0
    11d4:	000b      	movs	r3, r1
    11d6:	603a      	str	r2, [r7, #0]
    11d8:	607b      	str	r3, [r7, #4]
    11da:	6a38      	ldr	r0, [r7, #32]
    11dc:	f024 f9b4 	bl	25548 <__aeabi_ui2d>
    11e0:	0002      	movs	r2, r0
    11e2:	000b      	movs	r3, r1
    11e4:	6838      	ldr	r0, [r7, #0]
    11e6:	6879      	ldr	r1, [r7, #4]
    11e8:	f023 fb68 	bl	248bc <__aeabi_dmul>
    11ec:	0002      	movs	r2, r0
    11ee:	000b      	movs	r3, r1
    11f0:	0010      	movs	r0, r2
    11f2:	0019      	movs	r1, r3
    11f4:	2200      	movs	r2, #0
    11f6:	4b5f      	ldr	r3, [pc, #380]	; (1374 <_i2c_master_set_config+0x3b8>)
    11f8:	f022 fc10 	bl	23a1c <__aeabi_dadd>
    11fc:	0002      	movs	r2, r0
    11fe:	000b      	movs	r3, r1
    1200:	68b8      	ldr	r0, [r7, #8]
    1202:	68f9      	ldr	r1, [r7, #12]
    1204:	f023 fb5a 	bl	248bc <__aeabi_dmul>
    1208:	0002      	movs	r2, r0
    120a:	000b      	movs	r3, r1
    120c:	0020      	movs	r0, r4
    120e:	0029      	movs	r1, r5
    1210:	f023 fdce 	bl	24db0 <__aeabi_dsub>
    1214:	0003      	movs	r3, r0
    1216:	000c      	movs	r4, r1
    1218:	0025      	movs	r5, r4
    121a:	001c      	movs	r4, r3
    121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    121e:	005b      	lsls	r3, r3, #1
    1220:	0018      	movs	r0, r3
    1222:	f024 f991 	bl	25548 <__aeabi_ui2d>
    1226:	0002      	movs	r2, r0
    1228:	000b      	movs	r3, r1
    122a:	0020      	movs	r0, r4
    122c:	0029      	movs	r1, r5
    122e:	f022 fbf5 	bl	23a1c <__aeabi_dadd>
    1232:	0003      	movs	r3, r0
    1234:	000c      	movs	r4, r1
    1236:	0018      	movs	r0, r3
    1238:	0021      	movs	r1, r4
    123a:	2200      	movs	r2, #0
    123c:	4b4e      	ldr	r3, [pc, #312]	; (1378 <_i2c_master_set_config+0x3bc>)
    123e:	f023 fdb7 	bl	24db0 <__aeabi_dsub>
    1242:	0003      	movs	r3, r0
    1244:	000c      	movs	r4, r1
    1246:	0025      	movs	r5, r4
    1248:	001c      	movs	r4, r3
    124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    124c:	005b      	lsls	r3, r3, #1
    124e:	0018      	movs	r0, r3
    1250:	f024 f97a 	bl	25548 <__aeabi_ui2d>
    1254:	0002      	movs	r2, r0
    1256:	000b      	movs	r3, r1
    1258:	0020      	movs	r0, r4
    125a:	0029      	movs	r1, r5
    125c:	f022 ff0a 	bl	24074 <__aeabi_ddiv>
    1260:	0003      	movs	r3, r0
    1262:	000c      	movs	r4, r1
    1264:	0018      	movs	r0, r3
    1266:	0021      	movs	r1, r4
    1268:	f024 f8f6 	bl	25458 <__aeabi_d2iz>
    126c:	0003      	movs	r3, r0
    126e:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    1270:	693b      	ldr	r3, [r7, #16]
    1272:	689a      	ldr	r2, [r3, #8]
    1274:	2380      	movs	r3, #128	; 0x80
    1276:	049b      	lsls	r3, r3, #18
    1278:	429a      	cmp	r2, r3
    127a:	d142      	bne.n	1302 <_i2c_master_set_config+0x346>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    127c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    127e:	f024 f963 	bl	25548 <__aeabi_ui2d>
    1282:	0002      	movs	r2, r0
    1284:	000b      	movs	r3, r1
    1286:	f022 fbc9 	bl	23a1c <__aeabi_dadd>
    128a:	0003      	movs	r3, r0
    128c:	000c      	movs	r4, r1
    128e:	0025      	movs	r5, r4
    1290:	001c      	movs	r4, r3
    1292:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1294:	f024 f958 	bl	25548 <__aeabi_ui2d>
    1298:	2200      	movs	r2, #0
    129a:	4b38      	ldr	r3, [pc, #224]	; (137c <_i2c_master_set_config+0x3c0>)
    129c:	f023 fb0e 	bl	248bc <__aeabi_dmul>
    12a0:	0002      	movs	r2, r0
    12a2:	000b      	movs	r3, r1
    12a4:	0020      	movs	r0, r4
    12a6:	0029      	movs	r1, r5
    12a8:	f022 fee4 	bl	24074 <__aeabi_ddiv>
    12ac:	0003      	movs	r3, r0
    12ae:	000c      	movs	r4, r1
    12b0:	0018      	movs	r0, r3
    12b2:	0021      	movs	r1, r4
    12b4:	2200      	movs	r2, #0
    12b6:	4b30      	ldr	r3, [pc, #192]	; (1378 <_i2c_master_set_config+0x3bc>)
    12b8:	f023 fd7a 	bl	24db0 <__aeabi_dsub>
    12bc:	0003      	movs	r3, r0
    12be:	000c      	movs	r4, r1
    12c0:	0018      	movs	r0, r3
    12c2:	0021      	movs	r1, r4
    12c4:	f024 f8c8 	bl	25458 <__aeabi_d2iz>
    12c8:	0003      	movs	r3, r0
    12ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    12cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    12ce:	2b00      	cmp	r3, #0
    12d0:	d009      	beq.n	12e6 <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    12d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    12d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    12d6:	f022 f8e1 	bl	2349c <__aeabi_uidiv>
    12da:	0003      	movs	r3, r0
    12dc:	1e9a      	subs	r2, r3, #2
    12de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    12e0:	1ad3      	subs	r3, r2, r3
    12e2:	653b      	str	r3, [r7, #80]	; 0x50
    12e4:	e00d      	b.n	1302 <_i2c_master_set_config+0x346>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    12e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12e8:	005a      	lsls	r2, r3, #1
    12ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12ec:	18d3      	adds	r3, r2, r3
    12ee:	1e5a      	subs	r2, r3, #1
    12f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12f2:	005b      	lsls	r3, r3, #1
    12f4:	0019      	movs	r1, r3
    12f6:	0010      	movs	r0, r2
    12f8:	f022 f8d0 	bl	2349c <__aeabi_uidiv>
    12fc:	0003      	movs	r3, r0
    12fe:	3b01      	subs	r3, #1
    1300:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1304:	2bff      	cmp	r3, #255	; 0xff
    1306:	dc08      	bgt.n	131a <_i2c_master_set_config+0x35e>
    1308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    130a:	2b00      	cmp	r3, #0
    130c:	db05      	blt.n	131a <_i2c_master_set_config+0x35e>
    130e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1310:	2bff      	cmp	r3, #255	; 0xff
    1312:	dc02      	bgt.n	131a <_i2c_master_set_config+0x35e>
    1314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1316:	2b00      	cmp	r3, #0
    1318:	da06      	bge.n	1328 <_i2c_master_set_config+0x36c>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    131a:	233b      	movs	r3, #59	; 0x3b
    131c:	2210      	movs	r2, #16
    131e:	4694      	mov	ip, r2
    1320:	44bc      	add	ip, r7
    1322:	4463      	add	r3, ip
    1324:	2240      	movs	r2, #64	; 0x40
    1326:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    1328:	233b      	movs	r3, #59	; 0x3b
    132a:	2210      	movs	r2, #16
    132c:	4694      	mov	ip, r2
    132e:	44bc      	add	ip, r7
    1330:	4463      	add	r3, ip
    1332:	781b      	ldrb	r3, [r3, #0]
    1334:	2b40      	cmp	r3, #64	; 0x40
    1336:	d00e      	beq.n	1356 <_i2c_master_set_config+0x39a>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    133a:	22ff      	movs	r2, #255	; 0xff
    133c:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    133e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1340:	041b      	lsls	r3, r3, #16
    1342:	0019      	movs	r1, r3
    1344:	23ff      	movs	r3, #255	; 0xff
    1346:	041b      	lsls	r3, r3, #16
    1348:	400b      	ands	r3, r1
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    134a:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    134c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    134e:	0612      	lsls	r2, r2, #24
    1350:	431a      	orrs	r2, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1354:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
    1356:	233b      	movs	r3, #59	; 0x3b
    1358:	2210      	movs	r2, #16
    135a:	4694      	mov	ip, r2
    135c:	44bc      	add	ip, r7
    135e:	4463      	add	r3, ip
    1360:	781b      	ldrb	r3, [r3, #0]
}
    1362:	0018      	movs	r0, r3
    1364:	46bd      	mov	sp, r7
    1366:	b016      	add	sp, #88	; 0x58
    1368:	bdb0      	pop	{r4, r5, r7, pc}
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	e826d695 	.word	0xe826d695
    1370:	3e112e0b 	.word	0x3e112e0b
    1374:	40240000 	.word	0x40240000
    1378:	3ff00000 	.word	0x3ff00000
    137c:	40080000 	.word	0x40080000

00001380 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1380:	b580      	push	{r7, lr}
    1382:	b08a      	sub	sp, #40	; 0x28
    1384:	af00      	add	r7, sp, #0
    1386:	60f8      	str	r0, [r7, #12]
    1388:	60b9      	str	r1, [r7, #8]
    138a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    138c:	68fb      	ldr	r3, [r7, #12]
    138e:	68ba      	ldr	r2, [r7, #8]
    1390:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1392:	68fb      	ldr	r3, [r7, #12]
    1394:	681b      	ldr	r3, [r3, #0]
    1396:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1398:	68fb      	ldr	r3, [r7, #12]
    139a:	681b      	ldr	r3, [r3, #0]
    139c:	0018      	movs	r0, r3
    139e:	f000 fdb1 	bl	1f04 <_sercom_get_sercom_inst_index>
    13a2:	0003      	movs	r3, r0
    13a4:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    13a6:	6a3b      	ldr	r3, [r7, #32]
    13a8:	3302      	adds	r3, #2
    13aa:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13ac:	6a3b      	ldr	r3, [r7, #32]
    13ae:	3314      	adds	r3, #20
    13b0:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    13b2:	2201      	movs	r2, #1
    13b4:	69fb      	ldr	r3, [r7, #28]
    13b6:	409a      	lsls	r2, r3
    13b8:	0013      	movs	r3, r2
    13ba:	0019      	movs	r1, r3
    13bc:	2002      	movs	r0, #2
    13be:	f7ff fd6d 	bl	e9c <system_apb_clock_set_mask>
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    13c2:	2314      	movs	r3, #20
    13c4:	18fb      	adds	r3, r7, r3
    13c6:	0018      	movs	r0, r3
    13c8:	f7ff fd5c 	bl	e84 <system_gclk_chan_get_config_defaults>
	gclk_chan_conf.source_generator = config->generator_source;
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	7b1a      	ldrb	r2, [r3, #12]
    13d0:	2314      	movs	r3, #20
    13d2:	18fb      	adds	r3, r7, r3
    13d4:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    13d6:	69bb      	ldr	r3, [r7, #24]
    13d8:	b2db      	uxtb	r3, r3
    13da:	2214      	movs	r2, #20
    13dc:	18ba      	adds	r2, r7, r2
    13de:	0011      	movs	r1, r2
    13e0:	0018      	movs	r0, r3
    13e2:	f003 fb95 	bl	4b10 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
    13e6:	69bb      	ldr	r3, [r7, #24]
    13e8:	b2db      	uxtb	r3, r3
    13ea:	0018      	movs	r0, r3
    13ec:	f003 fbb0 	bl	4b50 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	7b1b      	ldrb	r3, [r3, #12]
    13f4:	2100      	movs	r1, #0
    13f6:	0018      	movs	r0, r3
    13f8:	f000 fc66 	bl	1cc8 <sercom_set_gclk_generator>

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    13fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	2202      	movs	r2, #2
    1402:	4013      	ands	r3, r2
    1404:	d001      	beq.n	140a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    1406:	231c      	movs	r3, #28
    1408:	e010      	b.n	142c <i2c_master_init+0xac>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    140c:	681b      	ldr	r3, [r3, #0]
    140e:	2201      	movs	r2, #1
    1410:	4013      	ands	r3, r2
    1412:	d001      	beq.n	1418 <i2c_master_init+0x98>
		return STATUS_BUSY;
    1414:	2305      	movs	r3, #5
    1416:	e009      	b.n	142c <i2c_master_init+0xac>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    141a:	2214      	movs	r2, #20
    141c:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    141e:	687a      	ldr	r2, [r7, #4]
    1420:	68fb      	ldr	r3, [r7, #12]
    1422:	0011      	movs	r1, r2
    1424:	0018      	movs	r0, r3
    1426:	f7ff fdc9 	bl	fbc <_i2c_master_set_config>
    142a:	0003      	movs	r3, r0
}
    142c:	0018      	movs	r0, r3
    142e:	46bd      	mov	sp, r7
    1430:	b00a      	add	sp, #40	; 0x28
    1432:	bd80      	pop	{r7, pc}

00001434 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    1434:	b580      	push	{r7, lr}
    1436:	b084      	sub	sp, #16
    1438:	af00      	add	r7, sp, #0
    143a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	0018      	movs	r0, r3
    1446:	f7ff fd8d 	bl	f64 <_i2c_master_wait_for_sync>

	/* Disable module */
	i2c_master_disable(module);
    144a:	687b      	ldr	r3, [r7, #4]
    144c:	0018      	movs	r0, r3
    144e:	f7ff fd99 	bl	f84 <i2c_master_disable>
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	0018      	movs	r0, r3
    1456:	f7ff fd85 	bl	f64 <_i2c_master_wait_for_sync>

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    145a:	68fb      	ldr	r3, [r7, #12]
    145c:	2201      	movs	r2, #1
    145e:	601a      	str	r2, [r3, #0]
}
    1460:	46c0      	nop			; (mov r8, r8)
    1462:	46bd      	mov	sp, r7
    1464:	b004      	add	sp, #16
    1466:	bd80      	pop	{r7, pc}

00001468 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    1468:	b580      	push	{r7, lr}
    146a:	b084      	sub	sp, #16
    146c:	af00      	add	r7, sp, #0
    146e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1470:	687b      	ldr	r3, [r7, #4]
    1472:	681b      	ldr	r3, [r3, #0]
    1474:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1476:	68fb      	ldr	r3, [r7, #12]
    1478:	7e1b      	ldrb	r3, [r3, #24]
    147a:	b2db      	uxtb	r3, r3
    147c:	001a      	movs	r2, r3
    147e:	2302      	movs	r3, #2
    1480:	4013      	ands	r3, r2
    1482:	d00b      	beq.n	149c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1484:	68fb      	ldr	r3, [r7, #12]
    1486:	2202      	movs	r2, #2
    1488:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    148a:	68fb      	ldr	r3, [r7, #12]
    148c:	8b5b      	ldrh	r3, [r3, #26]
    148e:	b29b      	uxth	r3, r3
    1490:	001a      	movs	r2, r3
    1492:	2302      	movs	r3, #2
    1494:	4013      	ands	r3, r2
    1496:	d011      	beq.n	14bc <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1498:	2341      	movs	r3, #65	; 0x41
    149a:	e010      	b.n	14be <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    149c:	68fb      	ldr	r3, [r7, #12]
    149e:	8b5b      	ldrh	r3, [r3, #26]
    14a0:	b29b      	uxth	r3, r3
    14a2:	001a      	movs	r2, r3
    14a4:	2304      	movs	r3, #4
    14a6:	4013      	ands	r3, r2
    14a8:	d008      	beq.n	14bc <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    14aa:	68fb      	ldr	r3, [r7, #12]
    14ac:	685b      	ldr	r3, [r3, #4]
    14ae:	22c0      	movs	r2, #192	; 0xc0
    14b0:	0292      	lsls	r2, r2, #10
    14b2:	431a      	orrs	r2, r3
    14b4:	68fb      	ldr	r3, [r7, #12]
    14b6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    14b8:	2318      	movs	r3, #24
    14ba:	e000      	b.n	14be <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    14bc:	2300      	movs	r3, #0
}
    14be:	0018      	movs	r0, r3
    14c0:	46bd      	mov	sp, r7
    14c2:	b004      	add	sp, #16
    14c4:	bd80      	pop	{r7, pc}
    14c6:	46c0      	nop			; (mov r8, r8)

000014c8 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	b084      	sub	sp, #16
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14d0:	687b      	ldr	r3, [r7, #4]
    14d2:	681b      	ldr	r3, [r3, #0]
    14d4:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    14d6:	230e      	movs	r3, #14
    14d8:	18fb      	adds	r3, r7, r3
    14da:	2200      	movs	r2, #0
    14dc:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    14de:	e00f      	b.n	1500 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    14e0:	230e      	movs	r3, #14
    14e2:	18fb      	adds	r3, r7, r3
    14e4:	220e      	movs	r2, #14
    14e6:	18ba      	adds	r2, r7, r2
    14e8:	8812      	ldrh	r2, [r2, #0]
    14ea:	3201      	adds	r2, #1
    14ec:	801a      	strh	r2, [r3, #0]
    14ee:	687b      	ldr	r3, [r7, #4]
    14f0:	891b      	ldrh	r3, [r3, #8]
    14f2:	220e      	movs	r2, #14
    14f4:	18ba      	adds	r2, r7, r2
    14f6:	8812      	ldrh	r2, [r2, #0]
    14f8:	429a      	cmp	r2, r3
    14fa:	d301      	bcc.n	1500 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    14fc:	2312      	movs	r3, #18
    14fe:	e00e      	b.n	151e <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1500:	68bb      	ldr	r3, [r7, #8]
    1502:	7e1b      	ldrb	r3, [r3, #24]
    1504:	b2db      	uxtb	r3, r3
    1506:	001a      	movs	r2, r3
    1508:	2301      	movs	r3, #1
    150a:	4013      	ands	r3, r2
    150c:	d106      	bne.n	151c <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    150e:	68bb      	ldr	r3, [r7, #8]
    1510:	7e1b      	ldrb	r3, [r3, #24]
    1512:	b2db      	uxtb	r3, r3
    1514:	001a      	movs	r2, r3
    1516:	2302      	movs	r3, #2
    1518:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    151a:	d0e1      	beq.n	14e0 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    151c:	2300      	movs	r3, #0
}
    151e:	0018      	movs	r0, r3
    1520:	46bd      	mov	sp, r7
    1522:	b004      	add	sp, #16
    1524:	bd80      	pop	{r7, pc}
    1526:	46c0      	nop			; (mov r8, r8)

00001528 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1528:	b590      	push	{r4, r7, lr}
    152a:	b085      	sub	sp, #20
    152c:	af00      	add	r7, sp, #0
    152e:	6078      	str	r0, [r7, #4]
    1530:	000a      	movs	r2, r1
    1532:	1cfb      	adds	r3, r7, #3
    1534:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1536:	687b      	ldr	r3, [r7, #4]
    1538:	681b      	ldr	r3, [r3, #0]
    153a:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	685b      	ldr	r3, [r3, #4]
    1540:	2280      	movs	r2, #128	; 0x80
    1542:	02d2      	lsls	r2, r2, #11
    1544:	431a      	orrs	r2, r3
    1546:	68fb      	ldr	r3, [r7, #12]
    1548:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    154a:	1cfb      	adds	r3, r7, #3
    154c:	781a      	ldrb	r2, [r3, #0]
    154e:	68fb      	ldr	r3, [r7, #12]
    1550:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1552:	230b      	movs	r3, #11
    1554:	18fc      	adds	r4, r7, r3
    1556:	687b      	ldr	r3, [r7, #4]
    1558:	0018      	movs	r0, r3
    155a:	f7ff ffb5 	bl	14c8 <_i2c_master_wait_for_bus>
    155e:	0003      	movs	r3, r0
    1560:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	2201      	movs	r2, #1
    1566:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1568:	230b      	movs	r3, #11
    156a:	18fb      	adds	r3, r7, r3
    156c:	781b      	ldrb	r3, [r3, #0]
}
    156e:	0018      	movs	r0, r3
    1570:	46bd      	mov	sp, r7
    1572:	b005      	add	sp, #20
    1574:	bd90      	pop	{r4, r7, pc}
    1576:	46c0      	nop			; (mov r8, r8)

00001578 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1578:	b590      	push	{r4, r7, lr}
    157a:	b087      	sub	sp, #28
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
    1580:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1588:	2314      	movs	r3, #20
    158a:	18fb      	adds	r3, r7, r3
    158c:	683a      	ldr	r2, [r7, #0]
    158e:	8852      	ldrh	r2, [r2, #2]
    1590:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    1592:	2312      	movs	r3, #18
    1594:	18fb      	adds	r3, r7, r3
    1596:	2200      	movs	r2, #0
    1598:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	681b      	ldr	r3, [r3, #0]
    159e:	011b      	lsls	r3, r3, #4
    15a0:	0fdb      	lsrs	r3, r3, #31
    15a2:	b2db      	uxtb	r3, r3
    15a4:	001a      	movs	r2, r3
    15a6:	230b      	movs	r3, #11
    15a8:	18fb      	adds	r3, r7, r3
    15aa:	1e51      	subs	r1, r2, #1
    15ac:	418a      	sbcs	r2, r1
    15ae:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    15b0:	683b      	ldr	r3, [r7, #0]
    15b2:	7a5b      	ldrb	r3, [r3, #9]
    15b4:	2b00      	cmp	r3, #0
    15b6:	d006      	beq.n	15c6 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    15b8:	683b      	ldr	r3, [r7, #0]
    15ba:	7a9a      	ldrb	r2, [r3, #10]
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	0011      	movs	r1, r2
    15c0:	0018      	movs	r0, r3
    15c2:	f7ff ffb1 	bl	1528 <_i2c_master_send_hs_master_code>
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    15c6:	68fb      	ldr	r3, [r7, #12]
    15c8:	685b      	ldr	r3, [r3, #4]
    15ca:	4a83      	ldr	r2, [pc, #524]	; (17d8 <_i2c_master_read_packet+0x260>)
    15cc:	401a      	ands	r2, r3
    15ce:	68fb      	ldr	r3, [r7, #12]
    15d0:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    15d2:	683b      	ldr	r3, [r7, #0]
    15d4:	7a1b      	ldrb	r3, [r3, #8]
    15d6:	2b00      	cmp	r3, #0
    15d8:	d042      	beq.n	1660 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    15da:	683b      	ldr	r3, [r7, #0]
    15dc:	881b      	ldrh	r3, [r3, #0]
    15de:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    15e0:	683b      	ldr	r3, [r7, #0]
    15e2:	7a5b      	ldrb	r3, [r3, #9]
    15e4:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    15e6:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    15e8:	001a      	movs	r2, r3
    15ea:	2380      	movs	r3, #128	; 0x80
    15ec:	021b      	lsls	r3, r3, #8
    15ee:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    15f0:	68fb      	ldr	r3, [r7, #12]
    15f2:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    15f4:	2317      	movs	r3, #23
    15f6:	18fc      	adds	r4, r7, r3
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	0018      	movs	r0, r3
    15fc:	f7ff ff64 	bl	14c8 <_i2c_master_wait_for_bus>
    1600:	0003      	movs	r3, r0
    1602:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1604:	68fb      	ldr	r3, [r7, #12]
    1606:	685b      	ldr	r3, [r3, #4]
    1608:	4a73      	ldr	r2, [pc, #460]	; (17d8 <_i2c_master_read_packet+0x260>)
    160a:	401a      	ands	r2, r3
    160c:	68fb      	ldr	r3, [r7, #12]
    160e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1610:	2317      	movs	r3, #23
    1612:	18fb      	adds	r3, r7, r3
    1614:	781b      	ldrb	r3, [r3, #0]
    1616:	2b00      	cmp	r3, #0
    1618:	d107      	bne.n	162a <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    161a:	2317      	movs	r3, #23
    161c:	18fc      	adds	r4, r7, r3
    161e:	687b      	ldr	r3, [r7, #4]
    1620:	0018      	movs	r0, r3
    1622:	f7ff ff21 	bl	1468 <_i2c_master_address_response>
    1626:	0003      	movs	r3, r0
    1628:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    162a:	2317      	movs	r3, #23
    162c:	18fb      	adds	r3, r7, r3
    162e:	781b      	ldrb	r3, [r3, #0]
    1630:	2b00      	cmp	r3, #0
    1632:	d111      	bne.n	1658 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1634:	683b      	ldr	r3, [r7, #0]
    1636:	881b      	ldrh	r3, [r3, #0]
    1638:	0a1b      	lsrs	r3, r3, #8
    163a:	b29b      	uxth	r3, r3
    163c:	2278      	movs	r2, #120	; 0x78
    163e:	4313      	orrs	r3, r2
    1640:	b29b      	uxth	r3, r3
    1642:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1644:	683b      	ldr	r3, [r7, #0]
    1646:	7a5b      	ldrb	r3, [r3, #9]
    1648:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    164a:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    164c:	2201      	movs	r2, #1
    164e:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1650:	001a      	movs	r2, r3
    1652:	68fb      	ldr	r3, [r7, #12]
    1654:	625a      	str	r2, [r3, #36]	; 0x24
    1656:	e00f      	b.n	1678 <_i2c_master_read_packet+0x100>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1658:	2317      	movs	r3, #23
    165a:	18fb      	adds	r3, r7, r3
    165c:	781b      	ldrb	r3, [r3, #0]
    165e:	e0b6      	b.n	17ce <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1660:	683b      	ldr	r3, [r7, #0]
    1662:	881b      	ldrh	r3, [r3, #0]
    1664:	005b      	lsls	r3, r3, #1
    1666:	2201      	movs	r2, #1
    1668:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    166a:	683b      	ldr	r3, [r7, #0]
    166c:	7a5b      	ldrb	r3, [r3, #9]
    166e:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1670:	4313      	orrs	r3, r2
    1672:	001a      	movs	r2, r3
    1674:	68fb      	ldr	r3, [r7, #12]
    1676:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1678:	2317      	movs	r3, #23
    167a:	18fc      	adds	r4, r7, r3
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	0018      	movs	r0, r3
    1680:	f7ff ff22 	bl	14c8 <_i2c_master_wait_for_bus>
    1684:	0003      	movs	r3, r0
    1686:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1688:	230b      	movs	r3, #11
    168a:	18fb      	adds	r3, r7, r3
    168c:	781b      	ldrb	r3, [r3, #0]
    168e:	2b00      	cmp	r3, #0
    1690:	d00b      	beq.n	16aa <_i2c_master_read_packet+0x132>
    1692:	683b      	ldr	r3, [r7, #0]
    1694:	885b      	ldrh	r3, [r3, #2]
    1696:	2b01      	cmp	r3, #1
    1698:	d107      	bne.n	16aa <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    169a:	68fb      	ldr	r3, [r7, #12]
    169c:	685b      	ldr	r3, [r3, #4]
    169e:	2280      	movs	r2, #128	; 0x80
    16a0:	02d2      	lsls	r2, r2, #11
    16a2:	431a      	orrs	r2, r3
    16a4:	68fb      	ldr	r3, [r7, #12]
    16a6:	605a      	str	r2, [r3, #4]
    16a8:	e005      	b.n	16b6 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    16aa:	68fb      	ldr	r3, [r7, #12]
    16ac:	685b      	ldr	r3, [r3, #4]
    16ae:	4a4a      	ldr	r2, [pc, #296]	; (17d8 <_i2c_master_read_packet+0x260>)
    16b0:	401a      	ands	r2, r3
    16b2:	68fb      	ldr	r3, [r7, #12]
    16b4:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    16b6:	2317      	movs	r3, #23
    16b8:	18fb      	adds	r3, r7, r3
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	2b00      	cmp	r3, #0
    16be:	d107      	bne.n	16d0 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    16c0:	2317      	movs	r3, #23
    16c2:	18fc      	adds	r4, r7, r3
    16c4:	687b      	ldr	r3, [r7, #4]
    16c6:	0018      	movs	r0, r3
    16c8:	f7ff fece 	bl	1468 <_i2c_master_address_response>
    16cc:	0003      	movs	r3, r0
    16ce:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    16d0:	2317      	movs	r3, #23
    16d2:	18fb      	adds	r3, r7, r3
    16d4:	781b      	ldrb	r3, [r3, #0]
    16d6:	2b00      	cmp	r3, #0
    16d8:	d000      	beq.n	16dc <_i2c_master_read_packet+0x164>
    16da:	e075      	b.n	17c8 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    16dc:	e04b      	b.n	1776 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    16de:	68fb      	ldr	r3, [r7, #12]
    16e0:	8b5b      	ldrh	r3, [r3, #26]
    16e2:	b29b      	uxth	r3, r3
    16e4:	001a      	movs	r2, r3
    16e6:	2320      	movs	r3, #32
    16e8:	4013      	ands	r3, r2
    16ea:	d101      	bne.n	16f0 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    16ec:	2341      	movs	r3, #65	; 0x41
    16ee:	e06e      	b.n	17ce <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	7adb      	ldrb	r3, [r3, #11]
    16f4:	2b00      	cmp	r3, #0
    16f6:	d01e      	beq.n	1736 <_i2c_master_read_packet+0x1be>
    16f8:	230b      	movs	r3, #11
    16fa:	18fb      	adds	r3, r7, r3
    16fc:	781b      	ldrb	r3, [r3, #0]
    16fe:	2201      	movs	r2, #1
    1700:	4053      	eors	r3, r2
    1702:	b2db      	uxtb	r3, r3
    1704:	2b00      	cmp	r3, #0
    1706:	d004      	beq.n	1712 <_i2c_master_read_packet+0x19a>
    1708:	2314      	movs	r3, #20
    170a:	18fb      	adds	r3, r7, r3
    170c:	881b      	ldrh	r3, [r3, #0]
    170e:	2b00      	cmp	r3, #0
    1710:	d009      	beq.n	1726 <_i2c_master_read_packet+0x1ae>
    1712:	230b      	movs	r3, #11
    1714:	18fb      	adds	r3, r7, r3
    1716:	781b      	ldrb	r3, [r3, #0]
    1718:	2b00      	cmp	r3, #0
    171a:	d00c      	beq.n	1736 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    171c:	2314      	movs	r3, #20
    171e:	18fb      	adds	r3, r7, r3
    1720:	881b      	ldrh	r3, [r3, #0]
    1722:	2b01      	cmp	r3, #1
    1724:	d107      	bne.n	1736 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1726:	68fb      	ldr	r3, [r7, #12]
    1728:	685b      	ldr	r3, [r3, #4]
    172a:	2280      	movs	r2, #128	; 0x80
    172c:	02d2      	lsls	r2, r2, #11
    172e:	431a      	orrs	r2, r3
    1730:	68fb      	ldr	r3, [r7, #12]
    1732:	605a      	str	r2, [r3, #4]
    1734:	e01a      	b.n	176c <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	0018      	movs	r0, r3
    173a:	f7ff fc13 	bl	f64 <_i2c_master_wait_for_sync>
				packet->data[counter++] = i2c_module->DATA.reg;
    173e:	683b      	ldr	r3, [r7, #0]
    1740:	685a      	ldr	r2, [r3, #4]
    1742:	2312      	movs	r3, #18
    1744:	18fb      	adds	r3, r7, r3
    1746:	881b      	ldrh	r3, [r3, #0]
    1748:	2112      	movs	r1, #18
    174a:	1879      	adds	r1, r7, r1
    174c:	1c58      	adds	r0, r3, #1
    174e:	8008      	strh	r0, [r1, #0]
    1750:	18d3      	adds	r3, r2, r3
    1752:	68fa      	ldr	r2, [r7, #12]
    1754:	2128      	movs	r1, #40	; 0x28
    1756:	5c52      	ldrb	r2, [r2, r1]
    1758:	b2d2      	uxtb	r2, r2
    175a:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    175c:	2317      	movs	r3, #23
    175e:	18fc      	adds	r4, r7, r3
    1760:	687b      	ldr	r3, [r7, #4]
    1762:	0018      	movs	r0, r3
    1764:	f7ff feb0 	bl	14c8 <_i2c_master_wait_for_bus>
    1768:	0003      	movs	r3, r0
    176a:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    176c:	2317      	movs	r3, #23
    176e:	18fb      	adds	r3, r7, r3
    1770:	781b      	ldrb	r3, [r3, #0]
    1772:	2b00      	cmp	r3, #0
    1774:	d109      	bne.n	178a <_i2c_master_read_packet+0x212>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    1776:	2314      	movs	r3, #20
    1778:	18fb      	adds	r3, r7, r3
    177a:	881b      	ldrh	r3, [r3, #0]
    177c:	2214      	movs	r2, #20
    177e:	18ba      	adds	r2, r7, r2
    1780:	1e59      	subs	r1, r3, #1
    1782:	8011      	strh	r1, [r2, #0]
    1784:	2b00      	cmp	r3, #0
    1786:	d1aa      	bne.n	16de <_i2c_master_read_packet+0x166>
    1788:	e000      	b.n	178c <_i2c_master_read_packet+0x214>
				tmp_status = _i2c_master_wait_for_bus(module);
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    178a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	7a9b      	ldrb	r3, [r3, #10]
    1790:	2b00      	cmp	r3, #0
    1792:	d00a      	beq.n	17aa <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	0018      	movs	r0, r3
    1798:	f7ff fbe4 	bl	f64 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	685b      	ldr	r3, [r3, #4]
    17a0:	22c0      	movs	r2, #192	; 0xc0
    17a2:	0292      	lsls	r2, r2, #10
    17a4:	431a      	orrs	r2, r3
    17a6:	68fb      	ldr	r3, [r7, #12]
    17a8:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	0018      	movs	r0, r3
    17ae:	f7ff fbd9 	bl	f64 <_i2c_master_wait_for_sync>
		packet->data[counter] = i2c_module->DATA.reg;
    17b2:	683b      	ldr	r3, [r7, #0]
    17b4:	685a      	ldr	r2, [r3, #4]
    17b6:	2312      	movs	r3, #18
    17b8:	18fb      	adds	r3, r7, r3
    17ba:	881b      	ldrh	r3, [r3, #0]
    17bc:	18d3      	adds	r3, r2, r3
    17be:	68fa      	ldr	r2, [r7, #12]
    17c0:	2128      	movs	r1, #40	; 0x28
    17c2:	5c52      	ldrb	r2, [r2, r1]
    17c4:	b2d2      	uxtb	r2, r2
    17c6:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    17c8:	2317      	movs	r3, #23
    17ca:	18fb      	adds	r3, r7, r3
    17cc:	781b      	ldrb	r3, [r3, #0]
}
    17ce:	0018      	movs	r0, r3
    17d0:	46bd      	mov	sp, r7
    17d2:	b007      	add	sp, #28
    17d4:	bd90      	pop	{r4, r7, pc}
    17d6:	46c0      	nop			; (mov r8, r8)
    17d8:	fffbffff 	.word	0xfffbffff

000017dc <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    17dc:	b580      	push	{r7, lr}
    17de:	b082      	sub	sp, #8
    17e0:	af00      	add	r7, sp, #0
    17e2:	6078      	str	r0, [r7, #4]
    17e4:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	2201      	movs	r2, #1
    17ea:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	2201      	movs	r2, #1
    17f0:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    17f2:	683a      	ldr	r2, [r7, #0]
    17f4:	687b      	ldr	r3, [r7, #4]
    17f6:	0011      	movs	r1, r2
    17f8:	0018      	movs	r0, r3
    17fa:	f7ff febd 	bl	1578 <_i2c_master_read_packet>
    17fe:	0003      	movs	r3, r0
}
    1800:	0018      	movs	r0, r3
    1802:	46bd      	mov	sp, r7
    1804:	b002      	add	sp, #8
    1806:	bd80      	pop	{r7, pc}

00001808 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1808:	b590      	push	{r4, r7, lr}
    180a:	b087      	sub	sp, #28
    180c:	af00      	add	r7, sp, #0
    180e:	6078      	str	r0, [r7, #4]
    1810:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1818:	2314      	movs	r3, #20
    181a:	18fb      	adds	r3, r7, r3
    181c:	683a      	ldr	r2, [r7, #0]
    181e:	8852      	ldrh	r2, [r2, #2]
    1820:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    1822:	687b      	ldr	r3, [r7, #4]
    1824:	0018      	movs	r0, r3
    1826:	f7ff fb9d 	bl	f64 <_i2c_master_wait_for_sync>

	/* Switch to high speed mode */
	if (packet->high_speed) {
    182a:	683b      	ldr	r3, [r7, #0]
    182c:	7a5b      	ldrb	r3, [r3, #9]
    182e:	2b00      	cmp	r3, #0
    1830:	d006      	beq.n	1840 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1832:	683b      	ldr	r3, [r7, #0]
    1834:	7a9a      	ldrb	r2, [r3, #10]
    1836:	687b      	ldr	r3, [r7, #4]
    1838:	0011      	movs	r1, r2
    183a:	0018      	movs	r0, r3
    183c:	f7ff fe74 	bl	1528 <_i2c_master_send_hs_master_code>
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1840:	68fb      	ldr	r3, [r7, #12]
    1842:	685b      	ldr	r3, [r3, #4]
    1844:	4a49      	ldr	r2, [pc, #292]	; (196c <_i2c_master_write_packet+0x164>)
    1846:	401a      	ands	r2, r3
    1848:	68fb      	ldr	r3, [r7, #12]
    184a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    184c:	683b      	ldr	r3, [r7, #0]
    184e:	7a1b      	ldrb	r3, [r3, #8]
    1850:	2b00      	cmp	r3, #0
    1852:	d00d      	beq.n	1870 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1854:	683b      	ldr	r3, [r7, #0]
    1856:	881b      	ldrh	r3, [r3, #0]
    1858:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    185a:	683b      	ldr	r3, [r7, #0]
    185c:	7a5b      	ldrb	r3, [r3, #9]
    185e:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1860:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1862:	001a      	movs	r2, r3
    1864:	2380      	movs	r3, #128	; 0x80
    1866:	021b      	lsls	r3, r3, #8
    1868:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    186a:	68fb      	ldr	r3, [r7, #12]
    186c:	625a      	str	r2, [r3, #36]	; 0x24
    186e:	e009      	b.n	1884 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1870:	683b      	ldr	r3, [r7, #0]
    1872:	881b      	ldrh	r3, [r3, #0]
    1874:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1876:	683b      	ldr	r3, [r7, #0]
    1878:	7a5b      	ldrb	r3, [r3, #9]
    187a:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    187c:	4313      	orrs	r3, r2
    187e:	001a      	movs	r2, r3
    1880:	68fb      	ldr	r3, [r7, #12]
    1882:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1884:	2317      	movs	r3, #23
    1886:	18fc      	adds	r4, r7, r3
    1888:	687b      	ldr	r3, [r7, #4]
    188a:	0018      	movs	r0, r3
    188c:	f7ff fe1c 	bl	14c8 <_i2c_master_wait_for_bus>
    1890:	0003      	movs	r3, r0
    1892:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1894:	2317      	movs	r3, #23
    1896:	18fb      	adds	r3, r7, r3
    1898:	781b      	ldrb	r3, [r3, #0]
    189a:	2b00      	cmp	r3, #0
    189c:	d107      	bne.n	18ae <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    189e:	2317      	movs	r3, #23
    18a0:	18fc      	adds	r4, r7, r3
    18a2:	687b      	ldr	r3, [r7, #4]
    18a4:	0018      	movs	r0, r3
    18a6:	f7ff fddf 	bl	1468 <_i2c_master_address_response>
    18aa:	0003      	movs	r3, r0
    18ac:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    18ae:	2317      	movs	r3, #23
    18b0:	18fb      	adds	r3, r7, r3
    18b2:	781b      	ldrb	r3, [r3, #0]
    18b4:	2b00      	cmp	r3, #0
    18b6:	d152      	bne.n	195e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    18b8:	2312      	movs	r3, #18
    18ba:	18fb      	adds	r3, r7, r3
    18bc:	2200      	movs	r2, #0
    18be:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    18c0:	e033      	b.n	192a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    18c2:	68fb      	ldr	r3, [r7, #12]
    18c4:	8b5b      	ldrh	r3, [r3, #26]
    18c6:	b29b      	uxth	r3, r3
    18c8:	001a      	movs	r2, r3
    18ca:	2320      	movs	r3, #32
    18cc:	4013      	ands	r3, r2
    18ce:	d101      	bne.n	18d4 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    18d0:	2341      	movs	r3, #65	; 0x41
    18d2:	e047      	b.n	1964 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    18d4:	687b      	ldr	r3, [r7, #4]
    18d6:	0018      	movs	r0, r3
    18d8:	f7ff fb44 	bl	f64 <_i2c_master_wait_for_sync>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    18dc:	683b      	ldr	r3, [r7, #0]
    18de:	685a      	ldr	r2, [r3, #4]
    18e0:	2312      	movs	r3, #18
    18e2:	18fb      	adds	r3, r7, r3
    18e4:	881b      	ldrh	r3, [r3, #0]
    18e6:	2112      	movs	r1, #18
    18e8:	1879      	adds	r1, r7, r1
    18ea:	1c58      	adds	r0, r3, #1
    18ec:	8008      	strh	r0, [r1, #0]
    18ee:	18d3      	adds	r3, r2, r3
    18f0:	7819      	ldrb	r1, [r3, #0]
    18f2:	68fb      	ldr	r3, [r7, #12]
    18f4:	2228      	movs	r2, #40	; 0x28
    18f6:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    18f8:	2317      	movs	r3, #23
    18fa:	18fc      	adds	r4, r7, r3
    18fc:	687b      	ldr	r3, [r7, #4]
    18fe:	0018      	movs	r0, r3
    1900:	f7ff fde2 	bl	14c8 <_i2c_master_wait_for_bus>
    1904:	0003      	movs	r3, r0
    1906:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1908:	2317      	movs	r3, #23
    190a:	18fb      	adds	r3, r7, r3
    190c:	781b      	ldrb	r3, [r3, #0]
    190e:	2b00      	cmp	r3, #0
    1910:	d115      	bne.n	193e <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1912:	68fb      	ldr	r3, [r7, #12]
    1914:	8b5b      	ldrh	r3, [r3, #26]
    1916:	b29b      	uxth	r3, r3
    1918:	001a      	movs	r2, r3
    191a:	2304      	movs	r3, #4
    191c:	4013      	ands	r3, r2
    191e:	d004      	beq.n	192a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1920:	2317      	movs	r3, #23
    1922:	18fb      	adds	r3, r7, r3
    1924:	221e      	movs	r2, #30
    1926:	701a      	strb	r2, [r3, #0]
				break;
    1928:	e00a      	b.n	1940 <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    192a:	2314      	movs	r3, #20
    192c:	18fb      	adds	r3, r7, r3
    192e:	881b      	ldrh	r3, [r3, #0]
    1930:	2214      	movs	r2, #20
    1932:	18ba      	adds	r2, r7, r2
    1934:	1e59      	subs	r1, r3, #1
    1936:	8011      	strh	r1, [r2, #0]
    1938:	2b00      	cmp	r3, #0
    193a:	d1c2      	bne.n	18c2 <_i2c_master_write_packet+0xba>
    193c:	e000      	b.n	1940 <_i2c_master_write_packet+0x138>
			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    193e:	46c0      	nop			; (mov r8, r8)
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	7a9b      	ldrb	r3, [r3, #10]
    1944:	2b00      	cmp	r3, #0
    1946:	d00a      	beq.n	195e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	0018      	movs	r0, r3
    194c:	f7ff fb0a 	bl	f64 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1950:	68fb      	ldr	r3, [r7, #12]
    1952:	685b      	ldr	r3, [r3, #4]
    1954:	22c0      	movs	r2, #192	; 0xc0
    1956:	0292      	lsls	r2, r2, #10
    1958:	431a      	orrs	r2, r3
    195a:	68fb      	ldr	r3, [r7, #12]
    195c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    195e:	2317      	movs	r3, #23
    1960:	18fb      	adds	r3, r7, r3
    1962:	781b      	ldrb	r3, [r3, #0]
}
    1964:	0018      	movs	r0, r3
    1966:	46bd      	mov	sp, r7
    1968:	b007      	add	sp, #28
    196a:	bd90      	pop	{r4, r7, pc}
    196c:	fffbffff 	.word	0xfffbffff

00001970 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1970:	b580      	push	{r7, lr}
    1972:	b082      	sub	sp, #8
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
    1978:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    197a:	687b      	ldr	r3, [r7, #4]
    197c:	2201      	movs	r2, #1
    197e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1980:	687b      	ldr	r3, [r7, #4]
    1982:	2201      	movs	r2, #1
    1984:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1986:	683a      	ldr	r2, [r7, #0]
    1988:	687b      	ldr	r3, [r7, #4]
    198a:	0011      	movs	r1, r2
    198c:	0018      	movs	r0, r3
    198e:	f7ff ff3b 	bl	1808 <_i2c_master_write_packet>
    1992:	0003      	movs	r3, r0
}
    1994:	0018      	movs	r0, r3
    1996:	46bd      	mov	sp, r7
    1998:	b002      	add	sp, #8
    199a:	bd80      	pop	{r7, pc}

0000199c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    199c:	b580      	push	{r7, lr}
    199e:	b082      	sub	sp, #8
    19a0:	af00      	add	r7, sp, #0
    19a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	2200      	movs	r2, #0
    19a8:	701a      	strb	r2, [r3, #0]
}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	46bd      	mov	sp, r7
    19ae:	b002      	add	sp, #8
    19b0:	bd80      	pop	{r7, pc}
    19b2:	46c0      	nop			; (mov r8, r8)

000019b4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    19b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19b6:	b08d      	sub	sp, #52	; 0x34
    19b8:	af00      	add	r7, sp, #0
    19ba:	60b8      	str	r0, [r7, #8]
    19bc:	60f9      	str	r1, [r7, #12]
    19be:	603a      	str	r2, [r7, #0]
    19c0:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    19c2:	2300      	movs	r3, #0
    19c4:	2400      	movs	r4, #0
    19c6:	623b      	str	r3, [r7, #32]
    19c8:	627c      	str	r4, [r7, #36]	; 0x24
    19ca:	2300      	movs	r3, #0
    19cc:	2400      	movs	r4, #0
    19ce:	61bb      	str	r3, [r7, #24]
    19d0:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    19d2:	233f      	movs	r3, #63	; 0x3f
    19d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    19d6:	e053      	b.n	1a80 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    19d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19da:	3b20      	subs	r3, #32
    19dc:	2b00      	cmp	r3, #0
    19de:	db04      	blt.n	19ea <long_division+0x36>
    19e0:	2201      	movs	r2, #1
    19e2:	409a      	lsls	r2, r3
    19e4:	0013      	movs	r3, r2
    19e6:	617b      	str	r3, [r7, #20]
    19e8:	e00b      	b.n	1a02 <long_division+0x4e>
    19ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19ec:	2220      	movs	r2, #32
    19ee:	1ad3      	subs	r3, r2, r3
    19f0:	2201      	movs	r2, #1
    19f2:	40da      	lsrs	r2, r3
    19f4:	0013      	movs	r3, r2
    19f6:	2100      	movs	r1, #0
    19f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    19fa:	4091      	lsls	r1, r2
    19fc:	000a      	movs	r2, r1
    19fe:	4313      	orrs	r3, r2
    1a00:	617b      	str	r3, [r7, #20]
    1a02:	2201      	movs	r2, #1
    1a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a06:	409a      	lsls	r2, r3
    1a08:	0013      	movs	r3, r2
    1a0a:	613b      	str	r3, [r7, #16]

		r = r << 1;
    1a0c:	69bb      	ldr	r3, [r7, #24]
    1a0e:	69fc      	ldr	r4, [r7, #28]
    1a10:	18db      	adds	r3, r3, r3
    1a12:	4164      	adcs	r4, r4
    1a14:	61bb      	str	r3, [r7, #24]
    1a16:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    1a18:	68bb      	ldr	r3, [r7, #8]
    1a1a:	693a      	ldr	r2, [r7, #16]
    1a1c:	401a      	ands	r2, r3
    1a1e:	0015      	movs	r5, r2
    1a20:	68fb      	ldr	r3, [r7, #12]
    1a22:	697a      	ldr	r2, [r7, #20]
    1a24:	401a      	ands	r2, r3
    1a26:	0016      	movs	r6, r2
    1a28:	002b      	movs	r3, r5
    1a2a:	4333      	orrs	r3, r6
    1a2c:	d007      	beq.n	1a3e <long_division+0x8a>
			r |= 0x01;
    1a2e:	69bb      	ldr	r3, [r7, #24]
    1a30:	2201      	movs	r2, #1
    1a32:	4313      	orrs	r3, r2
    1a34:	61bb      	str	r3, [r7, #24]
    1a36:	69fb      	ldr	r3, [r7, #28]
    1a38:	2200      	movs	r2, #0
    1a3a:	4313      	orrs	r3, r2
    1a3c:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    1a3e:	687a      	ldr	r2, [r7, #4]
    1a40:	69fb      	ldr	r3, [r7, #28]
    1a42:	429a      	cmp	r2, r3
    1a44:	d819      	bhi.n	1a7a <long_division+0xc6>
    1a46:	687a      	ldr	r2, [r7, #4]
    1a48:	69fb      	ldr	r3, [r7, #28]
    1a4a:	429a      	cmp	r2, r3
    1a4c:	d103      	bne.n	1a56 <long_division+0xa2>
    1a4e:	683a      	ldr	r2, [r7, #0]
    1a50:	69bb      	ldr	r3, [r7, #24]
    1a52:	429a      	cmp	r2, r3
    1a54:	d811      	bhi.n	1a7a <long_division+0xc6>
			r = r - d;
    1a56:	69b9      	ldr	r1, [r7, #24]
    1a58:	69fa      	ldr	r2, [r7, #28]
    1a5a:	683b      	ldr	r3, [r7, #0]
    1a5c:	687c      	ldr	r4, [r7, #4]
    1a5e:	1ac9      	subs	r1, r1, r3
    1a60:	41a2      	sbcs	r2, r4
    1a62:	000b      	movs	r3, r1
    1a64:	0014      	movs	r4, r2
    1a66:	61bb      	str	r3, [r7, #24]
    1a68:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    1a6a:	6a3a      	ldr	r2, [r7, #32]
    1a6c:	693b      	ldr	r3, [r7, #16]
    1a6e:	4313      	orrs	r3, r2
    1a70:	623b      	str	r3, [r7, #32]
    1a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a74:	697b      	ldr	r3, [r7, #20]
    1a76:	4313      	orrs	r3, r2
    1a78:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    1a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a7c:	3b01      	subs	r3, #1
    1a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a82:	2b00      	cmp	r3, #0
    1a84:	daa8      	bge.n	19d8 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    1a86:	6a3b      	ldr	r3, [r7, #32]
    1a88:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    1a8a:	0018      	movs	r0, r3
    1a8c:	0021      	movs	r1, r4
    1a8e:	46bd      	mov	sp, r7
    1a90:	b00d      	add	sp, #52	; 0x34
    1a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001a94 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	b086      	sub	sp, #24
    1a98:	af00      	add	r7, sp, #0
    1a9a:	60f8      	str	r0, [r7, #12]
    1a9c:	60b9      	str	r1, [r7, #8]
    1a9e:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    1aa0:	2316      	movs	r3, #22
    1aa2:	18fb      	adds	r3, r7, r3
    1aa4:	2200      	movs	r2, #0
    1aa6:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    1aa8:	68bb      	ldr	r3, [r7, #8]
    1aaa:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1aac:	68bb      	ldr	r3, [r7, #8]
    1aae:	085a      	lsrs	r2, r3, #1
    1ab0:	68fb      	ldr	r3, [r7, #12]
    1ab2:	429a      	cmp	r2, r3
    1ab4:	d201      	bcs.n	1aba <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ab6:	2340      	movs	r3, #64	; 0x40
    1ab8:	e026      	b.n	1b08 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    1aba:	68bb      	ldr	r3, [r7, #8]
    1abc:	085b      	lsrs	r3, r3, #1
    1abe:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    1ac0:	e00a      	b.n	1ad8 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    1ac2:	693a      	ldr	r2, [r7, #16]
    1ac4:	68fb      	ldr	r3, [r7, #12]
    1ac6:	1ad3      	subs	r3, r2, r3
    1ac8:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    1aca:	2316      	movs	r3, #22
    1acc:	18fb      	adds	r3, r7, r3
    1ace:	881a      	ldrh	r2, [r3, #0]
    1ad0:	2316      	movs	r3, #22
    1ad2:	18fb      	adds	r3, r7, r3
    1ad4:	3201      	adds	r2, #1
    1ad6:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    1ad8:	693a      	ldr	r2, [r7, #16]
    1ada:	68fb      	ldr	r3, [r7, #12]
    1adc:	429a      	cmp	r2, r3
    1ade:	d2f0      	bcs.n	1ac2 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    1ae0:	2316      	movs	r3, #22
    1ae2:	18fb      	adds	r3, r7, r3
    1ae4:	2216      	movs	r2, #22
    1ae6:	18ba      	adds	r2, r7, r2
    1ae8:	8812      	ldrh	r2, [r2, #0]
    1aea:	3a01      	subs	r2, #1
    1aec:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1aee:	2316      	movs	r3, #22
    1af0:	18fb      	adds	r3, r7, r3
    1af2:	881b      	ldrh	r3, [r3, #0]
    1af4:	2bff      	cmp	r3, #255	; 0xff
    1af6:	d901      	bls.n	1afc <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1af8:	2340      	movs	r3, #64	; 0x40
    1afa:	e005      	b.n	1b08 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	2216      	movs	r2, #22
    1b00:	18ba      	adds	r2, r7, r2
    1b02:	8812      	ldrh	r2, [r2, #0]
    1b04:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    1b06:	2300      	movs	r3, #0
	}
}
    1b08:	0018      	movs	r0, r3
    1b0a:	46bd      	mov	sp, r7
    1b0c:	b006      	add	sp, #24
    1b0e:	bd80      	pop	{r7, pc}

00001b10 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b12:	b0a1      	sub	sp, #132	; 0x84
    1b14:	af00      	add	r7, sp, #0
    1b16:	64f8      	str	r0, [r7, #76]	; 0x4c
    1b18:	64b9      	str	r1, [r7, #72]	; 0x48
    1b1a:	647a      	str	r2, [r7, #68]	; 0x44
    1b1c:	2243      	movs	r2, #67	; 0x43
    1b1e:	18ba      	adds	r2, r7, r2
    1b20:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    1b22:	2300      	movs	r3, #0
    1b24:	2400      	movs	r4, #0
    1b26:	673b      	str	r3, [r7, #112]	; 0x70
    1b28:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    1b2a:	2300      	movs	r3, #0
    1b2c:	2400      	movs	r4, #0
    1b2e:	66bb      	str	r3, [r7, #104]	; 0x68
    1b30:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    1b32:	2300      	movs	r3, #0
    1b34:	2400      	movs	r4, #0
    1b36:	67bb      	str	r3, [r7, #120]	; 0x78
    1b38:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    1b3a:	2300      	movs	r3, #0
    1b3c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1b3e:	2358      	movs	r3, #88	; 0x58
    1b40:	2240      	movs	r2, #64	; 0x40
    1b42:	4694      	mov	ip, r2
    1b44:	44bc      	add	ip, r7
    1b46:	4463      	add	r3, ip
    1b48:	781a      	ldrb	r2, [r3, #0]
    1b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1b4c:	435a      	muls	r2, r3
    1b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1b50:	429a      	cmp	r2, r3
    1b52:	d901      	bls.n	1b58 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b54:	2340      	movs	r3, #64	; 0x40
    1b56:	e0b3      	b.n	1cc0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1b58:	2343      	movs	r3, #67	; 0x43
    1b5a:	18fb      	adds	r3, r7, r3
    1b5c:	781b      	ldrb	r3, [r3, #0]
    1b5e:	2b00      	cmp	r3, #0
    1b60:	d13d      	bne.n	1bde <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1b62:	2358      	movs	r3, #88	; 0x58
    1b64:	2240      	movs	r2, #64	; 0x40
    1b66:	4694      	mov	ip, r2
    1b68:	44bc      	add	ip, r7
    1b6a:	4463      	add	r3, ip
    1b6c:	781b      	ldrb	r3, [r3, #0]
    1b6e:	b2db      	uxtb	r3, r3
    1b70:	613b      	str	r3, [r7, #16]
    1b72:	2300      	movs	r3, #0
    1b74:	617b      	str	r3, [r7, #20]
    1b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1b78:	60bb      	str	r3, [r7, #8]
    1b7a:	2300      	movs	r3, #0
    1b7c:	60fb      	str	r3, [r7, #12]
    1b7e:	68ba      	ldr	r2, [r7, #8]
    1b80:	68fb      	ldr	r3, [r7, #12]
    1b82:	6938      	ldr	r0, [r7, #16]
    1b84:	6979      	ldr	r1, [r7, #20]
    1b86:	f021 fe5d 	bl	23844 <__aeabi_lmul>
    1b8a:	0003      	movs	r3, r0
    1b8c:	000c      	movs	r4, r1
    1b8e:	001b      	movs	r3, r3
    1b90:	65fb      	str	r3, [r7, #92]	; 0x5c
    1b92:	2300      	movs	r3, #0
    1b94:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    1b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1b98:	603b      	str	r3, [r7, #0]
    1b9a:	2300      	movs	r3, #0
    1b9c:	607b      	str	r3, [r7, #4]
    1b9e:	6db8      	ldr	r0, [r7, #88]	; 0x58
    1ba0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    1ba2:	683a      	ldr	r2, [r7, #0]
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	f7ff ff05 	bl	19b4 <long_division>
    1baa:	0003      	movs	r3, r0
    1bac:	000c      	movs	r4, r1
    1bae:	673b      	str	r3, [r7, #112]	; 0x70
    1bb0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1bb2:	2100      	movs	r1, #0
    1bb4:	2201      	movs	r2, #1
    1bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1bb8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    1bba:	1ac9      	subs	r1, r1, r3
    1bbc:	41a2      	sbcs	r2, r4
    1bbe:	000b      	movs	r3, r1
    1bc0:	0014      	movs	r4, r2
    1bc2:	66bb      	str	r3, [r7, #104]	; 0x68
    1bc4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    1bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1bc8:	0c1b      	lsrs	r3, r3, #16
    1bca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    1bcc:	0416      	lsls	r6, r2, #16
    1bce:	431e      	orrs	r6, r3
    1bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1bd2:	041d      	lsls	r5, r3, #16
    1bd4:	0033      	movs	r3, r6
    1bd6:	67bb      	str	r3, [r7, #120]	; 0x78
    1bd8:	2300      	movs	r3, #0
    1bda:	67fb      	str	r3, [r7, #124]	; 0x7c
    1bdc:	e06a      	b.n	1cb4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1bde:	2343      	movs	r3, #67	; 0x43
    1be0:	18fb      	adds	r3, r7, r3
    1be2:	781b      	ldrb	r3, [r3, #0]
    1be4:	2b01      	cmp	r3, #1
    1be6:	d165      	bne.n	1cb4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    1be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1bea:	633b      	str	r3, [r7, #48]	; 0x30
    1bec:	2300      	movs	r3, #0
    1bee:	637b      	str	r3, [r7, #52]	; 0x34
    1bf0:	2358      	movs	r3, #88	; 0x58
    1bf2:	2240      	movs	r2, #64	; 0x40
    1bf4:	4694      	mov	ip, r2
    1bf6:	44bc      	add	ip, r7
    1bf8:	4463      	add	r3, ip
    1bfa:	781b      	ldrb	r3, [r3, #0]
    1bfc:	b2db      	uxtb	r3, r3
    1bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    1c00:	2300      	movs	r3, #0
    1c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1c0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
    1c0c:	f021 fe1a 	bl	23844 <__aeabi_lmul>
    1c10:	0003      	movs	r3, r0
    1c12:	000c      	movs	r4, r1
    1c14:	65bb      	str	r3, [r7, #88]	; 0x58
    1c16:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    1c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1c1a:	623b      	str	r3, [r7, #32]
    1c1c:	2300      	movs	r3, #0
    1c1e:	627b      	str	r3, [r7, #36]	; 0x24
    1c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c22:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1c24:	001a      	movs	r2, r3
    1c26:	0023      	movs	r3, r4
    1c28:	6a38      	ldr	r0, [r7, #32]
    1c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1c2c:	f7ff fec2 	bl	19b4 <long_division>
    1c30:	0003      	movs	r3, r0
    1c32:	000c      	movs	r4, r1
    1c34:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    1c36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1c38:	2380      	movs	r3, #128	; 0x80
    1c3a:	019b      	lsls	r3, r3, #6
    1c3c:	429a      	cmp	r2, r3
    1c3e:	d901      	bls.n	1c44 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c40:	2340      	movs	r3, #64	; 0x40
    1c42:	e03d      	b.n	1cc0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1c46:	61bb      	str	r3, [r7, #24]
    1c48:	2300      	movs	r3, #0
    1c4a:	61fb      	str	r3, [r7, #28]
    1c4c:	69b9      	ldr	r1, [r7, #24]
    1c4e:	69fa      	ldr	r2, [r7, #28]
    1c50:	000b      	movs	r3, r1
    1c52:	0f5b      	lsrs	r3, r3, #29
    1c54:	0010      	movs	r0, r2
    1c56:	00c0      	lsls	r0, r0, #3
    1c58:	63f8      	str	r0, [r7, #60]	; 0x3c
    1c5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    1c5c:	4318      	orrs	r0, r3
    1c5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    1c60:	000b      	movs	r3, r1
    1c62:	00db      	lsls	r3, r3, #3
    1c64:	63bb      	str	r3, [r7, #56]	; 0x38
    1c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c68:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1c6a:	001a      	movs	r2, r3
    1c6c:	0023      	movs	r3, r4
    1c6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1c70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    1c72:	f7ff fe9f 	bl	19b4 <long_division>
    1c76:	0003      	movs	r3, r0
    1c78:	000c      	movs	r4, r1
    1c7a:	65bb      	str	r3, [r7, #88]	; 0x58
    1c7c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    1c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1c80:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1c82:	b2d9      	uxtb	r1, r3
    1c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1c86:	b2db      	uxtb	r3, r3
    1c88:	00db      	lsls	r3, r3, #3
    1c8a:	b2da      	uxtb	r2, r3
    1c8c:	2317      	movs	r3, #23
    1c8e:	2040      	movs	r0, #64	; 0x40
    1c90:	4684      	mov	ip, r0
    1c92:	44bc      	add	ip, r7
    1c94:	4463      	add	r3, ip
    1c96:	1a8a      	subs	r2, r1, r2
    1c98:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    1c9a:	2317      	movs	r3, #23
    1c9c:	2240      	movs	r2, #64	; 0x40
    1c9e:	4694      	mov	ip, r2
    1ca0:	44bc      	add	ip, r7
    1ca2:	4463      	add	r3, ip
    1ca4:	781b      	ldrb	r3, [r3, #0]
    1ca6:	035b      	lsls	r3, r3, #13
    1ca8:	001a      	movs	r2, r3
    1caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1cac:	4313      	orrs	r3, r2
    1cae:	67bb      	str	r3, [r7, #120]	; 0x78
    1cb0:	2300      	movs	r3, #0
    1cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    1cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1cb6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    1cb8:	b29a      	uxth	r2, r3
    1cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1cbc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    1cbe:	2300      	movs	r3, #0
}
    1cc0:	0018      	movs	r0, r3
    1cc2:	46bd      	mov	sp, r7
    1cc4:	b021      	add	sp, #132	; 0x84
    1cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001cc8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1cc8:	b580      	push	{r7, lr}
    1cca:	b084      	sub	sp, #16
    1ccc:	af00      	add	r7, sp, #0
    1cce:	0002      	movs	r2, r0
    1cd0:	1dfb      	adds	r3, r7, #7
    1cd2:	701a      	strb	r2, [r3, #0]
    1cd4:	1dbb      	adds	r3, r7, #6
    1cd6:	1c0a      	adds	r2, r1, #0
    1cd8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1cda:	4b1a      	ldr	r3, [pc, #104]	; (1d44 <sercom_set_gclk_generator+0x7c>)
    1cdc:	781b      	ldrb	r3, [r3, #0]
    1cde:	2201      	movs	r2, #1
    1ce0:	4053      	eors	r3, r2
    1ce2:	b2db      	uxtb	r3, r3
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d103      	bne.n	1cf0 <sercom_set_gclk_generator+0x28>
    1ce8:	1dbb      	adds	r3, r7, #6
    1cea:	781b      	ldrb	r3, [r3, #0]
    1cec:	2b00      	cmp	r3, #0
    1cee:	d01b      	beq.n	1d28 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1cf0:	230c      	movs	r3, #12
    1cf2:	18fb      	adds	r3, r7, r3
    1cf4:	0018      	movs	r0, r3
    1cf6:	f7ff fe51 	bl	199c <system_gclk_chan_get_config_defaults>
		gclk_chan_conf.source_generator = generator_source;
    1cfa:	230c      	movs	r3, #12
    1cfc:	18fb      	adds	r3, r7, r3
    1cfe:	1dfa      	adds	r2, r7, #7
    1d00:	7812      	ldrb	r2, [r2, #0]
    1d02:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1d04:	230c      	movs	r3, #12
    1d06:	18fb      	adds	r3, r7, r3
    1d08:	0019      	movs	r1, r3
    1d0a:	2013      	movs	r0, #19
    1d0c:	f002 ff00 	bl	4b10 <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1d10:	2013      	movs	r0, #19
    1d12:	f002 ff1d 	bl	4b50 <system_gclk_chan_enable>

		/* Save config */
		_sercom_config.generator_source = generator_source;
    1d16:	4b0b      	ldr	r3, [pc, #44]	; (1d44 <sercom_set_gclk_generator+0x7c>)
    1d18:	1dfa      	adds	r2, r7, #7
    1d1a:	7812      	ldrb	r2, [r2, #0]
    1d1c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    1d1e:	4b09      	ldr	r3, [pc, #36]	; (1d44 <sercom_set_gclk_generator+0x7c>)
    1d20:	2201      	movs	r2, #1
    1d22:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1d24:	2300      	movs	r3, #0
    1d26:	e008      	b.n	1d3a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    1d28:	4b06      	ldr	r3, [pc, #24]	; (1d44 <sercom_set_gclk_generator+0x7c>)
    1d2a:	785b      	ldrb	r3, [r3, #1]
    1d2c:	1dfa      	adds	r2, r7, #7
    1d2e:	7812      	ldrb	r2, [r2, #0]
    1d30:	429a      	cmp	r2, r3
    1d32:	d101      	bne.n	1d38 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    1d34:	2300      	movs	r3, #0
    1d36:	e000      	b.n	1d3a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1d38:	231d      	movs	r3, #29
}
    1d3a:	0018      	movs	r0, r3
    1d3c:	46bd      	mov	sp, r7
    1d3e:	b004      	add	sp, #16
    1d40:	bd80      	pop	{r7, pc}
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	200002f8 	.word	0x200002f8

00001d48 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1d48:	b580      	push	{r7, lr}
    1d4a:	b082      	sub	sp, #8
    1d4c:	af00      	add	r7, sp, #0
    1d4e:	6078      	str	r0, [r7, #4]
    1d50:	000a      	movs	r2, r1
    1d52:	1cfb      	adds	r3, r7, #3
    1d54:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	4a4d      	ldr	r2, [pc, #308]	; (1e90 <_sercom_get_default_pad+0x148>)
    1d5a:	4293      	cmp	r3, r2
    1d5c:	d03f      	beq.n	1dde <_sercom_get_default_pad+0x96>
    1d5e:	4a4c      	ldr	r2, [pc, #304]	; (1e90 <_sercom_get_default_pad+0x148>)
    1d60:	4293      	cmp	r3, r2
    1d62:	d806      	bhi.n	1d72 <_sercom_get_default_pad+0x2a>
    1d64:	4a4b      	ldr	r2, [pc, #300]	; (1e94 <_sercom_get_default_pad+0x14c>)
    1d66:	4293      	cmp	r3, r2
    1d68:	d00f      	beq.n	1d8a <_sercom_get_default_pad+0x42>
    1d6a:	4a4b      	ldr	r2, [pc, #300]	; (1e98 <_sercom_get_default_pad+0x150>)
    1d6c:	4293      	cmp	r3, r2
    1d6e:	d021      	beq.n	1db4 <_sercom_get_default_pad+0x6c>
    1d70:	e089      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1d72:	4a4a      	ldr	r2, [pc, #296]	; (1e9c <_sercom_get_default_pad+0x154>)
    1d74:	4293      	cmp	r3, r2
    1d76:	d100      	bne.n	1d7a <_sercom_get_default_pad+0x32>
    1d78:	e05b      	b.n	1e32 <_sercom_get_default_pad+0xea>
    1d7a:	4a49      	ldr	r2, [pc, #292]	; (1ea0 <_sercom_get_default_pad+0x158>)
    1d7c:	4293      	cmp	r3, r2
    1d7e:	d100      	bne.n	1d82 <_sercom_get_default_pad+0x3a>
    1d80:	e06c      	b.n	1e5c <_sercom_get_default_pad+0x114>
    1d82:	4a48      	ldr	r2, [pc, #288]	; (1ea4 <_sercom_get_default_pad+0x15c>)
    1d84:	4293      	cmp	r3, r2
    1d86:	d03f      	beq.n	1e08 <_sercom_get_default_pad+0xc0>
    1d88:	e07d      	b.n	1e86 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d8a:	1cfb      	adds	r3, r7, #3
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	2b01      	cmp	r3, #1
    1d90:	d00a      	beq.n	1da8 <_sercom_get_default_pad+0x60>
    1d92:	dc02      	bgt.n	1d9a <_sercom_get_default_pad+0x52>
    1d94:	2b00      	cmp	r3, #0
    1d96:	d005      	beq.n	1da4 <_sercom_get_default_pad+0x5c>
    1d98:	e075      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1d9a:	2b02      	cmp	r3, #2
    1d9c:	d006      	beq.n	1dac <_sercom_get_default_pad+0x64>
    1d9e:	2b03      	cmp	r3, #3
    1da0:	d006      	beq.n	1db0 <_sercom_get_default_pad+0x68>
    1da2:	e070      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1da4:	4b40      	ldr	r3, [pc, #256]	; (1ea8 <_sercom_get_default_pad+0x160>)
    1da6:	e06f      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1da8:	4b40      	ldr	r3, [pc, #256]	; (1eac <_sercom_get_default_pad+0x164>)
    1daa:	e06d      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1dac:	4b40      	ldr	r3, [pc, #256]	; (1eb0 <_sercom_get_default_pad+0x168>)
    1dae:	e06b      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1db0:	4b40      	ldr	r3, [pc, #256]	; (1eb4 <_sercom_get_default_pad+0x16c>)
    1db2:	e069      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1db4:	1cfb      	adds	r3, r7, #3
    1db6:	781b      	ldrb	r3, [r3, #0]
    1db8:	2b01      	cmp	r3, #1
    1dba:	d00a      	beq.n	1dd2 <_sercom_get_default_pad+0x8a>
    1dbc:	dc02      	bgt.n	1dc4 <_sercom_get_default_pad+0x7c>
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d005      	beq.n	1dce <_sercom_get_default_pad+0x86>
    1dc2:	e060      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1dc4:	2b02      	cmp	r3, #2
    1dc6:	d006      	beq.n	1dd6 <_sercom_get_default_pad+0x8e>
    1dc8:	2b03      	cmp	r3, #3
    1dca:	d006      	beq.n	1dda <_sercom_get_default_pad+0x92>
    1dcc:	e05b      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1dce:	2303      	movs	r3, #3
    1dd0:	e05a      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1dd2:	4b39      	ldr	r3, [pc, #228]	; (1eb8 <_sercom_get_default_pad+0x170>)
    1dd4:	e058      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1dd6:	4b39      	ldr	r3, [pc, #228]	; (1ebc <_sercom_get_default_pad+0x174>)
    1dd8:	e056      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1dda:	4b39      	ldr	r3, [pc, #228]	; (1ec0 <_sercom_get_default_pad+0x178>)
    1ddc:	e054      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1dde:	1cfb      	adds	r3, r7, #3
    1de0:	781b      	ldrb	r3, [r3, #0]
    1de2:	2b01      	cmp	r3, #1
    1de4:	d00a      	beq.n	1dfc <_sercom_get_default_pad+0xb4>
    1de6:	dc02      	bgt.n	1dee <_sercom_get_default_pad+0xa6>
    1de8:	2b00      	cmp	r3, #0
    1dea:	d005      	beq.n	1df8 <_sercom_get_default_pad+0xb0>
    1dec:	e04b      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1dee:	2b02      	cmp	r3, #2
    1df0:	d006      	beq.n	1e00 <_sercom_get_default_pad+0xb8>
    1df2:	2b03      	cmp	r3, #3
    1df4:	d006      	beq.n	1e04 <_sercom_get_default_pad+0xbc>
    1df6:	e046      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1df8:	4b32      	ldr	r3, [pc, #200]	; (1ec4 <_sercom_get_default_pad+0x17c>)
    1dfa:	e045      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1dfc:	4b32      	ldr	r3, [pc, #200]	; (1ec8 <_sercom_get_default_pad+0x180>)
    1dfe:	e043      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e00:	4b32      	ldr	r3, [pc, #200]	; (1ecc <_sercom_get_default_pad+0x184>)
    1e02:	e041      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e04:	4b32      	ldr	r3, [pc, #200]	; (1ed0 <_sercom_get_default_pad+0x188>)
    1e06:	e03f      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e08:	1cfb      	adds	r3, r7, #3
    1e0a:	781b      	ldrb	r3, [r3, #0]
    1e0c:	2b01      	cmp	r3, #1
    1e0e:	d00a      	beq.n	1e26 <_sercom_get_default_pad+0xde>
    1e10:	dc02      	bgt.n	1e18 <_sercom_get_default_pad+0xd0>
    1e12:	2b00      	cmp	r3, #0
    1e14:	d005      	beq.n	1e22 <_sercom_get_default_pad+0xda>
    1e16:	e036      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1e18:	2b02      	cmp	r3, #2
    1e1a:	d006      	beq.n	1e2a <_sercom_get_default_pad+0xe2>
    1e1c:	2b03      	cmp	r3, #3
    1e1e:	d006      	beq.n	1e2e <_sercom_get_default_pad+0xe6>
    1e20:	e031      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1e22:	4b2c      	ldr	r3, [pc, #176]	; (1ed4 <_sercom_get_default_pad+0x18c>)
    1e24:	e030      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e26:	4b2c      	ldr	r3, [pc, #176]	; (1ed8 <_sercom_get_default_pad+0x190>)
    1e28:	e02e      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e2a:	4b2c      	ldr	r3, [pc, #176]	; (1edc <_sercom_get_default_pad+0x194>)
    1e2c:	e02c      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e2e:	4b2c      	ldr	r3, [pc, #176]	; (1ee0 <_sercom_get_default_pad+0x198>)
    1e30:	e02a      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e32:	1cfb      	adds	r3, r7, #3
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	2b01      	cmp	r3, #1
    1e38:	d00a      	beq.n	1e50 <_sercom_get_default_pad+0x108>
    1e3a:	dc02      	bgt.n	1e42 <_sercom_get_default_pad+0xfa>
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d005      	beq.n	1e4c <_sercom_get_default_pad+0x104>
    1e40:	e021      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1e42:	2b02      	cmp	r3, #2
    1e44:	d006      	beq.n	1e54 <_sercom_get_default_pad+0x10c>
    1e46:	2b03      	cmp	r3, #3
    1e48:	d006      	beq.n	1e58 <_sercom_get_default_pad+0x110>
    1e4a:	e01c      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1e4c:	4b25      	ldr	r3, [pc, #148]	; (1ee4 <_sercom_get_default_pad+0x19c>)
    1e4e:	e01b      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e50:	4b25      	ldr	r3, [pc, #148]	; (1ee8 <_sercom_get_default_pad+0x1a0>)
    1e52:	e019      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e54:	4b25      	ldr	r3, [pc, #148]	; (1eec <_sercom_get_default_pad+0x1a4>)
    1e56:	e017      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e58:	4b25      	ldr	r3, [pc, #148]	; (1ef0 <_sercom_get_default_pad+0x1a8>)
    1e5a:	e015      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e5c:	1cfb      	adds	r3, r7, #3
    1e5e:	781b      	ldrb	r3, [r3, #0]
    1e60:	2b01      	cmp	r3, #1
    1e62:	d00a      	beq.n	1e7a <_sercom_get_default_pad+0x132>
    1e64:	dc02      	bgt.n	1e6c <_sercom_get_default_pad+0x124>
    1e66:	2b00      	cmp	r3, #0
    1e68:	d005      	beq.n	1e76 <_sercom_get_default_pad+0x12e>
    1e6a:	e00c      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1e6c:	2b02      	cmp	r3, #2
    1e6e:	d006      	beq.n	1e7e <_sercom_get_default_pad+0x136>
    1e70:	2b03      	cmp	r3, #3
    1e72:	d006      	beq.n	1e82 <_sercom_get_default_pad+0x13a>
    1e74:	e007      	b.n	1e86 <_sercom_get_default_pad+0x13e>
    1e76:	4b1f      	ldr	r3, [pc, #124]	; (1ef4 <_sercom_get_default_pad+0x1ac>)
    1e78:	e006      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e7a:	4b1f      	ldr	r3, [pc, #124]	; (1ef8 <_sercom_get_default_pad+0x1b0>)
    1e7c:	e004      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e7e:	4b1f      	ldr	r3, [pc, #124]	; (1efc <_sercom_get_default_pad+0x1b4>)
    1e80:	e002      	b.n	1e88 <_sercom_get_default_pad+0x140>
    1e82:	4b1f      	ldr	r3, [pc, #124]	; (1f00 <_sercom_get_default_pad+0x1b8>)
    1e84:	e000      	b.n	1e88 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    1e86:	2300      	movs	r3, #0
}
    1e88:	0018      	movs	r0, r3
    1e8a:	46bd      	mov	sp, r7
    1e8c:	b002      	add	sp, #8
    1e8e:	bd80      	pop	{r7, pc}
    1e90:	42001000 	.word	0x42001000
    1e94:	42000800 	.word	0x42000800
    1e98:	42000c00 	.word	0x42000c00
    1e9c:	42001800 	.word	0x42001800
    1ea0:	42001c00 	.word	0x42001c00
    1ea4:	42001400 	.word	0x42001400
    1ea8:	00040003 	.word	0x00040003
    1eac:	00050003 	.word	0x00050003
    1eb0:	00060003 	.word	0x00060003
    1eb4:	00070003 	.word	0x00070003
    1eb8:	00010003 	.word	0x00010003
    1ebc:	001e0003 	.word	0x001e0003
    1ec0:	001f0003 	.word	0x001f0003
    1ec4:	00080003 	.word	0x00080003
    1ec8:	00090003 	.word	0x00090003
    1ecc:	000a0003 	.word	0x000a0003
    1ed0:	000b0003 	.word	0x000b0003
    1ed4:	00100003 	.word	0x00100003
    1ed8:	00110003 	.word	0x00110003
    1edc:	00120003 	.word	0x00120003
    1ee0:	00130003 	.word	0x00130003
    1ee4:	000c0003 	.word	0x000c0003
    1ee8:	000d0003 	.word	0x000d0003
    1eec:	000e0003 	.word	0x000e0003
    1ef0:	000f0003 	.word	0x000f0003
    1ef4:	00160003 	.word	0x00160003
    1ef8:	00170003 	.word	0x00170003
    1efc:	00180003 	.word	0x00180003
    1f00:	00190003 	.word	0x00190003

00001f04 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1f04:	b590      	push	{r4, r7, lr}
    1f06:	b08b      	sub	sp, #44	; 0x2c
    1f08:	af00      	add	r7, sp, #0
    1f0a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1f0c:	230c      	movs	r3, #12
    1f0e:	18fb      	adds	r3, r7, r3
    1f10:	4a0f      	ldr	r2, [pc, #60]	; (1f50 <_sercom_get_sercom_inst_index+0x4c>)
    1f12:	ca13      	ldmia	r2!, {r0, r1, r4}
    1f14:	c313      	stmia	r3!, {r0, r1, r4}
    1f16:	ca13      	ldmia	r2!, {r0, r1, r4}
    1f18:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f1a:	2300      	movs	r3, #0
    1f1c:	627b      	str	r3, [r7, #36]	; 0x24
    1f1e:	e00e      	b.n	1f3e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1f20:	230c      	movs	r3, #12
    1f22:	18fb      	adds	r3, r7, r3
    1f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1f26:	0092      	lsls	r2, r2, #2
    1f28:	58d3      	ldr	r3, [r2, r3]
    1f2a:	001a      	movs	r2, r3
    1f2c:	687b      	ldr	r3, [r7, #4]
    1f2e:	429a      	cmp	r2, r3
    1f30:	d102      	bne.n	1f38 <_sercom_get_sercom_inst_index+0x34>
			return i;
    1f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f34:	b2db      	uxtb	r3, r3
    1f36:	e006      	b.n	1f46 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f3a:	3301      	adds	r3, #1
    1f3c:	627b      	str	r3, [r7, #36]	; 0x24
    1f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f40:	2b05      	cmp	r3, #5
    1f42:	d9ed      	bls.n	1f20 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1f44:	2300      	movs	r3, #0
}
    1f46:	0018      	movs	r0, r3
    1f48:	46bd      	mov	sp, r7
    1f4a:	b00b      	add	sp, #44	; 0x2c
    1f4c:	bd90      	pop	{r4, r7, pc}
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	0002856c 	.word	0x0002856c

00001f54 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    1f54:	b580      	push	{r7, lr}
    1f56:	b082      	sub	sp, #8
    1f58:	af00      	add	r7, sp, #0
    1f5a:	0002      	movs	r2, r0
    1f5c:	1dfb      	adds	r3, r7, #7
    1f5e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    1f60:	46c0      	nop			; (mov r8, r8)
    1f62:	46bd      	mov	sp, r7
    1f64:	b002      	add	sp, #8
    1f66:	bd80      	pop	{r7, pc}

00001f68 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b084      	sub	sp, #16
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	0002      	movs	r2, r0
    1f70:	6039      	str	r1, [r7, #0]
    1f72:	1dfb      	adds	r3, r7, #7
    1f74:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1f76:	4b13      	ldr	r3, [pc, #76]	; (1fc4 <_sercom_set_handler+0x5c>)
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	2201      	movs	r2, #1
    1f7c:	4053      	eors	r3, r2
    1f7e:	b2db      	uxtb	r3, r3
    1f80:	2b00      	cmp	r3, #0
    1f82:	d015      	beq.n	1fb0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f84:	2300      	movs	r3, #0
    1f86:	60fb      	str	r3, [r7, #12]
    1f88:	e00c      	b.n	1fa4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1f8a:	4b0f      	ldr	r3, [pc, #60]	; (1fc8 <_sercom_set_handler+0x60>)
    1f8c:	68fa      	ldr	r2, [r7, #12]
    1f8e:	0092      	lsls	r2, r2, #2
    1f90:	490e      	ldr	r1, [pc, #56]	; (1fcc <_sercom_set_handler+0x64>)
    1f92:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    1f94:	4b0e      	ldr	r3, [pc, #56]	; (1fd0 <_sercom_set_handler+0x68>)
    1f96:	68fa      	ldr	r2, [r7, #12]
    1f98:	0092      	lsls	r2, r2, #2
    1f9a:	2100      	movs	r1, #0
    1f9c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f9e:	68fb      	ldr	r3, [r7, #12]
    1fa0:	3301      	adds	r3, #1
    1fa2:	60fb      	str	r3, [r7, #12]
    1fa4:	68fb      	ldr	r3, [r7, #12]
    1fa6:	2b05      	cmp	r3, #5
    1fa8:	d9ef      	bls.n	1f8a <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1faa:	4b06      	ldr	r3, [pc, #24]	; (1fc4 <_sercom_set_handler+0x5c>)
    1fac:	2201      	movs	r2, #1
    1fae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1fb0:	1dfb      	adds	r3, r7, #7
    1fb2:	781a      	ldrb	r2, [r3, #0]
    1fb4:	4b04      	ldr	r3, [pc, #16]	; (1fc8 <_sercom_set_handler+0x60>)
    1fb6:	0092      	lsls	r2, r2, #2
    1fb8:	6839      	ldr	r1, [r7, #0]
    1fba:	50d1      	str	r1, [r2, r3]
}
    1fbc:	46c0      	nop			; (mov r8, r8)
    1fbe:	46bd      	mov	sp, r7
    1fc0:	b004      	add	sp, #16
    1fc2:	bd80      	pop	{r7, pc}
    1fc4:	200002fa 	.word	0x200002fa
    1fc8:	200002fc 	.word	0x200002fc
    1fcc:	00001f55 	.word	0x00001f55
    1fd0:	200004c8 	.word	0x200004c8

00001fd4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1fd4:	b590      	push	{r4, r7, lr}
    1fd6:	b085      	sub	sp, #20
    1fd8:	af00      	add	r7, sp, #0
    1fda:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1fdc:	2308      	movs	r3, #8
    1fde:	18fa      	adds	r2, r7, r3
    1fe0:	4b0c      	ldr	r3, [pc, #48]	; (2014 <_sercom_get_interrupt_vector+0x40>)
    1fe2:	0010      	movs	r0, r2
    1fe4:	0019      	movs	r1, r3
    1fe6:	2306      	movs	r3, #6
    1fe8:	001a      	movs	r2, r3
    1fea:	f023 fb80 	bl	256ee <memcpy>
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1fee:	230f      	movs	r3, #15
    1ff0:	18fc      	adds	r4, r7, r3
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	0018      	movs	r0, r3
    1ff6:	f7ff ff85 	bl	1f04 <_sercom_get_sercom_inst_index>
    1ffa:	0003      	movs	r3, r0
    1ffc:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1ffe:	230f      	movs	r3, #15
    2000:	18fb      	adds	r3, r7, r3
    2002:	781b      	ldrb	r3, [r3, #0]
    2004:	2208      	movs	r2, #8
    2006:	18ba      	adds	r2, r7, r2
    2008:	5cd3      	ldrb	r3, [r2, r3]
    200a:	b25b      	sxtb	r3, r3
}
    200c:	0018      	movs	r0, r3
    200e:	46bd      	mov	sp, r7
    2010:	b005      	add	sp, #20
    2012:	bd90      	pop	{r4, r7, pc}
    2014:	00028584 	.word	0x00028584

00002018 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2018:	b580      	push	{r7, lr}
    201a:	af00      	add	r7, sp, #0
    201c:	4b03      	ldr	r3, [pc, #12]	; (202c <SERCOM0_Handler+0x14>)
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	2000      	movs	r0, #0
    2022:	4798      	blx	r3
    2024:	46c0      	nop			; (mov r8, r8)
    2026:	46bd      	mov	sp, r7
    2028:	bd80      	pop	{r7, pc}
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	200002fc 	.word	0x200002fc

00002030 <SERCOM1_Handler>:
    2030:	b580      	push	{r7, lr}
    2032:	af00      	add	r7, sp, #0
    2034:	4b03      	ldr	r3, [pc, #12]	; (2044 <SERCOM1_Handler+0x14>)
    2036:	685b      	ldr	r3, [r3, #4]
    2038:	2001      	movs	r0, #1
    203a:	4798      	blx	r3
    203c:	46c0      	nop			; (mov r8, r8)
    203e:	46bd      	mov	sp, r7
    2040:	bd80      	pop	{r7, pc}
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	200002fc 	.word	0x200002fc

00002048 <SERCOM2_Handler>:
    2048:	b580      	push	{r7, lr}
    204a:	af00      	add	r7, sp, #0
    204c:	4b03      	ldr	r3, [pc, #12]	; (205c <SERCOM2_Handler+0x14>)
    204e:	689b      	ldr	r3, [r3, #8]
    2050:	2002      	movs	r0, #2
    2052:	4798      	blx	r3
    2054:	46c0      	nop			; (mov r8, r8)
    2056:	46bd      	mov	sp, r7
    2058:	bd80      	pop	{r7, pc}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	200002fc 	.word	0x200002fc

00002060 <SERCOM3_Handler>:
    2060:	b580      	push	{r7, lr}
    2062:	af00      	add	r7, sp, #0
    2064:	4b03      	ldr	r3, [pc, #12]	; (2074 <SERCOM3_Handler+0x14>)
    2066:	68db      	ldr	r3, [r3, #12]
    2068:	2003      	movs	r0, #3
    206a:	4798      	blx	r3
    206c:	46c0      	nop			; (mov r8, r8)
    206e:	46bd      	mov	sp, r7
    2070:	bd80      	pop	{r7, pc}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	200002fc 	.word	0x200002fc

00002078 <SERCOM4_Handler>:
    2078:	b580      	push	{r7, lr}
    207a:	af00      	add	r7, sp, #0
    207c:	4b03      	ldr	r3, [pc, #12]	; (208c <SERCOM4_Handler+0x14>)
    207e:	691b      	ldr	r3, [r3, #16]
    2080:	2004      	movs	r0, #4
    2082:	4798      	blx	r3
    2084:	46c0      	nop			; (mov r8, r8)
    2086:	46bd      	mov	sp, r7
    2088:	bd80      	pop	{r7, pc}
    208a:	46c0      	nop			; (mov r8, r8)
    208c:	200002fc 	.word	0x200002fc

00002090 <SERCOM5_Handler>:
    2090:	b580      	push	{r7, lr}
    2092:	af00      	add	r7, sp, #0
    2094:	4b03      	ldr	r3, [pc, #12]	; (20a4 <SERCOM5_Handler+0x14>)
    2096:	695b      	ldr	r3, [r3, #20]
    2098:	2005      	movs	r0, #5
    209a:	4798      	blx	r3
    209c:	46c0      	nop			; (mov r8, r8)
    209e:	46bd      	mov	sp, r7
    20a0:	bd80      	pop	{r7, pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	200002fc 	.word	0x200002fc

000020a8 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    20a8:	b580      	push	{r7, lr}
    20aa:	b086      	sub	sp, #24
    20ac:	af00      	add	r7, sp, #0
    20ae:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    20b0:	4b31      	ldr	r3, [pc, #196]	; (2178 <_rtc_interrupt_handler+0xd0>)
    20b2:	687a      	ldr	r2, [r7, #4]
    20b4:	0092      	lsls	r2, r2, #2
    20b6:	58d3      	ldr	r3, [r2, r3]
    20b8:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    20ba:	697b      	ldr	r3, [r7, #20]
    20bc:	681b      	ldr	r3, [r3, #0]
    20be:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    20c0:	230e      	movs	r3, #14
    20c2:	18fb      	adds	r3, r7, r3
    20c4:	697a      	ldr	r2, [r7, #20]
    20c6:	8ad2      	ldrh	r2, [r2, #22]
    20c8:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    20ca:	697b      	ldr	r3, [r7, #20]
    20cc:	8a9b      	ldrh	r3, [r3, #20]
    20ce:	b29a      	uxth	r2, r3
    20d0:	230e      	movs	r3, #14
    20d2:	18fb      	adds	r3, r7, r3
    20d4:	210e      	movs	r1, #14
    20d6:	1879      	adds	r1, r7, r1
    20d8:	8809      	ldrh	r1, [r1, #0]
    20da:	400a      	ands	r2, r1
    20dc:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    20de:	693b      	ldr	r3, [r7, #16]
    20e0:	7a1b      	ldrb	r3, [r3, #8]
    20e2:	b2da      	uxtb	r2, r3
    20e4:	230c      	movs	r3, #12
    20e6:	18fb      	adds	r3, r7, r3
    20e8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    20ea:	693b      	ldr	r3, [r7, #16]
    20ec:	79db      	ldrb	r3, [r3, #7]
    20ee:	b2db      	uxtb	r3, r3
    20f0:	b29a      	uxth	r2, r3
    20f2:	230c      	movs	r3, #12
    20f4:	18fb      	adds	r3, r7, r3
    20f6:	210c      	movs	r1, #12
    20f8:	1879      	adds	r1, r7, r1
    20fa:	8809      	ldrh	r1, [r1, #0]
    20fc:	400a      	ands	r2, r1
    20fe:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    2100:	230c      	movs	r3, #12
    2102:	18fb      	adds	r3, r7, r3
    2104:	881b      	ldrh	r3, [r3, #0]
    2106:	2280      	movs	r2, #128	; 0x80
    2108:	4013      	ands	r3, r2
    210a:	d00c      	beq.n	2126 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    210c:	230e      	movs	r3, #14
    210e:	18fb      	adds	r3, r7, r3
    2110:	881b      	ldrh	r3, [r3, #0]
    2112:	2204      	movs	r2, #4
    2114:	4013      	ands	r3, r2
    2116:	d002      	beq.n	211e <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    2118:	697b      	ldr	r3, [r7, #20]
    211a:	691b      	ldr	r3, [r3, #16]
    211c:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    211e:	693b      	ldr	r3, [r7, #16]
    2120:	2280      	movs	r2, #128	; 0x80
    2122:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    2124:	e024      	b.n	2170 <_rtc_interrupt_handler+0xc8>
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    2126:	230c      	movs	r3, #12
    2128:	18fb      	adds	r3, r7, r3
    212a:	881b      	ldrh	r3, [r3, #0]
    212c:	2201      	movs	r2, #1
    212e:	4013      	ands	r3, r2
    2130:	d00c      	beq.n	214c <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    2132:	230e      	movs	r3, #14
    2134:	18fb      	adds	r3, r7, r3
    2136:	881b      	ldrh	r3, [r3, #0]
    2138:	2201      	movs	r2, #1
    213a:	4013      	ands	r3, r2
    213c:	d002      	beq.n	2144 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    213e:	697b      	ldr	r3, [r7, #20]
    2140:	689b      	ldr	r3, [r3, #8]
    2142:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    2144:	693b      	ldr	r3, [r7, #16]
    2146:	2201      	movs	r2, #1
    2148:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    214a:	e011      	b.n	2170 <_rtc_interrupt_handler+0xc8>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    214c:	230c      	movs	r3, #12
    214e:	18fb      	adds	r3, r7, r3
    2150:	881b      	ldrh	r3, [r3, #0]
    2152:	2202      	movs	r2, #2
    2154:	4013      	ands	r3, r2
    2156:	d00b      	beq.n	2170 <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    2158:	230e      	movs	r3, #14
    215a:	18fb      	adds	r3, r7, r3
    215c:	881b      	ldrh	r3, [r3, #0]
    215e:	2202      	movs	r2, #2
    2160:	4013      	ands	r3, r2
    2162:	d002      	beq.n	216a <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    2164:	697b      	ldr	r3, [r7, #20]
    2166:	68db      	ldr	r3, [r3, #12]
    2168:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    216a:	693b      	ldr	r3, [r7, #16]
    216c:	2202      	movs	r2, #2
    216e:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    2170:	46c0      	nop			; (mov r8, r8)
    2172:	46bd      	mov	sp, r7
    2174:	b006      	add	sp, #24
    2176:	bd80      	pop	{r7, pc}
    2178:	200004e0 	.word	0x200004e0

0000217c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    217c:	b580      	push	{r7, lr}
    217e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    2180:	2000      	movs	r0, #0
    2182:	f7ff ff91 	bl	20a8 <_rtc_interrupt_handler>
}
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	46bd      	mov	sp, r7
    218a:	bd80      	pop	{r7, pc}

0000218c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    218c:	b580      	push	{r7, lr}
    218e:	b082      	sub	sp, #8
    2190:	af00      	add	r7, sp, #0
    2192:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	2200      	movs	r2, #0
    2198:	701a      	strb	r2, [r3, #0]
}
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	46bd      	mov	sp, r7
    219e:	b002      	add	sp, #8
    21a0:	bd80      	pop	{r7, pc}
    21a2:	46c0      	nop			; (mov r8, r8)

000021a4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    21a4:	b580      	push	{r7, lr}
    21a6:	b082      	sub	sp, #8
    21a8:	af00      	add	r7, sp, #0
    21aa:	0002      	movs	r2, r0
    21ac:	6039      	str	r1, [r7, #0]
    21ae:	1dfb      	adds	r3, r7, #7
    21b0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    21b2:	1dfb      	adds	r3, r7, #7
    21b4:	781b      	ldrb	r3, [r3, #0]
    21b6:	2b01      	cmp	r3, #1
    21b8:	d00a      	beq.n	21d0 <system_apb_clock_set_mask+0x2c>
    21ba:	2b02      	cmp	r3, #2
    21bc:	d00f      	beq.n	21de <system_apb_clock_set_mask+0x3a>
    21be:	2b00      	cmp	r3, #0
    21c0:	d114      	bne.n	21ec <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    21c2:	4b0e      	ldr	r3, [pc, #56]	; (21fc <system_apb_clock_set_mask+0x58>)
    21c4:	4a0d      	ldr	r2, [pc, #52]	; (21fc <system_apb_clock_set_mask+0x58>)
    21c6:	6991      	ldr	r1, [r2, #24]
    21c8:	683a      	ldr	r2, [r7, #0]
    21ca:	430a      	orrs	r2, r1
    21cc:	619a      	str	r2, [r3, #24]
			break;
    21ce:	e00f      	b.n	21f0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    21d0:	4b0a      	ldr	r3, [pc, #40]	; (21fc <system_apb_clock_set_mask+0x58>)
    21d2:	4a0a      	ldr	r2, [pc, #40]	; (21fc <system_apb_clock_set_mask+0x58>)
    21d4:	69d1      	ldr	r1, [r2, #28]
    21d6:	683a      	ldr	r2, [r7, #0]
    21d8:	430a      	orrs	r2, r1
    21da:	61da      	str	r2, [r3, #28]
			break;
    21dc:	e008      	b.n	21f0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    21de:	4b07      	ldr	r3, [pc, #28]	; (21fc <system_apb_clock_set_mask+0x58>)
    21e0:	4a06      	ldr	r2, [pc, #24]	; (21fc <system_apb_clock_set_mask+0x58>)
    21e2:	6a11      	ldr	r1, [r2, #32]
    21e4:	683a      	ldr	r2, [r7, #0]
    21e6:	430a      	orrs	r2, r1
    21e8:	621a      	str	r2, [r3, #32]
			break;
    21ea:	e001      	b.n	21f0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    21ec:	2317      	movs	r3, #23
    21ee:	e000      	b.n	21f2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    21f0:	2300      	movs	r3, #0
}
    21f2:	0018      	movs	r0, r3
    21f4:	46bd      	mov	sp, r7
    21f6:	b002      	add	sp, #8
    21f8:	bd80      	pop	{r7, pc}
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	40000400 	.word	0x40000400

00002200 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    2200:	b580      	push	{r7, lr}
    2202:	b084      	sub	sp, #16
    2204:	af00      	add	r7, sp, #0
    2206:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2208:	687b      	ldr	r3, [r7, #4]
    220a:	681b      	ldr	r3, [r3, #0]
    220c:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    220e:	68fb      	ldr	r3, [r7, #12]
    2210:	7a9b      	ldrb	r3, [r3, #10]
    2212:	b2db      	uxtb	r3, r3
    2214:	b25b      	sxtb	r3, r3
    2216:	2b00      	cmp	r3, #0
    2218:	da01      	bge.n	221e <rtc_calendar_is_syncing+0x1e>
                return true;
    221a:	2301      	movs	r3, #1
    221c:	e000      	b.n	2220 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    221e:	2300      	movs	r3, #0
}
    2220:	0018      	movs	r0, r3
    2222:	46bd      	mov	sp, r7
    2224:	b004      	add	sp, #16
    2226:	bd80      	pop	{r7, pc}

00002228 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    2228:	b580      	push	{r7, lr}
    222a:	b084      	sub	sp, #16
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2230:	687b      	ldr	r3, [r7, #4]
    2232:	681b      	ldr	r3, [r3, #0]
    2234:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    2236:	46c0      	nop			; (mov r8, r8)
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	0018      	movs	r0, r3
    223c:	f7ff ffe0 	bl	2200 <rtc_calendar_is_syncing>
    2240:	1e03      	subs	r3, r0, #0
    2242:	d1f9      	bne.n	2238 <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    2244:	68fb      	ldr	r3, [r7, #12]
    2246:	881b      	ldrh	r3, [r3, #0]
    2248:	b29b      	uxth	r3, r3
    224a:	2202      	movs	r2, #2
    224c:	4313      	orrs	r3, r2
    224e:	b29a      	uxth	r2, r3
    2250:	68fb      	ldr	r3, [r7, #12]
    2252:	801a      	strh	r2, [r3, #0]
}
    2254:	46c0      	nop			; (mov r8, r8)
    2256:	46bd      	mov	sp, r7
    2258:	b004      	add	sp, #16
    225a:	bd80      	pop	{r7, pc}

0000225c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    225c:	b580      	push	{r7, lr}
    225e:	b084      	sub	sp, #16
    2260:	af00      	add	r7, sp, #0
    2262:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	681b      	ldr	r3, [r3, #0]
    2268:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	0018      	movs	r0, r3
    2270:	f7ff ffc6 	bl	2200 <rtc_calendar_is_syncing>
    2274:	1e03      	subs	r3, r0, #0
    2276:	d1f9      	bne.n	226c <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    2278:	68fb      	ldr	r3, [r7, #12]
    227a:	22c1      	movs	r2, #193	; 0xc1
    227c:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    227e:	68fb      	ldr	r3, [r7, #12]
    2280:	22c1      	movs	r2, #193	; 0xc1
    2282:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    2284:	68fb      	ldr	r3, [r7, #12]
    2286:	881b      	ldrh	r3, [r3, #0]
    2288:	b29b      	uxth	r3, r3
    228a:	2202      	movs	r2, #2
    228c:	4393      	bics	r3, r2
    228e:	b29a      	uxth	r2, r3
    2290:	68fb      	ldr	r3, [r7, #12]
    2292:	801a      	strh	r2, [r3, #0]
}
    2294:	46c0      	nop			; (mov r8, r8)
    2296:	46bd      	mov	sp, r7
    2298:	b004      	add	sp, #16
    229a:	bd80      	pop	{r7, pc}

0000229c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    229c:	b580      	push	{r7, lr}
    229e:	b084      	sub	sp, #16
    22a0:	af00      	add	r7, sp, #0
    22a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	681b      	ldr	r3, [r3, #0]
    22a8:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	0018      	movs	r0, r3
    22ae:	f7ff ffd5 	bl	225c <rtc_calendar_disable>
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	0018      	movs	r0, r3
    22b8:	f7ff ffa2 	bl	2200 <rtc_calendar_is_syncing>
    22bc:	1e03      	subs	r3, r0, #0
    22be:	d1f9      	bne.n	22b4 <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    22c0:	68fb      	ldr	r3, [r7, #12]
    22c2:	881b      	ldrh	r3, [r3, #0]
    22c4:	b29b      	uxth	r3, r3
    22c6:	2201      	movs	r2, #1
    22c8:	4313      	orrs	r3, r2
    22ca:	b29a      	uxth	r2, r3
    22cc:	68fb      	ldr	r3, [r7, #12]
    22ce:	801a      	strh	r2, [r3, #0]
}
    22d0:	46c0      	nop			; (mov r8, r8)
    22d2:	46bd      	mov	sp, r7
    22d4:	b004      	add	sp, #16
    22d6:	bd80      	pop	{r7, pc}

000022d8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    22d8:	b580      	push	{r7, lr}
    22da:	b084      	sub	sp, #16
    22dc:	af00      	add	r7, sp, #0
    22de:	6078      	str	r0, [r7, #4]
    22e0:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    22e2:	683b      	ldr	r3, [r7, #0]
    22e4:	88db      	ldrh	r3, [r3, #6]
    22e6:	001a      	movs	r2, r3
    22e8:	687b      	ldr	r3, [r7, #4]
    22ea:	88db      	ldrh	r3, [r3, #6]
    22ec:	1ad3      	subs	r3, r2, r3
    22ee:	069b      	lsls	r3, r3, #26
    22f0:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    22f2:	683b      	ldr	r3, [r7, #0]
    22f4:	795b      	ldrb	r3, [r3, #5]
    22f6:	059b      	lsls	r3, r3, #22
    22f8:	001a      	movs	r2, r3
    22fa:	68fb      	ldr	r3, [r7, #12]
    22fc:	4313      	orrs	r3, r2
    22fe:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    2300:	683b      	ldr	r3, [r7, #0]
    2302:	791b      	ldrb	r3, [r3, #4]
    2304:	045b      	lsls	r3, r3, #17
    2306:	001a      	movs	r2, r3
    2308:	68fb      	ldr	r3, [r7, #12]
    230a:	4313      	orrs	r3, r2
    230c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    230e:	683b      	ldr	r3, [r7, #0]
    2310:	789b      	ldrb	r3, [r3, #2]
    2312:	031b      	lsls	r3, r3, #12
    2314:	001a      	movs	r2, r3
    2316:	68fb      	ldr	r3, [r7, #12]
    2318:	4313      	orrs	r3, r2
    231a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	791b      	ldrb	r3, [r3, #4]
    2320:	2201      	movs	r2, #1
    2322:	4053      	eors	r3, r2
    2324:	b2db      	uxtb	r3, r3
    2326:	2b00      	cmp	r3, #0
    2328:	d008      	beq.n	233c <rtc_calendar_time_to_register_value+0x64>
    232a:	683b      	ldr	r3, [r7, #0]
    232c:	78db      	ldrb	r3, [r3, #3]
    232e:	2b00      	cmp	r3, #0
    2330:	d004      	beq.n	233c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    2332:	68fb      	ldr	r3, [r7, #12]
    2334:	2280      	movs	r2, #128	; 0x80
    2336:	0252      	lsls	r2, r2, #9
    2338:	4313      	orrs	r3, r2
    233a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    233c:	683b      	ldr	r3, [r7, #0]
    233e:	785b      	ldrb	r3, [r3, #1]
    2340:	019b      	lsls	r3, r3, #6
    2342:	001a      	movs	r2, r3
    2344:	68fb      	ldr	r3, [r7, #12]
    2346:	4313      	orrs	r3, r2
    2348:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    234a:	683b      	ldr	r3, [r7, #0]
    234c:	781b      	ldrb	r3, [r3, #0]
    234e:	001a      	movs	r2, r3
    2350:	68fb      	ldr	r3, [r7, #12]
    2352:	4313      	orrs	r3, r2
    2354:	60fb      	str	r3, [r7, #12]

	return register_value;
    2356:	68fb      	ldr	r3, [r7, #12]
}
    2358:	0018      	movs	r0, r3
    235a:	46bd      	mov	sp, r7
    235c:	b004      	add	sp, #16
    235e:	bd80      	pop	{r7, pc}

00002360 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    2360:	b580      	push	{r7, lr}
    2362:	b084      	sub	sp, #16
    2364:	af00      	add	r7, sp, #0
    2366:	60f8      	str	r0, [r7, #12]
    2368:	60b9      	str	r1, [r7, #8]
    236a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    236c:	68bb      	ldr	r3, [r7, #8]
    236e:	0e9b      	lsrs	r3, r3, #26
    2370:	b29a      	uxth	r2, r3
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    2372:	68fb      	ldr	r3, [r7, #12]
    2374:	88db      	ldrh	r3, [r3, #6]
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    2376:	18d3      	adds	r3, r2, r3
    2378:	b29a      	uxth	r2, r3
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	80da      	strh	r2, [r3, #6]
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    237e:	68bb      	ldr	r3, [r7, #8]
    2380:	0d9b      	lsrs	r3, r3, #22
    2382:	b2db      	uxtb	r3, r3
    2384:	220f      	movs	r2, #15
    2386:	4013      	ands	r3, r2
    2388:	b2da      	uxtb	r2, r3
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    238e:	68bb      	ldr	r3, [r7, #8]
    2390:	0c5b      	lsrs	r3, r3, #17
    2392:	b2db      	uxtb	r3, r3
    2394:	221f      	movs	r2, #31
    2396:	4013      	ands	r3, r2
    2398:	b2da      	uxtb	r2, r3
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    239e:	68fb      	ldr	r3, [r7, #12]
    23a0:	791b      	ldrb	r3, [r3, #4]
    23a2:	2b00      	cmp	r3, #0
    23a4:	d008      	beq.n	23b8 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    23a6:	68bb      	ldr	r3, [r7, #8]
    23a8:	0b1b      	lsrs	r3, r3, #12
    23aa:	b2db      	uxtb	r3, r3
    23ac:	221f      	movs	r2, #31
    23ae:	4013      	ands	r3, r2
    23b0:	b2da      	uxtb	r2, r3
    23b2:	687b      	ldr	r3, [r7, #4]
    23b4:	709a      	strb	r2, [r3, #2]
    23b6:	e010      	b.n	23da <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    23b8:	68bb      	ldr	r3, [r7, #8]
    23ba:	0b1b      	lsrs	r3, r3, #12
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
    23bc:	b2db      	uxtb	r3, r3
    23be:	220f      	movs	r2, #15
    23c0:	4013      	ands	r3, r2
    23c2:	b2da      	uxtb	r2, r3
    23c4:	687b      	ldr	r3, [r7, #4]
    23c6:	709a      	strb	r2, [r3, #2]
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    23c8:	68ba      	ldr	r2, [r7, #8]
    23ca:	2380      	movs	r3, #128	; 0x80
    23cc:	025b      	lsls	r3, r3, #9
    23ce:	4013      	ands	r3, r2
    23d0:	1e5a      	subs	r2, r3, #1
    23d2:	4193      	sbcs	r3, r2
    23d4:	b2da      	uxtb	r2, r3
    23d6:	687b      	ldr	r3, [r7, #4]
    23d8:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    23da:	68bb      	ldr	r3, [r7, #8]
    23dc:	099b      	lsrs	r3, r3, #6
    23de:	b2db      	uxtb	r3, r3
    23e0:	223f      	movs	r2, #63	; 0x3f
    23e2:	4013      	ands	r3, r2
    23e4:	b2da      	uxtb	r2, r3
    23e6:	687b      	ldr	r3, [r7, #4]
    23e8:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    23ea:	68bb      	ldr	r3, [r7, #8]
    23ec:	b2db      	uxtb	r3, r3
    23ee:	223f      	movs	r2, #63	; 0x3f
    23f0:	4013      	ands	r3, r2
    23f2:	b2da      	uxtb	r2, r3
    23f4:	687b      	ldr	r3, [r7, #4]
    23f6:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    23f8:	46c0      	nop			; (mov r8, r8)
    23fa:	46bd      	mov	sp, r7
    23fc:	b004      	add	sp, #16
    23fe:	bd80      	pop	{r7, pc}

00002400 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    2400:	b580      	push	{r7, lr}
    2402:	b084      	sub	sp, #16
    2404:	af00      	add	r7, sp, #0
    2406:	6078      	str	r0, [r7, #4]
    2408:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    240a:	687b      	ldr	r3, [r7, #4]
    240c:	681b      	ldr	r3, [r3, #0]
    240e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    2410:	683b      	ldr	r3, [r7, #0]
    2412:	881a      	ldrh	r2, [r3, #0]
    2414:	230e      	movs	r3, #14
    2416:	18fb      	adds	r3, r7, r3
    2418:	2108      	movs	r1, #8
    241a:	430a      	orrs	r2, r1
    241c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    241e:	683b      	ldr	r3, [r7, #0]
    2420:	791b      	ldrb	r3, [r3, #4]
    2422:	2201      	movs	r2, #1
    2424:	4053      	eors	r3, r2
    2426:	b2db      	uxtb	r3, r3
    2428:	2b00      	cmp	r3, #0
    242a:	d007      	beq.n	243c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    242c:	230e      	movs	r3, #14
    242e:	18fb      	adds	r3, r7, r3
    2430:	220e      	movs	r2, #14
    2432:	18ba      	adds	r2, r7, r2
    2434:	8812      	ldrh	r2, [r2, #0]
    2436:	2140      	movs	r1, #64	; 0x40
    2438:	430a      	orrs	r2, r1
    243a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    243c:	683b      	ldr	r3, [r7, #0]
    243e:	789b      	ldrb	r3, [r3, #2]
    2440:	2b00      	cmp	r3, #0
    2442:	d007      	beq.n	2454 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    2444:	230e      	movs	r3, #14
    2446:	18fb      	adds	r3, r7, r3
    2448:	220e      	movs	r2, #14
    244a:	18ba      	adds	r2, r7, r2
    244c:	8812      	ldrh	r2, [r2, #0]
    244e:	2180      	movs	r1, #128	; 0x80
    2450:	430a      	orrs	r2, r1
    2452:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    2454:	68bb      	ldr	r3, [r7, #8]
    2456:	220e      	movs	r2, #14
    2458:	18ba      	adds	r2, r7, r2
    245a:	8812      	ldrh	r2, [r2, #0]
    245c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    245e:	683b      	ldr	r3, [r7, #0]
    2460:	78db      	ldrb	r3, [r3, #3]
    2462:	2b00      	cmp	r3, #0
    2464:	d008      	beq.n	2478 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	885b      	ldrh	r3, [r3, #2]
    246a:	b29b      	uxth	r3, r3
    246c:	2280      	movs	r2, #128	; 0x80
    246e:	01d2      	lsls	r2, r2, #7
    2470:	4313      	orrs	r3, r2
    2472:	b29a      	uxth	r2, r3
    2474:	68bb      	ldr	r3, [r7, #8]
    2476:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    2478:	230d      	movs	r3, #13
    247a:	18fb      	adds	r3, r7, r3
    247c:	2200      	movs	r2, #0
    247e:	701a      	strb	r2, [r3, #0]
    2480:	e017      	b.n	24b2 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    2482:	230d      	movs	r3, #13
    2484:	18fb      	adds	r3, r7, r3
    2486:	781a      	ldrb	r2, [r3, #0]
    2488:	0013      	movs	r3, r2
    248a:	009b      	lsls	r3, r3, #2
    248c:	189b      	adds	r3, r3, r2
    248e:	005b      	lsls	r3, r3, #1
    2490:	3308      	adds	r3, #8
    2492:	683a      	ldr	r2, [r7, #0]
    2494:	18d1      	adds	r1, r2, r3
    2496:	230d      	movs	r3, #13
    2498:	18fb      	adds	r3, r7, r3
    249a:	781a      	ldrb	r2, [r3, #0]
    249c:	687b      	ldr	r3, [r7, #4]
    249e:	0018      	movs	r0, r3
    24a0:	f000 f8ae 	bl	2600 <rtc_calendar_set_alarm>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    24a4:	230d      	movs	r3, #13
    24a6:	18fb      	adds	r3, r7, r3
    24a8:	781a      	ldrb	r2, [r3, #0]
    24aa:	230d      	movs	r3, #13
    24ac:	18fb      	adds	r3, r7, r3
    24ae:	3201      	adds	r2, #1
    24b0:	701a      	strb	r2, [r3, #0]
    24b2:	230d      	movs	r3, #13
    24b4:	18fb      	adds	r3, r7, r3
    24b6:	781b      	ldrb	r3, [r3, #0]
    24b8:	2b00      	cmp	r3, #0
    24ba:	d0e2      	beq.n	2482 <_rtc_calendar_set_config+0x82>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
	}
}
    24bc:	46c0      	nop			; (mov r8, r8)
    24be:	46bd      	mov	sp, r7
    24c0:	b004      	add	sp, #16
    24c2:	bd80      	pop	{r7, pc}

000024c4 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    24c4:	b580      	push	{r7, lr}
    24c6:	b086      	sub	sp, #24
    24c8:	af00      	add	r7, sp, #0
    24ca:	60f8      	str	r0, [r7, #12]
    24cc:	60b9      	str	r1, [r7, #8]
    24ce:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    24d0:	68fb      	ldr	r3, [r7, #12]
    24d2:	68ba      	ldr	r2, [r7, #8]
    24d4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    24d6:	2120      	movs	r1, #32
    24d8:	2000      	movs	r0, #0
    24da:	f7ff fe63 	bl	21a4 <system_apb_clock_set_mask>

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    24de:	2314      	movs	r3, #20
    24e0:	18fb      	adds	r3, r7, r3
    24e2:	0018      	movs	r0, r3
    24e4:	f7ff fe52 	bl	218c <system_gclk_chan_get_config_defaults>
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    24e8:	2314      	movs	r3, #20
    24ea:	18fb      	adds	r3, r7, r3
    24ec:	2202      	movs	r2, #2
    24ee:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    24f0:	2314      	movs	r3, #20
    24f2:	18fb      	adds	r3, r7, r3
    24f4:	0019      	movs	r1, r3
    24f6:	2004      	movs	r0, #4
    24f8:	f002 fb0a 	bl	4b10 <system_gclk_chan_set_config>
	system_gclk_chan_enable(RTC_GCLK_ID);
    24fc:	2004      	movs	r0, #4
    24fe:	f002 fb27 	bl	4b50 <system_gclk_chan_enable>

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    2502:	68fb      	ldr	r3, [r7, #12]
    2504:	0018      	movs	r0, r3
    2506:	f7ff fec9 	bl	229c <rtc_calendar_reset>

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    250a:	687b      	ldr	r3, [r7, #4]
    250c:	791a      	ldrb	r2, [r3, #4]
    250e:	68fb      	ldr	r3, [r7, #12]
    2510:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    2512:	687b      	ldr	r3, [r7, #4]
    2514:	78da      	ldrb	r2, [r3, #3]
    2516:	68fb      	ldr	r3, [r7, #12]
    2518:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    251a:	687b      	ldr	r3, [r7, #4]
    251c:	88da      	ldrh	r2, [r3, #6]
    251e:	68fb      	ldr	r3, [r7, #12]
    2520:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    2522:	4b06      	ldr	r3, [pc, #24]	; (253c <rtc_calendar_init+0x78>)
    2524:	68fa      	ldr	r2, [r7, #12]
    2526:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    2528:	687a      	ldr	r2, [r7, #4]
    252a:	68fb      	ldr	r3, [r7, #12]
    252c:	0011      	movs	r1, r2
    252e:	0018      	movs	r0, r3
    2530:	f7ff ff66 	bl	2400 <_rtc_calendar_set_config>
}
    2534:	46c0      	nop			; (mov r8, r8)
    2536:	46bd      	mov	sp, r7
    2538:	b006      	add	sp, #24
    253a:	bd80      	pop	{r7, pc}
    253c:	200004e0 	.word	0x200004e0

00002540 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    2540:	b580      	push	{r7, lr}
    2542:	b084      	sub	sp, #16
    2544:	af00      	add	r7, sp, #0
    2546:	6078      	str	r0, [r7, #4]
    2548:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    254a:	687b      	ldr	r3, [r7, #4]
    254c:	681b      	ldr	r3, [r3, #0]
    254e:	60fb      	str	r3, [r7, #12]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    2550:	683a      	ldr	r2, [r7, #0]
    2552:	687b      	ldr	r3, [r7, #4]
    2554:	0011      	movs	r1, r2
    2556:	0018      	movs	r0, r3
    2558:	f7ff febe 	bl	22d8 <rtc_calendar_time_to_register_value>
    255c:	0003      	movs	r3, r0
    255e:	60bb      	str	r3, [r7, #8]

	while (rtc_calendar_is_syncing(module)) {
    2560:	46c0      	nop			; (mov r8, r8)
    2562:	687b      	ldr	r3, [r7, #4]
    2564:	0018      	movs	r0, r3
    2566:	f7ff fe4b 	bl	2200 <rtc_calendar_is_syncing>
    256a:	1e03      	subs	r3, r0, #0
    256c:	d1f9      	bne.n	2562 <rtc_calendar_set_time+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    256e:	68fb      	ldr	r3, [r7, #12]
    2570:	68ba      	ldr	r2, [r7, #8]
    2572:	611a      	str	r2, [r3, #16]
}
    2574:	46c0      	nop			; (mov r8, r8)
    2576:	46bd      	mov	sp, r7
    2578:	b004      	add	sp, #16
    257a:	bd80      	pop	{r7, pc}

0000257c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    257c:	b580      	push	{r7, lr}
    257e:	b084      	sub	sp, #16
    2580:	af00      	add	r7, sp, #0
    2582:	6078      	str	r0, [r7, #4]
    2584:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2586:	687b      	ldr	r3, [r7, #4]
    2588:	681b      	ldr	r3, [r3, #0]
    258a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    258c:	687b      	ldr	r3, [r7, #4]
    258e:	795b      	ldrb	r3, [r3, #5]
    2590:	2201      	movs	r2, #1
    2592:	4053      	eors	r3, r2
    2594:	b2db      	uxtb	r3, r3
    2596:	2b00      	cmp	r3, #0
    2598:	d00a      	beq.n	25b0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    259a:	68fb      	ldr	r3, [r7, #12]
    259c:	4a16      	ldr	r2, [pc, #88]	; (25f8 <rtc_calendar_get_time+0x7c>)
    259e:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    25a0:	46c0      	nop			; (mov r8, r8)
    25a2:	687b      	ldr	r3, [r7, #4]
    25a4:	0018      	movs	r0, r3
    25a6:	f7ff fe2b 	bl	2200 <rtc_calendar_is_syncing>
    25aa:	1e03      	subs	r3, r0, #0
    25ac:	d1f9      	bne.n	25a2 <rtc_calendar_get_time+0x26>
    25ae:	e016      	b.n	25de <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    25b0:	68fb      	ldr	r3, [r7, #12]
    25b2:	885b      	ldrh	r3, [r3, #2]
    25b4:	b29b      	uxth	r3, r3
    25b6:	001a      	movs	r2, r3
    25b8:	2380      	movs	r3, #128	; 0x80
    25ba:	01db      	lsls	r3, r3, #7
    25bc:	4013      	ands	r3, r2
    25be:	d10e      	bne.n	25de <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    25c0:	68fb      	ldr	r3, [r7, #12]
    25c2:	885b      	ldrh	r3, [r3, #2]
    25c4:	b29b      	uxth	r3, r3
    25c6:	4a0d      	ldr	r2, [pc, #52]	; (25fc <rtc_calendar_get_time+0x80>)
    25c8:	4313      	orrs	r3, r2
    25ca:	b29a      	uxth	r2, r3
    25cc:	68fb      	ldr	r3, [r7, #12]
    25ce:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    25d0:	46c0      	nop			; (mov r8, r8)
    25d2:	687b      	ldr	r3, [r7, #4]
    25d4:	0018      	movs	r0, r3
    25d6:	f7ff fe13 	bl	2200 <rtc_calendar_is_syncing>
    25da:	1e03      	subs	r3, r0, #0
    25dc:	d1f9      	bne.n	25d2 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    25de:	68fb      	ldr	r3, [r7, #12]
    25e0:	691b      	ldr	r3, [r3, #16]
    25e2:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    25e4:	683a      	ldr	r2, [r7, #0]
    25e6:	68b9      	ldr	r1, [r7, #8]
    25e8:	687b      	ldr	r3, [r7, #4]
    25ea:	0018      	movs	r0, r3
    25ec:	f7ff feb8 	bl	2360 <rtc_calendar_register_value_to_time>
}
    25f0:	46c0      	nop			; (mov r8, r8)
    25f2:	46bd      	mov	sp, r7
    25f4:	b004      	add	sp, #16
    25f6:	bd80      	pop	{r7, pc}
    25f8:	ffff8000 	.word	0xffff8000
    25fc:	ffffc000 	.word	0xffffc000

00002600 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    2600:	b580      	push	{r7, lr}
    2602:	b086      	sub	sp, #24
    2604:	af00      	add	r7, sp, #0
    2606:	60f8      	str	r0, [r7, #12]
    2608:	60b9      	str	r1, [r7, #8]
    260a:	1dfb      	adds	r3, r7, #7
    260c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    260e:	68fb      	ldr	r3, [r7, #12]
    2610:	681b      	ldr	r3, [r3, #0]
    2612:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    2614:	1dfb      	adds	r3, r7, #7
    2616:	781b      	ldrb	r3, [r3, #0]
    2618:	2b01      	cmp	r3, #1
    261a:	d901      	bls.n	2620 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    261c:	2317      	movs	r3, #23
    261e:	e021      	b.n	2664 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    2620:	68ba      	ldr	r2, [r7, #8]
    2622:	68fb      	ldr	r3, [r7, #12]
    2624:	0011      	movs	r1, r2
    2626:	0018      	movs	r0, r3
    2628:	f7ff fe56 	bl	22d8 <rtc_calendar_time_to_register_value>
    262c:	0003      	movs	r3, r0
    262e:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    2630:	46c0      	nop			; (mov r8, r8)
    2632:	68fb      	ldr	r3, [r7, #12]
    2634:	0018      	movs	r0, r3
    2636:	f7ff fde3 	bl	2200 <rtc_calendar_is_syncing>
    263a:	1e03      	subs	r3, r0, #0
    263c:	d1f9      	bne.n	2632 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    263e:	1dfb      	adds	r3, r7, #7
    2640:	781a      	ldrb	r2, [r3, #0]
    2642:	697b      	ldr	r3, [r7, #20]
    2644:	3203      	adds	r2, #3
    2646:	00d2      	lsls	r2, r2, #3
    2648:	6939      	ldr	r1, [r7, #16]
    264a:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    264c:	1dfb      	adds	r3, r7, #7
    264e:	781b      	ldrb	r3, [r3, #0]
    2650:	68ba      	ldr	r2, [r7, #8]
    2652:	7a11      	ldrb	r1, [r2, #8]
    2654:	697a      	ldr	r2, [r7, #20]
    2656:	3303      	adds	r3, #3
    2658:	00db      	lsls	r3, r3, #3
    265a:	18d3      	adds	r3, r2, r3
    265c:	3304      	adds	r3, #4
    265e:	1c0a      	adds	r2, r1, #0
    2660:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    2662:	2300      	movs	r3, #0
}
    2664:	0018      	movs	r0, r3
    2666:	46bd      	mov	sp, r7
    2668:	b006      	add	sp, #24
    266a:	bd80      	pop	{r7, pc}

0000266c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    266c:	b580      	push	{r7, lr}
    266e:	b082      	sub	sp, #8
    2670:	af00      	add	r7, sp, #0
    2672:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	2200      	movs	r2, #0
    2678:	701a      	strb	r2, [r3, #0]
}
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	46bd      	mov	sp, r7
    267e:	b002      	add	sp, #8
    2680:	bd80      	pop	{r7, pc}
    2682:	46c0      	nop			; (mov r8, r8)

00002684 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2684:	b580      	push	{r7, lr}
    2686:	b082      	sub	sp, #8
    2688:	af00      	add	r7, sp, #0
    268a:	0002      	movs	r2, r0
    268c:	6039      	str	r1, [r7, #0]
    268e:	1dfb      	adds	r3, r7, #7
    2690:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2692:	1dfb      	adds	r3, r7, #7
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	2b01      	cmp	r3, #1
    2698:	d00a      	beq.n	26b0 <system_apb_clock_set_mask+0x2c>
    269a:	2b02      	cmp	r3, #2
    269c:	d00f      	beq.n	26be <system_apb_clock_set_mask+0x3a>
    269e:	2b00      	cmp	r3, #0
    26a0:	d114      	bne.n	26cc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    26a2:	4b0e      	ldr	r3, [pc, #56]	; (26dc <system_apb_clock_set_mask+0x58>)
    26a4:	4a0d      	ldr	r2, [pc, #52]	; (26dc <system_apb_clock_set_mask+0x58>)
    26a6:	6991      	ldr	r1, [r2, #24]
    26a8:	683a      	ldr	r2, [r7, #0]
    26aa:	430a      	orrs	r2, r1
    26ac:	619a      	str	r2, [r3, #24]
			break;
    26ae:	e00f      	b.n	26d0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    26b0:	4b0a      	ldr	r3, [pc, #40]	; (26dc <system_apb_clock_set_mask+0x58>)
    26b2:	4a0a      	ldr	r2, [pc, #40]	; (26dc <system_apb_clock_set_mask+0x58>)
    26b4:	69d1      	ldr	r1, [r2, #28]
    26b6:	683a      	ldr	r2, [r7, #0]
    26b8:	430a      	orrs	r2, r1
    26ba:	61da      	str	r2, [r3, #28]
			break;
    26bc:	e008      	b.n	26d0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    26be:	4b07      	ldr	r3, [pc, #28]	; (26dc <system_apb_clock_set_mask+0x58>)
    26c0:	4a06      	ldr	r2, [pc, #24]	; (26dc <system_apb_clock_set_mask+0x58>)
    26c2:	6a11      	ldr	r1, [r2, #32]
    26c4:	683a      	ldr	r2, [r7, #0]
    26c6:	430a      	orrs	r2, r1
    26c8:	621a      	str	r2, [r3, #32]
			break;
    26ca:	e001      	b.n	26d0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    26cc:	2317      	movs	r3, #23
    26ce:	e000      	b.n	26d2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    26d0:	2300      	movs	r3, #0
}
    26d2:	0018      	movs	r0, r3
    26d4:	46bd      	mov	sp, r7
    26d6:	b002      	add	sp, #8
    26d8:	bd80      	pop	{r7, pc}
    26da:	46c0      	nop			; (mov r8, r8)
    26dc:	40000400 	.word	0x40000400

000026e0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    26e0:	b580      	push	{r7, lr}
    26e2:	b082      	sub	sp, #8
    26e4:	af00      	add	r7, sp, #0
    26e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    26e8:	687b      	ldr	r3, [r7, #4]
    26ea:	2280      	movs	r2, #128	; 0x80
    26ec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    26ee:	687b      	ldr	r3, [r7, #4]
    26f0:	2200      	movs	r2, #0
    26f2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	2201      	movs	r2, #1
    26f8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	2200      	movs	r2, #0
    26fe:	70da      	strb	r2, [r3, #3]
}
    2700:	46c0      	nop			; (mov r8, r8)
    2702:	46bd      	mov	sp, r7
    2704:	b002      	add	sp, #8
    2706:	bd80      	pop	{r7, pc}

00002708 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    2708:	b580      	push	{r7, lr}
    270a:	b084      	sub	sp, #16
    270c:	af00      	add	r7, sp, #0
    270e:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2710:	2300      	movs	r3, #0
    2712:	60fb      	str	r3, [r7, #12]
    2714:	e00c      	b.n	2730 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    2716:	4b0a      	ldr	r3, [pc, #40]	; (2740 <_tcc_get_inst_index+0x38>)
    2718:	68fa      	ldr	r2, [r7, #12]
    271a:	0092      	lsls	r2, r2, #2
    271c:	58d2      	ldr	r2, [r2, r3]
    271e:	687b      	ldr	r3, [r7, #4]
    2720:	429a      	cmp	r2, r3
    2722:	d102      	bne.n	272a <_tcc_get_inst_index+0x22>
			return i;
    2724:	68fb      	ldr	r3, [r7, #12]
    2726:	b2db      	uxtb	r3, r3
    2728:	e006      	b.n	2738 <_tcc_get_inst_index+0x30>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    272a:	68fb      	ldr	r3, [r7, #12]
    272c:	3301      	adds	r3, #1
    272e:	60fb      	str	r3, [r7, #12]
    2730:	68fb      	ldr	r3, [r7, #12]
    2732:	2b02      	cmp	r3, #2
    2734:	d9ef      	bls.n	2716 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2736:	2300      	movs	r3, #0
}
    2738:	0018      	movs	r0, r3
    273a:	46bd      	mov	sp, r7
    273c:	b004      	add	sp, #16
    273e:	bd80      	pop	{r7, pc}
    2740:	0002858c 	.word	0x0002858c

00002744 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    2744:	b590      	push	{r4, r7, lr}
    2746:	b085      	sub	sp, #20
    2748:	af00      	add	r7, sp, #0
    274a:	6078      	str	r0, [r7, #4]
    274c:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    274e:	230f      	movs	r3, #15
    2750:	18fc      	adds	r4, r7, r3
    2752:	683b      	ldr	r3, [r7, #0]
    2754:	0018      	movs	r0, r3
    2756:	f7ff ffd7 	bl	2708 <_tcc_get_inst_index>
    275a:	0003      	movs	r3, r0
    275c:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	2200      	movs	r2, #0
    2762:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    2764:	230f      	movs	r3, #15
    2766:	18fb      	adds	r3, r7, r3
    2768:	781a      	ldrb	r2, [r3, #0]
    276a:	4ba8      	ldr	r3, [pc, #672]	; (2a0c <tcc_get_config_defaults+0x2c8>)
    276c:	0092      	lsls	r2, r2, #2
    276e:	58d2      	ldr	r2, [r2, r3]
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	2200      	movs	r2, #0
    2778:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	2200      	movs	r2, #0
    277e:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	2200      	movs	r2, #0
    2784:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    2786:	687b      	ldr	r3, [r7, #4]
    2788:	2200      	movs	r2, #0
    278a:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    278c:	687b      	ldr	r3, [r7, #4]
    278e:	2200      	movs	r2, #0
    2790:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    2792:	687b      	ldr	r3, [r7, #4]
    2794:	2200      	movs	r2, #0
    2796:	61da      	str	r2, [r3, #28]
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	2200      	movs	r2, #0
    279c:	621a      	str	r2, [r3, #32]
    279e:	687b      	ldr	r3, [r7, #4]
    27a0:	2200      	movs	r2, #0
    27a2:	625a      	str	r2, [r3, #36]	; 0x24
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	2200      	movs	r2, #0
    27a8:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	2200      	movs	r2, #0
    27ae:	751a      	strb	r2, [r3, #20]
    27b0:	687b      	ldr	r3, [r7, #4]
    27b2:	2200      	movs	r2, #0
    27b4:	755a      	strb	r2, [r3, #21]
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	2200      	movs	r2, #0
    27ba:	759a      	strb	r2, [r3, #22]
    27bc:	687b      	ldr	r3, [r7, #4]
    27be:	2200      	movs	r2, #0
    27c0:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    27c2:	687b      	ldr	r3, [r7, #4]
    27c4:	2200      	movs	r2, #0
    27c6:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    27c8:	687b      	ldr	r3, [r7, #4]
    27ca:	2200      	movs	r2, #0
    27cc:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    27ce:	687b      	ldr	r3, [r7, #4]
    27d0:	2200      	movs	r2, #0
    27d2:	741a      	strb	r2, [r3, #16]
    27d4:	687b      	ldr	r3, [r7, #4]
    27d6:	2200      	movs	r2, #0
    27d8:	745a      	strb	r2, [r3, #17]
    27da:	687b      	ldr	r3, [r7, #4]
    27dc:	2200      	movs	r2, #0
    27de:	749a      	strb	r2, [r3, #18]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	2200      	movs	r2, #0
    27e4:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	222c      	movs	r2, #44	; 0x2c
    27ea:	2100      	movs	r1, #0
    27ec:	5499      	strb	r1, [r3, r2]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	222d      	movs	r2, #45	; 0x2d
    27f2:	2100      	movs	r1, #0
    27f4:	5499      	strb	r1, [r3, r2]
    27f6:	687b      	ldr	r3, [r7, #4]
    27f8:	222e      	movs	r2, #46	; 0x2e
    27fa:	2100      	movs	r1, #0
    27fc:	5499      	strb	r1, [r3, r2]
    27fe:	687b      	ldr	r3, [r7, #4]
    2800:	222f      	movs	r2, #47	; 0x2f
    2802:	2100      	movs	r1, #0
    2804:	5499      	strb	r1, [r3, r2]
    2806:	687b      	ldr	r3, [r7, #4]
    2808:	2230      	movs	r2, #48	; 0x30
    280a:	2100      	movs	r1, #0
    280c:	5499      	strb	r1, [r3, r2]
    280e:	687b      	ldr	r3, [r7, #4]
    2810:	2231      	movs	r2, #49	; 0x31
    2812:	2100      	movs	r1, #0
    2814:	5499      	strb	r1, [r3, r2]
    2816:	687b      	ldr	r3, [r7, #4]
    2818:	2232      	movs	r2, #50	; 0x32
    281a:	2100      	movs	r1, #0
    281c:	5499      	strb	r1, [r3, r2]
    281e:	687b      	ldr	r3, [r7, #4]
    2820:	2233      	movs	r2, #51	; 0x33
    2822:	2100      	movs	r1, #0
    2824:	5499      	strb	r1, [r3, r2]
    2826:	687b      	ldr	r3, [r7, #4]
    2828:	2234      	movs	r2, #52	; 0x34
    282a:	2100      	movs	r1, #0
    282c:	5499      	strb	r1, [r3, r2]
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	2235      	movs	r2, #53	; 0x35
    2832:	2100      	movs	r1, #0
    2834:	5499      	strb	r1, [r3, r2]
    2836:	687b      	ldr	r3, [r7, #4]
    2838:	2236      	movs	r2, #54	; 0x36
    283a:	2100      	movs	r1, #0
    283c:	5499      	strb	r1, [r3, r2]
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	2237      	movs	r2, #55	; 0x37
    2842:	2100      	movs	r1, #0
    2844:	5499      	strb	r1, [r3, r2]
    2846:	687b      	ldr	r3, [r7, #4]
    2848:	2238      	movs	r2, #56	; 0x38
    284a:	2100      	movs	r1, #0
    284c:	5499      	strb	r1, [r3, r2]
    284e:	687b      	ldr	r3, [r7, #4]
    2850:	2239      	movs	r2, #57	; 0x39
    2852:	2100      	movs	r1, #0
    2854:	5499      	strb	r1, [r3, r2]
    2856:	687b      	ldr	r3, [r7, #4]
    2858:	223a      	movs	r2, #58	; 0x3a
    285a:	2100      	movs	r1, #0
    285c:	5499      	strb	r1, [r3, r2]
    285e:	687b      	ldr	r3, [r7, #4]
    2860:	223b      	movs	r2, #59	; 0x3b
    2862:	2100      	movs	r1, #0
    2864:	5499      	strb	r1, [r3, r2]
    2866:	687b      	ldr	r3, [r7, #4]
    2868:	223c      	movs	r2, #60	; 0x3c
    286a:	2100      	movs	r1, #0
    286c:	5499      	strb	r1, [r3, r2]
    286e:	687b      	ldr	r3, [r7, #4]
    2870:	223d      	movs	r2, #61	; 0x3d
    2872:	2100      	movs	r1, #0
    2874:	5499      	strb	r1, [r3, r2]
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	223e      	movs	r2, #62	; 0x3e
    287a:	2100      	movs	r1, #0
    287c:	5499      	strb	r1, [r3, r2]
    287e:	687b      	ldr	r3, [r7, #4]
    2880:	223f      	movs	r2, #63	; 0x3f
    2882:	2100      	movs	r1, #0
    2884:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    2886:	687b      	ldr	r3, [r7, #4]
    2888:	2240      	movs	r2, #64	; 0x40
    288a:	2100      	movs	r1, #0
    288c:	5499      	strb	r1, [r3, r2]
    288e:	687b      	ldr	r3, [r7, #4]
    2890:	2241      	movs	r2, #65	; 0x41
    2892:	2100      	movs	r1, #0
    2894:	5499      	strb	r1, [r3, r2]
    2896:	687b      	ldr	r3, [r7, #4]
    2898:	2242      	movs	r2, #66	; 0x42
    289a:	2100      	movs	r1, #0
    289c:	5499      	strb	r1, [r3, r2]
    289e:	687b      	ldr	r3, [r7, #4]
    28a0:	2243      	movs	r2, #67	; 0x43
    28a2:	2100      	movs	r1, #0
    28a4:	5499      	strb	r1, [r3, r2]
    28a6:	687b      	ldr	r3, [r7, #4]
    28a8:	2244      	movs	r2, #68	; 0x44
    28aa:	2100      	movs	r1, #0
    28ac:	5499      	strb	r1, [r3, r2]
    28ae:	687b      	ldr	r3, [r7, #4]
    28b0:	2245      	movs	r2, #69	; 0x45
    28b2:	2100      	movs	r1, #0
    28b4:	5499      	strb	r1, [r3, r2]
    28b6:	687b      	ldr	r3, [r7, #4]
    28b8:	2246      	movs	r2, #70	; 0x46
    28ba:	2100      	movs	r1, #0
    28bc:	5499      	strb	r1, [r3, r2]
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	2247      	movs	r2, #71	; 0x47
    28c2:	2100      	movs	r1, #0
    28c4:	5499      	strb	r1, [r3, r2]
    28c6:	687b      	ldr	r3, [r7, #4]
    28c8:	2248      	movs	r2, #72	; 0x48
    28ca:	2100      	movs	r1, #0
    28cc:	5499      	strb	r1, [r3, r2]
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	2249      	movs	r2, #73	; 0x49
    28d2:	2100      	movs	r1, #0
    28d4:	5499      	strb	r1, [r3, r2]
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	224a      	movs	r2, #74	; 0x4a
    28da:	2100      	movs	r1, #0
    28dc:	5499      	strb	r1, [r3, r2]
    28de:	687b      	ldr	r3, [r7, #4]
    28e0:	224b      	movs	r2, #75	; 0x4b
    28e2:	2100      	movs	r1, #0
    28e4:	5499      	strb	r1, [r3, r2]
    28e6:	687b      	ldr	r3, [r7, #4]
    28e8:	224c      	movs	r2, #76	; 0x4c
    28ea:	2100      	movs	r1, #0
    28ec:	5499      	strb	r1, [r3, r2]
    28ee:	687b      	ldr	r3, [r7, #4]
    28f0:	224d      	movs	r2, #77	; 0x4d
    28f2:	2100      	movs	r1, #0
    28f4:	5499      	strb	r1, [r3, r2]
    28f6:	687b      	ldr	r3, [r7, #4]
    28f8:	224e      	movs	r2, #78	; 0x4e
    28fa:	2100      	movs	r1, #0
    28fc:	5499      	strb	r1, [r3, r2]
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	224f      	movs	r2, #79	; 0x4f
    2902:	2100      	movs	r1, #0
    2904:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    2906:	687b      	ldr	r3, [r7, #4]
    2908:	2250      	movs	r2, #80	; 0x50
    290a:	2100      	movs	r1, #0
    290c:	5499      	strb	r1, [r3, r2]
    290e:	687b      	ldr	r3, [r7, #4]
    2910:	2251      	movs	r2, #81	; 0x51
    2912:	2100      	movs	r1, #0
    2914:	5499      	strb	r1, [r3, r2]
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	2252      	movs	r2, #82	; 0x52
    291a:	2100      	movs	r1, #0
    291c:	5499      	strb	r1, [r3, r2]
    291e:	687b      	ldr	r3, [r7, #4]
    2920:	2253      	movs	r2, #83	; 0x53
    2922:	2100      	movs	r1, #0
    2924:	5499      	strb	r1, [r3, r2]
    2926:	687b      	ldr	r3, [r7, #4]
    2928:	2254      	movs	r2, #84	; 0x54
    292a:	2100      	movs	r1, #0
    292c:	5499      	strb	r1, [r3, r2]
    292e:	687b      	ldr	r3, [r7, #4]
    2930:	2255      	movs	r2, #85	; 0x55
    2932:	2100      	movs	r1, #0
    2934:	5499      	strb	r1, [r3, r2]
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2256      	movs	r2, #86	; 0x56
    293a:	2100      	movs	r1, #0
    293c:	5499      	strb	r1, [r3, r2]
    293e:	687b      	ldr	r3, [r7, #4]
    2940:	2257      	movs	r2, #87	; 0x57
    2942:	2100      	movs	r1, #0
    2944:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    2946:	687b      	ldr	r3, [r7, #4]
    2948:	2298      	movs	r2, #152	; 0x98
    294a:	2100      	movs	r1, #0
    294c:	5499      	strb	r1, [r3, r2]
    294e:	687b      	ldr	r3, [r7, #4]
    2950:	2200      	movs	r2, #0
    2952:	659a      	str	r2, [r3, #88]	; 0x58
    2954:	687b      	ldr	r3, [r7, #4]
    2956:	2200      	movs	r2, #0
    2958:	679a      	str	r2, [r3, #120]	; 0x78
    295a:	687b      	ldr	r3, [r7, #4]
    295c:	2299      	movs	r2, #153	; 0x99
    295e:	2100      	movs	r1, #0
    2960:	5499      	strb	r1, [r3, r2]
    2962:	687b      	ldr	r3, [r7, #4]
    2964:	2200      	movs	r2, #0
    2966:	65da      	str	r2, [r3, #92]	; 0x5c
    2968:	687b      	ldr	r3, [r7, #4]
    296a:	2200      	movs	r2, #0
    296c:	67da      	str	r2, [r3, #124]	; 0x7c
    296e:	687b      	ldr	r3, [r7, #4]
    2970:	229a      	movs	r2, #154	; 0x9a
    2972:	2100      	movs	r1, #0
    2974:	5499      	strb	r1, [r3, r2]
    2976:	687b      	ldr	r3, [r7, #4]
    2978:	2200      	movs	r2, #0
    297a:	661a      	str	r2, [r3, #96]	; 0x60
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	2280      	movs	r2, #128	; 0x80
    2980:	2100      	movs	r1, #0
    2982:	5099      	str	r1, [r3, r2]
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	229b      	movs	r2, #155	; 0x9b
    2988:	2100      	movs	r1, #0
    298a:	5499      	strb	r1, [r3, r2]
    298c:	687b      	ldr	r3, [r7, #4]
    298e:	2200      	movs	r2, #0
    2990:	665a      	str	r2, [r3, #100]	; 0x64
    2992:	687b      	ldr	r3, [r7, #4]
    2994:	2284      	movs	r2, #132	; 0x84
    2996:	2100      	movs	r1, #0
    2998:	5099      	str	r1, [r3, r2]
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	229c      	movs	r2, #156	; 0x9c
    299e:	2100      	movs	r1, #0
    29a0:	5499      	strb	r1, [r3, r2]
    29a2:	687b      	ldr	r3, [r7, #4]
    29a4:	2200      	movs	r2, #0
    29a6:	669a      	str	r2, [r3, #104]	; 0x68
    29a8:	687b      	ldr	r3, [r7, #4]
    29aa:	2288      	movs	r2, #136	; 0x88
    29ac:	2100      	movs	r1, #0
    29ae:	5099      	str	r1, [r3, r2]
    29b0:	687b      	ldr	r3, [r7, #4]
    29b2:	229d      	movs	r2, #157	; 0x9d
    29b4:	2100      	movs	r1, #0
    29b6:	5499      	strb	r1, [r3, r2]
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	2200      	movs	r2, #0
    29bc:	66da      	str	r2, [r3, #108]	; 0x6c
    29be:	687b      	ldr	r3, [r7, #4]
    29c0:	228c      	movs	r2, #140	; 0x8c
    29c2:	2100      	movs	r1, #0
    29c4:	5099      	str	r1, [r3, r2]
    29c6:	687b      	ldr	r3, [r7, #4]
    29c8:	229e      	movs	r2, #158	; 0x9e
    29ca:	2100      	movs	r1, #0
    29cc:	5499      	strb	r1, [r3, r2]
    29ce:	687b      	ldr	r3, [r7, #4]
    29d0:	2200      	movs	r2, #0
    29d2:	671a      	str	r2, [r3, #112]	; 0x70
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	2290      	movs	r2, #144	; 0x90
    29d8:	2100      	movs	r1, #0
    29da:	5099      	str	r1, [r3, r2]
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	229f      	movs	r2, #159	; 0x9f
    29e0:	2100      	movs	r1, #0
    29e2:	5499      	strb	r1, [r3, r2]
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	2200      	movs	r2, #0
    29e8:	675a      	str	r2, [r3, #116]	; 0x74
    29ea:	687b      	ldr	r3, [r7, #4]
    29ec:	2294      	movs	r2, #148	; 0x94
    29ee:	2100      	movs	r1, #0
    29f0:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    29f2:	687b      	ldr	r3, [r7, #4]
    29f4:	22a0      	movs	r2, #160	; 0xa0
    29f6:	2101      	movs	r1, #1
    29f8:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	22a1      	movs	r2, #161	; 0xa1
    29fe:	2100      	movs	r1, #0
    2a00:	5499      	strb	r1, [r3, r2]
}
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	46bd      	mov	sp, r7
    2a06:	b005      	add	sp, #20
    2a08:	bd90      	pop	{r4, r7, pc}
    2a0a:	46c0      	nop			; (mov r8, r8)
    2a0c:	000285a8 	.word	0x000285a8

00002a10 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b086      	sub	sp, #24
    2a14:	af00      	add	r7, sp, #0
    2a16:	60b9      	str	r1, [r7, #8]
    2a18:	607a      	str	r2, [r7, #4]
    2a1a:	230f      	movs	r3, #15
    2a1c:	18fb      	adds	r3, r7, r3
    2a1e:	1c02      	adds	r2, r0, #0
    2a20:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    2a22:	2300      	movs	r3, #0
    2a24:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2a26:	2300      	movs	r3, #0
    2a28:	613b      	str	r3, [r7, #16]
    2a2a:	e01d      	b.n	2a68 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    2a2c:	68ba      	ldr	r2, [r7, #8]
    2a2e:	693b      	ldr	r3, [r7, #16]
    2a30:	18d3      	adds	r3, r2, r3
    2a32:	3310      	adds	r3, #16
    2a34:	781b      	ldrb	r3, [r3, #0]
    2a36:	2b01      	cmp	r3, #1
    2a38:	d113      	bne.n	2a62 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    2a3a:	230f      	movs	r3, #15
    2a3c:	18fb      	adds	r3, r7, r3
    2a3e:	781b      	ldrb	r3, [r3, #0]
    2a40:	4a1b      	ldr	r2, [pc, #108]	; (2ab0 <_tcc_build_ctrla+0xa0>)
    2a42:	5cd3      	ldrb	r3, [r2, r3]
    2a44:	001a      	movs	r2, r3
    2a46:	693b      	ldr	r3, [r7, #16]
    2a48:	429a      	cmp	r2, r3
    2a4a:	da01      	bge.n	2a50 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    2a4c:	2317      	movs	r3, #23
    2a4e:	e02a      	b.n	2aa6 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    2a50:	2380      	movs	r3, #128	; 0x80
    2a52:	045a      	lsls	r2, r3, #17
    2a54:	693b      	ldr	r3, [r7, #16]
    2a56:	409a      	lsls	r2, r3
    2a58:	0013      	movs	r3, r2
    2a5a:	001a      	movs	r2, r3
    2a5c:	697b      	ldr	r3, [r7, #20]
    2a5e:	4313      	orrs	r3, r2
    2a60:	617b      	str	r3, [r7, #20]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2a62:	693b      	ldr	r3, [r7, #16]
    2a64:	3301      	adds	r3, #1
    2a66:	613b      	str	r3, [r7, #16]
    2a68:	693b      	ldr	r3, [r7, #16]
    2a6a:	2b03      	cmp	r3, #3
    2a6c:	ddde      	ble.n	2a2c <_tcc_build_ctrla+0x1c>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    2a6e:	68bb      	ldr	r3, [r7, #8]
    2a70:	22a1      	movs	r2, #161	; 0xa1
    2a72:	5c9b      	ldrb	r3, [r3, r2]
    2a74:	2b00      	cmp	r3, #0
    2a76:	d004      	beq.n	2a82 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    2a78:	697b      	ldr	r3, [r7, #20]
    2a7a:	2280      	movs	r2, #128	; 0x80
    2a7c:	0112      	lsls	r2, r2, #4
    2a7e:	4313      	orrs	r3, r2
    2a80:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2a82:	68bb      	ldr	r3, [r7, #8]
    2a84:	7b1b      	ldrb	r3, [r3, #12]
    2a86:	031b      	lsls	r3, r3, #12
    2a88:	001a      	movs	r2, r3
    2a8a:	697b      	ldr	r3, [r7, #20]
    2a8c:	4313      	orrs	r3, r2
    2a8e:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2a90:	68bb      	ldr	r3, [r7, #8]
    2a92:	7adb      	ldrb	r3, [r3, #11]
    2a94:	021b      	lsls	r3, r3, #8
    2a96:	001a      	movs	r2, r3
    2a98:	697b      	ldr	r3, [r7, #20]
    2a9a:	4313      	orrs	r3, r2
    2a9c:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    2a9e:	687b      	ldr	r3, [r7, #4]
    2aa0:	697a      	ldr	r2, [r7, #20]
    2aa2:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    2aa4:	2300      	movs	r3, #0
}
    2aa6:	0018      	movs	r0, r3
    2aa8:	46bd      	mov	sp, r7
    2aaa:	b006      	add	sp, #24
    2aac:	bd80      	pop	{r7, pc}
    2aae:	46c0      	nop			; (mov r8, r8)
    2ab0:	000285b4 	.word	0x000285b4

00002ab4 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    2ab4:	b580      	push	{r7, lr}
    2ab6:	b086      	sub	sp, #24
    2ab8:	af00      	add	r7, sp, #0
    2aba:	60b9      	str	r1, [r7, #8]
    2abc:	607a      	str	r2, [r7, #4]
    2abe:	230f      	movs	r3, #15
    2ac0:	18fb      	adds	r3, r7, r3
    2ac2:	1c02      	adds	r2, r0, #0
    2ac4:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    2ac6:	2317      	movs	r3, #23
    2ac8:	18fb      	adds	r3, r7, r3
    2aca:	2200      	movs	r2, #0
    2acc:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    2ace:	68bb      	ldr	r3, [r7, #8]
    2ad0:	7a1b      	ldrb	r3, [r3, #8]
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d007      	beq.n	2ae6 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    2ad6:	2317      	movs	r3, #23
    2ad8:	18fb      	adds	r3, r7, r3
    2ada:	2217      	movs	r2, #23
    2adc:	18ba      	adds	r2, r7, r2
    2ade:	7812      	ldrb	r2, [r2, #0]
    2ae0:	2104      	movs	r1, #4
    2ae2:	430a      	orrs	r2, r1
    2ae4:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    2ae6:	68bb      	ldr	r3, [r7, #8]
    2ae8:	7a5b      	ldrb	r3, [r3, #9]
    2aea:	2b01      	cmp	r3, #1
    2aec:	d107      	bne.n	2afe <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    2aee:	2317      	movs	r3, #23
    2af0:	18fb      	adds	r3, r7, r3
    2af2:	2217      	movs	r2, #23
    2af4:	18ba      	adds	r2, r7, r2
    2af6:	7812      	ldrb	r2, [r2, #0]
    2af8:	2101      	movs	r1, #1
    2afa:	430a      	orrs	r2, r1
    2afc:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    2afe:	687b      	ldr	r3, [r7, #4]
    2b00:	2217      	movs	r2, #23
    2b02:	18ba      	adds	r2, r7, r2
    2b04:	7812      	ldrb	r2, [r2, #0]
    2b06:	701a      	strb	r2, [r3, #0]
}
    2b08:	46c0      	nop			; (mov r8, r8)
    2b0a:	46bd      	mov	sp, r7
    2b0c:	b006      	add	sp, #24
    2b0e:	bd80      	pop	{r7, pc}

00002b10 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2b10:	b580      	push	{r7, lr}
    2b12:	b088      	sub	sp, #32
    2b14:	af00      	add	r7, sp, #0
    2b16:	60b9      	str	r1, [r7, #8]
    2b18:	607a      	str	r2, [r7, #4]
    2b1a:	230f      	movs	r3, #15
    2b1c:	18fb      	adds	r3, r7, r3
    2b1e:	1c02      	adds	r2, r0, #0
    2b20:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    2b22:	230f      	movs	r3, #15
    2b24:	18fb      	adds	r3, r7, r3
    2b26:	781a      	ldrb	r2, [r3, #0]
    2b28:	231b      	movs	r3, #27
    2b2a:	18fb      	adds	r3, r7, r3
    2b2c:	493e      	ldr	r1, [pc, #248]	; (2c28 <_tcc_build_faults+0x118>)
    2b2e:	5c8a      	ldrb	r2, [r1, r2]
    2b30:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2b32:	2300      	movs	r3, #0
    2b34:	61fb      	str	r3, [r7, #28]
    2b36:	e06e      	b.n	2c16 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    2b38:	69fa      	ldr	r2, [r7, #28]
    2b3a:	0013      	movs	r3, r2
    2b3c:	009b      	lsls	r3, r3, #2
    2b3e:	189b      	adds	r3, r3, r2
    2b40:	005b      	lsls	r3, r3, #1
    2b42:	3328      	adds	r3, #40	; 0x28
    2b44:	68ba      	ldr	r2, [r7, #8]
    2b46:	18d3      	adds	r3, r2, r3
    2b48:	3304      	adds	r3, #4
    2b4a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    2b4c:	697b      	ldr	r3, [r7, #20]
    2b4e:	7a5b      	ldrb	r3, [r3, #9]
    2b50:	221b      	movs	r2, #27
    2b52:	18ba      	adds	r2, r7, r2
    2b54:	7812      	ldrb	r2, [r2, #0]
    2b56:	429a      	cmp	r2, r3
    2b58:	d801      	bhi.n	2b5e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    2b5a:	2317      	movs	r3, #23
    2b5c:	e05f      	b.n	2c1e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    2b5e:	697b      	ldr	r3, [r7, #20]
    2b60:	781b      	ldrb	r3, [r3, #0]
    2b62:	2b0f      	cmp	r3, #15
    2b64:	d901      	bls.n	2b6a <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    2b66:	2317      	movs	r3, #23
    2b68:	e059      	b.n	2c1e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2b6a:	697b      	ldr	r3, [r7, #20]
    2b6c:	781b      	ldrb	r3, [r3, #0]
    2b6e:	061b      	lsls	r3, r3, #24
    2b70:	001a      	movs	r2, r3
    2b72:	23f0      	movs	r3, #240	; 0xf0
    2b74:	051b      	lsls	r3, r3, #20
    2b76:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    2b78:	697b      	ldr	r3, [r7, #20]
    2b7a:	785b      	ldrb	r3, [r3, #1]
    2b7c:	041b      	lsls	r3, r3, #16
    2b7e:	0019      	movs	r1, r3
    2b80:	23ff      	movs	r3, #255	; 0xff
    2b82:	041b      	lsls	r3, r3, #16
    2b84:	400b      	ands	r3, r1
    2b86:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    2b88:	697b      	ldr	r3, [r7, #20]
    2b8a:	789b      	ldrb	r3, [r3, #2]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d001      	beq.n	2b94 <_tcc_build_faults+0x84>
    2b90:	2380      	movs	r3, #128	; 0x80
    2b92:	e000      	b.n	2b96 <_tcc_build_faults+0x86>
    2b94:	2300      	movs	r3, #0
    2b96:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    2b98:	697b      	ldr	r3, [r7, #20]
    2b9a:	78db      	ldrb	r3, [r3, #3]
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d001      	beq.n	2ba4 <_tcc_build_faults+0x94>
    2ba0:	2308      	movs	r3, #8
    2ba2:	e000      	b.n	2ba6 <_tcc_build_faults+0x96>
    2ba4:	2300      	movs	r3, #0
    2ba6:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    2ba8:	697b      	ldr	r3, [r7, #20]
    2baa:	791b      	ldrb	r3, [r3, #4]
    2bac:	2b00      	cmp	r3, #0
    2bae:	d001      	beq.n	2bb4 <_tcc_build_faults+0xa4>
    2bb0:	2310      	movs	r3, #16
    2bb2:	e000      	b.n	2bb6 <_tcc_build_faults+0xa6>
    2bb4:	2300      	movs	r3, #0
    2bb6:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    2bb8:	697b      	ldr	r3, [r7, #20]
    2bba:	795b      	ldrb	r3, [r3, #5]
    2bbc:	0019      	movs	r1, r3
    2bbe:	2303      	movs	r3, #3
    2bc0:	400b      	ands	r3, r1
    2bc2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    2bc4:	697b      	ldr	r3, [r7, #20]
    2bc6:	799b      	ldrb	r3, [r3, #6]
    2bc8:	015b      	lsls	r3, r3, #5
    2bca:	0019      	movs	r1, r3
    2bcc:	2360      	movs	r3, #96	; 0x60
    2bce:	400b      	ands	r3, r1
    2bd0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    2bd2:	697b      	ldr	r3, [r7, #20]
    2bd4:	79db      	ldrb	r3, [r3, #7]
    2bd6:	021b      	lsls	r3, r3, #8
    2bd8:	0019      	movs	r1, r3
    2bda:	23c0      	movs	r3, #192	; 0xc0
    2bdc:	009b      	lsls	r3, r3, #2
    2bde:	400b      	ands	r3, r1
    2be0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    2be2:	697b      	ldr	r3, [r7, #20]
    2be4:	7a1b      	ldrb	r3, [r3, #8]
    2be6:	031b      	lsls	r3, r3, #12
    2be8:	0019      	movs	r1, r3
    2bea:	23e0      	movs	r3, #224	; 0xe0
    2bec:	01db      	lsls	r3, r3, #7
    2bee:	400b      	ands	r3, r1
    2bf0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    2bf2:	697b      	ldr	r3, [r7, #20]
    2bf4:	7a5b      	ldrb	r3, [r3, #9]
    2bf6:	029b      	lsls	r3, r3, #10
    2bf8:	0019      	movs	r1, r3
    2bfa:	23c0      	movs	r3, #192	; 0xc0
    2bfc:	011b      	lsls	r3, r3, #4
    2bfe:	400b      	ands	r3, r1
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2c00:	4313      	orrs	r3, r2
    2c02:	613b      	str	r3, [r7, #16]
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    2c04:	69fb      	ldr	r3, [r7, #28]
    2c06:	009b      	lsls	r3, r3, #2
    2c08:	687a      	ldr	r2, [r7, #4]
    2c0a:	18d3      	adds	r3, r2, r3
    2c0c:	693a      	ldr	r2, [r7, #16]
    2c0e:	601a      	str	r2, [r3, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2c10:	69fb      	ldr	r3, [r7, #28]
    2c12:	3301      	adds	r3, #1
    2c14:	61fb      	str	r3, [r7, #28]
    2c16:	69fb      	ldr	r3, [r7, #28]
    2c18:	2b01      	cmp	r3, #1
    2c1a:	dd8d      	ble.n	2b38 <_tcc_build_faults+0x28>
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
	}
	return STATUS_OK;
    2c1c:	2300      	movs	r3, #0
}
    2c1e:	0018      	movs	r0, r3
    2c20:	46bd      	mov	sp, r7
    2c22:	b008      	add	sp, #32
    2c24:	bd80      	pop	{r7, pc}
    2c26:	46c0      	nop			; (mov r8, r8)
    2c28:	000285b4 	.word	0x000285b4

00002c2c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2c2c:	b580      	push	{r7, lr}
    2c2e:	b088      	sub	sp, #32
    2c30:	af00      	add	r7, sp, #0
    2c32:	60b9      	str	r1, [r7, #8]
    2c34:	607a      	str	r2, [r7, #4]
    2c36:	230f      	movs	r3, #15
    2c38:	18fb      	adds	r3, r7, r3
    2c3a:	1c02      	adds	r2, r0, #0
    2c3c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    2c3e:	230f      	movs	r3, #15
    2c40:	18fb      	adds	r3, r7, r3
    2c42:	781a      	ldrb	r2, [r3, #0]
    2c44:	2317      	movs	r3, #23
    2c46:	18fb      	adds	r3, r7, r3
    2c48:	492d      	ldr	r1, [pc, #180]	; (2d00 <_tcc_build_drvctrl+0xd4>)
    2c4a:	5c8a      	ldrb	r2, [r1, r2]
    2c4c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    2c4e:	2300      	movs	r3, #0
    2c50:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2c52:	2300      	movs	r3, #0
    2c54:	61fb      	str	r3, [r7, #28]
    2c56:	e048      	b.n	2cea <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    2c58:	68ba      	ldr	r2, [r7, #8]
    2c5a:	2150      	movs	r1, #80	; 0x50
    2c5c:	69fb      	ldr	r3, [r7, #28]
    2c5e:	18d3      	adds	r3, r2, r3
    2c60:	185b      	adds	r3, r3, r1
    2c62:	781b      	ldrb	r3, [r3, #0]
    2c64:	2b00      	cmp	r3, #0
    2c66:	d010      	beq.n	2c8a <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    2c68:	2317      	movs	r3, #23
    2c6a:	18fb      	adds	r3, r7, r3
    2c6c:	781a      	ldrb	r2, [r3, #0]
    2c6e:	69fb      	ldr	r3, [r7, #28]
    2c70:	429a      	cmp	r2, r3
    2c72:	d801      	bhi.n	2c78 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    2c74:	2317      	movs	r3, #23
    2c76:	e03f      	b.n	2cf8 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    2c78:	2380      	movs	r3, #128	; 0x80
    2c7a:	025a      	lsls	r2, r3, #9
    2c7c:	69fb      	ldr	r3, [r7, #28]
    2c7e:	409a      	lsls	r2, r3
    2c80:	0013      	movs	r3, r2
    2c82:	001a      	movs	r2, r3
    2c84:	69bb      	ldr	r3, [r7, #24]
    2c86:	4313      	orrs	r3, r2
    2c88:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    2c8a:	68ba      	ldr	r2, [r7, #8]
    2c8c:	69fb      	ldr	r3, [r7, #28]
    2c8e:	331c      	adds	r3, #28
    2c90:	005b      	lsls	r3, r3, #1
    2c92:	18d3      	adds	r3, r2, r3
    2c94:	3309      	adds	r3, #9
    2c96:	781b      	ldrb	r3, [r3, #0]
    2c98:	2b00      	cmp	r3, #0
    2c9a:	d023      	beq.n	2ce4 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    2c9c:	2317      	movs	r3, #23
    2c9e:	18fb      	adds	r3, r7, r3
    2ca0:	781a      	ldrb	r2, [r3, #0]
    2ca2:	69fb      	ldr	r3, [r7, #28]
    2ca4:	429a      	cmp	r2, r3
    2ca6:	d801      	bhi.n	2cac <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    2ca8:	2317      	movs	r3, #23
    2caa:	e025      	b.n	2cf8 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    2cac:	68ba      	ldr	r2, [r7, #8]
    2cae:	69fb      	ldr	r3, [r7, #28]
    2cb0:	331c      	adds	r3, #28
    2cb2:	005b      	lsls	r3, r3, #1
    2cb4:	18d3      	adds	r3, r2, r3
    2cb6:	3309      	adds	r3, #9
    2cb8:	781b      	ldrb	r3, [r3, #0]
    2cba:	2b02      	cmp	r3, #2
    2cbc:	d10a      	bne.n	2cd4 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    2cbe:	2302      	movs	r3, #2
    2cc0:	33ff      	adds	r3, #255	; 0xff
    2cc2:	001a      	movs	r2, r3
    2cc4:	69fb      	ldr	r3, [r7, #28]
    2cc6:	409a      	lsls	r2, r3
    2cc8:	0013      	movs	r3, r2
    2cca:	001a      	movs	r2, r3
    2ccc:	69bb      	ldr	r3, [r7, #24]
    2cce:	4313      	orrs	r3, r2
    2cd0:	61bb      	str	r3, [r7, #24]
    2cd2:	e007      	b.n	2ce4 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    2cd4:	2201      	movs	r2, #1
    2cd6:	69fb      	ldr	r3, [r7, #28]
    2cd8:	409a      	lsls	r2, r3
    2cda:	0013      	movs	r3, r2
    2cdc:	001a      	movs	r2, r3
    2cde:	69bb      	ldr	r3, [r7, #24]
    2ce0:	4313      	orrs	r3, r2
    2ce2:	61bb      	str	r3, [r7, #24]
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2ce4:	69fb      	ldr	r3, [r7, #28]
    2ce6:	3301      	adds	r3, #1
    2ce8:	61fb      	str	r3, [r7, #28]
    2cea:	69fb      	ldr	r3, [r7, #28]
    2cec:	2b07      	cmp	r3, #7
    2cee:	d9b3      	bls.n	2c58 <_tcc_build_drvctrl+0x2c>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
			}
		}
	}
	*value_buffer = drvctrl;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	69ba      	ldr	r2, [r7, #24]
    2cf4:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    2cf6:	2300      	movs	r3, #0
}
    2cf8:	0018      	movs	r0, r3
    2cfa:	46bd      	mov	sp, r7
    2cfc:	b008      	add	sp, #32
    2cfe:	bd80      	pop	{r7, pc}
    2d00:	000285b8 	.word	0x000285b8

00002d04 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2d04:	b580      	push	{r7, lr}
    2d06:	b088      	sub	sp, #32
    2d08:	af00      	add	r7, sp, #0
    2d0a:	60b9      	str	r1, [r7, #8]
    2d0c:	607a      	str	r2, [r7, #4]
    2d0e:	230f      	movs	r3, #15
    2d10:	18fb      	adds	r3, r7, r3
    2d12:	1c02      	adds	r2, r0, #0
    2d14:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    2d16:	230f      	movs	r3, #15
    2d18:	18fb      	adds	r3, r7, r3
    2d1a:	781a      	ldrb	r2, [r3, #0]
    2d1c:	2317      	movs	r3, #23
    2d1e:	18fb      	adds	r3, r7, r3
    2d20:	491d      	ldr	r1, [pc, #116]	; (2d98 <_tcc_build_waves+0x94>)
    2d22:	5c8a      	ldrb	r2, [r1, r2]
    2d24:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    2d26:	68bb      	ldr	r3, [r7, #8]
    2d28:	3310      	adds	r3, #16
    2d2a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2d2c:	693b      	ldr	r3, [r7, #16]
    2d2e:	7a5b      	ldrb	r3, [r3, #9]
    2d30:	011b      	lsls	r3, r3, #4
    2d32:	001a      	movs	r2, r3
    2d34:	2330      	movs	r3, #48	; 0x30
    2d36:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    2d38:	693b      	ldr	r3, [r7, #16]
    2d3a:	7a1b      	ldrb	r3, [r3, #8]
    2d3c:	0019      	movs	r1, r3
    2d3e:	2307      	movs	r3, #7
    2d40:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2d42:	4313      	orrs	r3, r2
    2d44:	61bb      	str	r3, [r7, #24]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2d46:	2300      	movs	r3, #0
    2d48:	61fb      	str	r3, [r7, #28]
    2d4a:	e01a      	b.n	2d82 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    2d4c:	693a      	ldr	r2, [r7, #16]
    2d4e:	69fb      	ldr	r3, [r7, #28]
    2d50:	18d3      	adds	r3, r2, r3
    2d52:	3304      	adds	r3, #4
    2d54:	781b      	ldrb	r3, [r3, #0]
    2d56:	2b00      	cmp	r3, #0
    2d58:	d010      	beq.n	2d7c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    2d5a:	2317      	movs	r3, #23
    2d5c:	18fb      	adds	r3, r7, r3
    2d5e:	781a      	ldrb	r2, [r3, #0]
    2d60:	69fb      	ldr	r3, [r7, #28]
    2d62:	429a      	cmp	r2, r3
    2d64:	dc01      	bgt.n	2d6a <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    2d66:	2317      	movs	r3, #23
    2d68:	e012      	b.n	2d90 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    2d6a:	2380      	movs	r3, #128	; 0x80
    2d6c:	025a      	lsls	r2, r3, #9
    2d6e:	69fb      	ldr	r3, [r7, #28]
    2d70:	409a      	lsls	r2, r3
    2d72:	0013      	movs	r3, r2
    2d74:	001a      	movs	r2, r3
    2d76:	69bb      	ldr	r3, [r7, #24]
    2d78:	4313      	orrs	r3, r2
    2d7a:	61bb      	str	r3, [r7, #24]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2d7c:	69fb      	ldr	r3, [r7, #28]
    2d7e:	3301      	adds	r3, #1
    2d80:	61fb      	str	r3, [r7, #28]
    2d82:	69fb      	ldr	r3, [r7, #28]
    2d84:	2b03      	cmp	r3, #3
    2d86:	dde1      	ble.n	2d4c <_tcc_build_waves+0x48>
			}
			wave |= (TCC_WAVE_POL0 << n);
		}
	}

	value_buffer[0] = wave;
    2d88:	687b      	ldr	r3, [r7, #4]
    2d8a:	69ba      	ldr	r2, [r7, #24]
    2d8c:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    2d8e:	2300      	movs	r3, #0
}
    2d90:	0018      	movs	r0, r3
    2d92:	46bd      	mov	sp, r7
    2d94:	b008      	add	sp, #32
    2d96:	bd80      	pop	{r7, pc}
    2d98:	000285b4 	.word	0x000285b4

00002d9c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    2d9c:	b590      	push	{r4, r7, lr}
    2d9e:	b091      	sub	sp, #68	; 0x44
    2da0:	af00      	add	r7, sp, #0
    2da2:	60f8      	str	r0, [r7, #12]
    2da4:	60b9      	str	r1, [r7, #8]
    2da6:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    2da8:	233b      	movs	r3, #59	; 0x3b
    2daa:	18fc      	adds	r4, r7, r3
    2dac:	68bb      	ldr	r3, [r7, #8]
    2dae:	0018      	movs	r0, r3
    2db0:	f7ff fcaa 	bl	2708 <_tcc_get_inst_index>
    2db4:	0003      	movs	r3, r0
    2db6:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2db8:	233b      	movs	r3, #59	; 0x3b
    2dba:	18fb      	adds	r3, r7, r3
    2dbc:	781a      	ldrb	r2, [r3, #0]
    2dbe:	4bc1      	ldr	r3, [pc, #772]	; (30c4 <tcc_init+0x328>)
    2dc0:	0092      	lsls	r2, r2, #2
    2dc2:	58d3      	ldr	r3, [r2, r3]
    2dc4:	0019      	movs	r1, r3
    2dc6:	2002      	movs	r0, #2
    2dc8:	f7ff fc5c 	bl	2684 <system_apb_clock_set_mask>
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    2dcc:	68bb      	ldr	r3, [r7, #8]
    2dce:	681b      	ldr	r3, [r3, #0]
    2dd0:	2202      	movs	r2, #2
    2dd2:	4013      	ands	r3, r2
    2dd4:	d001      	beq.n	2dda <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    2dd6:	231c      	movs	r3, #28
    2dd8:	e1a6      	b.n	3128 <tcc_init+0x38c>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    2dda:	68bb      	ldr	r3, [r7, #8]
    2ddc:	681b      	ldr	r3, [r3, #0]
    2dde:	2201      	movs	r2, #1
    2de0:	4013      	ands	r3, r2
    2de2:	d001      	beq.n	2de8 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    2de4:	231c      	movs	r3, #28
    2de6:	e19f      	b.n	3128 <tcc_init+0x38c>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    2de8:	233b      	movs	r3, #59	; 0x3b
    2dea:	18fb      	adds	r3, r7, r3
    2dec:	781a      	ldrb	r2, [r3, #0]
    2dee:	4bb6      	ldr	r3, [pc, #728]	; (30c8 <tcc_init+0x32c>)
    2df0:	0092      	lsls	r2, r2, #2
    2df2:	58d3      	ldr	r3, [r2, r3]
    2df4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	681a      	ldr	r2, [r3, #0]
    2dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2dfc:	429a      	cmp	r2, r3
    2dfe:	d804      	bhi.n	2e0a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	685a      	ldr	r2, [r3, #4]
    2e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e06:	429a      	cmp	r2, r3
    2e08:	d901      	bls.n	2e0e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    2e0a:	2317      	movs	r3, #23
    2e0c:	e18c      	b.n	3128 <tcc_init+0x38c>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2e0e:	2300      	movs	r3, #0
    2e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    2e12:	e00e      	b.n	2e32 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    2e14:	687a      	ldr	r2, [r7, #4]
    2e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e18:	3306      	adds	r3, #6
    2e1a:	009b      	lsls	r3, r3, #2
    2e1c:	18d3      	adds	r3, r2, r3
    2e1e:	3304      	adds	r3, #4
    2e20:	681a      	ldr	r2, [r3, #0]
    2e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e24:	429a      	cmp	r2, r3
    2e26:	d901      	bls.n	2e2c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    2e28:	2317      	movs	r3, #23
    2e2a:	e17d      	b.n	3128 <tcc_init+0x38c>
		) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e2e:	3301      	adds	r3, #1
    2e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    2e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e34:	2b03      	cmp	r3, #3
    2e36:	dded      	ble.n	2e14 <tcc_init+0x78>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2e38:	2300      	movs	r3, #0
    2e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    2e3c:	e019      	b.n	2e72 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    2e3e:	687a      	ldr	r2, [r7, #4]
    2e40:	2198      	movs	r1, #152	; 0x98
    2e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e44:	18d3      	adds	r3, r2, r3
    2e46:	185b      	adds	r3, r3, r1
    2e48:	781b      	ldrb	r3, [r3, #0]
    2e4a:	2201      	movs	r2, #1
    2e4c:	4053      	eors	r3, r2
    2e4e:	b2db      	uxtb	r3, r3
    2e50:	2b00      	cmp	r3, #0
    2e52:	d10a      	bne.n	2e6a <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    2e54:	233b      	movs	r3, #59	; 0x3b
    2e56:	18fb      	adds	r3, r7, r3
    2e58:	781b      	ldrb	r3, [r3, #0]
    2e5a:	4a9c      	ldr	r2, [pc, #624]	; (30cc <tcc_init+0x330>)
    2e5c:	5cd3      	ldrb	r3, [r2, r3]
    2e5e:	001a      	movs	r2, r3
    2e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e62:	429a      	cmp	r2, r3
    2e64:	dc02      	bgt.n	2e6c <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    2e66:	2317      	movs	r3, #23
    2e68:	e15e      	b.n	3128 <tcc_init+0x38c>
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    2e6a:	46c0      	nop			; (mov r8, r8)
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e6e:	3301      	adds	r3, #1
    2e70:	63fb      	str	r3, [r7, #60]	; 0x3c
    2e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e74:	2b07      	cmp	r3, #7
    2e76:	dde2      	ble.n	2e3e <tcc_init+0xa2>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    2e78:	2300      	movs	r3, #0
    2e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    2e7c:	2333      	movs	r3, #51	; 0x33
    2e7e:	18fc      	adds	r4, r7, r3
    2e80:	232c      	movs	r3, #44	; 0x2c
    2e82:	18fa      	adds	r2, r7, r3
    2e84:	6879      	ldr	r1, [r7, #4]
    2e86:	233b      	movs	r3, #59	; 0x3b
    2e88:	18fb      	adds	r3, r7, r3
    2e8a:	781b      	ldrb	r3, [r3, #0]
    2e8c:	0018      	movs	r0, r3
    2e8e:	f7ff fdbf 	bl	2a10 <_tcc_build_ctrla>
    2e92:	0003      	movs	r3, r0
    2e94:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2e96:	2333      	movs	r3, #51	; 0x33
    2e98:	18fb      	adds	r3, r7, r3
    2e9a:	781b      	ldrb	r3, [r3, #0]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d003      	beq.n	2ea8 <tcc_init+0x10c>
		return status;
    2ea0:	2333      	movs	r3, #51	; 0x33
    2ea2:	18fb      	adds	r3, r7, r3
    2ea4:	781b      	ldrb	r3, [r3, #0]
    2ea6:	e13f      	b.n	3128 <tcc_init+0x38c>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    2ea8:	232b      	movs	r3, #43	; 0x2b
    2eaa:	18fa      	adds	r2, r7, r3
    2eac:	6879      	ldr	r1, [r7, #4]
    2eae:	233b      	movs	r3, #59	; 0x3b
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	781b      	ldrb	r3, [r3, #0]
    2eb4:	0018      	movs	r0, r3
    2eb6:	f7ff fdfd 	bl	2ab4 <_tcc_build_ctrlb>

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    2eba:	2333      	movs	r3, #51	; 0x33
    2ebc:	18fc      	adds	r4, r7, r3
    2ebe:	2320      	movs	r3, #32
    2ec0:	18fa      	adds	r2, r7, r3
    2ec2:	6879      	ldr	r1, [r7, #4]
    2ec4:	233b      	movs	r3, #59	; 0x3b
    2ec6:	18fb      	adds	r3, r7, r3
    2ec8:	781b      	ldrb	r3, [r3, #0]
    2eca:	0018      	movs	r0, r3
    2ecc:	f7ff fe20 	bl	2b10 <_tcc_build_faults>
    2ed0:	0003      	movs	r3, r0
    2ed2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2ed4:	2333      	movs	r3, #51	; 0x33
    2ed6:	18fb      	adds	r3, r7, r3
    2ed8:	781b      	ldrb	r3, [r3, #0]
    2eda:	2b00      	cmp	r3, #0
    2edc:	d003      	beq.n	2ee6 <tcc_init+0x14a>
		return status;
    2ede:	2333      	movs	r3, #51	; 0x33
    2ee0:	18fb      	adds	r3, r7, r3
    2ee2:	781b      	ldrb	r3, [r3, #0]
    2ee4:	e120      	b.n	3128 <tcc_init+0x38c>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    2ee6:	2300      	movs	r3, #0
    2ee8:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    2eea:	2333      	movs	r3, #51	; 0x33
    2eec:	18fc      	adds	r4, r7, r3
    2eee:	231c      	movs	r3, #28
    2ef0:	18fa      	adds	r2, r7, r3
    2ef2:	6879      	ldr	r1, [r7, #4]
    2ef4:	233b      	movs	r3, #59	; 0x3b
    2ef6:	18fb      	adds	r3, r7, r3
    2ef8:	781b      	ldrb	r3, [r3, #0]
    2efa:	0018      	movs	r0, r3
    2efc:	f7ff fe96 	bl	2c2c <_tcc_build_drvctrl>
    2f00:	0003      	movs	r3, r0
    2f02:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2f04:	2333      	movs	r3, #51	; 0x33
    2f06:	18fb      	adds	r3, r7, r3
    2f08:	781b      	ldrb	r3, [r3, #0]
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d003      	beq.n	2f16 <tcc_init+0x17a>
		return status;
    2f0e:	2333      	movs	r3, #51	; 0x33
    2f10:	18fb      	adds	r3, r7, r3
    2f12:	781b      	ldrb	r3, [r3, #0]
    2f14:	e108      	b.n	3128 <tcc_init+0x38c>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    2f16:	2333      	movs	r3, #51	; 0x33
    2f18:	18fc      	adds	r4, r7, r3
    2f1a:	2318      	movs	r3, #24
    2f1c:	18fa      	adds	r2, r7, r3
    2f1e:	6879      	ldr	r1, [r7, #4]
    2f20:	233b      	movs	r3, #59	; 0x3b
    2f22:	18fb      	adds	r3, r7, r3
    2f24:	781b      	ldrb	r3, [r3, #0]
    2f26:	0018      	movs	r0, r3
    2f28:	f7ff feec 	bl	2d04 <_tcc_build_waves>
    2f2c:	0003      	movs	r3, r0
    2f2e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2f30:	2333      	movs	r3, #51	; 0x33
    2f32:	18fb      	adds	r3, r7, r3
    2f34:	781b      	ldrb	r3, [r3, #0]
    2f36:	2b00      	cmp	r3, #0
    2f38:	d003      	beq.n	2f42 <tcc_init+0x1a6>
		return status;
    2f3a:	2333      	movs	r3, #51	; 0x33
    2f3c:	18fb      	adds	r3, r7, r3
    2f3e:	781b      	ldrb	r3, [r3, #0]
    2f40:	e0f2      	b.n	3128 <tcc_init+0x38c>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2f42:	2300      	movs	r3, #0
    2f44:	63fb      	str	r3, [r7, #60]	; 0x3c
    2f46:	e009      	b.n	2f5c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    2f48:	68fa      	ldr	r2, [r7, #12]
    2f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2f4c:	009b      	lsls	r3, r3, #2
    2f4e:	18d3      	adds	r3, r2, r3
    2f50:	3304      	adds	r3, #4
    2f52:	2200      	movs	r2, #0
    2f54:	601a      	str	r2, [r3, #0]
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2f58:	3301      	adds	r3, #1
    2f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    2f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2f5e:	2b0b      	cmp	r3, #11
    2f60:	ddf2      	ble.n	2f48 <tcc_init+0x1ac>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    2f62:	68fb      	ldr	r3, [r7, #12]
    2f64:	2200      	movs	r2, #0
    2f66:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    2f68:	68fb      	ldr	r3, [r7, #12]
    2f6a:	2200      	movs	r2, #0
    2f6c:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    2f6e:	233b      	movs	r3, #59	; 0x3b
    2f70:	18fb      	adds	r3, r7, r3
    2f72:	781a      	ldrb	r2, [r3, #0]
    2f74:	4b56      	ldr	r3, [pc, #344]	; (30d0 <tcc_init+0x334>)
    2f76:	0092      	lsls	r2, r2, #2
    2f78:	68f9      	ldr	r1, [r7, #12]
    2f7a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    2f7c:	68fb      	ldr	r3, [r7, #12]
    2f7e:	68ba      	ldr	r2, [r7, #8]
    2f80:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	22a0      	movs	r2, #160	; 0xa0
    2f86:	5c99      	ldrb	r1, [r3, r2]
    2f88:	68fb      	ldr	r3, [r7, #12]
    2f8a:	223c      	movs	r2, #60	; 0x3c
    2f8c:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    2f8e:	2314      	movs	r3, #20
    2f90:	18fb      	adds	r3, r7, r3
    2f92:	0018      	movs	r0, r3
    2f94:	f7ff fb6a 	bl	266c <system_gclk_chan_get_config_defaults>
	gclk_chan_config.source_generator = config->counter.clock_source;
    2f98:	687b      	ldr	r3, [r7, #4]
    2f9a:	7a9a      	ldrb	r2, [r3, #10]
    2f9c:	2314      	movs	r3, #20
    2f9e:	18fb      	adds	r3, r7, r3
    2fa0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    2fa2:	233b      	movs	r3, #59	; 0x3b
    2fa4:	18fb      	adds	r3, r7, r3
    2fa6:	781b      	ldrb	r3, [r3, #0]
    2fa8:	4a4a      	ldr	r2, [pc, #296]	; (30d4 <tcc_init+0x338>)
    2faa:	5cd3      	ldrb	r3, [r2, r3]
    2fac:	2214      	movs	r2, #20
    2fae:	18ba      	adds	r2, r7, r2
    2fb0:	0011      	movs	r1, r2
    2fb2:	0018      	movs	r0, r3
    2fb4:	f001 fdac 	bl	4b10 <system_gclk_chan_set_config>
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    2fb8:	233b      	movs	r3, #59	; 0x3b
    2fba:	18fb      	adds	r3, r7, r3
    2fbc:	781b      	ldrb	r3, [r3, #0]
    2fbe:	4a45      	ldr	r2, [pc, #276]	; (30d4 <tcc_init+0x338>)
    2fc0:	5cd3      	ldrb	r3, [r2, r3]
    2fc2:	0018      	movs	r0, r3
    2fc4:	f001 fdc4 	bl	4b50 <system_gclk_chan_enable>

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2fc8:	2300      	movs	r3, #0
    2fca:	63fb      	str	r3, [r7, #60]	; 0x3c
    2fcc:	e02d      	b.n	302a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    2fce:	687a      	ldr	r2, [r7, #4]
    2fd0:	2198      	movs	r1, #152	; 0x98
    2fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2fd4:	18d3      	adds	r3, r2, r3
    2fd6:	185b      	adds	r3, r3, r1
    2fd8:	781b      	ldrb	r3, [r3, #0]
    2fda:	2201      	movs	r2, #1
    2fdc:	4053      	eors	r3, r2
    2fde:	b2db      	uxtb	r3, r3
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	d11e      	bne.n	3022 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    2fe4:	2310      	movs	r3, #16
    2fe6:	18fb      	adds	r3, r7, r3
    2fe8:	0018      	movs	r0, r3
    2fea:	f7ff fb79 	bl	26e0 <system_pinmux_get_config_defaults>
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2ff2:	321e      	adds	r2, #30
    2ff4:	0092      	lsls	r2, r2, #2
    2ff6:	58d3      	ldr	r3, [r2, r3]
    2ff8:	b2da      	uxtb	r2, r3
    2ffa:	2310      	movs	r3, #16
    2ffc:	18fb      	adds	r3, r7, r3
    2ffe:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3000:	2310      	movs	r3, #16
    3002:	18fb      	adds	r3, r7, r3
    3004:	2201      	movs	r2, #1
    3006:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    3008:	687b      	ldr	r3, [r7, #4]
    300a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    300c:	3216      	adds	r2, #22
    300e:	0092      	lsls	r2, r2, #2
    3010:	58d3      	ldr	r3, [r2, r3]
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    3012:	b2db      	uxtb	r3, r3
    3014:	2210      	movs	r2, #16
    3016:	18ba      	adds	r2, r7, r2
    3018:	0011      	movs	r1, r2
    301a:	0018      	movs	r0, r3
    301c:	f001 fede 	bl	4ddc <system_pinmux_pin_set_config>
    3020:	e000      	b.n	3024 <tcc_init+0x288>

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    3022:	46c0      	nop			; (mov r8, r8)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    3024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3026:	3301      	adds	r3, #1
    3028:	63fb      	str	r3, [r7, #60]	; 0x3c
    302a:	233b      	movs	r3, #59	; 0x3b
    302c:	18fb      	adds	r3, r7, r3
    302e:	781b      	ldrb	r3, [r3, #0]
    3030:	4a26      	ldr	r2, [pc, #152]	; (30cc <tcc_init+0x330>)
    3032:	5cd3      	ldrb	r3, [r2, r3]
    3034:	001a      	movs	r2, r3
    3036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3038:	429a      	cmp	r2, r3
    303a:	dcc8      	bgt.n	2fce <tcc_init+0x232>
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    303c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    303e:	68bb      	ldr	r3, [r7, #8]
    3040:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	68bb      	ldr	r3, [r7, #8]
    3046:	689b      	ldr	r3, [r3, #8]
    3048:	2204      	movs	r2, #4
    304a:	4013      	ands	r3, r2
    304c:	d1fa      	bne.n	3044 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    304e:	68bb      	ldr	r3, [r7, #8]
    3050:	22ff      	movs	r2, #255	; 0xff
    3052:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3054:	46c0      	nop			; (mov r8, r8)
    3056:	68bb      	ldr	r3, [r7, #8]
    3058:	689b      	ldr	r3, [r3, #8]
    305a:	2204      	movs	r2, #4
    305c:	4013      	ands	r3, r2
    305e:	d1fa      	bne.n	3056 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    3060:	232b      	movs	r3, #43	; 0x2b
    3062:	18fb      	adds	r3, r7, r3
    3064:	781a      	ldrb	r2, [r3, #0]
    3066:	68bb      	ldr	r3, [r7, #8]
    3068:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    306a:	2320      	movs	r3, #32
    306c:	18fb      	adds	r3, r7, r3
    306e:	681a      	ldr	r2, [r3, #0]
    3070:	68bb      	ldr	r3, [r7, #8]
    3072:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    3074:	2320      	movs	r3, #32
    3076:	18fb      	adds	r3, r7, r3
    3078:	685a      	ldr	r2, [r3, #4]
    307a:	68bb      	ldr	r3, [r7, #8]
    307c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    307e:	69fa      	ldr	r2, [r7, #28]
    3080:	68bb      	ldr	r3, [r7, #8]
    3082:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    3084:	46c0      	nop			; (mov r8, r8)
    3086:	68bb      	ldr	r3, [r7, #8]
    3088:	689b      	ldr	r3, [r3, #8]
    308a:	4a13      	ldr	r2, [pc, #76]	; (30d8 <tcc_init+0x33c>)
    308c:	4013      	ands	r3, r2
    308e:	d1fa      	bne.n	3086 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    3090:	69ba      	ldr	r2, [r7, #24]
    3092:	68bb      	ldr	r3, [r7, #8]
    3094:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    3096:	46c0      	nop			; (mov r8, r8)
    3098:	68bb      	ldr	r3, [r7, #8]
    309a:	689b      	ldr	r3, [r3, #8]
    309c:	2210      	movs	r2, #16
    309e:	4013      	ands	r3, r2
    30a0:	d1fa      	bne.n	3098 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	681a      	ldr	r2, [r3, #0]
    30a6:	68bb      	ldr	r3, [r7, #8]
    30a8:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    30aa:	46c0      	nop			; (mov r8, r8)
    30ac:	68bb      	ldr	r3, [r7, #8]
    30ae:	689b      	ldr	r3, [r3, #8]
    30b0:	4a0a      	ldr	r2, [pc, #40]	; (30dc <tcc_init+0x340>)
    30b2:	4013      	ands	r3, r2
    30b4:	d1fa      	bne.n	30ac <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    30b6:	687b      	ldr	r3, [r7, #4]
    30b8:	685a      	ldr	r2, [r3, #4]
    30ba:	68bb      	ldr	r3, [r7, #8]
    30bc:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    30be:	2300      	movs	r3, #0
    30c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    30c2:	e027      	b.n	3114 <tcc_init+0x378>
    30c4:	0002859c 	.word	0x0002859c
    30c8:	000285a8 	.word	0x000285a8
    30cc:	000285b8 	.word	0x000285b8
    30d0:	200004e4 	.word	0x200004e4
    30d4:	00028598 	.word	0x00028598
    30d8:	00020040 	.word	0x00020040
    30dc:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    30e0:	46c0      	nop			; (mov r8, r8)
    30e2:	68bb      	ldr	r3, [r7, #8]
    30e4:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    30e6:	4912      	ldr	r1, [pc, #72]	; (3130 <tcc_init+0x394>)
    30e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    30ea:	4091      	lsls	r1, r2
    30ec:	000a      	movs	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    30ee:	4013      	ands	r3, r2
    30f0:	d1f7      	bne.n	30e2 <tcc_init+0x346>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    30f2:	687a      	ldr	r2, [r7, #4]
    30f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    30f6:	3306      	adds	r3, #6
    30f8:	009b      	lsls	r3, r3, #2
    30fa:	18d3      	adds	r3, r2, r3
    30fc:	3304      	adds	r3, #4
    30fe:	681a      	ldr	r2, [r3, #0]
    3100:	68b9      	ldr	r1, [r7, #8]
    3102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3104:	3310      	adds	r3, #16
    3106:	009b      	lsls	r3, r3, #2
    3108:	18cb      	adds	r3, r1, r3
    310a:	3304      	adds	r3, #4
    310c:	601a      	str	r2, [r3, #0]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    310e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3110:	3301      	adds	r3, #1
    3112:	63fb      	str	r3, [r7, #60]	; 0x3c
    3114:	233b      	movs	r3, #59	; 0x3b
    3116:	18fb      	adds	r3, r7, r3
    3118:	781b      	ldrb	r3, [r3, #0]
    311a:	4a06      	ldr	r2, [pc, #24]	; (3134 <tcc_init+0x398>)
    311c:	5cd3      	ldrb	r3, [r2, r3]
    311e:	001a      	movs	r2, r3
    3120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3122:	429a      	cmp	r2, r3
    3124:	dcdc      	bgt.n	30e0 <tcc_init+0x344>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    3126:	2300      	movs	r3, #0
}
    3128:	0018      	movs	r0, r3
    312a:	46bd      	mov	sp, r7
    312c:	b011      	add	sp, #68	; 0x44
    312e:	bd90      	pop	{r4, r7, pc}
    3130:	00080100 	.word	0x00080100
    3134:	000285b4 	.word	0x000285b4

00003138 <tcc_get_count_value>:
 *
 * \return Count value of the specified TCC module.
 */
uint32_t tcc_get_count_value(
		const struct tcc_module *const module_inst)
{
    3138:	b580      	push	{r7, lr}
    313a:	b084      	sub	sp, #16
    313c:	af00      	add	r7, sp, #0
    313e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tcc *const tcc_module = module_inst->hw;
    3140:	687b      	ldr	r3, [r7, #4]
    3142:	681b      	ldr	r3, [r3, #0]
    3144:	60fb      	str	r3, [r7, #12]
	uint32_t last_cmd;

	/* Wait last command done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	689b      	ldr	r3, [r3, #8]
    314c:	2204      	movs	r2, #4
    314e:	4013      	ands	r3, r2
    3150:	d1fa      	bne.n	3148 <tcc_get_count_value+0x10>
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	795b      	ldrb	r3, [r3, #5]
    3156:	b2db      	uxtb	r3, r3
    3158:	001a      	movs	r2, r3
    315a:	23e0      	movs	r3, #224	; 0xe0
    315c:	4013      	ands	r3, r2
    315e:	60bb      	str	r3, [r7, #8]
		if (TCC_CTRLBSET_CMD_NONE == last_cmd) {
    3160:	68bb      	ldr	r3, [r7, #8]
    3162:	2b00      	cmp	r3, #0
    3164:	d10f      	bne.n	3186 <tcc_get_count_value+0x4e>
			/* Issue read command and break */
			tcc_module->CTRLBSET.bit.CMD = TCC_CTRLBSET_CMD_READSYNC_Val;
    3166:	68fa      	ldr	r2, [r7, #12]
    3168:	7953      	ldrb	r3, [r2, #5]
    316a:	211f      	movs	r1, #31
    316c:	400b      	ands	r3, r1
    316e:	1c19      	adds	r1, r3, #0
    3170:	2380      	movs	r3, #128	; 0x80
    3172:	425b      	negs	r3, r3
    3174:	430b      	orrs	r3, r1
    3176:	7153      	strb	r3, [r2, #5]
			while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3178:	46c0      	nop			; (mov r8, r8)
    317a:	68fb      	ldr	r3, [r7, #12]
    317c:	689b      	ldr	r3, [r3, #8]
    317e:	2204      	movs	r2, #4
    3180:	4013      	ands	r3, r2
    3182:	d1fa      	bne.n	317a <tcc_get_count_value+0x42>
				/* Wait for sync */
			}
			break;
    3184:	e004      	b.n	3190 <tcc_get_count_value+0x58>
		} else if (TCC_CTRLBSET_CMD_READSYNC == last_cmd) {
    3186:	68bb      	ldr	r3, [r7, #8]
    3188:	2b80      	cmp	r3, #128	; 0x80
    318a:	d000      	beq.n	318e <tcc_get_count_value+0x56>
			/* Command have been issued */
			break;
		}
	} while (1);
    318c:	e7db      	b.n	3146 <tcc_get_count_value+0xe>
				/* Wait for sync */
			}
			break;
		} else if (TCC_CTRLBSET_CMD_READSYNC == last_cmd) {
			/* Command have been issued */
			break;
    318e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    3190:	46c0      	nop			; (mov r8, r8)
    3192:	68fb      	ldr	r3, [r7, #12]
    3194:	689b      	ldr	r3, [r3, #8]
    3196:	2210      	movs	r2, #16
    3198:	4013      	ands	r3, r2
    319a:	d1fa      	bne.n	3192 <tcc_get_count_value+0x5a>
		/* Wait for sync */
	}
	return (tcc_module->COUNT.reg);
    319c:	68fb      	ldr	r3, [r7, #12]
    319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
    31a0:	0018      	movs	r0, r3
    31a2:	46bd      	mov	sp, r7
    31a4:	b004      	add	sp, #16
    31a6:	bd80      	pop	{r7, pc}

000031a8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    31a8:	b580      	push	{r7, lr}
    31aa:	b082      	sub	sp, #8
    31ac:	af00      	add	r7, sp, #0
    31ae:	0002      	movs	r2, r0
    31b0:	1dfb      	adds	r3, r7, #7
    31b2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    31b4:	4b06      	ldr	r3, [pc, #24]	; (31d0 <system_interrupt_enable+0x28>)
    31b6:	1dfa      	adds	r2, r7, #7
    31b8:	7812      	ldrb	r2, [r2, #0]
    31ba:	0011      	movs	r1, r2
    31bc:	221f      	movs	r2, #31
    31be:	400a      	ands	r2, r1
    31c0:	2101      	movs	r1, #1
    31c2:	4091      	lsls	r1, r2
    31c4:	000a      	movs	r2, r1
    31c6:	601a      	str	r2, [r3, #0]
}
    31c8:	46c0      	nop			; (mov r8, r8)
    31ca:	46bd      	mov	sp, r7
    31cc:	b002      	add	sp, #8
    31ce:	bd80      	pop	{r7, pc}
    31d0:	e000e100 	.word	0xe000e100

000031d4 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b082      	sub	sp, #8
    31d8:	af00      	add	r7, sp, #0
    31da:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    31dc:	4a04      	ldr	r2, [pc, #16]	; (31f0 <_tcc_interrupt_get_interrupt_vector+0x1c>)
    31de:	687b      	ldr	r3, [r7, #4]
    31e0:	18d3      	adds	r3, r2, r3
    31e2:	781b      	ldrb	r3, [r3, #0]
    31e4:	b25b      	sxtb	r3, r3
}
    31e6:	0018      	movs	r0, r3
    31e8:	46bd      	mov	sp, r7
    31ea:	b002      	add	sp, #8
    31ec:	bd80      	pop	{r7, pc}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	2000000c 	.word	0x2000000c

000031f4 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    31f4:	b580      	push	{r7, lr}
    31f6:	b084      	sub	sp, #16
    31f8:	af00      	add	r7, sp, #0
    31fa:	60f8      	str	r0, [r7, #12]
    31fc:	60b9      	str	r1, [r7, #8]
    31fe:	1dfb      	adds	r3, r7, #7
    3200:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3202:	1dfb      	adds	r3, r7, #7
    3204:	781b      	ldrb	r3, [r3, #0]
    3206:	68fa      	ldr	r2, [r7, #12]
    3208:	009b      	lsls	r3, r3, #2
    320a:	18d3      	adds	r3, r2, r3
    320c:	3304      	adds	r3, #4
    320e:	68ba      	ldr	r2, [r7, #8]
    3210:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    3212:	68fb      	ldr	r3, [r7, #12]
    3214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3216:	1dfb      	adds	r3, r7, #7
    3218:	7819      	ldrb	r1, [r3, #0]
    321a:	4b05      	ldr	r3, [pc, #20]	; (3230 <tcc_register_callback+0x3c>)
    321c:	0089      	lsls	r1, r1, #2
    321e:	58cb      	ldr	r3, [r1, r3]
    3220:	431a      	orrs	r2, r3
    3222:	68fb      	ldr	r3, [r7, #12]
    3224:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    3226:	2300      	movs	r3, #0
}
    3228:	0018      	movs	r0, r3
    322a:	46bd      	mov	sp, r7
    322c:	b004      	add	sp, #16
    322e:	bd80      	pop	{r7, pc}
    3230:	000285bc 	.word	0x000285bc

00003234 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    3234:	b580      	push	{r7, lr}
    3236:	b082      	sub	sp, #8
    3238:	af00      	add	r7, sp, #0
    323a:	6078      	str	r0, [r7, #4]
    323c:	000a      	movs	r2, r1
    323e:	1cfb      	adds	r3, r7, #3
    3240:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	681b      	ldr	r3, [r3, #0]
    3246:	0018      	movs	r0, r3
    3248:	f7ff fa5e 	bl	2708 <_tcc_get_inst_index>
    324c:	0003      	movs	r3, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    324e:	0018      	movs	r0, r3
    3250:	f7ff ffc0 	bl	31d4 <_tcc_interrupt_get_interrupt_vector>
    3254:	0003      	movs	r3, r0
    3256:	0018      	movs	r0, r3
    3258:	f7ff ffa6 	bl	31a8 <system_interrupt_enable>
			_tcc_get_inst_index(module->hw)));

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3260:	1cfb      	adds	r3, r7, #3
    3262:	7819      	ldrb	r1, [r3, #0]
    3264:	4b08      	ldr	r3, [pc, #32]	; (3288 <tcc_enable_callback+0x54>)
    3266:	0089      	lsls	r1, r1, #2
    3268:	58cb      	ldr	r3, [r1, r3]
    326a:	431a      	orrs	r2, r3
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    3270:	687b      	ldr	r3, [r7, #4]
    3272:	681b      	ldr	r3, [r3, #0]
    3274:	1cfa      	adds	r2, r7, #3
    3276:	7811      	ldrb	r1, [r2, #0]
    3278:	4a03      	ldr	r2, [pc, #12]	; (3288 <tcc_enable_callback+0x54>)
    327a:	0089      	lsls	r1, r1, #2
    327c:	588a      	ldr	r2, [r1, r2]
    327e:	629a      	str	r2, [r3, #40]	; 0x28
}
    3280:	46c0      	nop			; (mov r8, r8)
    3282:	46bd      	mov	sp, r7
    3284:	b002      	add	sp, #8
    3286:	bd80      	pop	{r7, pc}
    3288:	000285bc 	.word	0x000285bc

0000328c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    328c:	b580      	push	{r7, lr}
    328e:	af00      	add	r7, sp, #0
    3290:	2000      	movs	r0, #0
    3292:	f000 f813 	bl	32bc <_tcc_interrupt_handler>
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	46bd      	mov	sp, r7
    329a:	bd80      	pop	{r7, pc}

0000329c <TCC1_Handler>:
    329c:	b580      	push	{r7, lr}
    329e:	af00      	add	r7, sp, #0
    32a0:	2001      	movs	r0, #1
    32a2:	f000 f80b 	bl	32bc <_tcc_interrupt_handler>
    32a6:	46c0      	nop			; (mov r8, r8)
    32a8:	46bd      	mov	sp, r7
    32aa:	bd80      	pop	{r7, pc}

000032ac <TCC2_Handler>:
    32ac:	b580      	push	{r7, lr}
    32ae:	af00      	add	r7, sp, #0
    32b0:	2002      	movs	r0, #2
    32b2:	f000 f803 	bl	32bc <_tcc_interrupt_handler>
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	46bd      	mov	sp, r7
    32ba:	bd80      	pop	{r7, pc}

000032bc <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    32bc:	b580      	push	{r7, lr}
    32be:	b086      	sub	sp, #24
    32c0:	af00      	add	r7, sp, #0
    32c2:	0002      	movs	r2, r0
    32c4:	1dfb      	adds	r3, r7, #7
    32c6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    32c8:	1dfb      	adds	r3, r7, #7
    32ca:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    32cc:	4b18      	ldr	r3, [pc, #96]	; (3330 <_tcc_interrupt_handler+0x74>)
    32ce:	0092      	lsls	r2, r2, #2
    32d0:	58d3      	ldr	r3, [r2, r3]
    32d2:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    32d4:	693b      	ldr	r3, [r7, #16]
    32d6:	681b      	ldr	r3, [r3, #0]
    32d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    32da:	693b      	ldr	r3, [r7, #16]
    32dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    32de:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    32e0:	693b      	ldr	r3, [r7, #16]
    32e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    32e4:	4013      	ands	r3, r2
    32e6:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    32e8:	2300      	movs	r3, #0
    32ea:	617b      	str	r3, [r7, #20]
    32ec:	e019      	b.n	3322 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    32ee:	4b11      	ldr	r3, [pc, #68]	; (3334 <_tcc_interrupt_handler+0x78>)
    32f0:	697a      	ldr	r2, [r7, #20]
    32f2:	0092      	lsls	r2, r2, #2
    32f4:	58d3      	ldr	r3, [r2, r3]
    32f6:	68fa      	ldr	r2, [r7, #12]
    32f8:	4013      	ands	r3, r2
    32fa:	d00f      	beq.n	331c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    32fc:	693a      	ldr	r2, [r7, #16]
    32fe:	697b      	ldr	r3, [r7, #20]
    3300:	009b      	lsls	r3, r3, #2
    3302:	18d3      	adds	r3, r2, r3
    3304:	3304      	adds	r3, #4
    3306:	681b      	ldr	r3, [r3, #0]
    3308:	693a      	ldr	r2, [r7, #16]
    330a:	0010      	movs	r0, r2
    330c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    330e:	693b      	ldr	r3, [r7, #16]
    3310:	681b      	ldr	r3, [r3, #0]
    3312:	4a08      	ldr	r2, [pc, #32]	; (3334 <_tcc_interrupt_handler+0x78>)
    3314:	6979      	ldr	r1, [r7, #20]
    3316:	0089      	lsls	r1, r1, #2
    3318:	588a      	ldr	r2, [r1, r2]
    331a:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    331c:	697b      	ldr	r3, [r7, #20]
    331e:	3301      	adds	r3, #1
    3320:	617b      	str	r3, [r7, #20]
    3322:	697b      	ldr	r3, [r7, #20]
    3324:	2b0b      	cmp	r3, #11
    3326:	dde2      	ble.n	32ee <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    3328:	46c0      	nop			; (mov r8, r8)
    332a:	46bd      	mov	sp, r7
    332c:	b006      	add	sp, #24
    332e:	bd80      	pop	{r7, pc}
    3330:	200004e4 	.word	0x200004e4
    3334:	000285bc 	.word	0x000285bc

00003338 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3338:	b580      	push	{r7, lr}
    333a:	b082      	sub	sp, #8
    333c:	af00      	add	r7, sp, #0
    333e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	2200      	movs	r2, #0
    3344:	701a      	strb	r2, [r3, #0]
}
    3346:	46c0      	nop			; (mov r8, r8)
    3348:	46bd      	mov	sp, r7
    334a:	b002      	add	sp, #8
    334c:	bd80      	pop	{r7, pc}
    334e:	46c0      	nop			; (mov r8, r8)

00003350 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3350:	b580      	push	{r7, lr}
    3352:	b082      	sub	sp, #8
    3354:	af00      	add	r7, sp, #0
    3356:	0002      	movs	r2, r0
    3358:	6039      	str	r1, [r7, #0]
    335a:	1dfb      	adds	r3, r7, #7
    335c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    335e:	1dfb      	adds	r3, r7, #7
    3360:	781b      	ldrb	r3, [r3, #0]
    3362:	2b01      	cmp	r3, #1
    3364:	d00a      	beq.n	337c <system_apb_clock_set_mask+0x2c>
    3366:	2b02      	cmp	r3, #2
    3368:	d00f      	beq.n	338a <system_apb_clock_set_mask+0x3a>
    336a:	2b00      	cmp	r3, #0
    336c:	d114      	bne.n	3398 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    336e:	4b0e      	ldr	r3, [pc, #56]	; (33a8 <system_apb_clock_set_mask+0x58>)
    3370:	4a0d      	ldr	r2, [pc, #52]	; (33a8 <system_apb_clock_set_mask+0x58>)
    3372:	6991      	ldr	r1, [r2, #24]
    3374:	683a      	ldr	r2, [r7, #0]
    3376:	430a      	orrs	r2, r1
    3378:	619a      	str	r2, [r3, #24]
			break;
    337a:	e00f      	b.n	339c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    337c:	4b0a      	ldr	r3, [pc, #40]	; (33a8 <system_apb_clock_set_mask+0x58>)
    337e:	4a0a      	ldr	r2, [pc, #40]	; (33a8 <system_apb_clock_set_mask+0x58>)
    3380:	69d1      	ldr	r1, [r2, #28]
    3382:	683a      	ldr	r2, [r7, #0]
    3384:	430a      	orrs	r2, r1
    3386:	61da      	str	r2, [r3, #28]
			break;
    3388:	e008      	b.n	339c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    338a:	4b07      	ldr	r3, [pc, #28]	; (33a8 <system_apb_clock_set_mask+0x58>)
    338c:	4a06      	ldr	r2, [pc, #24]	; (33a8 <system_apb_clock_set_mask+0x58>)
    338e:	6a11      	ldr	r1, [r2, #32]
    3390:	683a      	ldr	r2, [r7, #0]
    3392:	430a      	orrs	r2, r1
    3394:	621a      	str	r2, [r3, #32]
			break;
    3396:	e001      	b.n	339c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3398:	2317      	movs	r3, #23
    339a:	e000      	b.n	339e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    339c:	2300      	movs	r3, #0
}
    339e:	0018      	movs	r0, r3
    33a0:	46bd      	mov	sp, r7
    33a2:	b002      	add	sp, #8
    33a4:	bd80      	pop	{r7, pc}
    33a6:	46c0      	nop			; (mov r8, r8)
    33a8:	40000400 	.word	0x40000400

000033ac <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    33ac:	b580      	push	{r7, lr}
    33ae:	b082      	sub	sp, #8
    33b0:	af00      	add	r7, sp, #0
    33b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    33b4:	687b      	ldr	r3, [r7, #4]
    33b6:	2280      	movs	r2, #128	; 0x80
    33b8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    33ba:	687b      	ldr	r3, [r7, #4]
    33bc:	2200      	movs	r2, #0
    33be:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    33c0:	687b      	ldr	r3, [r7, #4]
    33c2:	2201      	movs	r2, #1
    33c4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	2200      	movs	r2, #0
    33ca:	70da      	strb	r2, [r3, #3]
}
    33cc:	46c0      	nop			; (mov r8, r8)
    33ce:	46bd      	mov	sp, r7
    33d0:	b002      	add	sp, #8
    33d2:	bd80      	pop	{r7, pc}

000033d4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    33d4:	b580      	push	{r7, lr}
    33d6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    33d8:	4b05      	ldr	r3, [pc, #20]	; (33f0 <system_is_debugger_present+0x1c>)
    33da:	789b      	ldrb	r3, [r3, #2]
    33dc:	b2db      	uxtb	r3, r3
    33de:	001a      	movs	r2, r3
    33e0:	2302      	movs	r3, #2
    33e2:	4013      	ands	r3, r2
    33e4:	1e5a      	subs	r2, r3, #1
    33e6:	4193      	sbcs	r3, r2
    33e8:	b2db      	uxtb	r3, r3
}
    33ea:	0018      	movs	r0, r3
    33ec:	46bd      	mov	sp, r7
    33ee:	bd80      	pop	{r7, pc}
    33f0:	41002000 	.word	0x41002000

000033f4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    33f4:	b580      	push	{r7, lr}
    33f6:	b084      	sub	sp, #16
    33f8:	af00      	add	r7, sp, #0
    33fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    33fc:	687b      	ldr	r3, [r7, #4]
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3402:	68fb      	ldr	r3, [r7, #12]
    3404:	69db      	ldr	r3, [r3, #28]
    3406:	1e5a      	subs	r2, r3, #1
    3408:	4193      	sbcs	r3, r2
    340a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    340c:	0018      	movs	r0, r3
    340e:	46bd      	mov	sp, r7
    3410:	b004      	add	sp, #16
    3412:	bd80      	pop	{r7, pc}

00003414 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    3414:	b580      	push	{r7, lr}
    3416:	b082      	sub	sp, #8
    3418:	af00      	add	r7, sp, #0
    341a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    341c:	46c0      	nop			; (mov r8, r8)
    341e:	687b      	ldr	r3, [r7, #4]
    3420:	0018      	movs	r0, r3
    3422:	f7ff ffe7 	bl	33f4 <usart_is_syncing>
    3426:	1e03      	subs	r3, r0, #0
    3428:	d1f9      	bne.n	341e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    342a:	46c0      	nop			; (mov r8, r8)
    342c:	46bd      	mov	sp, r7
    342e:	b002      	add	sp, #8
    3430:	bd80      	pop	{r7, pc}
    3432:	46c0      	nop			; (mov r8, r8)

00003434 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    3434:	b5b0      	push	{r4, r5, r7, lr}
    3436:	b08c      	sub	sp, #48	; 0x30
    3438:	af02      	add	r7, sp, #8
    343a:	6078      	str	r0, [r7, #4]
    343c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	681b      	ldr	r3, [r3, #0]
    3442:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3444:	687b      	ldr	r3, [r7, #4]
    3446:	681b      	ldr	r3, [r3, #0]
    3448:	0018      	movs	r0, r3
    344a:	f7fe fd5b 	bl	1f04 <_sercom_get_sercom_inst_index>
    344e:	0003      	movs	r3, r0
    3450:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3452:	697b      	ldr	r3, [r7, #20]
    3454:	3314      	adds	r3, #20
    3456:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    3458:	2300      	movs	r3, #0
    345a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    345c:	2300      	movs	r3, #0
    345e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    3460:	230a      	movs	r3, #10
    3462:	18fb      	adds	r3, r7, r3
    3464:	2200      	movs	r2, #0
    3466:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3468:	231f      	movs	r3, #31
    346a:	18fb      	adds	r3, r7, r3
    346c:	2200      	movs	r2, #0
    346e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3470:	231e      	movs	r3, #30
    3472:	18fb      	adds	r3, r7, r3
    3474:	2210      	movs	r2, #16
    3476:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3478:	683b      	ldr	r3, [r7, #0]
    347a:	8a1b      	ldrh	r3, [r3, #16]
    347c:	2280      	movs	r2, #128	; 0x80
    347e:	01d2      	lsls	r2, r2, #7
    3480:	4293      	cmp	r3, r2
    3482:	d01c      	beq.n	34be <_usart_set_config+0x8a>
    3484:	2280      	movs	r2, #128	; 0x80
    3486:	01d2      	lsls	r2, r2, #7
    3488:	4293      	cmp	r3, r2
    348a:	dc06      	bgt.n	349a <_usart_set_config+0x66>
    348c:	2b00      	cmp	r3, #0
    348e:	d00d      	beq.n	34ac <_usart_set_config+0x78>
    3490:	2280      	movs	r2, #128	; 0x80
    3492:	0192      	lsls	r2, r2, #6
    3494:	4293      	cmp	r3, r2
    3496:	d024      	beq.n	34e2 <_usart_set_config+0xae>
    3498:	e035      	b.n	3506 <_usart_set_config+0xd2>
    349a:	22c0      	movs	r2, #192	; 0xc0
    349c:	01d2      	lsls	r2, r2, #7
    349e:	4293      	cmp	r3, r2
    34a0:	d028      	beq.n	34f4 <_usart_set_config+0xc0>
    34a2:	2280      	movs	r2, #128	; 0x80
    34a4:	0212      	lsls	r2, r2, #8
    34a6:	4293      	cmp	r3, r2
    34a8:	d012      	beq.n	34d0 <_usart_set_config+0x9c>
    34aa:	e02c      	b.n	3506 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    34ac:	231f      	movs	r3, #31
    34ae:	18fb      	adds	r3, r7, r3
    34b0:	2200      	movs	r2, #0
    34b2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    34b4:	231e      	movs	r3, #30
    34b6:	18fb      	adds	r3, r7, r3
    34b8:	2210      	movs	r2, #16
    34ba:	701a      	strb	r2, [r3, #0]
			break;
    34bc:	e023      	b.n	3506 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    34be:	231f      	movs	r3, #31
    34c0:	18fb      	adds	r3, r7, r3
    34c2:	2200      	movs	r2, #0
    34c4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    34c6:	231e      	movs	r3, #30
    34c8:	18fb      	adds	r3, r7, r3
    34ca:	2208      	movs	r2, #8
    34cc:	701a      	strb	r2, [r3, #0]
			break;
    34ce:	e01a      	b.n	3506 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    34d0:	231f      	movs	r3, #31
    34d2:	18fb      	adds	r3, r7, r3
    34d4:	2200      	movs	r2, #0
    34d6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    34d8:	231e      	movs	r3, #30
    34da:	18fb      	adds	r3, r7, r3
    34dc:	2203      	movs	r2, #3
    34de:	701a      	strb	r2, [r3, #0]
			break;
    34e0:	e011      	b.n	3506 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    34e2:	231f      	movs	r3, #31
    34e4:	18fb      	adds	r3, r7, r3
    34e6:	2201      	movs	r2, #1
    34e8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    34ea:	231e      	movs	r3, #30
    34ec:	18fb      	adds	r3, r7, r3
    34ee:	2210      	movs	r2, #16
    34f0:	701a      	strb	r2, [r3, #0]
			break;
    34f2:	e008      	b.n	3506 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    34f4:	231f      	movs	r3, #31
    34f6:	18fb      	adds	r3, r7, r3
    34f8:	2201      	movs	r2, #1
    34fa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    34fc:	231e      	movs	r3, #30
    34fe:	18fb      	adds	r3, r7, r3
    3500:	2208      	movs	r2, #8
    3502:	701a      	strb	r2, [r3, #0]
			break;
    3504:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3506:	683b      	ldr	r3, [r7, #0]
    3508:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    350a:	683b      	ldr	r3, [r7, #0]
    350c:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    350e:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3510:	683b      	ldr	r3, [r7, #0]
    3512:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    3514:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    3516:	683a      	ldr	r2, [r7, #0]
    3518:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    351a:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    351c:	683a      	ldr	r2, [r7, #0]
    351e:	7e12      	ldrb	r2, [r2, #24]
    3520:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    3522:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3524:	683a      	ldr	r2, [r7, #0]
    3526:	2126      	movs	r1, #38	; 0x26
    3528:	5c52      	ldrb	r2, [r2, r1]
    352a:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    352c:	4313      	orrs	r3, r2
    352e:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    3530:	231d      	movs	r3, #29
    3532:	18fb      	adds	r3, r7, r3
    3534:	2200      	movs	r2, #0
    3536:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    3538:	683b      	ldr	r3, [r7, #0]
    353a:	685b      	ldr	r3, [r3, #4]
    353c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    353e:	68fb      	ldr	r3, [r7, #12]
    3540:	2b00      	cmp	r3, #0
    3542:	d01e      	beq.n	3582 <_usart_set_config+0x14e>
    3544:	2280      	movs	r2, #128	; 0x80
    3546:	0552      	lsls	r2, r2, #21
    3548:	4293      	cmp	r3, r2
    354a:	d14f      	bne.n	35ec <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    354c:	683b      	ldr	r3, [r7, #0]
    354e:	2227      	movs	r2, #39	; 0x27
    3550:	5c9b      	ldrb	r3, [r3, r2]
    3552:	2201      	movs	r2, #1
    3554:	4053      	eors	r3, r2
    3556:	b2db      	uxtb	r3, r3
    3558:	2b00      	cmp	r3, #0
    355a:	d046      	beq.n	35ea <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    355c:	683b      	ldr	r3, [r7, #0]
    355e:	6a1d      	ldr	r5, [r3, #32]
    3560:	693b      	ldr	r3, [r7, #16]
    3562:	b2db      	uxtb	r3, r3
    3564:	0018      	movs	r0, r3
    3566:	f001 fb5b 	bl	4c20 <system_gclk_chan_get_hz>
    356a:	0001      	movs	r1, r0
    356c:	231d      	movs	r3, #29
    356e:	18fc      	adds	r4, r7, r3
    3570:	230a      	movs	r3, #10
    3572:	18fb      	adds	r3, r7, r3
    3574:	001a      	movs	r2, r3
    3576:	0028      	movs	r0, r5
    3578:	f7fe fa8c 	bl	1a94 <_sercom_get_sync_baud_val>
    357c:	0003      	movs	r3, r0
    357e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    3580:	e033      	b.n	35ea <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3582:	683b      	ldr	r3, [r7, #0]
    3584:	2227      	movs	r2, #39	; 0x27
    3586:	5c9b      	ldrb	r3, [r3, r2]
    3588:	2b00      	cmp	r3, #0
    358a:	d014      	beq.n	35b6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    358c:	683b      	ldr	r3, [r7, #0]
    358e:	6a18      	ldr	r0, [r3, #32]
    3590:	683b      	ldr	r3, [r7, #0]
    3592:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    3594:	231d      	movs	r3, #29
    3596:	18fc      	adds	r4, r7, r3
    3598:	231f      	movs	r3, #31
    359a:	18fb      	adds	r3, r7, r3
    359c:	781d      	ldrb	r5, [r3, #0]
    359e:	230a      	movs	r3, #10
    35a0:	18fa      	adds	r2, r7, r3
    35a2:	231e      	movs	r3, #30
    35a4:	18fb      	adds	r3, r7, r3
    35a6:	781b      	ldrb	r3, [r3, #0]
    35a8:	9300      	str	r3, [sp, #0]
    35aa:	002b      	movs	r3, r5
    35ac:	f7fe fab0 	bl	1b10 <_sercom_get_async_baud_val>
    35b0:	0003      	movs	r3, r0
    35b2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    35b4:	e01a      	b.n	35ec <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    35b6:	683b      	ldr	r3, [r7, #0]
    35b8:	6a1d      	ldr	r5, [r3, #32]
    35ba:	693b      	ldr	r3, [r7, #16]
    35bc:	b2db      	uxtb	r3, r3
    35be:	0018      	movs	r0, r3
    35c0:	f001 fb2e 	bl	4c20 <system_gclk_chan_get_hz>
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    35c4:	231d      	movs	r3, #29
    35c6:	18fc      	adds	r4, r7, r3
    35c8:	231f      	movs	r3, #31
    35ca:	18fb      	adds	r3, r7, r3
    35cc:	7819      	ldrb	r1, [r3, #0]
    35ce:	230a      	movs	r3, #10
    35d0:	18fa      	adds	r2, r7, r3
    35d2:	231e      	movs	r3, #30
    35d4:	18fb      	adds	r3, r7, r3
    35d6:	781b      	ldrb	r3, [r3, #0]
    35d8:	9300      	str	r3, [sp, #0]
    35da:	000b      	movs	r3, r1
    35dc:	0001      	movs	r1, r0
    35de:	0028      	movs	r0, r5
    35e0:	f7fe fa96 	bl	1b10 <_sercom_get_async_baud_val>
    35e4:	0003      	movs	r3, r0
    35e6:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    35e8:	e000      	b.n	35ec <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    35ea:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    35ec:	231d      	movs	r3, #29
    35ee:	18fb      	adds	r3, r7, r3
    35f0:	781b      	ldrb	r3, [r3, #0]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d003      	beq.n	35fe <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    35f6:	231d      	movs	r3, #29
    35f8:	18fb      	adds	r3, r7, r3
    35fa:	781b      	ldrb	r3, [r3, #0]
    35fc:	e077      	b.n	36ee <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    35fe:	683b      	ldr	r3, [r7, #0]
    3600:	7e5b      	ldrb	r3, [r3, #25]
    3602:	2b00      	cmp	r3, #0
    3604:	d003      	beq.n	360e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3606:	683b      	ldr	r3, [r7, #0]
    3608:	7e9a      	ldrb	r2, [r3, #26]
    360a:	69bb      	ldr	r3, [r7, #24]
    360c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    360e:	687b      	ldr	r3, [r7, #4]
    3610:	0018      	movs	r0, r3
    3612:	f7ff feff 	bl	3414 <_usart_wait_for_sync>

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    3616:	230a      	movs	r3, #10
    3618:	18fb      	adds	r3, r7, r3
    361a:	881a      	ldrh	r2, [r3, #0]
    361c:	69bb      	ldr	r3, [r7, #24]
    361e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    3620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3622:	68fb      	ldr	r3, [r7, #12]
    3624:	4313      	orrs	r3, r2
    3626:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    3628:	683b      	ldr	r3, [r7, #0]
    362a:	2227      	movs	r2, #39	; 0x27
    362c:	5c9b      	ldrb	r3, [r3, r2]
    362e:	2201      	movs	r2, #1
    3630:	4053      	eors	r3, r2
    3632:	b2db      	uxtb	r3, r3
    3634:	2b00      	cmp	r3, #0
    3636:	d003      	beq.n	3640 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    363a:	2204      	movs	r2, #4
    363c:	4313      	orrs	r3, r2
    363e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3640:	683b      	ldr	r3, [r7, #0]
    3642:	7e5b      	ldrb	r3, [r3, #25]
    3644:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3646:	683b      	ldr	r3, [r7, #0]
    3648:	7f1b      	ldrb	r3, [r3, #28]
    364a:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    364c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    364e:	683b      	ldr	r3, [r7, #0]
    3650:	7f5b      	ldrb	r3, [r3, #29]
    3652:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3654:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3656:	683b      	ldr	r3, [r7, #0]
    3658:	2124      	movs	r1, #36	; 0x24
    365a:	5c5b      	ldrb	r3, [r3, r1]
    365c:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    365e:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3660:	683b      	ldr	r3, [r7, #0]
    3662:	2125      	movs	r1, #37	; 0x25
    3664:	5c5b      	ldrb	r3, [r3, r1]
    3666:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3668:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    366a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    366c:	683b      	ldr	r3, [r7, #0]
    366e:	7a9b      	ldrb	r3, [r3, #10]
    3670:	001a      	movs	r2, r3
    3672:	6a3b      	ldr	r3, [r7, #32]
    3674:	4313      	orrs	r3, r2
    3676:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    3678:	683b      	ldr	r3, [r7, #0]
    367a:	7adb      	ldrb	r3, [r3, #11]
    367c:	001a      	movs	r2, r3
    367e:	6a3b      	ldr	r3, [r7, #32]
    3680:	4313      	orrs	r3, r2
    3682:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    3684:	683b      	ldr	r3, [r7, #0]
    3686:	891b      	ldrh	r3, [r3, #8]
    3688:	2bff      	cmp	r3, #255	; 0xff
    368a:	d00b      	beq.n	36a4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    368e:	2280      	movs	r2, #128	; 0x80
    3690:	0452      	lsls	r2, r2, #17
    3692:	4313      	orrs	r3, r2
    3694:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    3696:	683b      	ldr	r3, [r7, #0]
    3698:	891b      	ldrh	r3, [r3, #8]
    369a:	001a      	movs	r2, r3
    369c:	6a3b      	ldr	r3, [r7, #32]
    369e:	4313      	orrs	r3, r2
    36a0:	623b      	str	r3, [r7, #32]
    36a2:	e008      	b.n	36b6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    36a4:	683b      	ldr	r3, [r7, #0]
    36a6:	7edb      	ldrb	r3, [r3, #27]
    36a8:	2b00      	cmp	r3, #0
    36aa:	d004      	beq.n	36b6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    36ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36ae:	2280      	movs	r2, #128	; 0x80
    36b0:	04d2      	lsls	r2, r2, #19
    36b2:	4313      	orrs	r3, r2
    36b4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    36b6:	683b      	ldr	r3, [r7, #0]
    36b8:	222c      	movs	r2, #44	; 0x2c
    36ba:	5c9b      	ldrb	r3, [r3, r2]
    36bc:	2b00      	cmp	r3, #0
    36be:	d103      	bne.n	36c8 <_usart_set_config+0x294>
    36c0:	f7ff fe88 	bl	33d4 <system_is_debugger_present>
    36c4:	1e03      	subs	r3, r0, #0
    36c6:	d003      	beq.n	36d0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    36c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36ca:	2280      	movs	r2, #128	; 0x80
    36cc:	4313      	orrs	r3, r2
    36ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    36d0:	687b      	ldr	r3, [r7, #4]
    36d2:	0018      	movs	r0, r3
    36d4:	f7ff fe9e 	bl	3414 <_usart_wait_for_sync>

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    36d8:	69bb      	ldr	r3, [r7, #24]
    36da:	6a3a      	ldr	r2, [r7, #32]
    36dc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    36de:	687b      	ldr	r3, [r7, #4]
    36e0:	0018      	movs	r0, r3
    36e2:	f7ff fe97 	bl	3414 <_usart_wait_for_sync>

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    36e6:	69bb      	ldr	r3, [r7, #24]
    36e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    36ea:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    36ec:	2300      	movs	r3, #0
}
    36ee:	0018      	movs	r0, r3
    36f0:	46bd      	mov	sp, r7
    36f2:	b00a      	add	sp, #40	; 0x28
    36f4:	bdb0      	pop	{r4, r5, r7, pc}
    36f6:	46c0      	nop			; (mov r8, r8)

000036f8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    36f8:	b590      	push	{r4, r7, lr}
    36fa:	b093      	sub	sp, #76	; 0x4c
    36fc:	af00      	add	r7, sp, #0
    36fe:	60f8      	str	r0, [r7, #12]
    3700:	60b9      	str	r1, [r7, #8]
    3702:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    3704:	233b      	movs	r3, #59	; 0x3b
    3706:	18fb      	adds	r3, r7, r3
    3708:	2200      	movs	r2, #0
    370a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    370c:	68fb      	ldr	r3, [r7, #12]
    370e:	68ba      	ldr	r2, [r7, #8]
    3710:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3712:	68fb      	ldr	r3, [r7, #12]
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3718:	68fb      	ldr	r3, [r7, #12]
    371a:	681b      	ldr	r3, [r3, #0]
    371c:	0018      	movs	r0, r3
    371e:	f7fe fbf1 	bl	1f04 <_sercom_get_sercom_inst_index>
    3722:	0003      	movs	r3, r0
    3724:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3728:	3302      	adds	r3, #2
    372a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    372e:	3314      	adds	r3, #20
    3730:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3734:	681b      	ldr	r3, [r3, #0]
    3736:	2201      	movs	r2, #1
    3738:	4013      	ands	r3, r2
    373a:	d001      	beq.n	3740 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    373c:	2305      	movs	r3, #5
    373e:	e0f6      	b.n	392e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3742:	681b      	ldr	r3, [r3, #0]
    3744:	2202      	movs	r2, #2
    3746:	4013      	ands	r3, r2
    3748:	d001      	beq.n	374e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    374a:	231c      	movs	r3, #28
    374c:	e0ef      	b.n	392e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    374e:	2201      	movs	r2, #1
    3750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3752:	409a      	lsls	r2, r3
    3754:	0013      	movs	r3, r2
    3756:	0019      	movs	r1, r3
    3758:	2002      	movs	r0, #2
    375a:	f7ff fdf9 	bl	3350 <system_apb_clock_set_mask>
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    375e:	2324      	movs	r3, #36	; 0x24
    3760:	18fb      	adds	r3, r7, r3
    3762:	0018      	movs	r0, r3
    3764:	f7ff fde8 	bl	3338 <system_gclk_chan_get_config_defaults>
	gclk_chan_conf.source_generator = config->generator_source;
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	222d      	movs	r2, #45	; 0x2d
    376c:	5c9a      	ldrb	r2, [r3, r2]
    376e:	2324      	movs	r3, #36	; 0x24
    3770:	18fb      	adds	r3, r7, r3
    3772:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3774:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3776:	b2db      	uxtb	r3, r3
    3778:	2224      	movs	r2, #36	; 0x24
    377a:	18ba      	adds	r2, r7, r2
    377c:	0011      	movs	r1, r2
    377e:	0018      	movs	r0, r3
    3780:	f001 f9c6 	bl	4b10 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
    3784:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3786:	b2db      	uxtb	r3, r3
    3788:	0018      	movs	r0, r3
    378a:	f001 f9e1 	bl	4b50 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
    378e:	687b      	ldr	r3, [r7, #4]
    3790:	222d      	movs	r2, #45	; 0x2d
    3792:	5c9b      	ldrb	r3, [r3, r2]
    3794:	2100      	movs	r1, #0
    3796:	0018      	movs	r0, r3
    3798:	f7fe fa96 	bl	1cc8 <sercom_set_gclk_generator>

	/* Set character size */
	module->character_size = config->character_size;
    379c:	687b      	ldr	r3, [r7, #4]
    379e:	7ada      	ldrb	r2, [r3, #11]
    37a0:	68fb      	ldr	r3, [r7, #12]
    37a2:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    37a4:	687b      	ldr	r3, [r7, #4]
    37a6:	2224      	movs	r2, #36	; 0x24
    37a8:	5c9a      	ldrb	r2, [r3, r2]
    37aa:	68fb      	ldr	r3, [r7, #12]
    37ac:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	2225      	movs	r2, #37	; 0x25
    37b2:	5c9a      	ldrb	r2, [r3, r2]
    37b4:	68fb      	ldr	r3, [r7, #12]
    37b6:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    37b8:	687b      	ldr	r3, [r7, #4]
    37ba:	7eda      	ldrb	r2, [r3, #27]
    37bc:	68fb      	ldr	r3, [r7, #12]
    37be:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    37c0:	687b      	ldr	r3, [r7, #4]
    37c2:	7f1a      	ldrb	r2, [r3, #28]
    37c4:	68fb      	ldr	r3, [r7, #12]
    37c6:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    37c8:	233b      	movs	r3, #59	; 0x3b
    37ca:	18fc      	adds	r4, r7, r3
    37cc:	687a      	ldr	r2, [r7, #4]
    37ce:	68fb      	ldr	r3, [r7, #12]
    37d0:	0011      	movs	r1, r2
    37d2:	0018      	movs	r0, r3
    37d4:	f7ff fe2e 	bl	3434 <_usart_set_config>
    37d8:	0003      	movs	r3, r0
    37da:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    37dc:	233b      	movs	r3, #59	; 0x3b
    37de:	18fb      	adds	r3, r7, r3
    37e0:	781b      	ldrb	r3, [r3, #0]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d003      	beq.n	37ee <usart_init+0xf6>
		return status_code;
    37e6:	233b      	movs	r3, #59	; 0x3b
    37e8:	18fb      	adds	r3, r7, r3
    37ea:	781b      	ldrb	r3, [r3, #0]
    37ec:	e09f      	b.n	392e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    37ee:	2320      	movs	r3, #32
    37f0:	18fb      	adds	r3, r7, r3
    37f2:	0018      	movs	r0, r3
    37f4:	f7ff fdda 	bl	33ac <system_pinmux_get_config_defaults>
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    37f8:	2320      	movs	r3, #32
    37fa:	18fb      	adds	r3, r7, r3
    37fc:	2200      	movs	r2, #0
    37fe:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3800:	2320      	movs	r3, #32
    3802:	18fb      	adds	r3, r7, r3
    3804:	2200      	movs	r2, #0
    3806:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    3808:	687b      	ldr	r3, [r7, #4]
    380a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    380c:	2310      	movs	r3, #16
    380e:	18fb      	adds	r3, r7, r3
    3810:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    3816:	2310      	movs	r3, #16
    3818:	18fb      	adds	r3, r7, r3
    381a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    381c:	687b      	ldr	r3, [r7, #4]
    381e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    3820:	2310      	movs	r3, #16
    3822:	18fb      	adds	r3, r7, r3
    3824:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    3826:	687b      	ldr	r3, [r7, #4]
    3828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    382a:	2310      	movs	r3, #16
    382c:	18fb      	adds	r3, r7, r3
    382e:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3830:	2347      	movs	r3, #71	; 0x47
    3832:	18fb      	adds	r3, r7, r3
    3834:	2200      	movs	r2, #0
    3836:	701a      	strb	r2, [r3, #0]
    3838:	e02c      	b.n	3894 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    383a:	2347      	movs	r3, #71	; 0x47
    383c:	18fb      	adds	r3, r7, r3
    383e:	781a      	ldrb	r2, [r3, #0]
    3840:	2310      	movs	r3, #16
    3842:	18fb      	adds	r3, r7, r3
    3844:	0092      	lsls	r2, r2, #2
    3846:	58d3      	ldr	r3, [r2, r3]
    3848:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    384a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    384c:	2b00      	cmp	r3, #0
    384e:	d109      	bne.n	3864 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3850:	2347      	movs	r3, #71	; 0x47
    3852:	18fb      	adds	r3, r7, r3
    3854:	781a      	ldrb	r2, [r3, #0]
    3856:	68bb      	ldr	r3, [r7, #8]
    3858:	0011      	movs	r1, r2
    385a:	0018      	movs	r0, r3
    385c:	f7fe fa74 	bl	1d48 <_sercom_get_default_pad>
    3860:	0003      	movs	r3, r0
    3862:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3866:	3301      	adds	r3, #1
    3868:	d00d      	beq.n	3886 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    386a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    386c:	b2da      	uxtb	r2, r3
    386e:	2320      	movs	r3, #32
    3870:	18fb      	adds	r3, r7, r3
    3872:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3876:	0c1b      	lsrs	r3, r3, #16
    3878:	b2db      	uxtb	r3, r3
    387a:	2220      	movs	r2, #32
    387c:	18ba      	adds	r2, r7, r2
    387e:	0011      	movs	r1, r2
    3880:	0018      	movs	r0, r3
    3882:	f001 faab 	bl	4ddc <system_pinmux_pin_set_config>
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3886:	2347      	movs	r3, #71	; 0x47
    3888:	18fb      	adds	r3, r7, r3
    388a:	781a      	ldrb	r2, [r3, #0]
    388c:	2347      	movs	r3, #71	; 0x47
    388e:	18fb      	adds	r3, r7, r3
    3890:	3201      	adds	r2, #1
    3892:	701a      	strb	r2, [r3, #0]
    3894:	2347      	movs	r3, #71	; 0x47
    3896:	18fb      	adds	r3, r7, r3
    3898:	781b      	ldrb	r3, [r3, #0]
    389a:	2b03      	cmp	r3, #3
    389c:	d9cd      	bls.n	383a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    389e:	2300      	movs	r3, #0
    38a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    38a2:	e00a      	b.n	38ba <usart_init+0x1c2>
		module->callback[i]            = NULL;
    38a4:	68fa      	ldr	r2, [r7, #12]
    38a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38a8:	3302      	adds	r3, #2
    38aa:	009b      	lsls	r3, r3, #2
    38ac:	18d3      	adds	r3, r2, r3
    38ae:	3304      	adds	r3, #4
    38b0:	2200      	movs	r2, #0
    38b2:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    38b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38b6:	3301      	adds	r3, #1
    38b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    38ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38bc:	2b05      	cmp	r3, #5
    38be:	d9f1      	bls.n	38a4 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    38c0:	68fb      	ldr	r3, [r7, #12]
    38c2:	2200      	movs	r2, #0
    38c4:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    38c6:	68fb      	ldr	r3, [r7, #12]
    38c8:	2200      	movs	r2, #0
    38ca:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    38cc:	68fb      	ldr	r3, [r7, #12]
    38ce:	2200      	movs	r2, #0
    38d0:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    38d2:	68fb      	ldr	r3, [r7, #12]
    38d4:	2200      	movs	r2, #0
    38d6:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    38d8:	68fb      	ldr	r3, [r7, #12]
    38da:	2230      	movs	r2, #48	; 0x30
    38dc:	2100      	movs	r1, #0
    38de:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    38e0:	68fb      	ldr	r3, [r7, #12]
    38e2:	2231      	movs	r2, #49	; 0x31
    38e4:	2100      	movs	r1, #0
    38e6:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    38e8:	68fb      	ldr	r3, [r7, #12]
    38ea:	2232      	movs	r2, #50	; 0x32
    38ec:	2100      	movs	r1, #0
    38ee:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    38f0:	68fb      	ldr	r3, [r7, #12]
    38f2:	2233      	movs	r2, #51	; 0x33
    38f4:	2100      	movs	r1, #0
    38f6:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    38f8:	68fb      	ldr	r3, [r7, #12]
    38fa:	681b      	ldr	r3, [r3, #0]
    38fc:	2227      	movs	r2, #39	; 0x27
    38fe:	18bc      	adds	r4, r7, r2
    3900:	0018      	movs	r0, r3
    3902:	f7fe faff 	bl	1f04 <_sercom_get_sercom_inst_index>
    3906:	0003      	movs	r3, r0
    3908:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    390a:	4a0b      	ldr	r2, [pc, #44]	; (3938 <usart_init+0x240>)
    390c:	2327      	movs	r3, #39	; 0x27
    390e:	18fb      	adds	r3, r7, r3
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	0011      	movs	r1, r2
    3914:	0018      	movs	r0, r3
    3916:	f7fe fb27 	bl	1f68 <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
    391a:	2327      	movs	r3, #39	; 0x27
    391c:	18fb      	adds	r3, r7, r3
    391e:	781a      	ldrb	r2, [r3, #0]
    3920:	4b06      	ldr	r3, [pc, #24]	; (393c <usart_init+0x244>)
    3922:	0092      	lsls	r2, r2, #2
    3924:	68f9      	ldr	r1, [r7, #12]
    3926:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    3928:	233b      	movs	r3, #59	; 0x3b
    392a:	18fb      	adds	r3, r7, r3
    392c:	781b      	ldrb	r3, [r3, #0]
}
    392e:	0018      	movs	r0, r3
    3930:	46bd      	mov	sp, r7
    3932:	b013      	add	sp, #76	; 0x4c
    3934:	bd90      	pop	{r4, r7, pc}
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	00003bed 	.word	0x00003bed
    393c:	200004c8 	.word	0x200004c8

00003940 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    3940:	b580      	push	{r7, lr}
    3942:	b084      	sub	sp, #16
    3944:	af00      	add	r7, sp, #0
    3946:	6078      	str	r0, [r7, #4]
    3948:	000a      	movs	r2, r1
    394a:	1cbb      	adds	r3, r7, #2
    394c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	681b      	ldr	r3, [r3, #0]
    3952:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3954:	687b      	ldr	r3, [r7, #4]
    3956:	79db      	ldrb	r3, [r3, #7]
    3958:	2201      	movs	r2, #1
    395a:	4053      	eors	r3, r2
    395c:	b2db      	uxtb	r3, r3
    395e:	2b00      	cmp	r3, #0
    3960:	d001      	beq.n	3966 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    3962:	231c      	movs	r3, #28
    3964:	e017      	b.n	3996 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    396a:	b29b      	uxth	r3, r3
    396c:	2b00      	cmp	r3, #0
    396e:	d001      	beq.n	3974 <usart_write_wait+0x34>
		return STATUS_BUSY;
    3970:	2305      	movs	r3, #5
    3972:	e010      	b.n	3996 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    3974:	687b      	ldr	r3, [r7, #4]
    3976:	0018      	movs	r0, r3
    3978:	f7ff fd4c 	bl	3414 <_usart_wait_for_sync>

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    397c:	68fb      	ldr	r3, [r7, #12]
    397e:	1cba      	adds	r2, r7, #2
    3980:	8812      	ldrh	r2, [r2, #0]
    3982:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    3984:	46c0      	nop			; (mov r8, r8)
    3986:	68fb      	ldr	r3, [r7, #12]
    3988:	7e1b      	ldrb	r3, [r3, #24]
    398a:	b2db      	uxtb	r3, r3
    398c:	001a      	movs	r2, r3
    398e:	2302      	movs	r3, #2
    3990:	4013      	ands	r3, r2
    3992:	d0f8      	beq.n	3986 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    3994:	2300      	movs	r3, #0
}
    3996:	0018      	movs	r0, r3
    3998:	46bd      	mov	sp, r7
    399a:	b004      	add	sp, #16
    399c:	bd80      	pop	{r7, pc}
    399e:	46c0      	nop			; (mov r8, r8)

000039a0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    39a0:	b580      	push	{r7, lr}
    39a2:	b084      	sub	sp, #16
    39a4:	af00      	add	r7, sp, #0
    39a6:	6078      	str	r0, [r7, #4]
    39a8:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    39aa:	687b      	ldr	r3, [r7, #4]
    39ac:	681b      	ldr	r3, [r3, #0]
    39ae:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    39b0:	687b      	ldr	r3, [r7, #4]
    39b2:	799b      	ldrb	r3, [r3, #6]
    39b4:	2201      	movs	r2, #1
    39b6:	4053      	eors	r3, r2
    39b8:	b2db      	uxtb	r3, r3
    39ba:	2b00      	cmp	r3, #0
    39bc:	d001      	beq.n	39c2 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    39be:	231c      	movs	r3, #28
    39c0:	e05e      	b.n	3a80 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    39c2:	687b      	ldr	r3, [r7, #4]
    39c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    39c6:	b29b      	uxth	r3, r3
    39c8:	2b00      	cmp	r3, #0
    39ca:	d001      	beq.n	39d0 <usart_read_wait+0x30>
		return STATUS_BUSY;
    39cc:	2305      	movs	r3, #5
    39ce:	e057      	b.n	3a80 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    39d0:	68fb      	ldr	r3, [r7, #12]
    39d2:	7e1b      	ldrb	r3, [r3, #24]
    39d4:	b2db      	uxtb	r3, r3
    39d6:	001a      	movs	r2, r3
    39d8:	2304      	movs	r3, #4
    39da:	4013      	ands	r3, r2
    39dc:	d101      	bne.n	39e2 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    39de:	2305      	movs	r3, #5
    39e0:	e04e      	b.n	3a80 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	0018      	movs	r0, r3
    39e6:	f7ff fd15 	bl	3414 <_usart_wait_for_sync>

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    39ea:	68fb      	ldr	r3, [r7, #12]
    39ec:	8b5b      	ldrh	r3, [r3, #26]
    39ee:	b29b      	uxth	r3, r3
    39f0:	b2da      	uxtb	r2, r3
    39f2:	230b      	movs	r3, #11
    39f4:	18fb      	adds	r3, r7, r3
    39f6:	213f      	movs	r1, #63	; 0x3f
    39f8:	400a      	ands	r2, r1
    39fa:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    39fc:	230b      	movs	r3, #11
    39fe:	18fb      	adds	r3, r7, r3
    3a00:	781b      	ldrb	r3, [r3, #0]
    3a02:	2b00      	cmp	r3, #0
    3a04:	d036      	beq.n	3a74 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    3a06:	230b      	movs	r3, #11
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	781b      	ldrb	r3, [r3, #0]
    3a0c:	2202      	movs	r2, #2
    3a0e:	4013      	ands	r3, r2
    3a10:	d004      	beq.n	3a1c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    3a12:	68fb      	ldr	r3, [r7, #12]
    3a14:	2202      	movs	r2, #2
    3a16:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    3a18:	231a      	movs	r3, #26
    3a1a:	e031      	b.n	3a80 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3a1c:	230b      	movs	r3, #11
    3a1e:	18fb      	adds	r3, r7, r3
    3a20:	781b      	ldrb	r3, [r3, #0]
    3a22:	2204      	movs	r2, #4
    3a24:	4013      	ands	r3, r2
    3a26:	d004      	beq.n	3a32 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3a28:	68fb      	ldr	r3, [r7, #12]
    3a2a:	2204      	movs	r2, #4
    3a2c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    3a2e:	231e      	movs	r3, #30
    3a30:	e026      	b.n	3a80 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3a32:	230b      	movs	r3, #11
    3a34:	18fb      	adds	r3, r7, r3
    3a36:	781b      	ldrb	r3, [r3, #0]
    3a38:	2201      	movs	r2, #1
    3a3a:	4013      	ands	r3, r2
    3a3c:	d004      	beq.n	3a48 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3a3e:	68fb      	ldr	r3, [r7, #12]
    3a40:	2201      	movs	r2, #1
    3a42:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    3a44:	2313      	movs	r3, #19
    3a46:	e01b      	b.n	3a80 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    3a48:	230b      	movs	r3, #11
    3a4a:	18fb      	adds	r3, r7, r3
    3a4c:	781b      	ldrb	r3, [r3, #0]
    3a4e:	2210      	movs	r2, #16
    3a50:	4013      	ands	r3, r2
    3a52:	d004      	beq.n	3a5e <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    3a54:	68fb      	ldr	r3, [r7, #12]
    3a56:	2210      	movs	r2, #16
    3a58:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    3a5a:	2342      	movs	r3, #66	; 0x42
    3a5c:	e010      	b.n	3a80 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    3a5e:	230b      	movs	r3, #11
    3a60:	18fb      	adds	r3, r7, r3
    3a62:	781b      	ldrb	r3, [r3, #0]
    3a64:	2220      	movs	r2, #32
    3a66:	4013      	ands	r3, r2
    3a68:	d004      	beq.n	3a74 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3a6a:	68fb      	ldr	r3, [r7, #12]
    3a6c:	2220      	movs	r2, #32
    3a6e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    3a70:	2341      	movs	r3, #65	; 0x41
    3a72:	e005      	b.n	3a80 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    3a74:	68fb      	ldr	r3, [r7, #12]
    3a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3a78:	b29a      	uxth	r2, r3
    3a7a:	683b      	ldr	r3, [r7, #0]
    3a7c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    3a7e:	2300      	movs	r3, #0
}
    3a80:	0018      	movs	r0, r3
    3a82:	46bd      	mov	sp, r7
    3a84:	b004      	add	sp, #16
    3a86:	bd80      	pop	{r7, pc}

00003a88 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    3a88:	b580      	push	{r7, lr}
    3a8a:	b08a      	sub	sp, #40	; 0x28
    3a8c:	af00      	add	r7, sp, #0
    3a8e:	60f8      	str	r0, [r7, #12]
    3a90:	60b9      	str	r1, [r7, #8]
    3a92:	1dbb      	adds	r3, r7, #6
    3a94:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    3a96:	1dbb      	adds	r3, r7, #6
    3a98:	881b      	ldrh	r3, [r3, #0]
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d101      	bne.n	3aa2 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    3a9e:	2317      	movs	r3, #23
    3aa0:	e07e      	b.n	3ba0 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3aa2:	68fb      	ldr	r3, [r7, #12]
    3aa4:	79db      	ldrb	r3, [r3, #7]
    3aa6:	2201      	movs	r2, #1
    3aa8:	4053      	eors	r3, r2
    3aaa:	b2db      	uxtb	r3, r3
    3aac:	2b00      	cmp	r3, #0
    3aae:	d001      	beq.n	3ab4 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    3ab0:	231c      	movs	r3, #28
    3ab2:	e075      	b.n	3ba0 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ab4:	68fb      	ldr	r3, [r7, #12]
    3ab6:	681b      	ldr	r3, [r3, #0]
    3ab8:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    3aba:	68fb      	ldr	r3, [r7, #12]
    3abc:	0018      	movs	r0, r3
    3abe:	f7ff fca9 	bl	3414 <_usart_wait_for_sync>

	uint16_t tx_pos = 0;
    3ac2:	2326      	movs	r3, #38	; 0x26
    3ac4:	18fb      	adds	r3, r7, r3
    3ac6:	2200      	movs	r2, #0
    3ac8:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    3aca:	e048      	b.n	3b5e <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    3acc:	2300      	movs	r3, #0
    3ace:	623b      	str	r3, [r7, #32]
    3ad0:	e00f      	b.n	3af2 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    3ad2:	697b      	ldr	r3, [r7, #20]
    3ad4:	7e1b      	ldrb	r3, [r3, #24]
    3ad6:	b2db      	uxtb	r3, r3
    3ad8:	001a      	movs	r2, r3
    3ada:	2301      	movs	r3, #1
    3adc:	4013      	ands	r3, r2
    3ade:	d10d      	bne.n	3afc <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    3ae0:	6a3b      	ldr	r3, [r7, #32]
    3ae2:	4a31      	ldr	r2, [pc, #196]	; (3ba8 <usart_write_buffer_wait+0x120>)
    3ae4:	4293      	cmp	r3, r2
    3ae6:	d101      	bne.n	3aec <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    3ae8:	2312      	movs	r3, #18
    3aea:	e059      	b.n	3ba0 <usart_write_buffer_wait+0x118>

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    3aec:	6a3b      	ldr	r3, [r7, #32]
    3aee:	3301      	adds	r3, #1
    3af0:	623b      	str	r3, [r7, #32]
    3af2:	6a3b      	ldr	r3, [r7, #32]
    3af4:	4a2c      	ldr	r2, [pc, #176]	; (3ba8 <usart_write_buffer_wait+0x120>)
    3af6:	4293      	cmp	r3, r2
    3af8:	d9eb      	bls.n	3ad2 <usart_write_buffer_wait+0x4a>
    3afa:	e000      	b.n	3afe <usart_write_buffer_wait+0x76>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
    3afc:	46c0      	nop			; (mov r8, r8)
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    3afe:	2326      	movs	r3, #38	; 0x26
    3b00:	18fb      	adds	r3, r7, r3
    3b02:	881b      	ldrh	r3, [r3, #0]
    3b04:	2226      	movs	r2, #38	; 0x26
    3b06:	18ba      	adds	r2, r7, r2
    3b08:	1c59      	adds	r1, r3, #1
    3b0a:	8011      	strh	r1, [r2, #0]
    3b0c:	001a      	movs	r2, r3
    3b0e:	68bb      	ldr	r3, [r7, #8]
    3b10:	189b      	adds	r3, r3, r2
    3b12:	781a      	ldrb	r2, [r3, #0]
    3b14:	231e      	movs	r3, #30
    3b16:	18fb      	adds	r3, r7, r3
    3b18:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3b1a:	68fb      	ldr	r3, [r7, #12]
    3b1c:	795b      	ldrb	r3, [r3, #5]
    3b1e:	2b01      	cmp	r3, #1
    3b20:	d115      	bne.n	3b4e <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    3b22:	2326      	movs	r3, #38	; 0x26
    3b24:	18fb      	adds	r3, r7, r3
    3b26:	881b      	ldrh	r3, [r3, #0]
    3b28:	2226      	movs	r2, #38	; 0x26
    3b2a:	18ba      	adds	r2, r7, r2
    3b2c:	1c59      	adds	r1, r3, #1
    3b2e:	8011      	strh	r1, [r2, #0]
    3b30:	001a      	movs	r2, r3
    3b32:	68bb      	ldr	r3, [r7, #8]
    3b34:	189b      	adds	r3, r3, r2
    3b36:	781b      	ldrb	r3, [r3, #0]
    3b38:	021b      	lsls	r3, r3, #8
    3b3a:	b21a      	sxth	r2, r3
    3b3c:	231e      	movs	r3, #30
    3b3e:	18fb      	adds	r3, r7, r3
    3b40:	2100      	movs	r1, #0
    3b42:	5e5b      	ldrsh	r3, [r3, r1]
    3b44:	4313      	orrs	r3, r2
    3b46:	b21a      	sxth	r2, r3
    3b48:	231e      	movs	r3, #30
    3b4a:	18fb      	adds	r3, r7, r3
    3b4c:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    3b4e:	231e      	movs	r3, #30
    3b50:	18fb      	adds	r3, r7, r3
    3b52:	881a      	ldrh	r2, [r3, #0]
    3b54:	68fb      	ldr	r3, [r7, #12]
    3b56:	0011      	movs	r1, r2
    3b58:	0018      	movs	r0, r3
    3b5a:	f7ff fef1 	bl	3940 <usart_write_wait>
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    3b5e:	1dbb      	adds	r3, r7, #6
    3b60:	881b      	ldrh	r3, [r3, #0]
    3b62:	1dba      	adds	r2, r7, #6
    3b64:	1e59      	subs	r1, r3, #1
    3b66:	8011      	strh	r1, [r2, #0]
    3b68:	2b00      	cmp	r3, #0
    3b6a:	d1af      	bne.n	3acc <usart_write_buffer_wait+0x44>
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    3b6c:	2300      	movs	r3, #0
    3b6e:	61bb      	str	r3, [r7, #24]
    3b70:	e00f      	b.n	3b92 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    3b72:	697b      	ldr	r3, [r7, #20]
    3b74:	7e1b      	ldrb	r3, [r3, #24]
    3b76:	b2db      	uxtb	r3, r3
    3b78:	001a      	movs	r2, r3
    3b7a:	2302      	movs	r3, #2
    3b7c:	4013      	ands	r3, r2
    3b7e:	d10d      	bne.n	3b9c <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    3b80:	69bb      	ldr	r3, [r7, #24]
    3b82:	4a09      	ldr	r2, [pc, #36]	; (3ba8 <usart_write_buffer_wait+0x120>)
    3b84:	4293      	cmp	r3, r2
    3b86:	d101      	bne.n	3b8c <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    3b88:	2312      	movs	r3, #18
    3b8a:	e009      	b.n	3ba0 <usart_write_buffer_wait+0x118>
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    3b8c:	69bb      	ldr	r3, [r7, #24]
    3b8e:	3301      	adds	r3, #1
    3b90:	61bb      	str	r3, [r7, #24]
    3b92:	69bb      	ldr	r3, [r7, #24]
    3b94:	4a04      	ldr	r2, [pc, #16]	; (3ba8 <usart_write_buffer_wait+0x120>)
    3b96:	4293      	cmp	r3, r2
    3b98:	d9eb      	bls.n	3b72 <usart_write_buffer_wait+0xea>
    3b9a:	e000      	b.n	3b9e <usart_write_buffer_wait+0x116>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
    3b9c:	46c0      	nop			; (mov r8, r8)
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    3b9e:	2300      	movs	r3, #0
}
    3ba0:	0018      	movs	r0, r3
    3ba2:	46bd      	mov	sp, r7
    3ba4:	b00a      	add	sp, #40	; 0x28
    3ba6:	bd80      	pop	{r7, pc}
    3ba8:	0000ffff 	.word	0x0000ffff

00003bac <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    3bac:	b580      	push	{r7, lr}
    3bae:	b084      	sub	sp, #16
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3bb4:	687b      	ldr	r3, [r7, #4]
    3bb6:	681b      	ldr	r3, [r3, #0]
    3bb8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3bba:	68fb      	ldr	r3, [r7, #12]
    3bbc:	69db      	ldr	r3, [r3, #28]
    3bbe:	1e5a      	subs	r2, r3, #1
    3bc0:	4193      	sbcs	r3, r2
    3bc2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    3bc4:	0018      	movs	r0, r3
    3bc6:	46bd      	mov	sp, r7
    3bc8:	b004      	add	sp, #16
    3bca:	bd80      	pop	{r7, pc}

00003bcc <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    3bcc:	b580      	push	{r7, lr}
    3bce:	b082      	sub	sp, #8
    3bd0:	af00      	add	r7, sp, #0
    3bd2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3bd4:	46c0      	nop			; (mov r8, r8)
    3bd6:	687b      	ldr	r3, [r7, #4]
    3bd8:	0018      	movs	r0, r3
    3bda:	f7ff ffe7 	bl	3bac <usart_is_syncing>
    3bde:	1e03      	subs	r3, r0, #0
    3be0:	d1f9      	bne.n	3bd6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    3be2:	46c0      	nop			; (mov r8, r8)
    3be4:	46bd      	mov	sp, r7
    3be6:	b002      	add	sp, #8
    3be8:	bd80      	pop	{r7, pc}
    3bea:	46c0      	nop			; (mov r8, r8)

00003bec <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    3bec:	b580      	push	{r7, lr}
    3bee:	b088      	sub	sp, #32
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	0002      	movs	r2, r0
    3bf4:	1dfb      	adds	r3, r7, #7
    3bf6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    3bf8:	1dfb      	adds	r3, r7, #7
    3bfa:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    3bfc:	4ba3      	ldr	r3, [pc, #652]	; (3e8c <_usart_interrupt_handler+0x2a0>)
    3bfe:	0092      	lsls	r2, r2, #2
    3c00:	58d3      	ldr	r3, [r2, r3]
    3c02:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    3c04:	69bb      	ldr	r3, [r7, #24]
    3c06:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    3c08:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    3c0a:	69bb      	ldr	r3, [r7, #24]
    3c0c:	0018      	movs	r0, r3
    3c0e:	f7ff ffdd 	bl	3bcc <_usart_wait_for_sync>

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    3c12:	697b      	ldr	r3, [r7, #20]
    3c14:	7e1b      	ldrb	r3, [r3, #24]
    3c16:	b2da      	uxtb	r2, r3
    3c18:	2312      	movs	r3, #18
    3c1a:	18fb      	adds	r3, r7, r3
    3c1c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    3c1e:	697b      	ldr	r3, [r7, #20]
    3c20:	7d9b      	ldrb	r3, [r3, #22]
    3c22:	b2db      	uxtb	r3, r3
    3c24:	b29a      	uxth	r2, r3
    3c26:	2312      	movs	r3, #18
    3c28:	18fb      	adds	r3, r7, r3
    3c2a:	2112      	movs	r1, #18
    3c2c:	1879      	adds	r1, r7, r1
    3c2e:	8809      	ldrh	r1, [r1, #0]
    3c30:	400a      	ands	r2, r1
    3c32:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    3c34:	69bb      	ldr	r3, [r7, #24]
    3c36:	2230      	movs	r2, #48	; 0x30
    3c38:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    3c3a:	69ba      	ldr	r2, [r7, #24]
    3c3c:	2131      	movs	r1, #49	; 0x31
    3c3e:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    3c40:	4013      	ands	r3, r2
    3c42:	b2da      	uxtb	r2, r3
    3c44:	2310      	movs	r3, #16
    3c46:	18fb      	adds	r3, r7, r3
    3c48:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    3c4a:	2312      	movs	r3, #18
    3c4c:	18fb      	adds	r3, r7, r3
    3c4e:	881b      	ldrh	r3, [r3, #0]
    3c50:	2201      	movs	r2, #1
    3c52:	4013      	ands	r3, r2
    3c54:	d044      	beq.n	3ce0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    3c56:	69bb      	ldr	r3, [r7, #24]
    3c58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    3c5a:	b29b      	uxth	r3, r3
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	d03c      	beq.n	3cda <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3c60:	69bb      	ldr	r3, [r7, #24]
    3c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c64:	781b      	ldrb	r3, [r3, #0]
    3c66:	b2da      	uxtb	r2, r3
    3c68:	231c      	movs	r3, #28
    3c6a:	18fb      	adds	r3, r7, r3
    3c6c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    3c6e:	69bb      	ldr	r3, [r7, #24]
    3c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c72:	1c5a      	adds	r2, r3, #1
    3c74:	69bb      	ldr	r3, [r7, #24]
    3c76:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3c78:	69bb      	ldr	r3, [r7, #24]
    3c7a:	795b      	ldrb	r3, [r3, #5]
    3c7c:	2b01      	cmp	r3, #1
    3c7e:	d113      	bne.n	3ca8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    3c80:	69bb      	ldr	r3, [r7, #24]
    3c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c84:	781b      	ldrb	r3, [r3, #0]
    3c86:	b2db      	uxtb	r3, r3
    3c88:	021b      	lsls	r3, r3, #8
    3c8a:	b21a      	sxth	r2, r3
    3c8c:	231c      	movs	r3, #28
    3c8e:	18fb      	adds	r3, r7, r3
    3c90:	2100      	movs	r1, #0
    3c92:	5e5b      	ldrsh	r3, [r3, r1]
    3c94:	4313      	orrs	r3, r2
    3c96:	b21a      	sxth	r2, r3
    3c98:	231c      	movs	r3, #28
    3c9a:	18fb      	adds	r3, r7, r3
    3c9c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    3c9e:	69bb      	ldr	r3, [r7, #24]
    3ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ca2:	1c5a      	adds	r2, r3, #1
    3ca4:	69bb      	ldr	r3, [r7, #24]
    3ca6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    3ca8:	231c      	movs	r3, #28
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	881b      	ldrh	r3, [r3, #0]
    3cae:	05db      	lsls	r3, r3, #23
    3cb0:	0ddb      	lsrs	r3, r3, #23
    3cb2:	b29a      	uxth	r2, r3
    3cb4:	697b      	ldr	r3, [r7, #20]
    3cb6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    3cb8:	69bb      	ldr	r3, [r7, #24]
    3cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    3cbc:	b29b      	uxth	r3, r3
    3cbe:	3b01      	subs	r3, #1
    3cc0:	b29b      	uxth	r3, r3
    3cc2:	69ba      	ldr	r2, [r7, #24]
    3cc4:	1c19      	adds	r1, r3, #0
    3cc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
    3cc8:	2b00      	cmp	r3, #0
    3cca:	d109      	bne.n	3ce0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3ccc:	697b      	ldr	r3, [r7, #20]
    3cce:	2201      	movs	r2, #1
    3cd0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    3cd2:	697b      	ldr	r3, [r7, #20]
    3cd4:	2202      	movs	r2, #2
    3cd6:	759a      	strb	r2, [r3, #22]
    3cd8:	e002      	b.n	3ce0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3cda:	697b      	ldr	r3, [r7, #20]
    3cdc:	2201      	movs	r2, #1
    3cde:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    3ce0:	2312      	movs	r3, #18
    3ce2:	18fb      	adds	r3, r7, r3
    3ce4:	881b      	ldrh	r3, [r3, #0]
    3ce6:	2202      	movs	r2, #2
    3ce8:	4013      	ands	r3, r2
    3cea:	d011      	beq.n	3d10 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    3cec:	697b      	ldr	r3, [r7, #20]
    3cee:	2202      	movs	r2, #2
    3cf0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    3cf2:	69bb      	ldr	r3, [r7, #24]
    3cf4:	2233      	movs	r2, #51	; 0x33
    3cf6:	2100      	movs	r1, #0
    3cf8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    3cfa:	2310      	movs	r3, #16
    3cfc:	18fb      	adds	r3, r7, r3
    3cfe:	881b      	ldrh	r3, [r3, #0]
    3d00:	2201      	movs	r2, #1
    3d02:	4013      	ands	r3, r2
    3d04:	d004      	beq.n	3d10 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    3d06:	69bb      	ldr	r3, [r7, #24]
    3d08:	68db      	ldr	r3, [r3, #12]
    3d0a:	69ba      	ldr	r2, [r7, #24]
    3d0c:	0010      	movs	r0, r2
    3d0e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3d10:	2312      	movs	r3, #18
    3d12:	18fb      	adds	r3, r7, r3
    3d14:	881b      	ldrh	r3, [r3, #0]
    3d16:	2204      	movs	r2, #4
    3d18:	4013      	ands	r3, r2
    3d1a:	d100      	bne.n	3d1e <_usart_interrupt_handler+0x132>
    3d1c:	e0bb      	b.n	3e96 <_usart_interrupt_handler+0x2aa>

		if (module->remaining_rx_buffer_length) {
    3d1e:	69bb      	ldr	r3, [r7, #24]
    3d20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    3d22:	b29b      	uxth	r3, r3
    3d24:	2b00      	cmp	r3, #0
    3d26:	d100      	bne.n	3d2a <_usart_interrupt_handler+0x13e>
    3d28:	e0b2      	b.n	3e90 <_usart_interrupt_handler+0x2a4>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3d2a:	697b      	ldr	r3, [r7, #20]
    3d2c:	8b5b      	ldrh	r3, [r3, #26]
    3d2e:	b29b      	uxth	r3, r3
    3d30:	b2da      	uxtb	r2, r3
    3d32:	231f      	movs	r3, #31
    3d34:	18fb      	adds	r3, r7, r3
    3d36:	213f      	movs	r1, #63	; 0x3f
    3d38:	400a      	ands	r2, r1
    3d3a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3d3c:	231f      	movs	r3, #31
    3d3e:	18fb      	adds	r3, r7, r3
    3d40:	781b      	ldrb	r3, [r3, #0]
    3d42:	2208      	movs	r2, #8
    3d44:	4013      	ands	r3, r2
    3d46:	d007      	beq.n	3d58 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    3d48:	231f      	movs	r3, #31
    3d4a:	18fb      	adds	r3, r7, r3
    3d4c:	221f      	movs	r2, #31
    3d4e:	18ba      	adds	r2, r7, r2
    3d50:	7812      	ldrb	r2, [r2, #0]
    3d52:	2108      	movs	r1, #8
    3d54:	438a      	bics	r2, r1
    3d56:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3d58:	231f      	movs	r3, #31
    3d5a:	18fb      	adds	r3, r7, r3
    3d5c:	781b      	ldrb	r3, [r3, #0]
    3d5e:	2b00      	cmp	r3, #0
    3d60:	d050      	beq.n	3e04 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3d62:	231f      	movs	r3, #31
    3d64:	18fb      	adds	r3, r7, r3
    3d66:	781b      	ldrb	r3, [r3, #0]
    3d68:	2202      	movs	r2, #2
    3d6a:	4013      	ands	r3, r2
    3d6c:	d007      	beq.n	3d7e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3d6e:	69bb      	ldr	r3, [r7, #24]
    3d70:	2232      	movs	r2, #50	; 0x32
    3d72:	211a      	movs	r1, #26
    3d74:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    3d76:	697b      	ldr	r3, [r7, #20]
    3d78:	2202      	movs	r2, #2
    3d7a:	835a      	strh	r2, [r3, #26]
    3d7c:	e036      	b.n	3dec <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3d7e:	231f      	movs	r3, #31
    3d80:	18fb      	adds	r3, r7, r3
    3d82:	781b      	ldrb	r3, [r3, #0]
    3d84:	2204      	movs	r2, #4
    3d86:	4013      	ands	r3, r2
    3d88:	d007      	beq.n	3d9a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    3d8a:	69bb      	ldr	r3, [r7, #24]
    3d8c:	2232      	movs	r2, #50	; 0x32
    3d8e:	211e      	movs	r1, #30
    3d90:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3d92:	697b      	ldr	r3, [r7, #20]
    3d94:	2204      	movs	r2, #4
    3d96:	835a      	strh	r2, [r3, #26]
    3d98:	e028      	b.n	3dec <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3d9a:	231f      	movs	r3, #31
    3d9c:	18fb      	adds	r3, r7, r3
    3d9e:	781b      	ldrb	r3, [r3, #0]
    3da0:	2201      	movs	r2, #1
    3da2:	4013      	ands	r3, r2
    3da4:	d007      	beq.n	3db6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    3da6:	69bb      	ldr	r3, [r7, #24]
    3da8:	2232      	movs	r2, #50	; 0x32
    3daa:	2113      	movs	r1, #19
    3dac:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3dae:	697b      	ldr	r3, [r7, #20]
    3db0:	2201      	movs	r2, #1
    3db2:	835a      	strh	r2, [r3, #26]
    3db4:	e01a      	b.n	3dec <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    3db6:	231f      	movs	r3, #31
    3db8:	18fb      	adds	r3, r7, r3
    3dba:	781b      	ldrb	r3, [r3, #0]
    3dbc:	2210      	movs	r2, #16
    3dbe:	4013      	ands	r3, r2
    3dc0:	d007      	beq.n	3dd2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    3dc2:	69bb      	ldr	r3, [r7, #24]
    3dc4:	2232      	movs	r2, #50	; 0x32
    3dc6:	2142      	movs	r1, #66	; 0x42
    3dc8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    3dca:	697b      	ldr	r3, [r7, #20]
    3dcc:	2210      	movs	r2, #16
    3dce:	835a      	strh	r2, [r3, #26]
    3dd0:	e00c      	b.n	3dec <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    3dd2:	231f      	movs	r3, #31
    3dd4:	18fb      	adds	r3, r7, r3
    3dd6:	781b      	ldrb	r3, [r3, #0]
    3dd8:	2220      	movs	r2, #32
    3dda:	4013      	ands	r3, r2
    3ddc:	d006      	beq.n	3dec <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    3dde:	69bb      	ldr	r3, [r7, #24]
    3de0:	2232      	movs	r2, #50	; 0x32
    3de2:	2141      	movs	r1, #65	; 0x41
    3de4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3de6:	697b      	ldr	r3, [r7, #20]
    3de8:	2220      	movs	r2, #32
    3dea:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    3dec:	2310      	movs	r3, #16
    3dee:	18fb      	adds	r3, r7, r3
    3df0:	881b      	ldrh	r3, [r3, #0]
    3df2:	2204      	movs	r2, #4
    3df4:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3df6:	d04e      	beq.n	3e96 <_usart_interrupt_handler+0x2aa>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3df8:	69bb      	ldr	r3, [r7, #24]
    3dfa:	695b      	ldr	r3, [r3, #20]
    3dfc:	69ba      	ldr	r2, [r7, #24]
    3dfe:	0010      	movs	r0, r2
    3e00:	4798      	blx	r3
    3e02:	e048      	b.n	3e96 <_usart_interrupt_handler+0x2aa>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3e04:	697b      	ldr	r3, [r7, #20]
    3e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3e08:	b29a      	uxth	r2, r3
    3e0a:	230e      	movs	r3, #14
    3e0c:	18fb      	adds	r3, r7, r3
    3e0e:	05d2      	lsls	r2, r2, #23
    3e10:	0dd2      	lsrs	r2, r2, #23
    3e12:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3e14:	69bb      	ldr	r3, [r7, #24]
    3e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e18:	220e      	movs	r2, #14
    3e1a:	18ba      	adds	r2, r7, r2
    3e1c:	8812      	ldrh	r2, [r2, #0]
    3e1e:	b2d2      	uxtb	r2, r2
    3e20:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    3e22:	69bb      	ldr	r3, [r7, #24]
    3e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e26:	1c5a      	adds	r2, r3, #1
    3e28:	69bb      	ldr	r3, [r7, #24]
    3e2a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3e2c:	69bb      	ldr	r3, [r7, #24]
    3e2e:	795b      	ldrb	r3, [r3, #5]
    3e30:	2b01      	cmp	r3, #1
    3e32:	d10d      	bne.n	3e50 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3e34:	69bb      	ldr	r3, [r7, #24]
    3e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e38:	220e      	movs	r2, #14
    3e3a:	18ba      	adds	r2, r7, r2
    3e3c:	8812      	ldrh	r2, [r2, #0]
    3e3e:	0a12      	lsrs	r2, r2, #8
    3e40:	b292      	uxth	r2, r2
    3e42:	b2d2      	uxtb	r2, r2
    3e44:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    3e46:	69bb      	ldr	r3, [r7, #24]
    3e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e4a:	1c5a      	adds	r2, r3, #1
    3e4c:	69bb      	ldr	r3, [r7, #24]
    3e4e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    3e50:	69bb      	ldr	r3, [r7, #24]
    3e52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    3e54:	b29b      	uxth	r3, r3
    3e56:	3b01      	subs	r3, #1
    3e58:	b29b      	uxth	r3, r3
    3e5a:	69ba      	ldr	r2, [r7, #24]
    3e5c:	1c19      	adds	r1, r3, #0
    3e5e:	8591      	strh	r1, [r2, #44]	; 0x2c
    3e60:	2b00      	cmp	r3, #0
    3e62:	d118      	bne.n	3e96 <_usart_interrupt_handler+0x2aa>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3e64:	697b      	ldr	r3, [r7, #20]
    3e66:	2204      	movs	r2, #4
    3e68:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    3e6a:	69bb      	ldr	r3, [r7, #24]
    3e6c:	2232      	movs	r2, #50	; 0x32
    3e6e:	2100      	movs	r1, #0
    3e70:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    3e72:	2310      	movs	r3, #16
    3e74:	18fb      	adds	r3, r7, r3
    3e76:	881b      	ldrh	r3, [r3, #0]
    3e78:	2202      	movs	r2, #2
    3e7a:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    3e7c:	d00b      	beq.n	3e96 <_usart_interrupt_handler+0x2aa>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    3e7e:	69bb      	ldr	r3, [r7, #24]
    3e80:	691b      	ldr	r3, [r3, #16]
    3e82:	69ba      	ldr	r2, [r7, #24]
    3e84:	0010      	movs	r0, r2
    3e86:	4798      	blx	r3
    3e88:	e005      	b.n	3e96 <_usart_interrupt_handler+0x2aa>
    3e8a:	46c0      	nop			; (mov r8, r8)
    3e8c:	200004c8 	.word	0x200004c8
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3e90:	697b      	ldr	r3, [r7, #20]
    3e92:	2204      	movs	r2, #4
    3e94:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    3e96:	2312      	movs	r3, #18
    3e98:	18fb      	adds	r3, r7, r3
    3e9a:	881b      	ldrh	r3, [r3, #0]
    3e9c:	2210      	movs	r2, #16
    3e9e:	4013      	ands	r3, r2
    3ea0:	d010      	beq.n	3ec4 <_usart_interrupt_handler+0x2d8>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    3ea2:	697b      	ldr	r3, [r7, #20]
    3ea4:	2210      	movs	r2, #16
    3ea6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    3ea8:	697b      	ldr	r3, [r7, #20]
    3eaa:	2210      	movs	r2, #16
    3eac:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    3eae:	2310      	movs	r3, #16
    3eb0:	18fb      	adds	r3, r7, r3
    3eb2:	881b      	ldrh	r3, [r3, #0]
    3eb4:	2210      	movs	r2, #16
    3eb6:	4013      	ands	r3, r2
    3eb8:	d004      	beq.n	3ec4 <_usart_interrupt_handler+0x2d8>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    3eba:	69bb      	ldr	r3, [r7, #24]
    3ebc:	69db      	ldr	r3, [r3, #28]
    3ebe:	69ba      	ldr	r2, [r7, #24]
    3ec0:	0010      	movs	r0, r2
    3ec2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    3ec4:	2312      	movs	r3, #18
    3ec6:	18fb      	adds	r3, r7, r3
    3ec8:	881b      	ldrh	r3, [r3, #0]
    3eca:	2220      	movs	r2, #32
    3ecc:	4013      	ands	r3, r2
    3ece:	d010      	beq.n	3ef2 <_usart_interrupt_handler+0x306>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    3ed0:	697b      	ldr	r3, [r7, #20]
    3ed2:	2220      	movs	r2, #32
    3ed4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    3ed6:	697b      	ldr	r3, [r7, #20]
    3ed8:	2220      	movs	r2, #32
    3eda:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    3edc:	2310      	movs	r3, #16
    3ede:	18fb      	adds	r3, r7, r3
    3ee0:	881b      	ldrh	r3, [r3, #0]
    3ee2:	2208      	movs	r2, #8
    3ee4:	4013      	ands	r3, r2
    3ee6:	d004      	beq.n	3ef2 <_usart_interrupt_handler+0x306>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    3ee8:	69bb      	ldr	r3, [r7, #24]
    3eea:	699b      	ldr	r3, [r3, #24]
    3eec:	69ba      	ldr	r2, [r7, #24]
    3eee:	0010      	movs	r0, r2
    3ef0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    3ef2:	2312      	movs	r3, #18
    3ef4:	18fb      	adds	r3, r7, r3
    3ef6:	881b      	ldrh	r3, [r3, #0]
    3ef8:	2208      	movs	r2, #8
    3efa:	4013      	ands	r3, r2
    3efc:	d010      	beq.n	3f20 <_usart_interrupt_handler+0x334>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    3efe:	697b      	ldr	r3, [r7, #20]
    3f00:	2208      	movs	r2, #8
    3f02:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    3f04:	697b      	ldr	r3, [r7, #20]
    3f06:	2208      	movs	r2, #8
    3f08:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    3f0a:	2310      	movs	r3, #16
    3f0c:	18fb      	adds	r3, r7, r3
    3f0e:	881b      	ldrh	r3, [r3, #0]
    3f10:	2220      	movs	r2, #32
    3f12:	4013      	ands	r3, r2
    3f14:	d004      	beq.n	3f20 <_usart_interrupt_handler+0x334>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3f16:	69bb      	ldr	r3, [r7, #24]
    3f18:	6a1b      	ldr	r3, [r3, #32]
    3f1a:	69ba      	ldr	r2, [r7, #24]
    3f1c:	0010      	movs	r0, r2
    3f1e:	4798      	blx	r3
		}
	}
#endif
}
    3f20:	46c0      	nop			; (mov r8, r8)
    3f22:	46bd      	mov	sp, r7
    3f24:	b008      	add	sp, #32
    3f26:	bd80      	pop	{r7, pc}

00003f28 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    3f28:	b580      	push	{r7, lr}
    3f2a:	b082      	sub	sp, #8
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3f30:	687b      	ldr	r3, [r7, #4]
    3f32:	2201      	movs	r2, #1
    3f34:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	2200      	movs	r2, #0
    3f3a:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3f3c:	687b      	ldr	r3, [r7, #4]
    3f3e:	2206      	movs	r2, #6
    3f40:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	2200      	movs	r2, #0
    3f46:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    3f48:	687b      	ldr	r3, [r7, #4]
    3f4a:	2200      	movs	r2, #0
    3f4c:	725a      	strb	r2, [r3, #9]
}
    3f4e:	46c0      	nop			; (mov r8, r8)
    3f50:	46bd      	mov	sp, r7
    3f52:	b002      	add	sp, #8
    3f54:	bd80      	pop	{r7, pc}
    3f56:	46c0      	nop			; (mov r8, r8)

00003f58 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3f58:	b580      	push	{r7, lr}
    3f5a:	b082      	sub	sp, #8
    3f5c:	af00      	add	r7, sp, #0
    3f5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	2200      	movs	r2, #0
    3f64:	701a      	strb	r2, [r3, #0]
}
    3f66:	46c0      	nop			; (mov r8, r8)
    3f68:	46bd      	mov	sp, r7
    3f6a:	b002      	add	sp, #8
    3f6c:	bd80      	pop	{r7, pc}
    3f6e:	46c0      	nop			; (mov r8, r8)

00003f70 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    3f70:	b580      	push	{r7, lr}
    3f72:	b082      	sub	sp, #8
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    3f78:	687b      	ldr	r3, [r7, #4]
    3f7a:	2200      	movs	r2, #0
    3f7c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    3f7e:	687b      	ldr	r3, [r7, #4]
    3f80:	2204      	movs	r2, #4
    3f82:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	2200      	movs	r2, #0
    3f88:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    3f8a:	687b      	ldr	r3, [r7, #4]
    3f8c:	2280      	movs	r2, #128	; 0x80
    3f8e:	0212      	lsls	r2, r2, #8
    3f90:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	2200      	movs	r2, #0
    3f96:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    3f98:	687b      	ldr	r3, [r7, #4]
    3f9a:	2201      	movs	r2, #1
    3f9c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    3f9e:	687b      	ldr	r3, [r7, #4]
    3fa0:	2200      	movs	r2, #0
    3fa2:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    3fa4:	687b      	ldr	r3, [r7, #4]
    3fa6:	2201      	movs	r2, #1
    3fa8:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	2200      	movs	r2, #0
    3fae:	739a      	strb	r2, [r3, #14]
}
    3fb0:	46c0      	nop			; (mov r8, r8)
    3fb2:	46bd      	mov	sp, r7
    3fb4:	b002      	add	sp, #8
    3fb6:	bd80      	pop	{r7, pc}

00003fb8 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    3fb8:	b580      	push	{r7, lr}
    3fba:	b082      	sub	sp, #8
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	2203      	movs	r2, #3
    3fc4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	2200      	movs	r2, #0
    3fca:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    3fcc:	687b      	ldr	r3, [r7, #4]
    3fce:	2201      	movs	r2, #1
    3fd0:	709a      	strb	r2, [r3, #2]
}
    3fd2:	46c0      	nop			; (mov r8, r8)
    3fd4:	46bd      	mov	sp, r7
    3fd6:	b002      	add	sp, #8
    3fd8:	bd80      	pop	{r7, pc}
    3fda:	46c0      	nop			; (mov r8, r8)

00003fdc <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b082      	sub	sp, #8
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    3fe4:	687b      	ldr	r3, [r7, #4]
    3fe6:	2200      	movs	r2, #0
    3fe8:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	2200      	movs	r2, #0
    3fee:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3ff0:	687b      	ldr	r3, [r7, #4]
    3ff2:	2200      	movs	r2, #0
    3ff4:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3ff6:	687b      	ldr	r3, [r7, #4]
    3ff8:	2200      	movs	r2, #0
    3ffa:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	2200      	movs	r2, #0
    4000:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	2201      	movs	r2, #1
    4006:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    4008:	687b      	ldr	r3, [r7, #4]
    400a:	2207      	movs	r2, #7
    400c:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    400e:	687b      	ldr	r3, [r7, #4]
    4010:	223f      	movs	r2, #63	; 0x3f
    4012:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	2201      	movs	r2, #1
    4018:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    401a:	687b      	ldr	r3, [r7, #4]
    401c:	2201      	movs	r2, #1
    401e:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    4020:	687b      	ldr	r3, [r7, #4]
    4022:	2206      	movs	r2, #6
    4024:	821a      	strh	r2, [r3, #16]
}
    4026:	46c0      	nop			; (mov r8, r8)
    4028:	46bd      	mov	sp, r7
    402a:	b002      	add	sp, #8
    402c:	bd80      	pop	{r7, pc}
    402e:	46c0      	nop			; (mov r8, r8)

00004030 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    4030:	b580      	push	{r7, lr}
    4032:	b082      	sub	sp, #8
    4034:	af00      	add	r7, sp, #0
    4036:	0002      	movs	r2, r0
    4038:	1dfb      	adds	r3, r7, #7
    403a:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    403c:	4a03      	ldr	r2, [pc, #12]	; (404c <system_cpu_clock_set_divider+0x1c>)
    403e:	1dfb      	adds	r3, r7, #7
    4040:	781b      	ldrb	r3, [r3, #0]
    4042:	7213      	strb	r3, [r2, #8]
}
    4044:	46c0      	nop			; (mov r8, r8)
    4046:	46bd      	mov	sp, r7
    4048:	b002      	add	sp, #8
    404a:	bd80      	pop	{r7, pc}
    404c:	40000400 	.word	0x40000400

00004050 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    4050:	b580      	push	{r7, lr}
    4052:	b082      	sub	sp, #8
    4054:	af00      	add	r7, sp, #0
    4056:	0002      	movs	r2, r0
    4058:	1dfb      	adds	r3, r7, #7
    405a:	701a      	strb	r2, [r3, #0]
    405c:	1dbb      	adds	r3, r7, #6
    405e:	1c0a      	adds	r2, r1, #0
    4060:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4062:	1dfb      	adds	r3, r7, #7
    4064:	781b      	ldrb	r3, [r3, #0]
    4066:	2b01      	cmp	r3, #1
    4068:	d008      	beq.n	407c <system_apb_clock_set_divider+0x2c>
    406a:	2b02      	cmp	r3, #2
    406c:	d00b      	beq.n	4086 <system_apb_clock_set_divider+0x36>
    406e:	2b00      	cmp	r3, #0
    4070:	d10e      	bne.n	4090 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4072:	4a0b      	ldr	r2, [pc, #44]	; (40a0 <system_apb_clock_set_divider+0x50>)
    4074:	1dbb      	adds	r3, r7, #6
    4076:	781b      	ldrb	r3, [r3, #0]
    4078:	7253      	strb	r3, [r2, #9]
			break;
    407a:	e00b      	b.n	4094 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    407c:	4a08      	ldr	r2, [pc, #32]	; (40a0 <system_apb_clock_set_divider+0x50>)
    407e:	1dbb      	adds	r3, r7, #6
    4080:	781b      	ldrb	r3, [r3, #0]
    4082:	7293      	strb	r3, [r2, #10]
			break;
    4084:	e006      	b.n	4094 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    4086:	4a06      	ldr	r2, [pc, #24]	; (40a0 <system_apb_clock_set_divider+0x50>)
    4088:	1dbb      	adds	r3, r7, #6
    408a:	781b      	ldrb	r3, [r3, #0]
    408c:	72d3      	strb	r3, [r2, #11]
			break;
    408e:	e001      	b.n	4094 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4090:	2317      	movs	r3, #23
    4092:	e000      	b.n	4096 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    4094:	2300      	movs	r3, #0
}
    4096:	0018      	movs	r0, r3
    4098:	46bd      	mov	sp, r7
    409a:	b002      	add	sp, #8
    409c:	bd80      	pop	{r7, pc}
    409e:	46c0      	nop			; (mov r8, r8)
    40a0:	40000400 	.word	0x40000400

000040a4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    40a4:	b580      	push	{r7, lr}
    40a6:	b082      	sub	sp, #8
    40a8:	af00      	add	r7, sp, #0
    40aa:	0002      	movs	r2, r0
    40ac:	1dfb      	adds	r3, r7, #7
    40ae:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    40b0:	4a08      	ldr	r2, [pc, #32]	; (40d4 <system_flash_set_waitstates+0x30>)
    40b2:	1dfb      	adds	r3, r7, #7
    40b4:	781b      	ldrb	r3, [r3, #0]
    40b6:	210f      	movs	r1, #15
    40b8:	400b      	ands	r3, r1
    40ba:	b2d9      	uxtb	r1, r3
    40bc:	6853      	ldr	r3, [r2, #4]
    40be:	200f      	movs	r0, #15
    40c0:	4001      	ands	r1, r0
    40c2:	0049      	lsls	r1, r1, #1
    40c4:	201e      	movs	r0, #30
    40c6:	4383      	bics	r3, r0
    40c8:	430b      	orrs	r3, r1
    40ca:	6053      	str	r3, [r2, #4]
}
    40cc:	46c0      	nop			; (mov r8, r8)
    40ce:	46bd      	mov	sp, r7
    40d0:	b002      	add	sp, #8
    40d2:	bd80      	pop	{r7, pc}
    40d4:	41004000 	.word	0x41004000

000040d8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    40d8:	b580      	push	{r7, lr}
    40da:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    40dc:	46c0      	nop			; (mov r8, r8)
    40de:	4b04      	ldr	r3, [pc, #16]	; (40f0 <_system_dfll_wait_for_sync+0x18>)
    40e0:	68db      	ldr	r3, [r3, #12]
    40e2:	2210      	movs	r2, #16
    40e4:	4013      	ands	r3, r2
    40e6:	d0fa      	beq.n	40de <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    40e8:	46c0      	nop			; (mov r8, r8)
    40ea:	46bd      	mov	sp, r7
    40ec:	bd80      	pop	{r7, pc}
    40ee:	46c0      	nop			; (mov r8, r8)
    40f0:	40000800 	.word	0x40000800

000040f4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    40f4:	b580      	push	{r7, lr}
    40f6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    40f8:	4b0c      	ldr	r3, [pc, #48]	; (412c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    40fa:	2202      	movs	r2, #2
    40fc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    40fe:	f7ff ffeb 	bl	40d8 <_system_dfll_wait_for_sync>

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4102:	4a0a      	ldr	r2, [pc, #40]	; (412c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4104:	4b0a      	ldr	r3, [pc, #40]	; (4130 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4106:	689b      	ldr	r3, [r3, #8]
    4108:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    410a:	4a08      	ldr	r2, [pc, #32]	; (412c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    410c:	4b08      	ldr	r3, [pc, #32]	; (4130 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    410e:	685b      	ldr	r3, [r3, #4]
    4110:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4112:	4b06      	ldr	r3, [pc, #24]	; (412c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4114:	2200      	movs	r2, #0
    4116:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4118:	f7ff ffde 	bl	40d8 <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    411c:	4a03      	ldr	r2, [pc, #12]	; (412c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    411e:	4b04      	ldr	r3, [pc, #16]	; (4130 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4120:	681b      	ldr	r3, [r3, #0]
    4122:	b29b      	uxth	r3, r3
    4124:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4126:	46c0      	nop			; (mov r8, r8)
    4128:	46bd      	mov	sp, r7
    412a:	bd80      	pop	{r7, pc}
    412c:	40000800 	.word	0x40000800
    4130:	20000314 	.word	0x20000314

00004134 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4134:	b580      	push	{r7, lr}
    4136:	b082      	sub	sp, #8
    4138:	af00      	add	r7, sp, #0
    413a:	0002      	movs	r2, r0
    413c:	1dfb      	adds	r3, r7, #7
    413e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4140:	1dfb      	adds	r3, r7, #7
    4142:	781b      	ldrb	r3, [r3, #0]
    4144:	2b08      	cmp	r3, #8
    4146:	d840      	bhi.n	41ca <system_clock_source_get_hz+0x96>
    4148:	009a      	lsls	r2, r3, #2
    414a:	4b22      	ldr	r3, [pc, #136]	; (41d4 <system_clock_source_get_hz+0xa0>)
    414c:	18d3      	adds	r3, r2, r3
    414e:	681b      	ldr	r3, [r3, #0]
    4150:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4152:	4b21      	ldr	r3, [pc, #132]	; (41d8 <system_clock_source_get_hz+0xa4>)
    4154:	691b      	ldr	r3, [r3, #16]
    4156:	e039      	b.n	41cc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4158:	4b20      	ldr	r3, [pc, #128]	; (41dc <system_clock_source_get_hz+0xa8>)
    415a:	6a1b      	ldr	r3, [r3, #32]
    415c:	059b      	lsls	r3, r3, #22
    415e:	0f9b      	lsrs	r3, r3, #30
    4160:	b2db      	uxtb	r3, r3
    4162:	001a      	movs	r2, r3
    4164:	4b1e      	ldr	r3, [pc, #120]	; (41e0 <system_clock_source_get_hz+0xac>)
    4166:	40d3      	lsrs	r3, r2
    4168:	e030      	b.n	41cc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    416a:	2380      	movs	r3, #128	; 0x80
    416c:	021b      	lsls	r3, r3, #8
    416e:	e02d      	b.n	41cc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4170:	2380      	movs	r3, #128	; 0x80
    4172:	021b      	lsls	r3, r3, #8
    4174:	e02a      	b.n	41cc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4176:	4b18      	ldr	r3, [pc, #96]	; (41d8 <system_clock_source_get_hz+0xa4>)
    4178:	695b      	ldr	r3, [r3, #20]
    417a:	e027      	b.n	41cc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    417c:	4b16      	ldr	r3, [pc, #88]	; (41d8 <system_clock_source_get_hz+0xa4>)
    417e:	681b      	ldr	r3, [r3, #0]
    4180:	2202      	movs	r2, #2
    4182:	4013      	ands	r3, r2
    4184:	d101      	bne.n	418a <system_clock_source_get_hz+0x56>
			return 0;
    4186:	2300      	movs	r3, #0
    4188:	e020      	b.n	41cc <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    418a:	f7ff ffa5 	bl	40d8 <_system_dfll_wait_for_sync>

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    418e:	4b12      	ldr	r3, [pc, #72]	; (41d8 <system_clock_source_get_hz+0xa4>)
    4190:	681b      	ldr	r3, [r3, #0]
    4192:	2204      	movs	r2, #4
    4194:	4013      	ands	r3, r2
    4196:	d009      	beq.n	41ac <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4198:	2000      	movs	r0, #0
    419a:	f000 fd41 	bl	4c20 <system_gclk_chan_get_hz>
    419e:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    41a0:	4b0d      	ldr	r3, [pc, #52]	; (41d8 <system_clock_source_get_hz+0xa4>)
    41a2:	689b      	ldr	r3, [r3, #8]
    41a4:	041b      	lsls	r3, r3, #16
    41a6:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    41a8:	4353      	muls	r3, r2
    41aa:	e00f      	b.n	41cc <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    41ac:	4b0d      	ldr	r3, [pc, #52]	; (41e4 <system_clock_source_get_hz+0xb0>)
    41ae:	e00d      	b.n	41cc <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    41b0:	4a0a      	ldr	r2, [pc, #40]	; (41dc <system_clock_source_get_hz+0xa8>)
    41b2:	2350      	movs	r3, #80	; 0x50
    41b4:	5cd3      	ldrb	r3, [r2, r3]
    41b6:	b2db      	uxtb	r3, r3
    41b8:	001a      	movs	r2, r3
    41ba:	2304      	movs	r3, #4
    41bc:	4013      	ands	r3, r2
    41be:	d101      	bne.n	41c4 <system_clock_source_get_hz+0x90>
			return 0;
    41c0:	2300      	movs	r3, #0
    41c2:	e003      	b.n	41cc <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    41c4:	4b04      	ldr	r3, [pc, #16]	; (41d8 <system_clock_source_get_hz+0xa4>)
    41c6:	68db      	ldr	r3, [r3, #12]
    41c8:	e000      	b.n	41cc <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    41ca:	2300      	movs	r3, #0
	}
}
    41cc:	0018      	movs	r0, r3
    41ce:	46bd      	mov	sp, r7
    41d0:	b002      	add	sp, #8
    41d2:	bd80      	pop	{r7, pc}
    41d4:	000285ec 	.word	0x000285ec
    41d8:	20000314 	.word	0x20000314
    41dc:	40000800 	.word	0x40000800
    41e0:	007a1200 	.word	0x007a1200
    41e4:	02dc6c00 	.word	0x02dc6c00

000041e8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    41e8:	b580      	push	{r7, lr}
    41ea:	b084      	sub	sp, #16
    41ec:	af00      	add	r7, sp, #0
    41ee:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    41f0:	4b1a      	ldr	r3, [pc, #104]	; (425c <system_clock_source_osc8m_set_config+0x74>)
    41f2:	6a1b      	ldr	r3, [r3, #32]
    41f4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    41f6:	687b      	ldr	r3, [r7, #4]
    41f8:	781b      	ldrb	r3, [r3, #0]
    41fa:	1c1a      	adds	r2, r3, #0
    41fc:	2303      	movs	r3, #3
    41fe:	4013      	ands	r3, r2
    4200:	b2da      	uxtb	r2, r3
    4202:	230d      	movs	r3, #13
    4204:	18fb      	adds	r3, r7, r3
    4206:	2103      	movs	r1, #3
    4208:	400a      	ands	r2, r1
    420a:	0010      	movs	r0, r2
    420c:	781a      	ldrb	r2, [r3, #0]
    420e:	2103      	movs	r1, #3
    4210:	438a      	bics	r2, r1
    4212:	1c11      	adds	r1, r2, #0
    4214:	1c02      	adds	r2, r0, #0
    4216:	430a      	orrs	r2, r1
    4218:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    421a:	687b      	ldr	r3, [r7, #4]
    421c:	789a      	ldrb	r2, [r3, #2]
    421e:	230c      	movs	r3, #12
    4220:	18fb      	adds	r3, r7, r3
    4222:	01d0      	lsls	r0, r2, #7
    4224:	781a      	ldrb	r2, [r3, #0]
    4226:	217f      	movs	r1, #127	; 0x7f
    4228:	400a      	ands	r2, r1
    422a:	1c11      	adds	r1, r2, #0
    422c:	1c02      	adds	r2, r0, #0
    422e:	430a      	orrs	r2, r1
    4230:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4232:	687b      	ldr	r3, [r7, #4]
    4234:	785a      	ldrb	r2, [r3, #1]
    4236:	230c      	movs	r3, #12
    4238:	18fb      	adds	r3, r7, r3
    423a:	2101      	movs	r1, #1
    423c:	400a      	ands	r2, r1
    423e:	0190      	lsls	r0, r2, #6
    4240:	781a      	ldrb	r2, [r3, #0]
    4242:	2140      	movs	r1, #64	; 0x40
    4244:	438a      	bics	r2, r1
    4246:	1c11      	adds	r1, r2, #0
    4248:	1c02      	adds	r2, r0, #0
    424a:	430a      	orrs	r2, r1
    424c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    424e:	4b03      	ldr	r3, [pc, #12]	; (425c <system_clock_source_osc8m_set_config+0x74>)
    4250:	68fa      	ldr	r2, [r7, #12]
    4252:	621a      	str	r2, [r3, #32]
}
    4254:	46c0      	nop			; (mov r8, r8)
    4256:	46bd      	mov	sp, r7
    4258:	b004      	add	sp, #16
    425a:	bd80      	pop	{r7, pc}
    425c:	40000800 	.word	0x40000800

00004260 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4260:	b580      	push	{r7, lr}
    4262:	b084      	sub	sp, #16
    4264:	af00      	add	r7, sp, #0
    4266:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    4268:	4a43      	ldr	r2, [pc, #268]	; (4378 <system_clock_source_xosc32k_set_config+0x118>)
    426a:	230c      	movs	r3, #12
    426c:	18fb      	adds	r3, r7, r3
    426e:	8a92      	ldrh	r2, [r2, #20]
    4270:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    4272:	687b      	ldr	r3, [r7, #4]
    4274:	785b      	ldrb	r3, [r3, #1]
    4276:	1c1a      	adds	r2, r3, #0
    4278:	2307      	movs	r3, #7
    427a:	4013      	ands	r3, r2
    427c:	b2da      	uxtb	r2, r3
    427e:	230c      	movs	r3, #12
    4280:	18fb      	adds	r3, r7, r3
    4282:	2107      	movs	r1, #7
    4284:	400a      	ands	r2, r1
    4286:	0010      	movs	r0, r2
    4288:	785a      	ldrb	r2, [r3, #1]
    428a:	2107      	movs	r1, #7
    428c:	438a      	bics	r2, r1
    428e:	1c11      	adds	r1, r2, #0
    4290:	1c02      	adds	r2, r0, #0
    4292:	430a      	orrs	r2, r1
    4294:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4296:	687b      	ldr	r3, [r7, #4]
    4298:	781b      	ldrb	r3, [r3, #0]
    429a:	2b00      	cmp	r3, #0
    429c:	d106      	bne.n	42ac <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    429e:	230c      	movs	r3, #12
    42a0:	18fb      	adds	r3, r7, r3
    42a2:	781a      	ldrb	r2, [r3, #0]
    42a4:	2104      	movs	r1, #4
    42a6:	430a      	orrs	r2, r1
    42a8:	701a      	strb	r2, [r3, #0]
    42aa:	e005      	b.n	42b8 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    42ac:	230c      	movs	r3, #12
    42ae:	18fb      	adds	r3, r7, r3
    42b0:	781a      	ldrb	r2, [r3, #0]
    42b2:	2104      	movs	r1, #4
    42b4:	438a      	bics	r2, r1
    42b6:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    42b8:	687b      	ldr	r3, [r7, #4]
    42ba:	789a      	ldrb	r2, [r3, #2]
    42bc:	230c      	movs	r3, #12
    42be:	18fb      	adds	r3, r7, r3
    42c0:	2101      	movs	r1, #1
    42c2:	400a      	ands	r2, r1
    42c4:	0150      	lsls	r0, r2, #5
    42c6:	781a      	ldrb	r2, [r3, #0]
    42c8:	2120      	movs	r1, #32
    42ca:	438a      	bics	r2, r1
    42cc:	1c11      	adds	r1, r2, #0
    42ce:	1c02      	adds	r2, r0, #0
    42d0:	430a      	orrs	r2, r1
    42d2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    42d4:	687b      	ldr	r3, [r7, #4]
    42d6:	78da      	ldrb	r2, [r3, #3]
    42d8:	230c      	movs	r3, #12
    42da:	18fb      	adds	r3, r7, r3
    42dc:	2101      	movs	r1, #1
    42de:	400a      	ands	r2, r1
    42e0:	0110      	lsls	r0, r2, #4
    42e2:	781a      	ldrb	r2, [r3, #0]
    42e4:	2110      	movs	r1, #16
    42e6:	438a      	bics	r2, r1
    42e8:	1c11      	adds	r1, r2, #0
    42ea:	1c02      	adds	r2, r0, #0
    42ec:	430a      	orrs	r2, r1
    42ee:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	791a      	ldrb	r2, [r3, #4]
    42f4:	230c      	movs	r3, #12
    42f6:	18fb      	adds	r3, r7, r3
    42f8:	2101      	movs	r1, #1
    42fa:	400a      	ands	r2, r1
    42fc:	00d0      	lsls	r0, r2, #3
    42fe:	781a      	ldrb	r2, [r3, #0]
    4300:	2108      	movs	r1, #8
    4302:	438a      	bics	r2, r1
    4304:	1c11      	adds	r1, r2, #0
    4306:	1c02      	adds	r2, r0, #0
    4308:	430a      	orrs	r2, r1
    430a:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	7b5a      	ldrb	r2, [r3, #13]
    4310:	230c      	movs	r3, #12
    4312:	18fb      	adds	r3, r7, r3
    4314:	01d0      	lsls	r0, r2, #7
    4316:	781a      	ldrb	r2, [r3, #0]
    4318:	217f      	movs	r1, #127	; 0x7f
    431a:	400a      	ands	r2, r1
    431c:	1c11      	adds	r1, r2, #0
    431e:	1c02      	adds	r2, r0, #0
    4320:	430a      	orrs	r2, r1
    4322:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	7b1a      	ldrb	r2, [r3, #12]
    4328:	230c      	movs	r3, #12
    432a:	18fb      	adds	r3, r7, r3
    432c:	2101      	movs	r1, #1
    432e:	400a      	ands	r2, r1
    4330:	0190      	lsls	r0, r2, #6
    4332:	781a      	ldrb	r2, [r3, #0]
    4334:	2140      	movs	r1, #64	; 0x40
    4336:	438a      	bics	r2, r1
    4338:	1c11      	adds	r1, r2, #0
    433a:	1c02      	adds	r2, r0, #0
    433c:	430a      	orrs	r2, r1
    433e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	7b9a      	ldrb	r2, [r3, #14]
    4344:	230c      	movs	r3, #12
    4346:	18fb      	adds	r3, r7, r3
    4348:	2101      	movs	r1, #1
    434a:	400a      	ands	r2, r1
    434c:	0110      	lsls	r0, r2, #4
    434e:	785a      	ldrb	r2, [r3, #1]
    4350:	2110      	movs	r1, #16
    4352:	438a      	bics	r2, r1
    4354:	1c11      	adds	r1, r2, #0
    4356:	1c02      	adds	r2, r0, #0
    4358:	430a      	orrs	r2, r1
    435a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	689a      	ldr	r2, [r3, #8]
    4360:	4b06      	ldr	r3, [pc, #24]	; (437c <system_clock_source_xosc32k_set_config+0x11c>)
    4362:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    4364:	4a04      	ldr	r2, [pc, #16]	; (4378 <system_clock_source_xosc32k_set_config+0x118>)
    4366:	230c      	movs	r3, #12
    4368:	18fb      	adds	r3, r7, r3
    436a:	881b      	ldrh	r3, [r3, #0]
    436c:	8293      	strh	r3, [r2, #20]
}
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	46bd      	mov	sp, r7
    4372:	b004      	add	sp, #16
    4374:	bd80      	pop	{r7, pc}
    4376:	46c0      	nop			; (mov r8, r8)
    4378:	40000800 	.word	0x40000800
    437c:	20000314 	.word	0x20000314

00004380 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4380:	b580      	push	{r7, lr}
    4382:	b082      	sub	sp, #8
    4384:	af00      	add	r7, sp, #0
    4386:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4388:	687b      	ldr	r3, [r7, #4]
    438a:	7a1b      	ldrb	r3, [r3, #8]
    438c:	029b      	lsls	r3, r3, #10
    438e:	041b      	lsls	r3, r3, #16
    4390:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4392:	687b      	ldr	r3, [r7, #4]
    4394:	895b      	ldrh	r3, [r3, #10]
    4396:	059b      	lsls	r3, r3, #22
    4398:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    439a:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    439c:	4b2a      	ldr	r3, [pc, #168]	; (4448 <system_clock_source_dfll_set_config+0xc8>)
    439e:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    43a4:	687b      	ldr	r3, [r7, #4]
    43a6:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    43a8:	4313      	orrs	r3, r2
    43aa:	b2db      	uxtb	r3, r3
    43ac:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    43ae:	687b      	ldr	r3, [r7, #4]
    43b0:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    43b2:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    43b4:	687a      	ldr	r2, [r7, #4]
    43b6:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    43b8:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    43ba:	687b      	ldr	r3, [r7, #4]
    43bc:	785b      	ldrb	r3, [r3, #1]
    43be:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    43c0:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    43c2:	4b21      	ldr	r3, [pc, #132]	; (4448 <system_clock_source_dfll_set_config+0xc8>)
    43c4:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    43c6:	687b      	ldr	r3, [r7, #4]
    43c8:	781b      	ldrb	r3, [r3, #0]
    43ca:	2b04      	cmp	r3, #4
    43cc:	d116      	bne.n	43fc <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    43ce:	687b      	ldr	r3, [r7, #4]
    43d0:	7b1b      	ldrb	r3, [r3, #12]
    43d2:	069b      	lsls	r3, r3, #26
    43d4:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    43d6:	687b      	ldr	r3, [r7, #4]
    43d8:	89db      	ldrh	r3, [r3, #14]
    43da:	041b      	lsls	r3, r3, #16
    43dc:	0019      	movs	r1, r3
    43de:	4b1b      	ldr	r3, [pc, #108]	; (444c <system_clock_source_dfll_set_config+0xcc>)
    43e0:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    43e2:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    43e4:	687a      	ldr	r2, [r7, #4]
    43e6:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    43e8:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    43ea:	4b17      	ldr	r3, [pc, #92]	; (4448 <system_clock_source_dfll_set_config+0xc8>)
    43ec:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    43ee:	4b16      	ldr	r3, [pc, #88]	; (4448 <system_clock_source_dfll_set_config+0xc8>)
    43f0:	681b      	ldr	r3, [r3, #0]
    43f2:	687a      	ldr	r2, [r7, #4]
    43f4:	7812      	ldrb	r2, [r2, #0]
    43f6:	431a      	orrs	r2, r3
    43f8:	4b13      	ldr	r3, [pc, #76]	; (4448 <system_clock_source_dfll_set_config+0xc8>)
    43fa:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    43fc:	687b      	ldr	r3, [r7, #4]
    43fe:	781b      	ldrb	r3, [r3, #0]
    4400:	2b20      	cmp	r3, #32
    4402:	d11c      	bne.n	443e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4404:	687b      	ldr	r3, [r7, #4]
    4406:	7b1b      	ldrb	r3, [r3, #12]
    4408:	069b      	lsls	r3, r3, #26
    440a:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    440c:	687b      	ldr	r3, [r7, #4]
    440e:	89db      	ldrh	r3, [r3, #14]
    4410:	041b      	lsls	r3, r3, #16
    4412:	0019      	movs	r1, r3
    4414:	4b0d      	ldr	r3, [pc, #52]	; (444c <system_clock_source_dfll_set_config+0xcc>)
    4416:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4418:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    441a:	687a      	ldr	r2, [r7, #4]
    441c:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    441e:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    4420:	4b09      	ldr	r3, [pc, #36]	; (4448 <system_clock_source_dfll_set_config+0xc8>)
    4422:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4424:	4b08      	ldr	r3, [pc, #32]	; (4448 <system_clock_source_dfll_set_config+0xc8>)
    4426:	681b      	ldr	r3, [r3, #0]
    4428:	687a      	ldr	r2, [r7, #4]
    442a:	7812      	ldrb	r2, [r2, #0]
    442c:	2104      	movs	r1, #4
    442e:	430a      	orrs	r2, r1
    4430:	b2d2      	uxtb	r2, r2
    4432:	4313      	orrs	r3, r2
    4434:	2280      	movs	r2, #128	; 0x80
    4436:	00d2      	lsls	r2, r2, #3
    4438:	431a      	orrs	r2, r3
    443a:	4b03      	ldr	r3, [pc, #12]	; (4448 <system_clock_source_dfll_set_config+0xc8>)
    443c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    443e:	46c0      	nop			; (mov r8, r8)
    4440:	46bd      	mov	sp, r7
    4442:	b002      	add	sp, #8
    4444:	bd80      	pop	{r7, pc}
    4446:	46c0      	nop			; (mov r8, r8)
    4448:	20000314 	.word	0x20000314
    444c:	03ff0000 	.word	0x03ff0000

00004450 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4450:	b580      	push	{r7, lr}
    4452:	b082      	sub	sp, #8
    4454:	af00      	add	r7, sp, #0
    4456:	0002      	movs	r2, r0
    4458:	1dfb      	adds	r3, r7, #7
    445a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    445c:	1dfb      	adds	r3, r7, #7
    445e:	781b      	ldrb	r3, [r3, #0]
    4460:	2b08      	cmp	r3, #8
    4462:	d83b      	bhi.n	44dc <system_clock_source_enable+0x8c>
    4464:	009a      	lsls	r2, r3, #2
    4466:	4b21      	ldr	r3, [pc, #132]	; (44ec <system_clock_source_enable+0x9c>)
    4468:	18d3      	adds	r3, r2, r3
    446a:	681b      	ldr	r3, [r3, #0]
    446c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    446e:	4b20      	ldr	r3, [pc, #128]	; (44f0 <system_clock_source_enable+0xa0>)
    4470:	4a1f      	ldr	r2, [pc, #124]	; (44f0 <system_clock_source_enable+0xa0>)
    4472:	6a12      	ldr	r2, [r2, #32]
    4474:	2102      	movs	r1, #2
    4476:	430a      	orrs	r2, r1
    4478:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    447a:	2300      	movs	r3, #0
    447c:	e031      	b.n	44e2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    447e:	4b1c      	ldr	r3, [pc, #112]	; (44f0 <system_clock_source_enable+0xa0>)
    4480:	4a1b      	ldr	r2, [pc, #108]	; (44f0 <system_clock_source_enable+0xa0>)
    4482:	6992      	ldr	r2, [r2, #24]
    4484:	2102      	movs	r1, #2
    4486:	430a      	orrs	r2, r1
    4488:	619a      	str	r2, [r3, #24]
		break;
    448a:	e029      	b.n	44e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    448c:	4a18      	ldr	r2, [pc, #96]	; (44f0 <system_clock_source_enable+0xa0>)
    448e:	4b18      	ldr	r3, [pc, #96]	; (44f0 <system_clock_source_enable+0xa0>)
    4490:	8a1b      	ldrh	r3, [r3, #16]
    4492:	b29b      	uxth	r3, r3
    4494:	2102      	movs	r1, #2
    4496:	430b      	orrs	r3, r1
    4498:	b29b      	uxth	r3, r3
    449a:	8213      	strh	r3, [r2, #16]
		break;
    449c:	e020      	b.n	44e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    449e:	4a14      	ldr	r2, [pc, #80]	; (44f0 <system_clock_source_enable+0xa0>)
    44a0:	4b13      	ldr	r3, [pc, #76]	; (44f0 <system_clock_source_enable+0xa0>)
    44a2:	8a9b      	ldrh	r3, [r3, #20]
    44a4:	b29b      	uxth	r3, r3
    44a6:	2102      	movs	r1, #2
    44a8:	430b      	orrs	r3, r1
    44aa:	b29b      	uxth	r3, r3
    44ac:	8293      	strh	r3, [r2, #20]
		break;
    44ae:	e017      	b.n	44e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    44b0:	4b10      	ldr	r3, [pc, #64]	; (44f4 <system_clock_source_enable+0xa4>)
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	2202      	movs	r2, #2
    44b6:	431a      	orrs	r2, r3
    44b8:	4b0e      	ldr	r3, [pc, #56]	; (44f4 <system_clock_source_enable+0xa4>)
    44ba:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    44bc:	f7ff fe1a 	bl	40f4 <_system_clock_source_dfll_set_config_errata_9905>
		break;
    44c0:	e00e      	b.n	44e0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    44c2:	4a0b      	ldr	r2, [pc, #44]	; (44f0 <system_clock_source_enable+0xa0>)
    44c4:	490a      	ldr	r1, [pc, #40]	; (44f0 <system_clock_source_enable+0xa0>)
    44c6:	2344      	movs	r3, #68	; 0x44
    44c8:	5ccb      	ldrb	r3, [r1, r3]
    44ca:	b2db      	uxtb	r3, r3
    44cc:	2102      	movs	r1, #2
    44ce:	430b      	orrs	r3, r1
    44d0:	b2d9      	uxtb	r1, r3
    44d2:	2344      	movs	r3, #68	; 0x44
    44d4:	54d1      	strb	r1, [r2, r3]
		break;
    44d6:	e003      	b.n	44e0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    44d8:	2300      	movs	r3, #0
    44da:	e002      	b.n	44e2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    44dc:	2317      	movs	r3, #23
    44de:	e000      	b.n	44e2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    44e0:	2300      	movs	r3, #0
}
    44e2:	0018      	movs	r0, r3
    44e4:	46bd      	mov	sp, r7
    44e6:	b002      	add	sp, #8
    44e8:	bd80      	pop	{r7, pc}
    44ea:	46c0      	nop			; (mov r8, r8)
    44ec:	00028610 	.word	0x00028610
    44f0:	40000800 	.word	0x40000800
    44f4:	20000314 	.word	0x20000314

000044f8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    44f8:	b580      	push	{r7, lr}
    44fa:	b084      	sub	sp, #16
    44fc:	af00      	add	r7, sp, #0
    44fe:	0002      	movs	r2, r0
    4500:	1dfb      	adds	r3, r7, #7
    4502:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    4504:	2300      	movs	r3, #0
    4506:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    4508:	1dfb      	adds	r3, r7, #7
    450a:	781b      	ldrb	r3, [r3, #0]
    450c:	2b08      	cmp	r3, #8
    450e:	d821      	bhi.n	4554 <system_clock_source_is_ready+0x5c>
    4510:	009a      	lsls	r2, r3, #2
    4512:	4b18      	ldr	r3, [pc, #96]	; (4574 <system_clock_source_is_ready+0x7c>)
    4514:	18d3      	adds	r3, r2, r3
    4516:	681b      	ldr	r3, [r3, #0]
    4518:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    451a:	2308      	movs	r3, #8
    451c:	60fb      	str	r3, [r7, #12]
		break;
    451e:	e01b      	b.n	4558 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    4520:	2304      	movs	r3, #4
    4522:	60fb      	str	r3, [r7, #12]
		break;
    4524:	e018      	b.n	4558 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    4526:	2301      	movs	r3, #1
    4528:	60fb      	str	r3, [r7, #12]
		break;
    452a:	e015      	b.n	4558 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    452c:	2302      	movs	r3, #2
    452e:	60fb      	str	r3, [r7, #12]
		break;
    4530:	e012      	b.n	4558 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    4532:	23d0      	movs	r3, #208	; 0xd0
    4534:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    4536:	e00f      	b.n	4558 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    4538:	4a0f      	ldr	r2, [pc, #60]	; (4578 <system_clock_source_is_ready+0x80>)
    453a:	2350      	movs	r3, #80	; 0x50
    453c:	5cd3      	ldrb	r3, [r2, r3]
    453e:	b2db      	uxtb	r3, r3
    4540:	001a      	movs	r2, r3
    4542:	2303      	movs	r3, #3
    4544:	4013      	ands	r3, r2
    4546:	3b03      	subs	r3, #3
    4548:	425a      	negs	r2, r3
    454a:	4153      	adcs	r3, r2
    454c:	b2db      	uxtb	r3, r3
    454e:	e00c      	b.n	456a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    4550:	2301      	movs	r3, #1
    4552:	e00a      	b.n	456a <system_clock_source_is_ready+0x72>

	default:
		return false;
    4554:	2300      	movs	r3, #0
    4556:	e008      	b.n	456a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4558:	4b07      	ldr	r3, [pc, #28]	; (4578 <system_clock_source_is_ready+0x80>)
    455a:	68db      	ldr	r3, [r3, #12]
    455c:	68fa      	ldr	r2, [r7, #12]
    455e:	401a      	ands	r2, r3
    4560:	68fb      	ldr	r3, [r7, #12]
    4562:	1ad3      	subs	r3, r2, r3
    4564:	425a      	negs	r2, r3
    4566:	4153      	adcs	r3, r2
    4568:	b2db      	uxtb	r3, r3
}
    456a:	0018      	movs	r0, r3
    456c:	46bd      	mov	sp, r7
    456e:	b004      	add	sp, #16
    4570:	bd80      	pop	{r7, pc}
    4572:	46c0      	nop			; (mov r8, r8)
    4574:	00028634 	.word	0x00028634
    4578:	40000800 	.word	0x40000800

0000457c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    457c:	b580      	push	{r7, lr}
    457e:	b082      	sub	sp, #8
    4580:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    4582:	003b      	movs	r3, r7
    4584:	2203      	movs	r2, #3
    4586:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4588:	2300      	movs	r3, #0
    458a:	607b      	str	r3, [r7, #4]
    458c:	e009      	b.n	45a2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    458e:	687b      	ldr	r3, [r7, #4]
    4590:	b2db      	uxtb	r3, r3
    4592:	003a      	movs	r2, r7
    4594:	0011      	movs	r1, r2
    4596:	0018      	movs	r0, r3
    4598:	f000 faba 	bl	4b10 <system_gclk_chan_set_config>
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    459c:	687b      	ldr	r3, [r7, #4]
    459e:	3301      	adds	r3, #1
    45a0:	607b      	str	r3, [r7, #4]
    45a2:	687b      	ldr	r3, [r7, #4]
    45a4:	2b24      	cmp	r3, #36	; 0x24
    45a6:	d9f2      	bls.n	458e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    45a8:	46c0      	nop			; (mov r8, r8)
    45aa:	46bd      	mov	sp, r7
    45ac:	b002      	add	sp, #8
    45ae:	bd80      	pop	{r7, pc}

000045b0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    45b0:	b580      	push	{r7, lr}
    45b2:	b0aa      	sub	sp, #168	; 0xa8
    45b4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    45b6:	4b97      	ldr	r3, [pc, #604]	; (4814 <system_clock_init+0x264>)
    45b8:	22c2      	movs	r2, #194	; 0xc2
    45ba:	00d2      	lsls	r2, r2, #3
    45bc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    45be:	2001      	movs	r0, #1
    45c0:	f7ff fd70 	bl	40a4 <system_flash_set_waitstates>

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    45c4:	f7ff ffda 	bl	457c <_switch_peripheral_gclk>


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    45c8:	2394      	movs	r3, #148	; 0x94
    45ca:	18fb      	adds	r3, r7, r3
    45cc:	0018      	movs	r0, r3
    45ce:	f7ff fccf 	bl	3f70 <system_clock_source_xosc32k_get_config_defaults>

	xosc32k_conf.frequency           = 32768UL;
    45d2:	2394      	movs	r3, #148	; 0x94
    45d4:	18fb      	adds	r3, r7, r3
    45d6:	2280      	movs	r2, #128	; 0x80
    45d8:	0212      	lsls	r2, r2, #8
    45da:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    45dc:	2394      	movs	r3, #148	; 0x94
    45de:	18fb      	adds	r3, r7, r3
    45e0:	2200      	movs	r2, #0
    45e2:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    45e4:	2394      	movs	r3, #148	; 0x94
    45e6:	18fb      	adds	r3, r7, r3
    45e8:	2203      	movs	r2, #3
    45ea:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    45ec:	2394      	movs	r3, #148	; 0x94
    45ee:	18fb      	adds	r3, r7, r3
    45f0:	2200      	movs	r2, #0
    45f2:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    45f4:	2394      	movs	r3, #148	; 0x94
    45f6:	18fb      	adds	r3, r7, r3
    45f8:	2200      	movs	r2, #0
    45fa:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    45fc:	2394      	movs	r3, #148	; 0x94
    45fe:	18fb      	adds	r3, r7, r3
    4600:	2201      	movs	r2, #1
    4602:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    4604:	2394      	movs	r3, #148	; 0x94
    4606:	18fb      	adds	r3, r7, r3
    4608:	2200      	movs	r2, #0
    460a:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    460c:	2394      	movs	r3, #148	; 0x94
    460e:	18fb      	adds	r3, r7, r3
    4610:	2200      	movs	r2, #0
    4612:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    4614:	2394      	movs	r3, #148	; 0x94
    4616:	18fb      	adds	r3, r7, r3
    4618:	0018      	movs	r0, r3
    461a:	f7ff fe21 	bl	4260 <system_clock_source_xosc32k_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    461e:	2005      	movs	r0, #5
    4620:	f7ff ff16 	bl	4450 <system_clock_source_enable>
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4624:	46c0      	nop			; (mov r8, r8)
    4626:	2005      	movs	r0, #5
    4628:	f7ff ff66 	bl	44f8 <system_clock_source_is_ready>
    462c:	0003      	movs	r3, r0
    462e:	001a      	movs	r2, r3
    4630:	2301      	movs	r3, #1
    4632:	4053      	eors	r3, r2
    4634:	b2db      	uxtb	r3, r3
    4636:	2b00      	cmp	r3, #0
    4638:	d1f5      	bne.n	4626 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    463a:	4a76      	ldr	r2, [pc, #472]	; (4814 <system_clock_init+0x264>)
    463c:	8a93      	ldrh	r3, [r2, #20]
    463e:	2180      	movs	r1, #128	; 0x80
    4640:	430b      	orrs	r3, r1
    4642:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    4644:	2380      	movs	r3, #128	; 0x80
    4646:	18fb      	adds	r3, r7, r3
    4648:	0018      	movs	r0, r3
    464a:	f7ff fcc7 	bl	3fdc <system_clock_source_dfll_get_config_defaults>

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    464e:	2380      	movs	r3, #128	; 0x80
    4650:	18fb      	adds	r3, r7, r3
    4652:	2204      	movs	r2, #4
    4654:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    4656:	2380      	movs	r3, #128	; 0x80
    4658:	18fb      	adds	r3, r7, r3
    465a:	2200      	movs	r2, #0
    465c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    465e:	4b6e      	ldr	r3, [pc, #440]	; (4818 <system_clock_init+0x268>)
    4660:	681b      	ldr	r3, [r3, #0]
    4662:	0e9b      	lsrs	r3, r3, #26
    4664:	22a4      	movs	r2, #164	; 0xa4
    4666:	18ba      	adds	r2, r7, r2
    4668:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    466a:	23a4      	movs	r3, #164	; 0xa4
    466c:	18fb      	adds	r3, r7, r3
    466e:	681b      	ldr	r3, [r3, #0]
    4670:	2b3f      	cmp	r3, #63	; 0x3f
    4672:	d103      	bne.n	467c <system_clock_init+0xcc>
		coarse = 0x1f;
    4674:	231f      	movs	r3, #31
    4676:	22a4      	movs	r2, #164	; 0xa4
    4678:	18ba      	adds	r2, r7, r2
    467a:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    467c:	23a4      	movs	r3, #164	; 0xa4
    467e:	18fb      	adds	r3, r7, r3
    4680:	681b      	ldr	r3, [r3, #0]
    4682:	b2da      	uxtb	r2, r3
    4684:	2380      	movs	r3, #128	; 0x80
    4686:	18fb      	adds	r3, r7, r3
    4688:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    468a:	2380      	movs	r3, #128	; 0x80
    468c:	18fb      	adds	r3, r7, r3
    468e:	2200      	movs	r2, #0
    4690:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4692:	2380      	movs	r3, #128	; 0x80
    4694:	18fb      	adds	r3, r7, r3
    4696:	2200      	movs	r2, #0
    4698:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    469a:	2380      	movs	r3, #128	; 0x80
    469c:	18fb      	adds	r3, r7, r3
    469e:	2200      	movs	r2, #0
    46a0:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    46a2:	2380      	movs	r3, #128	; 0x80
    46a4:	18fb      	adds	r3, r7, r3
    46a6:	2200      	movs	r2, #0
    46a8:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    46aa:	2380      	movs	r3, #128	; 0x80
    46ac:	18fb      	adds	r3, r7, r3
    46ae:	22b7      	movs	r2, #183	; 0xb7
    46b0:	00d2      	lsls	r2, r2, #3
    46b2:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    46b4:	2380      	movs	r3, #128	; 0x80
    46b6:	18fb      	adds	r3, r7, r3
    46b8:	2207      	movs	r2, #7
    46ba:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    46bc:	2380      	movs	r3, #128	; 0x80
    46be:	18fb      	adds	r3, r7, r3
    46c0:	223f      	movs	r2, #63	; 0x3f
    46c2:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    46c4:	2380      	movs	r3, #128	; 0x80
    46c6:	18fb      	adds	r3, r7, r3
    46c8:	0018      	movs	r0, r3
    46ca:	f7ff fe59 	bl	4380 <system_clock_source_dfll_set_config>
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    46ce:	237c      	movs	r3, #124	; 0x7c
    46d0:	18fb      	adds	r3, r7, r3
    46d2:	0018      	movs	r0, r3
    46d4:	f7ff fc70 	bl	3fb8 <system_clock_source_osc8m_get_config_defaults>

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    46d8:	237c      	movs	r3, #124	; 0x7c
    46da:	18fb      	adds	r3, r7, r3
    46dc:	2200      	movs	r2, #0
    46de:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    46e0:	237c      	movs	r3, #124	; 0x7c
    46e2:	18fb      	adds	r3, r7, r3
    46e4:	2201      	movs	r2, #1
    46e6:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    46e8:	237c      	movs	r3, #124	; 0x7c
    46ea:	18fb      	adds	r3, r7, r3
    46ec:	2200      	movs	r2, #0
    46ee:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    46f0:	237c      	movs	r3, #124	; 0x7c
    46f2:	18fb      	adds	r3, r7, r3
    46f4:	0018      	movs	r0, r3
    46f6:	f7ff fd77 	bl	41e8 <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    46fa:	2006      	movs	r0, #6
    46fc:	f7ff fea8 	bl	4450 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4700:	f000 f8da 	bl	48b8 <system_gclk_init>

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4704:	2364      	movs	r3, #100	; 0x64
    4706:	18fb      	adds	r3, r7, r3
    4708:	0018      	movs	r0, r3
    470a:	f7ff fc0d 	bl	3f28 <system_gclk_gen_get_config_defaults>
    470e:	2364      	movs	r3, #100	; 0x64
    4710:	18fb      	adds	r3, r7, r3
    4712:	2205      	movs	r2, #5
    4714:	701a      	strb	r2, [r3, #0]
    4716:	2364      	movs	r3, #100	; 0x64
    4718:	18fb      	adds	r3, r7, r3
    471a:	2201      	movs	r2, #1
    471c:	605a      	str	r2, [r3, #4]
    471e:	2364      	movs	r3, #100	; 0x64
    4720:	18fb      	adds	r3, r7, r3
    4722:	2200      	movs	r2, #0
    4724:	721a      	strb	r2, [r3, #8]
    4726:	2364      	movs	r3, #100	; 0x64
    4728:	18fb      	adds	r3, r7, r3
    472a:	2201      	movs	r2, #1
    472c:	725a      	strb	r2, [r3, #9]
    472e:	2364      	movs	r3, #100	; 0x64
    4730:	18fb      	adds	r3, r7, r3
    4732:	0019      	movs	r1, r3
    4734:	2001      	movs	r0, #1
    4736:	f000 f8d5 	bl	48e4 <system_gclk_gen_set_config>
    473a:	2001      	movs	r0, #1
    473c:	f000 f95e 	bl	49fc <system_gclk_gen_enable>
    4740:	2358      	movs	r3, #88	; 0x58
    4742:	18fb      	adds	r3, r7, r3
    4744:	0018      	movs	r0, r3
    4746:	f7ff fbef 	bl	3f28 <system_gclk_gen_get_config_defaults>
    474a:	2358      	movs	r3, #88	; 0x58
    474c:	18fb      	adds	r3, r7, r3
    474e:	2205      	movs	r2, #5
    4750:	701a      	strb	r2, [r3, #0]
    4752:	2358      	movs	r3, #88	; 0x58
    4754:	18fb      	adds	r3, r7, r3
    4756:	2220      	movs	r2, #32
    4758:	605a      	str	r2, [r3, #4]
    475a:	2358      	movs	r3, #88	; 0x58
    475c:	18fb      	adds	r3, r7, r3
    475e:	2200      	movs	r2, #0
    4760:	721a      	strb	r2, [r3, #8]
    4762:	2358      	movs	r3, #88	; 0x58
    4764:	18fb      	adds	r3, r7, r3
    4766:	2201      	movs	r2, #1
    4768:	725a      	strb	r2, [r3, #9]
    476a:	2358      	movs	r3, #88	; 0x58
    476c:	18fb      	adds	r3, r7, r3
    476e:	0019      	movs	r1, r3
    4770:	2002      	movs	r0, #2
    4772:	f000 f8b7 	bl	48e4 <system_gclk_gen_set_config>
    4776:	2002      	movs	r0, #2
    4778:	f000 f940 	bl	49fc <system_gclk_gen_enable>
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    477c:	230c      	movs	r3, #12
    477e:	18fb      	adds	r3, r7, r3
    4780:	0018      	movs	r0, r3
    4782:	f7ff fbe9 	bl	3f58 <system_gclk_chan_get_config_defaults>
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    4786:	230c      	movs	r3, #12
    4788:	18fb      	adds	r3, r7, r3
    478a:	2201      	movs	r2, #1
    478c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    478e:	230c      	movs	r3, #12
    4790:	18fb      	adds	r3, r7, r3
    4792:	0019      	movs	r1, r3
    4794:	2000      	movs	r0, #0
    4796:	f000 f9bb 	bl	4b10 <system_gclk_chan_set_config>
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    479a:	2000      	movs	r0, #0
    479c:	f000 f9d8 	bl	4b50 <system_gclk_chan_enable>
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    47a0:	2007      	movs	r0, #7
    47a2:	f7ff fe55 	bl	4450 <system_clock_source_enable>
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    47a6:	46c0      	nop			; (mov r8, r8)
    47a8:	2007      	movs	r0, #7
    47aa:	f7ff fea5 	bl	44f8 <system_clock_source_is_ready>
    47ae:	0003      	movs	r3, r0
    47b0:	001a      	movs	r2, r3
    47b2:	2301      	movs	r3, #1
    47b4:	4053      	eors	r3, r2
    47b6:	b2db      	uxtb	r3, r3
    47b8:	2b00      	cmp	r3, #0
    47ba:	d1f5      	bne.n	47a8 <system_clock_init+0x1f8>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    47bc:	2000      	movs	r0, #0
    47be:	f7ff fc37 	bl	4030 <system_cpu_clock_set_divider>

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    47c2:	2100      	movs	r1, #0
    47c4:	2000      	movs	r0, #0
    47c6:	f7ff fc43 	bl	4050 <system_apb_clock_set_divider>
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    47ca:	2100      	movs	r1, #0
    47cc:	2001      	movs	r0, #1
    47ce:	f7ff fc3f 	bl	4050 <system_apb_clock_set_divider>
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    47d2:	2100      	movs	r1, #0
    47d4:	2002      	movs	r0, #2
    47d6:	f7ff fc3b 	bl	4050 <system_apb_clock_set_divider>

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    47da:	003b      	movs	r3, r7
    47dc:	0018      	movs	r0, r3
    47de:	f7ff fba3 	bl	3f28 <system_gclk_gen_get_config_defaults>
    47e2:	003b      	movs	r3, r7
    47e4:	2207      	movs	r2, #7
    47e6:	701a      	strb	r2, [r3, #0]
    47e8:	003b      	movs	r3, r7
    47ea:	2201      	movs	r2, #1
    47ec:	605a      	str	r2, [r3, #4]
    47ee:	003b      	movs	r3, r7
    47f0:	2200      	movs	r2, #0
    47f2:	721a      	strb	r2, [r3, #8]
    47f4:	003b      	movs	r3, r7
    47f6:	2201      	movs	r2, #1
    47f8:	725a      	strb	r2, [r3, #9]
    47fa:	003b      	movs	r3, r7
    47fc:	0019      	movs	r1, r3
    47fe:	2000      	movs	r0, #0
    4800:	f000 f870 	bl	48e4 <system_gclk_gen_set_config>
    4804:	2000      	movs	r0, #0
    4806:	f000 f8f9 	bl	49fc <system_gclk_gen_enable>
#endif
}
    480a:	46c0      	nop			; (mov r8, r8)
    480c:	46bd      	mov	sp, r7
    480e:	b02a      	add	sp, #168	; 0xa8
    4810:	bd80      	pop	{r7, pc}
    4812:	46c0      	nop			; (mov r8, r8)
    4814:	40000800 	.word	0x40000800
    4818:	00806024 	.word	0x00806024

0000481c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    481c:	b580      	push	{r7, lr}
    481e:	b082      	sub	sp, #8
    4820:	af00      	add	r7, sp, #0
    4822:	0002      	movs	r2, r0
    4824:	6039      	str	r1, [r7, #0]
    4826:	1dfb      	adds	r3, r7, #7
    4828:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    482a:	1dfb      	adds	r3, r7, #7
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	2b01      	cmp	r3, #1
    4830:	d00a      	beq.n	4848 <system_apb_clock_set_mask+0x2c>
    4832:	2b02      	cmp	r3, #2
    4834:	d00f      	beq.n	4856 <system_apb_clock_set_mask+0x3a>
    4836:	2b00      	cmp	r3, #0
    4838:	d114      	bne.n	4864 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    483a:	4b0e      	ldr	r3, [pc, #56]	; (4874 <system_apb_clock_set_mask+0x58>)
    483c:	4a0d      	ldr	r2, [pc, #52]	; (4874 <system_apb_clock_set_mask+0x58>)
    483e:	6991      	ldr	r1, [r2, #24]
    4840:	683a      	ldr	r2, [r7, #0]
    4842:	430a      	orrs	r2, r1
    4844:	619a      	str	r2, [r3, #24]
			break;
    4846:	e00f      	b.n	4868 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4848:	4b0a      	ldr	r3, [pc, #40]	; (4874 <system_apb_clock_set_mask+0x58>)
    484a:	4a0a      	ldr	r2, [pc, #40]	; (4874 <system_apb_clock_set_mask+0x58>)
    484c:	69d1      	ldr	r1, [r2, #28]
    484e:	683a      	ldr	r2, [r7, #0]
    4850:	430a      	orrs	r2, r1
    4852:	61da      	str	r2, [r3, #28]
			break;
    4854:	e008      	b.n	4868 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4856:	4b07      	ldr	r3, [pc, #28]	; (4874 <system_apb_clock_set_mask+0x58>)
    4858:	4a06      	ldr	r2, [pc, #24]	; (4874 <system_apb_clock_set_mask+0x58>)
    485a:	6a11      	ldr	r1, [r2, #32]
    485c:	683a      	ldr	r2, [r7, #0]
    485e:	430a      	orrs	r2, r1
    4860:	621a      	str	r2, [r3, #32]
			break;
    4862:	e001      	b.n	4868 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4864:	2317      	movs	r3, #23
    4866:	e000      	b.n	486a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4868:	2300      	movs	r3, #0
}
    486a:	0018      	movs	r0, r3
    486c:	46bd      	mov	sp, r7
    486e:	b002      	add	sp, #8
    4870:	bd80      	pop	{r7, pc}
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	40000400 	.word	0x40000400

00004878 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    4878:	b580      	push	{r7, lr}
    487a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    487c:	f7fb fc4a 	bl	114 <cpu_irq_enter_critical>
}
    4880:	46c0      	nop			; (mov r8, r8)
    4882:	46bd      	mov	sp, r7
    4884:	bd80      	pop	{r7, pc}
    4886:	46c0      	nop			; (mov r8, r8)

00004888 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    4888:	b580      	push	{r7, lr}
    488a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    488c:	f7fb fc6c 	bl	168 <cpu_irq_leave_critical>
}
    4890:	46c0      	nop			; (mov r8, r8)
    4892:	46bd      	mov	sp, r7
    4894:	bd80      	pop	{r7, pc}
    4896:	46c0      	nop			; (mov r8, r8)

00004898 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    4898:	b580      	push	{r7, lr}
    489a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    489c:	4b05      	ldr	r3, [pc, #20]	; (48b4 <system_gclk_is_syncing+0x1c>)
    489e:	785b      	ldrb	r3, [r3, #1]
    48a0:	b2db      	uxtb	r3, r3
    48a2:	b25b      	sxtb	r3, r3
    48a4:	2b00      	cmp	r3, #0
    48a6:	da01      	bge.n	48ac <system_gclk_is_syncing+0x14>
		return true;
    48a8:	2301      	movs	r3, #1
    48aa:	e000      	b.n	48ae <system_gclk_is_syncing+0x16>
	}

	return false;
    48ac:	2300      	movs	r3, #0
}
    48ae:	0018      	movs	r0, r3
    48b0:	46bd      	mov	sp, r7
    48b2:	bd80      	pop	{r7, pc}
    48b4:	40000c00 	.word	0x40000c00

000048b8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    48b8:	b580      	push	{r7, lr}
    48ba:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    48bc:	2108      	movs	r1, #8
    48be:	2000      	movs	r0, #0
    48c0:	f7ff ffac 	bl	481c <system_apb_clock_set_mask>

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    48c4:	4b06      	ldr	r3, [pc, #24]	; (48e0 <system_gclk_init+0x28>)
    48c6:	2201      	movs	r2, #1
    48c8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    48ca:	46c0      	nop			; (mov r8, r8)
    48cc:	4b04      	ldr	r3, [pc, #16]	; (48e0 <system_gclk_init+0x28>)
    48ce:	781b      	ldrb	r3, [r3, #0]
    48d0:	b2db      	uxtb	r3, r3
    48d2:	001a      	movs	r2, r3
    48d4:	2301      	movs	r3, #1
    48d6:	4013      	ands	r3, r2
    48d8:	d1f8      	bne.n	48cc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    48da:	46c0      	nop			; (mov r8, r8)
    48dc:	46bd      	mov	sp, r7
    48de:	bd80      	pop	{r7, pc}
    48e0:	40000c00 	.word	0x40000c00

000048e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    48e4:	b580      	push	{r7, lr}
    48e6:	b086      	sub	sp, #24
    48e8:	af00      	add	r7, sp, #0
    48ea:	0002      	movs	r2, r0
    48ec:	6039      	str	r1, [r7, #0]
    48ee:	1dfb      	adds	r3, r7, #7
    48f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    48f2:	1dfb      	adds	r3, r7, #7
    48f4:	781b      	ldrb	r3, [r3, #0]
    48f6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    48f8:	1dfb      	adds	r3, r7, #7
    48fa:	781b      	ldrb	r3, [r3, #0]
    48fc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    48fe:	683b      	ldr	r3, [r7, #0]
    4900:	781b      	ldrb	r3, [r3, #0]
    4902:	021b      	lsls	r3, r3, #8
    4904:	001a      	movs	r2, r3
    4906:	697b      	ldr	r3, [r7, #20]
    4908:	4313      	orrs	r3, r2
    490a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    490c:	683b      	ldr	r3, [r7, #0]
    490e:	785b      	ldrb	r3, [r3, #1]
    4910:	2b00      	cmp	r3, #0
    4912:	d004      	beq.n	491e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4914:	697b      	ldr	r3, [r7, #20]
    4916:	2280      	movs	r2, #128	; 0x80
    4918:	02d2      	lsls	r2, r2, #11
    491a:	4313      	orrs	r3, r2
    491c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    491e:	683b      	ldr	r3, [r7, #0]
    4920:	7a5b      	ldrb	r3, [r3, #9]
    4922:	2b00      	cmp	r3, #0
    4924:	d004      	beq.n	4930 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4926:	697b      	ldr	r3, [r7, #20]
    4928:	2280      	movs	r2, #128	; 0x80
    492a:	0312      	lsls	r2, r2, #12
    492c:	4313      	orrs	r3, r2
    492e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4930:	683b      	ldr	r3, [r7, #0]
    4932:	685b      	ldr	r3, [r3, #4]
    4934:	2b01      	cmp	r3, #1
    4936:	d92c      	bls.n	4992 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4938:	683b      	ldr	r3, [r7, #0]
    493a:	685a      	ldr	r2, [r3, #4]
    493c:	683b      	ldr	r3, [r7, #0]
    493e:	685b      	ldr	r3, [r3, #4]
    4940:	3b01      	subs	r3, #1
    4942:	4013      	ands	r3, r2
    4944:	d11a      	bne.n	497c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4946:	2300      	movs	r3, #0
    4948:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    494a:	2302      	movs	r3, #2
    494c:	60bb      	str	r3, [r7, #8]
    494e:	e005      	b.n	495c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4950:	68fb      	ldr	r3, [r7, #12]
    4952:	3301      	adds	r3, #1
    4954:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4956:	68bb      	ldr	r3, [r7, #8]
    4958:	005b      	lsls	r3, r3, #1
    495a:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    495c:	683b      	ldr	r3, [r7, #0]
    495e:	685a      	ldr	r2, [r3, #4]
    4960:	68bb      	ldr	r3, [r7, #8]
    4962:	429a      	cmp	r2, r3
    4964:	d8f4      	bhi.n	4950 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4966:	68fb      	ldr	r3, [r7, #12]
    4968:	021b      	lsls	r3, r3, #8
    496a:	693a      	ldr	r2, [r7, #16]
    496c:	4313      	orrs	r3, r2
    496e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4970:	697b      	ldr	r3, [r7, #20]
    4972:	2280      	movs	r2, #128	; 0x80
    4974:	0352      	lsls	r2, r2, #13
    4976:	4313      	orrs	r3, r2
    4978:	617b      	str	r3, [r7, #20]
    497a:	e00a      	b.n	4992 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    497c:	683b      	ldr	r3, [r7, #0]
    497e:	685b      	ldr	r3, [r3, #4]
    4980:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4982:	693a      	ldr	r2, [r7, #16]
    4984:	4313      	orrs	r3, r2
    4986:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4988:	697b      	ldr	r3, [r7, #20]
    498a:	2280      	movs	r2, #128	; 0x80
    498c:	0292      	lsls	r2, r2, #10
    498e:	4313      	orrs	r3, r2
    4990:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4992:	683b      	ldr	r3, [r7, #0]
    4994:	7a1b      	ldrb	r3, [r3, #8]
    4996:	2b00      	cmp	r3, #0
    4998:	d004      	beq.n	49a4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    499a:	697b      	ldr	r3, [r7, #20]
    499c:	2280      	movs	r2, #128	; 0x80
    499e:	0392      	lsls	r2, r2, #14
    49a0:	4313      	orrs	r3, r2
    49a2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    49a4:	46c0      	nop			; (mov r8, r8)
    49a6:	f7ff ff77 	bl	4898 <system_gclk_is_syncing>
    49aa:	1e03      	subs	r3, r0, #0
    49ac:	d1fb      	bne.n	49a6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    49ae:	f7ff ff63 	bl	4878 <system_interrupt_enter_critical_section>

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49b2:	4a10      	ldr	r2, [pc, #64]	; (49f4 <system_gclk_gen_set_config+0x110>)
    49b4:	1dfb      	adds	r3, r7, #7
    49b6:	781b      	ldrb	r3, [r3, #0]
    49b8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    49ba:	46c0      	nop			; (mov r8, r8)
    49bc:	f7ff ff6c 	bl	4898 <system_gclk_is_syncing>
    49c0:	1e03      	subs	r3, r0, #0
    49c2:	d1fb      	bne.n	49bc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    49c4:	4b0c      	ldr	r3, [pc, #48]	; (49f8 <system_gclk_gen_set_config+0x114>)
    49c6:	693a      	ldr	r2, [r7, #16]
    49c8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    49ca:	46c0      	nop			; (mov r8, r8)
    49cc:	f7ff ff64 	bl	4898 <system_gclk_is_syncing>
    49d0:	1e03      	subs	r3, r0, #0
    49d2:	d1fb      	bne.n	49cc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    49d4:	4b08      	ldr	r3, [pc, #32]	; (49f8 <system_gclk_gen_set_config+0x114>)
    49d6:	4a08      	ldr	r2, [pc, #32]	; (49f8 <system_gclk_gen_set_config+0x114>)
    49d8:	6851      	ldr	r1, [r2, #4]
    49da:	2280      	movs	r2, #128	; 0x80
    49dc:	0252      	lsls	r2, r2, #9
    49de:	4011      	ands	r1, r2
    49e0:	697a      	ldr	r2, [r7, #20]
    49e2:	430a      	orrs	r2, r1
    49e4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    49e6:	f7ff ff4f 	bl	4888 <system_interrupt_leave_critical_section>
}
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	46bd      	mov	sp, r7
    49ee:	b006      	add	sp, #24
    49f0:	bd80      	pop	{r7, pc}
    49f2:	46c0      	nop			; (mov r8, r8)
    49f4:	40000c08 	.word	0x40000c08
    49f8:	40000c00 	.word	0x40000c00

000049fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    49fc:	b580      	push	{r7, lr}
    49fe:	b082      	sub	sp, #8
    4a00:	af00      	add	r7, sp, #0
    4a02:	0002      	movs	r2, r0
    4a04:	1dfb      	adds	r3, r7, #7
    4a06:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4a08:	46c0      	nop			; (mov r8, r8)
    4a0a:	f7ff ff45 	bl	4898 <system_gclk_is_syncing>
    4a0e:	1e03      	subs	r3, r0, #0
    4a10:	d1fb      	bne.n	4a0a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4a12:	f7ff ff31 	bl	4878 <system_interrupt_enter_critical_section>

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4a16:	4a0b      	ldr	r2, [pc, #44]	; (4a44 <system_gclk_gen_enable+0x48>)
    4a18:	1dfb      	adds	r3, r7, #7
    4a1a:	781b      	ldrb	r3, [r3, #0]
    4a1c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	f7ff ff3a 	bl	4898 <system_gclk_is_syncing>
    4a24:	1e03      	subs	r3, r0, #0
    4a26:	d1fb      	bne.n	4a20 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4a28:	4b07      	ldr	r3, [pc, #28]	; (4a48 <system_gclk_gen_enable+0x4c>)
    4a2a:	4a07      	ldr	r2, [pc, #28]	; (4a48 <system_gclk_gen_enable+0x4c>)
    4a2c:	6852      	ldr	r2, [r2, #4]
    4a2e:	2180      	movs	r1, #128	; 0x80
    4a30:	0249      	lsls	r1, r1, #9
    4a32:	430a      	orrs	r2, r1
    4a34:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4a36:	f7ff ff27 	bl	4888 <system_interrupt_leave_critical_section>
}
    4a3a:	46c0      	nop			; (mov r8, r8)
    4a3c:	46bd      	mov	sp, r7
    4a3e:	b002      	add	sp, #8
    4a40:	bd80      	pop	{r7, pc}
    4a42:	46c0      	nop			; (mov r8, r8)
    4a44:	40000c04 	.word	0x40000c04
    4a48:	40000c00 	.word	0x40000c00

00004a4c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4a4c:	b580      	push	{r7, lr}
    4a4e:	b086      	sub	sp, #24
    4a50:	af00      	add	r7, sp, #0
    4a52:	0002      	movs	r2, r0
    4a54:	1dfb      	adds	r3, r7, #7
    4a56:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4a58:	46c0      	nop			; (mov r8, r8)
    4a5a:	f7ff ff1d 	bl	4898 <system_gclk_is_syncing>
    4a5e:	1e03      	subs	r3, r0, #0
    4a60:	d1fb      	bne.n	4a5a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4a62:	f7ff ff09 	bl	4878 <system_interrupt_enter_critical_section>

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4a66:	4a27      	ldr	r2, [pc, #156]	; (4b04 <system_gclk_gen_get_hz+0xb8>)
    4a68:	1dfb      	adds	r3, r7, #7
    4a6a:	781b      	ldrb	r3, [r3, #0]
    4a6c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4a6e:	46c0      	nop			; (mov r8, r8)
    4a70:	f7ff ff12 	bl	4898 <system_gclk_is_syncing>
    4a74:	1e03      	subs	r3, r0, #0
    4a76:	d1fb      	bne.n	4a70 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4a78:	4b23      	ldr	r3, [pc, #140]	; (4b08 <system_gclk_gen_get_hz+0xbc>)
    4a7a:	685b      	ldr	r3, [r3, #4]
    4a7c:	04db      	lsls	r3, r3, #19
    4a7e:	0edb      	lsrs	r3, r3, #27
    4a80:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4a82:	0018      	movs	r0, r3
    4a84:	f7ff fb56 	bl	4134 <system_clock_source_get_hz>
    4a88:	0003      	movs	r3, r0
    4a8a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4a8c:	4a1d      	ldr	r2, [pc, #116]	; (4b04 <system_gclk_gen_get_hz+0xb8>)
    4a8e:	1dfb      	adds	r3, r7, #7
    4a90:	781b      	ldrb	r3, [r3, #0]
    4a92:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4a94:	4b1c      	ldr	r3, [pc, #112]	; (4b08 <system_gclk_gen_get_hz+0xbc>)
    4a96:	685b      	ldr	r3, [r3, #4]
    4a98:	02db      	lsls	r3, r3, #11
    4a9a:	0fdb      	lsrs	r3, r3, #31
    4a9c:	b2da      	uxtb	r2, r3
    4a9e:	2313      	movs	r3, #19
    4aa0:	18fb      	adds	r3, r7, r3
    4aa2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4aa4:	4a19      	ldr	r2, [pc, #100]	; (4b0c <system_gclk_gen_get_hz+0xc0>)
    4aa6:	1dfb      	adds	r3, r7, #7
    4aa8:	781b      	ldrb	r3, [r3, #0]
    4aaa:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4aac:	46c0      	nop			; (mov r8, r8)
    4aae:	f7ff fef3 	bl	4898 <system_gclk_is_syncing>
    4ab2:	1e03      	subs	r3, r0, #0
    4ab4:	d1fb      	bne.n	4aae <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4ab6:	4b14      	ldr	r3, [pc, #80]	; (4b08 <system_gclk_gen_get_hz+0xbc>)
    4ab8:	689b      	ldr	r3, [r3, #8]
    4aba:	021b      	lsls	r3, r3, #8
    4abc:	0c1b      	lsrs	r3, r3, #16
    4abe:	b29b      	uxth	r3, r3
    4ac0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4ac2:	f7ff fee1 	bl	4888 <system_interrupt_leave_critical_section>

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4ac6:	2313      	movs	r3, #19
    4ac8:	18fb      	adds	r3, r7, r3
    4aca:	781b      	ldrb	r3, [r3, #0]
    4acc:	2b00      	cmp	r3, #0
    4ace:	d109      	bne.n	4ae4 <system_gclk_gen_get_hz+0x98>
    4ad0:	68fb      	ldr	r3, [r7, #12]
    4ad2:	2b01      	cmp	r3, #1
    4ad4:	d906      	bls.n	4ae4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    4ad6:	68f9      	ldr	r1, [r7, #12]
    4ad8:	6978      	ldr	r0, [r7, #20]
    4ada:	f01e fcdf 	bl	2349c <__aeabi_uidiv>
    4ade:	0003      	movs	r3, r0
    4ae0:	617b      	str	r3, [r7, #20]
    4ae2:	e00a      	b.n	4afa <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4ae4:	2313      	movs	r3, #19
    4ae6:	18fb      	adds	r3, r7, r3
    4ae8:	781b      	ldrb	r3, [r3, #0]
    4aea:	2b00      	cmp	r3, #0
    4aec:	d005      	beq.n	4afa <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    4aee:	68fb      	ldr	r3, [r7, #12]
    4af0:	3301      	adds	r3, #1
    4af2:	697a      	ldr	r2, [r7, #20]
    4af4:	40da      	lsrs	r2, r3
    4af6:	0013      	movs	r3, r2
    4af8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4afa:	697b      	ldr	r3, [r7, #20]
}
    4afc:	0018      	movs	r0, r3
    4afe:	46bd      	mov	sp, r7
    4b00:	b006      	add	sp, #24
    4b02:	bd80      	pop	{r7, pc}
    4b04:	40000c04 	.word	0x40000c04
    4b08:	40000c00 	.word	0x40000c00
    4b0c:	40000c08 	.word	0x40000c08

00004b10 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4b10:	b580      	push	{r7, lr}
    4b12:	b084      	sub	sp, #16
    4b14:	af00      	add	r7, sp, #0
    4b16:	0002      	movs	r2, r0
    4b18:	6039      	str	r1, [r7, #0]
    4b1a:	1dfb      	adds	r3, r7, #7
    4b1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4b1e:	1dfb      	adds	r3, r7, #7
    4b20:	781b      	ldrb	r3, [r3, #0]
    4b22:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4b24:	683b      	ldr	r3, [r7, #0]
    4b26:	781b      	ldrb	r3, [r3, #0]
    4b28:	021b      	lsls	r3, r3, #8
    4b2a:	001a      	movs	r2, r3
    4b2c:	68fb      	ldr	r3, [r7, #12]
    4b2e:	4313      	orrs	r3, r2
    4b30:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4b32:	1dfb      	adds	r3, r7, #7
    4b34:	781b      	ldrb	r3, [r3, #0]
    4b36:	0018      	movs	r0, r3
    4b38:	f000 f82a 	bl	4b90 <system_gclk_chan_disable>

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4b3c:	4b03      	ldr	r3, [pc, #12]	; (4b4c <system_gclk_chan_set_config+0x3c>)
    4b3e:	68fa      	ldr	r2, [r7, #12]
    4b40:	b292      	uxth	r2, r2
    4b42:	805a      	strh	r2, [r3, #2]
}
    4b44:	46c0      	nop			; (mov r8, r8)
    4b46:	46bd      	mov	sp, r7
    4b48:	b004      	add	sp, #16
    4b4a:	bd80      	pop	{r7, pc}
    4b4c:	40000c00 	.word	0x40000c00

00004b50 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4b50:	b580      	push	{r7, lr}
    4b52:	b082      	sub	sp, #8
    4b54:	af00      	add	r7, sp, #0
    4b56:	0002      	movs	r2, r0
    4b58:	1dfb      	adds	r3, r7, #7
    4b5a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4b5c:	f7ff fe8c 	bl	4878 <system_interrupt_enter_critical_section>

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4b60:	4a09      	ldr	r2, [pc, #36]	; (4b88 <system_gclk_chan_enable+0x38>)
    4b62:	1dfb      	adds	r3, r7, #7
    4b64:	781b      	ldrb	r3, [r3, #0]
    4b66:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4b68:	4908      	ldr	r1, [pc, #32]	; (4b8c <system_gclk_chan_enable+0x3c>)
    4b6a:	4b08      	ldr	r3, [pc, #32]	; (4b8c <system_gclk_chan_enable+0x3c>)
    4b6c:	885b      	ldrh	r3, [r3, #2]
    4b6e:	b29b      	uxth	r3, r3
    4b70:	2280      	movs	r2, #128	; 0x80
    4b72:	01d2      	lsls	r2, r2, #7
    4b74:	4313      	orrs	r3, r2
    4b76:	b29b      	uxth	r3, r3
    4b78:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4b7a:	f7ff fe85 	bl	4888 <system_interrupt_leave_critical_section>
}
    4b7e:	46c0      	nop			; (mov r8, r8)
    4b80:	46bd      	mov	sp, r7
    4b82:	b002      	add	sp, #8
    4b84:	bd80      	pop	{r7, pc}
    4b86:	46c0      	nop			; (mov r8, r8)
    4b88:	40000c02 	.word	0x40000c02
    4b8c:	40000c00 	.word	0x40000c00

00004b90 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4b90:	b580      	push	{r7, lr}
    4b92:	b084      	sub	sp, #16
    4b94:	af00      	add	r7, sp, #0
    4b96:	0002      	movs	r2, r0
    4b98:	1dfb      	adds	r3, r7, #7
    4b9a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4b9c:	f7ff fe6c 	bl	4878 <system_interrupt_enter_critical_section>

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4ba0:	4a1b      	ldr	r2, [pc, #108]	; (4c10 <system_gclk_chan_disable+0x80>)
    4ba2:	1dfb      	adds	r3, r7, #7
    4ba4:	781b      	ldrb	r3, [r3, #0]
    4ba6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4ba8:	4b1a      	ldr	r3, [pc, #104]	; (4c14 <system_gclk_chan_disable+0x84>)
    4baa:	885b      	ldrh	r3, [r3, #2]
    4bac:	051b      	lsls	r3, r3, #20
    4bae:	0f1b      	lsrs	r3, r3, #28
    4bb0:	b2db      	uxtb	r3, r3
    4bb2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4bb4:	4a17      	ldr	r2, [pc, #92]	; (4c14 <system_gclk_chan_disable+0x84>)
    4bb6:	8853      	ldrh	r3, [r2, #2]
    4bb8:	4917      	ldr	r1, [pc, #92]	; (4c18 <system_gclk_chan_disable+0x88>)
    4bba:	400b      	ands	r3, r1
    4bbc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4bbe:	4a15      	ldr	r2, [pc, #84]	; (4c14 <system_gclk_chan_disable+0x84>)
    4bc0:	4b14      	ldr	r3, [pc, #80]	; (4c14 <system_gclk_chan_disable+0x84>)
    4bc2:	885b      	ldrh	r3, [r3, #2]
    4bc4:	b29b      	uxth	r3, r3
    4bc6:	4915      	ldr	r1, [pc, #84]	; (4c1c <system_gclk_chan_disable+0x8c>)
    4bc8:	400b      	ands	r3, r1
    4bca:	b29b      	uxth	r3, r3
    4bcc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4bce:	46c0      	nop			; (mov r8, r8)
    4bd0:	4b10      	ldr	r3, [pc, #64]	; (4c14 <system_gclk_chan_disable+0x84>)
    4bd2:	885b      	ldrh	r3, [r3, #2]
    4bd4:	b29b      	uxth	r3, r3
    4bd6:	001a      	movs	r2, r3
    4bd8:	2380      	movs	r3, #128	; 0x80
    4bda:	01db      	lsls	r3, r3, #7
    4bdc:	4013      	ands	r3, r2
    4bde:	d1f7      	bne.n	4bd0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4be0:	4a0c      	ldr	r2, [pc, #48]	; (4c14 <system_gclk_chan_disable+0x84>)
    4be2:	68fb      	ldr	r3, [r7, #12]
    4be4:	b2db      	uxtb	r3, r3
    4be6:	1c19      	adds	r1, r3, #0
    4be8:	230f      	movs	r3, #15
    4bea:	400b      	ands	r3, r1
    4bec:	b2d9      	uxtb	r1, r3
    4bee:	8853      	ldrh	r3, [r2, #2]
    4bf0:	1c08      	adds	r0, r1, #0
    4bf2:	210f      	movs	r1, #15
    4bf4:	4001      	ands	r1, r0
    4bf6:	0208      	lsls	r0, r1, #8
    4bf8:	4907      	ldr	r1, [pc, #28]	; (4c18 <system_gclk_chan_disable+0x88>)
    4bfa:	400b      	ands	r3, r1
    4bfc:	1c19      	adds	r1, r3, #0
    4bfe:	1c03      	adds	r3, r0, #0
    4c00:	430b      	orrs	r3, r1
    4c02:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4c04:	f7ff fe40 	bl	4888 <system_interrupt_leave_critical_section>
}
    4c08:	46c0      	nop			; (mov r8, r8)
    4c0a:	46bd      	mov	sp, r7
    4c0c:	b004      	add	sp, #16
    4c0e:	bd80      	pop	{r7, pc}
    4c10:	40000c02 	.word	0x40000c02
    4c14:	40000c00 	.word	0x40000c00
    4c18:	fffff0ff 	.word	0xfffff0ff
    4c1c:	ffffbfff 	.word	0xffffbfff

00004c20 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4c20:	b580      	push	{r7, lr}
    4c22:	b084      	sub	sp, #16
    4c24:	af00      	add	r7, sp, #0
    4c26:	0002      	movs	r2, r0
    4c28:	1dfb      	adds	r3, r7, #7
    4c2a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4c2c:	f7ff fe24 	bl	4878 <system_interrupt_enter_critical_section>

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4c30:	4a0c      	ldr	r2, [pc, #48]	; (4c64 <system_gclk_chan_get_hz+0x44>)
    4c32:	1dfb      	adds	r3, r7, #7
    4c34:	781b      	ldrb	r3, [r3, #0]
    4c36:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4c38:	4b0b      	ldr	r3, [pc, #44]	; (4c68 <system_gclk_chan_get_hz+0x48>)
    4c3a:	885b      	ldrh	r3, [r3, #2]
    4c3c:	051b      	lsls	r3, r3, #20
    4c3e:	0f1b      	lsrs	r3, r3, #28
    4c40:	b2da      	uxtb	r2, r3
    4c42:	230f      	movs	r3, #15
    4c44:	18fb      	adds	r3, r7, r3
    4c46:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4c48:	f7ff fe1e 	bl	4888 <system_interrupt_leave_critical_section>

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4c4c:	230f      	movs	r3, #15
    4c4e:	18fb      	adds	r3, r7, r3
    4c50:	781b      	ldrb	r3, [r3, #0]
    4c52:	0018      	movs	r0, r3
    4c54:	f7ff fefa 	bl	4a4c <system_gclk_gen_get_hz>
    4c58:	0003      	movs	r3, r0
}
    4c5a:	0018      	movs	r0, r3
    4c5c:	46bd      	mov	sp, r7
    4c5e:	b004      	add	sp, #16
    4c60:	bd80      	pop	{r7, pc}
    4c62:	46c0      	nop			; (mov r8, r8)
    4c64:	40000c02 	.word	0x40000c02
    4c68:	40000c00 	.word	0x40000c00

00004c6c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4c6c:	b580      	push	{r7, lr}
    4c6e:	b084      	sub	sp, #16
    4c70:	af00      	add	r7, sp, #0
    4c72:	0002      	movs	r2, r0
    4c74:	1dfb      	adds	r3, r7, #7
    4c76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4c78:	230f      	movs	r3, #15
    4c7a:	18fb      	adds	r3, r7, r3
    4c7c:	1dfa      	adds	r2, r7, #7
    4c7e:	7812      	ldrb	r2, [r2, #0]
    4c80:	09d2      	lsrs	r2, r2, #7
    4c82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4c84:	230e      	movs	r3, #14
    4c86:	18fb      	adds	r3, r7, r3
    4c88:	1dfa      	adds	r2, r7, #7
    4c8a:	7812      	ldrb	r2, [r2, #0]
    4c8c:	0952      	lsrs	r2, r2, #5
    4c8e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4c90:	4b0d      	ldr	r3, [pc, #52]	; (4cc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4c92:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4c94:	230f      	movs	r3, #15
    4c96:	18fb      	adds	r3, r7, r3
    4c98:	781b      	ldrb	r3, [r3, #0]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d10f      	bne.n	4cbe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4c9e:	230f      	movs	r3, #15
    4ca0:	18fb      	adds	r3, r7, r3
    4ca2:	781b      	ldrb	r3, [r3, #0]
    4ca4:	009b      	lsls	r3, r3, #2
    4ca6:	2210      	movs	r2, #16
    4ca8:	4694      	mov	ip, r2
    4caa:	44bc      	add	ip, r7
    4cac:	4463      	add	r3, ip
    4cae:	3b08      	subs	r3, #8
    4cb0:	681a      	ldr	r2, [r3, #0]
    4cb2:	230e      	movs	r3, #14
    4cb4:	18fb      	adds	r3, r7, r3
    4cb6:	781b      	ldrb	r3, [r3, #0]
    4cb8:	01db      	lsls	r3, r3, #7
    4cba:	18d3      	adds	r3, r2, r3
    4cbc:	e000      	b.n	4cc0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4cbe:	2300      	movs	r3, #0
	}
}
    4cc0:	0018      	movs	r0, r3
    4cc2:	46bd      	mov	sp, r7
    4cc4:	b004      	add	sp, #16
    4cc6:	bd80      	pop	{r7, pc}
    4cc8:	41004400 	.word	0x41004400

00004ccc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4ccc:	b580      	push	{r7, lr}
    4cce:	b088      	sub	sp, #32
    4cd0:	af00      	add	r7, sp, #0
    4cd2:	60f8      	str	r0, [r7, #12]
    4cd4:	60b9      	str	r1, [r7, #8]
    4cd6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4cd8:	2300      	movs	r3, #0
    4cda:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	78db      	ldrb	r3, [r3, #3]
    4ce0:	2201      	movs	r2, #1
    4ce2:	4053      	eors	r3, r2
    4ce4:	b2db      	uxtb	r3, r3
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d035      	beq.n	4d56 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	781b      	ldrb	r3, [r3, #0]
    4cee:	2b80      	cmp	r3, #128	; 0x80
    4cf0:	d00b      	beq.n	4d0a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    4cf2:	69fb      	ldr	r3, [r7, #28]
    4cf4:	2280      	movs	r2, #128	; 0x80
    4cf6:	0252      	lsls	r2, r2, #9
    4cf8:	4313      	orrs	r3, r2
    4cfa:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4cfc:	687b      	ldr	r3, [r7, #4]
    4cfe:	781b      	ldrb	r3, [r3, #0]
    4d00:	061b      	lsls	r3, r3, #24
    4d02:	001a      	movs	r2, r3
    4d04:	69fb      	ldr	r3, [r7, #28]
    4d06:	4313      	orrs	r3, r2
    4d08:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	785b      	ldrb	r3, [r3, #1]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d003      	beq.n	4d1a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4d16:	2b02      	cmp	r3, #2
    4d18:	d110      	bne.n	4d3c <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4d1a:	69fb      	ldr	r3, [r7, #28]
    4d1c:	2280      	movs	r2, #128	; 0x80
    4d1e:	0292      	lsls	r2, r2, #10
    4d20:	4313      	orrs	r3, r2
    4d22:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	789b      	ldrb	r3, [r3, #2]
    4d28:	2b00      	cmp	r3, #0
    4d2a:	d004      	beq.n	4d36 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4d2c:	69fb      	ldr	r3, [r7, #28]
    4d2e:	2280      	movs	r2, #128	; 0x80
    4d30:	02d2      	lsls	r2, r2, #11
    4d32:	4313      	orrs	r3, r2
    4d34:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4d36:	68fb      	ldr	r3, [r7, #12]
    4d38:	68ba      	ldr	r2, [r7, #8]
    4d3a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4d3c:	687b      	ldr	r3, [r7, #4]
    4d3e:	785b      	ldrb	r3, [r3, #1]
    4d40:	2b01      	cmp	r3, #1
    4d42:	d003      	beq.n	4d4c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4d44:	687b      	ldr	r3, [r7, #4]
    4d46:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4d48:	2b02      	cmp	r3, #2
    4d4a:	d107      	bne.n	4d5c <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4d4c:	69fb      	ldr	r3, [r7, #28]
    4d4e:	4a22      	ldr	r2, [pc, #136]	; (4dd8 <_system_pinmux_config+0x10c>)
    4d50:	4013      	ands	r3, r2
    4d52:	61fb      	str	r3, [r7, #28]
    4d54:	e002      	b.n	4d5c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4d56:	68fb      	ldr	r3, [r7, #12]
    4d58:	68ba      	ldr	r2, [r7, #8]
    4d5a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4d5c:	68bb      	ldr	r3, [r7, #8]
    4d5e:	041b      	lsls	r3, r3, #16
    4d60:	0c1b      	lsrs	r3, r3, #16
    4d62:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4d64:	68bb      	ldr	r3, [r7, #8]
    4d66:	0c1b      	lsrs	r3, r3, #16
    4d68:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4d6a:	69ba      	ldr	r2, [r7, #24]
    4d6c:	69fb      	ldr	r3, [r7, #28]
    4d6e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4d70:	22a0      	movs	r2, #160	; 0xa0
    4d72:	05d2      	lsls	r2, r2, #23
    4d74:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4d76:	68fb      	ldr	r3, [r7, #12]
    4d78:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4d7a:	697a      	ldr	r2, [r7, #20]
    4d7c:	69fb      	ldr	r3, [r7, #28]
    4d7e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4d80:	22d0      	movs	r2, #208	; 0xd0
    4d82:	0612      	lsls	r2, r2, #24
    4d84:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4d86:	68fb      	ldr	r3, [r7, #12]
    4d88:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	78db      	ldrb	r3, [r3, #3]
    4d8e:	2201      	movs	r2, #1
    4d90:	4053      	eors	r3, r2
    4d92:	b2db      	uxtb	r3, r3
    4d94:	2b00      	cmp	r3, #0
    4d96:	d01a      	beq.n	4dce <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4d98:	69fa      	ldr	r2, [r7, #28]
    4d9a:	2380      	movs	r3, #128	; 0x80
    4d9c:	02db      	lsls	r3, r3, #11
    4d9e:	4013      	ands	r3, r2
    4da0:	d00a      	beq.n	4db8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	789b      	ldrb	r3, [r3, #2]
    4da6:	2b01      	cmp	r3, #1
    4da8:	d103      	bne.n	4db2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    4daa:	68fb      	ldr	r3, [r7, #12]
    4dac:	68ba      	ldr	r2, [r7, #8]
    4dae:	619a      	str	r2, [r3, #24]
    4db0:	e002      	b.n	4db8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    4db2:	68fb      	ldr	r3, [r7, #12]
    4db4:	68ba      	ldr	r2, [r7, #8]
    4db6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	785b      	ldrb	r3, [r3, #1]
    4dbc:	2b01      	cmp	r3, #1
    4dbe:	d003      	beq.n	4dc8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4dc0:	687b      	ldr	r3, [r7, #4]
    4dc2:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4dc4:	2b02      	cmp	r3, #2
    4dc6:	d102      	bne.n	4dce <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4dc8:	68fb      	ldr	r3, [r7, #12]
    4dca:	68ba      	ldr	r2, [r7, #8]
    4dcc:	609a      	str	r2, [r3, #8]
		}
	}
}
    4dce:	46c0      	nop			; (mov r8, r8)
    4dd0:	46bd      	mov	sp, r7
    4dd2:	b008      	add	sp, #32
    4dd4:	bd80      	pop	{r7, pc}
    4dd6:	46c0      	nop			; (mov r8, r8)
    4dd8:	fffbffff 	.word	0xfffbffff

00004ddc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4ddc:	b580      	push	{r7, lr}
    4dde:	b084      	sub	sp, #16
    4de0:	af00      	add	r7, sp, #0
    4de2:	0002      	movs	r2, r0
    4de4:	6039      	str	r1, [r7, #0]
    4de6:	1dfb      	adds	r3, r7, #7
    4de8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4dea:	1dfb      	adds	r3, r7, #7
    4dec:	781b      	ldrb	r3, [r3, #0]
    4dee:	0018      	movs	r0, r3
    4df0:	f7ff ff3c 	bl	4c6c <system_pinmux_get_group_from_gpio_pin>
    4df4:	0003      	movs	r3, r0
    4df6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4df8:	1dfb      	adds	r3, r7, #7
    4dfa:	781b      	ldrb	r3, [r3, #0]
    4dfc:	221f      	movs	r2, #31
    4dfe:	4013      	ands	r3, r2
    4e00:	2201      	movs	r2, #1
    4e02:	409a      	lsls	r2, r3
    4e04:	0013      	movs	r3, r2
    4e06:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4e08:	683a      	ldr	r2, [r7, #0]
    4e0a:	68b9      	ldr	r1, [r7, #8]
    4e0c:	68fb      	ldr	r3, [r7, #12]
    4e0e:	0018      	movs	r0, r3
    4e10:	f7ff ff5c 	bl	4ccc <_system_pinmux_config>
}
    4e14:	46c0      	nop			; (mov r8, r8)
    4e16:	46bd      	mov	sp, r7
    4e18:	b004      	add	sp, #16
    4e1a:	bd80      	pop	{r7, pc}

00004e1c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4e1c:	b580      	push	{r7, lr}
    4e1e:	af00      	add	r7, sp, #0
	return;
    4e20:	46c0      	nop			; (mov r8, r8)
}
    4e22:	46bd      	mov	sp, r7
    4e24:	bd80      	pop	{r7, pc}
    4e26:	46c0      	nop			; (mov r8, r8)

00004e28 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4e28:	b580      	push	{r7, lr}
    4e2a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4e2c:	f7ff fbc0 	bl	45b0 <system_clock_init>

	/* Initialize board hardware */
	system_board_init();
    4e30:	f7fb ffc6 	bl	dc0 <system_board_init>

	/* Initialize EVSYS hardware */
	_system_events_init();
    4e34:	f7ff fff2 	bl	4e1c <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    4e38:	f7ff fff0 	bl	4e1c <_system_dummy_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4e3c:	f7ff ffee 	bl	4e1c <_system_dummy_init>
}
    4e40:	46c0      	nop			; (mov r8, r8)
    4e42:	46bd      	mov	sp, r7
    4e44:	bd80      	pop	{r7, pc}
    4e46:	46c0      	nop			; (mov r8, r8)

00004e48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4e48:	b580      	push	{r7, lr}
    4e4a:	b082      	sub	sp, #8
    4e4c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4e4e:	4b2f      	ldr	r3, [pc, #188]	; (4f0c <Reset_Handler+0xc4>)
    4e50:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4e52:	4b2f      	ldr	r3, [pc, #188]	; (4f10 <Reset_Handler+0xc8>)
    4e54:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4e56:	687a      	ldr	r2, [r7, #4]
    4e58:	683b      	ldr	r3, [r7, #0]
    4e5a:	429a      	cmp	r2, r3
    4e5c:	d00c      	beq.n	4e78 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4e5e:	e007      	b.n	4e70 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4e60:	683b      	ldr	r3, [r7, #0]
    4e62:	1d1a      	adds	r2, r3, #4
    4e64:	603a      	str	r2, [r7, #0]
    4e66:	687a      	ldr	r2, [r7, #4]
    4e68:	1d11      	adds	r1, r2, #4
    4e6a:	6079      	str	r1, [r7, #4]
    4e6c:	6812      	ldr	r2, [r2, #0]
    4e6e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4e70:	683a      	ldr	r2, [r7, #0]
    4e72:	4b28      	ldr	r3, [pc, #160]	; (4f14 <Reset_Handler+0xcc>)
    4e74:	429a      	cmp	r2, r3
    4e76:	d3f3      	bcc.n	4e60 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4e78:	4b27      	ldr	r3, [pc, #156]	; (4f18 <Reset_Handler+0xd0>)
    4e7a:	603b      	str	r3, [r7, #0]
    4e7c:	e004      	b.n	4e88 <Reset_Handler+0x40>
                *pDest++ = 0;
    4e7e:	683b      	ldr	r3, [r7, #0]
    4e80:	1d1a      	adds	r2, r3, #4
    4e82:	603a      	str	r2, [r7, #0]
    4e84:	2200      	movs	r2, #0
    4e86:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4e88:	683a      	ldr	r2, [r7, #0]
    4e8a:	4b24      	ldr	r3, [pc, #144]	; (4f1c <Reset_Handler+0xd4>)
    4e8c:	429a      	cmp	r2, r3
    4e8e:	d3f6      	bcc.n	4e7e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4e90:	4b23      	ldr	r3, [pc, #140]	; (4f20 <Reset_Handler+0xd8>)
    4e92:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4e94:	4b23      	ldr	r3, [pc, #140]	; (4f24 <Reset_Handler+0xdc>)
    4e96:	687a      	ldr	r2, [r7, #4]
    4e98:	21ff      	movs	r1, #255	; 0xff
    4e9a:	438a      	bics	r2, r1
    4e9c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4e9e:	4a22      	ldr	r2, [pc, #136]	; (4f28 <Reset_Handler+0xe0>)
    4ea0:	2390      	movs	r3, #144	; 0x90
    4ea2:	005b      	lsls	r3, r3, #1
    4ea4:	2102      	movs	r1, #2
    4ea6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4ea8:	4a20      	ldr	r2, [pc, #128]	; (4f2c <Reset_Handler+0xe4>)
    4eaa:	78d3      	ldrb	r3, [r2, #3]
    4eac:	2103      	movs	r1, #3
    4eae:	438b      	bics	r3, r1
    4eb0:	1c19      	adds	r1, r3, #0
    4eb2:	2302      	movs	r3, #2
    4eb4:	430b      	orrs	r3, r1
    4eb6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4eb8:	4a1c      	ldr	r2, [pc, #112]	; (4f2c <Reset_Handler+0xe4>)
    4eba:	78d3      	ldrb	r3, [r2, #3]
    4ebc:	210c      	movs	r1, #12
    4ebe:	438b      	bics	r3, r1
    4ec0:	1c19      	adds	r1, r3, #0
    4ec2:	2308      	movs	r3, #8
    4ec4:	430b      	orrs	r3, r1
    4ec6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    4ec8:	4a19      	ldr	r2, [pc, #100]	; (4f30 <Reset_Handler+0xe8>)
    4eca:	7b93      	ldrb	r3, [r2, #14]
    4ecc:	2130      	movs	r1, #48	; 0x30
    4ece:	438b      	bics	r3, r1
    4ed0:	1c19      	adds	r1, r3, #0
    4ed2:	2320      	movs	r3, #32
    4ed4:	430b      	orrs	r3, r1
    4ed6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4ed8:	4a15      	ldr	r2, [pc, #84]	; (4f30 <Reset_Handler+0xe8>)
    4eda:	7b93      	ldrb	r3, [r2, #14]
    4edc:	210c      	movs	r1, #12
    4ede:	438b      	bics	r3, r1
    4ee0:	1c19      	adds	r1, r3, #0
    4ee2:	2308      	movs	r3, #8
    4ee4:	430b      	orrs	r3, r1
    4ee6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4ee8:	4a11      	ldr	r2, [pc, #68]	; (4f30 <Reset_Handler+0xe8>)
    4eea:	7b93      	ldrb	r3, [r2, #14]
    4eec:	2103      	movs	r1, #3
    4eee:	438b      	bics	r3, r1
    4ef0:	1c19      	adds	r1, r3, #0
    4ef2:	2302      	movs	r3, #2
    4ef4:	430b      	orrs	r3, r1
    4ef6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4ef8:	4a0e      	ldr	r2, [pc, #56]	; (4f34 <Reset_Handler+0xec>)
    4efa:	6853      	ldr	r3, [r2, #4]
    4efc:	2180      	movs	r1, #128	; 0x80
    4efe:	430b      	orrs	r3, r1
    4f00:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4f02:	f020 fb83 	bl	2560c <__libc_init_array>

        /* Branch to main function */
        main();
    4f06:	f7fb fe41 	bl	b8c <main>

        /* Infinite loop */
        while (1);
    4f0a:	e7fe      	b.n	4f0a <Reset_Handler+0xc2>
    4f0c:	0002f090 	.word	0x0002f090
    4f10:	20000000 	.word	0x20000000
    4f14:	20000290 	.word	0x20000290
    4f18:	20000290 	.word	0x20000290
    4f1c:	20000540 	.word	0x20000540
    4f20:	00000000 	.word	0x00000000
    4f24:	e000ed00 	.word	0xe000ed00
    4f28:	41007000 	.word	0x41007000
    4f2c:	41005000 	.word	0x41005000
    4f30:	41004800 	.word	0x41004800
    4f34:	41004000 	.word	0x41004000

00004f38 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4f38:	b580      	push	{r7, lr}
    4f3a:	af00      	add	r7, sp, #0
        while (1) {
        }
    4f3c:	e7fe      	b.n	4f3c <Dummy_Handler+0x4>
    4f3e:	46c0      	nop			; (mov r8, r8)

00004f40 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4f40:	b580      	push	{r7, lr}
    4f42:	b086      	sub	sp, #24
    4f44:	af00      	add	r7, sp, #0
    4f46:	60f8      	str	r0, [r7, #12]
    4f48:	60b9      	str	r1, [r7, #8]
    4f4a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    4f4c:	2300      	movs	r3, #0
    4f4e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    4f50:	68fb      	ldr	r3, [r7, #12]
    4f52:	2b00      	cmp	r3, #0
    4f54:	d012      	beq.n	4f7c <_read+0x3c>
		return -1;
    4f56:	2301      	movs	r3, #1
    4f58:	425b      	negs	r3, r3
    4f5a:	e013      	b.n	4f84 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    4f5c:	4b0b      	ldr	r3, [pc, #44]	; (4f8c <_read+0x4c>)
    4f5e:	681a      	ldr	r2, [r3, #0]
    4f60:	4b0b      	ldr	r3, [pc, #44]	; (4f90 <_read+0x50>)
    4f62:	681b      	ldr	r3, [r3, #0]
    4f64:	68b9      	ldr	r1, [r7, #8]
    4f66:	0018      	movs	r0, r3
    4f68:	4790      	blx	r2
		ptr++;
    4f6a:	68bb      	ldr	r3, [r7, #8]
    4f6c:	3301      	adds	r3, #1
    4f6e:	60bb      	str	r3, [r7, #8]
		nChars++;
    4f70:	697b      	ldr	r3, [r7, #20]
    4f72:	3301      	adds	r3, #1
    4f74:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    4f76:	687b      	ldr	r3, [r7, #4]
    4f78:	3b01      	subs	r3, #1
    4f7a:	607b      	str	r3, [r7, #4]
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	2b00      	cmp	r3, #0
    4f80:	dcec      	bgt.n	4f5c <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    4f82:	697b      	ldr	r3, [r7, #20]
}
    4f84:	0018      	movs	r0, r3
    4f86:	46bd      	mov	sp, r7
    4f88:	b006      	add	sp, #24
    4f8a:	bd80      	pop	{r7, pc}
    4f8c:	200004f0 	.word	0x200004f0
    4f90:	200004f8 	.word	0x200004f8

00004f94 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4f94:	b580      	push	{r7, lr}
    4f96:	b086      	sub	sp, #24
    4f98:	af00      	add	r7, sp, #0
    4f9a:	60f8      	str	r0, [r7, #12]
    4f9c:	60b9      	str	r1, [r7, #8]
    4f9e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    4fa0:	2300      	movs	r3, #0
    4fa2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    4fa4:	68fb      	ldr	r3, [r7, #12]
    4fa6:	2b01      	cmp	r3, #1
    4fa8:	d01d      	beq.n	4fe6 <_write+0x52>
    4faa:	68fb      	ldr	r3, [r7, #12]
    4fac:	2b02      	cmp	r3, #2
    4fae:	d01a      	beq.n	4fe6 <_write+0x52>
    4fb0:	68fb      	ldr	r3, [r7, #12]
    4fb2:	2b03      	cmp	r3, #3
    4fb4:	d017      	beq.n	4fe6 <_write+0x52>
		return -1;
    4fb6:	2301      	movs	r3, #1
    4fb8:	425b      	negs	r3, r3
    4fba:	e018      	b.n	4fee <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    4fbc:	4b0e      	ldr	r3, [pc, #56]	; (4ff8 <_write+0x64>)
    4fbe:	681a      	ldr	r2, [r3, #0]
    4fc0:	4b0e      	ldr	r3, [pc, #56]	; (4ffc <_write+0x68>)
    4fc2:	6818      	ldr	r0, [r3, #0]
    4fc4:	68bb      	ldr	r3, [r7, #8]
    4fc6:	1c59      	adds	r1, r3, #1
    4fc8:	60b9      	str	r1, [r7, #8]
    4fca:	781b      	ldrb	r3, [r3, #0]
    4fcc:	0019      	movs	r1, r3
    4fce:	4790      	blx	r2
    4fd0:	1e03      	subs	r3, r0, #0
    4fd2:	da02      	bge.n	4fda <_write+0x46>
			return -1;
    4fd4:	2301      	movs	r3, #1
    4fd6:	425b      	negs	r3, r3
    4fd8:	e009      	b.n	4fee <_write+0x5a>
		}
		++nChars;
    4fda:	697b      	ldr	r3, [r7, #20]
    4fdc:	3301      	adds	r3, #1
    4fde:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    4fe0:	687b      	ldr	r3, [r7, #4]
    4fe2:	3b01      	subs	r3, #1
    4fe4:	607b      	str	r3, [r7, #4]
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d1e7      	bne.n	4fbc <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    4fec:	697b      	ldr	r3, [r7, #20]
}
    4fee:	0018      	movs	r0, r3
    4ff0:	46bd      	mov	sp, r7
    4ff2:	b006      	add	sp, #24
    4ff4:	bd80      	pop	{r7, pc}
    4ff6:	46c0      	nop			; (mov r8, r8)
    4ff8:	200004f4 	.word	0x200004f4
    4ffc:	200004f8 	.word	0x200004f8

00005000 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5000:	b580      	push	{r7, lr}
    5002:	b084      	sub	sp, #16
    5004:	af00      	add	r7, sp, #0
    5006:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5008:	4b0a      	ldr	r3, [pc, #40]	; (5034 <_sbrk+0x34>)
    500a:	681b      	ldr	r3, [r3, #0]
    500c:	2b00      	cmp	r3, #0
    500e:	d102      	bne.n	5016 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    5010:	4b08      	ldr	r3, [pc, #32]	; (5034 <_sbrk+0x34>)
    5012:	4a09      	ldr	r2, [pc, #36]	; (5038 <_sbrk+0x38>)
    5014:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    5016:	4b07      	ldr	r3, [pc, #28]	; (5034 <_sbrk+0x34>)
    5018:	681b      	ldr	r3, [r3, #0]
    501a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    501c:	4b05      	ldr	r3, [pc, #20]	; (5034 <_sbrk+0x34>)
    501e:	681a      	ldr	r2, [r3, #0]
    5020:	687b      	ldr	r3, [r7, #4]
    5022:	18d2      	adds	r2, r2, r3
    5024:	4b03      	ldr	r3, [pc, #12]	; (5034 <_sbrk+0x34>)
    5026:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    5028:	68fb      	ldr	r3, [r7, #12]
}
    502a:	0018      	movs	r0, r3
    502c:	46bd      	mov	sp, r7
    502e:	b004      	add	sp, #16
    5030:	bd80      	pop	{r7, pc}
    5032:	46c0      	nop			; (mov r8, r8)
    5034:	2000032c 	.word	0x2000032c
    5038:	20006540 	.word	0x20006540

0000503c <_close>:
{
	return -1;
}

extern int _close(int file)
{
    503c:	b580      	push	{r7, lr}
    503e:	b082      	sub	sp, #8
    5040:	af00      	add	r7, sp, #0
    5042:	6078      	str	r0, [r7, #4]
	return -1;
    5044:	2301      	movs	r3, #1
    5046:	425b      	negs	r3, r3
}
    5048:	0018      	movs	r0, r3
    504a:	46bd      	mov	sp, r7
    504c:	b002      	add	sp, #8
    504e:	bd80      	pop	{r7, pc}

00005050 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    5050:	b580      	push	{r7, lr}
    5052:	b082      	sub	sp, #8
    5054:	af00      	add	r7, sp, #0
    5056:	6078      	str	r0, [r7, #4]
    5058:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    505a:	683b      	ldr	r3, [r7, #0]
    505c:	2280      	movs	r2, #128	; 0x80
    505e:	0192      	lsls	r2, r2, #6
    5060:	605a      	str	r2, [r3, #4]

	return 0;
    5062:	2300      	movs	r3, #0
}
    5064:	0018      	movs	r0, r3
    5066:	46bd      	mov	sp, r7
    5068:	b002      	add	sp, #8
    506a:	bd80      	pop	{r7, pc}

0000506c <_isatty>:

extern int _isatty(int file)
{
    506c:	b580      	push	{r7, lr}
    506e:	b082      	sub	sp, #8
    5070:	af00      	add	r7, sp, #0
    5072:	6078      	str	r0, [r7, #4]
	return 1;
    5074:	2301      	movs	r3, #1
}
    5076:	0018      	movs	r0, r3
    5078:	46bd      	mov	sp, r7
    507a:	b002      	add	sp, #8
    507c:	bd80      	pop	{r7, pc}
    507e:	46c0      	nop			; (mov r8, r8)

00005080 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    5080:	b580      	push	{r7, lr}
    5082:	b084      	sub	sp, #16
    5084:	af00      	add	r7, sp, #0
    5086:	60f8      	str	r0, [r7, #12]
    5088:	60b9      	str	r1, [r7, #8]
    508a:	607a      	str	r2, [r7, #4]
	return 0;
    508c:	2300      	movs	r3, #0
}
    508e:	0018      	movs	r0, r3
    5090:	46bd      	mov	sp, r7
    5092:	b004      	add	sp, #16
    5094:	bd80      	pop	{r7, pc}
    5096:	46c0      	nop			; (mov r8, r8)

00005098 <Base64_Decode>:
                              46, 47, 48, 49, 50, 51
                            };


int Base64_Decode(const byte* in, word32 inLen, byte* out, word32* outLen)
{
    5098:	b580      	push	{r7, lr}
    509a:	b08c      	sub	sp, #48	; 0x30
    509c:	af00      	add	r7, sp, #0
    509e:	60f8      	str	r0, [r7, #12]
    50a0:	60b9      	str	r1, [r7, #8]
    50a2:	607a      	str	r2, [r7, #4]
    50a4:	603b      	str	r3, [r7, #0]
    word32 i = 0;
    50a6:	2300      	movs	r3, #0
    50a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    word32 j = 0;
    50aa:	2300      	movs	r3, #0
    50ac:	62bb      	str	r3, [r7, #40]	; 0x28
    word32 plainSz = inLen - ((inLen + (PEM_LINE_SZ - 1)) / PEM_LINE_SZ );
    50ae:	68bb      	ldr	r3, [r7, #8]
    50b0:	333f      	adds	r3, #63	; 0x3f
    50b2:	099b      	lsrs	r3, r3, #6
    50b4:	68ba      	ldr	r2, [r7, #8]
    50b6:	1ad3      	subs	r3, r2, r3
    50b8:	61bb      	str	r3, [r7, #24]
    const byte maxIdx = (byte)sizeof(base64Decode) + BASE64_MIN - 1;
    50ba:	2317      	movs	r3, #23
    50bc:	18fb      	adds	r3, r7, r3
    50be:	227a      	movs	r2, #122	; 0x7a
    50c0:	701a      	strb	r2, [r3, #0]

    plainSz = (plainSz * 3 + 3) / 4;
    50c2:	69bb      	ldr	r3, [r7, #24]
    50c4:	1c5a      	adds	r2, r3, #1
    50c6:	0013      	movs	r3, r2
    50c8:	005b      	lsls	r3, r3, #1
    50ca:	189b      	adds	r3, r3, r2
    50cc:	089b      	lsrs	r3, r3, #2
    50ce:	61bb      	str	r3, [r7, #24]
    if (plainSz > *outLen) return BAD_FUNC_ARG;
    50d0:	683b      	ldr	r3, [r7, #0]
    50d2:	681a      	ldr	r2, [r3, #0]
    50d4:	69bb      	ldr	r3, [r7, #24]
    50d6:	429a      	cmp	r2, r3
    50d8:	d300      	bcc.n	50dc <Base64_Decode+0x44>
    50da:	e150      	b.n	537e <Base64_Decode+0x2e6>
    50dc:	23ad      	movs	r3, #173	; 0xad
    50de:	425b      	negs	r3, r3
    50e0:	e159      	b.n	5396 <Base64_Decode+0x2fe>

    while (inLen > 3) {
        byte b1, b2, b3;
        byte e1 = in[j++];
    50e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50e4:	1c5a      	adds	r2, r3, #1
    50e6:	62ba      	str	r2, [r7, #40]	; 0x28
    50e8:	68fa      	ldr	r2, [r7, #12]
    50ea:	18d2      	adds	r2, r2, r3
    50ec:	2316      	movs	r3, #22
    50ee:	18fb      	adds	r3, r7, r3
    50f0:	7812      	ldrb	r2, [r2, #0]
    50f2:	701a      	strb	r2, [r3, #0]
        byte e2 = in[j++];
    50f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50f6:	1c5a      	adds	r2, r3, #1
    50f8:	62ba      	str	r2, [r7, #40]	; 0x28
    50fa:	68fa      	ldr	r2, [r7, #12]
    50fc:	18d2      	adds	r2, r2, r3
    50fe:	2315      	movs	r3, #21
    5100:	18fb      	adds	r3, r7, r3
    5102:	7812      	ldrb	r2, [r2, #0]
    5104:	701a      	strb	r2, [r3, #0]
        byte e3 = in[j++];
    5106:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5108:	1c5a      	adds	r2, r3, #1
    510a:	62ba      	str	r2, [r7, #40]	; 0x28
    510c:	68fa      	ldr	r2, [r7, #12]
    510e:	18d2      	adds	r2, r2, r3
    5110:	2314      	movs	r3, #20
    5112:	18fb      	adds	r3, r7, r3
    5114:	7812      	ldrb	r2, [r2, #0]
    5116:	701a      	strb	r2, [r3, #0]
        byte e4 = in[j++];
    5118:	6abb      	ldr	r3, [r7, #40]	; 0x28
    511a:	1c5a      	adds	r2, r3, #1
    511c:	62ba      	str	r2, [r7, #40]	; 0x28
    511e:	68fa      	ldr	r2, [r7, #12]
    5120:	18d2      	adds	r2, r2, r3
    5122:	2313      	movs	r3, #19
    5124:	18fb      	adds	r3, r7, r3
    5126:	7812      	ldrb	r2, [r2, #0]
    5128:	701a      	strb	r2, [r3, #0]

        int pad3 = 0;
    512a:	2300      	movs	r3, #0
    512c:	627b      	str	r3, [r7, #36]	; 0x24
        int pad4 = 0;
    512e:	2300      	movs	r3, #0
    5130:	623b      	str	r3, [r7, #32]

        if (e1 == 0)            /* end file 0's */
    5132:	2316      	movs	r3, #22
    5134:	18fb      	adds	r3, r7, r3
    5136:	781b      	ldrb	r3, [r3, #0]
    5138:	2b00      	cmp	r3, #0
    513a:	d100      	bne.n	513e <Base64_Decode+0xa6>
    513c:	e124      	b.n	5388 <Base64_Decode+0x2f0>
            break;
        if (e3 == PAD)
    513e:	2314      	movs	r3, #20
    5140:	18fb      	adds	r3, r7, r3
    5142:	781b      	ldrb	r3, [r3, #0]
    5144:	2b3d      	cmp	r3, #61	; 0x3d
    5146:	d101      	bne.n	514c <Base64_Decode+0xb4>
            pad3 = 1;
    5148:	2301      	movs	r3, #1
    514a:	627b      	str	r3, [r7, #36]	; 0x24
        if (e4 == PAD)
    514c:	2313      	movs	r3, #19
    514e:	18fb      	adds	r3, r7, r3
    5150:	781b      	ldrb	r3, [r3, #0]
    5152:	2b3d      	cmp	r3, #61	; 0x3d
    5154:	d101      	bne.n	515a <Base64_Decode+0xc2>
            pad4 = 1;
    5156:	2301      	movs	r3, #1
    5158:	623b      	str	r3, [r7, #32]

        if (e1 < BASE64_MIN || e2 < BASE64_MIN || e3 < BASE64_MIN || e4 < BASE64_MIN) {
    515a:	2316      	movs	r3, #22
    515c:	18fb      	adds	r3, r7, r3
    515e:	781b      	ldrb	r3, [r3, #0]
    5160:	2b2a      	cmp	r3, #42	; 0x2a
    5162:	d90e      	bls.n	5182 <Base64_Decode+0xea>
    5164:	2315      	movs	r3, #21
    5166:	18fb      	adds	r3, r7, r3
    5168:	781b      	ldrb	r3, [r3, #0]
    516a:	2b2a      	cmp	r3, #42	; 0x2a
    516c:	d909      	bls.n	5182 <Base64_Decode+0xea>
    516e:	2314      	movs	r3, #20
    5170:	18fb      	adds	r3, r7, r3
    5172:	781b      	ldrb	r3, [r3, #0]
    5174:	2b2a      	cmp	r3, #42	; 0x2a
    5176:	d904      	bls.n	5182 <Base64_Decode+0xea>
    5178:	2313      	movs	r3, #19
    517a:	18fb      	adds	r3, r7, r3
    517c:	781b      	ldrb	r3, [r3, #0]
    517e:	2b2a      	cmp	r3, #42	; 0x2a
    5180:	d802      	bhi.n	5188 <Base64_Decode+0xf0>
            WOLFSSL_MSG("Bad Base64 Decode data, too small");
            return ASN_INPUT_E;
    5182:	239a      	movs	r3, #154	; 0x9a
    5184:	425b      	negs	r3, r3
    5186:	e106      	b.n	5396 <Base64_Decode+0x2fe>
        }

        if (e1 > maxIdx || e2 > maxIdx || e3 > maxIdx || e4 > maxIdx) {
    5188:	2316      	movs	r3, #22
    518a:	18fa      	adds	r2, r7, r3
    518c:	2317      	movs	r3, #23
    518e:	18fb      	adds	r3, r7, r3
    5190:	7812      	ldrb	r2, [r2, #0]
    5192:	781b      	ldrb	r3, [r3, #0]
    5194:	429a      	cmp	r2, r3
    5196:	d817      	bhi.n	51c8 <Base64_Decode+0x130>
    5198:	2315      	movs	r3, #21
    519a:	18fa      	adds	r2, r7, r3
    519c:	2317      	movs	r3, #23
    519e:	18fb      	adds	r3, r7, r3
    51a0:	7812      	ldrb	r2, [r2, #0]
    51a2:	781b      	ldrb	r3, [r3, #0]
    51a4:	429a      	cmp	r2, r3
    51a6:	d80f      	bhi.n	51c8 <Base64_Decode+0x130>
    51a8:	2314      	movs	r3, #20
    51aa:	18fa      	adds	r2, r7, r3
    51ac:	2317      	movs	r3, #23
    51ae:	18fb      	adds	r3, r7, r3
    51b0:	7812      	ldrb	r2, [r2, #0]
    51b2:	781b      	ldrb	r3, [r3, #0]
    51b4:	429a      	cmp	r2, r3
    51b6:	d807      	bhi.n	51c8 <Base64_Decode+0x130>
    51b8:	2313      	movs	r3, #19
    51ba:	18fa      	adds	r2, r7, r3
    51bc:	2317      	movs	r3, #23
    51be:	18fb      	adds	r3, r7, r3
    51c0:	7812      	ldrb	r2, [r2, #0]
    51c2:	781b      	ldrb	r3, [r3, #0]
    51c4:	429a      	cmp	r2, r3
    51c6:	d902      	bls.n	51ce <Base64_Decode+0x136>
            WOLFSSL_MSG("Bad Base64 Decode data, too big");
            return ASN_INPUT_E;
    51c8:	239a      	movs	r3, #154	; 0x9a
    51ca:	425b      	negs	r3, r3
    51cc:	e0e3      	b.n	5396 <Base64_Decode+0x2fe>
        }

        e1 = base64Decode[e1 - BASE64_MIN];
    51ce:	2316      	movs	r3, #22
    51d0:	18fb      	adds	r3, r7, r3
    51d2:	781b      	ldrb	r3, [r3, #0]
    51d4:	3b2b      	subs	r3, #43	; 0x2b
    51d6:	001a      	movs	r2, r3
    51d8:	2316      	movs	r3, #22
    51da:	18fb      	adds	r3, r7, r3
    51dc:	4970      	ldr	r1, [pc, #448]	; (53a0 <Base64_Decode+0x308>)
    51de:	5c8a      	ldrb	r2, [r1, r2]
    51e0:	701a      	strb	r2, [r3, #0]
        e2 = base64Decode[e2 - BASE64_MIN];
    51e2:	2315      	movs	r3, #21
    51e4:	18fb      	adds	r3, r7, r3
    51e6:	781b      	ldrb	r3, [r3, #0]
    51e8:	3b2b      	subs	r3, #43	; 0x2b
    51ea:	001a      	movs	r2, r3
    51ec:	2315      	movs	r3, #21
    51ee:	18fb      	adds	r3, r7, r3
    51f0:	496b      	ldr	r1, [pc, #428]	; (53a0 <Base64_Decode+0x308>)
    51f2:	5c8a      	ldrb	r2, [r1, r2]
    51f4:	701a      	strb	r2, [r3, #0]
        e3 = (e3 == PAD) ? 0 : base64Decode[e3 - BASE64_MIN];
    51f6:	2314      	movs	r3, #20
    51f8:	18fb      	adds	r3, r7, r3
    51fa:	781b      	ldrb	r3, [r3, #0]
    51fc:	2b3d      	cmp	r3, #61	; 0x3d
    51fe:	d006      	beq.n	520e <Base64_Decode+0x176>
    5200:	2314      	movs	r3, #20
    5202:	18fb      	adds	r3, r7, r3
    5204:	781b      	ldrb	r3, [r3, #0]
    5206:	3b2b      	subs	r3, #43	; 0x2b
    5208:	4a65      	ldr	r2, [pc, #404]	; (53a0 <Base64_Decode+0x308>)
    520a:	5cd2      	ldrb	r2, [r2, r3]
    520c:	e000      	b.n	5210 <Base64_Decode+0x178>
    520e:	2200      	movs	r2, #0
    5210:	2314      	movs	r3, #20
    5212:	18fb      	adds	r3, r7, r3
    5214:	701a      	strb	r2, [r3, #0]
        e4 = (e4 == PAD) ? 0 : base64Decode[e4 - BASE64_MIN];
    5216:	2313      	movs	r3, #19
    5218:	18fb      	adds	r3, r7, r3
    521a:	781b      	ldrb	r3, [r3, #0]
    521c:	2b3d      	cmp	r3, #61	; 0x3d
    521e:	d006      	beq.n	522e <Base64_Decode+0x196>
    5220:	2313      	movs	r3, #19
    5222:	18fb      	adds	r3, r7, r3
    5224:	781b      	ldrb	r3, [r3, #0]
    5226:	3b2b      	subs	r3, #43	; 0x2b
    5228:	4a5d      	ldr	r2, [pc, #372]	; (53a0 <Base64_Decode+0x308>)
    522a:	5cd2      	ldrb	r2, [r2, r3]
    522c:	e000      	b.n	5230 <Base64_Decode+0x198>
    522e:	2200      	movs	r2, #0
    5230:	2313      	movs	r3, #19
    5232:	18fb      	adds	r3, r7, r3
    5234:	701a      	strb	r2, [r3, #0]

        b1 = (byte)((e1 << 2) | (e2 >> 4));
    5236:	2316      	movs	r3, #22
    5238:	18fb      	adds	r3, r7, r3
    523a:	781b      	ldrb	r3, [r3, #0]
    523c:	009b      	lsls	r3, r3, #2
    523e:	b25a      	sxtb	r2, r3
    5240:	2315      	movs	r3, #21
    5242:	18fb      	adds	r3, r7, r3
    5244:	781b      	ldrb	r3, [r3, #0]
    5246:	091b      	lsrs	r3, r3, #4
    5248:	b2db      	uxtb	r3, r3
    524a:	b25b      	sxtb	r3, r3
    524c:	4313      	orrs	r3, r2
    524e:	b25a      	sxtb	r2, r3
    5250:	2312      	movs	r3, #18
    5252:	18fb      	adds	r3, r7, r3
    5254:	701a      	strb	r2, [r3, #0]
        b2 = (byte)(((e2 & 0xF) << 4) | (e3 >> 2));
    5256:	2315      	movs	r3, #21
    5258:	18fb      	adds	r3, r7, r3
    525a:	781b      	ldrb	r3, [r3, #0]
    525c:	011b      	lsls	r3, r3, #4
    525e:	b25a      	sxtb	r2, r3
    5260:	2314      	movs	r3, #20
    5262:	18fb      	adds	r3, r7, r3
    5264:	781b      	ldrb	r3, [r3, #0]
    5266:	089b      	lsrs	r3, r3, #2
    5268:	b2db      	uxtb	r3, r3
    526a:	b25b      	sxtb	r3, r3
    526c:	4313      	orrs	r3, r2
    526e:	b25a      	sxtb	r2, r3
    5270:	2311      	movs	r3, #17
    5272:	18fb      	adds	r3, r7, r3
    5274:	701a      	strb	r2, [r3, #0]
        b3 = (byte)(((e3 & 0x3) << 6) | e4);
    5276:	2314      	movs	r3, #20
    5278:	18fb      	adds	r3, r7, r3
    527a:	781b      	ldrb	r3, [r3, #0]
    527c:	019b      	lsls	r3, r3, #6
    527e:	b25a      	sxtb	r2, r3
    5280:	2313      	movs	r3, #19
    5282:	18fb      	adds	r3, r7, r3
    5284:	781b      	ldrb	r3, [r3, #0]
    5286:	b25b      	sxtb	r3, r3
    5288:	4313      	orrs	r3, r2
    528a:	b25a      	sxtb	r2, r3
    528c:	2310      	movs	r3, #16
    528e:	18fb      	adds	r3, r7, r3
    5290:	701a      	strb	r2, [r3, #0]

        out[i++] = b1;
    5292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5294:	1c5a      	adds	r2, r3, #1
    5296:	62fa      	str	r2, [r7, #44]	; 0x2c
    5298:	687a      	ldr	r2, [r7, #4]
    529a:	18d3      	adds	r3, r2, r3
    529c:	2212      	movs	r2, #18
    529e:	18ba      	adds	r2, r7, r2
    52a0:	7812      	ldrb	r2, [r2, #0]
    52a2:	701a      	strb	r2, [r3, #0]
        if (!pad3)
    52a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    52a6:	2b00      	cmp	r3, #0
    52a8:	d108      	bne.n	52bc <Base64_Decode+0x224>
            out[i++] = b2;
    52aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52ac:	1c5a      	adds	r2, r3, #1
    52ae:	62fa      	str	r2, [r7, #44]	; 0x2c
    52b0:	687a      	ldr	r2, [r7, #4]
    52b2:	18d3      	adds	r3, r2, r3
    52b4:	2211      	movs	r2, #17
    52b6:	18ba      	adds	r2, r7, r2
    52b8:	7812      	ldrb	r2, [r2, #0]
    52ba:	701a      	strb	r2, [r3, #0]
        if (!pad4)
    52bc:	6a3b      	ldr	r3, [r7, #32]
    52be:	2b00      	cmp	r3, #0
    52c0:	d164      	bne.n	538c <Base64_Decode+0x2f4>
            out[i++] = b3;
    52c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52c4:	1c5a      	adds	r2, r3, #1
    52c6:	62fa      	str	r2, [r7, #44]	; 0x2c
    52c8:	687a      	ldr	r2, [r7, #4]
    52ca:	18d3      	adds	r3, r2, r3
    52cc:	2210      	movs	r2, #16
    52ce:	18ba      	adds	r2, r7, r2
    52d0:	7812      	ldrb	r2, [r2, #0]
    52d2:	701a      	strb	r2, [r3, #0]
        else
            break;

        inLen -= 4;
    52d4:	68bb      	ldr	r3, [r7, #8]
    52d6:	3b04      	subs	r3, #4
    52d8:	60bb      	str	r3, [r7, #8]
        if (inLen && (in[j] == ' ' || in[j] == '\r' || in[j] == '\n')) {
    52da:	68bb      	ldr	r3, [r7, #8]
    52dc:	2b00      	cmp	r3, #0
    52de:	d04e      	beq.n	537e <Base64_Decode+0x2e6>
    52e0:	68fa      	ldr	r2, [r7, #12]
    52e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    52e4:	18d3      	adds	r3, r2, r3
    52e6:	781b      	ldrb	r3, [r3, #0]
    52e8:	2b20      	cmp	r3, #32
    52ea:	d00b      	beq.n	5304 <Base64_Decode+0x26c>
    52ec:	68fa      	ldr	r2, [r7, #12]
    52ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    52f0:	18d3      	adds	r3, r2, r3
    52f2:	781b      	ldrb	r3, [r3, #0]
    52f4:	2b0d      	cmp	r3, #13
    52f6:	d005      	beq.n	5304 <Base64_Decode+0x26c>
    52f8:	68fa      	ldr	r2, [r7, #12]
    52fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    52fc:	18d3      	adds	r3, r2, r3
    52fe:	781b      	ldrb	r3, [r3, #0]
    5300:	2b0a      	cmp	r3, #10
    5302:	d13c      	bne.n	537e <Base64_Decode+0x2e6>
            byte endLine = in[j++];
    5304:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5306:	1c5a      	adds	r2, r3, #1
    5308:	62ba      	str	r2, [r7, #40]	; 0x28
    530a:	68fa      	ldr	r2, [r7, #12]
    530c:	18d2      	adds	r2, r2, r3
    530e:	231f      	movs	r3, #31
    5310:	18fb      	adds	r3, r7, r3
    5312:	7812      	ldrb	r2, [r2, #0]
    5314:	701a      	strb	r2, [r3, #0]
            inLen--;
    5316:	68bb      	ldr	r3, [r7, #8]
    5318:	3b01      	subs	r3, #1
    531a:	60bb      	str	r3, [r7, #8]
            while (inLen && endLine == ' ') {   /* allow trailing whitespace */
    531c:	e00b      	b.n	5336 <Base64_Decode+0x29e>
                endLine = in[j++];
    531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5320:	1c5a      	adds	r2, r3, #1
    5322:	62ba      	str	r2, [r7, #40]	; 0x28
    5324:	68fa      	ldr	r2, [r7, #12]
    5326:	18d2      	adds	r2, r2, r3
    5328:	231f      	movs	r3, #31
    532a:	18fb      	adds	r3, r7, r3
    532c:	7812      	ldrb	r2, [r2, #0]
    532e:	701a      	strb	r2, [r3, #0]
                inLen--;
    5330:	68bb      	ldr	r3, [r7, #8]
    5332:	3b01      	subs	r3, #1
    5334:	60bb      	str	r3, [r7, #8]

        inLen -= 4;
        if (inLen && (in[j] == ' ' || in[j] == '\r' || in[j] == '\n')) {
            byte endLine = in[j++];
            inLen--;
            while (inLen && endLine == ' ') {   /* allow trailing whitespace */
    5336:	68bb      	ldr	r3, [r7, #8]
    5338:	2b00      	cmp	r3, #0
    533a:	d004      	beq.n	5346 <Base64_Decode+0x2ae>
    533c:	231f      	movs	r3, #31
    533e:	18fb      	adds	r3, r7, r3
    5340:	781b      	ldrb	r3, [r3, #0]
    5342:	2b20      	cmp	r3, #32
    5344:	d0eb      	beq.n	531e <Base64_Decode+0x286>
                endLine = in[j++];
                inLen--;
            }
            if (endLine == '\r') {
    5346:	231f      	movs	r3, #31
    5348:	18fb      	adds	r3, r7, r3
    534a:	781b      	ldrb	r3, [r3, #0]
    534c:	2b0d      	cmp	r3, #13
    534e:	d10e      	bne.n	536e <Base64_Decode+0x2d6>
                if (inLen) {
    5350:	68bb      	ldr	r3, [r7, #8]
    5352:	2b00      	cmp	r3, #0
    5354:	d00b      	beq.n	536e <Base64_Decode+0x2d6>
                    endLine = in[j++];
    5356:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5358:	1c5a      	adds	r2, r3, #1
    535a:	62ba      	str	r2, [r7, #40]	; 0x28
    535c:	68fa      	ldr	r2, [r7, #12]
    535e:	18d2      	adds	r2, r2, r3
    5360:	231f      	movs	r3, #31
    5362:	18fb      	adds	r3, r7, r3
    5364:	7812      	ldrb	r2, [r2, #0]
    5366:	701a      	strb	r2, [r3, #0]
                    inLen--;
    5368:	68bb      	ldr	r3, [r7, #8]
    536a:	3b01      	subs	r3, #1
    536c:	60bb      	str	r3, [r7, #8]
                }
            }
            if (endLine != '\n') {
    536e:	231f      	movs	r3, #31
    5370:	18fb      	adds	r3, r7, r3
    5372:	781b      	ldrb	r3, [r3, #0]
    5374:	2b0a      	cmp	r3, #10
    5376:	d002      	beq.n	537e <Base64_Decode+0x2e6>
                WOLFSSL_MSG("Bad end of line in Base64 Decode");
                return ASN_INPUT_E;
    5378:	239a      	movs	r3, #154	; 0x9a
    537a:	425b      	negs	r3, r3
    537c:	e00b      	b.n	5396 <Base64_Decode+0x2fe>
    const byte maxIdx = (byte)sizeof(base64Decode) + BASE64_MIN - 1;

    plainSz = (plainSz * 3 + 3) / 4;
    if (plainSz > *outLen) return BAD_FUNC_ARG;

    while (inLen > 3) {
    537e:	68bb      	ldr	r3, [r7, #8]
    5380:	2b03      	cmp	r3, #3
    5382:	d900      	bls.n	5386 <Base64_Decode+0x2ee>
    5384:	e6ad      	b.n	50e2 <Base64_Decode+0x4a>
    5386:	e002      	b.n	538e <Base64_Decode+0x2f6>

        int pad3 = 0;
        int pad4 = 0;

        if (e1 == 0)            /* end file 0's */
            break;
    5388:	46c0      	nop			; (mov r8, r8)
    538a:	e000      	b.n	538e <Base64_Decode+0x2f6>
        if (!pad3)
            out[i++] = b2;
        if (!pad4)
            out[i++] = b3;
        else
            break;
    538c:	46c0      	nop			; (mov r8, r8)
                WOLFSSL_MSG("Bad end of line in Base64 Decode");
                return ASN_INPUT_E;
            }
        }
    }
    *outLen = i;
    538e:	683b      	ldr	r3, [r7, #0]
    5390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5392:	601a      	str	r2, [r3, #0]

    return 0;
    5394:	2300      	movs	r3, #0
}
    5396:	0018      	movs	r0, r3
    5398:	46bd      	mov	sp, r7
    539a:	b00c      	add	sp, #48	; 0x30
    539c:	bd80      	pop	{r7, pc}
    539e:	46c0      	nop			; (mov r8, r8)
    53a0:	00028658 	.word	0x00028658

000053a4 <_InitRng>:
/* End NIST DRBG Code */


static int _InitRng(WC_RNG* rng, byte* nonce, word32 nonceSz,
                    void* heap, int devId)
{
    53a4:	b580      	push	{r7, lr}
    53a6:	b086      	sub	sp, #24
    53a8:	af00      	add	r7, sp, #0
    53aa:	60f8      	str	r0, [r7, #12]
    53ac:	60b9      	str	r1, [r7, #8]
    53ae:	607a      	str	r2, [r7, #4]
    53b0:	603b      	str	r3, [r7, #0]
    int ret = RNG_FAILURE_E;
    53b2:	23c7      	movs	r3, #199	; 0xc7
    53b4:	425b      	negs	r3, r3
    53b6:	617b      	str	r3, [r7, #20]
#endif

    (void)nonce;
    (void)nonceSz;

    if (rng == NULL)
    53b8:	68fb      	ldr	r3, [r7, #12]
    53ba:	2b00      	cmp	r3, #0
    53bc:	d102      	bne.n	53c4 <_InitRng+0x20>
        return BAD_FUNC_ARG;
    53be:	23ad      	movs	r3, #173	; 0xad
    53c0:	425b      	negs	r3, r3
    53c2:	e00e      	b.n	53e2 <_InitRng+0x3e>
    if (nonce == NULL && nonceSz != 0)
    53c4:	68bb      	ldr	r3, [r7, #8]
    53c6:	2b00      	cmp	r3, #0
    53c8:	d105      	bne.n	53d6 <_InitRng+0x32>
    53ca:	687b      	ldr	r3, [r7, #4]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d002      	beq.n	53d6 <_InitRng+0x32>
        return BAD_FUNC_ARG;
    53d0:	23ad      	movs	r3, #173	; 0xad
    53d2:	425b      	negs	r3, r3
    53d4:	e005      	b.n	53e2 <_InitRng+0x3e>

#ifdef WOLFSSL_HEAP_TEST
    rng->heap = (void*)WOLFSSL_HEAP_TEST;
    (void)heap;
#else
    rng->heap = heap;
    53d6:	68fb      	ldr	r3, [r7, #12]
    53d8:	683a      	ldr	r2, [r7, #0]
    53da:	605a      	str	r2, [r3, #4]
    if (IS_INTEL_RDRAND(intel_flags))
        return 0;
#endif

#ifdef CUSTOM_RAND_GENERATE_BLOCK
	ret = 0; /* success */
    53dc:	2300      	movs	r3, #0
    53de:	617b      	str	r3, [r7, #20]
        rng->status = DRBG_FAILED;
    }
#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
    53e0:	697b      	ldr	r3, [r7, #20]
}
    53e2:	0018      	movs	r0, r3
    53e4:	46bd      	mov	sp, r7
    53e6:	b006      	add	sp, #24
    53e8:	bd80      	pop	{r7, pc}
    53ea:	46c0      	nop			; (mov r8, r8)

000053ec <wc_InitRng>:


int wc_InitRng(WC_RNG* rng)
{
    53ec:	b580      	push	{r7, lr}
    53ee:	b084      	sub	sp, #16
    53f0:	af02      	add	r7, sp, #8
    53f2:	6078      	str	r0, [r7, #4]
    return _InitRng(rng, NULL, 0, NULL, INVALID_DEVID);
    53f4:	6878      	ldr	r0, [r7, #4]
    53f6:	2302      	movs	r3, #2
    53f8:	425b      	negs	r3, r3
    53fa:	9300      	str	r3, [sp, #0]
    53fc:	2300      	movs	r3, #0
    53fe:	2200      	movs	r2, #0
    5400:	2100      	movs	r1, #0
    5402:	f7ff ffcf 	bl	53a4 <_InitRng>
    5406:	0003      	movs	r3, r0
}
    5408:	0018      	movs	r0, r3
    540a:	46bd      	mov	sp, r7
    540c:	b002      	add	sp, #8
    540e:	bd80      	pop	{r7, pc}

00005410 <wc_InitRng_ex>:


int wc_InitRng_ex(WC_RNG* rng, void* heap, int devId)
{
    5410:	b580      	push	{r7, lr}
    5412:	b086      	sub	sp, #24
    5414:	af02      	add	r7, sp, #8
    5416:	60f8      	str	r0, [r7, #12]
    5418:	60b9      	str	r1, [r7, #8]
    541a:	607a      	str	r2, [r7, #4]
    return _InitRng(rng, NULL, 0, heap, devId);
    541c:	68ba      	ldr	r2, [r7, #8]
    541e:	68f8      	ldr	r0, [r7, #12]
    5420:	687b      	ldr	r3, [r7, #4]
    5422:	9300      	str	r3, [sp, #0]
    5424:	0013      	movs	r3, r2
    5426:	2200      	movs	r2, #0
    5428:	2100      	movs	r1, #0
    542a:	f7ff ffbb 	bl	53a4 <_InitRng>
    542e:	0003      	movs	r3, r0
}
    5430:	0018      	movs	r0, r3
    5432:	46bd      	mov	sp, r7
    5434:	b004      	add	sp, #16
    5436:	bd80      	pop	{r7, pc}

00005438 <wc_RNG_GenerateBlock>:
}


/* place a generated block in output */
int wc_RNG_GenerateBlock(WC_RNG* rng, byte* output, word32 sz)
{
    5438:	b580      	push	{r7, lr}
    543a:	b086      	sub	sp, #24
    543c:	af00      	add	r7, sp, #0
    543e:	60f8      	str	r0, [r7, #12]
    5440:	60b9      	str	r1, [r7, #8]
    5442:	607a      	str	r2, [r7, #4]
    int ret;

    if (rng == NULL || output == NULL)
    5444:	68fb      	ldr	r3, [r7, #12]
    5446:	2b00      	cmp	r3, #0
    5448:	d002      	beq.n	5450 <wc_RNG_GenerateBlock+0x18>
    544a:	68bb      	ldr	r3, [r7, #8]
    544c:	2b00      	cmp	r3, #0
    544e:	d102      	bne.n	5456 <wc_RNG_GenerateBlock+0x1e>
        return BAD_FUNC_ARG;
    5450:	23ad      	movs	r3, #173	; 0xad
    5452:	425b      	negs	r3, r3
    5454:	e00e      	b.n	5474 <wc_RNG_GenerateBlock+0x3c>
    #endif
    }
#endif

#ifdef CUSTOM_RAND_GENERATE_BLOCK
    XMEMSET(output, 0, sz);
    5456:	687a      	ldr	r2, [r7, #4]
    5458:	68bb      	ldr	r3, [r7, #8]
    545a:	2100      	movs	r1, #0
    545c:	0018      	movs	r0, r3
    545e:	f020 f964 	bl	2572a <memset>
    ret = CUSTOM_RAND_GENERATE_BLOCK(output, sz);
    5462:	687a      	ldr	r2, [r7, #4]
    5464:	68bb      	ldr	r3, [r7, #8]
    5466:	0011      	movs	r1, r2
    5468:	0018      	movs	r0, r3
    546a:	f00b f953 	bl	10714 <atmel_get_random_block>
    546e:	0003      	movs	r3, r0
    5470:	617b      	str	r3, [r7, #20]
    ret = RNG_FAILURE_E;

#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
    5472:	697b      	ldr	r3, [r7, #20]
}
    5474:	0018      	movs	r0, r3
    5476:	46bd      	mov	sp, r7
    5478:	b006      	add	sp, #24
    547a:	bd80      	pop	{r7, pc}

0000547c <wc_RNG_GenerateByte>:


int wc_RNG_GenerateByte(WC_RNG* rng, byte* b)
{
    547c:	b580      	push	{r7, lr}
    547e:	b082      	sub	sp, #8
    5480:	af00      	add	r7, sp, #0
    5482:	6078      	str	r0, [r7, #4]
    5484:	6039      	str	r1, [r7, #0]
    return wc_RNG_GenerateBlock(rng, b, 1);
    5486:	6839      	ldr	r1, [r7, #0]
    5488:	687b      	ldr	r3, [r7, #4]
    548a:	2201      	movs	r2, #1
    548c:	0018      	movs	r0, r3
    548e:	f7ff ffd3 	bl	5438 <wc_RNG_GenerateBlock>
    5492:	0003      	movs	r3, r0
}
    5494:	0018      	movs	r0, r3
    5496:	46bd      	mov	sp, r7
    5498:	b002      	add	sp, #8
    549a:	bd80      	pop	{r7, pc}

0000549c <wc_FreeRng>:


int wc_FreeRng(WC_RNG* rng)
{
    549c:	b580      	push	{r7, lr}
    549e:	b084      	sub	sp, #16
    54a0:	af00      	add	r7, sp, #0
    54a2:	6078      	str	r0, [r7, #4]
    int ret = 0;
    54a4:	2300      	movs	r3, #0
    54a6:	60fb      	str	r3, [r7, #12]

    if (rng == NULL)
    54a8:	687b      	ldr	r3, [r7, #4]
    54aa:	2b00      	cmp	r3, #0
    54ac:	d102      	bne.n	54b4 <wc_FreeRng+0x18>
        return BAD_FUNC_ARG;
    54ae:	23ad      	movs	r3, #173	; 0xad
    54b0:	425b      	negs	r3, r3
    54b2:	e000      	b.n	54b6 <wc_FreeRng+0x1a>
    }

    rng->status = DRBG_NOT_INIT;
#endif /* HAVE_HASHDRBG */

    return ret;
    54b4:	68fb      	ldr	r3, [r7, #12]
}
    54b6:	0018      	movs	r0, r3
    54b8:	46bd      	mov	sp, r7
    54ba:	b004      	add	sp, #16
    54bc:	bd80      	pop	{r7, pc}
    54be:	46c0      	nop			; (mov r8, r8)

000054c0 <wolfSSL_SetLoggingCb>:
#endif /* DEBUG_WOLFSSL */


/* allow this to be set to NULL, so logs can be redirected to default output */
int wolfSSL_SetLoggingCb(wolfSSL_Logging_cb f)
{
    54c0:	b580      	push	{r7, lr}
    54c2:	b082      	sub	sp, #8
    54c4:	af00      	add	r7, sp, #0
    54c6:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_WOLFSSL
    log_function = f;
    return 0;
#else
    (void)f;
    return NOT_COMPILED_IN;
    54c8:	23ae      	movs	r3, #174	; 0xae
    54ca:	425b      	negs	r3, r3
#endif
}
    54cc:	0018      	movs	r0, r3
    54ce:	46bd      	mov	sp, r7
    54d0:	b002      	add	sp, #8
    54d2:	bd80      	pop	{r7, pc}

000054d4 <wolfSSL_Debugging_ON>:


int wolfSSL_Debugging_ON(void)
{
    54d4:	b580      	push	{r7, lr}
    54d6:	af00      	add	r7, sp, #0
#if defined(WOLFSSL_APACHE_MYNEWT)
    log_register("wolfcrypt", &mynewt_log, &log_console_handler, NULL, LOG_SYSLEVEL);
#endif /* WOLFSSL_APACHE_MYNEWT */
    return 0;
#else
    return NOT_COMPILED_IN;
    54d8:	23ae      	movs	r3, #174	; 0xae
    54da:	425b      	negs	r3, r3
#endif
}
    54dc:	0018      	movs	r0, r3
    54de:	46bd      	mov	sp, r7
    54e0:	bd80      	pop	{r7, pc}
    54e2:	46c0      	nop			; (mov r8, r8)

000054e4 <wolfSSL_Debugging_OFF>:


void wolfSSL_Debugging_OFF(void)
{
    54e4:	b580      	push	{r7, lr}
    54e6:	af00      	add	r7, sp, #0
#ifdef DEBUG_WOLFSSL
    loggingEnabled = 0;
#endif
}
    54e8:	46c0      	nop			; (mov r8, r8)
    54ea:	46bd      	mov	sp, r7
    54ec:	bd80      	pop	{r7, pc}
    54ee:	46c0      	nop			; (mov r8, r8)

000054f0 <wc_AesCbcDecryptWithKey>:

#if !defined(NO_AES) && defined(HAVE_AES_CBC)
#ifdef HAVE_AES_DECRYPT
int wc_AesCbcDecryptWithKey(byte* out, const byte* in, word32 inSz,
                                  const byte* key, word32 keySz, const byte* iv)
{
    54f0:	b590      	push	{r4, r7, lr}
    54f2:	b08b      	sub	sp, #44	; 0x2c
    54f4:	af02      	add	r7, sp, #8
    54f6:	60f8      	str	r0, [r7, #12]
    54f8:	60b9      	str	r1, [r7, #8]
    54fa:	607a      	str	r2, [r7, #4]
    54fc:	603b      	str	r3, [r7, #0]
    int  ret = 0;
    54fe:	2300      	movs	r3, #0
    5500:	61fb      	str	r3, [r7, #28]
#ifdef WOLFSSL_SMALL_STACK
    Aes* aes = NULL;
    5502:	2300      	movs	r3, #0
    5504:	61bb      	str	r3, [r7, #24]
#else
    Aes  aes[1];
#endif

    if (out == NULL || in == NULL || key == NULL || iv == NULL) {
    5506:	68fb      	ldr	r3, [r7, #12]
    5508:	2b00      	cmp	r3, #0
    550a:	d008      	beq.n	551e <wc_AesCbcDecryptWithKey+0x2e>
    550c:	68bb      	ldr	r3, [r7, #8]
    550e:	2b00      	cmp	r3, #0
    5510:	d005      	beq.n	551e <wc_AesCbcDecryptWithKey+0x2e>
    5512:	683b      	ldr	r3, [r7, #0]
    5514:	2b00      	cmp	r3, #0
    5516:	d002      	beq.n	551e <wc_AesCbcDecryptWithKey+0x2e>
    5518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    551a:	2b00      	cmp	r3, #0
    551c:	d102      	bne.n	5524 <wc_AesCbcDecryptWithKey+0x34>
        return BAD_FUNC_ARG;
    551e:	23ad      	movs	r3, #173	; 0xad
    5520:	425b      	negs	r3, r3
    5522:	e03c      	b.n	559e <wc_AesCbcDecryptWithKey+0xae>
    }

#ifdef WOLFSSL_SMALL_STACK
    aes = (Aes*)XMALLOC(sizeof(Aes), NULL, DYNAMIC_TYPE_TMP_BUFFER);
    5524:	239c      	movs	r3, #156	; 0x9c
    5526:	005b      	lsls	r3, r3, #1
    5528:	0018      	movs	r0, r3
    552a:	f020 f8ab 	bl	25684 <malloc>
    552e:	0003      	movs	r3, r0
    5530:	61bb      	str	r3, [r7, #24]
    if (aes == NULL)
    5532:	69bb      	ldr	r3, [r7, #24]
    5534:	2b00      	cmp	r3, #0
    5536:	d102      	bne.n	553e <wc_AesCbcDecryptWithKey+0x4e>
        return MEMORY_E;
    5538:	237d      	movs	r3, #125	; 0x7d
    553a:	425b      	negs	r3, r3
    553c:	e02f      	b.n	559e <wc_AesCbcDecryptWithKey+0xae>
#endif

    ret = wc_AesInit(aes, NULL, INVALID_DEVID);
    553e:	2302      	movs	r3, #2
    5540:	425a      	negs	r2, r3
    5542:	69bb      	ldr	r3, [r7, #24]
    5544:	2100      	movs	r1, #0
    5546:	0018      	movs	r0, r3
    5548:	f004 fc68 	bl	9e1c <wc_AesInit>
    554c:	0003      	movs	r3, r0
    554e:	61fb      	str	r3, [r7, #28]
    if (ret == 0) {
    5550:	69fb      	ldr	r3, [r7, #28]
    5552:	2b00      	cmp	r3, #0
    5554:	d119      	bne.n	558a <wc_AesCbcDecryptWithKey+0x9a>
        ret = wc_AesSetKey(aes, key, keySz, iv, AES_DECRYPTION);
    5556:	6b7c      	ldr	r4, [r7, #52]	; 0x34
    5558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    555a:	6839      	ldr	r1, [r7, #0]
    555c:	69b8      	ldr	r0, [r7, #24]
    555e:	2301      	movs	r3, #1
    5560:	9300      	str	r3, [sp, #0]
    5562:	0023      	movs	r3, r4
    5564:	f003 fd40 	bl	8fe8 <wc_AesSetKey>
    5568:	0003      	movs	r3, r0
    556a:	61fb      	str	r3, [r7, #28]
        if (ret == 0)
    556c:	69fb      	ldr	r3, [r7, #28]
    556e:	2b00      	cmp	r3, #0
    5570:	d107      	bne.n	5582 <wc_AesCbcDecryptWithKey+0x92>
            ret = wc_AesCbcDecrypt(aes, out, in, inSz);
    5572:	687b      	ldr	r3, [r7, #4]
    5574:	68ba      	ldr	r2, [r7, #8]
    5576:	68f9      	ldr	r1, [r7, #12]
    5578:	69b8      	ldr	r0, [r7, #24]
    557a:	f003 fdd1 	bl	9120 <wc_AesCbcDecrypt>
    557e:	0003      	movs	r3, r0
    5580:	61fb      	str	r3, [r7, #28]

        wc_AesFree(aes);
    5582:	69bb      	ldr	r3, [r7, #24]
    5584:	0018      	movs	r0, r3
    5586:	f004 fc61 	bl	9e4c <wc_AesFree>
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(aes, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    558a:	69bb      	ldr	r3, [r7, #24]
    558c:	617b      	str	r3, [r7, #20]
    558e:	697b      	ldr	r3, [r7, #20]
    5590:	2b00      	cmp	r3, #0
    5592:	d003      	beq.n	559c <wc_AesCbcDecryptWithKey+0xac>
    5594:	697b      	ldr	r3, [r7, #20]
    5596:	0018      	movs	r0, r3
    5598:	f020 f87e 	bl	25698 <free>
#endif

    return ret;
    559c:	69fb      	ldr	r3, [r7, #28]
}
    559e:	0018      	movs	r0, r3
    55a0:	46bd      	mov	sp, r7
    55a2:	b009      	add	sp, #36	; 0x24
    55a4:	bd90      	pop	{r4, r7, pc}
    55a6:	46c0      	nop			; (mov r8, r8)

000055a8 <wc_AesCbcEncryptWithKey>:
#endif /* HAVE_AES_DECRYPT */

int wc_AesCbcEncryptWithKey(byte* out, const byte* in, word32 inSz,
                            const byte* key, word32 keySz, const byte* iv)
{
    55a8:	b590      	push	{r4, r7, lr}
    55aa:	b08b      	sub	sp, #44	; 0x2c
    55ac:	af02      	add	r7, sp, #8
    55ae:	60f8      	str	r0, [r7, #12]
    55b0:	60b9      	str	r1, [r7, #8]
    55b2:	607a      	str	r2, [r7, #4]
    55b4:	603b      	str	r3, [r7, #0]
    int  ret = 0;
    55b6:	2300      	movs	r3, #0
    55b8:	61fb      	str	r3, [r7, #28]
#ifdef WOLFSSL_SMALL_STACK
    Aes* aes = NULL;
    55ba:	2300      	movs	r3, #0
    55bc:	61bb      	str	r3, [r7, #24]
#else
    Aes  aes[1];
#endif

#ifdef WOLFSSL_SMALL_STACK
    aes = (Aes*)XMALLOC(sizeof(Aes), NULL, DYNAMIC_TYPE_TMP_BUFFER);
    55be:	239c      	movs	r3, #156	; 0x9c
    55c0:	005b      	lsls	r3, r3, #1
    55c2:	0018      	movs	r0, r3
    55c4:	f020 f85e 	bl	25684 <malloc>
    55c8:	0003      	movs	r3, r0
    55ca:	61bb      	str	r3, [r7, #24]
    if (aes == NULL)
    55cc:	69bb      	ldr	r3, [r7, #24]
    55ce:	2b00      	cmp	r3, #0
    55d0:	d102      	bne.n	55d8 <wc_AesCbcEncryptWithKey+0x30>
        return MEMORY_E;
    55d2:	237d      	movs	r3, #125	; 0x7d
    55d4:	425b      	negs	r3, r3
    55d6:	e02f      	b.n	5638 <wc_AesCbcEncryptWithKey+0x90>
#endif

    ret = wc_AesInit(aes, NULL, INVALID_DEVID);
    55d8:	2302      	movs	r3, #2
    55da:	425a      	negs	r2, r3
    55dc:	69bb      	ldr	r3, [r7, #24]
    55de:	2100      	movs	r1, #0
    55e0:	0018      	movs	r0, r3
    55e2:	f004 fc1b 	bl	9e1c <wc_AesInit>
    55e6:	0003      	movs	r3, r0
    55e8:	61fb      	str	r3, [r7, #28]
    if (ret == 0) {
    55ea:	69fb      	ldr	r3, [r7, #28]
    55ec:	2b00      	cmp	r3, #0
    55ee:	d119      	bne.n	5624 <wc_AesCbcEncryptWithKey+0x7c>
        ret = wc_AesSetKey(aes, key, keySz, iv, AES_ENCRYPTION);
    55f0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
    55f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    55f4:	6839      	ldr	r1, [r7, #0]
    55f6:	69b8      	ldr	r0, [r7, #24]
    55f8:	2300      	movs	r3, #0
    55fa:	9300      	str	r3, [sp, #0]
    55fc:	0023      	movs	r3, r4
    55fe:	f003 fcf3 	bl	8fe8 <wc_AesSetKey>
    5602:	0003      	movs	r3, r0
    5604:	61fb      	str	r3, [r7, #28]
        if (ret == 0)
    5606:	69fb      	ldr	r3, [r7, #28]
    5608:	2b00      	cmp	r3, #0
    560a:	d107      	bne.n	561c <wc_AesCbcEncryptWithKey+0x74>
            ret = wc_AesCbcEncrypt(aes, out, in, inSz);
    560c:	687b      	ldr	r3, [r7, #4]
    560e:	68ba      	ldr	r2, [r7, #8]
    5610:	68f9      	ldr	r1, [r7, #12]
    5612:	69b8      	ldr	r0, [r7, #24]
    5614:	f003 fd44 	bl	90a0 <wc_AesCbcEncrypt>
    5618:	0003      	movs	r3, r0
    561a:	61fb      	str	r3, [r7, #28]

        wc_AesFree(aes);
    561c:	69bb      	ldr	r3, [r7, #24]
    561e:	0018      	movs	r0, r3
    5620:	f004 fc14 	bl	9e4c <wc_AesFree>
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(aes, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    5624:	69bb      	ldr	r3, [r7, #24]
    5626:	617b      	str	r3, [r7, #20]
    5628:	697b      	ldr	r3, [r7, #20]
    562a:	2b00      	cmp	r3, #0
    562c:	d003      	beq.n	5636 <wc_AesCbcEncryptWithKey+0x8e>
    562e:	697b      	ldr	r3, [r7, #20]
    5630:	0018      	movs	r0, r3
    5632:	f020 f831 	bl	25698 <free>
#endif

    return ret;
    5636:	69fb      	ldr	r3, [r7, #28]
}
    5638:	0018      	movs	r0, r3
    563a:	46bd      	mov	sp, r7
    563c:	b009      	add	sp, #36	; 0x24
    563e:	bd90      	pop	{r4, r7, pc}

00005640 <wolfCrypt_Init>:

/* Used to initialize state for wolfcrypt
   return 0 on success
 */
int wolfCrypt_Init(void)
{
    5640:	b580      	push	{r7, lr}
    5642:	b082      	sub	sp, #8
    5644:	af00      	add	r7, sp, #0
    int ret = 0;
    5646:	2300      	movs	r3, #0
    5648:	607b      	str	r3, [r7, #4]

    if (initRefCount == 0) {
    564a:	4b0a      	ldr	r3, [pc, #40]	; (5674 <wolfCrypt_Init+0x34>)
    564c:	681b      	ldr	r3, [r3, #0]
    564e:	2b00      	cmp	r3, #0
    5650:	d10b      	bne.n	566a <wolfCrypt_Init+0x2a>
            return ret;
        }
    #endif

    #if defined(WOLFSSL_ATMEL) || defined(WOLFSSL_ATECC508A)
        ret = atmel_init();
    5652:	f00b fab3 	bl	10bbc <atmel_init>
    5656:	0003      	movs	r3, r0
    5658:	607b      	str	r3, [r7, #4]
        if (ret != 0) {
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	2b00      	cmp	r3, #0
    565e:	d001      	beq.n	5664 <wolfCrypt_Init+0x24>
            WOLFSSL_MSG("CryptoAuthLib init failed");
            return ret;
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	e003      	b.n	566c <wolfCrypt_Init+0x2c>
        if ((ret = wc_caamInit()) != 0) {
            return ret;
        }
#endif

        initRefCount = 1;
    5664:	4b03      	ldr	r3, [pc, #12]	; (5674 <wolfCrypt_Init+0x34>)
    5666:	2201      	movs	r2, #1
    5668:	601a      	str	r2, [r3, #0]
    }

    return ret;
    566a:	687b      	ldr	r3, [r7, #4]
}
    566c:	0018      	movs	r0, r3
    566e:	46bd      	mov	sp, r7
    5670:	b002      	add	sp, #8
    5672:	bd80      	pop	{r7, pc}
    5674:	20000330 	.word	0x20000330

00005678 <wolfCrypt_Cleanup>:


/* return success value is the same as wolfCrypt_Init */
int wolfCrypt_Cleanup(void)
{
    5678:	b580      	push	{r7, lr}
    567a:	b082      	sub	sp, #8
    567c:	af00      	add	r7, sp, #0
    int ret = 0;
    567e:	2300      	movs	r3, #0
    5680:	607b      	str	r3, [r7, #4]

    if (initRefCount == 1) {
    5682:	4b06      	ldr	r3, [pc, #24]	; (569c <wolfCrypt_Cleanup+0x24>)
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	2b01      	cmp	r3, #1
    5688:	d102      	bne.n	5690 <wolfCrypt_Cleanup+0x18>
    #if defined(WOLFSSL_IMX6_CAAM) || defined(WOLFSSL_IMX6_CAAM_RNG) || \
        defined(WOLFSSL_IMX6_CAAM_BLOB)
        wc_caamFree();
    #endif

        initRefCount = 0; /* allow re-init */
    568a:	4b04      	ldr	r3, [pc, #16]	; (569c <wolfCrypt_Cleanup+0x24>)
    568c:	2200      	movs	r2, #0
    568e:	601a      	str	r2, [r3, #0]
    }

    return ret;
    5690:	687b      	ldr	r3, [r7, #4]
}
    5692:	0018      	movs	r0, r3
    5694:	46bd      	mov	sp, r7
    5696:	b002      	add	sp, #8
    5698:	bd80      	pop	{r7, pc}
    569a:	46c0      	nop			; (mov r8, r8)
    569c:	20000330 	.word	0x20000330

000056a0 <wc_InitAndAllocMutex>:

#endif /* !NO_FILESYSTEM && !NO_WOLFSSL_DIR */


wolfSSL_Mutex* wc_InitAndAllocMutex(void)
{
    56a0:	b580      	push	{r7, lr}
    56a2:	b082      	sub	sp, #8
    56a4:	af00      	add	r7, sp, #0
    wolfSSL_Mutex* m = (wolfSSL_Mutex*) XMALLOC(sizeof(wolfSSL_Mutex), NULL,
    56a6:	2004      	movs	r0, #4
    56a8:	f01f ffec 	bl	25684 <malloc>
    56ac:	0003      	movs	r3, r0
    56ae:	607b      	str	r3, [r7, #4]
            DYNAMIC_TYPE_MUTEX);
    if (m != NULL) {
    56b0:	687b      	ldr	r3, [r7, #4]
    56b2:	2b00      	cmp	r3, #0
    56b4:	d010      	beq.n	56d8 <wc_InitAndAllocMutex+0x38>
        if (wc_InitMutex(m) != 0) {
    56b6:	687b      	ldr	r3, [r7, #4]
    56b8:	0018      	movs	r0, r3
    56ba:	f000 f813 	bl	56e4 <wc_InitMutex>
    56be:	1e03      	subs	r3, r0, #0
    56c0:	d00a      	beq.n	56d8 <wc_InitAndAllocMutex+0x38>
            WOLFSSL_MSG("Init Mutex failed");
            XFREE(m, NULL, DYNAMIC_TYPE_MUTEX);
    56c2:	687b      	ldr	r3, [r7, #4]
    56c4:	603b      	str	r3, [r7, #0]
    56c6:	683b      	ldr	r3, [r7, #0]
    56c8:	2b00      	cmp	r3, #0
    56ca:	d003      	beq.n	56d4 <wc_InitAndAllocMutex+0x34>
    56cc:	683b      	ldr	r3, [r7, #0]
    56ce:	0018      	movs	r0, r3
    56d0:	f01f ffe2 	bl	25698 <free>
            m = NULL;
    56d4:	2300      	movs	r3, #0
    56d6:	607b      	str	r3, [r7, #4]
    }
    else {
        WOLFSSL_MSG("Memory error with Mutex allocation");
    }

    return m;
    56d8:	687b      	ldr	r3, [r7, #4]
}
    56da:	0018      	movs	r0, r3
    56dc:	46bd      	mov	sp, r7
    56de:	b002      	add	sp, #8
    56e0:	bd80      	pop	{r7, pc}
    56e2:	46c0      	nop			; (mov r8, r8)

000056e4 <wc_InitMutex>:
    }
#endif /* defined(OPENSSL_EXTRA) || defined(HAVE_WEBSERVER) */
#ifdef SINGLE_THREADED

    int wc_InitMutex(wolfSSL_Mutex* m)
    {
    56e4:	b580      	push	{r7, lr}
    56e6:	b082      	sub	sp, #8
    56e8:	af00      	add	r7, sp, #0
    56ea:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
    56ec:	2300      	movs	r3, #0
    }
    56ee:	0018      	movs	r0, r3
    56f0:	46bd      	mov	sp, r7
    56f2:	b002      	add	sp, #8
    56f4:	bd80      	pop	{r7, pc}
    56f6:	46c0      	nop			; (mov r8, r8)

000056f8 <wc_FreeMutex>:

    int wc_FreeMutex(wolfSSL_Mutex *m)
    {
    56f8:	b580      	push	{r7, lr}
    56fa:	b082      	sub	sp, #8
    56fc:	af00      	add	r7, sp, #0
    56fe:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
    5700:	2300      	movs	r3, #0
    }
    5702:	0018      	movs	r0, r3
    5704:	46bd      	mov	sp, r7
    5706:	b002      	add	sp, #8
    5708:	bd80      	pop	{r7, pc}
    570a:	46c0      	nop			; (mov r8, r8)

0000570c <wc_GetErrorString>:
    #pragma warning(disable: 4996)
#endif

#ifndef NO_ERROR_STRINGS
const char* wc_GetErrorString(int error)
{
    570c:	b580      	push	{r7, lr}
    570e:	b082      	sub	sp, #8
    5710:	af00      	add	r7, sp, #0
    5712:	6078      	str	r0, [r7, #4]
    switch (error) {
    5714:	687b      	ldr	r3, [r7, #4]
    5716:	3310      	adds	r3, #16
    5718:	33ff      	adds	r3, #255	; 0xff
    571a:	2baa      	cmp	r3, #170	; 0xaa
    571c:	d900      	bls.n	5720 <wc_GetErrorString+0x14>
    571e:	e13c      	b.n	599a <wc_GetErrorString+0x28e>
    5720:	009a      	lsls	r2, r3, #2
    5722:	4ba0      	ldr	r3, [pc, #640]	; (59a4 <wc_GetErrorString+0x298>)
    5724:	18d3      	adds	r3, r2, r3
    5726:	681b      	ldr	r3, [r3, #0]
    5728:	469f      	mov	pc, r3

    case OPEN_RAN_E :
        return "opening random device error";
    572a:	4b9f      	ldr	r3, [pc, #636]	; (59a8 <wc_GetErrorString+0x29c>)
    572c:	e136      	b.n	599c <wc_GetErrorString+0x290>

    case READ_RAN_E :
        return "reading random device error";
    572e:	4b9f      	ldr	r3, [pc, #636]	; (59ac <wc_GetErrorString+0x2a0>)
    5730:	e134      	b.n	599c <wc_GetErrorString+0x290>

    case WINCRYPT_E :
        return "windows crypt init error";
    5732:	4b9f      	ldr	r3, [pc, #636]	; (59b0 <wc_GetErrorString+0x2a4>)
    5734:	e132      	b.n	599c <wc_GetErrorString+0x290>

    case CRYPTGEN_E :
        return "windows crypt generation error";
    5736:	4b9f      	ldr	r3, [pc, #636]	; (59b4 <wc_GetErrorString+0x2a8>)
    5738:	e130      	b.n	599c <wc_GetErrorString+0x290>

    case RAN_BLOCK_E :
        return "random device read would block error";
    573a:	4b9f      	ldr	r3, [pc, #636]	; (59b8 <wc_GetErrorString+0x2ac>)
    573c:	e12e      	b.n	599c <wc_GetErrorString+0x290>

    case BAD_MUTEX_E :
        return "Bad mutex, operation failed";
    573e:	4b9f      	ldr	r3, [pc, #636]	; (59bc <wc_GetErrorString+0x2b0>)
    5740:	e12c      	b.n	599c <wc_GetErrorString+0x290>

    case WC_TIMEOUT_E:
        return "Timeout error";
    5742:	4b9f      	ldr	r3, [pc, #636]	; (59c0 <wc_GetErrorString+0x2b4>)
    5744:	e12a      	b.n	599c <wc_GetErrorString+0x290>

    case WC_PENDING_E:
        return "wolfCrypt Operation Pending (would block / eagain) error";
    5746:	4b9f      	ldr	r3, [pc, #636]	; (59c4 <wc_GetErrorString+0x2b8>)
    5748:	e128      	b.n	599c <wc_GetErrorString+0x290>

    case WC_NOT_PENDING_E:
        return "wolfCrypt operation not pending error";
    574a:	4b9f      	ldr	r3, [pc, #636]	; (59c8 <wc_GetErrorString+0x2bc>)
    574c:	e126      	b.n	599c <wc_GetErrorString+0x290>

    case MP_INIT_E :
        return "mp_init error state";
    574e:	4b9f      	ldr	r3, [pc, #636]	; (59cc <wc_GetErrorString+0x2c0>)
    5750:	e124      	b.n	599c <wc_GetErrorString+0x290>

    case MP_READ_E :
        return "mp_read error state";
    5752:	4b9f      	ldr	r3, [pc, #636]	; (59d0 <wc_GetErrorString+0x2c4>)
    5754:	e122      	b.n	599c <wc_GetErrorString+0x290>

    case MP_EXPTMOD_E :
        return "mp_exptmod error state";
    5756:	4b9f      	ldr	r3, [pc, #636]	; (59d4 <wc_GetErrorString+0x2c8>)
    5758:	e120      	b.n	599c <wc_GetErrorString+0x290>

    case MP_TO_E :
        return "mp_to_xxx error state, can't convert";
    575a:	4b9f      	ldr	r3, [pc, #636]	; (59d8 <wc_GetErrorString+0x2cc>)
    575c:	e11e      	b.n	599c <wc_GetErrorString+0x290>

    case MP_SUB_E :
        return "mp_sub error state, can't subtract";
    575e:	4b9f      	ldr	r3, [pc, #636]	; (59dc <wc_GetErrorString+0x2d0>)
    5760:	e11c      	b.n	599c <wc_GetErrorString+0x290>

    case MP_ADD_E :
        return "mp_add error state, can't add";
    5762:	4b9f      	ldr	r3, [pc, #636]	; (59e0 <wc_GetErrorString+0x2d4>)
    5764:	e11a      	b.n	599c <wc_GetErrorString+0x290>

    case MP_MUL_E :
        return "mp_mul error state, can't multiply";
    5766:	4b9f      	ldr	r3, [pc, #636]	; (59e4 <wc_GetErrorString+0x2d8>)
    5768:	e118      	b.n	599c <wc_GetErrorString+0x290>

    case MP_MULMOD_E :
        return "mp_mulmod error state, can't multiply mod";
    576a:	4b9f      	ldr	r3, [pc, #636]	; (59e8 <wc_GetErrorString+0x2dc>)
    576c:	e116      	b.n	599c <wc_GetErrorString+0x290>

    case MP_MOD_E :
        return "mp_mod error state, can't mod";
    576e:	4b9f      	ldr	r3, [pc, #636]	; (59ec <wc_GetErrorString+0x2e0>)
    5770:	e114      	b.n	599c <wc_GetErrorString+0x290>

    case MP_INVMOD_E :
        return "mp_invmod error state, can't inv mod";
    5772:	4b9f      	ldr	r3, [pc, #636]	; (59f0 <wc_GetErrorString+0x2e4>)
    5774:	e112      	b.n	599c <wc_GetErrorString+0x290>

    case MP_CMP_E :
        return "mp_cmp error state";
    5776:	4b9f      	ldr	r3, [pc, #636]	; (59f4 <wc_GetErrorString+0x2e8>)
    5778:	e110      	b.n	599c <wc_GetErrorString+0x290>

    case MP_ZERO_E :
        return "mp zero result, not expected";
    577a:	4b9f      	ldr	r3, [pc, #636]	; (59f8 <wc_GetErrorString+0x2ec>)
    577c:	e10e      	b.n	599c <wc_GetErrorString+0x290>

    case MEMORY_E :
        return "out of memory error";
    577e:	4b9f      	ldr	r3, [pc, #636]	; (59fc <wc_GetErrorString+0x2f0>)
    5780:	e10c      	b.n	599c <wc_GetErrorString+0x290>

    case VAR_STATE_CHANGE_E :
        return "Variable state modified by different thread";
    5782:	4b9f      	ldr	r3, [pc, #636]	; (5a00 <wc_GetErrorString+0x2f4>)
    5784:	e10a      	b.n	599c <wc_GetErrorString+0x290>

    case RSA_WRONG_TYPE_E :
        return "RSA wrong block type for RSA function";
    5786:	4b9f      	ldr	r3, [pc, #636]	; (5a04 <wc_GetErrorString+0x2f8>)
    5788:	e108      	b.n	599c <wc_GetErrorString+0x290>

    case RSA_BUFFER_E :
        return "RSA buffer error, output too small or input too big";
    578a:	4b9f      	ldr	r3, [pc, #636]	; (5a08 <wc_GetErrorString+0x2fc>)
    578c:	e106      	b.n	599c <wc_GetErrorString+0x290>

    case BUFFER_E :
        return "Buffer error, output too small or input too big";
    578e:	4b9f      	ldr	r3, [pc, #636]	; (5a0c <wc_GetErrorString+0x300>)
    5790:	e104      	b.n	599c <wc_GetErrorString+0x290>

    case ALGO_ID_E :
        return "Setting Cert AlgoID error";
    5792:	4b9f      	ldr	r3, [pc, #636]	; (5a10 <wc_GetErrorString+0x304>)
    5794:	e102      	b.n	599c <wc_GetErrorString+0x290>

    case PUBLIC_KEY_E :
        return "Setting Cert Public Key error";
    5796:	4b9f      	ldr	r3, [pc, #636]	; (5a14 <wc_GetErrorString+0x308>)
    5798:	e100      	b.n	599c <wc_GetErrorString+0x290>

    case DATE_E :
        return "Setting Cert Date validity error";
    579a:	4b9f      	ldr	r3, [pc, #636]	; (5a18 <wc_GetErrorString+0x30c>)
    579c:	e0fe      	b.n	599c <wc_GetErrorString+0x290>

    case SUBJECT_E :
        return "Setting Cert Subject name error";
    579e:	4b9f      	ldr	r3, [pc, #636]	; (5a1c <wc_GetErrorString+0x310>)
    57a0:	e0fc      	b.n	599c <wc_GetErrorString+0x290>

    case ISSUER_E :
        return "Setting Cert Issuer name error";
    57a2:	4b9f      	ldr	r3, [pc, #636]	; (5a20 <wc_GetErrorString+0x314>)
    57a4:	e0fa      	b.n	599c <wc_GetErrorString+0x290>

    case CA_TRUE_E :
        return "Setting basic constraint CA true error";
    57a6:	4b9f      	ldr	r3, [pc, #636]	; (5a24 <wc_GetErrorString+0x318>)
    57a8:	e0f8      	b.n	599c <wc_GetErrorString+0x290>

    case EXTENSIONS_E :
        return "Setting extensions error";
    57aa:	4b9f      	ldr	r3, [pc, #636]	; (5a28 <wc_GetErrorString+0x31c>)
    57ac:	e0f6      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_PARSE_E :
        return "ASN parsing error, invalid input";
    57ae:	4b9f      	ldr	r3, [pc, #636]	; (5a2c <wc_GetErrorString+0x320>)
    57b0:	e0f4      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_VERSION_E :
        return "ASN version error, invalid number";
    57b2:	4b9f      	ldr	r3, [pc, #636]	; (5a30 <wc_GetErrorString+0x324>)
    57b4:	e0f2      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_GETINT_E :
        return "ASN get big int error, invalid data";
    57b6:	4b9f      	ldr	r3, [pc, #636]	; (5a34 <wc_GetErrorString+0x328>)
    57b8:	e0f0      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_RSA_KEY_E :
        return "ASN key init error, invalid input";
    57ba:	4b9f      	ldr	r3, [pc, #636]	; (5a38 <wc_GetErrorString+0x32c>)
    57bc:	e0ee      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_OBJECT_ID_E :
        return "ASN object id error, invalid id";
    57be:	4b9f      	ldr	r3, [pc, #636]	; (5a3c <wc_GetErrorString+0x330>)
    57c0:	e0ec      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_TAG_NULL_E :
        return "ASN tag error, not null";
    57c2:	4b9f      	ldr	r3, [pc, #636]	; (5a40 <wc_GetErrorString+0x334>)
    57c4:	e0ea      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_EXPECT_0_E :
        return "ASN expect error, not zero";
    57c6:	4b9f      	ldr	r3, [pc, #636]	; (5a44 <wc_GetErrorString+0x338>)
    57c8:	e0e8      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_BITSTR_E :
        return "ASN bit string error, wrong id";
    57ca:	4b9f      	ldr	r3, [pc, #636]	; (5a48 <wc_GetErrorString+0x33c>)
    57cc:	e0e6      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_UNKNOWN_OID_E :
        return "ASN oid error, unknown sum id";
    57ce:	4b9f      	ldr	r3, [pc, #636]	; (5a4c <wc_GetErrorString+0x340>)
    57d0:	e0e4      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_DATE_SZ_E :
        return "ASN date error, bad size";
    57d2:	4b9f      	ldr	r3, [pc, #636]	; (5a50 <wc_GetErrorString+0x344>)
    57d4:	e0e2      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_BEFORE_DATE_E :
        return "ASN date error, current date before";
    57d6:	4b9f      	ldr	r3, [pc, #636]	; (5a54 <wc_GetErrorString+0x348>)
    57d8:	e0e0      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_AFTER_DATE_E :
        return "ASN date error, current date after";
    57da:	4b9f      	ldr	r3, [pc, #636]	; (5a58 <wc_GetErrorString+0x34c>)
    57dc:	e0de      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_SIG_OID_E :
        return "ASN signature error, mismatched oid";
    57de:	4b9f      	ldr	r3, [pc, #636]	; (5a5c <wc_GetErrorString+0x350>)
    57e0:	e0dc      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_TIME_E :
        return "ASN time error, unknown time type";
    57e2:	4b9f      	ldr	r3, [pc, #636]	; (5a60 <wc_GetErrorString+0x354>)
    57e4:	e0da      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_INPUT_E :
        return "ASN input error, not enough data";
    57e6:	4b9f      	ldr	r3, [pc, #636]	; (5a64 <wc_GetErrorString+0x358>)
    57e8:	e0d8      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_SIG_CONFIRM_E :
        return "ASN sig error, confirm failure";
    57ea:	4b9f      	ldr	r3, [pc, #636]	; (5a68 <wc_GetErrorString+0x35c>)
    57ec:	e0d6      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_SIG_HASH_E :
        return "ASN sig error, unsupported hash type";
    57ee:	4b9f      	ldr	r3, [pc, #636]	; (5a6c <wc_GetErrorString+0x360>)
    57f0:	e0d4      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_SIG_KEY_E :
        return "ASN sig error, unsupported key type";
    57f2:	4b9f      	ldr	r3, [pc, #636]	; (5a70 <wc_GetErrorString+0x364>)
    57f4:	e0d2      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_DH_KEY_E :
        return "ASN key init error, invalid input";
    57f6:	4b90      	ldr	r3, [pc, #576]	; (5a38 <wc_GetErrorString+0x32c>)
    57f8:	e0d0      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_NTRU_KEY_E :
        return "ASN NTRU key decode error, invalid input";
    57fa:	4b9e      	ldr	r3, [pc, #632]	; (5a74 <wc_GetErrorString+0x368>)
    57fc:	e0ce      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_CRIT_EXT_E:
        return "X.509 Critical extension ignored or invalid";
    57fe:	4b9e      	ldr	r3, [pc, #632]	; (5a78 <wc_GetErrorString+0x36c>)
    5800:	e0cc      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_ALT_NAME_E:
        return "ASN alternate name error";
    5802:	4b9e      	ldr	r3, [pc, #632]	; (5a7c <wc_GetErrorString+0x370>)
    5804:	e0ca      	b.n	599c <wc_GetErrorString+0x290>

    case ECC_BAD_ARG_E :
        return "ECC input argument wrong type, invalid input";
    5806:	4b9e      	ldr	r3, [pc, #632]	; (5a80 <wc_GetErrorString+0x374>)
    5808:	e0c8      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_ECC_KEY_E :
        return "ECC ASN1 bad key data, invalid input";
    580a:	4b9e      	ldr	r3, [pc, #632]	; (5a84 <wc_GetErrorString+0x378>)
    580c:	e0c6      	b.n	599c <wc_GetErrorString+0x290>

    case ECC_CURVE_OID_E :
        return "ECC curve sum OID unsupported, invalid input";
    580e:	4b9e      	ldr	r3, [pc, #632]	; (5a88 <wc_GetErrorString+0x37c>)
    5810:	e0c4      	b.n	599c <wc_GetErrorString+0x290>

    case BAD_FUNC_ARG :
        return "Bad function argument";
    5812:	4b9e      	ldr	r3, [pc, #632]	; (5a8c <wc_GetErrorString+0x380>)
    5814:	e0c2      	b.n	599c <wc_GetErrorString+0x290>

    case NOT_COMPILED_IN :
        return "Feature not compiled in";
    5816:	4b9e      	ldr	r3, [pc, #632]	; (5a90 <wc_GetErrorString+0x384>)
    5818:	e0c0      	b.n	599c <wc_GetErrorString+0x290>

    case UNICODE_SIZE_E :
        return "Unicode password too big";
    581a:	4b9e      	ldr	r3, [pc, #632]	; (5a94 <wc_GetErrorString+0x388>)
    581c:	e0be      	b.n	599c <wc_GetErrorString+0x290>

    case NO_PASSWORD :
        return "No password provided by user";
    581e:	4b9e      	ldr	r3, [pc, #632]	; (5a98 <wc_GetErrorString+0x38c>)
    5820:	e0bc      	b.n	599c <wc_GetErrorString+0x290>

    case ALT_NAME_E :
        return "Alt Name problem, too big";
    5822:	4b9e      	ldr	r3, [pc, #632]	; (5a9c <wc_GetErrorString+0x390>)
    5824:	e0ba      	b.n	599c <wc_GetErrorString+0x290>

    case AES_GCM_AUTH_E:
        return "AES-GCM Authentication check fail";
    5826:	4b9e      	ldr	r3, [pc, #632]	; (5aa0 <wc_GetErrorString+0x394>)
    5828:	e0b8      	b.n	599c <wc_GetErrorString+0x290>

    case AES_CCM_AUTH_E:
        return "AES-CCM Authentication check fail";
    582a:	4b9e      	ldr	r3, [pc, #632]	; (5aa4 <wc_GetErrorString+0x398>)
    582c:	e0b6      	b.n	599c <wc_GetErrorString+0x290>

    case ASYNC_INIT_E:
        return "Async Init error";
    582e:	4b9e      	ldr	r3, [pc, #632]	; (5aa8 <wc_GetErrorString+0x39c>)
    5830:	e0b4      	b.n	599c <wc_GetErrorString+0x290>

    case COMPRESS_INIT_E:
        return "Compress Init error";
    5832:	4b9e      	ldr	r3, [pc, #632]	; (5aac <wc_GetErrorString+0x3a0>)
    5834:	e0b2      	b.n	599c <wc_GetErrorString+0x290>

    case COMPRESS_E:
        return "Compress error";
    5836:	4b9e      	ldr	r3, [pc, #632]	; (5ab0 <wc_GetErrorString+0x3a4>)
    5838:	e0b0      	b.n	599c <wc_GetErrorString+0x290>

    case DECOMPRESS_INIT_E:
        return "DeCompress Init error";
    583a:	4b9e      	ldr	r3, [pc, #632]	; (5ab4 <wc_GetErrorString+0x3a8>)
    583c:	e0ae      	b.n	599c <wc_GetErrorString+0x290>

    case DECOMPRESS_E:
        return "DeCompress error";
    583e:	4b9e      	ldr	r3, [pc, #632]	; (5ab8 <wc_GetErrorString+0x3ac>)
    5840:	e0ac      	b.n	599c <wc_GetErrorString+0x290>

    case BAD_ALIGN_E:
        return "Bad alignment error, no alloc help";
    5842:	4b9e      	ldr	r3, [pc, #632]	; (5abc <wc_GetErrorString+0x3b0>)
    5844:	e0aa      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_NO_SIGNER_E :
        return "ASN no signer error to confirm failure";
    5846:	4b9e      	ldr	r3, [pc, #632]	; (5ac0 <wc_GetErrorString+0x3b4>)
    5848:	e0a8      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_CRL_CONFIRM_E :
        return "ASN CRL sig error, confirm failure";
    584a:	4b9e      	ldr	r3, [pc, #632]	; (5ac4 <wc_GetErrorString+0x3b8>)
    584c:	e0a6      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_CRL_NO_SIGNER_E :
        return "ASN CRL no signer error to confirm failure";
    584e:	4b9e      	ldr	r3, [pc, #632]	; (5ac8 <wc_GetErrorString+0x3bc>)
    5850:	e0a4      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_OCSP_CONFIRM_E :
        return "ASN OCSP sig error, confirm failure";
    5852:	4b9e      	ldr	r3, [pc, #632]	; (5acc <wc_GetErrorString+0x3c0>)
    5854:	e0a2      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_NO_PEM_HEADER:
        return "ASN no PEM Header Error";
    5856:	4b9e      	ldr	r3, [pc, #632]	; (5ad0 <wc_GetErrorString+0x3c4>)
    5858:	e0a0      	b.n	599c <wc_GetErrorString+0x290>

    case BAD_STATE_E:
        return "Bad state operation";
    585a:	4b9e      	ldr	r3, [pc, #632]	; (5ad4 <wc_GetErrorString+0x3c8>)
    585c:	e09e      	b.n	599c <wc_GetErrorString+0x290>

    case BAD_PADDING_E:
        return "Bad padding, message wrong length";
    585e:	4b9e      	ldr	r3, [pc, #632]	; (5ad8 <wc_GetErrorString+0x3cc>)
    5860:	e09c      	b.n	599c <wc_GetErrorString+0x290>

    case REQ_ATTRIBUTE_E:
        return "Setting cert request attributes error";
    5862:	4b9e      	ldr	r3, [pc, #632]	; (5adc <wc_GetErrorString+0x3d0>)
    5864:	e09a      	b.n	599c <wc_GetErrorString+0x290>

    case PKCS7_OID_E:
        return "PKCS#7 error: mismatched OID value";
    5866:	4b9e      	ldr	r3, [pc, #632]	; (5ae0 <wc_GetErrorString+0x3d4>)
    5868:	e098      	b.n	599c <wc_GetErrorString+0x290>

    case PKCS7_RECIP_E:
        return "PKCS#7 error: no matching recipient found";
    586a:	4b9e      	ldr	r3, [pc, #632]	; (5ae4 <wc_GetErrorString+0x3d8>)
    586c:	e096      	b.n	599c <wc_GetErrorString+0x290>

    case WC_PKCS7_WANT_READ_E:
        return "PKCS#7 operations wants more input, call again";
    586e:	4b9e      	ldr	r3, [pc, #632]	; (5ae8 <wc_GetErrorString+0x3dc>)
    5870:	e094      	b.n	599c <wc_GetErrorString+0x290>

    case FIPS_NOT_ALLOWED_E:
        return "FIPS mode not allowed error";
    5872:	4b9e      	ldr	r3, [pc, #632]	; (5aec <wc_GetErrorString+0x3e0>)
    5874:	e092      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_NAME_INVALID_E:
        return "Name Constraint error";
    5876:	4b9e      	ldr	r3, [pc, #632]	; (5af0 <wc_GetErrorString+0x3e4>)
    5878:	e090      	b.n	599c <wc_GetErrorString+0x290>

    case RNG_FAILURE_E:
        return "Random Number Generator failed";
    587a:	4b9e      	ldr	r3, [pc, #632]	; (5af4 <wc_GetErrorString+0x3e8>)
    587c:	e08e      	b.n	599c <wc_GetErrorString+0x290>

    case HMAC_MIN_KEYLEN_E:
        return "FIPS Mode HMAC Minimum Key Length error";
    587e:	4b9e      	ldr	r3, [pc, #632]	; (5af8 <wc_GetErrorString+0x3ec>)
    5880:	e08c      	b.n	599c <wc_GetErrorString+0x290>

    case RSA_PAD_E:
        return "Rsa Padding error";
    5882:	4b9e      	ldr	r3, [pc, #632]	; (5afc <wc_GetErrorString+0x3f0>)
    5884:	e08a      	b.n	599c <wc_GetErrorString+0x290>

    case LENGTH_ONLY_E:
        return "Output length only set, not for other use error";
    5886:	4b9e      	ldr	r3, [pc, #632]	; (5b00 <wc_GetErrorString+0x3f4>)
    5888:	e088      	b.n	599c <wc_GetErrorString+0x290>

    case IN_CORE_FIPS_E:
        return "In Core Integrity check FIPS error";
    588a:	4b9e      	ldr	r3, [pc, #632]	; (5b04 <wc_GetErrorString+0x3f8>)
    588c:	e086      	b.n	599c <wc_GetErrorString+0x290>

    case AES_KAT_FIPS_E:
        return "AES Known Answer Test check FIPS error";
    588e:	4b9e      	ldr	r3, [pc, #632]	; (5b08 <wc_GetErrorString+0x3fc>)
    5890:	e084      	b.n	599c <wc_GetErrorString+0x290>

    case DES3_KAT_FIPS_E:
        return "DES3 Known Answer Test check FIPS error";
    5892:	4b9e      	ldr	r3, [pc, #632]	; (5b0c <wc_GetErrorString+0x400>)
    5894:	e082      	b.n	599c <wc_GetErrorString+0x290>

    case HMAC_KAT_FIPS_E:
        return "HMAC Known Answer Test check FIPS error";
    5896:	4b9e      	ldr	r3, [pc, #632]	; (5b10 <wc_GetErrorString+0x404>)
    5898:	e080      	b.n	599c <wc_GetErrorString+0x290>

    case RSA_KAT_FIPS_E:
        return "RSA Known Answer Test check FIPS error";
    589a:	4b9e      	ldr	r3, [pc, #632]	; (5b14 <wc_GetErrorString+0x408>)
    589c:	e07e      	b.n	599c <wc_GetErrorString+0x290>

    case DRBG_KAT_FIPS_E:
        return "DRBG Known Answer Test check FIPS error";
    589e:	4b9e      	ldr	r3, [pc, #632]	; (5b18 <wc_GetErrorString+0x40c>)
    58a0:	e07c      	b.n	599c <wc_GetErrorString+0x290>

    case DRBG_CONT_FIPS_E:
        return "DRBG Continuous Test FIPS error";
    58a2:	4b9e      	ldr	r3, [pc, #632]	; (5b1c <wc_GetErrorString+0x410>)
    58a4:	e07a      	b.n	599c <wc_GetErrorString+0x290>

    case AESGCM_KAT_FIPS_E:
        return "AESGCM Known Answer Test check FIPS error";
    58a6:	4b9e      	ldr	r3, [pc, #632]	; (5b20 <wc_GetErrorString+0x414>)
    58a8:	e078      	b.n	599c <wc_GetErrorString+0x290>

    case THREAD_STORE_KEY_E:
        return "Thread Storage Key Create error";
    58aa:	4b9e      	ldr	r3, [pc, #632]	; (5b24 <wc_GetErrorString+0x418>)
    58ac:	e076      	b.n	599c <wc_GetErrorString+0x290>

    case THREAD_STORE_SET_E:
        return "Thread Storage Set error";
    58ae:	4b9e      	ldr	r3, [pc, #632]	; (5b28 <wc_GetErrorString+0x41c>)
    58b0:	e074      	b.n	599c <wc_GetErrorString+0x290>

    case MAC_CMP_FAILED_E:
        return "MAC comparison failed";
    58b2:	4b9e      	ldr	r3, [pc, #632]	; (5b2c <wc_GetErrorString+0x420>)
    58b4:	e072      	b.n	599c <wc_GetErrorString+0x290>

    case IS_POINT_E:
        return "ECC is point on curve failed";
    58b6:	4b9e      	ldr	r3, [pc, #632]	; (5b30 <wc_GetErrorString+0x424>)
    58b8:	e070      	b.n	599c <wc_GetErrorString+0x290>

    case ECC_INF_E:
        return " ECC point at infinity error";
    58ba:	4b9e      	ldr	r3, [pc, #632]	; (5b34 <wc_GetErrorString+0x428>)
    58bc:	e06e      	b.n	599c <wc_GetErrorString+0x290>

    case ECC_OUT_OF_RANGE_E:
        return " ECC Qx or Qy out of range error";
    58be:	4b9e      	ldr	r3, [pc, #632]	; (5b38 <wc_GetErrorString+0x42c>)
    58c0:	e06c      	b.n	599c <wc_GetErrorString+0x290>

    case ECC_PRIV_KEY_E:
        return " ECC private key is not valid error";
    58c2:	4b9e      	ldr	r3, [pc, #632]	; (5b3c <wc_GetErrorString+0x430>)
    58c4:	e06a      	b.n	599c <wc_GetErrorString+0x290>

    case SRP_CALL_ORDER_E:
        return "SRP function called in the wrong order error";
    58c6:	4b9e      	ldr	r3, [pc, #632]	; (5b40 <wc_GetErrorString+0x434>)
    58c8:	e068      	b.n	599c <wc_GetErrorString+0x290>

    case SRP_VERIFY_E:
        return "SRP proof verification error";
    58ca:	4b9e      	ldr	r3, [pc, #632]	; (5b44 <wc_GetErrorString+0x438>)
    58cc:	e066      	b.n	599c <wc_GetErrorString+0x290>

    case SRP_BAD_KEY_E:
        return "SRP bad key values error";
    58ce:	4b9e      	ldr	r3, [pc, #632]	; (5b48 <wc_GetErrorString+0x43c>)
    58d0:	e064      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_NO_SKID:
        return "ASN no Subject Key Identifier found error";
    58d2:	4b9e      	ldr	r3, [pc, #632]	; (5b4c <wc_GetErrorString+0x440>)
    58d4:	e062      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_NO_AKID:
        return "ASN no Authority Key Identifier found error";
    58d6:	4b9e      	ldr	r3, [pc, #632]	; (5b50 <wc_GetErrorString+0x444>)
    58d8:	e060      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_NO_KEYUSAGE:
        return "ASN no Key Usage found error";
    58da:	4b9e      	ldr	r3, [pc, #632]	; (5b54 <wc_GetErrorString+0x448>)
    58dc:	e05e      	b.n	599c <wc_GetErrorString+0x290>

    case SKID_E:
        return "Setting Subject Key Identifier error";
    58de:	4b9e      	ldr	r3, [pc, #632]	; (5b58 <wc_GetErrorString+0x44c>)
    58e0:	e05c      	b.n	599c <wc_GetErrorString+0x290>

    case AKID_E:
        return "Setting Authority Key Identifier error";
    58e2:	4b9e      	ldr	r3, [pc, #632]	; (5b5c <wc_GetErrorString+0x450>)
    58e4:	e05a      	b.n	599c <wc_GetErrorString+0x290>

    case KEYUSAGE_E:
        return "Key Usage value error";
    58e6:	4b9e      	ldr	r3, [pc, #632]	; (5b60 <wc_GetErrorString+0x454>)
    58e8:	e058      	b.n	599c <wc_GetErrorString+0x290>

    case EXTKEYUSAGE_E:
        return "Extended Key Usage value error";
    58ea:	4b9e      	ldr	r3, [pc, #632]	; (5b64 <wc_GetErrorString+0x458>)
    58ec:	e056      	b.n	599c <wc_GetErrorString+0x290>

    case CERTPOLICIES_E:
        return "Setting Certificate Policies error";
    58ee:	4b9e      	ldr	r3, [pc, #632]	; (5b68 <wc_GetErrorString+0x45c>)
    58f0:	e054      	b.n	599c <wc_GetErrorString+0x290>

    case WC_INIT_E:
        return "wolfCrypt Initialize Failure error";
    58f2:	4b9e      	ldr	r3, [pc, #632]	; (5b6c <wc_GetErrorString+0x460>)
    58f4:	e052      	b.n	599c <wc_GetErrorString+0x290>

    case SIG_VERIFY_E:
        return "Signature verify error";
    58f6:	4b9e      	ldr	r3, [pc, #632]	; (5b70 <wc_GetErrorString+0x464>)
    58f8:	e050      	b.n	599c <wc_GetErrorString+0x290>

    case BAD_COND_E:
        return "Bad condition variable operation error";
    58fa:	4b9e      	ldr	r3, [pc, #632]	; (5b74 <wc_GetErrorString+0x468>)
    58fc:	e04e      	b.n	599c <wc_GetErrorString+0x290>

    case SIG_TYPE_E:
        return "Signature type not enabled/available";
    58fe:	4b9e      	ldr	r3, [pc, #632]	; (5b78 <wc_GetErrorString+0x46c>)
    5900:	e04c      	b.n	599c <wc_GetErrorString+0x290>

    case HASH_TYPE_E:
        return "Hash type not enabled/available";
    5902:	4b9e      	ldr	r3, [pc, #632]	; (5b7c <wc_GetErrorString+0x470>)
    5904:	e04a      	b.n	599c <wc_GetErrorString+0x290>

    case WC_KEY_SIZE_E:
        return "Key size error, either too small or large";
    5906:	4b9e      	ldr	r3, [pc, #632]	; (5b80 <wc_GetErrorString+0x474>)
    5908:	e048      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_COUNTRY_SIZE_E:
        return "Country code size error, either too small or large";
    590a:	4b9e      	ldr	r3, [pc, #632]	; (5b84 <wc_GetErrorString+0x478>)
    590c:	e046      	b.n	599c <wc_GetErrorString+0x290>

    case MISSING_RNG_E:
        return "RNG required but not provided";
    590e:	4b9e      	ldr	r3, [pc, #632]	; (5b88 <wc_GetErrorString+0x47c>)
    5910:	e044      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_PATHLEN_SIZE_E:
        return "ASN CA path length value too large error";
    5912:	4b9e      	ldr	r3, [pc, #632]	; (5b8c <wc_GetErrorString+0x480>)
    5914:	e042      	b.n	599c <wc_GetErrorString+0x290>

    case ASN_PATHLEN_INV_E:
        return "ASN CA path length larger than signer error";
    5916:	4b9e      	ldr	r3, [pc, #632]	; (5b90 <wc_GetErrorString+0x484>)
    5918:	e040      	b.n	599c <wc_GetErrorString+0x290>

    case BAD_KEYWRAP_ALG_E:
        return "Unsupported key wrap algorithm error";
    591a:	4b9e      	ldr	r3, [pc, #632]	; (5b94 <wc_GetErrorString+0x488>)
    591c:	e03e      	b.n	599c <wc_GetErrorString+0x290>

    case BAD_KEYWRAP_IV_E:
        return "Decrypted AES key wrap IV does not match expected";
    591e:	4b9e      	ldr	r3, [pc, #632]	; (5b98 <wc_GetErrorString+0x48c>)
    5920:	e03c      	b.n	599c <wc_GetErrorString+0x290>

    case WC_CLEANUP_E:
        return "wolfcrypt cleanup failed";
    5922:	4b9e      	ldr	r3, [pc, #632]	; (5b9c <wc_GetErrorString+0x490>)
    5924:	e03a      	b.n	599c <wc_GetErrorString+0x290>

    case ECC_CDH_KAT_FIPS_E:
        return "wolfcrypt FIPS ECC CDH Known Answer Test Failure";
    5926:	4b9e      	ldr	r3, [pc, #632]	; (5ba0 <wc_GetErrorString+0x494>)
    5928:	e038      	b.n	599c <wc_GetErrorString+0x290>

    case DH_CHECK_PUB_E:
        return "DH Check Public Key failure";
    592a:	4b9e      	ldr	r3, [pc, #632]	; (5ba4 <wc_GetErrorString+0x498>)
    592c:	e036      	b.n	599c <wc_GetErrorString+0x290>

    case BAD_PATH_ERROR:
        return "Bad path for opendir error";
    592e:	4b9e      	ldr	r3, [pc, #632]	; (5ba8 <wc_GetErrorString+0x49c>)
    5930:	e034      	b.n	599c <wc_GetErrorString+0x290>

    case ASYNC_OP_E:
        return "Async operation error";
    5932:	4b9e      	ldr	r3, [pc, #632]	; (5bac <wc_GetErrorString+0x4a0>)
    5934:	e032      	b.n	599c <wc_GetErrorString+0x290>

    case BAD_OCSP_RESPONDER:
        return "Invalid OCSP Responder, missing specific key usage extensions";
    5936:	4b9e      	ldr	r3, [pc, #632]	; (5bb0 <wc_GetErrorString+0x4a4>)
    5938:	e030      	b.n	599c <wc_GetErrorString+0x290>

    case ECC_PRIVATEONLY_E:
        return "Invalid use of private only ECC key";
    593a:	4b9e      	ldr	r3, [pc, #632]	; (5bb4 <wc_GetErrorString+0x4a8>)
    593c:	e02e      	b.n	599c <wc_GetErrorString+0x290>

    case WC_HW_E:
        return "Error with hardware crypto use";
    593e:	4b9e      	ldr	r3, [pc, #632]	; (5bb8 <wc_GetErrorString+0x4ac>)
    5940:	e02c      	b.n	599c <wc_GetErrorString+0x290>

    case WC_HW_WAIT_E:
        return "Hardware waiting on resource";
    5942:	4b9e      	ldr	r3, [pc, #632]	; (5bbc <wc_GetErrorString+0x4b0>)
    5944:	e02a      	b.n	599c <wc_GetErrorString+0x290>

    case PSS_SALTLEN_E:
        return "PSS - Length of salt is too big for hash algorithm";
    5946:	4b9e      	ldr	r3, [pc, #632]	; (5bc0 <wc_GetErrorString+0x4b4>)
    5948:	e028      	b.n	599c <wc_GetErrorString+0x290>

    case PRIME_GEN_E:
        return "Unable to find a prime for RSA key";
    594a:	4b9e      	ldr	r3, [pc, #632]	; (5bc4 <wc_GetErrorString+0x4b8>)
    594c:	e026      	b.n	599c <wc_GetErrorString+0x290>

    case BER_INDEF_E:
        return "Unable to decode an indefinite length encoded message";
    594e:	4b9e      	ldr	r3, [pc, #632]	; (5bc8 <wc_GetErrorString+0x4bc>)
    5950:	e024      	b.n	599c <wc_GetErrorString+0x290>

    case RSA_OUT_OF_RANGE_E:
        return "Ciphertext to decrypt is out of range";
    5952:	4b9e      	ldr	r3, [pc, #632]	; (5bcc <wc_GetErrorString+0x4c0>)
    5954:	e022      	b.n	599c <wc_GetErrorString+0x290>

    case RSAPSS_PAT_FIPS_E:
        return "wolfcrypt FIPS RSA-PSS Pairwise Agreement Test Failure";
    5956:	4b9e      	ldr	r3, [pc, #632]	; (5bd0 <wc_GetErrorString+0x4c4>)
    5958:	e020      	b.n	599c <wc_GetErrorString+0x290>

    case ECDSA_PAT_FIPS_E:
        return "wolfcrypt FIPS ECDSA Pairwise Agreement Test Failure";
    595a:	4b9e      	ldr	r3, [pc, #632]	; (5bd4 <wc_GetErrorString+0x4c8>)
    595c:	e01e      	b.n	599c <wc_GetErrorString+0x290>

    case DH_KAT_FIPS_E:
        return "wolfcrypt FIPS DH Known Answer Test Failure";
    595e:	4b9e      	ldr	r3, [pc, #632]	; (5bd8 <wc_GetErrorString+0x4cc>)
    5960:	e01c      	b.n	599c <wc_GetErrorString+0x290>

    case AESCCM_KAT_FIPS_E:
        return "AESCCM Known Answer Test check FIPS error";
    5962:	4b9e      	ldr	r3, [pc, #632]	; (5bdc <wc_GetErrorString+0x4d0>)
    5964:	e01a      	b.n	599c <wc_GetErrorString+0x290>

    case SHA3_KAT_FIPS_E:
        return "SHA-3 Known Answer Test check FIPS error";
    5966:	4b9e      	ldr	r3, [pc, #632]	; (5be0 <wc_GetErrorString+0x4d4>)
    5968:	e018      	b.n	599c <wc_GetErrorString+0x290>

    case ECDHE_KAT_FIPS_E:
        return "wolfcrypt FIPS ECDHE Known Answer Test Failure";
    596a:	4b9e      	ldr	r3, [pc, #632]	; (5be4 <wc_GetErrorString+0x4d8>)
    596c:	e016      	b.n	599c <wc_GetErrorString+0x290>

    case AES_GCM_OVERFLOW_E:
        return "AES-GCM invocation counter overflow";
    596e:	4b9e      	ldr	r3, [pc, #632]	; (5be8 <wc_GetErrorString+0x4dc>)
    5970:	e014      	b.n	599c <wc_GetErrorString+0x290>

    case AES_CCM_OVERFLOW_E:
        return "AES-CCM invocation counter overflow";
    5972:	4b9e      	ldr	r3, [pc, #632]	; (5bec <wc_GetErrorString+0x4e0>)
    5974:	e012      	b.n	599c <wc_GetErrorString+0x290>

    case RSA_KEY_PAIR_E:
        return "RSA Key Pair-Wise Consistency check fail";
    5976:	4b9e      	ldr	r3, [pc, #632]	; (5bf0 <wc_GetErrorString+0x4e4>)
    5978:	e010      	b.n	599c <wc_GetErrorString+0x290>

    case DH_CHECK_PRIV_E:
        return "DH Check Private Key failure";
    597a:	4b9e      	ldr	r3, [pc, #632]	; (5bf4 <wc_GetErrorString+0x4e8>)
    597c:	e00e      	b.n	599c <wc_GetErrorString+0x290>

    case WC_AFALG_SOCK_E:
        return "AF_ALG socket error";
    597e:	4b9e      	ldr	r3, [pc, #632]	; (5bf8 <wc_GetErrorString+0x4ec>)
    5980:	e00c      	b.n	599c <wc_GetErrorString+0x290>

    case WC_DEVCRYPTO_E:
        return "Error with /dev/crypto";
    5982:	4b9e      	ldr	r3, [pc, #632]	; (5bfc <wc_GetErrorString+0x4f0>)
    5984:	e00a      	b.n	599c <wc_GetErrorString+0x290>

    case ZLIB_INIT_ERROR:
        return "zlib init error";
    5986:	4b9e      	ldr	r3, [pc, #632]	; (5c00 <wc_GetErrorString+0x4f4>)
    5988:	e008      	b.n	599c <wc_GetErrorString+0x290>

    case ZLIB_COMPRESS_ERROR:
        return "zlib compress error";
    598a:	4b9e      	ldr	r3, [pc, #632]	; (5c04 <wc_GetErrorString+0x4f8>)
    598c:	e006      	b.n	599c <wc_GetErrorString+0x290>

    case ZLIB_DECOMPRESS_ERROR:
        return "zlib decompress error";
    598e:	4b9e      	ldr	r3, [pc, #632]	; (5c08 <wc_GetErrorString+0x4fc>)
    5990:	e004      	b.n	599c <wc_GetErrorString+0x290>

    case PKCS7_NO_SIGNER_E:
        return "No signer in PKCS#7 signed data";
    5992:	4b9e      	ldr	r3, [pc, #632]	; (5c0c <wc_GetErrorString+0x500>)
    5994:	e002      	b.n	599c <wc_GetErrorString+0x290>

    case CRYPTOCB_UNAVAILABLE:
        return "Crypto callback unavailable";
    5996:	4b9e      	ldr	r3, [pc, #632]	; (5c10 <wc_GetErrorString+0x504>)
    5998:	e000      	b.n	599c <wc_GetErrorString+0x290>

    default:
        return "unknown error number";
    599a:	4b9e      	ldr	r3, [pc, #632]	; (5c14 <wc_GetErrorString+0x508>)

    }
}
    599c:	0018      	movs	r0, r3
    599e:	46bd      	mov	sp, r7
    59a0:	b002      	add	sp, #8
    59a2:	bd80      	pop	{r7, pc}
    59a4:	00029bf8 	.word	0x00029bf8
    59a8:	000286a8 	.word	0x000286a8
    59ac:	000286c4 	.word	0x000286c4
    59b0:	000286e0 	.word	0x000286e0
    59b4:	000286fc 	.word	0x000286fc
    59b8:	0002871c 	.word	0x0002871c
    59bc:	00028744 	.word	0x00028744
    59c0:	00028760 	.word	0x00028760
    59c4:	00028770 	.word	0x00028770
    59c8:	000287ac 	.word	0x000287ac
    59cc:	000287d4 	.word	0x000287d4
    59d0:	000287e8 	.word	0x000287e8
    59d4:	000287fc 	.word	0x000287fc
    59d8:	00028814 	.word	0x00028814
    59dc:	0002883c 	.word	0x0002883c
    59e0:	00028860 	.word	0x00028860
    59e4:	00028880 	.word	0x00028880
    59e8:	000288a4 	.word	0x000288a4
    59ec:	000288d0 	.word	0x000288d0
    59f0:	000288f0 	.word	0x000288f0
    59f4:	00028918 	.word	0x00028918
    59f8:	0002892c 	.word	0x0002892c
    59fc:	0002894c 	.word	0x0002894c
    5a00:	00028960 	.word	0x00028960
    5a04:	0002898c 	.word	0x0002898c
    5a08:	000289b4 	.word	0x000289b4
    5a0c:	000289e8 	.word	0x000289e8
    5a10:	00028a18 	.word	0x00028a18
    5a14:	00028a34 	.word	0x00028a34
    5a18:	00028a54 	.word	0x00028a54
    5a1c:	00028a78 	.word	0x00028a78
    5a20:	00028a98 	.word	0x00028a98
    5a24:	00028ab8 	.word	0x00028ab8
    5a28:	00028ae0 	.word	0x00028ae0
    5a2c:	00028afc 	.word	0x00028afc
    5a30:	00028b20 	.word	0x00028b20
    5a34:	00028b44 	.word	0x00028b44
    5a38:	00028b68 	.word	0x00028b68
    5a3c:	00028b8c 	.word	0x00028b8c
    5a40:	00028bac 	.word	0x00028bac
    5a44:	00028bc4 	.word	0x00028bc4
    5a48:	00028be0 	.word	0x00028be0
    5a4c:	00028c00 	.word	0x00028c00
    5a50:	00028c20 	.word	0x00028c20
    5a54:	00028c3c 	.word	0x00028c3c
    5a58:	00028c60 	.word	0x00028c60
    5a5c:	00028c84 	.word	0x00028c84
    5a60:	00028ca8 	.word	0x00028ca8
    5a64:	00028ccc 	.word	0x00028ccc
    5a68:	00028cf0 	.word	0x00028cf0
    5a6c:	00028d10 	.word	0x00028d10
    5a70:	00028d38 	.word	0x00028d38
    5a74:	00028d5c 	.word	0x00028d5c
    5a78:	00028d88 	.word	0x00028d88
    5a7c:	00028db4 	.word	0x00028db4
    5a80:	00028dd0 	.word	0x00028dd0
    5a84:	00028e00 	.word	0x00028e00
    5a88:	00028e28 	.word	0x00028e28
    5a8c:	00028e58 	.word	0x00028e58
    5a90:	00028e70 	.word	0x00028e70
    5a94:	00028e88 	.word	0x00028e88
    5a98:	00028ea4 	.word	0x00028ea4
    5a9c:	00028ec4 	.word	0x00028ec4
    5aa0:	00028ee0 	.word	0x00028ee0
    5aa4:	00028f04 	.word	0x00028f04
    5aa8:	00028f28 	.word	0x00028f28
    5aac:	00028f3c 	.word	0x00028f3c
    5ab0:	00028f50 	.word	0x00028f50
    5ab4:	00028f60 	.word	0x00028f60
    5ab8:	00028f78 	.word	0x00028f78
    5abc:	00028f8c 	.word	0x00028f8c
    5ac0:	00028fb0 	.word	0x00028fb0
    5ac4:	00028fd8 	.word	0x00028fd8
    5ac8:	00028ffc 	.word	0x00028ffc
    5acc:	00029028 	.word	0x00029028
    5ad0:	0002904c 	.word	0x0002904c
    5ad4:	00029064 	.word	0x00029064
    5ad8:	00029078 	.word	0x00029078
    5adc:	0002909c 	.word	0x0002909c
    5ae0:	000290c4 	.word	0x000290c4
    5ae4:	000290e8 	.word	0x000290e8
    5ae8:	00029114 	.word	0x00029114
    5aec:	00029144 	.word	0x00029144
    5af0:	00029160 	.word	0x00029160
    5af4:	00029178 	.word	0x00029178
    5af8:	00029198 	.word	0x00029198
    5afc:	000291c0 	.word	0x000291c0
    5b00:	000291d4 	.word	0x000291d4
    5b04:	00029204 	.word	0x00029204
    5b08:	00029228 	.word	0x00029228
    5b0c:	00029250 	.word	0x00029250
    5b10:	00029278 	.word	0x00029278
    5b14:	000292a0 	.word	0x000292a0
    5b18:	000292c8 	.word	0x000292c8
    5b1c:	000292f0 	.word	0x000292f0
    5b20:	00029310 	.word	0x00029310
    5b24:	0002933c 	.word	0x0002933c
    5b28:	0002935c 	.word	0x0002935c
    5b2c:	00029378 	.word	0x00029378
    5b30:	00029390 	.word	0x00029390
    5b34:	000293b0 	.word	0x000293b0
    5b38:	000293d0 	.word	0x000293d0
    5b3c:	000293f4 	.word	0x000293f4
    5b40:	00029418 	.word	0x00029418
    5b44:	00029448 	.word	0x00029448
    5b48:	00029468 	.word	0x00029468
    5b4c:	00029484 	.word	0x00029484
    5b50:	000294b0 	.word	0x000294b0
    5b54:	000294dc 	.word	0x000294dc
    5b58:	000294fc 	.word	0x000294fc
    5b5c:	00029524 	.word	0x00029524
    5b60:	0002954c 	.word	0x0002954c
    5b64:	00029564 	.word	0x00029564
    5b68:	00029584 	.word	0x00029584
    5b6c:	000295a8 	.word	0x000295a8
    5b70:	000295cc 	.word	0x000295cc
    5b74:	000295e4 	.word	0x000295e4
    5b78:	0002960c 	.word	0x0002960c
    5b7c:	00029634 	.word	0x00029634
    5b80:	00029654 	.word	0x00029654
    5b84:	00029680 	.word	0x00029680
    5b88:	000296b4 	.word	0x000296b4
    5b8c:	000296d4 	.word	0x000296d4
    5b90:	00029700 	.word	0x00029700
    5b94:	0002972c 	.word	0x0002972c
    5b98:	00029754 	.word	0x00029754
    5b9c:	00029788 	.word	0x00029788
    5ba0:	000297a4 	.word	0x000297a4
    5ba4:	000297d8 	.word	0x000297d8
    5ba8:	000297f4 	.word	0x000297f4
    5bac:	00029810 	.word	0x00029810
    5bb0:	00029828 	.word	0x00029828
    5bb4:	00029868 	.word	0x00029868
    5bb8:	0002988c 	.word	0x0002988c
    5bbc:	000298ac 	.word	0x000298ac
    5bc0:	000298cc 	.word	0x000298cc
    5bc4:	00029900 	.word	0x00029900
    5bc8:	00029924 	.word	0x00029924
    5bcc:	0002995c 	.word	0x0002995c
    5bd0:	00029984 	.word	0x00029984
    5bd4:	000299bc 	.word	0x000299bc
    5bd8:	000299f4 	.word	0x000299f4
    5bdc:	00029a20 	.word	0x00029a20
    5be0:	00029a4c 	.word	0x00029a4c
    5be4:	00029a78 	.word	0x00029a78
    5be8:	00029aa8 	.word	0x00029aa8
    5bec:	00029acc 	.word	0x00029acc
    5bf0:	00029af0 	.word	0x00029af0
    5bf4:	00029b1c 	.word	0x00029b1c
    5bf8:	00029b3c 	.word	0x00029b3c
    5bfc:	00029b50 	.word	0x00029b50
    5c00:	00029b68 	.word	0x00029b68
    5c04:	00029b78 	.word	0x00029b78
    5c08:	00029b8c 	.word	0x00029b8c
    5c0c:	00029ba4 	.word	0x00029ba4
    5c10:	00029bc4 	.word	0x00029bc4
    5c14:	00029be0 	.word	0x00029be0

00005c18 <wc_ErrorString>:

void wc_ErrorString(int error, char* buffer)
{
    5c18:	b580      	push	{r7, lr}
    5c1a:	b082      	sub	sp, #8
    5c1c:	af00      	add	r7, sp, #0
    5c1e:	6078      	str	r0, [r7, #4]
    5c20:	6039      	str	r1, [r7, #0]
    XSTRNCPY(buffer, wc_GetErrorString(error), WOLFSSL_MAX_ERROR_SZ);
    5c22:	687b      	ldr	r3, [r7, #4]
    5c24:	0018      	movs	r0, r3
    5c26:	f7ff fd71 	bl	570c <wc_GetErrorString>
    5c2a:	0001      	movs	r1, r0
    5c2c:	683b      	ldr	r3, [r7, #0]
    5c2e:	2250      	movs	r2, #80	; 0x50
    5c30:	0018      	movs	r0, r3
    5c32:	f020 fbd6 	bl	263e2 <strncpy>
}
    5c36:	46c0      	nop			; (mov r8, r8)
    5c38:	46bd      	mov	sp, r7
    5c3a:	b002      	add	sp, #8
    5c3c:	bd80      	pop	{r7, pc}
    5c3e:	46c0      	nop			; (mov r8, r8)

00005c40 <wc_SignatureGetSize>:
}
#endif /* !NO_RSA && !NO_ASN */

int wc_SignatureGetSize(enum wc_SignatureType sig_type,
    const void* key, word32 key_len)
{
    5c40:	b580      	push	{r7, lr}
    5c42:	b086      	sub	sp, #24
    5c44:	af00      	add	r7, sp, #0
    5c46:	60b9      	str	r1, [r7, #8]
    5c48:	607a      	str	r2, [r7, #4]
    5c4a:	230f      	movs	r3, #15
    5c4c:	18fb      	adds	r3, r7, r3
    5c4e:	1c02      	adds	r2, r0, #0
    5c50:	701a      	strb	r2, [r3, #0]
    int sig_len = BAD_FUNC_ARG;
    5c52:	23ad      	movs	r3, #173	; 0xad
    5c54:	425b      	negs	r3, r3
    5c56:	617b      	str	r3, [r7, #20]

    /* Suppress possible unused args if all signature types are disabled */
    (void)key;
    (void)key_len;

    switch(sig_type) {
    5c58:	230f      	movs	r3, #15
    5c5a:	18fb      	adds	r3, r7, r3
    5c5c:	781b      	ldrb	r3, [r3, #0]
    5c5e:	2b01      	cmp	r3, #1
    5c60:	d003      	beq.n	5c6a <wc_SignatureGetSize+0x2a>
    5c62:	db11      	blt.n	5c88 <wc_SignatureGetSize+0x48>
    5c64:	2b03      	cmp	r3, #3
    5c66:	dc0f      	bgt.n	5c88 <wc_SignatureGetSize+0x48>
    5c68:	e00a      	b.n	5c80 <wc_SignatureGetSize+0x40>
        case WC_SIGNATURE_TYPE_ECC:
#ifdef HAVE_ECC
            /* Sanity check that void* key is at least ecc_key in size */
            if (key_len >= sizeof(ecc_key)) {
    5c6a:	687b      	ldr	r3, [r7, #4]
    5c6c:	4a0b      	ldr	r2, [pc, #44]	; (5c9c <wc_SignatureGetSize+0x5c>)
    5c6e:	4293      	cmp	r3, r2
    5c70:	d90e      	bls.n	5c90 <wc_SignatureGetSize+0x50>
                sig_len = wc_ecc_sig_size((ecc_key*)key);
    5c72:	68bb      	ldr	r3, [r7, #8]
    5c74:	0018      	movs	r0, r3
    5c76:	f009 fb5b 	bl	f330 <wc_ecc_sig_size>
    5c7a:	0003      	movs	r3, r0
    5c7c:	617b      	str	r3, [r7, #20]
                WOLFSSL_MSG("wc_SignatureGetSize: Invalid ECC key size");
            }
#else
            sig_len = SIG_TYPE_E;
#endif
            break;
    5c7e:	e007      	b.n	5c90 <wc_SignatureGetSize+0x50>
            }
            else {
                WOLFSSL_MSG("wc_SignatureGetSize: Invalid RsaKey key size");
            }
#else
            sig_len = SIG_TYPE_E;
    5c80:	23e7      	movs	r3, #231	; 0xe7
    5c82:	425b      	negs	r3, r3
    5c84:	617b      	str	r3, [r7, #20]
#endif
            break;
    5c86:	e004      	b.n	5c92 <wc_SignatureGetSize+0x52>

        case WC_SIGNATURE_TYPE_NONE:
        default:
            sig_len = BAD_FUNC_ARG;
    5c88:	23ad      	movs	r3, #173	; 0xad
    5c8a:	425b      	negs	r3, r3
    5c8c:	617b      	str	r3, [r7, #20]
            break;
    5c8e:	e000      	b.n	5c92 <wc_SignatureGetSize+0x52>
                WOLFSSL_MSG("wc_SignatureGetSize: Invalid ECC key size");
            }
#else
            sig_len = SIG_TYPE_E;
#endif
            break;
    5c90:	46c0      	nop			; (mov r8, r8)
        case WC_SIGNATURE_TYPE_NONE:
        default:
            sig_len = BAD_FUNC_ARG;
            break;
    }
    return sig_len;
    5c92:	697b      	ldr	r3, [r7, #20]
}
    5c94:	0018      	movs	r0, r3
    5c96:	46bd      	mov	sp, r7
    5c98:	b006      	add	sp, #24
    5c9a:	bd80      	pop	{r7, pc}
    5c9c:	00000377 	.word	0x00000377

00005ca0 <wc_SignatureVerifyHash>:
int wc_SignatureVerifyHash(
    enum wc_HashType hash_type, enum wc_SignatureType sig_type,
    const byte* hash_data, word32 hash_len,
    const byte* sig, word32 sig_len,
    const void* key, word32 key_len)
{
    5ca0:	b590      	push	{r4, r7, lr}
    5ca2:	b089      	sub	sp, #36	; 0x24
    5ca4:	af02      	add	r7, sp, #8
    5ca6:	60ba      	str	r2, [r7, #8]
    5ca8:	607b      	str	r3, [r7, #4]
    5caa:	230f      	movs	r3, #15
    5cac:	18fb      	adds	r3, r7, r3
    5cae:	1c02      	adds	r2, r0, #0
    5cb0:	701a      	strb	r2, [r3, #0]
    5cb2:	230e      	movs	r3, #14
    5cb4:	18fb      	adds	r3, r7, r3
    5cb6:	1c0a      	adds	r2, r1, #0
    5cb8:	701a      	strb	r2, [r3, #0]
    int ret;

    /* Check arguments */
    if (hash_data == NULL || hash_len <= 0 ||
    5cba:	68bb      	ldr	r3, [r7, #8]
    5cbc:	2b00      	cmp	r3, #0
    5cbe:	d00e      	beq.n	5cde <wc_SignatureVerifyHash+0x3e>
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	d00b      	beq.n	5cde <wc_SignatureVerifyHash+0x3e>
    5cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d008      	beq.n	5cde <wc_SignatureVerifyHash+0x3e>
        sig == NULL || sig_len <= 0 ||
    5ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5cce:	2b00      	cmp	r3, #0
    5cd0:	d005      	beq.n	5cde <wc_SignatureVerifyHash+0x3e>
    5cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5cd4:	2b00      	cmp	r3, #0
    5cd6:	d002      	beq.n	5cde <wc_SignatureVerifyHash+0x3e>
        key == NULL || key_len <= 0) {
    5cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d102      	bne.n	5ce4 <wc_SignatureVerifyHash+0x44>
        return BAD_FUNC_ARG;
    5cde:	23ad      	movs	r3, #173	; 0xad
    5ce0:	425b      	negs	r3, r3
    5ce2:	e051      	b.n	5d88 <wc_SignatureVerifyHash+0xe8>
    }

    /* Validate signature len (1 to max is okay) */
    if ((int)sig_len > wc_SignatureGetSize(sig_type, key, key_len)) {
    5ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5ce6:	6b39      	ldr	r1, [r7, #48]	; 0x30
    5ce8:	230e      	movs	r3, #14
    5cea:	18fb      	adds	r3, r7, r3
    5cec:	781b      	ldrb	r3, [r3, #0]
    5cee:	0018      	movs	r0, r3
    5cf0:	f7ff ffa6 	bl	5c40 <wc_SignatureGetSize>
    5cf4:	0002      	movs	r2, r0
    5cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5cf8:	429a      	cmp	r2, r3
    5cfa:	da02      	bge.n	5d02 <wc_SignatureVerifyHash+0x62>
        WOLFSSL_MSG("wc_SignatureVerify: Invalid sig type/len");
        return BAD_FUNC_ARG;
    5cfc:	23ad      	movs	r3, #173	; 0xad
    5cfe:	425b      	negs	r3, r3
    5d00:	e042      	b.n	5d88 <wc_SignatureVerifyHash+0xe8>
    }

    /* Validate hash size */
    ret = wc_HashGetDigestSize(hash_type);
    5d02:	230f      	movs	r3, #15
    5d04:	18fb      	adds	r3, r7, r3
    5d06:	781b      	ldrb	r3, [r3, #0]
    5d08:	0018      	movs	r0, r3
    5d0a:	f000 fa4f 	bl	61ac <wc_HashGetDigestSize>
    5d0e:	0003      	movs	r3, r0
    5d10:	617b      	str	r3, [r7, #20]
    if (ret < 0) {
    5d12:	697b      	ldr	r3, [r7, #20]
    5d14:	2b00      	cmp	r3, #0
    5d16:	da01      	bge.n	5d1c <wc_SignatureVerifyHash+0x7c>
        WOLFSSL_MSG("wc_SignatureVerify: Invalid hash type/len");
        return ret;
    5d18:	697b      	ldr	r3, [r7, #20]
    5d1a:	e035      	b.n	5d88 <wc_SignatureVerifyHash+0xe8>
    }
    ret = 0;
    5d1c:	2300      	movs	r3, #0
    5d1e:	617b      	str	r3, [r7, #20]

    /* Verify signature using hash */
    switch (sig_type) {
    5d20:	230e      	movs	r3, #14
    5d22:	18fb      	adds	r3, r7, r3
    5d24:	781b      	ldrb	r3, [r3, #0]
    5d26:	2b01      	cmp	r3, #1
    5d28:	d003      	beq.n	5d32 <wc_SignatureVerifyHash+0x92>
    5d2a:	db27      	blt.n	5d7c <wc_SignatureVerifyHash+0xdc>
    5d2c:	2b03      	cmp	r3, #3
    5d2e:	dc25      	bgt.n	5d7c <wc_SignatureVerifyHash+0xdc>
    5d30:	e020      	b.n	5d74 <wc_SignatureVerifyHash+0xd4>
        case WC_SIGNATURE_TYPE_ECC:
        {
#if defined(HAVE_ECC) && defined(HAVE_ECC_VERIFY)
            int is_valid_sig = 0;
    5d32:	2300      	movs	r3, #0
    5d34:	613b      	str	r3, [r7, #16]
            do {
            #ifdef WOLFSSL_ASYNC_CRYPT
                ret = wc_AsyncWait(ret, &((ecc_key*)key)->asyncDev,
                    WC_ASYNC_FLAG_CALL_AGAIN);
            #endif
            if (ret >= 0)
    5d36:	697b      	ldr	r3, [r7, #20]
    5d38:	2b00      	cmp	r3, #0
    5d3a:	db0d      	blt.n	5d58 <wc_SignatureVerifyHash+0xb8>
                ret = wc_ecc_verify_hash(sig, sig_len, hash_data, hash_len,
    5d3c:	687c      	ldr	r4, [r7, #4]
    5d3e:	68ba      	ldr	r2, [r7, #8]
    5d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    5d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d46:	9301      	str	r3, [sp, #4]
    5d48:	2310      	movs	r3, #16
    5d4a:	18fb      	adds	r3, r7, r3
    5d4c:	9300      	str	r3, [sp, #0]
    5d4e:	0023      	movs	r3, r4
    5d50:	f008 faf4 	bl	e33c <wc_ecc_verify_hash>
    5d54:	0003      	movs	r3, r0
    5d56:	617b      	str	r3, [r7, #20]
                    &is_valid_sig, (ecc_key*)key);
            } while (ret == WC_PENDING_E);
    5d58:	697b      	ldr	r3, [r7, #20]
    5d5a:	336c      	adds	r3, #108	; 0x6c
    5d5c:	d0eb      	beq.n	5d36 <wc_SignatureVerifyHash+0x96>
            if (ret != 0 || is_valid_sig != 1) {
    5d5e:	697b      	ldr	r3, [r7, #20]
    5d60:	2b00      	cmp	r3, #0
    5d62:	d102      	bne.n	5d6a <wc_SignatureVerifyHash+0xca>
    5d64:	693b      	ldr	r3, [r7, #16]
    5d66:	2b01      	cmp	r3, #1
    5d68:	d00c      	beq.n	5d84 <wc_SignatureVerifyHash+0xe4>
                ret = SIG_VERIFY_E;
    5d6a:	23e5      	movs	r3, #229	; 0xe5
    5d6c:	425b      	negs	r3, r3
    5d6e:	617b      	str	r3, [r7, #20]
            }
#else
            ret = SIG_TYPE_E;
#endif
            break;
    5d70:	46c0      	nop			; (mov r8, r8)
    5d72:	e007      	b.n	5d84 <wc_SignatureVerifyHash+0xe4>
            }
            else {
                ret = MEMORY_E;
            }
#else
            ret = SIG_TYPE_E;
    5d74:	23e7      	movs	r3, #231	; 0xe7
    5d76:	425b      	negs	r3, r3
    5d78:	617b      	str	r3, [r7, #20]
#endif
            break;
    5d7a:	e004      	b.n	5d86 <wc_SignatureVerifyHash+0xe6>
        }

        case WC_SIGNATURE_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
    5d7c:	23ad      	movs	r3, #173	; 0xad
    5d7e:	425b      	negs	r3, r3
    5d80:	617b      	str	r3, [r7, #20]
            break;
    5d82:	e000      	b.n	5d86 <wc_SignatureVerifyHash+0xe6>
                ret = SIG_VERIFY_E;
            }
#else
            ret = SIG_TYPE_E;
#endif
            break;
    5d84:	46c0      	nop			; (mov r8, r8)
        default:
            ret = BAD_FUNC_ARG;
            break;
    }

    return ret;
    5d86:	697b      	ldr	r3, [r7, #20]
}
    5d88:	0018      	movs	r0, r3
    5d8a:	46bd      	mov	sp, r7
    5d8c:	b007      	add	sp, #28
    5d8e:	bd90      	pop	{r4, r7, pc}

00005d90 <wc_SignatureVerify>:
int wc_SignatureVerify(
    enum wc_HashType hash_type, enum wc_SignatureType sig_type,
    const byte* data, word32 data_len,
    const byte* sig, word32 sig_len,
    const void* key, word32 key_len)
{
    5d90:	b590      	push	{r4, r7, lr}
    5d92:	b08f      	sub	sp, #60	; 0x3c
    5d94:	af04      	add	r7, sp, #16
    5d96:	60ba      	str	r2, [r7, #8]
    5d98:	607b      	str	r3, [r7, #4]
    5d9a:	230f      	movs	r3, #15
    5d9c:	18fb      	adds	r3, r7, r3
    5d9e:	1c02      	adds	r2, r0, #0
    5da0:	701a      	strb	r2, [r3, #0]
    5da2:	230e      	movs	r3, #14
    5da4:	18fb      	adds	r3, r7, r3
    5da6:	1c0a      	adds	r2, r1, #0
    5da8:	701a      	strb	r2, [r3, #0]
#else
    byte hash_data[MAX_DER_DIGEST_SZ];
#endif

    /* Check arguments */
    if (data == NULL || data_len <= 0 ||
    5daa:	68bb      	ldr	r3, [r7, #8]
    5dac:	2b00      	cmp	r3, #0
    5dae:	d00e      	beq.n	5dce <wc_SignatureVerify+0x3e>
    5db0:	687b      	ldr	r3, [r7, #4]
    5db2:	2b00      	cmp	r3, #0
    5db4:	d00b      	beq.n	5dce <wc_SignatureVerify+0x3e>
    5db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5db8:	2b00      	cmp	r3, #0
    5dba:	d008      	beq.n	5dce <wc_SignatureVerify+0x3e>
        sig == NULL || sig_len <= 0 ||
    5dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5dbe:	2b00      	cmp	r3, #0
    5dc0:	d005      	beq.n	5dce <wc_SignatureVerify+0x3e>
    5dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d002      	beq.n	5dce <wc_SignatureVerify+0x3e>
        key == NULL || key_len <= 0) {
    5dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d102      	bne.n	5dd4 <wc_SignatureVerify+0x44>
        return BAD_FUNC_ARG;
    5dce:	23ad      	movs	r3, #173	; 0xad
    5dd0:	425b      	negs	r3, r3
    5dd2:	e065      	b.n	5ea0 <wc_SignatureVerify+0x110>
    }

    /* Validate signature len (1 to max is okay) */
    if ((int)sig_len > wc_SignatureGetSize(sig_type, key, key_len)) {
    5dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5dd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
    5dd8:	230e      	movs	r3, #14
    5dda:	18fb      	adds	r3, r7, r3
    5ddc:	781b      	ldrb	r3, [r3, #0]
    5dde:	0018      	movs	r0, r3
    5de0:	f7ff ff2e 	bl	5c40 <wc_SignatureGetSize>
    5de4:	0002      	movs	r2, r0
    5de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5de8:	429a      	cmp	r2, r3
    5dea:	da02      	bge.n	5df2 <wc_SignatureVerify+0x62>
        WOLFSSL_MSG("wc_SignatureVerify: Invalid sig type/len");
        return BAD_FUNC_ARG;
    5dec:	23ad      	movs	r3, #173	; 0xad
    5dee:	425b      	negs	r3, r3
    5df0:	e056      	b.n	5ea0 <wc_SignatureVerify+0x110>
    }

    /* Validate hash size */
    ret = wc_HashGetDigestSize(hash_type);
    5df2:	230f      	movs	r3, #15
    5df4:	18fb      	adds	r3, r7, r3
    5df6:	781b      	ldrb	r3, [r3, #0]
    5df8:	0018      	movs	r0, r3
    5dfa:	f000 f9d7 	bl	61ac <wc_HashGetDigestSize>
    5dfe:	0003      	movs	r3, r0
    5e00:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret < 0) {
    5e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e04:	2b00      	cmp	r3, #0
    5e06:	da01      	bge.n	5e0c <wc_SignatureVerify+0x7c>
        WOLFSSL_MSG("wc_SignatureVerify: Invalid hash type/len");
        return ret;
    5e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e0a:	e049      	b.n	5ea0 <wc_SignatureVerify+0x110>
    }
    hash_enc_len = hash_len = ret;
    5e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e0e:	623b      	str	r3, [r7, #32]
    5e10:	6a3b      	ldr	r3, [r7, #32]
    5e12:	61fb      	str	r3, [r7, #28]
    }
#endif

#ifdef WOLFSSL_SMALL_STACK
    /* Allocate temporary buffer for hash data */
    hash_data = (byte*)XMALLOC(hash_enc_len, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    5e14:	69fb      	ldr	r3, [r7, #28]
    5e16:	0018      	movs	r0, r3
    5e18:	f01f fc34 	bl	25684 <malloc>
    5e1c:	0003      	movs	r3, r0
    5e1e:	61bb      	str	r3, [r7, #24]
    if (hash_data == NULL) {
    5e20:	69bb      	ldr	r3, [r7, #24]
    5e22:	2b00      	cmp	r3, #0
    5e24:	d102      	bne.n	5e2c <wc_SignatureVerify+0x9c>
        return MEMORY_E;
    5e26:	237d      	movs	r3, #125	; 0x7d
    5e28:	425b      	negs	r3, r3
    5e2a:	e039      	b.n	5ea0 <wc_SignatureVerify+0x110>
    }
#endif

    /* Perform hash of data */
    ret = wc_Hash(hash_type, data, data_len, hash_data, hash_len);
    5e2c:	69bc      	ldr	r4, [r7, #24]
    5e2e:	687a      	ldr	r2, [r7, #4]
    5e30:	68b9      	ldr	r1, [r7, #8]
    5e32:	230f      	movs	r3, #15
    5e34:	18fb      	adds	r3, r7, r3
    5e36:	7818      	ldrb	r0, [r3, #0]
    5e38:	6a3b      	ldr	r3, [r7, #32]
    5e3a:	9300      	str	r3, [sp, #0]
    5e3c:	0023      	movs	r3, r4
    5e3e:	f000 f9fd 	bl	623c <wc_Hash>
    5e42:	0003      	movs	r3, r0
    5e44:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret == 0) {
    5e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e48:	2b00      	cmp	r3, #0
    5e4a:	d11f      	bne.n	5e8c <wc_SignatureVerify+0xfc>
        /* Handle RSA with DER encoding */
        if (sig_type == WC_SIGNATURE_TYPE_RSA_W_ENC) {
    5e4c:	230e      	movs	r3, #14
    5e4e:	18fb      	adds	r3, r7, r3
    5e50:	781b      	ldrb	r3, [r3, #0]
    5e52:	2b03      	cmp	r3, #3
    5e54:	d102      	bne.n	5e5c <wc_SignatureVerify+0xcc>
        #if defined(NO_RSA) || defined(NO_ASN)
            ret = SIG_TYPE_E;
    5e56:	23e7      	movs	r3, #231	; 0xe7
    5e58:	425b      	negs	r3, r3
    5e5a:	627b      	str	r3, [r7, #36]	; 0x24
            ret = wc_SignatureDerEncode(hash_type, hash_data, hash_len,
                &hash_enc_len);
        #endif
        }

        if (ret == 0) {
    5e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e5e:	2b00      	cmp	r3, #0
    5e60:	d114      	bne.n	5e8c <wc_SignatureVerify+0xfc>
            /* Verify signature using hash */
            ret = wc_SignatureVerifyHash(hash_type, sig_type,
    5e62:	69fc      	ldr	r4, [r7, #28]
    5e64:	69ba      	ldr	r2, [r7, #24]
    5e66:	230e      	movs	r3, #14
    5e68:	18fb      	adds	r3, r7, r3
    5e6a:	7819      	ldrb	r1, [r3, #0]
    5e6c:	230f      	movs	r3, #15
    5e6e:	18fb      	adds	r3, r7, r3
    5e70:	7818      	ldrb	r0, [r3, #0]
    5e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5e74:	9303      	str	r3, [sp, #12]
    5e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5e78:	9302      	str	r3, [sp, #8]
    5e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5e7c:	9301      	str	r3, [sp, #4]
    5e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5e80:	9300      	str	r3, [sp, #0]
    5e82:	0023      	movs	r3, r4
    5e84:	f7ff ff0c 	bl	5ca0 <wc_SignatureVerifyHash>
    5e88:	0003      	movs	r3, r0
    5e8a:	627b      	str	r3, [r7, #36]	; 0x24
                hash_data, hash_enc_len, sig, sig_len, key, key_len);
        }
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(hash_data, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    5e8c:	69bb      	ldr	r3, [r7, #24]
    5e8e:	617b      	str	r3, [r7, #20]
    5e90:	697b      	ldr	r3, [r7, #20]
    5e92:	2b00      	cmp	r3, #0
    5e94:	d003      	beq.n	5e9e <wc_SignatureVerify+0x10e>
    5e96:	697b      	ldr	r3, [r7, #20]
    5e98:	0018      	movs	r0, r3
    5e9a:	f01f fbfd 	bl	25698 <free>
#endif

    return ret;
    5e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    5ea0:	0018      	movs	r0, r3
    5ea2:	46bd      	mov	sp, r7
    5ea4:	b00b      	add	sp, #44	; 0x2c
    5ea6:	bd90      	pop	{r4, r7, pc}

00005ea8 <wc_SignatureGenerateHash>:
int wc_SignatureGenerateHash(
    enum wc_HashType hash_type, enum wc_SignatureType sig_type,
    const byte* hash_data, word32 hash_len,
    byte* sig, word32 *sig_len,
    const void* key, word32 key_len, WC_RNG* rng)
{
    5ea8:	b590      	push	{r4, r7, lr}
    5eaa:	b089      	sub	sp, #36	; 0x24
    5eac:	af02      	add	r7, sp, #8
    5eae:	60ba      	str	r2, [r7, #8]
    5eb0:	607b      	str	r3, [r7, #4]
    5eb2:	230f      	movs	r3, #15
    5eb4:	18fb      	adds	r3, r7, r3
    5eb6:	1c02      	adds	r2, r0, #0
    5eb8:	701a      	strb	r2, [r3, #0]
    5eba:	230e      	movs	r3, #14
    5ebc:	18fb      	adds	r3, r7, r3
    5ebe:	1c0a      	adds	r2, r1, #0
    5ec0:	701a      	strb	r2, [r3, #0]

    /* Suppress possible unused arg if all signature types are disabled */
    (void)rng;

    /* Check arguments */
    if (hash_data == NULL || hash_len <= 0 ||
    5ec2:	68bb      	ldr	r3, [r7, #8]
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	d012      	beq.n	5eee <wc_SignatureGenerateHash+0x46>
    5ec8:	687b      	ldr	r3, [r7, #4]
    5eca:	2b00      	cmp	r3, #0
    5ecc:	d00f      	beq.n	5eee <wc_SignatureGenerateHash+0x46>
    5ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5ed0:	2b00      	cmp	r3, #0
    5ed2:	d00c      	beq.n	5eee <wc_SignatureGenerateHash+0x46>
        sig == NULL || sig_len == NULL || *sig_len <= 0 ||
    5ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ed6:	2b00      	cmp	r3, #0
    5ed8:	d009      	beq.n	5eee <wc_SignatureGenerateHash+0x46>
    5eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5edc:	681b      	ldr	r3, [r3, #0]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d005      	beq.n	5eee <wc_SignatureGenerateHash+0x46>
    5ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5ee4:	2b00      	cmp	r3, #0
    5ee6:	d002      	beq.n	5eee <wc_SignatureGenerateHash+0x46>
        key == NULL || key_len <= 0) {
    5ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5eea:	2b00      	cmp	r3, #0
    5eec:	d102      	bne.n	5ef4 <wc_SignatureGenerateHash+0x4c>
        return BAD_FUNC_ARG;
    5eee:	23ad      	movs	r3, #173	; 0xad
    5ef0:	425b      	negs	r3, r3
    5ef2:	e045      	b.n	5f80 <wc_SignatureGenerateHash+0xd8>
    }

    /* Validate signature len (needs to be at least max) */
    if ((int)*sig_len < wc_SignatureGetSize(sig_type, key, key_len)) {
    5ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ef6:	681b      	ldr	r3, [r3, #0]
    5ef8:	001c      	movs	r4, r3
    5efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5efc:	6b39      	ldr	r1, [r7, #48]	; 0x30
    5efe:	230e      	movs	r3, #14
    5f00:	18fb      	adds	r3, r7, r3
    5f02:	781b      	ldrb	r3, [r3, #0]
    5f04:	0018      	movs	r0, r3
    5f06:	f7ff fe9b 	bl	5c40 <wc_SignatureGetSize>
    5f0a:	0003      	movs	r3, r0
    5f0c:	429c      	cmp	r4, r3
    5f0e:	da02      	bge.n	5f16 <wc_SignatureGenerateHash+0x6e>
        WOLFSSL_MSG("wc_SignatureGenerate: Invalid sig type/len");
        return BAD_FUNC_ARG;
    5f10:	23ad      	movs	r3, #173	; 0xad
    5f12:	425b      	negs	r3, r3
    5f14:	e034      	b.n	5f80 <wc_SignatureGenerateHash+0xd8>
    }

    /* Validate hash size */
    ret = wc_HashGetDigestSize(hash_type);
    5f16:	230f      	movs	r3, #15
    5f18:	18fb      	adds	r3, r7, r3
    5f1a:	781b      	ldrb	r3, [r3, #0]
    5f1c:	0018      	movs	r0, r3
    5f1e:	f000 f945 	bl	61ac <wc_HashGetDigestSize>
    5f22:	0003      	movs	r3, r0
    5f24:	617b      	str	r3, [r7, #20]
    if (ret < 0) {
    5f26:	697b      	ldr	r3, [r7, #20]
    5f28:	2b00      	cmp	r3, #0
    5f2a:	da01      	bge.n	5f30 <wc_SignatureGenerateHash+0x88>
        WOLFSSL_MSG("wc_SignatureGenerate: Invalid hash type/len");
        return ret;
    5f2c:	697b      	ldr	r3, [r7, #20]
    5f2e:	e027      	b.n	5f80 <wc_SignatureGenerateHash+0xd8>
    }
    ret = 0;
    5f30:	2300      	movs	r3, #0
    5f32:	617b      	str	r3, [r7, #20]

    /* Create signature using hash as data */
    switch (sig_type) {
    5f34:	230e      	movs	r3, #14
    5f36:	18fb      	adds	r3, r7, r3
    5f38:	781b      	ldrb	r3, [r3, #0]
    5f3a:	2b01      	cmp	r3, #1
    5f3c:	d003      	beq.n	5f46 <wc_SignatureGenerateHash+0x9e>
    5f3e:	db1a      	blt.n	5f76 <wc_SignatureGenerateHash+0xce>
    5f40:	2b03      	cmp	r3, #3
    5f42:	dc18      	bgt.n	5f76 <wc_SignatureGenerateHash+0xce>
    5f44:	e013      	b.n	5f6e <wc_SignatureGenerateHash+0xc6>
            do {
            #ifdef WOLFSSL_ASYNC_CRYPT
                ret = wc_AsyncWait(ret, &((ecc_key*)key)->asyncDev,
                    WC_ASYNC_FLAG_CALL_AGAIN);
            #endif
            if (ret >= 0)
    5f46:	697b      	ldr	r3, [r7, #20]
    5f48:	2b00      	cmp	r3, #0
    5f4a:	db0c      	blt.n	5f66 <wc_SignatureGenerateHash+0xbe>
                ret = wc_ecc_sign_hash(hash_data, hash_len, sig, sig_len,
    5f4c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    5f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5f50:	6879      	ldr	r1, [r7, #4]
    5f52:	68b8      	ldr	r0, [r7, #8]
    5f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5f56:	9301      	str	r3, [sp, #4]
    5f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5f5a:	9300      	str	r3, [sp, #0]
    5f5c:	0023      	movs	r3, r4
    5f5e:	f008 f8fd 	bl	e15c <wc_ecc_sign_hash>
    5f62:	0003      	movs	r3, r0
    5f64:	617b      	str	r3, [r7, #20]
                    rng, (ecc_key*)key);
            } while (ret == WC_PENDING_E);
    5f66:	697b      	ldr	r3, [r7, #20]
    5f68:	336c      	adds	r3, #108	; 0x6c
    5f6a:	d0ec      	beq.n	5f46 <wc_SignatureGenerateHash+0x9e>
#else
            ret = SIG_TYPE_E;
#endif
            break;
    5f6c:	e007      	b.n	5f7e <wc_SignatureGenerateHash+0xd6>
            if (ret >= 0) {
                *sig_len = ret;
                ret = 0; /* Success */
            }
#else
            ret = SIG_TYPE_E;
    5f6e:	23e7      	movs	r3, #231	; 0xe7
    5f70:	425b      	negs	r3, r3
    5f72:	617b      	str	r3, [r7, #20]
#endif
            break;
    5f74:	e003      	b.n	5f7e <wc_SignatureGenerateHash+0xd6>

        case WC_SIGNATURE_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
    5f76:	23ad      	movs	r3, #173	; 0xad
    5f78:	425b      	negs	r3, r3
    5f7a:	617b      	str	r3, [r7, #20]
            break;
    5f7c:	46c0      	nop			; (mov r8, r8)
    }

    return ret;
    5f7e:	697b      	ldr	r3, [r7, #20]
}
    5f80:	0018      	movs	r0, r3
    5f82:	46bd      	mov	sp, r7
    5f84:	b007      	add	sp, #28
    5f86:	bd90      	pop	{r4, r7, pc}

00005f88 <wc_SignatureGenerate>:
int wc_SignatureGenerate(
    enum wc_HashType hash_type, enum wc_SignatureType sig_type,
    const byte* data, word32 data_len,
    byte* sig, word32 *sig_len,
    const void* key, word32 key_len, WC_RNG* rng)
{
    5f88:	b590      	push	{r4, r7, lr}
    5f8a:	b091      	sub	sp, #68	; 0x44
    5f8c:	af06      	add	r7, sp, #24
    5f8e:	60ba      	str	r2, [r7, #8]
    5f90:	607b      	str	r3, [r7, #4]
    5f92:	230f      	movs	r3, #15
    5f94:	18fb      	adds	r3, r7, r3
    5f96:	1c02      	adds	r2, r0, #0
    5f98:	701a      	strb	r2, [r3, #0]
    5f9a:	230e      	movs	r3, #14
    5f9c:	18fb      	adds	r3, r7, r3
    5f9e:	1c0a      	adds	r2, r1, #0
    5fa0:	701a      	strb	r2, [r3, #0]
#else
    byte hash_data[MAX_DER_DIGEST_SZ];
#endif

    /* Check arguments */
    if (data == NULL || data_len <= 0 ||
    5fa2:	68bb      	ldr	r3, [r7, #8]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d012      	beq.n	5fce <wc_SignatureGenerate+0x46>
    5fa8:	687b      	ldr	r3, [r7, #4]
    5faa:	2b00      	cmp	r3, #0
    5fac:	d00f      	beq.n	5fce <wc_SignatureGenerate+0x46>
    5fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5fb0:	2b00      	cmp	r3, #0
    5fb2:	d00c      	beq.n	5fce <wc_SignatureGenerate+0x46>
        sig == NULL || sig_len == NULL || *sig_len <= 0 ||
    5fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	d009      	beq.n	5fce <wc_SignatureGenerate+0x46>
    5fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5fbc:	681b      	ldr	r3, [r3, #0]
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	d005      	beq.n	5fce <wc_SignatureGenerate+0x46>
    5fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	d002      	beq.n	5fce <wc_SignatureGenerate+0x46>
        key == NULL || key_len <= 0) {
    5fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d102      	bne.n	5fd4 <wc_SignatureGenerate+0x4c>
        return BAD_FUNC_ARG;
    5fce:	23ad      	movs	r3, #173	; 0xad
    5fd0:	425b      	negs	r3, r3
    5fd2:	e069      	b.n	60a8 <STACK_SIZE+0xa8>
    }

    /* Validate signature len (needs to be at least max) */
    if ((int)*sig_len < wc_SignatureGetSize(sig_type, key, key_len)) {
    5fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5fd6:	681b      	ldr	r3, [r3, #0]
    5fd8:	001c      	movs	r4, r3
    5fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5fdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
    5fde:	230e      	movs	r3, #14
    5fe0:	18fb      	adds	r3, r7, r3
    5fe2:	781b      	ldrb	r3, [r3, #0]
    5fe4:	0018      	movs	r0, r3
    5fe6:	f7ff fe2b 	bl	5c40 <wc_SignatureGetSize>
    5fea:	0003      	movs	r3, r0
    5fec:	429c      	cmp	r4, r3
    5fee:	da02      	bge.n	5ff6 <wc_SignatureGenerate+0x6e>
        WOLFSSL_MSG("wc_SignatureGenerate: Invalid sig type/len");
        return BAD_FUNC_ARG;
    5ff0:	23ad      	movs	r3, #173	; 0xad
    5ff2:	425b      	negs	r3, r3
    5ff4:	e058      	b.n	60a8 <STACK_SIZE+0xa8>
    }

    /* Validate hash size */
    ret = wc_HashGetDigestSize(hash_type);
    5ff6:	230f      	movs	r3, #15
    5ff8:	18fb      	adds	r3, r7, r3
    5ffa:	781b      	ldrb	r3, [r3, #0]
    5ffc:	0018      	movs	r0, r3
    5ffe:	f000 f8d5 	bl	61ac <wc_HashGetDigestSize>
    6002:	0003      	movs	r3, r0
    6004:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret < 0) {
    6006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6008:	2b00      	cmp	r3, #0
    600a:	da01      	bge.n	6010 <STACK_SIZE+0x10>
        WOLFSSL_MSG("wc_SignatureGenerate: Invalid hash type/len");
        return ret;
    600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    600e:	e04b      	b.n	60a8 <STACK_SIZE+0xa8>
    }
    hash_enc_len = hash_len = ret;
    6010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6012:	623b      	str	r3, [r7, #32]
    6014:	6a3b      	ldr	r3, [r7, #32]
    6016:	61fb      	str	r3, [r7, #28]
    }
#endif

#ifdef WOLFSSL_SMALL_STACK
    /* Allocate temporary buffer for hash data */
    hash_data = (byte*)XMALLOC(hash_enc_len, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    6018:	69fb      	ldr	r3, [r7, #28]
    601a:	0018      	movs	r0, r3
    601c:	f01f fb32 	bl	25684 <malloc>
    6020:	0003      	movs	r3, r0
    6022:	61bb      	str	r3, [r7, #24]
    if (hash_data == NULL) {
    6024:	69bb      	ldr	r3, [r7, #24]
    6026:	2b00      	cmp	r3, #0
    6028:	d102      	bne.n	6030 <STACK_SIZE+0x30>
        return MEMORY_E;
    602a:	237d      	movs	r3, #125	; 0x7d
    602c:	425b      	negs	r3, r3
    602e:	e03b      	b.n	60a8 <STACK_SIZE+0xa8>
    }
#endif

    /* Perform hash of data */
    ret = wc_Hash(hash_type, data, data_len, hash_data, hash_len);
    6030:	69bc      	ldr	r4, [r7, #24]
    6032:	687a      	ldr	r2, [r7, #4]
    6034:	68b9      	ldr	r1, [r7, #8]
    6036:	230f      	movs	r3, #15
    6038:	18fb      	adds	r3, r7, r3
    603a:	7818      	ldrb	r0, [r3, #0]
    603c:	6a3b      	ldr	r3, [r7, #32]
    603e:	9300      	str	r3, [sp, #0]
    6040:	0023      	movs	r3, r4
    6042:	f000 f8fb 	bl	623c <wc_Hash>
    6046:	0003      	movs	r3, r0
    6048:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret == 0) {
    604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    604c:	2b00      	cmp	r3, #0
    604e:	d121      	bne.n	6094 <STACK_SIZE+0x94>
        /* Handle RSA with DER encoding */
        if (sig_type == WC_SIGNATURE_TYPE_RSA_W_ENC) {
    6050:	230e      	movs	r3, #14
    6052:	18fb      	adds	r3, r7, r3
    6054:	781b      	ldrb	r3, [r3, #0]
    6056:	2b03      	cmp	r3, #3
    6058:	d102      	bne.n	6060 <STACK_SIZE+0x60>
        #if defined(NO_RSA) || defined(NO_ASN) || \
                                                defined(WOLFSSL_RSA_PUBLIC_ONLY)
            ret = SIG_TYPE_E;
    605a:	23e7      	movs	r3, #231	; 0xe7
    605c:	425b      	negs	r3, r3
    605e:	627b      	str	r3, [r7, #36]	; 0x24
            ret = wc_SignatureDerEncode(hash_type, hash_data, hash_len,
                &hash_enc_len);
        #endif
        }

        if (ret == 0) {
    6060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6062:	2b00      	cmp	r3, #0
    6064:	d116      	bne.n	6094 <STACK_SIZE+0x94>
            /* Generate signature using hash */
            ret = wc_SignatureGenerateHash(hash_type, sig_type,
    6066:	69fc      	ldr	r4, [r7, #28]
    6068:	69ba      	ldr	r2, [r7, #24]
    606a:	230e      	movs	r3, #14
    606c:	18fb      	adds	r3, r7, r3
    606e:	7819      	ldrb	r1, [r3, #0]
    6070:	230f      	movs	r3, #15
    6072:	18fb      	adds	r3, r7, r3
    6074:	7818      	ldrb	r0, [r3, #0]
    6076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6078:	9304      	str	r3, [sp, #16]
    607a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    607c:	9303      	str	r3, [sp, #12]
    607e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6080:	9302      	str	r3, [sp, #8]
    6082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6084:	9301      	str	r3, [sp, #4]
    6086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6088:	9300      	str	r3, [sp, #0]
    608a:	0023      	movs	r3, r4
    608c:	f7ff ff0c 	bl	5ea8 <wc_SignatureGenerateHash>
    6090:	0003      	movs	r3, r0
    6092:	627b      	str	r3, [r7, #36]	; 0x24
                hash_data, hash_enc_len, sig, sig_len, key, key_len, rng);
        }
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(hash_data, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    6094:	69bb      	ldr	r3, [r7, #24]
    6096:	617b      	str	r3, [r7, #20]
    6098:	697b      	ldr	r3, [r7, #20]
    609a:	2b00      	cmp	r3, #0
    609c:	d003      	beq.n	60a6 <STACK_SIZE+0xa6>
    609e:	697b      	ldr	r3, [r7, #20]
    60a0:	0018      	movs	r0, r3
    60a2:	f01f faf9 	bl	25698 <free>
#endif

    return ret;
    60a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    60a8:	0018      	movs	r0, r3
    60aa:	46bd      	mov	sp, r7
    60ac:	b00b      	add	sp, #44	; 0x2c
    60ae:	bd90      	pop	{r4, r7, pc}

000060b0 <wc_HashTypeConvert>:
};
#endif /* !NO_ASN */

/* function converts int hash type to enum */
enum wc_HashType wc_HashTypeConvert(int hashType)
{
    60b0:	b580      	push	{r7, lr}
    60b2:	b084      	sub	sp, #16
    60b4:	af00      	add	r7, sp, #0
    60b6:	6078      	str	r0, [r7, #4]
    /* Default to hash type none as error */
    enum wc_HashType eHashType = WC_HASH_TYPE_NONE;
    60b8:	230f      	movs	r3, #15
    60ba:	18fb      	adds	r3, r7, r3
    60bc:	2200      	movs	r2, #0
    60be:	701a      	strb	r2, [r3, #0]
            eHashType = WC_HASH_TYPE_NONE;
            break;
    }
#else
    /* current master uses same unique types as wc_HashType */
    if (hashType > 0 && hashType <= WC_HASH_TYPE_MAX) {
    60c0:	687b      	ldr	r3, [r7, #4]
    60c2:	2b00      	cmp	r3, #0
    60c4:	dd06      	ble.n	60d4 <wc_HashTypeConvert+0x24>
    60c6:	687b      	ldr	r3, [r7, #4]
    60c8:	2b0e      	cmp	r3, #14
    60ca:	dc03      	bgt.n	60d4 <wc_HashTypeConvert+0x24>
        eHashType = (enum wc_HashType)hashType;
    60cc:	230f      	movs	r3, #15
    60ce:	18fb      	adds	r3, r7, r3
    60d0:	687a      	ldr	r2, [r7, #4]
    60d2:	701a      	strb	r2, [r3, #0]
    }
#endif
    return eHashType;
    60d4:	230f      	movs	r3, #15
    60d6:	18fb      	adds	r3, r7, r3
    60d8:	781b      	ldrb	r3, [r3, #0]
}
    60da:	0018      	movs	r0, r3
    60dc:	46bd      	mov	sp, r7
    60de:	b004      	add	sp, #16
    60e0:	bd80      	pop	{r7, pc}
    60e2:	46c0      	nop			; (mov r8, r8)

000060e4 <wc_HashGetOID>:


int wc_HashGetOID(enum wc_HashType hash_type)
{
    60e4:	b580      	push	{r7, lr}
    60e6:	b084      	sub	sp, #16
    60e8:	af00      	add	r7, sp, #0
    60ea:	0002      	movs	r2, r0
    60ec:	1dfb      	adds	r3, r7, #7
    60ee:	701a      	strb	r2, [r3, #0]
    int oid = HASH_TYPE_E; /* Default to hash type error */
    60f0:	23e8      	movs	r3, #232	; 0xe8
    60f2:	425b      	negs	r3, r3
    60f4:	60fb      	str	r3, [r7, #12]
    switch(hash_type)
    60f6:	1dfb      	adds	r3, r7, #7
    60f8:	781b      	ldrb	r3, [r3, #0]
    60fa:	2b09      	cmp	r3, #9
    60fc:	d80b      	bhi.n	6116 <wc_HashGetOID+0x32>
    60fe:	009a      	lsls	r2, r3, #2
    6100:	4b0a      	ldr	r3, [pc, #40]	; (612c <wc_HashGetOID+0x48>)
    6102:	18d3      	adds	r3, r2, r3
    6104:	681b      	ldr	r3, [r3, #0]
    6106:	469f      	mov	pc, r3
            oid = MD5h;
        #endif
            break;
        case WC_HASH_TYPE_SHA:
        #ifndef NO_SHA
            oid = SHAh;
    6108:	2358      	movs	r3, #88	; 0x58
    610a:	60fb      	str	r3, [r7, #12]
        #endif
            break;
    610c:	e008      	b.n	6120 <wc_HashGetOID+0x3c>
            oid = SHA224h;
        #endif
            break;
        case WC_HASH_TYPE_SHA256:
        #ifndef NO_SHA256
            oid = SHA256h;
    610e:	23cf      	movs	r3, #207	; 0xcf
    6110:	005b      	lsls	r3, r3, #1
    6112:	60fb      	str	r3, [r7, #12]
        #endif
            break;
    6114:	e004      	b.n	6120 <wc_HashGetOID+0x3c>
        case WC_HASH_TYPE_SHA3_384:
        case WC_HASH_TYPE_SHA3_512:
        case WC_HASH_TYPE_BLAKE2B:
        case WC_HASH_TYPE_NONE:
        default:
            oid = BAD_FUNC_ARG;
    6116:	23ad      	movs	r3, #173	; 0xad
    6118:	425b      	negs	r3, r3
    611a:	60fb      	str	r3, [r7, #12]
            break;
    611c:	e000      	b.n	6120 <wc_HashGetOID+0x3c>
    {
        case WC_HASH_TYPE_MD2:
        #ifdef WOLFSSL_MD2
            oid = MD2h;
        #endif
            break;
    611e:	46c0      	nop			; (mov r8, r8)
        case WC_HASH_TYPE_NONE:
        default:
            oid = BAD_FUNC_ARG;
            break;
    }
    return oid;
    6120:	68fb      	ldr	r3, [r7, #12]
}
    6122:	0018      	movs	r0, r3
    6124:	46bd      	mov	sp, r7
    6126:	b004      	add	sp, #16
    6128:	bd80      	pop	{r7, pc}
    612a:	46c0      	nop			; (mov r8, r8)
    612c:	00029ea4 	.word	0x00029ea4

00006130 <wc_OidGetHash>:

enum wc_HashType wc_OidGetHash(int oid)
{
    6130:	b580      	push	{r7, lr}
    6132:	b084      	sub	sp, #16
    6134:	af00      	add	r7, sp, #0
    6136:	6078      	str	r0, [r7, #4]
    enum wc_HashType hash_type = WC_HASH_TYPE_NONE;
    6138:	230f      	movs	r3, #15
    613a:	18fb      	adds	r3, r7, r3
    613c:	2200      	movs	r2, #0
    613e:	701a      	strb	r2, [r3, #0]
    switch (oid)
    6140:	687b      	ldr	r3, [r7, #4]
    6142:	22a0      	movs	r2, #160	; 0xa0
    6144:	32ff      	adds	r2, #255	; 0xff
    6146:	4293      	cmp	r3, r2
    6148:	d020      	beq.n	618c <wc_OidGetHash+0x5c>
    614a:	22a0      	movs	r2, #160	; 0xa0
    614c:	32ff      	adds	r2, #255	; 0xff
    614e:	4293      	cmp	r3, r2
    6150:	dc06      	bgt.n	6160 <wc_OidGetHash+0x30>
    6152:	2b58      	cmp	r3, #88	; 0x58
    6154:	d010      	beq.n	6178 <wc_OidGetHash+0x48>
    6156:	22cf      	movs	r2, #207	; 0xcf
    6158:	0052      	lsls	r2, r2, #1
    615a:	4293      	cmp	r3, r2
    615c:	d011      	beq.n	6182 <wc_OidGetHash+0x52>
        #ifdef WOLFSSL_SHA512
            hash_type = WC_HASH_TYPE_SHA512;
        #endif
            break;
        default:
            break;
    615e:	e01c      	b.n	619a <wc_OidGetHash+0x6a>
}

enum wc_HashType wc_OidGetHash(int oid)
{
    enum wc_HashType hash_type = WC_HASH_TYPE_NONE;
    switch (oid)
    6160:	22a2      	movs	r2, #162	; 0xa2
    6162:	32ff      	adds	r2, #255	; 0xff
    6164:	4293      	cmp	r3, r2
    6166:	d013      	beq.n	6190 <wc_OidGetHash+0x60>
    6168:	22a2      	movs	r2, #162	; 0xa2
    616a:	32ff      	adds	r2, #255	; 0xff
    616c:	4293      	cmp	r3, r2
    616e:	db11      	blt.n	6194 <wc_OidGetHash+0x64>
    6170:	4a0d      	ldr	r2, [pc, #52]	; (61a8 <wc_OidGetHash+0x78>)
    6172:	4293      	cmp	r3, r2
    6174:	d010      	beq.n	6198 <wc_OidGetHash+0x68>
        #ifdef WOLFSSL_SHA512
            hash_type = WC_HASH_TYPE_SHA512;
        #endif
            break;
        default:
            break;
    6176:	e010      	b.n	619a <wc_OidGetHash+0x6a>
            hash_type = WC_HASH_TYPE_MD5;
        #endif
            break;
        case SHAh:
        #ifndef NO_SHA
            hash_type = WC_HASH_TYPE_SHA;
    6178:	230f      	movs	r3, #15
    617a:	18fb      	adds	r3, r7, r3
    617c:	2204      	movs	r2, #4
    617e:	701a      	strb	r2, [r3, #0]
        #endif
            break;
    6180:	e00b      	b.n	619a <wc_OidGetHash+0x6a>
            hash_type = WC_HASH_TYPE_SHA224;
        #endif
            break;
        case SHA256h:
        #ifndef NO_SHA256
            hash_type = WC_HASH_TYPE_SHA256;
    6182:	230f      	movs	r3, #15
    6184:	18fb      	adds	r3, r7, r3
    6186:	2206      	movs	r2, #6
    6188:	701a      	strb	r2, [r3, #0]
        #endif
            break;
    618a:	e006      	b.n	619a <wc_OidGetHash+0x6a>
        case SHA384h:
        #ifdef WOLFSSL_SHA384
            hash_type = WC_HASH_TYPE_SHA384;
        #endif
            break;
    618c:	46c0      	nop			; (mov r8, r8)
    618e:	e004      	b.n	619a <wc_OidGetHash+0x6a>
            break;
        case SHA224h:
        #ifdef WOLFSSL_SHA224
            hash_type = WC_HASH_TYPE_SHA224;
        #endif
            break;
    6190:	46c0      	nop			; (mov r8, r8)
    6192:	e002      	b.n	619a <wc_OidGetHash+0x6a>
            break;
        case SHA512h:
        #ifdef WOLFSSL_SHA512
            hash_type = WC_HASH_TYPE_SHA512;
        #endif
            break;
    6194:	46c0      	nop			; (mov r8, r8)
    6196:	e000      	b.n	619a <wc_OidGetHash+0x6a>
    #endif
        case MD5h:
        #ifndef NO_MD5
            hash_type = WC_HASH_TYPE_MD5;
        #endif
            break;
    6198:	46c0      	nop			; (mov r8, r8)
        #endif
            break;
        default:
            break;
    }
    return hash_type;
    619a:	230f      	movs	r3, #15
    619c:	18fb      	adds	r3, r7, r3
    619e:	781b      	ldrb	r3, [r3, #0]
}
    61a0:	0018      	movs	r0, r3
    61a2:	46bd      	mov	sp, r7
    61a4:	b004      	add	sp, #16
    61a6:	bd80      	pop	{r7, pc}
    61a8:	00000289 	.word	0x00000289

000061ac <wc_HashGetDigestSize>:



/* Get Hash digest size */
int wc_HashGetDigestSize(enum wc_HashType hash_type)
{
    61ac:	b580      	push	{r7, lr}
    61ae:	b084      	sub	sp, #16
    61b0:	af00      	add	r7, sp, #0
    61b2:	0002      	movs	r2, r0
    61b4:	1dfb      	adds	r3, r7, #7
    61b6:	701a      	strb	r2, [r3, #0]
    int dig_size = HASH_TYPE_E; /* Default to hash type error */
    61b8:	23e8      	movs	r3, #232	; 0xe8
    61ba:	425b      	negs	r3, r3
    61bc:	60fb      	str	r3, [r7, #12]
    switch(hash_type)
    61be:	1dfb      	adds	r3, r7, #7
    61c0:	781b      	ldrb	r3, [r3, #0]
    61c2:	2b0d      	cmp	r3, #13
    61c4:	d80a      	bhi.n	61dc <wc_HashGetDigestSize+0x30>
    61c6:	009a      	lsls	r2, r3, #2
    61c8:	4b09      	ldr	r3, [pc, #36]	; (61f0 <wc_HashGetDigestSize+0x44>)
    61ca:	18d3      	adds	r3, r2, r3
    61cc:	681b      	ldr	r3, [r3, #0]
    61ce:	469f      	mov	pc, r3
            dig_size = WC_MD5_DIGEST_SIZE;
        #endif
            break;
        case WC_HASH_TYPE_SHA:
        #ifndef NO_SHA
            dig_size = WC_SHA_DIGEST_SIZE;
    61d0:	2314      	movs	r3, #20
    61d2:	60fb      	str	r3, [r7, #12]
        #endif
            break;
    61d4:	e007      	b.n	61e6 <wc_HashGetDigestSize+0x3a>
            dig_size = WC_SHA224_DIGEST_SIZE;
        #endif
            break;
        case WC_HASH_TYPE_SHA256:
        #ifndef NO_SHA256
            dig_size = WC_SHA256_DIGEST_SIZE;
    61d6:	2320      	movs	r3, #32
    61d8:	60fb      	str	r3, [r7, #12]
        #endif
            break;
    61da:	e004      	b.n	61e6 <wc_HashGetDigestSize+0x3a>

        /* Not Supported */
        case WC_HASH_TYPE_BLAKE2B:
        case WC_HASH_TYPE_NONE:
        default:
            dig_size = BAD_FUNC_ARG;
    61dc:	23ad      	movs	r3, #173	; 0xad
    61de:	425b      	negs	r3, r3
    61e0:	60fb      	str	r3, [r7, #12]
            break;
    61e2:	e000      	b.n	61e6 <wc_HashGetDigestSize+0x3a>
    {
        case WC_HASH_TYPE_MD2:
        #ifdef WOLFSSL_MD2
            dig_size = MD2_DIGEST_SIZE;
        #endif
            break;
    61e4:	46c0      	nop			; (mov r8, r8)
        case WC_HASH_TYPE_NONE:
        default:
            dig_size = BAD_FUNC_ARG;
            break;
    }
    return dig_size;
    61e6:	68fb      	ldr	r3, [r7, #12]
}
    61e8:	0018      	movs	r0, r3
    61ea:	46bd      	mov	sp, r7
    61ec:	b004      	add	sp, #16
    61ee:	bd80      	pop	{r7, pc}
    61f0:	00029ecc 	.word	0x00029ecc

000061f4 <wc_HashGetBlockSize>:


/* Get Hash block size */
int wc_HashGetBlockSize(enum wc_HashType hash_type)
{
    61f4:	b580      	push	{r7, lr}
    61f6:	b084      	sub	sp, #16
    61f8:	af00      	add	r7, sp, #0
    61fa:	0002      	movs	r2, r0
    61fc:	1dfb      	adds	r3, r7, #7
    61fe:	701a      	strb	r2, [r3, #0]
    int block_size = HASH_TYPE_E; /* Default to hash type error */
    6200:	23e8      	movs	r3, #232	; 0xe8
    6202:	425b      	negs	r3, r3
    6204:	60fb      	str	r3, [r7, #12]
    switch (hash_type)
    6206:	1dfb      	adds	r3, r7, #7
    6208:	781b      	ldrb	r3, [r3, #0]
    620a:	2b0d      	cmp	r3, #13
    620c:	d80a      	bhi.n	6224 <wc_HashGetBlockSize+0x30>
    620e:	009a      	lsls	r2, r3, #2
    6210:	4b09      	ldr	r3, [pc, #36]	; (6238 <wc_HashGetBlockSize+0x44>)
    6212:	18d3      	adds	r3, r2, r3
    6214:	681b      	ldr	r3, [r3, #0]
    6216:	469f      	mov	pc, r3
            block_size = WC_MD5_BLOCK_SIZE;
        #endif
            break;
        case WC_HASH_TYPE_SHA:
        #ifndef NO_SHA
            block_size = WC_SHA_BLOCK_SIZE;
    6218:	2340      	movs	r3, #64	; 0x40
    621a:	60fb      	str	r3, [r7, #12]
        #endif
            break;
    621c:	e007      	b.n	622e <wc_HashGetBlockSize+0x3a>
            block_size = WC_SHA224_BLOCK_SIZE;
        #endif
            break;
        case WC_HASH_TYPE_SHA256:
        #ifndef NO_SHA256
            block_size = WC_SHA256_BLOCK_SIZE;
    621e:	2340      	movs	r3, #64	; 0x40
    6220:	60fb      	str	r3, [r7, #12]
        #endif
            break;
    6222:	e004      	b.n	622e <wc_HashGetBlockSize+0x3a>

        /* Not Supported */
        case WC_HASH_TYPE_BLAKE2B:
        case WC_HASH_TYPE_NONE:
        default:
            block_size = BAD_FUNC_ARG;
    6224:	23ad      	movs	r3, #173	; 0xad
    6226:	425b      	negs	r3, r3
    6228:	60fb      	str	r3, [r7, #12]
            break;
    622a:	e000      	b.n	622e <wc_HashGetBlockSize+0x3a>
    {
        case WC_HASH_TYPE_MD2:
        #ifdef WOLFSSL_MD2
            block_size = MD2_BLOCK_SIZE;
        #endif
            break;
    622c:	46c0      	nop			; (mov r8, r8)
        case WC_HASH_TYPE_NONE:
        default:
            block_size = BAD_FUNC_ARG;
            break;
    }
    return block_size;
    622e:	68fb      	ldr	r3, [r7, #12]
}
    6230:	0018      	movs	r0, r3
    6232:	46bd      	mov	sp, r7
    6234:	b004      	add	sp, #16
    6236:	bd80      	pop	{r7, pc}
    6238:	00029f04 	.word	0x00029f04

0000623c <wc_Hash>:

/* Generic Hashing Wrapper */
int wc_Hash(enum wc_HashType hash_type, const byte* data,
    word32 data_len, byte* hash, word32 hash_len)
{
    623c:	b580      	push	{r7, lr}
    623e:	b086      	sub	sp, #24
    6240:	af00      	add	r7, sp, #0
    6242:	60b9      	str	r1, [r7, #8]
    6244:	607a      	str	r2, [r7, #4]
    6246:	603b      	str	r3, [r7, #0]
    6248:	230f      	movs	r3, #15
    624a:	18fb      	adds	r3, r7, r3
    624c:	1c02      	adds	r2, r0, #0
    624e:	701a      	strb	r2, [r3, #0]
    int ret = HASH_TYPE_E; /* Default to hash type error */
    6250:	23e8      	movs	r3, #232	; 0xe8
    6252:	425b      	negs	r3, r3
    6254:	617b      	str	r3, [r7, #20]
    word32 dig_size;

    /* Validate hash buffer size */
    dig_size = wc_HashGetDigestSize(hash_type);
    6256:	230f      	movs	r3, #15
    6258:	18fb      	adds	r3, r7, r3
    625a:	781b      	ldrb	r3, [r3, #0]
    625c:	0018      	movs	r0, r3
    625e:	f7ff ffa5 	bl	61ac <wc_HashGetDigestSize>
    6262:	0003      	movs	r3, r0
    6264:	613b      	str	r3, [r7, #16]
    if (hash_len < dig_size) {
    6266:	6a3a      	ldr	r2, [r7, #32]
    6268:	693b      	ldr	r3, [r7, #16]
    626a:	429a      	cmp	r2, r3
    626c:	d202      	bcs.n	6274 <wc_Hash+0x38>
        return BUFFER_E;
    626e:	2384      	movs	r3, #132	; 0x84
    6270:	425b      	negs	r3, r3
    6272:	e022      	b.n	62ba <wc_Hash+0x7e>
    (void)data;
    (void)data_len;
    (void)hash;
    (void)hash_len;

    switch(hash_type)
    6274:	230f      	movs	r3, #15
    6276:	18fb      	adds	r3, r7, r3
    6278:	781b      	ldrb	r3, [r3, #0]
    627a:	3b03      	subs	r3, #3
    627c:	2b06      	cmp	r3, #6
    627e:	d816      	bhi.n	62ae <wc_Hash+0x72>
    6280:	009a      	lsls	r2, r3, #2
    6282:	4b10      	ldr	r3, [pc, #64]	; (62c4 <wc_Hash+0x88>)
    6284:	18d3      	adds	r3, r2, r3
    6286:	681b      	ldr	r3, [r3, #0]
    6288:	469f      	mov	pc, r3
            ret = wc_Md5Hash(data, data_len, hash);
#endif
            break;
        case WC_HASH_TYPE_SHA:
#ifndef NO_SHA
            ret = wc_ShaHash(data, data_len, hash);
    628a:	683a      	ldr	r2, [r7, #0]
    628c:	6879      	ldr	r1, [r7, #4]
    628e:	68bb      	ldr	r3, [r7, #8]
    6290:	0018      	movs	r0, r3
    6292:	f000 f8ff 	bl	6494 <wc_ShaHash>
    6296:	0003      	movs	r3, r0
    6298:	617b      	str	r3, [r7, #20]
#endif
            break;
    629a:	e00d      	b.n	62b8 <wc_Hash+0x7c>
            ret = wc_Sha224Hash(data, data_len, hash);
#endif
            break;
        case WC_HASH_TYPE_SHA256:
#ifndef NO_SHA256
            ret = wc_Sha256Hash(data, data_len, hash);
    629c:	683a      	ldr	r2, [r7, #0]
    629e:	6879      	ldr	r1, [r7, #4]
    62a0:	68bb      	ldr	r3, [r7, #8]
    62a2:	0018      	movs	r0, r3
    62a4:	f000 f938 	bl	6518 <wc_Sha256Hash>
    62a8:	0003      	movs	r3, r0
    62aa:	617b      	str	r3, [r7, #20]
#endif
            break;
    62ac:	e004      	b.n	62b8 <wc_Hash+0x7c>
        case WC_HASH_TYPE_SHA3_384:
        case WC_HASH_TYPE_SHA3_512:
        case WC_HASH_TYPE_BLAKE2B:
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
    62ae:	23ad      	movs	r3, #173	; 0xad
    62b0:	425b      	negs	r3, r3
    62b2:	617b      	str	r3, [r7, #20]
            break;
    62b4:	e000      	b.n	62b8 <wc_Hash+0x7c>
            ret = wc_Md5Hash(data, data_len, hash);
            if (ret == 0) {
                ret = wc_ShaHash(data, data_len, &hash[WC_MD5_DIGEST_SIZE]);
            }
#endif
            break;
    62b6:	46c0      	nop			; (mov r8, r8)
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
            break;
    }
    return ret;
    62b8:	697b      	ldr	r3, [r7, #20]
}
    62ba:	0018      	movs	r0, r3
    62bc:	46bd      	mov	sp, r7
    62be:	b006      	add	sp, #24
    62c0:	bd80      	pop	{r7, pc}
    62c2:	46c0      	nop			; (mov r8, r8)
    62c4:	00029f3c 	.word	0x00029f3c

000062c8 <wc_HashInit>:

int wc_HashInit(wc_HashAlg* hash, enum wc_HashType type)
{
    62c8:	b580      	push	{r7, lr}
    62ca:	b084      	sub	sp, #16
    62cc:	af00      	add	r7, sp, #0
    62ce:	6078      	str	r0, [r7, #4]
    62d0:	000a      	movs	r2, r1
    62d2:	1cfb      	adds	r3, r7, #3
    62d4:	701a      	strb	r2, [r3, #0]
    int ret = HASH_TYPE_E; /* Default to hash type error */
    62d6:	23e8      	movs	r3, #232	; 0xe8
    62d8:	425b      	negs	r3, r3
    62da:	60fb      	str	r3, [r7, #12]

    if (hash == NULL)
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	2b00      	cmp	r3, #0
    62e0:	d102      	bne.n	62e8 <wc_HashInit+0x20>
        return BAD_FUNC_ARG;
    62e2:	23ad      	movs	r3, #173	; 0xad
    62e4:	425b      	negs	r3, r3
    62e6:	e01d      	b.n	6324 <wc_HashInit+0x5c>

    switch (type) {
    62e8:	1cfb      	adds	r3, r7, #3
    62ea:	781b      	ldrb	r3, [r3, #0]
    62ec:	3b03      	subs	r3, #3
    62ee:	2b05      	cmp	r3, #5
    62f0:	d812      	bhi.n	6318 <wc_HashInit+0x50>
    62f2:	009a      	lsls	r2, r3, #2
    62f4:	4b0d      	ldr	r3, [pc, #52]	; (632c <wc_HashInit+0x64>)
    62f6:	18d3      	adds	r3, r2, r3
    62f8:	681b      	ldr	r3, [r3, #0]
    62fa:	469f      	mov	pc, r3
            ret = wc_InitMd5(&hash->md5);
#endif
            break;
        case WC_HASH_TYPE_SHA:
#ifndef NO_SHA
            ret = wc_InitSha(&hash->sha);
    62fc:	687b      	ldr	r3, [r7, #4]
    62fe:	0018      	movs	r0, r3
    6300:	f006 faaa 	bl	c858 <wc_InitSha>
    6304:	0003      	movs	r3, r0
    6306:	60fb      	str	r3, [r7, #12]
#endif
            break;
    6308:	e00b      	b.n	6322 <wc_HashInit+0x5a>
            ret = wc_InitSha224(&hash->sha224);
#endif
            break;
        case WC_HASH_TYPE_SHA256:
#ifndef NO_SHA256
            ret = wc_InitSha256(&hash->sha256);
    630a:	687b      	ldr	r3, [r7, #4]
    630c:	0018      	movs	r0, r3
    630e:	f007 fa19 	bl	d744 <wc_InitSha256>
    6312:	0003      	movs	r3, r0
    6314:	60fb      	str	r3, [r7, #12]
#endif
            break;
    6316:	e004      	b.n	6322 <wc_HashInit+0x5a>
        case WC_HASH_TYPE_SHA3_384:
        case WC_HASH_TYPE_SHA3_512:
        case WC_HASH_TYPE_BLAKE2B:
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
    6318:	23ad      	movs	r3, #173	; 0xad
    631a:	425b      	negs	r3, r3
    631c:	60fb      	str	r3, [r7, #12]
    631e:	e000      	b.n	6322 <wc_HashInit+0x5a>
            break;
        case WC_HASH_TYPE_SHA512:
#ifdef WOLFSSL_SHA512
            ret = wc_InitSha512(&hash->sha512);
#endif
            break;
    6320:	46c0      	nop			; (mov r8, r8)
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
    };

    return ret;
    6322:	68fb      	ldr	r3, [r7, #12]
}
    6324:	0018      	movs	r0, r3
    6326:	46bd      	mov	sp, r7
    6328:	b004      	add	sp, #16
    632a:	bd80      	pop	{r7, pc}
    632c:	00029f58 	.word	0x00029f58

00006330 <wc_HashUpdate>:

int wc_HashUpdate(wc_HashAlg* hash, enum wc_HashType type, const byte* data,
                  word32 dataSz)
{
    6330:	b580      	push	{r7, lr}
    6332:	b086      	sub	sp, #24
    6334:	af00      	add	r7, sp, #0
    6336:	60f8      	str	r0, [r7, #12]
    6338:	607a      	str	r2, [r7, #4]
    633a:	603b      	str	r3, [r7, #0]
    633c:	230b      	movs	r3, #11
    633e:	18fb      	adds	r3, r7, r3
    6340:	1c0a      	adds	r2, r1, #0
    6342:	701a      	strb	r2, [r3, #0]
    int ret = HASH_TYPE_E; /* Default to hash type error */
    6344:	23e8      	movs	r3, #232	; 0xe8
    6346:	425b      	negs	r3, r3
    6348:	617b      	str	r3, [r7, #20]

    if (hash == NULL || data == NULL)
    634a:	68fb      	ldr	r3, [r7, #12]
    634c:	2b00      	cmp	r3, #0
    634e:	d002      	beq.n	6356 <wc_HashUpdate+0x26>
    6350:	687b      	ldr	r3, [r7, #4]
    6352:	2b00      	cmp	r3, #0
    6354:	d102      	bne.n	635c <wc_HashUpdate+0x2c>
        return BAD_FUNC_ARG;
    6356:	23ad      	movs	r3, #173	; 0xad
    6358:	425b      	negs	r3, r3
    635a:	e022      	b.n	63a2 <wc_HashUpdate+0x72>

    switch (type) {
    635c:	230b      	movs	r3, #11
    635e:	18fb      	adds	r3, r7, r3
    6360:	781b      	ldrb	r3, [r3, #0]
    6362:	3b03      	subs	r3, #3
    6364:	2b05      	cmp	r3, #5
    6366:	d816      	bhi.n	6396 <wc_HashUpdate+0x66>
    6368:	009a      	lsls	r2, r3, #2
    636a:	4b10      	ldr	r3, [pc, #64]	; (63ac <wc_HashUpdate+0x7c>)
    636c:	18d3      	adds	r3, r2, r3
    636e:	681b      	ldr	r3, [r3, #0]
    6370:	469f      	mov	pc, r3
            ret = wc_Md5Update(&hash->md5, data, dataSz);
#endif
            break;
        case WC_HASH_TYPE_SHA:
#ifndef NO_SHA
            ret = wc_ShaUpdate(&hash->sha, data, dataSz);
    6372:	68fb      	ldr	r3, [r7, #12]
    6374:	683a      	ldr	r2, [r7, #0]
    6376:	6879      	ldr	r1, [r7, #4]
    6378:	0018      	movs	r0, r3
    637a:	f006 f96f 	bl	c65c <wc_ShaUpdate>
    637e:	0003      	movs	r3, r0
    6380:	617b      	str	r3, [r7, #20]
#endif
            break;
    6382:	e00d      	b.n	63a0 <wc_HashUpdate+0x70>
            ret = wc_Sha224Update(&hash->sha224, data, dataSz);
#endif
            break;
        case WC_HASH_TYPE_SHA256:
#ifndef NO_SHA256
            ret = wc_Sha256Update(&hash->sha256, data, dataSz);
    6384:	68fb      	ldr	r3, [r7, #12]
    6386:	683a      	ldr	r2, [r7, #0]
    6388:	6879      	ldr	r1, [r7, #4]
    638a:	0018      	movs	r0, r3
    638c:	f007 f908 	bl	d5a0 <wc_Sha256Update>
    6390:	0003      	movs	r3, r0
    6392:	617b      	str	r3, [r7, #20]
#endif
            break;
    6394:	e004      	b.n	63a0 <wc_HashUpdate+0x70>
        case WC_HASH_TYPE_SHA3_384:
        case WC_HASH_TYPE_SHA3_512:
        case WC_HASH_TYPE_BLAKE2B:
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
    6396:	23ad      	movs	r3, #173	; 0xad
    6398:	425b      	negs	r3, r3
    639a:	617b      	str	r3, [r7, #20]
    639c:	e000      	b.n	63a0 <wc_HashUpdate+0x70>
            break;
        case WC_HASH_TYPE_SHA512:
#ifdef WOLFSSL_SHA512
            ret = wc_Sha512Update(&hash->sha512, data, dataSz);
#endif
            break;
    639e:	46c0      	nop			; (mov r8, r8)
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
    };

    return ret;
    63a0:	697b      	ldr	r3, [r7, #20]
}
    63a2:	0018      	movs	r0, r3
    63a4:	46bd      	mov	sp, r7
    63a6:	b006      	add	sp, #24
    63a8:	bd80      	pop	{r7, pc}
    63aa:	46c0      	nop			; (mov r8, r8)
    63ac:	00029f70 	.word	0x00029f70

000063b0 <wc_HashFinal>:

int wc_HashFinal(wc_HashAlg* hash, enum wc_HashType type, byte* out)
{
    63b0:	b580      	push	{r7, lr}
    63b2:	b086      	sub	sp, #24
    63b4:	af00      	add	r7, sp, #0
    63b6:	60f8      	str	r0, [r7, #12]
    63b8:	607a      	str	r2, [r7, #4]
    63ba:	230b      	movs	r3, #11
    63bc:	18fb      	adds	r3, r7, r3
    63be:	1c0a      	adds	r2, r1, #0
    63c0:	701a      	strb	r2, [r3, #0]
    int ret = HASH_TYPE_E; /* Default to hash type error */
    63c2:	23e8      	movs	r3, #232	; 0xe8
    63c4:	425b      	negs	r3, r3
    63c6:	617b      	str	r3, [r7, #20]

    if (hash == NULL || out == NULL)
    63c8:	68fb      	ldr	r3, [r7, #12]
    63ca:	2b00      	cmp	r3, #0
    63cc:	d002      	beq.n	63d4 <wc_HashFinal+0x24>
    63ce:	687b      	ldr	r3, [r7, #4]
    63d0:	2b00      	cmp	r3, #0
    63d2:	d102      	bne.n	63da <wc_HashFinal+0x2a>
        return BAD_FUNC_ARG;
    63d4:	23ad      	movs	r3, #173	; 0xad
    63d6:	425b      	negs	r3, r3
    63d8:	e022      	b.n	6420 <wc_HashFinal+0x70>

    switch (type) {
    63da:	230b      	movs	r3, #11
    63dc:	18fb      	adds	r3, r7, r3
    63de:	781b      	ldrb	r3, [r3, #0]
    63e0:	3b03      	subs	r3, #3
    63e2:	2b05      	cmp	r3, #5
    63e4:	d816      	bhi.n	6414 <wc_HashFinal+0x64>
    63e6:	009a      	lsls	r2, r3, #2
    63e8:	4b0f      	ldr	r3, [pc, #60]	; (6428 <wc_HashFinal+0x78>)
    63ea:	18d3      	adds	r3, r2, r3
    63ec:	681b      	ldr	r3, [r3, #0]
    63ee:	469f      	mov	pc, r3
            ret = wc_Md5Final(&hash->md5, out);
#endif
            break;
        case WC_HASH_TYPE_SHA:
#ifndef NO_SHA
            ret = wc_ShaFinal(&hash->sha, out);
    63f0:	68fb      	ldr	r3, [r7, #12]
    63f2:	687a      	ldr	r2, [r7, #4]
    63f4:	0011      	movs	r1, r2
    63f6:	0018      	movs	r0, r3
    63f8:	f006 f992 	bl	c720 <wc_ShaFinal>
    63fc:	0003      	movs	r3, r0
    63fe:	617b      	str	r3, [r7, #20]
#endif
            break;
    6400:	e00d      	b.n	641e <wc_HashFinal+0x6e>
            ret = wc_Sha224Final(&hash->sha224, out);
#endif
            break;
        case WC_HASH_TYPE_SHA256:
#ifndef NO_SHA256
            ret = wc_Sha256Final(&hash->sha256, out);
    6402:	68fb      	ldr	r3, [r7, #12]
    6404:	687a      	ldr	r2, [r7, #4]
    6406:	0011      	movs	r1, r2
    6408:	0018      	movs	r0, r3
    640a:	f007 f96d 	bl	d6e8 <wc_Sha256Final>
    640e:	0003      	movs	r3, r0
    6410:	617b      	str	r3, [r7, #20]
#endif
            break;
    6412:	e004      	b.n	641e <wc_HashFinal+0x6e>
        case WC_HASH_TYPE_SHA3_384:
        case WC_HASH_TYPE_SHA3_512:
        case WC_HASH_TYPE_BLAKE2B:
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
    6414:	23ad      	movs	r3, #173	; 0xad
    6416:	425b      	negs	r3, r3
    6418:	617b      	str	r3, [r7, #20]
    641a:	e000      	b.n	641e <wc_HashFinal+0x6e>
            break;
        case WC_HASH_TYPE_SHA512:
#ifdef WOLFSSL_SHA512
            ret = wc_Sha512Final(&hash->sha512, out);
#endif
            break;
    641c:	46c0      	nop			; (mov r8, r8)
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
    };

    return ret;
    641e:	697b      	ldr	r3, [r7, #20]
}
    6420:	0018      	movs	r0, r3
    6422:	46bd      	mov	sp, r7
    6424:	b006      	add	sp, #24
    6426:	bd80      	pop	{r7, pc}
    6428:	00029f88 	.word	0x00029f88

0000642c <wc_HashFree>:

int wc_HashFree(wc_HashAlg* hash, enum wc_HashType type)
{
    642c:	b580      	push	{r7, lr}
    642e:	b084      	sub	sp, #16
    6430:	af00      	add	r7, sp, #0
    6432:	6078      	str	r0, [r7, #4]
    6434:	000a      	movs	r2, r1
    6436:	1cfb      	adds	r3, r7, #3
    6438:	701a      	strb	r2, [r3, #0]
    int ret = HASH_TYPE_E; /* Default to hash type error */
    643a:	23e8      	movs	r3, #232	; 0xe8
    643c:	425b      	negs	r3, r3
    643e:	60fb      	str	r3, [r7, #12]

    if (hash == NULL)
    6440:	687b      	ldr	r3, [r7, #4]
    6442:	2b00      	cmp	r3, #0
    6444:	d102      	bne.n	644c <wc_HashFree+0x20>
        return BAD_FUNC_ARG;
    6446:	23ad      	movs	r3, #173	; 0xad
    6448:	425b      	negs	r3, r3
    644a:	e01d      	b.n	6488 <wc_HashFree+0x5c>

    switch (type) {
    644c:	1cfb      	adds	r3, r7, #3
    644e:	781b      	ldrb	r3, [r3, #0]
    6450:	3b03      	subs	r3, #3
    6452:	2b05      	cmp	r3, #5
    6454:	d812      	bhi.n	647c <wc_HashFree+0x50>
    6456:	009a      	lsls	r2, r3, #2
    6458:	4b0d      	ldr	r3, [pc, #52]	; (6490 <wc_HashFree+0x64>)
    645a:	18d3      	adds	r3, r2, r3
    645c:	681b      	ldr	r3, [r3, #0]
    645e:	469f      	mov	pc, r3
            ret = 0;
#endif
            break;
        case WC_HASH_TYPE_SHA:
#ifndef NO_SHA
            wc_ShaFree(&hash->sha);
    6460:	687b      	ldr	r3, [r7, #4]
    6462:	0018      	movs	r0, r3
    6464:	f006 fa08 	bl	c878 <wc_ShaFree>
            ret = 0;
    6468:	2300      	movs	r3, #0
    646a:	60fb      	str	r3, [r7, #12]
#endif
            break;
    646c:	e00b      	b.n	6486 <wc_HashFree+0x5a>
            ret = 0;
#endif
            break;
        case WC_HASH_TYPE_SHA256:
#ifndef NO_SHA256
            wc_Sha256Free(&hash->sha256);
    646e:	687b      	ldr	r3, [r7, #4]
    6470:	0018      	movs	r0, r3
    6472:	f007 f977 	bl	d764 <wc_Sha256Free>
            ret = 0;
    6476:	2300      	movs	r3, #0
    6478:	60fb      	str	r3, [r7, #12]
#endif
            break;
    647a:	e004      	b.n	6486 <wc_HashFree+0x5a>
        case WC_HASH_TYPE_SHA3_384:
        case WC_HASH_TYPE_SHA3_512:
        case WC_HASH_TYPE_BLAKE2B:
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
    647c:	23ad      	movs	r3, #173	; 0xad
    647e:	425b      	negs	r3, r3
    6480:	60fb      	str	r3, [r7, #12]
    6482:	e000      	b.n	6486 <wc_HashFree+0x5a>
        case WC_HASH_TYPE_SHA512:
#ifdef WOLFSSL_SHA512
            wc_Sha512Free(&hash->sha512);
            ret = 0;
#endif
            break;
    6484:	46c0      	nop			; (mov r8, r8)
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
    };

    return ret;
    6486:	68fb      	ldr	r3, [r7, #12]
}
    6488:	0018      	movs	r0, r3
    648a:	46bd      	mov	sp, r7
    648c:	b004      	add	sp, #16
    648e:	bd80      	pop	{r7, pc}
    6490:	00029fa0 	.word	0x00029fa0

00006494 <wc_ShaHash>:
    }
#endif /* !NO_MD5 */

#if !defined(NO_SHA)
    int wc_ShaHash(const byte* data, word32 len, byte* hash)
    {
    6494:	b580      	push	{r7, lr}
    6496:	b088      	sub	sp, #32
    6498:	af00      	add	r7, sp, #0
    649a:	60f8      	str	r0, [r7, #12]
    649c:	60b9      	str	r1, [r7, #8]
    649e:	607a      	str	r2, [r7, #4]
        int ret = 0;
    64a0:	2300      	movs	r3, #0
    64a2:	61fb      	str	r3, [r7, #28]
    #else
        wc_Sha sha[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha = (wc_Sha*)XMALLOC(sizeof(wc_Sha), NULL, DYNAMIC_TYPE_TMP_BUFFER);
    64a4:	2064      	movs	r0, #100	; 0x64
    64a6:	f01f f8ed 	bl	25684 <malloc>
    64aa:	0003      	movs	r3, r0
    64ac:	61bb      	str	r3, [r7, #24]
        if (sha == NULL)
    64ae:	69bb      	ldr	r3, [r7, #24]
    64b0:	2b00      	cmp	r3, #0
    64b2:	d102      	bne.n	64ba <wc_ShaHash+0x26>
            return MEMORY_E;
    64b4:	237d      	movs	r3, #125	; 0x7d
    64b6:	425b      	negs	r3, r3
    64b8:	e029      	b.n	650e <wc_ShaHash+0x7a>
    #endif

        if ((ret = wc_InitSha(sha)) != 0) {
    64ba:	69bb      	ldr	r3, [r7, #24]
    64bc:	0018      	movs	r0, r3
    64be:	f006 f9cb 	bl	c858 <wc_InitSha>
    64c2:	0003      	movs	r3, r0
    64c4:	61fb      	str	r3, [r7, #28]
    64c6:	69fb      	ldr	r3, [r7, #28]
    64c8:	2b00      	cmp	r3, #0
    64ca:	d116      	bne.n	64fa <wc_ShaHash+0x66>
            WOLFSSL_MSG("InitSha failed");
        }
        else {
            if ((ret = wc_ShaUpdate(sha, data, len)) != 0) {
    64cc:	68ba      	ldr	r2, [r7, #8]
    64ce:	68f9      	ldr	r1, [r7, #12]
    64d0:	69bb      	ldr	r3, [r7, #24]
    64d2:	0018      	movs	r0, r3
    64d4:	f006 f8c2 	bl	c65c <wc_ShaUpdate>
    64d8:	0003      	movs	r3, r0
    64da:	61fb      	str	r3, [r7, #28]
    64dc:	69fb      	ldr	r3, [r7, #28]
    64de:	2b00      	cmp	r3, #0
    64e0:	d107      	bne.n	64f2 <wc_ShaHash+0x5e>
                WOLFSSL_MSG("ShaUpdate failed");
            }
            else if ((ret = wc_ShaFinal(sha, hash)) != 0) {
    64e2:	687a      	ldr	r2, [r7, #4]
    64e4:	69bb      	ldr	r3, [r7, #24]
    64e6:	0011      	movs	r1, r2
    64e8:	0018      	movs	r0, r3
    64ea:	f006 f919 	bl	c720 <wc_ShaFinal>
    64ee:	0003      	movs	r3, r0
    64f0:	61fb      	str	r3, [r7, #28]
                WOLFSSL_MSG("ShaFinal failed");
            }
            wc_ShaFree(sha);
    64f2:	69bb      	ldr	r3, [r7, #24]
    64f4:	0018      	movs	r0, r3
    64f6:	f006 f9bf 	bl	c878 <wc_ShaFree>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    64fa:	69bb      	ldr	r3, [r7, #24]
    64fc:	617b      	str	r3, [r7, #20]
    64fe:	697b      	ldr	r3, [r7, #20]
    6500:	2b00      	cmp	r3, #0
    6502:	d003      	beq.n	650c <wc_ShaHash+0x78>
    6504:	697b      	ldr	r3, [r7, #20]
    6506:	0018      	movs	r0, r3
    6508:	f01f f8c6 	bl	25698 <free>
    #endif

        return ret;
    650c:	69fb      	ldr	r3, [r7, #28]
    }
    650e:	0018      	movs	r0, r3
    6510:	46bd      	mov	sp, r7
    6512:	b008      	add	sp, #32
    6514:	bd80      	pop	{r7, pc}
    6516:	46c0      	nop			; (mov r8, r8)

00006518 <wc_Sha256Hash>:
}
#endif /* WOLFSSL_SHA224 */

#if !defined(NO_SHA256)
    int wc_Sha256Hash(const byte* data, word32 len, byte* hash)
    {
    6518:	b580      	push	{r7, lr}
    651a:	b088      	sub	sp, #32
    651c:	af00      	add	r7, sp, #0
    651e:	60f8      	str	r0, [r7, #12]
    6520:	60b9      	str	r1, [r7, #8]
    6522:	607a      	str	r2, [r7, #4]
        int ret = 0;
    6524:	2300      	movs	r3, #0
    6526:	61fb      	str	r3, [r7, #28]
    #else
        wc_Sha256 sha256[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
    6528:	2070      	movs	r0, #112	; 0x70
    652a:	f01f f8ab 	bl	25684 <malloc>
    652e:	0003      	movs	r3, r0
    6530:	61bb      	str	r3, [r7, #24]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha256 == NULL)
    6532:	69bb      	ldr	r3, [r7, #24]
    6534:	2b00      	cmp	r3, #0
    6536:	d102      	bne.n	653e <wc_Sha256Hash+0x26>
            return MEMORY_E;
    6538:	237d      	movs	r3, #125	; 0x7d
    653a:	425b      	negs	r3, r3
    653c:	e029      	b.n	6592 <wc_Sha256Hash+0x7a>
    #endif

        if ((ret = wc_InitSha256(sha256)) != 0) {
    653e:	69bb      	ldr	r3, [r7, #24]
    6540:	0018      	movs	r0, r3
    6542:	f007 f8ff 	bl	d744 <wc_InitSha256>
    6546:	0003      	movs	r3, r0
    6548:	61fb      	str	r3, [r7, #28]
    654a:	69fb      	ldr	r3, [r7, #28]
    654c:	2b00      	cmp	r3, #0
    654e:	d116      	bne.n	657e <wc_Sha256Hash+0x66>
            WOLFSSL_MSG("InitSha256 failed");
        }
        else {
            if ((ret = wc_Sha256Update(sha256, data, len)) != 0) {
    6550:	68ba      	ldr	r2, [r7, #8]
    6552:	68f9      	ldr	r1, [r7, #12]
    6554:	69bb      	ldr	r3, [r7, #24]
    6556:	0018      	movs	r0, r3
    6558:	f007 f822 	bl	d5a0 <wc_Sha256Update>
    655c:	0003      	movs	r3, r0
    655e:	61fb      	str	r3, [r7, #28]
    6560:	69fb      	ldr	r3, [r7, #28]
    6562:	2b00      	cmp	r3, #0
    6564:	d107      	bne.n	6576 <wc_Sha256Hash+0x5e>
                WOLFSSL_MSG("Sha256Update failed");
            }
            else if ((ret = wc_Sha256Final(sha256, hash)) != 0) {
    6566:	687a      	ldr	r2, [r7, #4]
    6568:	69bb      	ldr	r3, [r7, #24]
    656a:	0011      	movs	r1, r2
    656c:	0018      	movs	r0, r3
    656e:	f007 f8bb 	bl	d6e8 <wc_Sha256Final>
    6572:	0003      	movs	r3, r0
    6574:	61fb      	str	r3, [r7, #28]
                WOLFSSL_MSG("Sha256Final failed");
            }
            wc_Sha256Free(sha256);
    6576:	69bb      	ldr	r3, [r7, #24]
    6578:	0018      	movs	r0, r3
    657a:	f007 f8f3 	bl	d764 <wc_Sha256Free>
        }


    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    657e:	69bb      	ldr	r3, [r7, #24]
    6580:	617b      	str	r3, [r7, #20]
    6582:	697b      	ldr	r3, [r7, #20]
    6584:	2b00      	cmp	r3, #0
    6586:	d003      	beq.n	6590 <wc_Sha256Hash+0x78>
    6588:	697b      	ldr	r3, [r7, #20]
    658a:	0018      	movs	r0, r3
    658c:	f01f f884 	bl	25698 <free>
    #endif

        return ret;
    6590:	69fb      	ldr	r3, [r7, #28]
    }
    6592:	0018      	movs	r0, r3
    6594:	46bd      	mov	sp, r7
    6596:	b008      	add	sp, #32
    6598:	bd80      	pop	{r7, pc}
    659a:	46c0      	nop			; (mov r8, r8)

0000659c <btoi>:
    *wc_u32 = ((word32)c[0] << 24) | ((word32)c[1] << 16) | (c[2] << 8) | c[3];
}


STATIC WC_INLINE word32 btoi(byte b)
{
    659c:	b580      	push	{r7, lr}
    659e:	b082      	sub	sp, #8
    65a0:	af00      	add	r7, sp, #0
    65a2:	0002      	movs	r2, r0
    65a4:	1dfb      	adds	r3, r7, #7
    65a6:	701a      	strb	r2, [r3, #0]
    return (word32)(b - 0x30);
    65a8:	1dfb      	adds	r3, r7, #7
    65aa:	781b      	ldrb	r3, [r3, #0]
    65ac:	3b30      	subs	r3, #48	; 0x30
}
    65ae:	0018      	movs	r0, r3
    65b0:	46bd      	mov	sp, r7
    65b2:	b002      	add	sp, #8
    65b4:	bd80      	pop	{r7, pc}
    65b6:	46c0      	nop			; (mov r8, r8)

000065b8 <GetLength>:
    #endif
#endif

WOLFSSL_LOCAL int GetLength(const byte* input, word32* inOutIdx, int* len,
                           word32 maxIdx)
{
    65b8:	b590      	push	{r4, r7, lr}
    65ba:	b087      	sub	sp, #28
    65bc:	af02      	add	r7, sp, #8
    65be:	60f8      	str	r0, [r7, #12]
    65c0:	60b9      	str	r1, [r7, #8]
    65c2:	607a      	str	r2, [r7, #4]
    65c4:	603b      	str	r3, [r7, #0]
    return GetLength_ex(input, inOutIdx, len, maxIdx, 1);
    65c6:	683c      	ldr	r4, [r7, #0]
    65c8:	687a      	ldr	r2, [r7, #4]
    65ca:	68b9      	ldr	r1, [r7, #8]
    65cc:	68f8      	ldr	r0, [r7, #12]
    65ce:	2301      	movs	r3, #1
    65d0:	9300      	str	r3, [sp, #0]
    65d2:	0023      	movs	r3, r4
    65d4:	f000 f806 	bl	65e4 <GetLength_ex>
    65d8:	0003      	movs	r3, r0
}
    65da:	0018      	movs	r0, r3
    65dc:	46bd      	mov	sp, r7
    65de:	b005      	add	sp, #20
    65e0:	bd90      	pop	{r4, r7, pc}
    65e2:	46c0      	nop			; (mov r8, r8)

000065e4 <GetLength_ex>:


/* give option to check length value found against index. 1 to check 0 to not */
WOLFSSL_LOCAL int GetLength_ex(const byte* input, word32* inOutIdx, int* len,
                           word32 maxIdx, int check)
{
    65e4:	b580      	push	{r7, lr}
    65e6:	b088      	sub	sp, #32
    65e8:	af00      	add	r7, sp, #0
    65ea:	60f8      	str	r0, [r7, #12]
    65ec:	60b9      	str	r1, [r7, #8]
    65ee:	607a      	str	r2, [r7, #4]
    65f0:	603b      	str	r3, [r7, #0]
    int     length = 0;
    65f2:	2300      	movs	r3, #0
    65f4:	61fb      	str	r3, [r7, #28]
    word32  idx = *inOutIdx;
    65f6:	68bb      	ldr	r3, [r7, #8]
    65f8:	681b      	ldr	r3, [r3, #0]
    65fa:	61bb      	str	r3, [r7, #24]
    byte    b;

    *len = 0;    /* default length */
    65fc:	687b      	ldr	r3, [r7, #4]
    65fe:	2200      	movs	r2, #0
    6600:	601a      	str	r2, [r3, #0]

    if ((idx + 1) > maxIdx) {   /* for first read */
    6602:	69bb      	ldr	r3, [r7, #24]
    6604:	1c5a      	adds	r2, r3, #1
    6606:	683b      	ldr	r3, [r7, #0]
    6608:	429a      	cmp	r2, r3
    660a:	d902      	bls.n	6612 <GetLength_ex+0x2e>
        WOLFSSL_MSG("GetLength bad index on input");
        return BUFFER_E;
    660c:	2384      	movs	r3, #132	; 0x84
    660e:	425b      	negs	r3, r3
    6610:	e04d      	b.n	66ae <GetLength_ex+0xca>
    }

    b = input[idx++];
    6612:	69bb      	ldr	r3, [r7, #24]
    6614:	1c5a      	adds	r2, r3, #1
    6616:	61ba      	str	r2, [r7, #24]
    6618:	68fa      	ldr	r2, [r7, #12]
    661a:	18d2      	adds	r2, r2, r3
    661c:	2313      	movs	r3, #19
    661e:	18fb      	adds	r3, r7, r3
    6620:	7812      	ldrb	r2, [r2, #0]
    6622:	701a      	strb	r2, [r3, #0]
    if (b >= ASN_LONG_LENGTH) {
    6624:	2313      	movs	r3, #19
    6626:	18fb      	adds	r3, r7, r3
    6628:	781b      	ldrb	r3, [r3, #0]
    662a:	b25b      	sxtb	r3, r3
    662c:	2b00      	cmp	r3, #0
    662e:	da24      	bge.n	667a <GetLength_ex+0x96>
        word32 bytes = b & 0x7F;
    6630:	2313      	movs	r3, #19
    6632:	18fb      	adds	r3, r7, r3
    6634:	781b      	ldrb	r3, [r3, #0]
    6636:	227f      	movs	r2, #127	; 0x7f
    6638:	4013      	ands	r3, r2
    663a:	617b      	str	r3, [r7, #20]

        if ((idx + bytes) > maxIdx) {   /* for reading bytes */
    663c:	69ba      	ldr	r2, [r7, #24]
    663e:	697b      	ldr	r3, [r7, #20]
    6640:	18d2      	adds	r2, r2, r3
    6642:	683b      	ldr	r3, [r7, #0]
    6644:	429a      	cmp	r2, r3
    6646:	d912      	bls.n	666e <GetLength_ex+0x8a>
            WOLFSSL_MSG("GetLength bad long length");
            return BUFFER_E;
    6648:	2384      	movs	r3, #132	; 0x84
    664a:	425b      	negs	r3, r3
    664c:	e02f      	b.n	66ae <GetLength_ex+0xca>
        }

        while (bytes--) {
            b = input[idx++];
    664e:	69bb      	ldr	r3, [r7, #24]
    6650:	1c5a      	adds	r2, r3, #1
    6652:	61ba      	str	r2, [r7, #24]
    6654:	68fa      	ldr	r2, [r7, #12]
    6656:	18d2      	adds	r2, r2, r3
    6658:	2313      	movs	r3, #19
    665a:	18fb      	adds	r3, r7, r3
    665c:	7812      	ldrb	r2, [r2, #0]
    665e:	701a      	strb	r2, [r3, #0]
            length = (length << 8) | b;
    6660:	69fb      	ldr	r3, [r7, #28]
    6662:	021a      	lsls	r2, r3, #8
    6664:	2313      	movs	r3, #19
    6666:	18fb      	adds	r3, r7, r3
    6668:	781b      	ldrb	r3, [r3, #0]
    666a:	4313      	orrs	r3, r2
    666c:	61fb      	str	r3, [r7, #28]
        if ((idx + bytes) > maxIdx) {   /* for reading bytes */
            WOLFSSL_MSG("GetLength bad long length");
            return BUFFER_E;
        }

        while (bytes--) {
    666e:	697b      	ldr	r3, [r7, #20]
    6670:	1e5a      	subs	r2, r3, #1
    6672:	617a      	str	r2, [r7, #20]
    6674:	2b00      	cmp	r3, #0
    6676:	d1ea      	bne.n	664e <GetLength_ex+0x6a>
    6678:	e003      	b.n	6682 <GetLength_ex+0x9e>
            b = input[idx++];
            length = (length << 8) | b;
        }
    }
    else
        length = b;
    667a:	2313      	movs	r3, #19
    667c:	18fb      	adds	r3, r7, r3
    667e:	781b      	ldrb	r3, [r3, #0]
    6680:	61fb      	str	r3, [r7, #28]

    if (check && (idx + length) > maxIdx) {   /* for user of length */
    6682:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6684:	2b00      	cmp	r3, #0
    6686:	d008      	beq.n	669a <GetLength_ex+0xb6>
    6688:	69fa      	ldr	r2, [r7, #28]
    668a:	69bb      	ldr	r3, [r7, #24]
    668c:	18d2      	adds	r2, r2, r3
    668e:	683b      	ldr	r3, [r7, #0]
    6690:	429a      	cmp	r2, r3
    6692:	d902      	bls.n	669a <GetLength_ex+0xb6>
        WOLFSSL_MSG("GetLength value exceeds buffer length");
        return BUFFER_E;
    6694:	2384      	movs	r3, #132	; 0x84
    6696:	425b      	negs	r3, r3
    6698:	e009      	b.n	66ae <GetLength_ex+0xca>
    }

    *inOutIdx = idx;
    669a:	68bb      	ldr	r3, [r7, #8]
    669c:	69ba      	ldr	r2, [r7, #24]
    669e:	601a      	str	r2, [r3, #0]
    if (length > 0)
    66a0:	69fb      	ldr	r3, [r7, #28]
    66a2:	2b00      	cmp	r3, #0
    66a4:	dd02      	ble.n	66ac <GetLength_ex+0xc8>
        *len = length;
    66a6:	687b      	ldr	r3, [r7, #4]
    66a8:	69fa      	ldr	r2, [r7, #28]
    66aa:	601a      	str	r2, [r3, #0]

    return length;
    66ac:	69fb      	ldr	r3, [r7, #28]
}
    66ae:	0018      	movs	r0, r3
    66b0:	46bd      	mov	sp, r7
    66b2:	b008      	add	sp, #32
    66b4:	bd80      	pop	{r7, pc}
    66b6:	46c0      	nop			; (mov r8, r8)

000066b8 <GetASNHeader_ex>:


static int GetASNHeader_ex(const byte* input, byte tag, word32* inOutIdx, int* len,
                        word32 maxIdx, int check)
{
    66b8:	b590      	push	{r4, r7, lr}
    66ba:	b08b      	sub	sp, #44	; 0x2c
    66bc:	af02      	add	r7, sp, #8
    66be:	60f8      	str	r0, [r7, #12]
    66c0:	607a      	str	r2, [r7, #4]
    66c2:	603b      	str	r3, [r7, #0]
    66c4:	230b      	movs	r3, #11
    66c6:	18fb      	adds	r3, r7, r3
    66c8:	1c0a      	adds	r2, r1, #0
    66ca:	701a      	strb	r2, [r3, #0]
    word32 idx = *inOutIdx;
    66cc:	687b      	ldr	r3, [r7, #4]
    66ce:	681b      	ldr	r3, [r3, #0]
    66d0:	61bb      	str	r3, [r7, #24]
    byte   b;
    int    length;

    if ((idx + 1) > maxIdx)
    66d2:	69bb      	ldr	r3, [r7, #24]
    66d4:	1c5a      	adds	r2, r3, #1
    66d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    66d8:	429a      	cmp	r2, r3
    66da:	d902      	bls.n	66e2 <GetASNHeader_ex+0x2a>
        return BUFFER_E;
    66dc:	2384      	movs	r3, #132	; 0x84
    66de:	425b      	negs	r3, r3
    66e0:	e02a      	b.n	6738 <GetASNHeader_ex+0x80>

    b = input[idx++];
    66e2:	69bb      	ldr	r3, [r7, #24]
    66e4:	1c5a      	adds	r2, r3, #1
    66e6:	61ba      	str	r2, [r7, #24]
    66e8:	68fa      	ldr	r2, [r7, #12]
    66ea:	18d2      	adds	r2, r2, r3
    66ec:	231f      	movs	r3, #31
    66ee:	18fb      	adds	r3, r7, r3
    66f0:	7812      	ldrb	r2, [r2, #0]
    66f2:	701a      	strb	r2, [r3, #0]
    if (b != tag)
    66f4:	231f      	movs	r3, #31
    66f6:	18fa      	adds	r2, r7, r3
    66f8:	230b      	movs	r3, #11
    66fa:	18fb      	adds	r3, r7, r3
    66fc:	7812      	ldrb	r2, [r2, #0]
    66fe:	781b      	ldrb	r3, [r3, #0]
    6700:	429a      	cmp	r2, r3
    6702:	d002      	beq.n	670a <GetASNHeader_ex+0x52>
        return ASN_PARSE_E;
    6704:	238c      	movs	r3, #140	; 0x8c
    6706:	425b      	negs	r3, r3
    6708:	e016      	b.n	6738 <GetASNHeader_ex+0x80>

    if (GetLength_ex(input, &idx, &length, maxIdx, check) < 0)
    670a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    670c:	2314      	movs	r3, #20
    670e:	18fa      	adds	r2, r7, r3
    6710:	2318      	movs	r3, #24
    6712:	18f9      	adds	r1, r7, r3
    6714:	68f8      	ldr	r0, [r7, #12]
    6716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6718:	9300      	str	r3, [sp, #0]
    671a:	0023      	movs	r3, r4
    671c:	f7ff ff62 	bl	65e4 <GetLength_ex>
    6720:	1e03      	subs	r3, r0, #0
    6722:	da02      	bge.n	672a <GetASNHeader_ex+0x72>
        return ASN_PARSE_E;
    6724:	238c      	movs	r3, #140	; 0x8c
    6726:	425b      	negs	r3, r3
    6728:	e006      	b.n	6738 <GetASNHeader_ex+0x80>

    *len      = length;
    672a:	697a      	ldr	r2, [r7, #20]
    672c:	683b      	ldr	r3, [r7, #0]
    672e:	601a      	str	r2, [r3, #0]
    *inOutIdx = idx;
    6730:	69ba      	ldr	r2, [r7, #24]
    6732:	687b      	ldr	r3, [r7, #4]
    6734:	601a      	str	r2, [r3, #0]
    return length;
    6736:	697b      	ldr	r3, [r7, #20]
}
    6738:	0018      	movs	r0, r3
    673a:	46bd      	mov	sp, r7
    673c:	b009      	add	sp, #36	; 0x24
    673e:	bd90      	pop	{r4, r7, pc}

00006740 <GetASNHeader>:
 *         ASN_PARSE_E when the expected tag is not found or length is invalid.
 *         Otherwise, the number of bytes in the ASN.1 data.
 */
static int GetASNHeader(const byte* input, byte tag, word32* inOutIdx, int* len,
                        word32 maxIdx)
{
    6740:	b590      	push	{r4, r7, lr}
    6742:	b087      	sub	sp, #28
    6744:	af02      	add	r7, sp, #8
    6746:	60f8      	str	r0, [r7, #12]
    6748:	607a      	str	r2, [r7, #4]
    674a:	603b      	str	r3, [r7, #0]
    674c:	230b      	movs	r3, #11
    674e:	18fb      	adds	r3, r7, r3
    6750:	1c0a      	adds	r2, r1, #0
    6752:	701a      	strb	r2, [r3, #0]
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
    6754:	683c      	ldr	r4, [r7, #0]
    6756:	687a      	ldr	r2, [r7, #4]
    6758:	230b      	movs	r3, #11
    675a:	18fb      	adds	r3, r7, r3
    675c:	7819      	ldrb	r1, [r3, #0]
    675e:	68f8      	ldr	r0, [r7, #12]
    6760:	2301      	movs	r3, #1
    6762:	9301      	str	r3, [sp, #4]
    6764:	6a3b      	ldr	r3, [r7, #32]
    6766:	9300      	str	r3, [sp, #0]
    6768:	0023      	movs	r3, r4
    676a:	f7ff ffa5 	bl	66b8 <GetASNHeader_ex>
    676e:	0003      	movs	r3, r0
}
    6770:	0018      	movs	r0, r3
    6772:	46bd      	mov	sp, r7
    6774:	b005      	add	sp, #20
    6776:	bd90      	pop	{r4, r7, pc}

00006778 <GetSequence>:


WOLFSSL_LOCAL int GetSequence(const byte* input, word32* inOutIdx, int* len,
                           word32 maxIdx)
{
    6778:	b580      	push	{r7, lr}
    677a:	b086      	sub	sp, #24
    677c:	af02      	add	r7, sp, #8
    677e:	60f8      	str	r0, [r7, #12]
    6780:	60b9      	str	r1, [r7, #8]
    6782:	607a      	str	r2, [r7, #4]
    6784:	603b      	str	r3, [r7, #0]
    return GetASNHeader(input, ASN_SEQUENCE | ASN_CONSTRUCTED, inOutIdx, len,
    6786:	6879      	ldr	r1, [r7, #4]
    6788:	68ba      	ldr	r2, [r7, #8]
    678a:	68f8      	ldr	r0, [r7, #12]
    678c:	683b      	ldr	r3, [r7, #0]
    678e:	9300      	str	r3, [sp, #0]
    6790:	000b      	movs	r3, r1
    6792:	2130      	movs	r1, #48	; 0x30
    6794:	f7ff ffd4 	bl	6740 <GetASNHeader>
    6798:	0003      	movs	r3, r0
                        maxIdx);
}
    679a:	0018      	movs	r0, r3
    679c:	46bd      	mov	sp, r7
    679e:	b004      	add	sp, #16
    67a0:	bd80      	pop	{r7, pc}
    67a2:	46c0      	nop			; (mov r8, r8)

000067a4 <GetASNInt>:
 *         or invalid use of or missing leading zero.
 *         Otherwise, 0 to indicate success.
 */
static int GetASNInt(const byte* input, word32* inOutIdx, int* len,
                     word32 maxIdx)
{
    67a4:	b580      	push	{r7, lr}
    67a6:	b088      	sub	sp, #32
    67a8:	af02      	add	r7, sp, #8
    67aa:	60f8      	str	r0, [r7, #12]
    67ac:	60b9      	str	r1, [r7, #8]
    67ae:	607a      	str	r2, [r7, #4]
    67b0:	603b      	str	r3, [r7, #0]
    int    ret;

    ret = GetASNHeader(input, ASN_INTEGER, inOutIdx, len, maxIdx);
    67b2:	6879      	ldr	r1, [r7, #4]
    67b4:	68ba      	ldr	r2, [r7, #8]
    67b6:	68f8      	ldr	r0, [r7, #12]
    67b8:	683b      	ldr	r3, [r7, #0]
    67ba:	9300      	str	r3, [sp, #0]
    67bc:	000b      	movs	r3, r1
    67be:	2102      	movs	r1, #2
    67c0:	f7ff ffbe 	bl	6740 <GetASNHeader>
    67c4:	0003      	movs	r3, r0
    67c6:	617b      	str	r3, [r7, #20]
    if (ret < 0)
    67c8:	697b      	ldr	r3, [r7, #20]
    67ca:	2b00      	cmp	r3, #0
    67cc:	da01      	bge.n	67d2 <GetASNInt+0x2e>
        return ret;
    67ce:	697b      	ldr	r3, [r7, #20]
    67d0:	e028      	b.n	6824 <GetASNInt+0x80>

    if (*len > 0) {
    67d2:	687b      	ldr	r3, [r7, #4]
    67d4:	681b      	ldr	r3, [r3, #0]
    67d6:	2b00      	cmp	r3, #0
    67d8:	dd23      	ble.n	6822 <GetASNInt+0x7e>
        /* remove leading zero, unless there is only one 0x00 byte */
        if ((input[*inOutIdx] == 0x00) && (*len > 1)) {
    67da:	68bb      	ldr	r3, [r7, #8]
    67dc:	681b      	ldr	r3, [r3, #0]
    67de:	68fa      	ldr	r2, [r7, #12]
    67e0:	18d3      	adds	r3, r2, r3
    67e2:	781b      	ldrb	r3, [r3, #0]
    67e4:	2b00      	cmp	r3, #0
    67e6:	d11c      	bne.n	6822 <GetASNInt+0x7e>
    67e8:	687b      	ldr	r3, [r7, #4]
    67ea:	681b      	ldr	r3, [r3, #0]
    67ec:	2b01      	cmp	r3, #1
    67ee:	dd18      	ble.n	6822 <GetASNInt+0x7e>
            (*inOutIdx)++;
    67f0:	68bb      	ldr	r3, [r7, #8]
    67f2:	681b      	ldr	r3, [r3, #0]
    67f4:	1c5a      	adds	r2, r3, #1
    67f6:	68bb      	ldr	r3, [r7, #8]
    67f8:	601a      	str	r2, [r3, #0]
            (*len)--;
    67fa:	687b      	ldr	r3, [r7, #4]
    67fc:	681b      	ldr	r3, [r3, #0]
    67fe:	1e5a      	subs	r2, r3, #1
    6800:	687b      	ldr	r3, [r7, #4]
    6802:	601a      	str	r2, [r3, #0]

            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
    6804:	687b      	ldr	r3, [r7, #4]
    6806:	681b      	ldr	r3, [r3, #0]
    6808:	2b00      	cmp	r3, #0
    680a:	dd0a      	ble.n	6822 <GetASNInt+0x7e>
    680c:	68bb      	ldr	r3, [r7, #8]
    680e:	681b      	ldr	r3, [r3, #0]
    6810:	68fa      	ldr	r2, [r7, #12]
    6812:	18d3      	adds	r3, r2, r3
    6814:	781b      	ldrb	r3, [r3, #0]
    6816:	b25b      	sxtb	r3, r3
    6818:	2b00      	cmp	r3, #0
    681a:	db02      	blt.n	6822 <GetASNInt+0x7e>
                return ASN_PARSE_E;
    681c:	238c      	movs	r3, #140	; 0x8c
    681e:	425b      	negs	r3, r3
    6820:	e000      	b.n	6824 <GetASNInt+0x80>
        }
    }

    return 0;
    6822:	2300      	movs	r3, #0
}
    6824:	0018      	movs	r0, r3
    6826:	46bd      	mov	sp, r7
    6828:	b006      	add	sp, #24
    682a:	bd80      	pop	{r7, pc}

0000682c <SetASNInt>:
 * firstByte  First byte of data, most significant byte of integer, to encode.
 * output     Buffer to write into.
 * returns the number of bytes added to the buffer.
 */
static int SetASNInt(int len, byte firstByte, byte* output)
{
    682c:	b580      	push	{r7, lr}
    682e:	b086      	sub	sp, #24
    6830:	af00      	add	r7, sp, #0
    6832:	60f8      	str	r0, [r7, #12]
    6834:	607a      	str	r2, [r7, #4]
    6836:	230b      	movs	r3, #11
    6838:	18fb      	adds	r3, r7, r3
    683a:	1c0a      	adds	r2, r1, #0
    683c:	701a      	strb	r2, [r3, #0]
    word32 idx = 0;
    683e:	2300      	movs	r3, #0
    6840:	617b      	str	r3, [r7, #20]

    output[idx++] = ASN_INTEGER;
    6842:	697b      	ldr	r3, [r7, #20]
    6844:	1c5a      	adds	r2, r3, #1
    6846:	617a      	str	r2, [r7, #20]
    6848:	687a      	ldr	r2, [r7, #4]
    684a:	18d3      	adds	r3, r2, r3
    684c:	2202      	movs	r2, #2
    684e:	701a      	strb	r2, [r3, #0]
    if (firstByte & 0x80)
    6850:	230b      	movs	r3, #11
    6852:	18fb      	adds	r3, r7, r3
    6854:	781b      	ldrb	r3, [r3, #0]
    6856:	b25b      	sxtb	r3, r3
    6858:	2b00      	cmp	r3, #0
    685a:	da02      	bge.n	6862 <SetASNInt+0x36>
        len++;
    685c:	68fb      	ldr	r3, [r7, #12]
    685e:	3301      	adds	r3, #1
    6860:	60fb      	str	r3, [r7, #12]
    idx += SetLength(len, output + idx);
    6862:	68f8      	ldr	r0, [r7, #12]
    6864:	687a      	ldr	r2, [r7, #4]
    6866:	697b      	ldr	r3, [r7, #20]
    6868:	18d3      	adds	r3, r2, r3
    686a:	0019      	movs	r1, r3
    686c:	f000 fde0 	bl	7430 <SetLength>
    6870:	0002      	movs	r2, r0
    6872:	697b      	ldr	r3, [r7, #20]
    6874:	189b      	adds	r3, r3, r2
    6876:	617b      	str	r3, [r7, #20]
    if (firstByte & 0x80)
    6878:	230b      	movs	r3, #11
    687a:	18fb      	adds	r3, r7, r3
    687c:	781b      	ldrb	r3, [r3, #0]
    687e:	b25b      	sxtb	r3, r3
    6880:	2b00      	cmp	r3, #0
    6882:	da06      	bge.n	6892 <SetASNInt+0x66>
        output[idx++] = 0x00;
    6884:	697b      	ldr	r3, [r7, #20]
    6886:	1c5a      	adds	r2, r3, #1
    6888:	617a      	str	r2, [r7, #20]
    688a:	687a      	ldr	r2, [r7, #4]
    688c:	18d3      	adds	r3, r2, r3
    688e:	2200      	movs	r2, #0
    6890:	701a      	strb	r2, [r3, #0]

    return idx;
    6892:	697b      	ldr	r3, [r7, #20]
}
    6894:	0018      	movs	r0, r3
    6896:	46bd      	mov	sp, r7
    6898:	b006      	add	sp, #24
    689a:	bd80      	pop	{r7, pc}

0000689c <SetASNIntMP>:
 * returns BUFFER_E when the data is too long for the buffer.
 *         MP_TO_E when encoding the integer fails.
 *         Otherwise, the number of bytes added to the buffer.
 */
static int SetASNIntMP(mp_int* n, int maxSz, byte* output)
{
    689c:	b580      	push	{r7, lr}
    689e:	b088      	sub	sp, #32
    68a0:	af00      	add	r7, sp, #0
    68a2:	60f8      	str	r0, [r7, #12]
    68a4:	60b9      	str	r1, [r7, #8]
    68a6:	607a      	str	r2, [r7, #4]
    int idx = 0;
    68a8:	2300      	movs	r3, #0
    68aa:	61fb      	str	r3, [r7, #28]
    int leadingBit;
    int length;
    int err;

    leadingBit = mp_leading_bit(n);
    68ac:	68fb      	ldr	r3, [r7, #12]
    68ae:	0018      	movs	r0, r3
    68b0:	f009 fafa 	bl	fea8 <mp_leading_bit>
    68b4:	0003      	movs	r3, r0
    68b6:	61bb      	str	r3, [r7, #24]
    length = mp_unsigned_bin_size(n);
    68b8:	68fb      	ldr	r3, [r7, #12]
    68ba:	0018      	movs	r0, r3
    68bc:	f009 fa50 	bl	fd60 <mp_unsigned_bin_size>
    68c0:	0003      	movs	r3, r0
    68c2:	617b      	str	r3, [r7, #20]
    idx = SetASNInt(length, leadingBit ? 0x80 : 0x00, output);
    68c4:	69bb      	ldr	r3, [r7, #24]
    68c6:	2b00      	cmp	r3, #0
    68c8:	d001      	beq.n	68ce <SetASNIntMP+0x32>
    68ca:	2380      	movs	r3, #128	; 0x80
    68cc:	e000      	b.n	68d0 <SetASNIntMP+0x34>
    68ce:	2300      	movs	r3, #0
    68d0:	687a      	ldr	r2, [r7, #4]
    68d2:	6978      	ldr	r0, [r7, #20]
    68d4:	0019      	movs	r1, r3
    68d6:	f7ff ffa9 	bl	682c <SetASNInt>
    68da:	0003      	movs	r3, r0
    68dc:	61fb      	str	r3, [r7, #28]
    if (maxSz >= 0 && (idx + length) > maxSz)
    68de:	68bb      	ldr	r3, [r7, #8]
    68e0:	2b00      	cmp	r3, #0
    68e2:	db08      	blt.n	68f6 <SetASNIntMP+0x5a>
    68e4:	69fa      	ldr	r2, [r7, #28]
    68e6:	697b      	ldr	r3, [r7, #20]
    68e8:	18d2      	adds	r2, r2, r3
    68ea:	68bb      	ldr	r3, [r7, #8]
    68ec:	429a      	cmp	r2, r3
    68ee:	dd02      	ble.n	68f6 <SetASNIntMP+0x5a>
        return BUFFER_E;
    68f0:	2384      	movs	r3, #132	; 0x84
    68f2:	425b      	negs	r3, r3
    68f4:	e014      	b.n	6920 <SetASNIntMP+0x84>

    err = mp_to_unsigned_bin(n, output + idx);
    68f6:	69fb      	ldr	r3, [r7, #28]
    68f8:	687a      	ldr	r2, [r7, #4]
    68fa:	18d2      	adds	r2, r2, r3
    68fc:	68fb      	ldr	r3, [r7, #12]
    68fe:	0011      	movs	r1, r2
    6900:	0018      	movs	r0, r3
    6902:	f009 fa3b 	bl	fd7c <mp_to_unsigned_bin>
    6906:	0003      	movs	r3, r0
    6908:	613b      	str	r3, [r7, #16]
    if (err != MP_OKAY)
    690a:	693b      	ldr	r3, [r7, #16]
    690c:	2b00      	cmp	r3, #0
    690e:	d002      	beq.n	6916 <SetASNIntMP+0x7a>
        return MP_TO_E;
    6910:	2371      	movs	r3, #113	; 0x71
    6912:	425b      	negs	r3, r3
    6914:	e004      	b.n	6920 <SetASNIntMP+0x84>
    idx += length;
    6916:	69fa      	ldr	r2, [r7, #28]
    6918:	697b      	ldr	r3, [r7, #20]
    691a:	18d3      	adds	r3, r2, r3
    691c:	61fb      	str	r3, [r7, #28]

    return idx;
    691e:	69fb      	ldr	r3, [r7, #28]
}
    6920:	0018      	movs	r0, r3
    6922:	46bd      	mov	sp, r7
    6924:	b008      	add	sp, #32
    6926:	bd80      	pop	{r7, pc}

00006928 <GetMyVersion>:
#endif /* !NO_RSA && HAVE_USER_RSA && WOLFSSL_CERT_GEN */

/* Windows header clash for WinCE using GetVersion */
WOLFSSL_LOCAL int GetMyVersion(const byte* input, word32* inOutIdx,
                               int* version, word32 maxIdx)
{
    6928:	b580      	push	{r7, lr}
    692a:	b086      	sub	sp, #24
    692c:	af00      	add	r7, sp, #0
    692e:	60f8      	str	r0, [r7, #12]
    6930:	60b9      	str	r1, [r7, #8]
    6932:	607a      	str	r2, [r7, #4]
    6934:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
    6936:	68bb      	ldr	r3, [r7, #8]
    6938:	681b      	ldr	r3, [r3, #0]
    693a:	617b      	str	r3, [r7, #20]

    if ((idx + MIN_VERSION_SZ) > maxIdx)
    693c:	697b      	ldr	r3, [r7, #20]
    693e:	1cda      	adds	r2, r3, #3
    6940:	683b      	ldr	r3, [r7, #0]
    6942:	429a      	cmp	r2, r3
    6944:	d902      	bls.n	694c <GetMyVersion+0x24>
        return ASN_PARSE_E;
    6946:	238c      	movs	r3, #140	; 0x8c
    6948:	425b      	negs	r3, r3
    694a:	e023      	b.n	6994 <GetMyVersion+0x6c>

    if (input[idx++] != ASN_INTEGER)
    694c:	697b      	ldr	r3, [r7, #20]
    694e:	1c5a      	adds	r2, r3, #1
    6950:	617a      	str	r2, [r7, #20]
    6952:	68fa      	ldr	r2, [r7, #12]
    6954:	18d3      	adds	r3, r2, r3
    6956:	781b      	ldrb	r3, [r3, #0]
    6958:	2b02      	cmp	r3, #2
    695a:	d002      	beq.n	6962 <GetMyVersion+0x3a>
        return ASN_PARSE_E;
    695c:	238c      	movs	r3, #140	; 0x8c
    695e:	425b      	negs	r3, r3
    6960:	e018      	b.n	6994 <GetMyVersion+0x6c>

    if (input[idx++] != 0x01)
    6962:	697b      	ldr	r3, [r7, #20]
    6964:	1c5a      	adds	r2, r3, #1
    6966:	617a      	str	r2, [r7, #20]
    6968:	68fa      	ldr	r2, [r7, #12]
    696a:	18d3      	adds	r3, r2, r3
    696c:	781b      	ldrb	r3, [r3, #0]
    696e:	2b01      	cmp	r3, #1
    6970:	d002      	beq.n	6978 <GetMyVersion+0x50>
        return ASN_VERSION_E;
    6972:	238d      	movs	r3, #141	; 0x8d
    6974:	425b      	negs	r3, r3
    6976:	e00d      	b.n	6994 <GetMyVersion+0x6c>

    *version  = input[idx++];
    6978:	697b      	ldr	r3, [r7, #20]
    697a:	1c5a      	adds	r2, r3, #1
    697c:	617a      	str	r2, [r7, #20]
    697e:	68fa      	ldr	r2, [r7, #12]
    6980:	18d3      	adds	r3, r2, r3
    6982:	781b      	ldrb	r3, [r3, #0]
    6984:	001a      	movs	r2, r3
    6986:	687b      	ldr	r3, [r7, #4]
    6988:	601a      	str	r2, [r3, #0]
    *inOutIdx = idx;
    698a:	68bb      	ldr	r3, [r7, #8]
    698c:	697a      	ldr	r2, [r7, #20]
    698e:	601a      	str	r2, [r3, #0]

    return *version;
    6990:	687b      	ldr	r3, [r7, #4]
    6992:	681b      	ldr	r3, [r3, #0]
}
    6994:	0018      	movs	r0, r3
    6996:	46bd      	mov	sp, r7
    6998:	b006      	add	sp, #24
    699a:	bd80      	pop	{r7, pc}

0000699c <GetInt>:

    return 0;
}

int GetInt(mp_int* mpi, const byte* input, word32* inOutIdx, word32 maxIdx)
{
    699c:	b580      	push	{r7, lr}
    699e:	b088      	sub	sp, #32
    69a0:	af00      	add	r7, sp, #0
    69a2:	60f8      	str	r0, [r7, #12]
    69a4:	60b9      	str	r1, [r7, #8]
    69a6:	607a      	str	r2, [r7, #4]
    69a8:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	681b      	ldr	r3, [r3, #0]
    69ae:	61bb      	str	r3, [r7, #24]
    int    ret;
    int    length;

    ret = GetASNInt(input, &idx, &length, maxIdx);
    69b0:	683b      	ldr	r3, [r7, #0]
    69b2:	2214      	movs	r2, #20
    69b4:	18ba      	adds	r2, r7, r2
    69b6:	2118      	movs	r1, #24
    69b8:	1879      	adds	r1, r7, r1
    69ba:	68b8      	ldr	r0, [r7, #8]
    69bc:	f7ff fef2 	bl	67a4 <GetASNInt>
    69c0:	0003      	movs	r3, r0
    69c2:	61fb      	str	r3, [r7, #28]
    if (ret != 0)
    69c4:	69fb      	ldr	r3, [r7, #28]
    69c6:	2b00      	cmp	r3, #0
    69c8:	d001      	beq.n	69ce <GetInt+0x32>
        return ret;
    69ca:	69fb      	ldr	r3, [r7, #28]
    69cc:	e01f      	b.n	6a0e <GetInt+0x72>

    if (mp_init(mpi) != MP_OKAY)
    69ce:	68fb      	ldr	r3, [r7, #12]
    69d0:	0018      	movs	r0, r3
    69d2:	f009 f91b 	bl	fc0c <mp_init>
    69d6:	1e03      	subs	r3, r0, #0
    69d8:	d002      	beq.n	69e0 <GetInt+0x44>
        return MP_INIT_E;
    69da:	236e      	movs	r3, #110	; 0x6e
    69dc:	425b      	negs	r3, r3
    69de:	e016      	b.n	6a0e <GetInt+0x72>

    if (mp_read_unsigned_bin(mpi, (byte*)input + idx, length) != 0) {
    69e0:	69bb      	ldr	r3, [r7, #24]
    69e2:	68ba      	ldr	r2, [r7, #8]
    69e4:	18d1      	adds	r1, r2, r3
    69e6:	697a      	ldr	r2, [r7, #20]
    69e8:	68fb      	ldr	r3, [r7, #12]
    69ea:	0018      	movs	r0, r3
    69ec:	f009 f9d6 	bl	fd9c <mp_read_unsigned_bin>
    69f0:	1e03      	subs	r3, r0, #0
    69f2:	d006      	beq.n	6a02 <GetInt+0x66>
        mp_clear(mpi);
    69f4:	68fb      	ldr	r3, [r7, #12]
    69f6:	0018      	movs	r0, r3
    69f8:	f009 f96c 	bl	fcd4 <mp_clear>
        return ASN_GETINT_E;
    69fc:	238e      	movs	r3, #142	; 0x8e
    69fe:	425b      	negs	r3, r3
    6a00:	e005      	b.n	6a0e <GetInt+0x72>
        mp_clear(mpi);
        return ASN_GETINT_E;
    }
#endif /* HAVE_WOLF_BIGINT */

    *inOutIdx = idx + length;
    6a02:	69bb      	ldr	r3, [r7, #24]
    6a04:	697a      	ldr	r2, [r7, #20]
    6a06:	189a      	adds	r2, r3, r2
    6a08:	687b      	ldr	r3, [r7, #4]
    6a0a:	601a      	str	r2, [r3, #0]

    return 0;
    6a0c:	2300      	movs	r3, #0
}
    6a0e:	0018      	movs	r0, r3
    6a10:	46bd      	mov	sp, r7
    6a12:	b008      	add	sp, #32
    6a14:	bd80      	pop	{r7, pc}
    6a16:	46c0      	nop			; (mov r8, r8)

00006a18 <CheckBitString>:
#endif
#endif

static int CheckBitString(const byte* input, word32* inOutIdx, int* len,
                          word32 maxIdx, int zeroBits, byte* unusedBits)
{
    6a18:	b580      	push	{r7, lr}
    6a1a:	b088      	sub	sp, #32
    6a1c:	af00      	add	r7, sp, #0
    6a1e:	60f8      	str	r0, [r7, #12]
    6a20:	60b9      	str	r1, [r7, #8]
    6a22:	607a      	str	r2, [r7, #4]
    6a24:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
    6a26:	68bb      	ldr	r3, [r7, #8]
    6a28:	681b      	ldr	r3, [r3, #0]
    6a2a:	61bb      	str	r3, [r7, #24]
    int    length;
    byte   b;

    if ((idx + 1) > maxIdx)
    6a2c:	69bb      	ldr	r3, [r7, #24]
    6a2e:	1c5a      	adds	r2, r3, #1
    6a30:	683b      	ldr	r3, [r7, #0]
    6a32:	429a      	cmp	r2, r3
    6a34:	d902      	bls.n	6a3c <CheckBitString+0x24>
        return BUFFER_E;
    6a36:	2384      	movs	r3, #132	; 0x84
    6a38:	425b      	negs	r3, r3
    6a3a:	e071      	b.n	6b20 <CheckBitString+0x108>

    if (input[idx++] != ASN_BIT_STRING)
    6a3c:	69bb      	ldr	r3, [r7, #24]
    6a3e:	1c5a      	adds	r2, r3, #1
    6a40:	61ba      	str	r2, [r7, #24]
    6a42:	68fa      	ldr	r2, [r7, #12]
    6a44:	18d3      	adds	r3, r2, r3
    6a46:	781b      	ldrb	r3, [r3, #0]
    6a48:	2b03      	cmp	r3, #3
    6a4a:	d002      	beq.n	6a52 <CheckBitString+0x3a>
        return ASN_BITSTR_E;
    6a4c:	2393      	movs	r3, #147	; 0x93
    6a4e:	425b      	negs	r3, r3
    6a50:	e066      	b.n	6b20 <CheckBitString+0x108>

    if (GetLength(input, &idx, &length, maxIdx) < 0)
    6a52:	683b      	ldr	r3, [r7, #0]
    6a54:	2214      	movs	r2, #20
    6a56:	18ba      	adds	r2, r7, r2
    6a58:	2118      	movs	r1, #24
    6a5a:	1879      	adds	r1, r7, r1
    6a5c:	68f8      	ldr	r0, [r7, #12]
    6a5e:	f7ff fdab 	bl	65b8 <GetLength>
    6a62:	1e03      	subs	r3, r0, #0
    6a64:	da02      	bge.n	6a6c <CheckBitString+0x54>
        return ASN_PARSE_E;
    6a66:	238c      	movs	r3, #140	; 0x8c
    6a68:	425b      	negs	r3, r3
    6a6a:	e059      	b.n	6b20 <CheckBitString+0x108>

    /* extra sanity check that length is greater than 0 */
    if (length <= 0) {
    6a6c:	697b      	ldr	r3, [r7, #20]
    6a6e:	2b00      	cmp	r3, #0
    6a70:	dc02      	bgt.n	6a78 <CheckBitString+0x60>
        WOLFSSL_MSG("Error length was 0 in CheckBitString");
        return BUFFER_E;
    6a72:	2384      	movs	r3, #132	; 0x84
    6a74:	425b      	negs	r3, r3
    6a76:	e053      	b.n	6b20 <CheckBitString+0x108>
    }

    if (idx + 1 > maxIdx) {
    6a78:	69bb      	ldr	r3, [r7, #24]
    6a7a:	1c5a      	adds	r2, r3, #1
    6a7c:	683b      	ldr	r3, [r7, #0]
    6a7e:	429a      	cmp	r2, r3
    6a80:	d902      	bls.n	6a88 <CheckBitString+0x70>
        WOLFSSL_MSG("Attempted buffer read larger than input buffer");
        return BUFFER_E;
    6a82:	2384      	movs	r3, #132	; 0x84
    6a84:	425b      	negs	r3, r3
    6a86:	e04b      	b.n	6b20 <CheckBitString+0x108>
    }

    b = input[idx];
    6a88:	69bb      	ldr	r3, [r7, #24]
    6a8a:	68fa      	ldr	r2, [r7, #12]
    6a8c:	18d2      	adds	r2, r2, r3
    6a8e:	231f      	movs	r3, #31
    6a90:	18fb      	adds	r3, r7, r3
    6a92:	7812      	ldrb	r2, [r2, #0]
    6a94:	701a      	strb	r2, [r3, #0]
    if (zeroBits && b != 0x00)
    6a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6a98:	2b00      	cmp	r3, #0
    6a9a:	d007      	beq.n	6aac <CheckBitString+0x94>
    6a9c:	231f      	movs	r3, #31
    6a9e:	18fb      	adds	r3, r7, r3
    6aa0:	781b      	ldrb	r3, [r3, #0]
    6aa2:	2b00      	cmp	r3, #0
    6aa4:	d002      	beq.n	6aac <CheckBitString+0x94>
        return ASN_EXPECT_0_E;
    6aa6:	2392      	movs	r3, #146	; 0x92
    6aa8:	425b      	negs	r3, r3
    6aaa:	e039      	b.n	6b20 <CheckBitString+0x108>
    if (b >= 0x08)
    6aac:	231f      	movs	r3, #31
    6aae:	18fb      	adds	r3, r7, r3
    6ab0:	781b      	ldrb	r3, [r3, #0]
    6ab2:	2b07      	cmp	r3, #7
    6ab4:	d902      	bls.n	6abc <CheckBitString+0xa4>
        return ASN_PARSE_E;
    6ab6:	238c      	movs	r3, #140	; 0x8c
    6ab8:	425b      	negs	r3, r3
    6aba:	e031      	b.n	6b20 <CheckBitString+0x108>
    if (b != 0) {
    6abc:	231f      	movs	r3, #31
    6abe:	18fb      	adds	r3, r7, r3
    6ac0:	781b      	ldrb	r3, [r3, #0]
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	d014      	beq.n	6af0 <CheckBitString+0xd8>
        if ((byte)(input[idx + length - 1] << (8 - b)) != 0)
    6ac6:	69bb      	ldr	r3, [r7, #24]
    6ac8:	697a      	ldr	r2, [r7, #20]
    6aca:	189b      	adds	r3, r3, r2
    6acc:	3b01      	subs	r3, #1
    6ace:	68fa      	ldr	r2, [r7, #12]
    6ad0:	18d3      	adds	r3, r2, r3
    6ad2:	781b      	ldrb	r3, [r3, #0]
    6ad4:	0019      	movs	r1, r3
    6ad6:	231f      	movs	r3, #31
    6ad8:	18fb      	adds	r3, r7, r3
    6ada:	781b      	ldrb	r3, [r3, #0]
    6adc:	2208      	movs	r2, #8
    6ade:	1ad3      	subs	r3, r2, r3
    6ae0:	4099      	lsls	r1, r3
    6ae2:	000b      	movs	r3, r1
    6ae4:	b2db      	uxtb	r3, r3
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	d002      	beq.n	6af0 <CheckBitString+0xd8>
            return ASN_PARSE_E;
    6aea:	238c      	movs	r3, #140	; 0x8c
    6aec:	425b      	negs	r3, r3
    6aee:	e017      	b.n	6b20 <CheckBitString+0x108>
    }
    idx++;
    6af0:	69bb      	ldr	r3, [r7, #24]
    6af2:	3301      	adds	r3, #1
    6af4:	61bb      	str	r3, [r7, #24]
    length--; /* length has been checked for greater than 0 */
    6af6:	697b      	ldr	r3, [r7, #20]
    6af8:	3b01      	subs	r3, #1
    6afa:	617b      	str	r3, [r7, #20]

    *inOutIdx = idx;
    6afc:	69ba      	ldr	r2, [r7, #24]
    6afe:	68bb      	ldr	r3, [r7, #8]
    6b00:	601a      	str	r2, [r3, #0]
    if (len != NULL)
    6b02:	687b      	ldr	r3, [r7, #4]
    6b04:	2b00      	cmp	r3, #0
    6b06:	d002      	beq.n	6b0e <CheckBitString+0xf6>
        *len = length;
    6b08:	697a      	ldr	r2, [r7, #20]
    6b0a:	687b      	ldr	r3, [r7, #4]
    6b0c:	601a      	str	r2, [r3, #0]
    if (unusedBits != NULL)
    6b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b10:	2b00      	cmp	r3, #0
    6b12:	d004      	beq.n	6b1e <CheckBitString+0x106>
        *unusedBits = b;
    6b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b16:	221f      	movs	r2, #31
    6b18:	18ba      	adds	r2, r7, r2
    6b1a:	7812      	ldrb	r2, [r2, #0]
    6b1c:	701a      	strb	r2, [r3, #0]

    return 0;
    6b1e:	2300      	movs	r3, #0
}
    6b20:	0018      	movs	r0, r3
    6b22:	46bd      	mov	sp, r7
    6b24:	b008      	add	sp, #32
    6b26:	bd80      	pop	{r7, pc}

00006b28 <OidFromId>:
#endif


/* returns a pointer to the OID string on success and NULL on fail */
const byte* OidFromId(word32 id, word32 type, word32* oidSz)
{
    6b28:	b580      	push	{r7, lr}
    6b2a:	b086      	sub	sp, #24
    6b2c:	af00      	add	r7, sp, #0
    6b2e:	60f8      	str	r0, [r7, #12]
    6b30:	60b9      	str	r1, [r7, #8]
    6b32:	607a      	str	r2, [r7, #4]
    const byte* oid = NULL;
    6b34:	2300      	movs	r3, #0
    6b36:	617b      	str	r3, [r7, #20]

    *oidSz = 0;
    6b38:	687b      	ldr	r3, [r7, #4]
    6b3a:	2200      	movs	r2, #0
    6b3c:	601a      	str	r2, [r3, #0]

    switch (type) {
    6b3e:	68bb      	ldr	r3, [r7, #8]
    6b40:	2b0f      	cmp	r3, #15
    6b42:	d900      	bls.n	6b46 <OidFromId+0x1e>
    6b44:	e179      	b.n	6e3a <OidFromId+0x312>
    6b46:	68bb      	ldr	r3, [r7, #8]
    6b48:	009a      	lsls	r2, r3, #2
    6b4a:	4bbe      	ldr	r3, [pc, #760]	; (6e44 <OidFromId+0x31c>)
    6b4c:	18d3      	adds	r3, r2, r3
    6b4e:	681b      	ldr	r3, [r3, #0]
    6b50:	469f      	mov	pc, r3

        case oidHashType:
            switch (id) {
    6b52:	68fb      	ldr	r3, [r7, #12]
    6b54:	2b58      	cmp	r3, #88	; 0x58
    6b56:	d004      	beq.n	6b62 <OidFromId+0x3a>
    6b58:	22cf      	movs	r2, #207	; 0xcf
    6b5a:	0052      	lsls	r2, r2, #1
    6b5c:	4293      	cmp	r3, r2
    6b5e:	d006      	beq.n	6b6e <OidFromId+0x46>
                    oid = hashSha512hOid;
                    *oidSz = sizeof(hashSha512hOid);
                    break;
            #endif
            }
            break;
    6b60:	e1cb      	b.n	6efa <OidFromId+0x3d2>
                    *oidSz = sizeof(hashMd5hOid);
                    break;
            #endif
            #ifndef NO_SHA
                case SHAh:
                    oid = hashSha1hOid;
    6b62:	4bb9      	ldr	r3, [pc, #740]	; (6e48 <OidFromId+0x320>)
    6b64:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(hashSha1hOid);
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	2205      	movs	r2, #5
    6b6a:	601a      	str	r2, [r3, #0]
                    break;
    6b6c:	e005      	b.n	6b7a <OidFromId+0x52>
                    *oidSz = sizeof(hashSha224hOid);
                    break;
            #endif
            #ifndef NO_SHA256
                case SHA256h:
                    oid = hashSha256hOid;
    6b6e:	4bb7      	ldr	r3, [pc, #732]	; (6e4c <OidFromId+0x324>)
    6b70:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(hashSha256hOid);
    6b72:	687b      	ldr	r3, [r7, #4]
    6b74:	2209      	movs	r2, #9
    6b76:	601a      	str	r2, [r3, #0]
                    break;
    6b78:	46c0      	nop			; (mov r8, r8)
                    oid = hashSha512hOid;
                    *oidSz = sizeof(hashSha512hOid);
                    break;
            #endif
            }
            break;
    6b7a:	e1be      	b.n	6efa <OidFromId+0x3d2>

        case oidSigType:
            switch (id) {
    6b7c:	68fb      	ldr	r3, [r7, #12]
    6b7e:	2282      	movs	r2, #130	; 0x82
    6b80:	0092      	lsls	r2, r2, #2
    6b82:	4293      	cmp	r3, r2
    6b84:	d004      	beq.n	6b90 <OidFromId+0x68>
    6b86:	2283      	movs	r2, #131	; 0x83
    6b88:	0092      	lsls	r2, r2, #2
    6b8a:	4293      	cmp	r3, r2
    6b8c:	d006      	beq.n	6b9c <OidFromId+0x74>
                    oid = sigEd25519Oid;
                    *oidSz = sizeof(sigEd25519Oid);
                    break;
                #endif
                default:
                    break;
    6b8e:	e00b      	b.n	6ba8 <OidFromId+0x80>
                #endif /* WOLFSSL_SHA512 */
                #endif /* NO_RSA */
                #ifdef HAVE_ECC
                #ifndef NO_SHA
                case CTC_SHAwECDSA:
                    oid = sigSha1wEcdsaOid;
    6b90:	4baf      	ldr	r3, [pc, #700]	; (6e50 <OidFromId+0x328>)
    6b92:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(sigSha1wEcdsaOid);
    6b94:	687b      	ldr	r3, [r7, #4]
    6b96:	2207      	movs	r2, #7
    6b98:	601a      	str	r2, [r3, #0]
                    break;
    6b9a:	e005      	b.n	6ba8 <OidFromId+0x80>
                    *oidSz = sizeof(sigSha224wEcdsaOid);
                    break;
                #endif
                #ifndef NO_SHA256
                case CTC_SHA256wECDSA:
                    oid = sigSha256wEcdsaOid;
    6b9c:	4bad      	ldr	r3, [pc, #692]	; (6e54 <OidFromId+0x32c>)
    6b9e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(sigSha256wEcdsaOid);
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	2208      	movs	r2, #8
    6ba4:	601a      	str	r2, [r3, #0]
                    break;
    6ba6:	46c0      	nop			; (mov r8, r8)
                    break;
                #endif
                default:
                    break;
            }
            break;
    6ba8:	e1a7      	b.n	6efa <OidFromId+0x3d2>

        case oidKeyType:
            switch (id) {
    6baa:	68fb      	ldr	r3, [r7, #12]
    6bac:	4aaa      	ldr	r2, [pc, #680]	; (6e58 <OidFromId+0x330>)
    6bae:	4293      	cmp	r3, r2
    6bb0:	d000      	beq.n	6bb4 <OidFromId+0x8c>
                    oid = keyEd25519Oid;
                    *oidSz = sizeof(keyEd25519Oid);
                    break;
                #endif /* HAVE_ED25519 */
                default:
                    break;
    6bb2:	e005      	b.n	6bc0 <OidFromId+0x98>
                    *oidSz = sizeof(keyNtruOid);
                    break;
                #endif /* HAVE_NTRU */
                #ifdef HAVE_ECC
                case ECDSAk:
                    oid = keyEcdsaOid;
    6bb4:	4ba9      	ldr	r3, [pc, #676]	; (6e5c <OidFromId+0x334>)
    6bb6:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(keyEcdsaOid);
    6bb8:	687b      	ldr	r3, [r7, #4]
    6bba:	2207      	movs	r2, #7
    6bbc:	601a      	str	r2, [r3, #0]
                    break;
    6bbe:	46c0      	nop			; (mov r8, r8)
                    break;
                #endif /* HAVE_ED25519 */
                default:
                    break;
            }
            break;
    6bc0:	e19b      	b.n	6efa <OidFromId+0x3d2>

        #ifdef HAVE_ECC
        case oidCurveType:
            if (wc_ecc_get_oid(id, &oid, oidSz) < 0) {
    6bc2:	687a      	ldr	r2, [r7, #4]
    6bc4:	2314      	movs	r3, #20
    6bc6:	18f9      	adds	r1, r7, r3
    6bc8:	68fb      	ldr	r3, [r7, #12]
    6bca:	0018      	movs	r0, r3
    6bcc:	f008 fbc8 	bl	f360 <wc_ecc_get_oid>
                WOLFSSL_MSG("ECC OID not found");
            }
            break;
    6bd0:	e193      	b.n	6efa <OidFromId+0x3d2>
        #endif /* HAVE_ECC */

        case oidBlkType:
            switch (id) {
    6bd2:	68fb      	ldr	r3, [r7, #12]
    6bd4:	3b9f      	subs	r3, #159	; 0x9f
    6bd6:	3bff      	subs	r3, #255	; 0xff
    6bd8:	2b2c      	cmp	r3, #44	; 0x2c
    6bda:	d900      	bls.n	6bde <OidFromId+0xb6>
    6bdc:	e12f      	b.n	6e3e <OidFromId+0x316>
    6bde:	009a      	lsls	r2, r3, #2
    6be0:	4b9f      	ldr	r3, [pc, #636]	; (6e60 <OidFromId+0x338>)
    6be2:	18d3      	adds	r3, r2, r3
    6be4:	681b      	ldr	r3, [r3, #0]
    6be6:	469f      	mov	pc, r3
    #ifdef HAVE_AES_CBC
        #ifdef WOLFSSL_AES_128
                case AES128CBCb:
                    oid = blkAes128CbcOid;
    6be8:	4b9e      	ldr	r3, [pc, #632]	; (6e64 <OidFromId+0x33c>)
    6bea:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes128CbcOid);
    6bec:	687b      	ldr	r3, [r7, #4]
    6bee:	2209      	movs	r2, #9
    6bf0:	601a      	str	r2, [r3, #0]
                    break;
    6bf2:	e01d      	b.n	6c30 <OidFromId+0x108>
        #endif
        #ifdef WOLFSSL_AES_192
                case AES192CBCb:
                    oid = blkAes192CbcOid;
    6bf4:	4b9c      	ldr	r3, [pc, #624]	; (6e68 <OidFromId+0x340>)
    6bf6:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes192CbcOid);
    6bf8:	687b      	ldr	r3, [r7, #4]
    6bfa:	2209      	movs	r2, #9
    6bfc:	601a      	str	r2, [r3, #0]
                    break;
    6bfe:	e017      	b.n	6c30 <OidFromId+0x108>
        #endif
        #ifdef WOLFSSL_AES_256
                case AES256CBCb:
                    oid = blkAes256CbcOid;
    6c00:	4b9a      	ldr	r3, [pc, #616]	; (6e6c <OidFromId+0x344>)
    6c02:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes256CbcOid);
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	2209      	movs	r2, #9
    6c08:	601a      	str	r2, [r3, #0]
                    break;
    6c0a:	e011      	b.n	6c30 <OidFromId+0x108>
        #endif
    #endif /* HAVE_AES_CBC */
    #ifdef HAVE_AESGCM
        #ifdef WOLFSSL_AES_128
                case AES128GCMb:
                    oid = blkAes128GcmOid;
    6c0c:	4b98      	ldr	r3, [pc, #608]	; (6e70 <OidFromId+0x348>)
    6c0e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes128GcmOid);
    6c10:	687b      	ldr	r3, [r7, #4]
    6c12:	2209      	movs	r2, #9
    6c14:	601a      	str	r2, [r3, #0]
                    break;
    6c16:	e00b      	b.n	6c30 <OidFromId+0x108>
        #endif
        #ifdef WOLFSSL_AES_192
                case AES192GCMb:
                    oid = blkAes192GcmOid;
    6c18:	4b96      	ldr	r3, [pc, #600]	; (6e74 <OidFromId+0x34c>)
    6c1a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes192GcmOid);
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	2209      	movs	r2, #9
    6c20:	601a      	str	r2, [r3, #0]
                    break;
    6c22:	e005      	b.n	6c30 <OidFromId+0x108>
        #endif
        #ifdef WOLFSSL_AES_256
                case AES256GCMb:
                    oid = blkAes256GcmOid;
    6c24:	4b94      	ldr	r3, [pc, #592]	; (6e78 <OidFromId+0x350>)
    6c26:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes256GcmOid);
    6c28:	687b      	ldr	r3, [r7, #4]
    6c2a:	2209      	movs	r2, #9
    6c2c:	601a      	str	r2, [r3, #0]
                    break;
    6c2e:	46c0      	nop			; (mov r8, r8)
                    oid = blkDes3CbcOid;
                    *oidSz = sizeof(blkDes3CbcOid);
                    break;
    #endif /* !NO_DES3 */
            }
            break;
    6c30:	e105      	b.n	6e3e <OidFromId+0x316>
            }
            break;
        #endif /* HAVE_OCSP */

        case oidCertExtType:
            switch (id) {
    6c32:	68fb      	ldr	r3, [r7, #12]
    6c34:	3b45      	subs	r3, #69	; 0x45
    6c36:	2b63      	cmp	r3, #99	; 0x63
    6c38:	d900      	bls.n	6c3c <OidFromId+0x114>
    6c3a:	e15d      	b.n	6ef8 <OidFromId+0x3d0>
    6c3c:	009a      	lsls	r2, r3, #2
    6c3e:	4b8f      	ldr	r3, [pc, #572]	; (6e7c <OidFromId+0x354>)
    6c40:	18d3      	adds	r3, r2, r3
    6c42:	681b      	ldr	r3, [r3, #0]
    6c44:	469f      	mov	pc, r3
                case BASIC_CA_OID:
                    oid = extBasicCaOid;
    6c46:	4b8e      	ldr	r3, [pc, #568]	; (6e80 <OidFromId+0x358>)
    6c48:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extBasicCaOid);
    6c4a:	687b      	ldr	r3, [r7, #4]
    6c4c:	2203      	movs	r2, #3
    6c4e:	601a      	str	r2, [r3, #0]
                    break;
    6c50:	e03b      	b.n	6cca <OidFromId+0x1a2>
                case ALT_NAMES_OID:
                    oid = extAltNamesOid;
    6c52:	4b8c      	ldr	r3, [pc, #560]	; (6e84 <OidFromId+0x35c>)
    6c54:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAltNamesOid);
    6c56:	687b      	ldr	r3, [r7, #4]
    6c58:	2203      	movs	r2, #3
    6c5a:	601a      	str	r2, [r3, #0]
                    break;
    6c5c:	e035      	b.n	6cca <OidFromId+0x1a2>
                case CRL_DIST_OID:
                    oid = extCrlDistOid;
    6c5e:	4b8a      	ldr	r3, [pc, #552]	; (6e88 <OidFromId+0x360>)
    6c60:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCrlDistOid);
    6c62:	687b      	ldr	r3, [r7, #4]
    6c64:	2203      	movs	r2, #3
    6c66:	601a      	str	r2, [r3, #0]
                    break;
    6c68:	e02f      	b.n	6cca <OidFromId+0x1a2>
                case AUTH_INFO_OID:
                    oid = extAuthInfoOid;
    6c6a:	4b88      	ldr	r3, [pc, #544]	; (6e8c <OidFromId+0x364>)
    6c6c:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthInfoOid);
    6c6e:	687b      	ldr	r3, [r7, #4]
    6c70:	2208      	movs	r2, #8
    6c72:	601a      	str	r2, [r3, #0]
                    break;
    6c74:	e029      	b.n	6cca <OidFromId+0x1a2>
                case AUTH_KEY_OID:
                    oid = extAuthKeyOid;
    6c76:	4b86      	ldr	r3, [pc, #536]	; (6e90 <OidFromId+0x368>)
    6c78:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthKeyOid);
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	2203      	movs	r2, #3
    6c7e:	601a      	str	r2, [r3, #0]
                    break;
    6c80:	e023      	b.n	6cca <OidFromId+0x1a2>
                case SUBJ_KEY_OID:
                    oid = extSubjKeyOid;
    6c82:	4b84      	ldr	r3, [pc, #528]	; (6e94 <OidFromId+0x36c>)
    6c84:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extSubjKeyOid);
    6c86:	687b      	ldr	r3, [r7, #4]
    6c88:	2203      	movs	r2, #3
    6c8a:	601a      	str	r2, [r3, #0]
                    break;
    6c8c:	e01d      	b.n	6cca <OidFromId+0x1a2>
                case CERT_POLICY_OID:
                    oid = extCertPolicyOid;
    6c8e:	4b82      	ldr	r3, [pc, #520]	; (6e98 <OidFromId+0x370>)
    6c90:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCertPolicyOid);
    6c92:	687b      	ldr	r3, [r7, #4]
    6c94:	2203      	movs	r2, #3
    6c96:	601a      	str	r2, [r3, #0]
                    break;
    6c98:	e017      	b.n	6cca <OidFromId+0x1a2>
                case KEY_USAGE_OID:
                    oid = extKeyUsageOid;
    6c9a:	4b80      	ldr	r3, [pc, #512]	; (6e9c <OidFromId+0x374>)
    6c9c:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extKeyUsageOid);
    6c9e:	687b      	ldr	r3, [r7, #4]
    6ca0:	2203      	movs	r2, #3
    6ca2:	601a      	str	r2, [r3, #0]
                    break;
    6ca4:	e011      	b.n	6cca <OidFromId+0x1a2>
                case INHIBIT_ANY_OID:
                    oid = extInhibitAnyOid;
    6ca6:	4b7e      	ldr	r3, [pc, #504]	; (6ea0 <OidFromId+0x378>)
    6ca8:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extInhibitAnyOid);
    6caa:	687b      	ldr	r3, [r7, #4]
    6cac:	2203      	movs	r2, #3
    6cae:	601a      	str	r2, [r3, #0]
                    break;
    6cb0:	e00b      	b.n	6cca <OidFromId+0x1a2>
                case EXT_KEY_USAGE_OID:
                    oid = extExtKeyUsageOid;
    6cb2:	4b7c      	ldr	r3, [pc, #496]	; (6ea4 <OidFromId+0x37c>)
    6cb4:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageOid);
    6cb6:	687b      	ldr	r3, [r7, #4]
    6cb8:	2203      	movs	r2, #3
    6cba:	601a      	str	r2, [r3, #0]
                    break;
    6cbc:	e005      	b.n	6cca <OidFromId+0x1a2>
            #ifndef IGNORE_NAME_CONSTRAINTS
                case NAME_CONS_OID:
                    oid = extNameConsOid;
    6cbe:	4b7a      	ldr	r3, [pc, #488]	; (6ea8 <OidFromId+0x380>)
    6cc0:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extNameConsOid);
    6cc2:	687b      	ldr	r3, [r7, #4]
    6cc4:	2203      	movs	r2, #3
    6cc6:	601a      	str	r2, [r3, #0]
                    break;
    6cc8:	46c0      	nop			; (mov r8, r8)
            #endif
            }
            break;
    6cca:	e115      	b.n	6ef8 <OidFromId+0x3d0>

        case oidCertAuthInfoType:
            switch (id) {
    6ccc:	68fb      	ldr	r3, [r7, #12]
    6cce:	2b75      	cmp	r3, #117	; 0x75
    6cd0:	d000      	beq.n	6cd4 <OidFromId+0x1ac>
                case AIA_CA_ISSUER_OID:
                    oid = extAuthInfoCaIssuerOid;
                    *oidSz = sizeof(extAuthInfoCaIssuerOid);
                    break;
            }
            break;
    6cd2:	e112      	b.n	6efa <OidFromId+0x3d2>
                    oid = extAuthInfoOcspOid;
                    *oidSz = sizeof(extAuthInfoOcspOid);
                    break;
            #endif
                case AIA_CA_ISSUER_OID:
                    oid = extAuthInfoCaIssuerOid;
    6cd4:	4b75      	ldr	r3, [pc, #468]	; (6eac <OidFromId+0x384>)
    6cd6:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthInfoCaIssuerOid);
    6cd8:	687b      	ldr	r3, [r7, #4]
    6cda:	2208      	movs	r2, #8
    6cdc:	601a      	str	r2, [r3, #0]
                    break;
    6cde:	46c0      	nop			; (mov r8, r8)
            }
            break;
    6ce0:	e10b      	b.n	6efa <OidFromId+0x3d2>

        case oidCertPolicyType:
            switch (id) {
    6ce2:	68fb      	ldr	r3, [r7, #12]
    6ce4:	2b92      	cmp	r3, #146	; 0x92
    6ce6:	d000      	beq.n	6cea <OidFromId+0x1c2>
                case CP_ANY_OID:
                    oid = extCertPolicyAnyOid;
                    *oidSz = sizeof(extCertPolicyAnyOid);
                    break;
            }
            break;
    6ce8:	e107      	b.n	6efa <OidFromId+0x3d2>
            break;

        case oidCertPolicyType:
            switch (id) {
                case CP_ANY_OID:
                    oid = extCertPolicyAnyOid;
    6cea:	4b71      	ldr	r3, [pc, #452]	; (6eb0 <OidFromId+0x388>)
    6cec:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCertPolicyAnyOid);
    6cee:	687b      	ldr	r3, [r7, #4]
    6cf0:	2204      	movs	r2, #4
    6cf2:	601a      	str	r2, [r3, #0]
                    break;
    6cf4:	46c0      	nop			; (mov r8, r8)
            }
            break;
    6cf6:	e100      	b.n	6efa <OidFromId+0x3d2>

        case oidCertAltNameType:
            switch (id) {
    6cf8:	68fb      	ldr	r3, [r7, #12]
    6cfa:	2b4f      	cmp	r3, #79	; 0x4f
    6cfc:	d000      	beq.n	6d00 <OidFromId+0x1d8>
                case HW_NAME_OID:
                    oid = extAltNamesHwNameOid;
                    *oidSz = sizeof(extAltNamesHwNameOid);
                    break;
            }
            break;
    6cfe:	e0fc      	b.n	6efa <OidFromId+0x3d2>
            break;

        case oidCertAltNameType:
            switch (id) {
                case HW_NAME_OID:
                    oid = extAltNamesHwNameOid;
    6d00:	4b6c      	ldr	r3, [pc, #432]	; (6eb4 <OidFromId+0x38c>)
    6d02:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAltNamesHwNameOid);
    6d04:	687b      	ldr	r3, [r7, #4]
    6d06:	2208      	movs	r2, #8
    6d08:	601a      	str	r2, [r3, #0]
                    break;
    6d0a:	46c0      	nop			; (mov r8, r8)
            }
            break;
    6d0c:	e0f5      	b.n	6efa <OidFromId+0x3d2>

        case oidCertKeyUseType:
            switch (id) {
    6d0e:	68fb      	ldr	r3, [r7, #12]
    6d10:	2b4a      	cmp	r3, #74	; 0x4a
    6d12:	d025      	beq.n	6d60 <OidFromId+0x238>
    6d14:	d805      	bhi.n	6d22 <OidFromId+0x1fa>
    6d16:	2b48      	cmp	r3, #72	; 0x48
    6d18:	d016      	beq.n	6d48 <OidFromId+0x220>
    6d1a:	d81b      	bhi.n	6d54 <OidFromId+0x22c>
    6d1c:	2b47      	cmp	r3, #71	; 0x47
    6d1e:	d00d      	beq.n	6d3c <OidFromId+0x214>
                case EKU_OCSP_SIGN_OID:
                    oid = extExtKeyUsageOcspSignOid;
                    *oidSz = sizeof(extExtKeyUsageOcspSignOid);
                    break;
            }
            break;
    6d20:	e0eb      	b.n	6efa <OidFromId+0x3d2>
                    break;
            }
            break;

        case oidCertKeyUseType:
            switch (id) {
    6d22:	2b4f      	cmp	r3, #79	; 0x4f
    6d24:	d028      	beq.n	6d78 <OidFromId+0x250>
    6d26:	2b97      	cmp	r3, #151	; 0x97
    6d28:	d002      	beq.n	6d30 <OidFromId+0x208>
    6d2a:	2b4e      	cmp	r3, #78	; 0x4e
    6d2c:	d01e      	beq.n	6d6c <OidFromId+0x244>
                case EKU_OCSP_SIGN_OID:
                    oid = extExtKeyUsageOcspSignOid;
                    *oidSz = sizeof(extExtKeyUsageOcspSignOid);
                    break;
            }
            break;
    6d2e:	e0e4      	b.n	6efa <OidFromId+0x3d2>
            break;

        case oidCertKeyUseType:
            switch (id) {
                case EKU_ANY_OID:
                    oid = extExtKeyUsageAnyOid;
    6d30:	4b61      	ldr	r3, [pc, #388]	; (6eb8 <OidFromId+0x390>)
    6d32:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageAnyOid);
    6d34:	687b      	ldr	r3, [r7, #4]
    6d36:	2204      	movs	r2, #4
    6d38:	601a      	str	r2, [r3, #0]
                    break;
    6d3a:	e023      	b.n	6d84 <OidFromId+0x25c>
                case EKU_SERVER_AUTH_OID:
                    oid = extExtKeyUsageServerAuthOid;
    6d3c:	4b5f      	ldr	r3, [pc, #380]	; (6ebc <OidFromId+0x394>)
    6d3e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageServerAuthOid);
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	2208      	movs	r2, #8
    6d44:	601a      	str	r2, [r3, #0]
                    break;
    6d46:	e01d      	b.n	6d84 <OidFromId+0x25c>
                case EKU_CLIENT_AUTH_OID:
                    oid = extExtKeyUsageClientAuthOid;
    6d48:	4b5d      	ldr	r3, [pc, #372]	; (6ec0 <OidFromId+0x398>)
    6d4a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageClientAuthOid);
    6d4c:	687b      	ldr	r3, [r7, #4]
    6d4e:	2208      	movs	r2, #8
    6d50:	601a      	str	r2, [r3, #0]
                    break;
    6d52:	e017      	b.n	6d84 <OidFromId+0x25c>
                case EKU_CODESIGNING_OID:
                    oid = extExtKeyUsageCodeSigningOid;
    6d54:	4b5b      	ldr	r3, [pc, #364]	; (6ec4 <OidFromId+0x39c>)
    6d56:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageCodeSigningOid);
    6d58:	687b      	ldr	r3, [r7, #4]
    6d5a:	2208      	movs	r2, #8
    6d5c:	601a      	str	r2, [r3, #0]
                    break;
    6d5e:	e011      	b.n	6d84 <OidFromId+0x25c>
                case EKU_EMAILPROTECT_OID:
                    oid = extExtKeyUsageEmailProtectOid;
    6d60:	4b59      	ldr	r3, [pc, #356]	; (6ec8 <OidFromId+0x3a0>)
    6d62:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageEmailProtectOid);
    6d64:	687b      	ldr	r3, [r7, #4]
    6d66:	2208      	movs	r2, #8
    6d68:	601a      	str	r2, [r3, #0]
                    break;
    6d6a:	e00b      	b.n	6d84 <OidFromId+0x25c>
                case EKU_TIMESTAMP_OID:
                    oid = extExtKeyUsageTimestampOid;
    6d6c:	4b57      	ldr	r3, [pc, #348]	; (6ecc <OidFromId+0x3a4>)
    6d6e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageTimestampOid);
    6d70:	687b      	ldr	r3, [r7, #4]
    6d72:	2208      	movs	r2, #8
    6d74:	601a      	str	r2, [r3, #0]
                    break;
    6d76:	e005      	b.n	6d84 <OidFromId+0x25c>
                case EKU_OCSP_SIGN_OID:
                    oid = extExtKeyUsageOcspSignOid;
    6d78:	4b55      	ldr	r3, [pc, #340]	; (6ed0 <OidFromId+0x3a8>)
    6d7a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageOcspSignOid);
    6d7c:	687b      	ldr	r3, [r7, #4]
    6d7e:	2208      	movs	r2, #8
    6d80:	601a      	str	r2, [r3, #0]
                    break;
    6d82:	46c0      	nop			; (mov r8, r8)
            }
            break;
    6d84:	e0b9      	b.n	6efa <OidFromId+0x3d2>

        case oidKdfType:
            switch (id) {
    6d86:	68fa      	ldr	r2, [r7, #12]
    6d88:	23a5      	movs	r3, #165	; 0xa5
    6d8a:	009b      	lsls	r3, r3, #2
    6d8c:	429a      	cmp	r2, r3
    6d8e:	d000      	beq.n	6d92 <OidFromId+0x26a>
                case PBKDF2_OID:
                    oid = pbkdf2Oid;
                    *oidSz = sizeof(pbkdf2Oid);
                    break;
            }
            break;
    6d90:	e0b3      	b.n	6efa <OidFromId+0x3d2>
            break;

        case oidKdfType:
            switch (id) {
                case PBKDF2_OID:
                    oid = pbkdf2Oid;
    6d92:	4b50      	ldr	r3, [pc, #320]	; (6ed4 <OidFromId+0x3ac>)
    6d94:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(pbkdf2Oid);
    6d96:	687b      	ldr	r3, [r7, #4]
    6d98:	2209      	movs	r2, #9
    6d9a:	601a      	str	r2, [r3, #0]
                    break;
    6d9c:	46c0      	nop			; (mov r8, r8)
            }
            break;
    6d9e:	e0ac      	b.n	6efa <OidFromId+0x3d2>

        case oidPBEType:
            switch (id) {
    6da0:	68fb      	ldr	r3, [r7, #12]
    6da2:	2b0d      	cmp	r3, #13
    6da4:	d000      	beq.n	6da8 <OidFromId+0x280>
                case PBES2:
                    oid = pbes2;
                    *oidSz = sizeof(pbes2);
                    break;
            }
            break;
    6da6:	e0a8      	b.n	6efa <OidFromId+0x3d2>
                    oid = pbeSha1Des3;
                    *oidSz = sizeof(pbeSha1Des3);
                    break;
        #endif
                case PBES2:
                    oid = pbes2;
    6da8:	4b4b      	ldr	r3, [pc, #300]	; (6ed8 <OidFromId+0x3b0>)
    6daa:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(pbes2);
    6dac:	687b      	ldr	r3, [r7, #4]
    6dae:	2209      	movs	r2, #9
    6db0:	601a      	str	r2, [r3, #0]
                    break;
    6db2:	46c0      	nop			; (mov r8, r8)
            }
            break;
    6db4:	e0a1      	b.n	6efa <OidFromId+0x3d2>

        case oidKeyWrapType:
            switch (id) {
    6db6:	68fb      	ldr	r3, [r7, #12]
    6db8:	22b6      	movs	r2, #182	; 0xb6
    6dba:	32ff      	adds	r2, #255	; 0xff
    6dbc:	4293      	cmp	r3, r2
    6dbe:	d00e      	beq.n	6dde <OidFromId+0x2b6>
    6dc0:	22ca      	movs	r2, #202	; 0xca
    6dc2:	32ff      	adds	r2, #255	; 0xff
    6dc4:	4293      	cmp	r3, r2
    6dc6:	d010      	beq.n	6dea <OidFromId+0x2c2>
    6dc8:	22a2      	movs	r2, #162	; 0xa2
    6dca:	32ff      	adds	r2, #255	; 0xff
    6dcc:	4293      	cmp	r3, r2
    6dce:	d000      	beq.n	6dd2 <OidFromId+0x2aa>
                    oid = wrapPwriKekOid;
                    *oidSz = sizeof(wrapPwriKekOid);
                    break;
            #endif
            }
            break;
    6dd0:	e093      	b.n	6efa <OidFromId+0x3d2>

        case oidKeyWrapType:
            switch (id) {
            #ifdef WOLFSSL_AES_128
                case AES128_WRAP:
                    oid = wrapAes128Oid;
    6dd2:	4b42      	ldr	r3, [pc, #264]	; (6edc <OidFromId+0x3b4>)
    6dd4:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes128Oid);
    6dd6:	687b      	ldr	r3, [r7, #4]
    6dd8:	2209      	movs	r2, #9
    6dda:	601a      	str	r2, [r3, #0]
                    break;
    6ddc:	e00b      	b.n	6df6 <OidFromId+0x2ce>
            #endif
            #ifdef WOLFSSL_AES_192
                case AES192_WRAP:
                    oid = wrapAes192Oid;
    6dde:	4b40      	ldr	r3, [pc, #256]	; (6ee0 <OidFromId+0x3b8>)
    6de0:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes192Oid);
    6de2:	687b      	ldr	r3, [r7, #4]
    6de4:	2209      	movs	r2, #9
    6de6:	601a      	str	r2, [r3, #0]
                    break;
    6de8:	e005      	b.n	6df6 <OidFromId+0x2ce>
            #endif
            #ifdef WOLFSSL_AES_256
                case AES256_WRAP:
                    oid = wrapAes256Oid;
    6dea:	4b3e      	ldr	r3, [pc, #248]	; (6ee4 <OidFromId+0x3bc>)
    6dec:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes256Oid);
    6dee:	687b      	ldr	r3, [r7, #4]
    6df0:	2209      	movs	r2, #9
    6df2:	601a      	str	r2, [r3, #0]
                    break;
    6df4:	46c0      	nop			; (mov r8, r8)
                    oid = wrapPwriKekOid;
                    *oidSz = sizeof(wrapPwriKekOid);
                    break;
            #endif
            }
            break;
    6df6:	e080      	b.n	6efa <OidFromId+0x3d2>

        case oidCmsKeyAgreeType:
            switch (id) {
    6df8:	68fb      	ldr	r3, [r7, #12]
    6dfa:	2bbd      	cmp	r3, #189	; 0xbd
    6dfc:	d00a      	beq.n	6e14 <OidFromId+0x2ec>
    6dfe:	22e8      	movs	r2, #232	; 0xe8
    6e00:	0052      	lsls	r2, r2, #1
    6e02:	4293      	cmp	r3, r2
    6e04:	d000      	beq.n	6e08 <OidFromId+0x2e0>
                    oid = dhSinglePass_stdDH_sha512kdf_Oid;
                    *oidSz = sizeof(dhSinglePass_stdDH_sha512kdf_Oid);
                    break;
            #endif
            }
            break;
    6e06:	e078      	b.n	6efa <OidFromId+0x3d2>

        case oidCmsKeyAgreeType:
            switch (id) {
            #ifndef NO_SHA
                case dhSinglePass_stdDH_sha1kdf_scheme:
                    oid = dhSinglePass_stdDH_sha1kdf_Oid;
    6e08:	4b37      	ldr	r3, [pc, #220]	; (6ee8 <OidFromId+0x3c0>)
    6e0a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(dhSinglePass_stdDH_sha1kdf_Oid);
    6e0c:	687b      	ldr	r3, [r7, #4]
    6e0e:	2209      	movs	r2, #9
    6e10:	601a      	str	r2, [r3, #0]
                    break;
    6e12:	e005      	b.n	6e20 <OidFromId+0x2f8>
                    *oidSz = sizeof(dhSinglePass_stdDH_sha224kdf_Oid);
                    break;
            #endif
            #ifndef NO_SHA256
                case dhSinglePass_stdDH_sha256kdf_scheme:
                    oid = dhSinglePass_stdDH_sha256kdf_Oid;
    6e14:	4b35      	ldr	r3, [pc, #212]	; (6eec <OidFromId+0x3c4>)
    6e16:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(dhSinglePass_stdDH_sha256kdf_Oid);
    6e18:	687b      	ldr	r3, [r7, #4]
    6e1a:	2206      	movs	r2, #6
    6e1c:	601a      	str	r2, [r3, #0]
                    break;
    6e1e:	46c0      	nop			; (mov r8, r8)
                    oid = dhSinglePass_stdDH_sha512kdf_Oid;
                    *oidSz = sizeof(dhSinglePass_stdDH_sha512kdf_Oid);
                    break;
            #endif
            }
            break;
    6e20:	e06b      	b.n	6efa <OidFromId+0x3d2>

#ifndef NO_HMAC
        case oidHmacType:
            switch (id) {
    6e22:	68fb      	ldr	r3, [r7, #12]
    6e24:	4a32      	ldr	r2, [pc, #200]	; (6ef0 <OidFromId+0x3c8>)
    6e26:	4293      	cmp	r3, r2
    6e28:	d000      	beq.n	6e2c <OidFromId+0x304>
                    oid = hmacSha512Oid;
                    *oidSz = sizeof(hmacSha512Oid);
                    break;
        #endif
            }
            break;
    6e2a:	e066      	b.n	6efa <OidFromId+0x3d2>
                    *oidSz = sizeof(hmacSha224Oid);
                    break;
        #endif
        #ifndef NO_SHA256
                case HMAC_SHA256_OID:
                    oid = hmacSha256Oid;
    6e2c:	4b31      	ldr	r3, [pc, #196]	; (6ef4 <OidFromId+0x3cc>)
    6e2e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(hmacSha256Oid);
    6e30:	687b      	ldr	r3, [r7, #4]
    6e32:	2208      	movs	r2, #8
    6e34:	601a      	str	r2, [r3, #0]
                    break;
    6e36:	46c0      	nop			; (mov r8, r8)
                    oid = hmacSha512Oid;
                    *oidSz = sizeof(hmacSha512Oid);
                    break;
        #endif
            }
            break;
    6e38:	e05f      	b.n	6efa <OidFromId+0x3d2>
            break;
#endif /* HAVE_LIBZ */

        case oidIgnoreType:
        default:
            break;
    6e3a:	46c0      	nop			; (mov r8, r8)
    6e3c:	e05d      	b.n	6efa <OidFromId+0x3d2>
                    oid = blkDes3CbcOid;
                    *oidSz = sizeof(blkDes3CbcOid);
                    break;
    #endif /* !NO_DES3 */
            }
            break;
    6e3e:	46c0      	nop			; (mov r8, r8)
    6e40:	e05b      	b.n	6efa <OidFromId+0x3d2>
    6e42:	46c0      	nop			; (mov r8, r8)
    6e44:	0002a0fc 	.word	0x0002a0fc
    6e48:	00029fb8 	.word	0x00029fb8
    6e4c:	00029fc0 	.word	0x00029fc0
    6e50:	00029fd4 	.word	0x00029fd4
    6e54:	00029fdc 	.word	0x00029fdc
    6e58:	00000206 	.word	0x00000206
    6e5c:	00029fe4 	.word	0x00029fe4
    6e60:	0002a13c 	.word	0x0002a13c
    6e64:	00029fec 	.word	0x00029fec
    6e68:	00029ff8 	.word	0x00029ff8
    6e6c:	0002a004 	.word	0x0002a004
    6e70:	0002a010 	.word	0x0002a010
    6e74:	0002a01c 	.word	0x0002a01c
    6e78:	0002a028 	.word	0x0002a028
    6e7c:	0002a1f0 	.word	0x0002a1f0
    6e80:	0002a06c 	.word	0x0002a06c
    6e84:	0002a070 	.word	0x0002a070
    6e88:	0002a074 	.word	0x0002a074
    6e8c:	0002a078 	.word	0x0002a078
    6e90:	0002a080 	.word	0x0002a080
    6e94:	0002a084 	.word	0x0002a084
    6e98:	0002a088 	.word	0x0002a088
    6e9c:	0002a08c 	.word	0x0002a08c
    6ea0:	0002a090 	.word	0x0002a090
    6ea4:	0002a094 	.word	0x0002a094
    6ea8:	0002a098 	.word	0x0002a098
    6eac:	0002a09c 	.word	0x0002a09c
    6eb0:	0002a0a4 	.word	0x0002a0a4
    6eb4:	0002a0a8 	.word	0x0002a0a8
    6eb8:	0002a0b0 	.word	0x0002a0b0
    6ebc:	0002a0b4 	.word	0x0002a0b4
    6ec0:	0002a0bc 	.word	0x0002a0bc
    6ec4:	0002a0c4 	.word	0x0002a0c4
    6ec8:	0002a0cc 	.word	0x0002a0cc
    6ecc:	0002a0d4 	.word	0x0002a0d4
    6ed0:	0002a0dc 	.word	0x0002a0dc
    6ed4:	0002a0e4 	.word	0x0002a0e4
    6ed8:	0002a0f0 	.word	0x0002a0f0
    6edc:	0002a034 	.word	0x0002a034
    6ee0:	0002a040 	.word	0x0002a040
    6ee4:	0002a04c 	.word	0x0002a04c
    6ee8:	0002a058 	.word	0x0002a058
    6eec:	0002a064 	.word	0x0002a064
    6ef0:	0000028d 	.word	0x0000028d
    6ef4:	00029fcc 	.word	0x00029fcc
                    oid = extNameConsOid;
                    *oidSz = sizeof(extNameConsOid);
                    break;
            #endif
            }
            break;
    6ef8:	46c0      	nop			; (mov r8, r8)
        case oidIgnoreType:
        default:
            break;
    }

    return oid;
    6efa:	697b      	ldr	r3, [r7, #20]
}
    6efc:	0018      	movs	r0, r3
    6efe:	46bd      	mov	sp, r7
    6f00:	b006      	add	sp, #24
    6f02:	bd80      	pop	{r7, pc}

00006f04 <GetASNObjectId>:
 *         ASN_PARSE_E when length is invalid.
 *         Otherwise, 0 to indicate success.
 */
int GetASNObjectId(const byte* input, word32* inOutIdx, int* len,
                          word32 maxIdx)
{
    6f04:	b580      	push	{r7, lr}
    6f06:	b088      	sub	sp, #32
    6f08:	af00      	add	r7, sp, #0
    6f0a:	60f8      	str	r0, [r7, #12]
    6f0c:	60b9      	str	r1, [r7, #8]
    6f0e:	607a      	str	r2, [r7, #4]
    6f10:	603b      	str	r3, [r7, #0]
    word32 idx = *inOutIdx;
    6f12:	68bb      	ldr	r3, [r7, #8]
    6f14:	681b      	ldr	r3, [r3, #0]
    6f16:	61bb      	str	r3, [r7, #24]
    byte   b;
    int    length;

    if ((idx + 1) > maxIdx)
    6f18:	69bb      	ldr	r3, [r7, #24]
    6f1a:	1c5a      	adds	r2, r3, #1
    6f1c:	683b      	ldr	r3, [r7, #0]
    6f1e:	429a      	cmp	r2, r3
    6f20:	d902      	bls.n	6f28 <GetASNObjectId+0x24>
        return BUFFER_E;
    6f22:	2384      	movs	r3, #132	; 0x84
    6f24:	425b      	negs	r3, r3
    6f26:	e024      	b.n	6f72 <GetASNObjectId+0x6e>

    b = input[idx++];
    6f28:	69bb      	ldr	r3, [r7, #24]
    6f2a:	1c5a      	adds	r2, r3, #1
    6f2c:	61ba      	str	r2, [r7, #24]
    6f2e:	68fa      	ldr	r2, [r7, #12]
    6f30:	18d2      	adds	r2, r2, r3
    6f32:	231f      	movs	r3, #31
    6f34:	18fb      	adds	r3, r7, r3
    6f36:	7812      	ldrb	r2, [r2, #0]
    6f38:	701a      	strb	r2, [r3, #0]
    if (b != ASN_OBJECT_ID)
    6f3a:	231f      	movs	r3, #31
    6f3c:	18fb      	adds	r3, r7, r3
    6f3e:	781b      	ldrb	r3, [r3, #0]
    6f40:	2b06      	cmp	r3, #6
    6f42:	d002      	beq.n	6f4a <GetASNObjectId+0x46>
        return ASN_OBJECT_ID_E;
    6f44:	2390      	movs	r3, #144	; 0x90
    6f46:	425b      	negs	r3, r3
    6f48:	e013      	b.n	6f72 <GetASNObjectId+0x6e>

    if (GetLength(input, &idx, &length, maxIdx) < 0)
    6f4a:	683b      	ldr	r3, [r7, #0]
    6f4c:	2214      	movs	r2, #20
    6f4e:	18ba      	adds	r2, r7, r2
    6f50:	2118      	movs	r1, #24
    6f52:	1879      	adds	r1, r7, r1
    6f54:	68f8      	ldr	r0, [r7, #12]
    6f56:	f7ff fb2f 	bl	65b8 <GetLength>
    6f5a:	1e03      	subs	r3, r0, #0
    6f5c:	da02      	bge.n	6f64 <GetASNObjectId+0x60>
        return ASN_PARSE_E;
    6f5e:	238c      	movs	r3, #140	; 0x8c
    6f60:	425b      	negs	r3, r3
    6f62:	e006      	b.n	6f72 <GetASNObjectId+0x6e>

    *len = length;
    6f64:	697a      	ldr	r2, [r7, #20]
    6f66:	687b      	ldr	r3, [r7, #4]
    6f68:	601a      	str	r2, [r3, #0]
    *inOutIdx = idx;
    6f6a:	69ba      	ldr	r2, [r7, #24]
    6f6c:	68bb      	ldr	r3, [r7, #8]
    6f6e:	601a      	str	r2, [r3, #0]
    return 0;
    6f70:	2300      	movs	r3, #0
}
    6f72:	0018      	movs	r0, r3
    6f74:	46bd      	mov	sp, r7
    6f76:	b008      	add	sp, #32
    6f78:	bd80      	pop	{r7, pc}
    6f7a:	46c0      	nop			; (mov r8, r8)

00006f7c <GetObjectId>:
    return idx;
}

int GetObjectId(const byte* input, word32* inOutIdx, word32* oid,
                                  word32 oidType, word32 maxIdx)
{
    6f7c:	b580      	push	{r7, lr}
    6f7e:	b08c      	sub	sp, #48	; 0x30
    6f80:	af00      	add	r7, sp, #0
    6f82:	60f8      	str	r0, [r7, #12]
    6f84:	60b9      	str	r1, [r7, #8]
    6f86:	607a      	str	r2, [r7, #4]
    6f88:	603b      	str	r3, [r7, #0]
    int    ret = 0, length;
    6f8a:	2300      	movs	r3, #0
    6f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    word32 idx = *inOutIdx;
    6f8e:	68bb      	ldr	r3, [r7, #8]
    6f90:	681b      	ldr	r3, [r3, #0]
    6f92:	61bb      	str	r3, [r7, #24]
#ifndef NO_VERIFY_OID
    word32 actualOidSz = 0;
    6f94:	2300      	movs	r3, #0
    6f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    const byte* actualOid;
#endif /* NO_VERIFY_OID */

    (void)oidType;
    WOLFSSL_ENTER("GetObjectId()");
    *oid = 0;
    6f98:	687b      	ldr	r3, [r7, #4]
    6f9a:	2200      	movs	r2, #0
    6f9c:	601a      	str	r2, [r3, #0]

    ret = GetASNObjectId(input, &idx, &length, maxIdx);
    6f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6fa0:	221c      	movs	r2, #28
    6fa2:	18ba      	adds	r2, r7, r2
    6fa4:	2118      	movs	r1, #24
    6fa6:	1879      	adds	r1, r7, r1
    6fa8:	68f8      	ldr	r0, [r7, #12]
    6faa:	f7ff ffab 	bl	6f04 <GetASNObjectId>
    6fae:	0003      	movs	r3, r0
    6fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (ret != 0)
    6fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	d001      	beq.n	6fbc <GetObjectId+0x40>
        return ret;
    6fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fba:	e03f      	b.n	703c <GetObjectId+0xc0>

#ifndef NO_VERIFY_OID
    actualOid = &input[idx];
    6fbc:	69bb      	ldr	r3, [r7, #24]
    6fbe:	68fa      	ldr	r2, [r7, #12]
    6fc0:	18d3      	adds	r3, r2, r3
    6fc2:	627b      	str	r3, [r7, #36]	; 0x24
    if (length > 0)
    6fc4:	69fb      	ldr	r3, [r7, #28]
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	dd0e      	ble.n	6fe8 <GetObjectId+0x6c>
        actualOidSz = (word32)length;
    6fca:	69fb      	ldr	r3, [r7, #28]
    6fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* NO_VERIFY_OID */

    while (length--) {
    6fce:	e00b      	b.n	6fe8 <GetObjectId+0x6c>
        /* odd HC08 compiler behavior here when input[idx++] */
        *oid += (word32)input[idx];
    6fd0:	687b      	ldr	r3, [r7, #4]
    6fd2:	681b      	ldr	r3, [r3, #0]
    6fd4:	69ba      	ldr	r2, [r7, #24]
    6fd6:	68f9      	ldr	r1, [r7, #12]
    6fd8:	188a      	adds	r2, r1, r2
    6fda:	7812      	ldrb	r2, [r2, #0]
    6fdc:	189a      	adds	r2, r3, r2
    6fde:	687b      	ldr	r3, [r7, #4]
    6fe0:	601a      	str	r2, [r3, #0]
        idx++;
    6fe2:	69bb      	ldr	r3, [r7, #24]
    6fe4:	3301      	adds	r3, #1
    6fe6:	61bb      	str	r3, [r7, #24]
    actualOid = &input[idx];
    if (length > 0)
        actualOidSz = (word32)length;
#endif /* NO_VERIFY_OID */

    while (length--) {
    6fe8:	69fb      	ldr	r3, [r7, #28]
    6fea:	1e5a      	subs	r2, r3, #1
    6fec:	61fa      	str	r2, [r7, #28]
    6fee:	2b00      	cmp	r3, #0
    6ff0:	d1ee      	bne.n	6fd0 <GetObjectId+0x54>
        *oid += (word32)input[idx];
        idx++;
    }
    /* just sum it up for now */

    *inOutIdx = idx;
    6ff2:	69ba      	ldr	r2, [r7, #24]
    6ff4:	68bb      	ldr	r3, [r7, #8]
    6ff6:	601a      	str	r2, [r3, #0]

#ifndef NO_VERIFY_OID
    {
        const byte* checkOid = NULL;
    6ff8:	2300      	movs	r3, #0
    6ffa:	623b      	str	r3, [r7, #32]
        word32 checkOidSz;
    #ifdef ASN_DUMP_OID
        word32 i;
    #endif

        if (oidType != oidIgnoreType) {
    6ffc:	683b      	ldr	r3, [r7, #0]
    6ffe:	2b12      	cmp	r3, #18
    7000:	d01b      	beq.n	703a <GetObjectId+0xbe>
            checkOid = OidFromId(*oid, oidType, &checkOidSz);
    7002:	687b      	ldr	r3, [r7, #4]
    7004:	681b      	ldr	r3, [r3, #0]
    7006:	2214      	movs	r2, #20
    7008:	18ba      	adds	r2, r7, r2
    700a:	6839      	ldr	r1, [r7, #0]
    700c:	0018      	movs	r0, r3
    700e:	f7ff fd8b 	bl	6b28 <OidFromId>
    7012:	0003      	movs	r3, r0
    7014:	623b      	str	r3, [r7, #32]
                }
            }
            #endif /* HAVE_OID_DECODING */
        #endif /* ASN_DUMP_OID */

            if (checkOid != NULL &&
    7016:	6a3b      	ldr	r3, [r7, #32]
    7018:	2b00      	cmp	r3, #0
    701a:	d00e      	beq.n	703a <GetObjectId+0xbe>
                (checkOidSz != actualOidSz ||
    701c:	697a      	ldr	r2, [r7, #20]
                }
            }
            #endif /* HAVE_OID_DECODING */
        #endif /* ASN_DUMP_OID */

            if (checkOid != NULL &&
    701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7020:	429a      	cmp	r2, r3
    7022:	d107      	bne.n	7034 <GetObjectId+0xb8>
                (checkOidSz != actualOidSz ||
                    XMEMCMP(actualOid, checkOid, checkOidSz) != 0)) {
    7024:	697a      	ldr	r2, [r7, #20]
    7026:	6a39      	ldr	r1, [r7, #32]
    7028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    702a:	0018      	movs	r0, r3
    702c:	f01e fb50 	bl	256d0 <memcmp>
    7030:	1e03      	subs	r3, r0, #0
            }
            #endif /* HAVE_OID_DECODING */
        #endif /* ASN_DUMP_OID */

            if (checkOid != NULL &&
                (checkOidSz != actualOidSz ||
    7032:	d002      	beq.n	703a <GetObjectId+0xbe>
                    XMEMCMP(actualOid, checkOid, checkOidSz) != 0)) {
                WOLFSSL_MSG("OID Check Failed");
                return ASN_UNKNOWN_OID_E;
    7034:	2394      	movs	r3, #148	; 0x94
    7036:	425b      	negs	r3, r3
    7038:	e000      	b.n	703c <GetObjectId+0xc0>
            }
        }
    }
#endif /* NO_VERIFY_OID */

    return ret;
    703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    703c:	0018      	movs	r0, r3
    703e:	46bd      	mov	sp, r7
    7040:	b00c      	add	sp, #48	; 0x30
    7042:	bd80      	pop	{r7, pc}

00007044 <SkipObjectId>:

static int SkipObjectId(const byte* input, word32* inOutIdx, word32 maxIdx)
{
    7044:	b580      	push	{r7, lr}
    7046:	b088      	sub	sp, #32
    7048:	af00      	add	r7, sp, #0
    704a:	60f8      	str	r0, [r7, #12]
    704c:	60b9      	str	r1, [r7, #8]
    704e:	607a      	str	r2, [r7, #4]
    word32 idx = *inOutIdx;
    7050:	68bb      	ldr	r3, [r7, #8]
    7052:	681b      	ldr	r3, [r3, #0]
    7054:	61bb      	str	r3, [r7, #24]
    int    length;
    int ret;

    ret = GetASNObjectId(input, &idx, &length, maxIdx);
    7056:	687b      	ldr	r3, [r7, #4]
    7058:	2214      	movs	r2, #20
    705a:	18ba      	adds	r2, r7, r2
    705c:	2118      	movs	r1, #24
    705e:	1879      	adds	r1, r7, r1
    7060:	68f8      	ldr	r0, [r7, #12]
    7062:	f7ff ff4f 	bl	6f04 <GetASNObjectId>
    7066:	0003      	movs	r3, r0
    7068:	61fb      	str	r3, [r7, #28]
    if (ret != 0)
    706a:	69fb      	ldr	r3, [r7, #28]
    706c:	2b00      	cmp	r3, #0
    706e:	d001      	beq.n	7074 <SkipObjectId+0x30>
        return ret;
    7070:	69fb      	ldr	r3, [r7, #28]
    7072:	e007      	b.n	7084 <SkipObjectId+0x40>

    idx += length;
    7074:	69bb      	ldr	r3, [r7, #24]
    7076:	697a      	ldr	r2, [r7, #20]
    7078:	189b      	adds	r3, r3, r2
    707a:	61bb      	str	r3, [r7, #24]
    *inOutIdx = idx;
    707c:	69ba      	ldr	r2, [r7, #24]
    707e:	68bb      	ldr	r3, [r7, #8]
    7080:	601a      	str	r2, [r3, #0]

    return 0;
    7082:	2300      	movs	r3, #0
}
    7084:	0018      	movs	r0, r3
    7086:	46bd      	mov	sp, r7
    7088:	b008      	add	sp, #32
    708a:	bd80      	pop	{r7, pc}

0000708c <CheckCurve>:

#ifdef HAVE_ECC

    /* return 0 on success if the ECC curve oid sum is supported */
    static int CheckCurve(word32 oid)
    {
    708c:	b580      	push	{r7, lr}
    708e:	b084      	sub	sp, #16
    7090:	af00      	add	r7, sp, #0
    7092:	6078      	str	r0, [r7, #4]
        int ret = 0;
    7094:	2300      	movs	r3, #0
    7096:	60fb      	str	r3, [r7, #12]
        word32 oidSz = 0;
    7098:	2300      	movs	r3, #0
    709a:	60bb      	str	r3, [r7, #8]

        ret = wc_ecc_get_oid(oid, NULL, &oidSz);
    709c:	2308      	movs	r3, #8
    709e:	18fa      	adds	r2, r7, r3
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	2100      	movs	r1, #0
    70a4:	0018      	movs	r0, r3
    70a6:	f008 f95b 	bl	f360 <wc_ecc_get_oid>
    70aa:	0003      	movs	r3, r0
    70ac:	60fb      	str	r3, [r7, #12]
        if (ret < 0 || oidSz <= 0) {
    70ae:	68fb      	ldr	r3, [r7, #12]
    70b0:	2b00      	cmp	r3, #0
    70b2:	db02      	blt.n	70ba <CheckCurve+0x2e>
    70b4:	68bb      	ldr	r3, [r7, #8]
    70b6:	2b00      	cmp	r3, #0
    70b8:	d102      	bne.n	70c0 <CheckCurve+0x34>
            WOLFSSL_MSG("CheckCurve not found");
            ret = ALGO_ID_E;
    70ba:	2385      	movs	r3, #133	; 0x85
    70bc:	425b      	negs	r3, r3
    70be:	60fb      	str	r3, [r7, #12]
        }

        return ret;
    70c0:	68fb      	ldr	r3, [r7, #12]
    }
    70c2:	0018      	movs	r0, r3
    70c4:	46bd      	mov	sp, r7
    70c6:	b004      	add	sp, #16
    70c8:	bd80      	pop	{r7, pc}
    70ca:	46c0      	nop			; (mov r8, r8)

000070cc <GetTime>:

#ifndef NO_ASN_TIME

/* two byte date/time, add to value */
static WC_INLINE void GetTime(int* value, const byte* date, int* idx)
{
    70cc:	b580      	push	{r7, lr}
    70ce:	b086      	sub	sp, #24
    70d0:	af00      	add	r7, sp, #0
    70d2:	60f8      	str	r0, [r7, #12]
    70d4:	60b9      	str	r1, [r7, #8]
    70d6:	607a      	str	r2, [r7, #4]
    int i = *idx;
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	681b      	ldr	r3, [r3, #0]
    70dc:	617b      	str	r3, [r7, #20]

    *value += btoi(date[i++]) * 10;
    70de:	697b      	ldr	r3, [r7, #20]
    70e0:	1c5a      	adds	r2, r3, #1
    70e2:	617a      	str	r2, [r7, #20]
    70e4:	001a      	movs	r2, r3
    70e6:	68bb      	ldr	r3, [r7, #8]
    70e8:	189b      	adds	r3, r3, r2
    70ea:	781b      	ldrb	r3, [r3, #0]
    70ec:	0018      	movs	r0, r3
    70ee:	f7ff fa55 	bl	659c <btoi>
    70f2:	0002      	movs	r2, r0
    70f4:	0013      	movs	r3, r2
    70f6:	009b      	lsls	r3, r3, #2
    70f8:	189b      	adds	r3, r3, r2
    70fa:	005b      	lsls	r3, r3, #1
    70fc:	001a      	movs	r2, r3
    70fe:	68fb      	ldr	r3, [r7, #12]
    7100:	681b      	ldr	r3, [r3, #0]
    7102:	189b      	adds	r3, r3, r2
    7104:	001a      	movs	r2, r3
    7106:	68fb      	ldr	r3, [r7, #12]
    7108:	601a      	str	r2, [r3, #0]
    *value += btoi(date[i++]);
    710a:	697b      	ldr	r3, [r7, #20]
    710c:	1c5a      	adds	r2, r3, #1
    710e:	617a      	str	r2, [r7, #20]
    7110:	001a      	movs	r2, r3
    7112:	68bb      	ldr	r3, [r7, #8]
    7114:	189b      	adds	r3, r3, r2
    7116:	781b      	ldrb	r3, [r3, #0]
    7118:	0018      	movs	r0, r3
    711a:	f7ff fa3f 	bl	659c <btoi>
    711e:	0002      	movs	r2, r0
    7120:	68fb      	ldr	r3, [r7, #12]
    7122:	681b      	ldr	r3, [r3, #0]
    7124:	189b      	adds	r3, r3, r2
    7126:	001a      	movs	r2, r3
    7128:	68fb      	ldr	r3, [r7, #12]
    712a:	601a      	str	r2, [r3, #0]

    *idx = i;
    712c:	687b      	ldr	r3, [r7, #4]
    712e:	697a      	ldr	r2, [r7, #20]
    7130:	601a      	str	r2, [r3, #0]
}
    7132:	46c0      	nop			; (mov r8, r8)
    7134:	46bd      	mov	sp, r7
    7136:	b006      	add	sp, #24
    7138:	bd80      	pop	{r7, pc}
    713a:	46c0      	nop			; (mov r8, r8)

0000713c <ExtractDate>:

int ExtractDate(const unsigned char* date, unsigned char format,
                                                  struct tm* certTime, int* idx)
{
    713c:	b580      	push	{r7, lr}
    713e:	b084      	sub	sp, #16
    7140:	af00      	add	r7, sp, #0
    7142:	60f8      	str	r0, [r7, #12]
    7144:	607a      	str	r2, [r7, #4]
    7146:	603b      	str	r3, [r7, #0]
    7148:	230b      	movs	r3, #11
    714a:	18fb      	adds	r3, r7, r3
    714c:	1c0a      	adds	r2, r1, #0
    714e:	701a      	strb	r2, [r3, #0]
    XMEMSET(certTime, 0, sizeof(struct tm));
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	222c      	movs	r2, #44	; 0x2c
    7154:	2100      	movs	r1, #0
    7156:	0018      	movs	r0, r3
    7158:	f01e fae7 	bl	2572a <memset>

    if (format == ASN_UTC_TIME) {
    715c:	230b      	movs	r3, #11
    715e:	18fb      	adds	r3, r7, r3
    7160:	781b      	ldrb	r3, [r3, #0]
    7162:	2b17      	cmp	r3, #23
    7164:	d110      	bne.n	7188 <ExtractDate+0x4c>
        if (btoi(date[0]) >= 5)
    7166:	68fb      	ldr	r3, [r7, #12]
    7168:	781b      	ldrb	r3, [r3, #0]
    716a:	0018      	movs	r0, r3
    716c:	f7ff fa16 	bl	659c <btoi>
    7170:	0003      	movs	r3, r0
    7172:	2b04      	cmp	r3, #4
    7174:	d903      	bls.n	717e <ExtractDate+0x42>
            certTime->tm_year = 1900;
    7176:	687b      	ldr	r3, [r7, #4]
    7178:	4a37      	ldr	r2, [pc, #220]	; (7258 <ExtractDate+0x11c>)
    717a:	615a      	str	r2, [r3, #20]
    717c:	e033      	b.n	71e6 <ExtractDate+0xaa>
        else
            certTime->tm_year = 2000;
    717e:	687b      	ldr	r3, [r7, #4]
    7180:	22fa      	movs	r2, #250	; 0xfa
    7182:	00d2      	lsls	r2, r2, #3
    7184:	615a      	str	r2, [r3, #20]
    7186:	e02e      	b.n	71e6 <ExtractDate+0xaa>
    }
    else  { /* format == GENERALIZED_TIME */
        certTime->tm_year += btoi(date[*idx]) * 1000; *idx = *idx + 1;
    7188:	683b      	ldr	r3, [r7, #0]
    718a:	681b      	ldr	r3, [r3, #0]
    718c:	001a      	movs	r2, r3
    718e:	68fb      	ldr	r3, [r7, #12]
    7190:	189b      	adds	r3, r3, r2
    7192:	781b      	ldrb	r3, [r3, #0]
    7194:	0018      	movs	r0, r3
    7196:	f7ff fa01 	bl	659c <btoi>
    719a:	0002      	movs	r2, r0
    719c:	23fa      	movs	r3, #250	; 0xfa
    719e:	009b      	lsls	r3, r3, #2
    71a0:	435a      	muls	r2, r3
    71a2:	687b      	ldr	r3, [r7, #4]
    71a4:	695b      	ldr	r3, [r3, #20]
    71a6:	189b      	adds	r3, r3, r2
    71a8:	001a      	movs	r2, r3
    71aa:	687b      	ldr	r3, [r7, #4]
    71ac:	615a      	str	r2, [r3, #20]
    71ae:	683b      	ldr	r3, [r7, #0]
    71b0:	681b      	ldr	r3, [r3, #0]
    71b2:	1c5a      	adds	r2, r3, #1
    71b4:	683b      	ldr	r3, [r7, #0]
    71b6:	601a      	str	r2, [r3, #0]
        certTime->tm_year += btoi(date[*idx]) * 100;  *idx = *idx + 1;
    71b8:	683b      	ldr	r3, [r7, #0]
    71ba:	681b      	ldr	r3, [r3, #0]
    71bc:	001a      	movs	r2, r3
    71be:	68fb      	ldr	r3, [r7, #12]
    71c0:	189b      	adds	r3, r3, r2
    71c2:	781b      	ldrb	r3, [r3, #0]
    71c4:	0018      	movs	r0, r3
    71c6:	f7ff f9e9 	bl	659c <btoi>
    71ca:	0002      	movs	r2, r0
    71cc:	2364      	movs	r3, #100	; 0x64
    71ce:	435a      	muls	r2, r3
    71d0:	687b      	ldr	r3, [r7, #4]
    71d2:	695b      	ldr	r3, [r3, #20]
    71d4:	189b      	adds	r3, r3, r2
    71d6:	001a      	movs	r2, r3
    71d8:	687b      	ldr	r3, [r7, #4]
    71da:	615a      	str	r2, [r3, #20]
    71dc:	683b      	ldr	r3, [r7, #0]
    71de:	681b      	ldr	r3, [r3, #0]
    71e0:	1c5a      	adds	r2, r3, #1
    71e2:	683b      	ldr	r3, [r7, #0]
    71e4:	601a      	str	r2, [r3, #0]
    }

    /* adjust tm_year, tm_mon */
    GetTime((int*)&certTime->tm_year, date, idx); certTime->tm_year -= 1900;
    71e6:	687b      	ldr	r3, [r7, #4]
    71e8:	3314      	adds	r3, #20
    71ea:	683a      	ldr	r2, [r7, #0]
    71ec:	68f9      	ldr	r1, [r7, #12]
    71ee:	0018      	movs	r0, r3
    71f0:	f7ff ff6c 	bl	70cc <GetTime>
    71f4:	687b      	ldr	r3, [r7, #4]
    71f6:	695b      	ldr	r3, [r3, #20]
    71f8:	4a18      	ldr	r2, [pc, #96]	; (725c <ExtractDate+0x120>)
    71fa:	189a      	adds	r2, r3, r2
    71fc:	687b      	ldr	r3, [r7, #4]
    71fe:	615a      	str	r2, [r3, #20]
    GetTime((int*)&certTime->tm_mon,  date, idx); certTime->tm_mon  -= 1;
    7200:	687b      	ldr	r3, [r7, #4]
    7202:	3310      	adds	r3, #16
    7204:	683a      	ldr	r2, [r7, #0]
    7206:	68f9      	ldr	r1, [r7, #12]
    7208:	0018      	movs	r0, r3
    720a:	f7ff ff5f 	bl	70cc <GetTime>
    720e:	687b      	ldr	r3, [r7, #4]
    7210:	691b      	ldr	r3, [r3, #16]
    7212:	1e5a      	subs	r2, r3, #1
    7214:	687b      	ldr	r3, [r7, #4]
    7216:	611a      	str	r2, [r3, #16]
    GetTime((int*)&certTime->tm_mday, date, idx);
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	330c      	adds	r3, #12
    721c:	683a      	ldr	r2, [r7, #0]
    721e:	68f9      	ldr	r1, [r7, #12]
    7220:	0018      	movs	r0, r3
    7222:	f7ff ff53 	bl	70cc <GetTime>
    GetTime((int*)&certTime->tm_hour, date, idx);
    7226:	687b      	ldr	r3, [r7, #4]
    7228:	3308      	adds	r3, #8
    722a:	683a      	ldr	r2, [r7, #0]
    722c:	68f9      	ldr	r1, [r7, #12]
    722e:	0018      	movs	r0, r3
    7230:	f7ff ff4c 	bl	70cc <GetTime>
    GetTime((int*)&certTime->tm_min,  date, idx);
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	3304      	adds	r3, #4
    7238:	683a      	ldr	r2, [r7, #0]
    723a:	68f9      	ldr	r1, [r7, #12]
    723c:	0018      	movs	r0, r3
    723e:	f7ff ff45 	bl	70cc <GetTime>
    GetTime((int*)&certTime->tm_sec,  date, idx);
    7242:	687b      	ldr	r3, [r7, #4]
    7244:	683a      	ldr	r2, [r7, #0]
    7246:	68f9      	ldr	r1, [r7, #12]
    7248:	0018      	movs	r0, r3
    724a:	f7ff ff3f 	bl	70cc <GetTime>

    return 1;
    724e:	2301      	movs	r3, #1
}
    7250:	0018      	movs	r0, r3
    7252:	46bd      	mov	sp, r7
    7254:	b004      	add	sp, #16
    7256:	bd80      	pop	{r7, pc}
    7258:	0000076c 	.word	0x0000076c
    725c:	fffff894 	.word	0xfffff894

00007260 <wc_GetTime>:
    return 1;
}
#endif /* USE_WOLF_VALIDDATE */

int wc_GetTime(void* timePtr, word32 timeSize)
{
    7260:	b580      	push	{r7, lr}
    7262:	b084      	sub	sp, #16
    7264:	af00      	add	r7, sp, #0
    7266:	6078      	str	r0, [r7, #4]
    7268:	6039      	str	r1, [r7, #0]
    time_t* ltime = (time_t*)timePtr;
    726a:	687b      	ldr	r3, [r7, #4]
    726c:	60fb      	str	r3, [r7, #12]

    if (timePtr == NULL) {
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	2b00      	cmp	r3, #0
    7272:	d102      	bne.n	727a <wc_GetTime+0x1a>
        return BAD_FUNC_ARG;
    7274:	23ad      	movs	r3, #173	; 0xad
    7276:	425b      	negs	r3, r3
    7278:	e00c      	b.n	7294 <wc_GetTime+0x34>
    }

    if ((word32)sizeof(time_t) > timeSize) {
    727a:	683b      	ldr	r3, [r7, #0]
    727c:	2b03      	cmp	r3, #3
    727e:	d802      	bhi.n	7286 <wc_GetTime+0x26>
        return BUFFER_E;
    7280:	2384      	movs	r3, #132	; 0x84
    7282:	425b      	negs	r3, r3
    7284:	e006      	b.n	7294 <wc_GetTime+0x34>
    }

    *ltime = XTIME(0);
    7286:	2000      	movs	r0, #0
    7288:	f009 fa54 	bl	10734 <atmel_get_curr_time_and_date>
    728c:	0002      	movs	r2, r0
    728e:	68fb      	ldr	r3, [r7, #12]
    7290:	601a      	str	r2, [r3, #0]

    return 0;
    7292:	2300      	movs	r3, #0
}
    7294:	0018      	movs	r0, r3
    7296:	46bd      	mov	sp, r7
    7298:	b004      	add	sp, #16
    729a:	bd80      	pop	{r7, pc}

0000729c <GetDateInfo>:


/* Get date buffer, format and length. Returns 0=success or error */
static int GetDateInfo(const byte* source, word32* idx, const byte** pDate,
                        byte* pFormat, int* pLength, word32 maxIdx)
{
    729c:	b580      	push	{r7, lr}
    729e:	b086      	sub	sp, #24
    72a0:	af00      	add	r7, sp, #0
    72a2:	60f8      	str	r0, [r7, #12]
    72a4:	60b9      	str	r1, [r7, #8]
    72a6:	607a      	str	r2, [r7, #4]
    72a8:	603b      	str	r3, [r7, #0]
    int length;
    byte format;

    if (source == NULL || idx == NULL)
    72aa:	68fb      	ldr	r3, [r7, #12]
    72ac:	2b00      	cmp	r3, #0
    72ae:	d002      	beq.n	72b6 <GetDateInfo+0x1a>
    72b0:	68bb      	ldr	r3, [r7, #8]
    72b2:	2b00      	cmp	r3, #0
    72b4:	d102      	bne.n	72bc <GetDateInfo+0x20>
        return BAD_FUNC_ARG;
    72b6:	23ad      	movs	r3, #173	; 0xad
    72b8:	425b      	negs	r3, r3
    72ba:	e055      	b.n	7368 <GetDateInfo+0xcc>

    /* get ASN format header */
    if (*idx+1 > maxIdx)
    72bc:	68bb      	ldr	r3, [r7, #8]
    72be:	681b      	ldr	r3, [r3, #0]
    72c0:	1c5a      	adds	r2, r3, #1
    72c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    72c4:	429a      	cmp	r2, r3
    72c6:	d902      	bls.n	72ce <GetDateInfo+0x32>
        return BUFFER_E;
    72c8:	2384      	movs	r3, #132	; 0x84
    72ca:	425b      	negs	r3, r3
    72cc:	e04c      	b.n	7368 <GetDateInfo+0xcc>
    format = source[*idx];
    72ce:	68bb      	ldr	r3, [r7, #8]
    72d0:	681b      	ldr	r3, [r3, #0]
    72d2:	68fa      	ldr	r2, [r7, #12]
    72d4:	18d2      	adds	r2, r2, r3
    72d6:	2317      	movs	r3, #23
    72d8:	18fb      	adds	r3, r7, r3
    72da:	7812      	ldrb	r2, [r2, #0]
    72dc:	701a      	strb	r2, [r3, #0]
    *idx += 1;
    72de:	68bb      	ldr	r3, [r7, #8]
    72e0:	681b      	ldr	r3, [r3, #0]
    72e2:	1c5a      	adds	r2, r3, #1
    72e4:	68bb      	ldr	r3, [r7, #8]
    72e6:	601a      	str	r2, [r3, #0]
    if (format != ASN_UTC_TIME && format != ASN_GENERALIZED_TIME)
    72e8:	2317      	movs	r3, #23
    72ea:	18fb      	adds	r3, r7, r3
    72ec:	781b      	ldrb	r3, [r3, #0]
    72ee:	2b17      	cmp	r3, #23
    72f0:	d007      	beq.n	7302 <GetDateInfo+0x66>
    72f2:	2317      	movs	r3, #23
    72f4:	18fb      	adds	r3, r7, r3
    72f6:	781b      	ldrb	r3, [r3, #0]
    72f8:	2b18      	cmp	r3, #24
    72fa:	d002      	beq.n	7302 <GetDateInfo+0x66>
        return ASN_TIME_E;
    72fc:	2399      	movs	r3, #153	; 0x99
    72fe:	425b      	negs	r3, r3
    7300:	e032      	b.n	7368 <GetDateInfo+0xcc>

    /* get length */
    if (GetLength(source, idx, &length, maxIdx) < 0)
    7302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7304:	2210      	movs	r2, #16
    7306:	18ba      	adds	r2, r7, r2
    7308:	68b9      	ldr	r1, [r7, #8]
    730a:	68f8      	ldr	r0, [r7, #12]
    730c:	f7ff f954 	bl	65b8 <GetLength>
    7310:	1e03      	subs	r3, r0, #0
    7312:	da02      	bge.n	731a <GetDateInfo+0x7e>
        return ASN_PARSE_E;
    7314:	238c      	movs	r3, #140	; 0x8c
    7316:	425b      	negs	r3, r3
    7318:	e026      	b.n	7368 <GetDateInfo+0xcc>
    if (length > MAX_DATE_SIZE || length < MIN_DATE_SIZE)
    731a:	693b      	ldr	r3, [r7, #16]
    731c:	2b20      	cmp	r3, #32
    731e:	dc02      	bgt.n	7326 <GetDateInfo+0x8a>
    7320:	693b      	ldr	r3, [r7, #16]
    7322:	2b0c      	cmp	r3, #12
    7324:	dc02      	bgt.n	732c <GetDateInfo+0x90>
        return ASN_DATE_SZ_E;
    7326:	2395      	movs	r3, #149	; 0x95
    7328:	425b      	negs	r3, r3
    732a:	e01d      	b.n	7368 <GetDateInfo+0xcc>

    /* return format, date and length */
    if (pFormat)
    732c:	683b      	ldr	r3, [r7, #0]
    732e:	2b00      	cmp	r3, #0
    7330:	d004      	beq.n	733c <GetDateInfo+0xa0>
        *pFormat = format;
    7332:	683b      	ldr	r3, [r7, #0]
    7334:	2217      	movs	r2, #23
    7336:	18ba      	adds	r2, r7, r2
    7338:	7812      	ldrb	r2, [r2, #0]
    733a:	701a      	strb	r2, [r3, #0]
    if (pDate)
    733c:	687b      	ldr	r3, [r7, #4]
    733e:	2b00      	cmp	r3, #0
    7340:	d005      	beq.n	734e <GetDateInfo+0xb2>
        *pDate = &source[*idx];
    7342:	68bb      	ldr	r3, [r7, #8]
    7344:	681b      	ldr	r3, [r3, #0]
    7346:	68fa      	ldr	r2, [r7, #12]
    7348:	18d2      	adds	r2, r2, r3
    734a:	687b      	ldr	r3, [r7, #4]
    734c:	601a      	str	r2, [r3, #0]
    if (pLength)
    734e:	6a3b      	ldr	r3, [r7, #32]
    7350:	2b00      	cmp	r3, #0
    7352:	d002      	beq.n	735a <GetDateInfo+0xbe>
        *pLength = length;
    7354:	693a      	ldr	r2, [r7, #16]
    7356:	6a3b      	ldr	r3, [r7, #32]
    7358:	601a      	str	r2, [r3, #0]

    *idx += length;
    735a:	68bb      	ldr	r3, [r7, #8]
    735c:	681b      	ldr	r3, [r3, #0]
    735e:	693a      	ldr	r2, [r7, #16]
    7360:	189a      	adds	r2, r3, r2
    7362:	68bb      	ldr	r3, [r7, #8]
    7364:	601a      	str	r2, [r3, #0]

    return 0;
    7366:	2300      	movs	r3, #0
}
    7368:	0018      	movs	r0, r3
    736a:	46bd      	mov	sp, r7
    736c:	b006      	add	sp, #24
    736e:	bd80      	pop	{r7, pc}

00007370 <wc_GetDateInfo>:
}


int wc_GetDateInfo(const byte* certDate, int certDateSz, const byte** date,
    byte* format, int* length)
{
    7370:	b590      	push	{r4, r7, lr}
    7372:	b089      	sub	sp, #36	; 0x24
    7374:	af02      	add	r7, sp, #8
    7376:	60f8      	str	r0, [r7, #12]
    7378:	60b9      	str	r1, [r7, #8]
    737a:	607a      	str	r2, [r7, #4]
    737c:	603b      	str	r3, [r7, #0]
    int ret;
    word32 idx = 0;
    737e:	2300      	movs	r3, #0
    7380:	613b      	str	r3, [r7, #16]

    ret = GetDateInfo(certDate, &idx, date, format, length, certDateSz);
    7382:	68bb      	ldr	r3, [r7, #8]
    7384:	683c      	ldr	r4, [r7, #0]
    7386:	687a      	ldr	r2, [r7, #4]
    7388:	2110      	movs	r1, #16
    738a:	1879      	adds	r1, r7, r1
    738c:	68f8      	ldr	r0, [r7, #12]
    738e:	9301      	str	r3, [sp, #4]
    7390:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7392:	9300      	str	r3, [sp, #0]
    7394:	0023      	movs	r3, r4
    7396:	f7ff ff81 	bl	729c <GetDateInfo>
    739a:	0003      	movs	r3, r0
    739c:	617b      	str	r3, [r7, #20]
    if (ret < 0)
    739e:	697b      	ldr	r3, [r7, #20]
    73a0:	2b00      	cmp	r3, #0
    73a2:	da01      	bge.n	73a8 <wc_GetDateInfo+0x38>
        return ret;
    73a4:	697b      	ldr	r3, [r7, #20]
    73a6:	e000      	b.n	73aa <wc_GetDateInfo+0x3a>

    return 0;
    73a8:	2300      	movs	r3, #0
}
    73aa:	0018      	movs	r0, r3
    73ac:	46bd      	mov	sp, r7
    73ae:	b007      	add	sp, #28
    73b0:	bd90      	pop	{r4, r7, pc}
    73b2:	46c0      	nop			; (mov r8, r8)

000073b4 <wc_GetDateAsCalendarTime>:

#ifndef NO_ASN_TIME
int wc_GetDateAsCalendarTime(const byte* date, int length, byte format,
    struct tm* timearg)
{
    73b4:	b590      	push	{r4, r7, lr}
    73b6:	b087      	sub	sp, #28
    73b8:	af00      	add	r7, sp, #0
    73ba:	60f8      	str	r0, [r7, #12]
    73bc:	60b9      	str	r1, [r7, #8]
    73be:	603b      	str	r3, [r7, #0]
    73c0:	1dfb      	adds	r3, r7, #7
    73c2:	701a      	strb	r2, [r3, #0]
    int idx = 0;
    73c4:	2300      	movs	r3, #0
    73c6:	617b      	str	r3, [r7, #20]
    (void)length;
    if (!ExtractDate(date, format, timearg, &idx))
    73c8:	2314      	movs	r3, #20
    73ca:	18fc      	adds	r4, r7, r3
    73cc:	683a      	ldr	r2, [r7, #0]
    73ce:	1dfb      	adds	r3, r7, #7
    73d0:	7819      	ldrb	r1, [r3, #0]
    73d2:	68f8      	ldr	r0, [r7, #12]
    73d4:	0023      	movs	r3, r4
    73d6:	f7ff feb1 	bl	713c <ExtractDate>
    73da:	1e03      	subs	r3, r0, #0
    73dc:	d102      	bne.n	73e4 <wc_GetDateAsCalendarTime+0x30>
        return ASN_TIME_E;
    73de:	2399      	movs	r3, #153	; 0x99
    73e0:	425b      	negs	r3, r3
    73e2:	e000      	b.n	73e6 <wc_GetDateAsCalendarTime+0x32>
    return 0;
    73e4:	2300      	movs	r3, #0
}
    73e6:	0018      	movs	r0, r3
    73e8:	46bd      	mov	sp, r7
    73ea:	b007      	add	sp, #28
    73ec:	bd90      	pop	{r4, r7, pc}
    73ee:	46c0      	nop			; (mov r8, r8)

000073f0 <BytePrecision>:
    return idx + digSz;
}


static word32 BytePrecision(word32 value)
{
    73f0:	b580      	push	{r7, lr}
    73f2:	b084      	sub	sp, #16
    73f4:	af00      	add	r7, sp, #0
    73f6:	6078      	str	r0, [r7, #4]
    word32 i;
    for (i = sizeof(value); i; --i)
    73f8:	2304      	movs	r3, #4
    73fa:	60fb      	str	r3, [r7, #12]
    73fc:	e00b      	b.n	7416 <BytePrecision+0x26>
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
    73fe:	68fb      	ldr	r3, [r7, #12]
    7400:	4a0a      	ldr	r2, [pc, #40]	; (742c <BytePrecision+0x3c>)
    7402:	4694      	mov	ip, r2
    7404:	4463      	add	r3, ip
    7406:	00db      	lsls	r3, r3, #3
    7408:	687a      	ldr	r2, [r7, #4]
    740a:	40da      	lsrs	r2, r3
    740c:	1e13      	subs	r3, r2, #0
    740e:	d106      	bne.n	741e <BytePrecision+0x2e>


static word32 BytePrecision(word32 value)
{
    word32 i;
    for (i = sizeof(value); i; --i)
    7410:	68fb      	ldr	r3, [r7, #12]
    7412:	3b01      	subs	r3, #1
    7414:	60fb      	str	r3, [r7, #12]
    7416:	68fb      	ldr	r3, [r7, #12]
    7418:	2b00      	cmp	r3, #0
    741a:	d1f0      	bne.n	73fe <BytePrecision+0xe>
    741c:	e000      	b.n	7420 <BytePrecision+0x30>
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
            break;
    741e:	46c0      	nop			; (mov r8, r8)

    return i;
    7420:	68fb      	ldr	r3, [r7, #12]
}
    7422:	0018      	movs	r0, r3
    7424:	46bd      	mov	sp, r7
    7426:	b004      	add	sp, #16
    7428:	bd80      	pop	{r7, pc}
    742a:	46c0      	nop			; (mov r8, r8)
    742c:	1fffffff 	.word	0x1fffffff

00007430 <SetLength>:


WOLFSSL_LOCAL word32 SetLength(word32 length, byte* output)
{
    7430:	b590      	push	{r4, r7, lr}
    7432:	b085      	sub	sp, #20
    7434:	af00      	add	r7, sp, #0
    7436:	6078      	str	r0, [r7, #4]
    7438:	6039      	str	r1, [r7, #0]
    word32 i = 0, j;
    743a:	2300      	movs	r3, #0
    743c:	60fb      	str	r3, [r7, #12]

    if (length < ASN_LONG_LENGTH)
    743e:	687b      	ldr	r3, [r7, #4]
    7440:	2b7f      	cmp	r3, #127	; 0x7f
    7442:	d808      	bhi.n	7456 <SetLength+0x26>
        output[i++] = (byte)length;
    7444:	68fb      	ldr	r3, [r7, #12]
    7446:	1c5a      	adds	r2, r3, #1
    7448:	60fa      	str	r2, [r7, #12]
    744a:	683a      	ldr	r2, [r7, #0]
    744c:	18d3      	adds	r3, r2, r3
    744e:	687a      	ldr	r2, [r7, #4]
    7450:	b2d2      	uxtb	r2, r2
    7452:	701a      	strb	r2, [r3, #0]
    7454:	e02c      	b.n	74b0 <SetLength+0x80>
    else {
        output[i++] = (byte)(BytePrecision(length) | ASN_LONG_LENGTH);
    7456:	68fb      	ldr	r3, [r7, #12]
    7458:	1c5a      	adds	r2, r3, #1
    745a:	60fa      	str	r2, [r7, #12]
    745c:	683a      	ldr	r2, [r7, #0]
    745e:	18d4      	adds	r4, r2, r3
    7460:	687b      	ldr	r3, [r7, #4]
    7462:	0018      	movs	r0, r3
    7464:	f7ff ffc4 	bl	73f0 <BytePrecision>
    7468:	0003      	movs	r3, r0
    746a:	b2db      	uxtb	r3, r3
    746c:	2280      	movs	r2, #128	; 0x80
    746e:	4252      	negs	r2, r2
    7470:	4313      	orrs	r3, r2
    7472:	b2db      	uxtb	r3, r3
    7474:	7023      	strb	r3, [r4, #0]

        for (j = BytePrecision(length); j; --j) {
    7476:	687b      	ldr	r3, [r7, #4]
    7478:	0018      	movs	r0, r3
    747a:	f7ff ffb9 	bl	73f0 <BytePrecision>
    747e:	0003      	movs	r3, r0
    7480:	60bb      	str	r3, [r7, #8]
    7482:	e012      	b.n	74aa <SetLength+0x7a>
            output[i] = (byte)(length >> ((j - 1) * WOLFSSL_BIT_SIZE));
    7484:	683a      	ldr	r2, [r7, #0]
    7486:	68fb      	ldr	r3, [r7, #12]
    7488:	18d3      	adds	r3, r2, r3
    748a:	68ba      	ldr	r2, [r7, #8]
    748c:	490b      	ldr	r1, [pc, #44]	; (74bc <SetLength+0x8c>)
    748e:	468c      	mov	ip, r1
    7490:	4462      	add	r2, ip
    7492:	00d2      	lsls	r2, r2, #3
    7494:	6879      	ldr	r1, [r7, #4]
    7496:	40d1      	lsrs	r1, r2
    7498:	000a      	movs	r2, r1
    749a:	b2d2      	uxtb	r2, r2
    749c:	701a      	strb	r2, [r3, #0]
            i++;
    749e:	68fb      	ldr	r3, [r7, #12]
    74a0:	3301      	adds	r3, #1
    74a2:	60fb      	str	r3, [r7, #12]
    if (length < ASN_LONG_LENGTH)
        output[i++] = (byte)length;
    else {
        output[i++] = (byte)(BytePrecision(length) | ASN_LONG_LENGTH);

        for (j = BytePrecision(length); j; --j) {
    74a4:	68bb      	ldr	r3, [r7, #8]
    74a6:	3b01      	subs	r3, #1
    74a8:	60bb      	str	r3, [r7, #8]
    74aa:	68bb      	ldr	r3, [r7, #8]
    74ac:	2b00      	cmp	r3, #0
    74ae:	d1e9      	bne.n	7484 <SetLength+0x54>
            output[i] = (byte)(length >> ((j - 1) * WOLFSSL_BIT_SIZE));
            i++;
        }
    }

    return i;
    74b0:	68fb      	ldr	r3, [r7, #12]
}
    74b2:	0018      	movs	r0, r3
    74b4:	46bd      	mov	sp, r7
    74b6:	b005      	add	sp, #20
    74b8:	bd90      	pop	{r4, r7, pc}
    74ba:	46c0      	nop			; (mov r8, r8)
    74bc:	1fffffff 	.word	0x1fffffff

000074c0 <SetSequence>:


WOLFSSL_LOCAL word32 SetSequence(word32 len, byte* output)
{
    74c0:	b580      	push	{r7, lr}
    74c2:	b082      	sub	sp, #8
    74c4:	af00      	add	r7, sp, #0
    74c6:	6078      	str	r0, [r7, #4]
    74c8:	6039      	str	r1, [r7, #0]
    output[0] = ASN_SEQUENCE | ASN_CONSTRUCTED;
    74ca:	683b      	ldr	r3, [r7, #0]
    74cc:	2230      	movs	r2, #48	; 0x30
    74ce:	701a      	strb	r2, [r3, #0]
    return SetLength(len, output + 1) + 1;
    74d0:	683b      	ldr	r3, [r7, #0]
    74d2:	1c5a      	adds	r2, r3, #1
    74d4:	687b      	ldr	r3, [r7, #4]
    74d6:	0011      	movs	r1, r2
    74d8:	0018      	movs	r0, r3
    74da:	f7ff ffa9 	bl	7430 <SetLength>
    74de:	0003      	movs	r3, r0
    74e0:	3301      	adds	r3, #1
}
    74e2:	0018      	movs	r0, r3
    74e4:	46bd      	mov	sp, r7
    74e6:	b002      	add	sp, #8
    74e8:	bd80      	pop	{r7, pc}
    74ea:	46c0      	nop			; (mov r8, r8)

000074ec <wc_GetCTC_HashOID>:
    return encDigSz + algoSz + seqSz;
}


int wc_GetCTC_HashOID(int type)
{
    74ec:	b590      	push	{r4, r7, lr}
    74ee:	b085      	sub	sp, #20
    74f0:	af00      	add	r7, sp, #0
    74f2:	6078      	str	r0, [r7, #4]
    int ret;
    enum wc_HashType hType;

    hType = wc_HashTypeConvert(type);
    74f4:	230b      	movs	r3, #11
    74f6:	18fc      	adds	r4, r7, r3
    74f8:	687b      	ldr	r3, [r7, #4]
    74fa:	0018      	movs	r0, r3
    74fc:	f7fe fdd8 	bl	60b0 <wc_HashTypeConvert>
    7500:	0003      	movs	r3, r0
    7502:	7023      	strb	r3, [r4, #0]
    ret = wc_HashGetOID(hType);
    7504:	230b      	movs	r3, #11
    7506:	18fb      	adds	r3, r7, r3
    7508:	781b      	ldrb	r3, [r3, #0]
    750a:	0018      	movs	r0, r3
    750c:	f7fe fdea 	bl	60e4 <wc_HashGetOID>
    7510:	0003      	movs	r3, r0
    7512:	60fb      	str	r3, [r7, #12]
    if (ret < 0)
    7514:	68fb      	ldr	r3, [r7, #12]
    7516:	2b00      	cmp	r3, #0
    7518:	da01      	bge.n	751e <wc_GetCTC_HashOID+0x32>
        ret = 0; /* backwards compatibility */
    751a:	2300      	movs	r3, #0
    751c:	60fb      	str	r3, [r7, #12]

    return ret;
    751e:	68fb      	ldr	r3, [r7, #12]
}
    7520:	0018      	movs	r0, r3
    7522:	46bd      	mov	sp, r7
    7524:	b005      	add	sp, #20
    7526:	bd90      	pop	{r4, r7, pc}

00007528 <StoreECC_DSA_Sig>:

#ifdef HAVE_ECC

/* Der Encode r & s ints into out, outLen is (in/out) size */
int StoreECC_DSA_Sig(byte* out, word32* outLen, mp_int* r, mp_int* s)
{
    7528:	b580      	push	{r7, lr}
    752a:	b08c      	sub	sp, #48	; 0x30
    752c:	af00      	add	r7, sp, #0
    752e:	60f8      	str	r0, [r7, #12]
    7530:	60b9      	str	r1, [r7, #8]
    7532:	607a      	str	r2, [r7, #4]
    7534:	603b      	str	r3, [r7, #0]
    word32 idx = 0;
    7536:	2300      	movs	r3, #0
    7538:	62fb      	str	r3, [r7, #44]	; 0x2c
    int    rSz;                           /* encoding size */
    int    sSz;
    word32 headerSz = 4;   /* 2*ASN_TAG + 2*LEN(ENUM) */
    753a:	2304      	movs	r3, #4
    753c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If the leading bit on the INTEGER is a 1, add a leading zero */
    int rLeadingZero = mp_leading_bit(r);
    753e:	687b      	ldr	r3, [r7, #4]
    7540:	0018      	movs	r0, r3
    7542:	f008 fcb1 	bl	fea8 <mp_leading_bit>
    7546:	0003      	movs	r3, r0
    7548:	627b      	str	r3, [r7, #36]	; 0x24
    int sLeadingZero = mp_leading_bit(s);
    754a:	683b      	ldr	r3, [r7, #0]
    754c:	0018      	movs	r0, r3
    754e:	f008 fcab 	bl	fea8 <mp_leading_bit>
    7552:	0003      	movs	r3, r0
    7554:	623b      	str	r3, [r7, #32]
    int rLen = mp_unsigned_bin_size(r);   /* big int size */
    7556:	687b      	ldr	r3, [r7, #4]
    7558:	0018      	movs	r0, r3
    755a:	f008 fc01 	bl	fd60 <mp_unsigned_bin_size>
    755e:	0003      	movs	r3, r0
    7560:	61fb      	str	r3, [r7, #28]
    int sLen = mp_unsigned_bin_size(s);
    7562:	683b      	ldr	r3, [r7, #0]
    7564:	0018      	movs	r0, r3
    7566:	f008 fbfb 	bl	fd60 <mp_unsigned_bin_size>
    756a:	0003      	movs	r3, r0
    756c:	61bb      	str	r3, [r7, #24]

    if (*outLen < (rLen + rLeadingZero + sLen + sLeadingZero +
    756e:	68bb      	ldr	r3, [r7, #8]
    7570:	681a      	ldr	r2, [r3, #0]
    7572:	69f9      	ldr	r1, [r7, #28]
    7574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7576:	18c9      	adds	r1, r1, r3
    7578:	69bb      	ldr	r3, [r7, #24]
    757a:	18c9      	adds	r1, r1, r3
    757c:	6a3b      	ldr	r3, [r7, #32]
    757e:	18cb      	adds	r3, r1, r3
    7580:	0019      	movs	r1, r3
    7582:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7584:	18cb      	adds	r3, r1, r3
                   headerSz + 2))  /* SEQ_TAG + LEN(ENUM) */
    7586:	3302      	adds	r3, #2
    int rLeadingZero = mp_leading_bit(r);
    int sLeadingZero = mp_leading_bit(s);
    int rLen = mp_unsigned_bin_size(r);   /* big int size */
    int sLen = mp_unsigned_bin_size(s);

    if (*outLen < (rLen + rLeadingZero + sLen + sLeadingZero +
    7588:	429a      	cmp	r2, r3
    758a:	d202      	bcs.n	7592 <StoreECC_DSA_Sig+0x6a>
                   headerSz + 2))  /* SEQ_TAG + LEN(ENUM) */
        return BUFFER_E;
    758c:	2384      	movs	r3, #132	; 0x84
    758e:	425b      	negs	r3, r3
    7590:	e03c      	b.n	760c <StoreECC_DSA_Sig+0xe4>

    idx = SetSequence(rLen + rLeadingZero + sLen+sLeadingZero + headerSz, out);
    7592:	69fa      	ldr	r2, [r7, #28]
    7594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7596:	18d2      	adds	r2, r2, r3
    7598:	69bb      	ldr	r3, [r7, #24]
    759a:	18d2      	adds	r2, r2, r3
    759c:	6a3b      	ldr	r3, [r7, #32]
    759e:	18d3      	adds	r3, r2, r3
    75a0:	001a      	movs	r2, r3
    75a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75a4:	18d3      	adds	r3, r2, r3
    75a6:	68fa      	ldr	r2, [r7, #12]
    75a8:	0011      	movs	r1, r2
    75aa:	0018      	movs	r0, r3
    75ac:	f7ff ff88 	bl	74c0 <SetSequence>
    75b0:	0003      	movs	r3, r0
    75b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* store r */
    rSz = SetASNIntMP(r, -1, &out[idx]);
    75b4:	68fa      	ldr	r2, [r7, #12]
    75b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    75b8:	18d2      	adds	r2, r2, r3
    75ba:	2301      	movs	r3, #1
    75bc:	4259      	negs	r1, r3
    75be:	687b      	ldr	r3, [r7, #4]
    75c0:	0018      	movs	r0, r3
    75c2:	f7ff f96b 	bl	689c <SetASNIntMP>
    75c6:	0003      	movs	r3, r0
    75c8:	617b      	str	r3, [r7, #20]
    if (rSz < 0)
    75ca:	697b      	ldr	r3, [r7, #20]
    75cc:	2b00      	cmp	r3, #0
    75ce:	da01      	bge.n	75d4 <StoreECC_DSA_Sig+0xac>
        return rSz;
    75d0:	697b      	ldr	r3, [r7, #20]
    75d2:	e01b      	b.n	760c <StoreECC_DSA_Sig+0xe4>
    idx += rSz;
    75d4:	697b      	ldr	r3, [r7, #20]
    75d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    75d8:	18d3      	adds	r3, r2, r3
    75da:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* store s */
    sSz = SetASNIntMP(s, -1, &out[idx]);
    75dc:	68fa      	ldr	r2, [r7, #12]
    75de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    75e0:	18d2      	adds	r2, r2, r3
    75e2:	2301      	movs	r3, #1
    75e4:	4259      	negs	r1, r3
    75e6:	683b      	ldr	r3, [r7, #0]
    75e8:	0018      	movs	r0, r3
    75ea:	f7ff f957 	bl	689c <SetASNIntMP>
    75ee:	0003      	movs	r3, r0
    75f0:	613b      	str	r3, [r7, #16]
    if (sSz < 0)
    75f2:	693b      	ldr	r3, [r7, #16]
    75f4:	2b00      	cmp	r3, #0
    75f6:	da01      	bge.n	75fc <StoreECC_DSA_Sig+0xd4>
        return sSz;
    75f8:	693b      	ldr	r3, [r7, #16]
    75fa:	e007      	b.n	760c <StoreECC_DSA_Sig+0xe4>
    idx += sSz;
    75fc:	693b      	ldr	r3, [r7, #16]
    75fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7600:	18d3      	adds	r3, r2, r3
    7602:	62fb      	str	r3, [r7, #44]	; 0x2c

    *outLen = idx;
    7604:	68bb      	ldr	r3, [r7, #8]
    7606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7608:	601a      	str	r2, [r3, #0]

    return 0;
    760a:	2300      	movs	r3, #0
}
    760c:	0018      	movs	r0, r3
    760e:	46bd      	mov	sp, r7
    7610:	b00c      	add	sp, #48	; 0x30
    7612:	bd80      	pop	{r7, pc}

00007614 <DecodeECC_DSA_Sig>:


/* Der Decode ECC-DSA Signature, r & s stored as big ints */
int DecodeECC_DSA_Sig(const byte* sig, word32 sigLen, mp_int* r, mp_int* s)
{
    7614:	b580      	push	{r7, lr}
    7616:	b086      	sub	sp, #24
    7618:	af00      	add	r7, sp, #0
    761a:	60f8      	str	r0, [r7, #12]
    761c:	60b9      	str	r1, [r7, #8]
    761e:	607a      	str	r2, [r7, #4]
    7620:	603b      	str	r3, [r7, #0]
    word32 idx = 0;
    7622:	2300      	movs	r3, #0
    7624:	617b      	str	r3, [r7, #20]
    int    len = 0;
    7626:	2300      	movs	r3, #0
    7628:	613b      	str	r3, [r7, #16]

    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
    762a:	68bb      	ldr	r3, [r7, #8]
    762c:	2210      	movs	r2, #16
    762e:	18ba      	adds	r2, r7, r2
    7630:	2114      	movs	r1, #20
    7632:	1879      	adds	r1, r7, r1
    7634:	68f8      	ldr	r0, [r7, #12]
    7636:	f7ff f89f 	bl	6778 <GetSequence>
    763a:	1e03      	subs	r3, r0, #0
    763c:	da02      	bge.n	7644 <DecodeECC_DSA_Sig+0x30>
        return ASN_ECC_KEY_E;
    763e:	23ab      	movs	r3, #171	; 0xab
    7640:	425b      	negs	r3, r3
    7642:	e021      	b.n	7688 <DecodeECC_DSA_Sig+0x74>
    }

#ifndef NO_STRICT_ECDSA_LEN
    /* enable strict length checking for signature */
    if (sigLen != idx + (word32)len) {
    7644:	697b      	ldr	r3, [r7, #20]
    7646:	693a      	ldr	r2, [r7, #16]
    7648:	189a      	adds	r2, r3, r2
    764a:	68bb      	ldr	r3, [r7, #8]
    764c:	429a      	cmp	r2, r3
    764e:	d002      	beq.n	7656 <DecodeECC_DSA_Sig+0x42>
        return ASN_ECC_KEY_E;
    7650:	23ab      	movs	r3, #171	; 0xab
    7652:	425b      	negs	r3, r3
    7654:	e018      	b.n	7688 <DecodeECC_DSA_Sig+0x74>
    if ((word32)len > (sigLen - idx)) {
        return ASN_ECC_KEY_E;
    }
#endif

    if (GetInt(r, sig, &idx, sigLen) < 0) {
    7656:	68bb      	ldr	r3, [r7, #8]
    7658:	2214      	movs	r2, #20
    765a:	18ba      	adds	r2, r7, r2
    765c:	68f9      	ldr	r1, [r7, #12]
    765e:	6878      	ldr	r0, [r7, #4]
    7660:	f7ff f99c 	bl	699c <GetInt>
    7664:	1e03      	subs	r3, r0, #0
    7666:	da02      	bge.n	766e <DecodeECC_DSA_Sig+0x5a>
        return ASN_ECC_KEY_E;
    7668:	23ab      	movs	r3, #171	; 0xab
    766a:	425b      	negs	r3, r3
    766c:	e00c      	b.n	7688 <DecodeECC_DSA_Sig+0x74>
    }

    if (GetInt(s, sig, &idx, sigLen) < 0) {
    766e:	68bb      	ldr	r3, [r7, #8]
    7670:	2214      	movs	r2, #20
    7672:	18ba      	adds	r2, r7, r2
    7674:	68f9      	ldr	r1, [r7, #12]
    7676:	6838      	ldr	r0, [r7, #0]
    7678:	f7ff f990 	bl	699c <GetInt>
    767c:	1e03      	subs	r3, r0, #0
    767e:	da02      	bge.n	7686 <DecodeECC_DSA_Sig+0x72>
        return ASN_ECC_KEY_E;
    7680:	23ab      	movs	r3, #171	; 0xab
    7682:	425b      	negs	r3, r3
    7684:	e000      	b.n	7688 <DecodeECC_DSA_Sig+0x74>
    }

    return 0;
    7686:	2300      	movs	r3, #0
}
    7688:	0018      	movs	r0, r3
    768a:	46bd      	mov	sp, r7
    768c:	b006      	add	sp, #24
    768e:	bd80      	pop	{r7, pc}

00007690 <wc_EccPrivateKeyDecode>:


int wc_EccPrivateKeyDecode(const byte* input, word32* inOutIdx, ecc_key* key,
                        word32 inSz)
{
    7690:	b590      	push	{r4, r7, lr}
    7692:	b095      	sub	sp, #84	; 0x54
    7694:	af02      	add	r7, sp, #8
    7696:	60f8      	str	r0, [r7, #12]
    7698:	60b9      	str	r1, [r7, #8]
    769a:	607a      	str	r2, [r7, #4]
    769c:	603b      	str	r3, [r7, #0]
    word32 oidSum;
    int    version, length;
    int    privSz, pubSz = 0;
    769e:	2300      	movs	r3, #0
    76a0:	647b      	str	r3, [r7, #68]	; 0x44
    byte   b;
    int    ret = 0;
    76a2:	2300      	movs	r3, #0
    76a4:	643b      	str	r3, [r7, #64]	; 0x40
    int    curve_id = ECC_CURVE_DEF;
    76a6:	2300      	movs	r3, #0
    76a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    byte* pub;
#else
    byte priv[ECC_MAXSIZE+1];
    byte pub[2*(ECC_MAXSIZE+1)]; /* public key has two parts plus header */
#endif
    byte* pubData = NULL;
    76aa:	2300      	movs	r3, #0
    76ac:	63bb      	str	r3, [r7, #56]	; 0x38

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0)
    76ae:	68fb      	ldr	r3, [r7, #12]
    76b0:	2b00      	cmp	r3, #0
    76b2:	d008      	beq.n	76c6 <wc_EccPrivateKeyDecode+0x36>
    76b4:	68bb      	ldr	r3, [r7, #8]
    76b6:	2b00      	cmp	r3, #0
    76b8:	d005      	beq.n	76c6 <wc_EccPrivateKeyDecode+0x36>
    76ba:	687b      	ldr	r3, [r7, #4]
    76bc:	2b00      	cmp	r3, #0
    76be:	d002      	beq.n	76c6 <wc_EccPrivateKeyDecode+0x36>
    76c0:	683b      	ldr	r3, [r7, #0]
    76c2:	2b00      	cmp	r3, #0
    76c4:	d102      	bne.n	76cc <wc_EccPrivateKeyDecode+0x3c>
        return BAD_FUNC_ARG;
    76c6:	23ad      	movs	r3, #173	; 0xad
    76c8:	425b      	negs	r3, r3
    76ca:	e141      	b.n	7950 <wc_EccPrivateKeyDecode+0x2c0>

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
    76cc:	683b      	ldr	r3, [r7, #0]
    76ce:	2210      	movs	r2, #16
    76d0:	18ba      	adds	r2, r7, r2
    76d2:	68b9      	ldr	r1, [r7, #8]
    76d4:	68f8      	ldr	r0, [r7, #12]
    76d6:	f7ff f84f 	bl	6778 <GetSequence>
    76da:	1e03      	subs	r3, r0, #0
    76dc:	da02      	bge.n	76e4 <wc_EccPrivateKeyDecode+0x54>
        return ASN_PARSE_E;
    76de:	238c      	movs	r3, #140	; 0x8c
    76e0:	425b      	negs	r3, r3
    76e2:	e135      	b.n	7950 <wc_EccPrivateKeyDecode+0x2c0>

    if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
    76e4:	683b      	ldr	r3, [r7, #0]
    76e6:	2214      	movs	r2, #20
    76e8:	18ba      	adds	r2, r7, r2
    76ea:	68b9      	ldr	r1, [r7, #8]
    76ec:	68f8      	ldr	r0, [r7, #12]
    76ee:	f7ff f91b 	bl	6928 <GetMyVersion>
    76f2:	1e03      	subs	r3, r0, #0
    76f4:	da02      	bge.n	76fc <wc_EccPrivateKeyDecode+0x6c>
        return ASN_PARSE_E;
    76f6:	238c      	movs	r3, #140	; 0x8c
    76f8:	425b      	negs	r3, r3
    76fa:	e129      	b.n	7950 <wc_EccPrivateKeyDecode+0x2c0>

    if (*inOutIdx >= inSz)
    76fc:	68bb      	ldr	r3, [r7, #8]
    76fe:	681a      	ldr	r2, [r3, #0]
    7700:	683b      	ldr	r3, [r7, #0]
    7702:	429a      	cmp	r2, r3
    7704:	d302      	bcc.n	770c <wc_EccPrivateKeyDecode+0x7c>
        return ASN_PARSE_E;
    7706:	238c      	movs	r3, #140	; 0x8c
    7708:	425b      	negs	r3, r3
    770a:	e121      	b.n	7950 <wc_EccPrivateKeyDecode+0x2c0>

    b = input[*inOutIdx];
    770c:	68bb      	ldr	r3, [r7, #8]
    770e:	681b      	ldr	r3, [r3, #0]
    7710:	68fa      	ldr	r2, [r7, #12]
    7712:	18d2      	adds	r2, r2, r3
    7714:	2337      	movs	r3, #55	; 0x37
    7716:	18fb      	adds	r3, r7, r3
    7718:	7812      	ldrb	r2, [r2, #0]
    771a:	701a      	strb	r2, [r3, #0]
    *inOutIdx += 1;
    771c:	68bb      	ldr	r3, [r7, #8]
    771e:	681b      	ldr	r3, [r3, #0]
    7720:	1c5a      	adds	r2, r3, #1
    7722:	68bb      	ldr	r3, [r7, #8]
    7724:	601a      	str	r2, [r3, #0]

    /* priv type */
    if (b != 4 && b != 6 && b != 7)
    7726:	2337      	movs	r3, #55	; 0x37
    7728:	18fb      	adds	r3, r7, r3
    772a:	781b      	ldrb	r3, [r3, #0]
    772c:	2b04      	cmp	r3, #4
    772e:	d00c      	beq.n	774a <wc_EccPrivateKeyDecode+0xba>
    7730:	2337      	movs	r3, #55	; 0x37
    7732:	18fb      	adds	r3, r7, r3
    7734:	781b      	ldrb	r3, [r3, #0]
    7736:	2b06      	cmp	r3, #6
    7738:	d007      	beq.n	774a <wc_EccPrivateKeyDecode+0xba>
    773a:	2337      	movs	r3, #55	; 0x37
    773c:	18fb      	adds	r3, r7, r3
    773e:	781b      	ldrb	r3, [r3, #0]
    7740:	2b07      	cmp	r3, #7
    7742:	d002      	beq.n	774a <wc_EccPrivateKeyDecode+0xba>
        return ASN_PARSE_E;
    7744:	238c      	movs	r3, #140	; 0x8c
    7746:	425b      	negs	r3, r3
    7748:	e102      	b.n	7950 <wc_EccPrivateKeyDecode+0x2c0>

    if (GetLength(input, inOutIdx, &length, inSz) < 0)
    774a:	683b      	ldr	r3, [r7, #0]
    774c:	2210      	movs	r2, #16
    774e:	18ba      	adds	r2, r7, r2
    7750:	68b9      	ldr	r1, [r7, #8]
    7752:	68f8      	ldr	r0, [r7, #12]
    7754:	f7fe ff30 	bl	65b8 <GetLength>
    7758:	1e03      	subs	r3, r0, #0
    775a:	da02      	bge.n	7762 <wc_EccPrivateKeyDecode+0xd2>
        return ASN_PARSE_E;
    775c:	238c      	movs	r3, #140	; 0x8c
    775e:	425b      	negs	r3, r3
    7760:	e0f6      	b.n	7950 <wc_EccPrivateKeyDecode+0x2c0>

    if (length > ECC_MAXSIZE)
    7762:	693b      	ldr	r3, [r7, #16]
    7764:	2b42      	cmp	r3, #66	; 0x42
    7766:	dd02      	ble.n	776e <wc_EccPrivateKeyDecode+0xde>
        return BUFFER_E;
    7768:	2384      	movs	r3, #132	; 0x84
    776a:	425b      	negs	r3, r3
    776c:	e0f0      	b.n	7950 <wc_EccPrivateKeyDecode+0x2c0>

#ifdef WOLFSSL_SMALL_STACK
    priv = (byte*)XMALLOC(ECC_MAXSIZE+1, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
    776e:	2043      	movs	r0, #67	; 0x43
    7770:	f01d ff88 	bl	25684 <malloc>
    7774:	0003      	movs	r3, r0
    7776:	633b      	str	r3, [r7, #48]	; 0x30
    if (priv == NULL)
    7778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    777a:	2b00      	cmp	r3, #0
    777c:	d102      	bne.n	7784 <wc_EccPrivateKeyDecode+0xf4>
        return MEMORY_E;
    777e:	237d      	movs	r3, #125	; 0x7d
    7780:	425b      	negs	r3, r3
    7782:	e0e5      	b.n	7950 <wc_EccPrivateKeyDecode+0x2c0>

    pub = (byte*)XMALLOC(2*(ECC_MAXSIZE+1), key->heap, DYNAMIC_TYPE_TMP_BUFFER);
    7784:	2086      	movs	r0, #134	; 0x86
    7786:	f01d ff7d 	bl	25684 <malloc>
    778a:	0003      	movs	r3, r0
    778c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (pub == NULL) {
    778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7790:	2b00      	cmp	r3, #0
    7792:	d10b      	bne.n	77ac <wc_EccPrivateKeyDecode+0x11c>
        XFREE(priv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
    7794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7796:	62bb      	str	r3, [r7, #40]	; 0x28
    7798:	6abb      	ldr	r3, [r7, #40]	; 0x28
    779a:	2b00      	cmp	r3, #0
    779c:	d003      	beq.n	77a6 <wc_EccPrivateKeyDecode+0x116>
    779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    77a0:	0018      	movs	r0, r3
    77a2:	f01d ff79 	bl	25698 <free>
        return MEMORY_E;
    77a6:	237d      	movs	r3, #125	; 0x7d
    77a8:	425b      	negs	r3, r3
    77aa:	e0d1      	b.n	7950 <wc_EccPrivateKeyDecode+0x2c0>
    }
#endif

    /* priv key */
    privSz = length;
    77ac:	693b      	ldr	r3, [r7, #16]
    77ae:	627b      	str	r3, [r7, #36]	; 0x24
    XMEMCPY(priv, &input[*inOutIdx], privSz);
    77b0:	68bb      	ldr	r3, [r7, #8]
    77b2:	681b      	ldr	r3, [r3, #0]
    77b4:	68fa      	ldr	r2, [r7, #12]
    77b6:	18d1      	adds	r1, r2, r3
    77b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    77ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    77bc:	0018      	movs	r0, r3
    77be:	f01d ff96 	bl	256ee <memcpy>
    *inOutIdx += length;
    77c2:	68bb      	ldr	r3, [r7, #8]
    77c4:	681b      	ldr	r3, [r3, #0]
    77c6:	693a      	ldr	r2, [r7, #16]
    77c8:	189a      	adds	r2, r3, r2
    77ca:	68bb      	ldr	r3, [r7, #8]
    77cc:	601a      	str	r2, [r3, #0]

    if (ret == 0 && (*inOutIdx + 1) < inSz) {
    77ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    77d0:	2b00      	cmp	r3, #0
    77d2:	d143      	bne.n	785c <wc_EccPrivateKeyDecode+0x1cc>
    77d4:	68bb      	ldr	r3, [r7, #8]
    77d6:	681b      	ldr	r3, [r3, #0]
    77d8:	1c5a      	adds	r2, r3, #1
    77da:	683b      	ldr	r3, [r7, #0]
    77dc:	429a      	cmp	r2, r3
    77de:	d23d      	bcs.n	785c <wc_EccPrivateKeyDecode+0x1cc>
        /* prefix 0, may have */
        b = input[*inOutIdx];
    77e0:	68bb      	ldr	r3, [r7, #8]
    77e2:	681b      	ldr	r3, [r3, #0]
    77e4:	68fa      	ldr	r2, [r7, #12]
    77e6:	18d2      	adds	r2, r2, r3
    77e8:	2337      	movs	r3, #55	; 0x37
    77ea:	18fb      	adds	r3, r7, r3
    77ec:	7812      	ldrb	r2, [r2, #0]
    77ee:	701a      	strb	r2, [r3, #0]
        if (b == ECC_PREFIX_0) {
    77f0:	2337      	movs	r3, #55	; 0x37
    77f2:	18fb      	adds	r3, r7, r3
    77f4:	781b      	ldrb	r3, [r3, #0]
    77f6:	2ba0      	cmp	r3, #160	; 0xa0
    77f8:	d130      	bne.n	785c <wc_EccPrivateKeyDecode+0x1cc>
            *inOutIdx += 1;
    77fa:	68bb      	ldr	r3, [r7, #8]
    77fc:	681b      	ldr	r3, [r3, #0]
    77fe:	1c5a      	adds	r2, r3, #1
    7800:	68bb      	ldr	r3, [r7, #8]
    7802:	601a      	str	r2, [r3, #0]

            if (GetLength(input, inOutIdx, &length, inSz) <= 0)
    7804:	683b      	ldr	r3, [r7, #0]
    7806:	2210      	movs	r2, #16
    7808:	18ba      	adds	r2, r7, r2
    780a:	68b9      	ldr	r1, [r7, #8]
    780c:	68f8      	ldr	r0, [r7, #12]
    780e:	f7fe fed3 	bl	65b8 <GetLength>
    7812:	1e03      	subs	r3, r0, #0
    7814:	dc03      	bgt.n	781e <wc_EccPrivateKeyDecode+0x18e>
                ret = ASN_PARSE_E;
    7816:	238c      	movs	r3, #140	; 0x8c
    7818:	425b      	negs	r3, r3
    781a:	643b      	str	r3, [r7, #64]	; 0x40
    781c:	e01e      	b.n	785c <wc_EccPrivateKeyDecode+0x1cc>
            else {
                ret = GetObjectId(input, inOutIdx, &oidSum, oidIgnoreType,
    781e:	2318      	movs	r3, #24
    7820:	18fa      	adds	r2, r7, r3
    7822:	68b9      	ldr	r1, [r7, #8]
    7824:	68f8      	ldr	r0, [r7, #12]
    7826:	683b      	ldr	r3, [r7, #0]
    7828:	9300      	str	r3, [sp, #0]
    782a:	2312      	movs	r3, #18
    782c:	f7ff fba6 	bl	6f7c <GetObjectId>
    7830:	0003      	movs	r3, r0
    7832:	643b      	str	r3, [r7, #64]	; 0x40
                                  inSz);
                if (ret == 0) {
    7834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7836:	2b00      	cmp	r3, #0
    7838:	d110      	bne.n	785c <wc_EccPrivateKeyDecode+0x1cc>
                    if ((ret = CheckCurve(oidSum)) < 0)
    783a:	69bb      	ldr	r3, [r7, #24]
    783c:	0018      	movs	r0, r3
    783e:	f7ff fc25 	bl	708c <CheckCurve>
    7842:	0003      	movs	r3, r0
    7844:	643b      	str	r3, [r7, #64]	; 0x40
    7846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7848:	2b00      	cmp	r3, #0
    784a:	da03      	bge.n	7854 <wc_EccPrivateKeyDecode+0x1c4>
                        ret = ECC_CURVE_OID_E;
    784c:	23ac      	movs	r3, #172	; 0xac
    784e:	425b      	negs	r3, r3
    7850:	643b      	str	r3, [r7, #64]	; 0x40
    7852:	e003      	b.n	785c <wc_EccPrivateKeyDecode+0x1cc>
                    else {
                        curve_id = ret;
    7854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7856:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ret = 0;
    7858:	2300      	movs	r3, #0
    785a:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }
        }
    }

    if (ret == 0 && (*inOutIdx + 1) < inSz) {
    785c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    785e:	2b00      	cmp	r3, #0
    7860:	d153      	bne.n	790a <wc_EccPrivateKeyDecode+0x27a>
    7862:	68bb      	ldr	r3, [r7, #8]
    7864:	681b      	ldr	r3, [r3, #0]
    7866:	1c5a      	adds	r2, r3, #1
    7868:	683b      	ldr	r3, [r7, #0]
    786a:	429a      	cmp	r2, r3
    786c:	d24d      	bcs.n	790a <wc_EccPrivateKeyDecode+0x27a>
        /* prefix 1 */
        b = input[*inOutIdx];
    786e:	68bb      	ldr	r3, [r7, #8]
    7870:	681b      	ldr	r3, [r3, #0]
    7872:	68fa      	ldr	r2, [r7, #12]
    7874:	18d2      	adds	r2, r2, r3
    7876:	2337      	movs	r3, #55	; 0x37
    7878:	18fb      	adds	r3, r7, r3
    787a:	7812      	ldrb	r2, [r2, #0]
    787c:	701a      	strb	r2, [r3, #0]
        *inOutIdx += 1;
    787e:	68bb      	ldr	r3, [r7, #8]
    7880:	681b      	ldr	r3, [r3, #0]
    7882:	1c5a      	adds	r2, r3, #1
    7884:	68bb      	ldr	r3, [r7, #8]
    7886:	601a      	str	r2, [r3, #0]

        if (b != ECC_PREFIX_1) {
    7888:	2337      	movs	r3, #55	; 0x37
    788a:	18fb      	adds	r3, r7, r3
    788c:	781b      	ldrb	r3, [r3, #0]
    788e:	2ba1      	cmp	r3, #161	; 0xa1
    7890:	d003      	beq.n	789a <wc_EccPrivateKeyDecode+0x20a>
            ret = ASN_ECC_KEY_E;
    7892:	23ab      	movs	r3, #171	; 0xab
    7894:	425b      	negs	r3, r3
    7896:	643b      	str	r3, [r7, #64]	; 0x40
    7898:	e037      	b.n	790a <wc_EccPrivateKeyDecode+0x27a>
        }
        else if (GetLength(input, inOutIdx, &length, inSz) <= 0) {
    789a:	683b      	ldr	r3, [r7, #0]
    789c:	2210      	movs	r2, #16
    789e:	18ba      	adds	r2, r7, r2
    78a0:	68b9      	ldr	r1, [r7, #8]
    78a2:	68f8      	ldr	r0, [r7, #12]
    78a4:	f7fe fe88 	bl	65b8 <GetLength>
    78a8:	1e03      	subs	r3, r0, #0
    78aa:	dc03      	bgt.n	78b4 <wc_EccPrivateKeyDecode+0x224>
            ret = ASN_PARSE_E;
    78ac:	238c      	movs	r3, #140	; 0x8c
    78ae:	425b      	negs	r3, r3
    78b0:	643b      	str	r3, [r7, #64]	; 0x40
    78b2:	e02a      	b.n	790a <wc_EccPrivateKeyDecode+0x27a>
        }
        else {
            /* key header */
            ret = CheckBitString(input, inOutIdx, &length, inSz, 0, NULL);
    78b4:	683c      	ldr	r4, [r7, #0]
    78b6:	2310      	movs	r3, #16
    78b8:	18fa      	adds	r2, r7, r3
    78ba:	68b9      	ldr	r1, [r7, #8]
    78bc:	68f8      	ldr	r0, [r7, #12]
    78be:	2300      	movs	r3, #0
    78c0:	9301      	str	r3, [sp, #4]
    78c2:	2300      	movs	r3, #0
    78c4:	9300      	str	r3, [sp, #0]
    78c6:	0023      	movs	r3, r4
    78c8:	f7ff f8a6 	bl	6a18 <CheckBitString>
    78cc:	0003      	movs	r3, r0
    78ce:	643b      	str	r3, [r7, #64]	; 0x40
            if (ret == 0) {
    78d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    78d2:	2b00      	cmp	r3, #0
    78d4:	d119      	bne.n	790a <wc_EccPrivateKeyDecode+0x27a>
                /* pub key */
                pubSz = length;
    78d6:	693b      	ldr	r3, [r7, #16]
    78d8:	647b      	str	r3, [r7, #68]	; 0x44
                if (pubSz < 2*(ECC_MAXSIZE+1)) {
    78da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    78dc:	2b85      	cmp	r3, #133	; 0x85
    78de:	dc11      	bgt.n	7904 <wc_EccPrivateKeyDecode+0x274>
                    XMEMCPY(pub, &input[*inOutIdx], pubSz);
    78e0:	68bb      	ldr	r3, [r7, #8]
    78e2:	681b      	ldr	r3, [r3, #0]
    78e4:	68fa      	ldr	r2, [r7, #12]
    78e6:	18d1      	adds	r1, r2, r3
    78e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    78ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    78ec:	0018      	movs	r0, r3
    78ee:	f01d fefe 	bl	256ee <memcpy>
                    *inOutIdx += length;
    78f2:	68bb      	ldr	r3, [r7, #8]
    78f4:	681b      	ldr	r3, [r3, #0]
    78f6:	693a      	ldr	r2, [r7, #16]
    78f8:	189a      	adds	r2, r3, r2
    78fa:	68bb      	ldr	r3, [r7, #8]
    78fc:	601a      	str	r2, [r3, #0]
                    pubData = pub;
    78fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7900:	63bb      	str	r3, [r7, #56]	; 0x38
    7902:	e002      	b.n	790a <wc_EccPrivateKeyDecode+0x27a>
                }
                else
                    ret = BUFFER_E;
    7904:	2384      	movs	r3, #132	; 0x84
    7906:	425b      	negs	r3, r3
    7908:	643b      	str	r3, [r7, #64]	; 0x40
            }
        }
    }

    if (ret == 0) {
    790a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    790c:	2b00      	cmp	r3, #0
    790e:	d10c      	bne.n	792a <wc_EccPrivateKeyDecode+0x29a>
        ret = wc_ecc_import_private_key_ex(priv, privSz, pubData, pubSz, key,
    7910:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7912:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    7914:	6bba      	ldr	r2, [r7, #56]	; 0x38
    7916:	6b38      	ldr	r0, [r7, #48]	; 0x30
    7918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    791a:	9301      	str	r3, [sp, #4]
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	9300      	str	r3, [sp, #0]
    7920:	0023      	movs	r3, r4
    7922:	f007 f9a9 	bl	ec78 <wc_ecc_import_private_key_ex>
    7926:	0003      	movs	r3, r0
    7928:	643b      	str	r3, [r7, #64]	; 0x40
                                                                      curve_id);
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(priv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
    792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    792c:	623b      	str	r3, [r7, #32]
    792e:	6a3b      	ldr	r3, [r7, #32]
    7930:	2b00      	cmp	r3, #0
    7932:	d003      	beq.n	793c <wc_EccPrivateKeyDecode+0x2ac>
    7934:	6a3b      	ldr	r3, [r7, #32]
    7936:	0018      	movs	r0, r3
    7938:	f01d feae 	bl	25698 <free>
    XFREE(pub,  key->heap, DYNAMIC_TYPE_TMP_BUFFER);
    793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    793e:	61fb      	str	r3, [r7, #28]
    7940:	69fb      	ldr	r3, [r7, #28]
    7942:	2b00      	cmp	r3, #0
    7944:	d003      	beq.n	794e <wc_EccPrivateKeyDecode+0x2be>
    7946:	69fb      	ldr	r3, [r7, #28]
    7948:	0018      	movs	r0, r3
    794a:	f01d fea5 	bl	25698 <free>
#endif

    return ret;
    794e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
    7950:	0018      	movs	r0, r3
    7952:	46bd      	mov	sp, r7
    7954:	b013      	add	sp, #76	; 0x4c
    7956:	bd90      	pop	{r4, r7, pc}

00007958 <wc_EccPublicKeyDecode>:
}
#endif /* WOLFSSL_CUSTOM_CURVES */

int wc_EccPublicKeyDecode(const byte* input, word32* inOutIdx,
                          ecc_key* key, word32 inSz)
{
    7958:	b590      	push	{r4, r7, lr}
    795a:	b08b      	sub	sp, #44	; 0x2c
    795c:	af02      	add	r7, sp, #8
    795e:	60f8      	str	r0, [r7, #12]
    7960:	60b9      	str	r1, [r7, #8]
    7962:	607a      	str	r2, [r7, #4]
    7964:	603b      	str	r3, [r7, #0]
    int    length;
    int    ret;
    int    curve_id = ECC_CURVE_DEF;
    7966:	2300      	movs	r3, #0
    7968:	61fb      	str	r3, [r7, #28]
    word32 oidSum;

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0)
    796a:	68fb      	ldr	r3, [r7, #12]
    796c:	2b00      	cmp	r3, #0
    796e:	d008      	beq.n	7982 <wc_EccPublicKeyDecode+0x2a>
    7970:	68bb      	ldr	r3, [r7, #8]
    7972:	2b00      	cmp	r3, #0
    7974:	d005      	beq.n	7982 <wc_EccPublicKeyDecode+0x2a>
    7976:	687b      	ldr	r3, [r7, #4]
    7978:	2b00      	cmp	r3, #0
    797a:	d002      	beq.n	7982 <wc_EccPublicKeyDecode+0x2a>
    797c:	683b      	ldr	r3, [r7, #0]
    797e:	2b00      	cmp	r3, #0
    7980:	d102      	bne.n	7988 <wc_EccPublicKeyDecode+0x30>
        return BAD_FUNC_ARG;
    7982:	23ad      	movs	r3, #173	; 0xad
    7984:	425b      	negs	r3, r3
    7986:	e07f      	b.n	7a88 <wc_EccPublicKeyDecode+0x130>

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
    7988:	683b      	ldr	r3, [r7, #0]
    798a:	2214      	movs	r2, #20
    798c:	18ba      	adds	r2, r7, r2
    798e:	68b9      	ldr	r1, [r7, #8]
    7990:	68f8      	ldr	r0, [r7, #12]
    7992:	f7fe fef1 	bl	6778 <GetSequence>
    7996:	1e03      	subs	r3, r0, #0
    7998:	da02      	bge.n	79a0 <wc_EccPublicKeyDecode+0x48>
        return ASN_PARSE_E;
    799a:	238c      	movs	r3, #140	; 0x8c
    799c:	425b      	negs	r3, r3
    799e:	e073      	b.n	7a88 <wc_EccPublicKeyDecode+0x130>

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
    79a0:	683b      	ldr	r3, [r7, #0]
    79a2:	2214      	movs	r2, #20
    79a4:	18ba      	adds	r2, r7, r2
    79a6:	68b9      	ldr	r1, [r7, #8]
    79a8:	68f8      	ldr	r0, [r7, #12]
    79aa:	f7fe fee5 	bl	6778 <GetSequence>
    79ae:	1e03      	subs	r3, r0, #0
    79b0:	da02      	bge.n	79b8 <wc_EccPublicKeyDecode+0x60>
        return ASN_PARSE_E;
    79b2:	238c      	movs	r3, #140	; 0x8c
    79b4:	425b      	negs	r3, r3
    79b6:	e067      	b.n	7a88 <wc_EccPublicKeyDecode+0x130>

    ret = SkipObjectId(input, inOutIdx, inSz);
    79b8:	683a      	ldr	r2, [r7, #0]
    79ba:	68b9      	ldr	r1, [r7, #8]
    79bc:	68fb      	ldr	r3, [r7, #12]
    79be:	0018      	movs	r0, r3
    79c0:	f7ff fb40 	bl	7044 <SkipObjectId>
    79c4:	0003      	movs	r3, r0
    79c6:	61bb      	str	r3, [r7, #24]
    if (ret != 0)
    79c8:	69bb      	ldr	r3, [r7, #24]
    79ca:	2b00      	cmp	r3, #0
    79cc:	d001      	beq.n	79d2 <wc_EccPublicKeyDecode+0x7a>
        return ret;
    79ce:	69bb      	ldr	r3, [r7, #24]
    79d0:	e05a      	b.n	7a88 <wc_EccPublicKeyDecode+0x130>

    if (*inOutIdx >= inSz) {
    79d2:	68bb      	ldr	r3, [r7, #8]
    79d4:	681a      	ldr	r2, [r3, #0]
    79d6:	683b      	ldr	r3, [r7, #0]
    79d8:	429a      	cmp	r2, r3
    79da:	d302      	bcc.n	79e2 <wc_EccPublicKeyDecode+0x8a>
        return BUFFER_E;
    79dc:	2384      	movs	r3, #132	; 0x84
    79de:	425b      	negs	r3, r3
    79e0:	e052      	b.n	7a88 <wc_EccPublicKeyDecode+0x130>
    }

    if (input[*inOutIdx] == (ASN_SEQUENCE | ASN_CONSTRUCTED)) {
    79e2:	68bb      	ldr	r3, [r7, #8]
    79e4:	681b      	ldr	r3, [r3, #0]
    79e6:	68fa      	ldr	r2, [r7, #12]
    79e8:	18d3      	adds	r3, r2, r3
    79ea:	781b      	ldrb	r3, [r3, #0]
    79ec:	2b30      	cmp	r3, #48	; 0x30
    79ee:	d102      	bne.n	79f6 <wc_EccPublicKeyDecode+0x9e>
            wc_ecc_free_curve(curve, key->heap);

        if (ret < 0)
            return ret;
#else
        return ASN_PARSE_E;
    79f0:	238c      	movs	r3, #140	; 0x8c
    79f2:	425b      	negs	r3, r3
    79f4:	e048      	b.n	7a88 <wc_EccPublicKeyDecode+0x130>
#endif /* WOLFSSL_CUSTOM_CURVES */
    }
    else {
        /* ecc params information */
        ret = GetObjectId(input, inOutIdx, &oidSum, oidIgnoreType, inSz);
    79f6:	2310      	movs	r3, #16
    79f8:	18fa      	adds	r2, r7, r3
    79fa:	68b9      	ldr	r1, [r7, #8]
    79fc:	68f8      	ldr	r0, [r7, #12]
    79fe:	683b      	ldr	r3, [r7, #0]
    7a00:	9300      	str	r3, [sp, #0]
    7a02:	2312      	movs	r3, #18
    7a04:	f7ff faba 	bl	6f7c <GetObjectId>
    7a08:	0003      	movs	r3, r0
    7a0a:	61bb      	str	r3, [r7, #24]
        if (ret != 0)
    7a0c:	69bb      	ldr	r3, [r7, #24]
    7a0e:	2b00      	cmp	r3, #0
    7a10:	d001      	beq.n	7a16 <wc_EccPublicKeyDecode+0xbe>
            return ret;
    7a12:	69bb      	ldr	r3, [r7, #24]
    7a14:	e038      	b.n	7a88 <wc_EccPublicKeyDecode+0x130>

        /* get curve id */
        curve_id = wc_ecc_get_oid(oidSum, NULL, 0);
    7a16:	693b      	ldr	r3, [r7, #16]
    7a18:	2200      	movs	r2, #0
    7a1a:	2100      	movs	r1, #0
    7a1c:	0018      	movs	r0, r3
    7a1e:	f007 fc9f 	bl	f360 <wc_ecc_get_oid>
    7a22:	0003      	movs	r3, r0
    7a24:	61fb      	str	r3, [r7, #28]
        if (curve_id < 0)
    7a26:	69fb      	ldr	r3, [r7, #28]
    7a28:	2b00      	cmp	r3, #0
    7a2a:	da02      	bge.n	7a32 <wc_EccPublicKeyDecode+0xda>
            return ECC_CURVE_OID_E;
    7a2c:	23ac      	movs	r3, #172	; 0xac
    7a2e:	425b      	negs	r3, r3
    7a30:	e02a      	b.n	7a88 <wc_EccPublicKeyDecode+0x130>
    }

    /* key header */
    ret = CheckBitString(input, inOutIdx, &length, inSz, 1, NULL);
    7a32:	683c      	ldr	r4, [r7, #0]
    7a34:	2314      	movs	r3, #20
    7a36:	18fa      	adds	r2, r7, r3
    7a38:	68b9      	ldr	r1, [r7, #8]
    7a3a:	68f8      	ldr	r0, [r7, #12]
    7a3c:	2300      	movs	r3, #0
    7a3e:	9301      	str	r3, [sp, #4]
    7a40:	2301      	movs	r3, #1
    7a42:	9300      	str	r3, [sp, #0]
    7a44:	0023      	movs	r3, r4
    7a46:	f7fe ffe7 	bl	6a18 <CheckBitString>
    7a4a:	0003      	movs	r3, r0
    7a4c:	61bb      	str	r3, [r7, #24]
    if (ret != 0)
    7a4e:	69bb      	ldr	r3, [r7, #24]
    7a50:	2b00      	cmp	r3, #0
    7a52:	d001      	beq.n	7a58 <wc_EccPublicKeyDecode+0x100>
        return ret;
    7a54:	69bb      	ldr	r3, [r7, #24]
    7a56:	e017      	b.n	7a88 <wc_EccPublicKeyDecode+0x130>

    /* This is the raw point data compressed or uncompressed. */
    if (wc_ecc_import_x963_ex(input + *inOutIdx, inSz - *inOutIdx, key,
    7a58:	68bb      	ldr	r3, [r7, #8]
    7a5a:	681b      	ldr	r3, [r3, #0]
    7a5c:	68fa      	ldr	r2, [r7, #12]
    7a5e:	18d0      	adds	r0, r2, r3
    7a60:	68bb      	ldr	r3, [r7, #8]
    7a62:	681b      	ldr	r3, [r3, #0]
    7a64:	683a      	ldr	r2, [r7, #0]
    7a66:	1ad1      	subs	r1, r2, r3
    7a68:	69fb      	ldr	r3, [r7, #28]
    7a6a:	687a      	ldr	r2, [r7, #4]
    7a6c:	f006 ff4a 	bl	e904 <wc_ecc_import_x963_ex>
    7a70:	1e03      	subs	r3, r0, #0
    7a72:	d002      	beq.n	7a7a <wc_EccPublicKeyDecode+0x122>
                                                            curve_id) != 0) {
        return ASN_ECC_KEY_E;
    7a74:	23ab      	movs	r3, #171	; 0xab
    7a76:	425b      	negs	r3, r3
    7a78:	e006      	b.n	7a88 <wc_EccPublicKeyDecode+0x130>
    }

    *inOutIdx += length;
    7a7a:	68bb      	ldr	r3, [r7, #8]
    7a7c:	681b      	ldr	r3, [r3, #0]
    7a7e:	697a      	ldr	r2, [r7, #20]
    7a80:	189a      	adds	r2, r3, r2
    7a82:	68bb      	ldr	r3, [r7, #8]
    7a84:	601a      	str	r2, [r3, #0]

    return 0;
    7a86:	2300      	movs	r3, #0
}
    7a88:	0018      	movs	r0, r3
    7a8a:	46bd      	mov	sp, r7
    7a8c:	b009      	add	sp, #36	; 0x24
    7a8e:	bd90      	pop	{r4, r7, pc}

00007a90 <rotlFixed>:
    }

#else /* generic */

    STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
    {
    7a90:	b580      	push	{r7, lr}
    7a92:	b082      	sub	sp, #8
    7a94:	af00      	add	r7, sp, #0
    7a96:	6078      	str	r0, [r7, #4]
    7a98:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    7a9a:	683b      	ldr	r3, [r7, #0]
    7a9c:	2220      	movs	r2, #32
    7a9e:	1ad3      	subs	r3, r2, r3
    7aa0:	687a      	ldr	r2, [r7, #4]
    7aa2:	41da      	rors	r2, r3
    7aa4:	0013      	movs	r3, r2
    }
    7aa6:	0018      	movs	r0, r3
    7aa8:	46bd      	mov	sp, r7
    7aaa:	b002      	add	sp, #8
    7aac:	bd80      	pop	{r7, pc}
    7aae:	46c0      	nop			; (mov r8, r8)

00007ab0 <ByteReverseWord32>:

#endif


STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
{
    7ab0:	b580      	push	{r7, lr}
    7ab2:	b082      	sub	sp, #8
    7ab4:	af00      	add	r7, sp, #0
    7ab6:	6078      	str	r0, [r7, #4]
    /* 5 instructions with rotate instruction, 9 without */
    return (rotrFixed(value, 8U) & 0xff00ff00) |
           (rotlFixed(value, 8U) & 0x00ff00ff);
#else
    /* 6 instructions with rotate instruction, 8 without */
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    7ab8:	687b      	ldr	r3, [r7, #4]
    7aba:	0a1b      	lsrs	r3, r3, #8
    7abc:	4a08      	ldr	r2, [pc, #32]	; (7ae0 <ByteReverseWord32+0x30>)
    7abe:	401a      	ands	r2, r3
    7ac0:	687b      	ldr	r3, [r7, #4]
    7ac2:	021b      	lsls	r3, r3, #8
    7ac4:	4907      	ldr	r1, [pc, #28]	; (7ae4 <ByteReverseWord32+0x34>)
    7ac6:	400b      	ands	r3, r1
    7ac8:	4313      	orrs	r3, r2
    7aca:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
    7acc:	687b      	ldr	r3, [r7, #4]
    7ace:	2110      	movs	r1, #16
    7ad0:	0018      	movs	r0, r3
    7ad2:	f7ff ffdd 	bl	7a90 <rotlFixed>
    7ad6:	0003      	movs	r3, r0
#endif
}
    7ad8:	0018      	movs	r0, r3
    7ada:	46bd      	mov	sp, r7
    7adc:	b002      	add	sp, #8
    7ade:	bd80      	pop	{r7, pc}
    7ae0:	00ff00ff 	.word	0x00ff00ff
    7ae4:	ff00ff00 	.word	0xff00ff00

00007ae8 <ByteReverseWords>:


STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
                                    word32 byteCount)
{
    7ae8:	b590      	push	{r4, r7, lr}
    7aea:	b087      	sub	sp, #28
    7aec:	af00      	add	r7, sp, #0
    7aee:	60f8      	str	r0, [r7, #12]
    7af0:	60b9      	str	r1, [r7, #8]
    7af2:	607a      	str	r2, [r7, #4]
    word32 count = byteCount/(word32)sizeof(word32), i;
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	089b      	lsrs	r3, r3, #2
    7af8:	613b      	str	r3, [r7, #16]

    for (i = 0; i < count; i++)
    7afa:	2300      	movs	r3, #0
    7afc:	617b      	str	r3, [r7, #20]
    7afe:	e010      	b.n	7b22 <ByteReverseWords+0x3a>
        out[i] = ByteReverseWord32(in[i]);
    7b00:	697b      	ldr	r3, [r7, #20]
    7b02:	009b      	lsls	r3, r3, #2
    7b04:	68fa      	ldr	r2, [r7, #12]
    7b06:	18d4      	adds	r4, r2, r3
    7b08:	697b      	ldr	r3, [r7, #20]
    7b0a:	009b      	lsls	r3, r3, #2
    7b0c:	68ba      	ldr	r2, [r7, #8]
    7b0e:	18d3      	adds	r3, r2, r3
    7b10:	681b      	ldr	r3, [r3, #0]
    7b12:	0018      	movs	r0, r3
    7b14:	f7ff ffcc 	bl	7ab0 <ByteReverseWord32>
    7b18:	0003      	movs	r3, r0
    7b1a:	6023      	str	r3, [r4, #0]
STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
                                    word32 byteCount)
{
    word32 count = byteCount/(word32)sizeof(word32), i;

    for (i = 0; i < count; i++)
    7b1c:	697b      	ldr	r3, [r7, #20]
    7b1e:	3301      	adds	r3, #1
    7b20:	617b      	str	r3, [r7, #20]
    7b22:	697a      	ldr	r2, [r7, #20]
    7b24:	693b      	ldr	r3, [r7, #16]
    7b26:	429a      	cmp	r2, r3
    7b28:	d3ea      	bcc.n	7b00 <ByteReverseWords+0x18>
        out[i] = ByteReverseWord32(in[i]);

}
    7b2a:	46c0      	nop			; (mov r8, r8)
    7b2c:	46bd      	mov	sp, r7
    7b2e:	b007      	add	sp, #28
    7b30:	bd90      	pop	{r4, r7, pc}
    7b32:	46c0      	nop			; (mov r8, r8)

00007b34 <XorWords>:

#endif /* WORD64_AVAILABLE && !WOLFSSL_NO_WORD64_OPS */

#ifndef WOLFSSL_NO_XOR_OPS
STATIC WC_INLINE void XorWords(wolfssl_word* r, const wolfssl_word* a, word32 n)
{
    7b34:	b580      	push	{r7, lr}
    7b36:	b086      	sub	sp, #24
    7b38:	af00      	add	r7, sp, #0
    7b3a:	60f8      	str	r0, [r7, #12]
    7b3c:	60b9      	str	r1, [r7, #8]
    7b3e:	607a      	str	r2, [r7, #4]
    word32 i;

    for (i = 0; i < n; i++) r[i] ^= a[i];
    7b40:	2300      	movs	r3, #0
    7b42:	617b      	str	r3, [r7, #20]
    7b44:	e012      	b.n	7b6c <XorWords+0x38>
    7b46:	697b      	ldr	r3, [r7, #20]
    7b48:	009b      	lsls	r3, r3, #2
    7b4a:	68fa      	ldr	r2, [r7, #12]
    7b4c:	18d3      	adds	r3, r2, r3
    7b4e:	697a      	ldr	r2, [r7, #20]
    7b50:	0092      	lsls	r2, r2, #2
    7b52:	68f9      	ldr	r1, [r7, #12]
    7b54:	188a      	adds	r2, r1, r2
    7b56:	6811      	ldr	r1, [r2, #0]
    7b58:	697a      	ldr	r2, [r7, #20]
    7b5a:	0092      	lsls	r2, r2, #2
    7b5c:	68b8      	ldr	r0, [r7, #8]
    7b5e:	1882      	adds	r2, r0, r2
    7b60:	6812      	ldr	r2, [r2, #0]
    7b62:	404a      	eors	r2, r1
    7b64:	601a      	str	r2, [r3, #0]
    7b66:	697b      	ldr	r3, [r7, #20]
    7b68:	3301      	adds	r3, #1
    7b6a:	617b      	str	r3, [r7, #20]
    7b6c:	697a      	ldr	r2, [r7, #20]
    7b6e:	687b      	ldr	r3, [r7, #4]
    7b70:	429a      	cmp	r2, r3
    7b72:	d3e8      	bcc.n	7b46 <XorWords+0x12>
}
    7b74:	46c0      	nop			; (mov r8, r8)
    7b76:	46bd      	mov	sp, r7
    7b78:	b006      	add	sp, #24
    7b7a:	bd80      	pop	{r7, pc}

00007b7c <xorbuf>:


STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
{
    7b7c:	b580      	push	{r7, lr}
    7b7e:	b088      	sub	sp, #32
    7b80:	af00      	add	r7, sp, #0
    7b82:	60f8      	str	r0, [r7, #12]
    7b84:	60b9      	str	r1, [r7, #8]
    7b86:	607a      	str	r2, [r7, #4]
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
    7b88:	68fa      	ldr	r2, [r7, #12]
    7b8a:	68bb      	ldr	r3, [r7, #8]
    7b8c:	431a      	orrs	r2, r3
    7b8e:	687b      	ldr	r3, [r7, #4]
    7b90:	4313      	orrs	r3, r2
    7b92:	2203      	movs	r2, #3
    7b94:	4013      	ands	r3, r2
    7b96:	d107      	bne.n	7ba8 <xorbuf+0x2c>
        XorWords( (wolfssl_word*)buf,
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	089a      	lsrs	r2, r3, #2
    7b9c:	68b9      	ldr	r1, [r7, #8]
    7b9e:	68fb      	ldr	r3, [r7, #12]
    7ba0:	0018      	movs	r0, r3
    7ba2:	f7ff ffc7 	bl	7b34 <XorWords>
        byte*       b = (byte*)buf;
        const byte* m = (const byte*)mask;

        for (i = 0; i < count; i++) b[i] ^= m[i];
    }
}
    7ba6:	e01b      	b.n	7be0 <xorbuf+0x64>
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
        XorWords( (wolfssl_word*)buf,
                  (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
    else {
        word32 i;
        byte*       b = (byte*)buf;
    7ba8:	68fb      	ldr	r3, [r7, #12]
    7baa:	61bb      	str	r3, [r7, #24]
        const byte* m = (const byte*)mask;
    7bac:	68bb      	ldr	r3, [r7, #8]
    7bae:	617b      	str	r3, [r7, #20]

        for (i = 0; i < count; i++) b[i] ^= m[i];
    7bb0:	2300      	movs	r3, #0
    7bb2:	61fb      	str	r3, [r7, #28]
    7bb4:	e010      	b.n	7bd8 <xorbuf+0x5c>
    7bb6:	69ba      	ldr	r2, [r7, #24]
    7bb8:	69fb      	ldr	r3, [r7, #28]
    7bba:	18d3      	adds	r3, r2, r3
    7bbc:	69b9      	ldr	r1, [r7, #24]
    7bbe:	69fa      	ldr	r2, [r7, #28]
    7bc0:	188a      	adds	r2, r1, r2
    7bc2:	7811      	ldrb	r1, [r2, #0]
    7bc4:	6978      	ldr	r0, [r7, #20]
    7bc6:	69fa      	ldr	r2, [r7, #28]
    7bc8:	1882      	adds	r2, r0, r2
    7bca:	7812      	ldrb	r2, [r2, #0]
    7bcc:	404a      	eors	r2, r1
    7bce:	b2d2      	uxtb	r2, r2
    7bd0:	701a      	strb	r2, [r3, #0]
    7bd2:	69fb      	ldr	r3, [r7, #28]
    7bd4:	3301      	adds	r3, #1
    7bd6:	61fb      	str	r3, [r7, #28]
    7bd8:	69fa      	ldr	r2, [r7, #28]
    7bda:	687b      	ldr	r3, [r7, #4]
    7bdc:	429a      	cmp	r2, r3
    7bde:	d3ea      	bcc.n	7bb6 <xorbuf+0x3a>
    }
}
    7be0:	46c0      	nop			; (mov r8, r8)
    7be2:	46bd      	mov	sp, r7
    7be4:	b008      	add	sp, #32
    7be6:	bd80      	pop	{r7, pc}

00007be8 <ForceZero>:
#endif

#ifndef WOLFSSL_NO_FORCE_ZERO
/* Make sure compiler doesn't skip */
STATIC WC_INLINE void ForceZero(const void* mem, word32 len)
{
    7be8:	b580      	push	{r7, lr}
    7bea:	b084      	sub	sp, #16
    7bec:	af00      	add	r7, sp, #0
    7bee:	6078      	str	r0, [r7, #4]
    7bf0:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
    7bf2:	687b      	ldr	r3, [r7, #4]
    7bf4:	60fb      	str	r3, [r7, #12]
    for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
        *w++ = 0;
    z = (volatile byte*)w;
#endif

    while (len--) *z++ = 0;
    7bf6:	e004      	b.n	7c02 <ForceZero+0x1a>
    7bf8:	68fb      	ldr	r3, [r7, #12]
    7bfa:	1c5a      	adds	r2, r3, #1
    7bfc:	60fa      	str	r2, [r7, #12]
    7bfe:	2200      	movs	r2, #0
    7c00:	701a      	strb	r2, [r3, #0]
    7c02:	683b      	ldr	r3, [r7, #0]
    7c04:	1e5a      	subs	r2, r3, #1
    7c06:	603a      	str	r2, [r7, #0]
    7c08:	2b00      	cmp	r3, #0
    7c0a:	d1f5      	bne.n	7bf8 <ForceZero+0x10>
}
    7c0c:	46c0      	nop			; (mov r8, r8)
    7c0e:	46bd      	mov	sp, r7
    7c10:	b004      	add	sp, #16
    7c12:	bd80      	pop	{r7, pc}

00007c14 <ConstantCompare>:


#ifndef WOLFSSL_NO_CONST_CMP
/* check all length bytes for equality, return 0 on success */
STATIC WC_INLINE int ConstantCompare(const byte* a, const byte* b, int length)
{
    7c14:	b580      	push	{r7, lr}
    7c16:	b086      	sub	sp, #24
    7c18:	af00      	add	r7, sp, #0
    7c1a:	60f8      	str	r0, [r7, #12]
    7c1c:	60b9      	str	r1, [r7, #8]
    7c1e:	607a      	str	r2, [r7, #4]
    int i;
    int compareSum = 0;
    7c20:	2300      	movs	r3, #0
    7c22:	613b      	str	r3, [r7, #16]

    for (i = 0; i < length; i++) {
    7c24:	2300      	movs	r3, #0
    7c26:	617b      	str	r3, [r7, #20]
    7c28:	e010      	b.n	7c4c <ConstantCompare+0x38>
        compareSum |= a[i] ^ b[i];
    7c2a:	697b      	ldr	r3, [r7, #20]
    7c2c:	68fa      	ldr	r2, [r7, #12]
    7c2e:	18d3      	adds	r3, r2, r3
    7c30:	781a      	ldrb	r2, [r3, #0]
    7c32:	697b      	ldr	r3, [r7, #20]
    7c34:	68b9      	ldr	r1, [r7, #8]
    7c36:	18cb      	adds	r3, r1, r3
    7c38:	781b      	ldrb	r3, [r3, #0]
    7c3a:	4053      	eors	r3, r2
    7c3c:	b2db      	uxtb	r3, r3
    7c3e:	001a      	movs	r2, r3
    7c40:	693b      	ldr	r3, [r7, #16]
    7c42:	4313      	orrs	r3, r2
    7c44:	613b      	str	r3, [r7, #16]
STATIC WC_INLINE int ConstantCompare(const byte* a, const byte* b, int length)
{
    int i;
    int compareSum = 0;

    for (i = 0; i < length; i++) {
    7c46:	697b      	ldr	r3, [r7, #20]
    7c48:	3301      	adds	r3, #1
    7c4a:	617b      	str	r3, [r7, #20]
    7c4c:	697a      	ldr	r2, [r7, #20]
    7c4e:	687b      	ldr	r3, [r7, #4]
    7c50:	429a      	cmp	r2, r3
    7c52:	dbea      	blt.n	7c2a <ConstantCompare+0x16>
        compareSum |= a[i] ^ b[i];
    }

    return compareSum;
    7c54:	693b      	ldr	r3, [r7, #16]
}
    7c56:	0018      	movs	r0, r3
    7c58:	46bd      	mov	sp, r7
    7c5a:	b006      	add	sp, #24
    7c5c:	bd80      	pop	{r7, pc}
    7c5e:	46c0      	nop			; (mov r8, r8)

00007c60 <PreFetchTe>:
#endif


/* load 4 Te Tables into cache by cache line stride */
static WC_INLINE word32 PreFetchTe(void)
{
    7c60:	b580      	push	{r7, lr}
    7c62:	b084      	sub	sp, #16
    7c64:	af00      	add	r7, sp, #0
    word32 x = 0;
    7c66:	2300      	movs	r3, #0
    7c68:	60fb      	str	r3, [r7, #12]
    int i,j;

    for (i = 0; i < 4; i++) {
    7c6a:	2300      	movs	r3, #0
    7c6c:	60bb      	str	r3, [r7, #8]
    7c6e:	e015      	b.n	7c9c <PreFetchTe+0x3c>
        /* 256 elements, each one is 4 bytes */
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
    7c70:	2300      	movs	r3, #0
    7c72:	607b      	str	r3, [r7, #4]
    7c74:	e00c      	b.n	7c90 <PreFetchTe+0x30>
            x &= Te[i][j];
    7c76:	4b0d      	ldr	r3, [pc, #52]	; (7cac <PreFetchTe+0x4c>)
    7c78:	68ba      	ldr	r2, [r7, #8]
    7c7a:	0211      	lsls	r1, r2, #8
    7c7c:	687a      	ldr	r2, [r7, #4]
    7c7e:	188a      	adds	r2, r1, r2
    7c80:	0092      	lsls	r2, r2, #2
    7c82:	58d2      	ldr	r2, [r2, r3]
    7c84:	68fb      	ldr	r3, [r7, #12]
    7c86:	4013      	ands	r3, r2
    7c88:	60fb      	str	r3, [r7, #12]
    word32 x = 0;
    int i,j;

    for (i = 0; i < 4; i++) {
        /* 256 elements, each one is 4 bytes */
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
    7c8a:	687b      	ldr	r3, [r7, #4]
    7c8c:	3308      	adds	r3, #8
    7c8e:	607b      	str	r3, [r7, #4]
    7c90:	687b      	ldr	r3, [r7, #4]
    7c92:	2bff      	cmp	r3, #255	; 0xff
    7c94:	ddef      	ble.n	7c76 <PreFetchTe+0x16>
static WC_INLINE word32 PreFetchTe(void)
{
    word32 x = 0;
    int i,j;

    for (i = 0; i < 4; i++) {
    7c96:	68bb      	ldr	r3, [r7, #8]
    7c98:	3301      	adds	r3, #1
    7c9a:	60bb      	str	r3, [r7, #8]
    7c9c:	68bb      	ldr	r3, [r7, #8]
    7c9e:	2b03      	cmp	r3, #3
    7ca0:	dde6      	ble.n	7c70 <PreFetchTe+0x10>
        /* 256 elements, each one is 4 bytes */
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
            x &= Te[i][j];
        }
    }
    return x;
    7ca2:	68fb      	ldr	r3, [r7, #12]
}
    7ca4:	0018      	movs	r0, r3
    7ca6:	46bd      	mov	sp, r7
    7ca8:	b004      	add	sp, #16
    7caa:	bd80      	pop	{r7, pc}
    7cac:	0002a3a8 	.word	0x0002a3a8

00007cb0 <wc_AesEncrypt>:

/* Software AES - ECB Encrypt */
static void wc_AesEncrypt(Aes* aes, const byte* inBlock, byte* outBlock)
{
    7cb0:	b580      	push	{r7, lr}
    7cb2:	b08e      	sub	sp, #56	; 0x38
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	60f8      	str	r0, [r7, #12]
    7cb8:	60b9      	str	r1, [r7, #8]
    7cba:	607a      	str	r2, [r7, #4]
    word32 s0, s1, s2, s3;
    word32 t0, t1, t2, t3;
    word32 r = aes->rounds >> 1;
    7cbc:	68fb      	ldr	r3, [r7, #12]
    7cbe:	22f0      	movs	r2, #240	; 0xf0
    7cc0:	589b      	ldr	r3, [r3, r2]
    7cc2:	085b      	lsrs	r3, r3, #1
    7cc4:	637b      	str	r3, [r7, #52]	; 0x34
    const word32* rk = aes->key;
    7cc6:	68fb      	ldr	r3, [r7, #12]
    7cc8:	633b      	str	r3, [r7, #48]	; 0x30

    if (r > 7 || r == 0) {
    7cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7ccc:	2b07      	cmp	r3, #7
    7cce:	d900      	bls.n	7cd2 <wc_AesEncrypt+0x22>
    7cd0:	e2e2      	b.n	8298 <wc_AesEncrypt+0x5e8>
    7cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7cd4:	2b00      	cmp	r3, #0
    7cd6:	d100      	bne.n	7cda <wc_AesEncrypt+0x2a>
    7cd8:	e2de      	b.n	8298 <wc_AesEncrypt+0x5e8>

    /*
     * map byte array block to cipher state
     * and add initial round key:
     */
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
    7cda:	68b9      	ldr	r1, [r7, #8]
    7cdc:	231c      	movs	r3, #28
    7cde:	18fb      	adds	r3, r7, r3
    7ce0:	2204      	movs	r2, #4
    7ce2:	0018      	movs	r0, r3
    7ce4:	f01d fd03 	bl	256ee <memcpy>
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
    7ce8:	68bb      	ldr	r3, [r7, #8]
    7cea:	1d19      	adds	r1, r3, #4
    7cec:	2318      	movs	r3, #24
    7cee:	18fb      	adds	r3, r7, r3
    7cf0:	2204      	movs	r2, #4
    7cf2:	0018      	movs	r0, r3
    7cf4:	f01d fcfb 	bl	256ee <memcpy>
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
    7cf8:	68bb      	ldr	r3, [r7, #8]
    7cfa:	3308      	adds	r3, #8
    7cfc:	0019      	movs	r1, r3
    7cfe:	2314      	movs	r3, #20
    7d00:	18fb      	adds	r3, r7, r3
    7d02:	2204      	movs	r2, #4
    7d04:	0018      	movs	r0, r3
    7d06:	f01d fcf2 	bl	256ee <memcpy>
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
    7d0a:	68bb      	ldr	r3, [r7, #8]
    7d0c:	330c      	adds	r3, #12
    7d0e:	0019      	movs	r1, r3
    7d10:	2310      	movs	r3, #16
    7d12:	18fb      	adds	r3, r7, r3
    7d14:	2204      	movs	r2, #4
    7d16:	0018      	movs	r0, r3
    7d18:	f01d fce9 	bl	256ee <memcpy>

#ifdef LITTLE_ENDIAN_ORDER
    s0 = ByteReverseWord32(s0);
    7d1c:	69fb      	ldr	r3, [r7, #28]
    7d1e:	0018      	movs	r0, r3
    7d20:	f7ff fec6 	bl	7ab0 <ByteReverseWord32>
    7d24:	0003      	movs	r3, r0
    7d26:	61fb      	str	r3, [r7, #28]
    s1 = ByteReverseWord32(s1);
    7d28:	69bb      	ldr	r3, [r7, #24]
    7d2a:	0018      	movs	r0, r3
    7d2c:	f7ff fec0 	bl	7ab0 <ByteReverseWord32>
    7d30:	0003      	movs	r3, r0
    7d32:	61bb      	str	r3, [r7, #24]
    s2 = ByteReverseWord32(s2);
    7d34:	697b      	ldr	r3, [r7, #20]
    7d36:	0018      	movs	r0, r3
    7d38:	f7ff feba 	bl	7ab0 <ByteReverseWord32>
    7d3c:	0003      	movs	r3, r0
    7d3e:	617b      	str	r3, [r7, #20]
    s3 = ByteReverseWord32(s3);
    7d40:	693b      	ldr	r3, [r7, #16]
    7d42:	0018      	movs	r0, r3
    7d44:	f7ff feb4 	bl	7ab0 <ByteReverseWord32>
    7d48:	0003      	movs	r3, r0
    7d4a:	613b      	str	r3, [r7, #16]
#endif

    s0 ^= rk[0];
    7d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7d4e:	681a      	ldr	r2, [r3, #0]
    7d50:	69fb      	ldr	r3, [r7, #28]
    7d52:	4053      	eors	r3, r2
    7d54:	61fb      	str	r3, [r7, #28]
    s1 ^= rk[1];
    7d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7d58:	3304      	adds	r3, #4
    7d5a:	681a      	ldr	r2, [r3, #0]
    7d5c:	69bb      	ldr	r3, [r7, #24]
    7d5e:	4053      	eors	r3, r2
    7d60:	61bb      	str	r3, [r7, #24]
    s2 ^= rk[2];
    7d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7d64:	3308      	adds	r3, #8
    7d66:	681a      	ldr	r2, [r3, #0]
    7d68:	697b      	ldr	r3, [r7, #20]
    7d6a:	4053      	eors	r3, r2
    7d6c:	617b      	str	r3, [r7, #20]
    s3 ^= rk[3];
    7d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7d70:	330c      	adds	r3, #12
    7d72:	681a      	ldr	r2, [r3, #0]
    7d74:	693b      	ldr	r3, [r7, #16]
    7d76:	4053      	eors	r3, r2
    7d78:	613b      	str	r3, [r7, #16]

    s0 |= PreFetchTe();
    7d7a:	f7ff ff71 	bl	7c60 <PreFetchTe>
    7d7e:	0002      	movs	r2, r0
    7d80:	69fb      	ldr	r3, [r7, #28]
    7d82:	4313      	orrs	r3, r2
    7d84:	61fb      	str	r3, [r7, #28]
     * Nr - 1 full rounds:
     */

    for (;;) {
        t0 =
            Te[0][GETBYTE(s0, 3)]  ^
    7d86:	69fb      	ldr	r3, [r7, #28]
    7d88:	0e1b      	lsrs	r3, r3, #24
    7d8a:	b2db      	uxtb	r3, r3
    7d8c:	001a      	movs	r2, r3
    7d8e:	4bb7      	ldr	r3, [pc, #732]	; (806c <wc_AesEncrypt+0x3bc>)
    7d90:	0092      	lsls	r2, r2, #2
    7d92:	58d2      	ldr	r2, [r2, r3]
            Te[1][GETBYTE(s1, 2)]  ^
    7d94:	69bb      	ldr	r3, [r7, #24]
    7d96:	0c1b      	lsrs	r3, r3, #16
    7d98:	b2db      	uxtb	r3, r3
    7d9a:	0019      	movs	r1, r3
    7d9c:	4bb3      	ldr	r3, [pc, #716]	; (806c <wc_AesEncrypt+0x3bc>)
    7d9e:	3101      	adds	r1, #1
    7da0:	31ff      	adds	r1, #255	; 0xff
    7da2:	0089      	lsls	r1, r1, #2
    7da4:	58cb      	ldr	r3, [r1, r3]
     * Nr - 1 full rounds:
     */

    for (;;) {
        t0 =
            Te[0][GETBYTE(s0, 3)]  ^
    7da6:	405a      	eors	r2, r3
            Te[1][GETBYTE(s1, 2)]  ^
            Te[2][GETBYTE(s2, 1)]  ^
    7da8:	697b      	ldr	r3, [r7, #20]
    7daa:	0a1b      	lsrs	r3, r3, #8
    7dac:	b2db      	uxtb	r3, r3
    7dae:	0019      	movs	r1, r3
    7db0:	4bae      	ldr	r3, [pc, #696]	; (806c <wc_AesEncrypt+0x3bc>)
    7db2:	2080      	movs	r0, #128	; 0x80
    7db4:	0080      	lsls	r0, r0, #2
    7db6:	4684      	mov	ip, r0
    7db8:	4461      	add	r1, ip
    7dba:	0089      	lsls	r1, r1, #2
    7dbc:	58cb      	ldr	r3, [r1, r3]
     */

    for (;;) {
        t0 =
            Te[0][GETBYTE(s0, 3)]  ^
            Te[1][GETBYTE(s1, 2)]  ^
    7dbe:	405a      	eors	r2, r3
            Te[2][GETBYTE(s2, 1)]  ^
            Te[3][GETBYTE(s3, 0)]  ^
    7dc0:	693b      	ldr	r3, [r7, #16]
    7dc2:	b2db      	uxtb	r3, r3
    7dc4:	0019      	movs	r1, r3
    7dc6:	4ba9      	ldr	r3, [pc, #676]	; (806c <wc_AesEncrypt+0x3bc>)
    7dc8:	20c0      	movs	r0, #192	; 0xc0
    7dca:	0080      	lsls	r0, r0, #2
    7dcc:	4684      	mov	ip, r0
    7dce:	4461      	add	r1, ip
    7dd0:	0089      	lsls	r1, r1, #2
    7dd2:	58cb      	ldr	r3, [r1, r3]

    for (;;) {
        t0 =
            Te[0][GETBYTE(s0, 3)]  ^
            Te[1][GETBYTE(s1, 2)]  ^
            Te[2][GETBYTE(s2, 1)]  ^
    7dd4:	405a      	eors	r2, r3
            Te[3][GETBYTE(s3, 0)]  ^
            rk[4];
    7dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7dd8:	3310      	adds	r3, #16
    7dda:	681b      	ldr	r3, [r3, #0]
    /*
     * Nr - 1 full rounds:
     */

    for (;;) {
        t0 =
    7ddc:	4053      	eors	r3, r2
    7dde:	62fb      	str	r3, [r7, #44]	; 0x2c
            Te[1][GETBYTE(s1, 2)]  ^
            Te[2][GETBYTE(s2, 1)]  ^
            Te[3][GETBYTE(s3, 0)]  ^
            rk[4];
        t1 =
            Te[0][GETBYTE(s1, 3)]  ^
    7de0:	69bb      	ldr	r3, [r7, #24]
    7de2:	0e1b      	lsrs	r3, r3, #24
    7de4:	b2db      	uxtb	r3, r3
    7de6:	001a      	movs	r2, r3
    7de8:	4ba0      	ldr	r3, [pc, #640]	; (806c <wc_AesEncrypt+0x3bc>)
    7dea:	0092      	lsls	r2, r2, #2
    7dec:	58d2      	ldr	r2, [r2, r3]
            Te[1][GETBYTE(s2, 2)]  ^
    7dee:	697b      	ldr	r3, [r7, #20]
    7df0:	0c1b      	lsrs	r3, r3, #16
    7df2:	b2db      	uxtb	r3, r3
    7df4:	0019      	movs	r1, r3
    7df6:	4b9d      	ldr	r3, [pc, #628]	; (806c <wc_AesEncrypt+0x3bc>)
    7df8:	3101      	adds	r1, #1
    7dfa:	31ff      	adds	r1, #255	; 0xff
    7dfc:	0089      	lsls	r1, r1, #2
    7dfe:	58cb      	ldr	r3, [r1, r3]
            Te[1][GETBYTE(s1, 2)]  ^
            Te[2][GETBYTE(s2, 1)]  ^
            Te[3][GETBYTE(s3, 0)]  ^
            rk[4];
        t1 =
            Te[0][GETBYTE(s1, 3)]  ^
    7e00:	405a      	eors	r2, r3
            Te[1][GETBYTE(s2, 2)]  ^
            Te[2][GETBYTE(s3, 1)]  ^
    7e02:	693b      	ldr	r3, [r7, #16]
    7e04:	0a1b      	lsrs	r3, r3, #8
    7e06:	b2db      	uxtb	r3, r3
    7e08:	0019      	movs	r1, r3
    7e0a:	4b98      	ldr	r3, [pc, #608]	; (806c <wc_AesEncrypt+0x3bc>)
    7e0c:	2080      	movs	r0, #128	; 0x80
    7e0e:	0080      	lsls	r0, r0, #2
    7e10:	4684      	mov	ip, r0
    7e12:	4461      	add	r1, ip
    7e14:	0089      	lsls	r1, r1, #2
    7e16:	58cb      	ldr	r3, [r1, r3]
            Te[2][GETBYTE(s2, 1)]  ^
            Te[3][GETBYTE(s3, 0)]  ^
            rk[4];
        t1 =
            Te[0][GETBYTE(s1, 3)]  ^
            Te[1][GETBYTE(s2, 2)]  ^
    7e18:	405a      	eors	r2, r3
            Te[2][GETBYTE(s3, 1)]  ^
            Te[3][GETBYTE(s0, 0)]  ^
    7e1a:	69fb      	ldr	r3, [r7, #28]
    7e1c:	b2db      	uxtb	r3, r3
    7e1e:	0019      	movs	r1, r3
    7e20:	4b92      	ldr	r3, [pc, #584]	; (806c <wc_AesEncrypt+0x3bc>)
    7e22:	20c0      	movs	r0, #192	; 0xc0
    7e24:	0080      	lsls	r0, r0, #2
    7e26:	4684      	mov	ip, r0
    7e28:	4461      	add	r1, ip
    7e2a:	0089      	lsls	r1, r1, #2
    7e2c:	58cb      	ldr	r3, [r1, r3]
            Te[3][GETBYTE(s3, 0)]  ^
            rk[4];
        t1 =
            Te[0][GETBYTE(s1, 3)]  ^
            Te[1][GETBYTE(s2, 2)]  ^
            Te[2][GETBYTE(s3, 1)]  ^
    7e2e:	405a      	eors	r2, r3
            Te[3][GETBYTE(s0, 0)]  ^
            rk[5];
    7e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7e32:	3314      	adds	r3, #20
    7e34:	681b      	ldr	r3, [r3, #0]
            Te[0][GETBYTE(s0, 3)]  ^
            Te[1][GETBYTE(s1, 2)]  ^
            Te[2][GETBYTE(s2, 1)]  ^
            Te[3][GETBYTE(s3, 0)]  ^
            rk[4];
        t1 =
    7e36:	4053      	eors	r3, r2
    7e38:	62bb      	str	r3, [r7, #40]	; 0x28
            Te[1][GETBYTE(s2, 2)]  ^
            Te[2][GETBYTE(s3, 1)]  ^
            Te[3][GETBYTE(s0, 0)]  ^
            rk[5];
        t2 =
            Te[0][GETBYTE(s2, 3)] ^
    7e3a:	697b      	ldr	r3, [r7, #20]
    7e3c:	0e1b      	lsrs	r3, r3, #24
    7e3e:	b2db      	uxtb	r3, r3
    7e40:	001a      	movs	r2, r3
    7e42:	4b8a      	ldr	r3, [pc, #552]	; (806c <wc_AesEncrypt+0x3bc>)
    7e44:	0092      	lsls	r2, r2, #2
    7e46:	58d2      	ldr	r2, [r2, r3]
            Te[1][GETBYTE(s3, 2)]  ^
    7e48:	693b      	ldr	r3, [r7, #16]
    7e4a:	0c1b      	lsrs	r3, r3, #16
    7e4c:	b2db      	uxtb	r3, r3
    7e4e:	0019      	movs	r1, r3
    7e50:	4b86      	ldr	r3, [pc, #536]	; (806c <wc_AesEncrypt+0x3bc>)
    7e52:	3101      	adds	r1, #1
    7e54:	31ff      	adds	r1, #255	; 0xff
    7e56:	0089      	lsls	r1, r1, #2
    7e58:	58cb      	ldr	r3, [r1, r3]
            Te[1][GETBYTE(s2, 2)]  ^
            Te[2][GETBYTE(s3, 1)]  ^
            Te[3][GETBYTE(s0, 0)]  ^
            rk[5];
        t2 =
            Te[0][GETBYTE(s2, 3)] ^
    7e5a:	405a      	eors	r2, r3
            Te[1][GETBYTE(s3, 2)]  ^
            Te[2][GETBYTE(s0, 1)]  ^
    7e5c:	69fb      	ldr	r3, [r7, #28]
    7e5e:	0a1b      	lsrs	r3, r3, #8
    7e60:	b2db      	uxtb	r3, r3
    7e62:	0019      	movs	r1, r3
    7e64:	4b81      	ldr	r3, [pc, #516]	; (806c <wc_AesEncrypt+0x3bc>)
    7e66:	2080      	movs	r0, #128	; 0x80
    7e68:	0080      	lsls	r0, r0, #2
    7e6a:	4684      	mov	ip, r0
    7e6c:	4461      	add	r1, ip
    7e6e:	0089      	lsls	r1, r1, #2
    7e70:	58cb      	ldr	r3, [r1, r3]
            Te[2][GETBYTE(s3, 1)]  ^
            Te[3][GETBYTE(s0, 0)]  ^
            rk[5];
        t2 =
            Te[0][GETBYTE(s2, 3)] ^
            Te[1][GETBYTE(s3, 2)]  ^
    7e72:	405a      	eors	r2, r3
            Te[2][GETBYTE(s0, 1)]  ^
            Te[3][GETBYTE(s1, 0)]  ^
    7e74:	69bb      	ldr	r3, [r7, #24]
    7e76:	b2db      	uxtb	r3, r3
    7e78:	0019      	movs	r1, r3
    7e7a:	4b7c      	ldr	r3, [pc, #496]	; (806c <wc_AesEncrypt+0x3bc>)
    7e7c:	20c0      	movs	r0, #192	; 0xc0
    7e7e:	0080      	lsls	r0, r0, #2
    7e80:	4684      	mov	ip, r0
    7e82:	4461      	add	r1, ip
    7e84:	0089      	lsls	r1, r1, #2
    7e86:	58cb      	ldr	r3, [r1, r3]
            Te[3][GETBYTE(s0, 0)]  ^
            rk[5];
        t2 =
            Te[0][GETBYTE(s2, 3)] ^
            Te[1][GETBYTE(s3, 2)]  ^
            Te[2][GETBYTE(s0, 1)]  ^
    7e88:	405a      	eors	r2, r3
            Te[3][GETBYTE(s1, 0)]  ^
            rk[6];
    7e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7e8c:	3318      	adds	r3, #24
    7e8e:	681b      	ldr	r3, [r3, #0]
            Te[0][GETBYTE(s1, 3)]  ^
            Te[1][GETBYTE(s2, 2)]  ^
            Te[2][GETBYTE(s3, 1)]  ^
            Te[3][GETBYTE(s0, 0)]  ^
            rk[5];
        t2 =
    7e90:	4053      	eors	r3, r2
    7e92:	627b      	str	r3, [r7, #36]	; 0x24
            Te[1][GETBYTE(s3, 2)]  ^
            Te[2][GETBYTE(s0, 1)]  ^
            Te[3][GETBYTE(s1, 0)]  ^
            rk[6];
        t3 =
            Te[0][GETBYTE(s3, 3)] ^
    7e94:	693b      	ldr	r3, [r7, #16]
    7e96:	0e1b      	lsrs	r3, r3, #24
    7e98:	b2db      	uxtb	r3, r3
    7e9a:	001a      	movs	r2, r3
    7e9c:	4b73      	ldr	r3, [pc, #460]	; (806c <wc_AesEncrypt+0x3bc>)
    7e9e:	0092      	lsls	r2, r2, #2
    7ea0:	58d2      	ldr	r2, [r2, r3]
            Te[1][GETBYTE(s0, 2)]  ^
    7ea2:	69fb      	ldr	r3, [r7, #28]
    7ea4:	0c1b      	lsrs	r3, r3, #16
    7ea6:	b2db      	uxtb	r3, r3
    7ea8:	0019      	movs	r1, r3
    7eaa:	4b70      	ldr	r3, [pc, #448]	; (806c <wc_AesEncrypt+0x3bc>)
    7eac:	3101      	adds	r1, #1
    7eae:	31ff      	adds	r1, #255	; 0xff
    7eb0:	0089      	lsls	r1, r1, #2
    7eb2:	58cb      	ldr	r3, [r1, r3]
            Te[1][GETBYTE(s3, 2)]  ^
            Te[2][GETBYTE(s0, 1)]  ^
            Te[3][GETBYTE(s1, 0)]  ^
            rk[6];
        t3 =
            Te[0][GETBYTE(s3, 3)] ^
    7eb4:	405a      	eors	r2, r3
            Te[1][GETBYTE(s0, 2)]  ^
            Te[2][GETBYTE(s1, 1)]  ^
    7eb6:	69bb      	ldr	r3, [r7, #24]
    7eb8:	0a1b      	lsrs	r3, r3, #8
    7eba:	b2db      	uxtb	r3, r3
    7ebc:	0019      	movs	r1, r3
    7ebe:	4b6b      	ldr	r3, [pc, #428]	; (806c <wc_AesEncrypt+0x3bc>)
    7ec0:	2080      	movs	r0, #128	; 0x80
    7ec2:	0080      	lsls	r0, r0, #2
    7ec4:	4684      	mov	ip, r0
    7ec6:	4461      	add	r1, ip
    7ec8:	0089      	lsls	r1, r1, #2
    7eca:	58cb      	ldr	r3, [r1, r3]
            Te[2][GETBYTE(s0, 1)]  ^
            Te[3][GETBYTE(s1, 0)]  ^
            rk[6];
        t3 =
            Te[0][GETBYTE(s3, 3)] ^
            Te[1][GETBYTE(s0, 2)]  ^
    7ecc:	405a      	eors	r2, r3
            Te[2][GETBYTE(s1, 1)]  ^
            Te[3][GETBYTE(s2, 0)]  ^
    7ece:	697b      	ldr	r3, [r7, #20]
    7ed0:	b2db      	uxtb	r3, r3
    7ed2:	0019      	movs	r1, r3
    7ed4:	4b65      	ldr	r3, [pc, #404]	; (806c <wc_AesEncrypt+0x3bc>)
    7ed6:	20c0      	movs	r0, #192	; 0xc0
    7ed8:	0080      	lsls	r0, r0, #2
    7eda:	4684      	mov	ip, r0
    7edc:	4461      	add	r1, ip
    7ede:	0089      	lsls	r1, r1, #2
    7ee0:	58cb      	ldr	r3, [r1, r3]
            Te[3][GETBYTE(s1, 0)]  ^
            rk[6];
        t3 =
            Te[0][GETBYTE(s3, 3)] ^
            Te[1][GETBYTE(s0, 2)]  ^
            Te[2][GETBYTE(s1, 1)]  ^
    7ee2:	405a      	eors	r2, r3
            Te[3][GETBYTE(s2, 0)]  ^
            rk[7];
    7ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7ee6:	331c      	adds	r3, #28
    7ee8:	681b      	ldr	r3, [r3, #0]
            Te[0][GETBYTE(s2, 3)] ^
            Te[1][GETBYTE(s3, 2)]  ^
            Te[2][GETBYTE(s0, 1)]  ^
            Te[3][GETBYTE(s1, 0)]  ^
            rk[6];
        t3 =
    7eea:	4053      	eors	r3, r2
    7eec:	623b      	str	r3, [r7, #32]
            Te[1][GETBYTE(s0, 2)]  ^
            Te[2][GETBYTE(s1, 1)]  ^
            Te[3][GETBYTE(s2, 0)]  ^
            rk[7];

        rk += 8;
    7eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7ef0:	3320      	adds	r3, #32
    7ef2:	633b      	str	r3, [r7, #48]	; 0x30
        if (--r == 0) {
    7ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7ef6:	3b01      	subs	r3, #1
    7ef8:	637b      	str	r3, [r7, #52]	; 0x34
    7efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7efc:	2b00      	cmp	r3, #0
    7efe:	d100      	bne.n	7f02 <wc_AesEncrypt+0x252>
    7f00:	e0b6      	b.n	8070 <wc_AesEncrypt+0x3c0>
            break;
        }

        s0 =
            Te[0][GETBYTE(t0, 3)] ^
    7f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7f04:	0e1b      	lsrs	r3, r3, #24
    7f06:	b2db      	uxtb	r3, r3
    7f08:	001a      	movs	r2, r3
    7f0a:	4b58      	ldr	r3, [pc, #352]	; (806c <wc_AesEncrypt+0x3bc>)
    7f0c:	0092      	lsls	r2, r2, #2
    7f0e:	58d2      	ldr	r2, [r2, r3]
            Te[1][GETBYTE(t1, 2)] ^
    7f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f12:	0c1b      	lsrs	r3, r3, #16
    7f14:	b2db      	uxtb	r3, r3
    7f16:	0019      	movs	r1, r3
    7f18:	4b54      	ldr	r3, [pc, #336]	; (806c <wc_AesEncrypt+0x3bc>)
    7f1a:	3101      	adds	r1, #1
    7f1c:	31ff      	adds	r1, #255	; 0xff
    7f1e:	0089      	lsls	r1, r1, #2
    7f20:	58cb      	ldr	r3, [r1, r3]
        if (--r == 0) {
            break;
        }

        s0 =
            Te[0][GETBYTE(t0, 3)] ^
    7f22:	405a      	eors	r2, r3
            Te[1][GETBYTE(t1, 2)] ^
            Te[2][GETBYTE(t2, 1)] ^
    7f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7f26:	0a1b      	lsrs	r3, r3, #8
    7f28:	b2db      	uxtb	r3, r3
    7f2a:	0019      	movs	r1, r3
    7f2c:	4b4f      	ldr	r3, [pc, #316]	; (806c <wc_AesEncrypt+0x3bc>)
    7f2e:	2080      	movs	r0, #128	; 0x80
    7f30:	0080      	lsls	r0, r0, #2
    7f32:	4684      	mov	ip, r0
    7f34:	4461      	add	r1, ip
    7f36:	0089      	lsls	r1, r1, #2
    7f38:	58cb      	ldr	r3, [r1, r3]
            break;
        }

        s0 =
            Te[0][GETBYTE(t0, 3)] ^
            Te[1][GETBYTE(t1, 2)] ^
    7f3a:	405a      	eors	r2, r3
            Te[2][GETBYTE(t2, 1)] ^
            Te[3][GETBYTE(t3, 0)] ^
    7f3c:	6a3b      	ldr	r3, [r7, #32]
    7f3e:	b2db      	uxtb	r3, r3
    7f40:	0019      	movs	r1, r3
    7f42:	4b4a      	ldr	r3, [pc, #296]	; (806c <wc_AesEncrypt+0x3bc>)
    7f44:	20c0      	movs	r0, #192	; 0xc0
    7f46:	0080      	lsls	r0, r0, #2
    7f48:	4684      	mov	ip, r0
    7f4a:	4461      	add	r1, ip
    7f4c:	0089      	lsls	r1, r1, #2
    7f4e:	58cb      	ldr	r3, [r1, r3]
        }

        s0 =
            Te[0][GETBYTE(t0, 3)] ^
            Te[1][GETBYTE(t1, 2)] ^
            Te[2][GETBYTE(t2, 1)] ^
    7f50:	405a      	eors	r2, r3
            Te[3][GETBYTE(t3, 0)] ^
            rk[0];
    7f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7f54:	681b      	ldr	r3, [r3, #0]

        s0 =
            Te[0][GETBYTE(t0, 3)] ^
            Te[1][GETBYTE(t1, 2)] ^
            Te[2][GETBYTE(t2, 1)] ^
            Te[3][GETBYTE(t3, 0)] ^
    7f56:	4053      	eors	r3, r2
        rk += 8;
        if (--r == 0) {
            break;
        }

        s0 =
    7f58:	61fb      	str	r3, [r7, #28]
            Te[1][GETBYTE(t1, 2)] ^
            Te[2][GETBYTE(t2, 1)] ^
            Te[3][GETBYTE(t3, 0)] ^
            rk[0];
        s1 =
            Te[0][GETBYTE(t1, 3)] ^
    7f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f5c:	0e1b      	lsrs	r3, r3, #24
    7f5e:	b2db      	uxtb	r3, r3
    7f60:	001a      	movs	r2, r3
    7f62:	4b42      	ldr	r3, [pc, #264]	; (806c <wc_AesEncrypt+0x3bc>)
    7f64:	0092      	lsls	r2, r2, #2
    7f66:	58d2      	ldr	r2, [r2, r3]
            Te[1][GETBYTE(t2, 2)] ^
    7f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7f6a:	0c1b      	lsrs	r3, r3, #16
    7f6c:	b2db      	uxtb	r3, r3
    7f6e:	0019      	movs	r1, r3
    7f70:	4b3e      	ldr	r3, [pc, #248]	; (806c <wc_AesEncrypt+0x3bc>)
    7f72:	3101      	adds	r1, #1
    7f74:	31ff      	adds	r1, #255	; 0xff
    7f76:	0089      	lsls	r1, r1, #2
    7f78:	58cb      	ldr	r3, [r1, r3]
            Te[1][GETBYTE(t1, 2)] ^
            Te[2][GETBYTE(t2, 1)] ^
            Te[3][GETBYTE(t3, 0)] ^
            rk[0];
        s1 =
            Te[0][GETBYTE(t1, 3)] ^
    7f7a:	405a      	eors	r2, r3
            Te[1][GETBYTE(t2, 2)] ^
            Te[2][GETBYTE(t3, 1)] ^
    7f7c:	6a3b      	ldr	r3, [r7, #32]
    7f7e:	0a1b      	lsrs	r3, r3, #8
    7f80:	b2db      	uxtb	r3, r3
    7f82:	0019      	movs	r1, r3
    7f84:	4b39      	ldr	r3, [pc, #228]	; (806c <wc_AesEncrypt+0x3bc>)
    7f86:	2080      	movs	r0, #128	; 0x80
    7f88:	0080      	lsls	r0, r0, #2
    7f8a:	4684      	mov	ip, r0
    7f8c:	4461      	add	r1, ip
    7f8e:	0089      	lsls	r1, r1, #2
    7f90:	58cb      	ldr	r3, [r1, r3]
            Te[2][GETBYTE(t2, 1)] ^
            Te[3][GETBYTE(t3, 0)] ^
            rk[0];
        s1 =
            Te[0][GETBYTE(t1, 3)] ^
            Te[1][GETBYTE(t2, 2)] ^
    7f92:	405a      	eors	r2, r3
            Te[2][GETBYTE(t3, 1)] ^
            Te[3][GETBYTE(t0, 0)] ^
    7f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7f96:	b2db      	uxtb	r3, r3
    7f98:	0019      	movs	r1, r3
    7f9a:	4b34      	ldr	r3, [pc, #208]	; (806c <wc_AesEncrypt+0x3bc>)
    7f9c:	20c0      	movs	r0, #192	; 0xc0
    7f9e:	0080      	lsls	r0, r0, #2
    7fa0:	4684      	mov	ip, r0
    7fa2:	4461      	add	r1, ip
    7fa4:	0089      	lsls	r1, r1, #2
    7fa6:	58cb      	ldr	r3, [r1, r3]
            Te[3][GETBYTE(t3, 0)] ^
            rk[0];
        s1 =
            Te[0][GETBYTE(t1, 3)] ^
            Te[1][GETBYTE(t2, 2)] ^
            Te[2][GETBYTE(t3, 1)] ^
    7fa8:	405a      	eors	r2, r3
            Te[3][GETBYTE(t0, 0)] ^
            rk[1];
    7faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7fac:	3304      	adds	r3, #4
    7fae:	681b      	ldr	r3, [r3, #0]
            rk[0];
        s1 =
            Te[0][GETBYTE(t1, 3)] ^
            Te[1][GETBYTE(t2, 2)] ^
            Te[2][GETBYTE(t3, 1)] ^
            Te[3][GETBYTE(t0, 0)] ^
    7fb0:	4053      	eors	r3, r2
            Te[0][GETBYTE(t0, 3)] ^
            Te[1][GETBYTE(t1, 2)] ^
            Te[2][GETBYTE(t2, 1)] ^
            Te[3][GETBYTE(t3, 0)] ^
            rk[0];
        s1 =
    7fb2:	61bb      	str	r3, [r7, #24]
            Te[1][GETBYTE(t2, 2)] ^
            Te[2][GETBYTE(t3, 1)] ^
            Te[3][GETBYTE(t0, 0)] ^
            rk[1];
        s2 =
            Te[0][GETBYTE(t2, 3)] ^
    7fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7fb6:	0e1b      	lsrs	r3, r3, #24
    7fb8:	b2db      	uxtb	r3, r3
    7fba:	001a      	movs	r2, r3
    7fbc:	4b2b      	ldr	r3, [pc, #172]	; (806c <wc_AesEncrypt+0x3bc>)
    7fbe:	0092      	lsls	r2, r2, #2
    7fc0:	58d2      	ldr	r2, [r2, r3]
            Te[1][GETBYTE(t3, 2)] ^
    7fc2:	6a3b      	ldr	r3, [r7, #32]
    7fc4:	0c1b      	lsrs	r3, r3, #16
    7fc6:	b2db      	uxtb	r3, r3
    7fc8:	0019      	movs	r1, r3
    7fca:	4b28      	ldr	r3, [pc, #160]	; (806c <wc_AesEncrypt+0x3bc>)
    7fcc:	3101      	adds	r1, #1
    7fce:	31ff      	adds	r1, #255	; 0xff
    7fd0:	0089      	lsls	r1, r1, #2
    7fd2:	58cb      	ldr	r3, [r1, r3]
            Te[1][GETBYTE(t2, 2)] ^
            Te[2][GETBYTE(t3, 1)] ^
            Te[3][GETBYTE(t0, 0)] ^
            rk[1];
        s2 =
            Te[0][GETBYTE(t2, 3)] ^
    7fd4:	405a      	eors	r2, r3
            Te[1][GETBYTE(t3, 2)] ^
            Te[2][GETBYTE(t0, 1)] ^
    7fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7fd8:	0a1b      	lsrs	r3, r3, #8
    7fda:	b2db      	uxtb	r3, r3
    7fdc:	0019      	movs	r1, r3
    7fde:	4b23      	ldr	r3, [pc, #140]	; (806c <wc_AesEncrypt+0x3bc>)
    7fe0:	2080      	movs	r0, #128	; 0x80
    7fe2:	0080      	lsls	r0, r0, #2
    7fe4:	4684      	mov	ip, r0
    7fe6:	4461      	add	r1, ip
    7fe8:	0089      	lsls	r1, r1, #2
    7fea:	58cb      	ldr	r3, [r1, r3]
            Te[2][GETBYTE(t3, 1)] ^
            Te[3][GETBYTE(t0, 0)] ^
            rk[1];
        s2 =
            Te[0][GETBYTE(t2, 3)] ^
            Te[1][GETBYTE(t3, 2)] ^
    7fec:	405a      	eors	r2, r3
            Te[2][GETBYTE(t0, 1)] ^
            Te[3][GETBYTE(t1, 0)] ^
    7fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ff0:	b2db      	uxtb	r3, r3
    7ff2:	0019      	movs	r1, r3
    7ff4:	4b1d      	ldr	r3, [pc, #116]	; (806c <wc_AesEncrypt+0x3bc>)
    7ff6:	20c0      	movs	r0, #192	; 0xc0
    7ff8:	0080      	lsls	r0, r0, #2
    7ffa:	4684      	mov	ip, r0
    7ffc:	4461      	add	r1, ip
    7ffe:	0089      	lsls	r1, r1, #2
    8000:	58cb      	ldr	r3, [r1, r3]
            Te[3][GETBYTE(t0, 0)] ^
            rk[1];
        s2 =
            Te[0][GETBYTE(t2, 3)] ^
            Te[1][GETBYTE(t3, 2)] ^
            Te[2][GETBYTE(t0, 1)] ^
    8002:	405a      	eors	r2, r3
            Te[3][GETBYTE(t1, 0)] ^
            rk[2];
    8004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8006:	3308      	adds	r3, #8
    8008:	681b      	ldr	r3, [r3, #0]
            rk[1];
        s2 =
            Te[0][GETBYTE(t2, 3)] ^
            Te[1][GETBYTE(t3, 2)] ^
            Te[2][GETBYTE(t0, 1)] ^
            Te[3][GETBYTE(t1, 0)] ^
    800a:	4053      	eors	r3, r2
            Te[0][GETBYTE(t1, 3)] ^
            Te[1][GETBYTE(t2, 2)] ^
            Te[2][GETBYTE(t3, 1)] ^
            Te[3][GETBYTE(t0, 0)] ^
            rk[1];
        s2 =
    800c:	617b      	str	r3, [r7, #20]
            Te[1][GETBYTE(t3, 2)] ^
            Te[2][GETBYTE(t0, 1)] ^
            Te[3][GETBYTE(t1, 0)] ^
            rk[2];
        s3 =
            Te[0][GETBYTE(t3, 3)] ^
    800e:	6a3b      	ldr	r3, [r7, #32]
    8010:	0e1b      	lsrs	r3, r3, #24
    8012:	b2db      	uxtb	r3, r3
    8014:	001a      	movs	r2, r3
    8016:	4b15      	ldr	r3, [pc, #84]	; (806c <wc_AesEncrypt+0x3bc>)
    8018:	0092      	lsls	r2, r2, #2
    801a:	58d2      	ldr	r2, [r2, r3]
            Te[1][GETBYTE(t0, 2)] ^
    801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    801e:	0c1b      	lsrs	r3, r3, #16
    8020:	b2db      	uxtb	r3, r3
    8022:	0019      	movs	r1, r3
    8024:	4b11      	ldr	r3, [pc, #68]	; (806c <wc_AesEncrypt+0x3bc>)
    8026:	3101      	adds	r1, #1
    8028:	31ff      	adds	r1, #255	; 0xff
    802a:	0089      	lsls	r1, r1, #2
    802c:	58cb      	ldr	r3, [r1, r3]
            Te[1][GETBYTE(t3, 2)] ^
            Te[2][GETBYTE(t0, 1)] ^
            Te[3][GETBYTE(t1, 0)] ^
            rk[2];
        s3 =
            Te[0][GETBYTE(t3, 3)] ^
    802e:	405a      	eors	r2, r3
            Te[1][GETBYTE(t0, 2)] ^
            Te[2][GETBYTE(t1, 1)] ^
    8030:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8032:	0a1b      	lsrs	r3, r3, #8
    8034:	b2db      	uxtb	r3, r3
    8036:	0019      	movs	r1, r3
    8038:	4b0c      	ldr	r3, [pc, #48]	; (806c <wc_AesEncrypt+0x3bc>)
    803a:	2080      	movs	r0, #128	; 0x80
    803c:	0080      	lsls	r0, r0, #2
    803e:	4684      	mov	ip, r0
    8040:	4461      	add	r1, ip
    8042:	0089      	lsls	r1, r1, #2
    8044:	58cb      	ldr	r3, [r1, r3]
            Te[2][GETBYTE(t0, 1)] ^
            Te[3][GETBYTE(t1, 0)] ^
            rk[2];
        s3 =
            Te[0][GETBYTE(t3, 3)] ^
            Te[1][GETBYTE(t0, 2)] ^
    8046:	405a      	eors	r2, r3
            Te[2][GETBYTE(t1, 1)] ^
            Te[3][GETBYTE(t2, 0)] ^
    8048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    804a:	b2db      	uxtb	r3, r3
    804c:	0019      	movs	r1, r3
    804e:	4b07      	ldr	r3, [pc, #28]	; (806c <wc_AesEncrypt+0x3bc>)
    8050:	20c0      	movs	r0, #192	; 0xc0
    8052:	0080      	lsls	r0, r0, #2
    8054:	4684      	mov	ip, r0
    8056:	4461      	add	r1, ip
    8058:	0089      	lsls	r1, r1, #2
    805a:	58cb      	ldr	r3, [r1, r3]
            Te[3][GETBYTE(t1, 0)] ^
            rk[2];
        s3 =
            Te[0][GETBYTE(t3, 3)] ^
            Te[1][GETBYTE(t0, 2)] ^
            Te[2][GETBYTE(t1, 1)] ^
    805c:	405a      	eors	r2, r3
            Te[3][GETBYTE(t2, 0)] ^
            rk[3];
    805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8060:	330c      	adds	r3, #12
    8062:	681b      	ldr	r3, [r3, #0]
            rk[2];
        s3 =
            Te[0][GETBYTE(t3, 3)] ^
            Te[1][GETBYTE(t0, 2)] ^
            Te[2][GETBYTE(t1, 1)] ^
            Te[3][GETBYTE(t2, 0)] ^
    8064:	4053      	eors	r3, r2
            Te[0][GETBYTE(t2, 3)] ^
            Te[1][GETBYTE(t3, 2)] ^
            Te[2][GETBYTE(t0, 1)] ^
            Te[3][GETBYTE(t1, 0)] ^
            rk[2];
        s3 =
    8066:	613b      	str	r3, [r7, #16]
            Te[0][GETBYTE(t3, 3)] ^
            Te[1][GETBYTE(t0, 2)] ^
            Te[2][GETBYTE(t1, 1)] ^
            Te[3][GETBYTE(t2, 0)] ^
            rk[3];
    }
    8068:	e68d      	b.n	7d86 <wc_AesEncrypt+0xd6>
    806a:	46c0      	nop			; (mov r8, r8)
    806c:	0002a3a8 	.word	0x0002a3a8
            Te[3][GETBYTE(s2, 0)]  ^
            rk[7];

        rk += 8;
        if (--r == 0) {
            break;
    8070:	46c0      	nop			; (mov r8, r8)
     * apply last round and
     * map cipher state to byte array block:
     */

    s0 =
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
    8072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8074:	0e1b      	lsrs	r3, r3, #24
    8076:	b2db      	uxtb	r3, r3
    8078:	001a      	movs	r2, r3
    807a:	4b89      	ldr	r3, [pc, #548]	; (82a0 <wc_AesEncrypt+0x5f0>)
    807c:	2180      	movs	r1, #128	; 0x80
    807e:	0089      	lsls	r1, r1, #2
    8080:	468c      	mov	ip, r1
    8082:	4462      	add	r2, ip
    8084:	0092      	lsls	r2, r2, #2
    8086:	58d3      	ldr	r3, [r2, r3]
    8088:	0e1b      	lsrs	r3, r3, #24
    808a:	061a      	lsls	r2, r3, #24
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
    808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    808e:	0c1b      	lsrs	r3, r3, #16
    8090:	b2db      	uxtb	r3, r3
    8092:	0019      	movs	r1, r3
    8094:	4b82      	ldr	r3, [pc, #520]	; (82a0 <wc_AesEncrypt+0x5f0>)
    8096:	20c0      	movs	r0, #192	; 0xc0
    8098:	0080      	lsls	r0, r0, #2
    809a:	4684      	mov	ip, r0
    809c:	4461      	add	r1, ip
    809e:	0089      	lsls	r1, r1, #2
    80a0:	58c9      	ldr	r1, [r1, r3]
    80a2:	23ff      	movs	r3, #255	; 0xff
    80a4:	041b      	lsls	r3, r3, #16
    80a6:	400b      	ands	r3, r1
     * apply last round and
     * map cipher state to byte array block:
     */

    s0 =
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
    80a8:	405a      	eors	r2, r3
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
    80aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80ac:	0a1b      	lsrs	r3, r3, #8
    80ae:	b2db      	uxtb	r3, r3
    80b0:	0019      	movs	r1, r3
    80b2:	4b7b      	ldr	r3, [pc, #492]	; (82a0 <wc_AesEncrypt+0x5f0>)
    80b4:	0089      	lsls	r1, r1, #2
    80b6:	58c9      	ldr	r1, [r1, r3]
    80b8:	23ff      	movs	r3, #255	; 0xff
    80ba:	021b      	lsls	r3, r3, #8
    80bc:	400b      	ands	r3, r1
     * map cipher state to byte array block:
     */

    s0 =
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
    80be:	405a      	eors	r2, r3
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
    80c0:	6a3b      	ldr	r3, [r7, #32]
    80c2:	b2db      	uxtb	r3, r3
    80c4:	0019      	movs	r1, r3
    80c6:	4b76      	ldr	r3, [pc, #472]	; (82a0 <wc_AesEncrypt+0x5f0>)
    80c8:	3101      	adds	r1, #1
    80ca:	31ff      	adds	r1, #255	; 0xff
    80cc:	0089      	lsls	r1, r1, #2
    80ce:	58cb      	ldr	r3, [r1, r3]
    80d0:	21ff      	movs	r1, #255	; 0xff
    80d2:	400b      	ands	r3, r1
     */

    s0 =
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
    80d4:	405a      	eors	r2, r3
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
        rk[0];
    80d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    80d8:	681b      	ldr	r3, [r3, #0]

    s0 =
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
    80da:	4053      	eors	r3, r2
    /*
     * apply last round and
     * map cipher state to byte array block:
     */

    s0 =
    80dc:	61fb      	str	r3, [r7, #28]
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
        rk[0];
    s1 =
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
    80de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    80e0:	0e1b      	lsrs	r3, r3, #24
    80e2:	b2db      	uxtb	r3, r3
    80e4:	001a      	movs	r2, r3
    80e6:	4b6e      	ldr	r3, [pc, #440]	; (82a0 <wc_AesEncrypt+0x5f0>)
    80e8:	2180      	movs	r1, #128	; 0x80
    80ea:	0089      	lsls	r1, r1, #2
    80ec:	468c      	mov	ip, r1
    80ee:	4462      	add	r2, ip
    80f0:	0092      	lsls	r2, r2, #2
    80f2:	58d3      	ldr	r3, [r2, r3]
    80f4:	0e1b      	lsrs	r3, r3, #24
    80f6:	061a      	lsls	r2, r3, #24
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
    80f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80fa:	0c1b      	lsrs	r3, r3, #16
    80fc:	b2db      	uxtb	r3, r3
    80fe:	0019      	movs	r1, r3
    8100:	4b67      	ldr	r3, [pc, #412]	; (82a0 <wc_AesEncrypt+0x5f0>)
    8102:	20c0      	movs	r0, #192	; 0xc0
    8104:	0080      	lsls	r0, r0, #2
    8106:	4684      	mov	ip, r0
    8108:	4461      	add	r1, ip
    810a:	0089      	lsls	r1, r1, #2
    810c:	58c9      	ldr	r1, [r1, r3]
    810e:	23ff      	movs	r3, #255	; 0xff
    8110:	041b      	lsls	r3, r3, #16
    8112:	400b      	ands	r3, r1
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
        rk[0];
    s1 =
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
    8114:	405a      	eors	r2, r3
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
    8116:	6a3b      	ldr	r3, [r7, #32]
    8118:	0a1b      	lsrs	r3, r3, #8
    811a:	b2db      	uxtb	r3, r3
    811c:	0019      	movs	r1, r3
    811e:	4b60      	ldr	r3, [pc, #384]	; (82a0 <wc_AesEncrypt+0x5f0>)
    8120:	0089      	lsls	r1, r1, #2
    8122:	58c9      	ldr	r1, [r1, r3]
    8124:	23ff      	movs	r3, #255	; 0xff
    8126:	021b      	lsls	r3, r3, #8
    8128:	400b      	ands	r3, r1
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
        rk[0];
    s1 =
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
    812a:	405a      	eors	r2, r3
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
    812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    812e:	b2db      	uxtb	r3, r3
    8130:	0019      	movs	r1, r3
    8132:	4b5b      	ldr	r3, [pc, #364]	; (82a0 <wc_AesEncrypt+0x5f0>)
    8134:	3101      	adds	r1, #1
    8136:	31ff      	adds	r1, #255	; 0xff
    8138:	0089      	lsls	r1, r1, #2
    813a:	58cb      	ldr	r3, [r1, r3]
    813c:	21ff      	movs	r1, #255	; 0xff
    813e:	400b      	ands	r3, r1
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
        rk[0];
    s1 =
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
    8140:	405a      	eors	r2, r3
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
        rk[1];
    8142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8144:	3304      	adds	r3, #4
    8146:	681b      	ldr	r3, [r3, #0]
        rk[0];
    s1 =
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
    8148:	4053      	eors	r3, r2
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
        rk[0];
    s1 =
    814a:	61bb      	str	r3, [r7, #24]
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
        rk[1];
    s2 =
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
    814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    814e:	0e1b      	lsrs	r3, r3, #24
    8150:	b2db      	uxtb	r3, r3
    8152:	001a      	movs	r2, r3
    8154:	4b52      	ldr	r3, [pc, #328]	; (82a0 <wc_AesEncrypt+0x5f0>)
    8156:	2180      	movs	r1, #128	; 0x80
    8158:	0089      	lsls	r1, r1, #2
    815a:	468c      	mov	ip, r1
    815c:	4462      	add	r2, ip
    815e:	0092      	lsls	r2, r2, #2
    8160:	58d3      	ldr	r3, [r2, r3]
    8162:	0e1b      	lsrs	r3, r3, #24
    8164:	061a      	lsls	r2, r3, #24
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
    8166:	6a3b      	ldr	r3, [r7, #32]
    8168:	0c1b      	lsrs	r3, r3, #16
    816a:	b2db      	uxtb	r3, r3
    816c:	0019      	movs	r1, r3
    816e:	4b4c      	ldr	r3, [pc, #304]	; (82a0 <wc_AesEncrypt+0x5f0>)
    8170:	20c0      	movs	r0, #192	; 0xc0
    8172:	0080      	lsls	r0, r0, #2
    8174:	4684      	mov	ip, r0
    8176:	4461      	add	r1, ip
    8178:	0089      	lsls	r1, r1, #2
    817a:	58c9      	ldr	r1, [r1, r3]
    817c:	23ff      	movs	r3, #255	; 0xff
    817e:	041b      	lsls	r3, r3, #16
    8180:	400b      	ands	r3, r1
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
        rk[1];
    s2 =
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
    8182:	405a      	eors	r2, r3
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
    8184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8186:	0a1b      	lsrs	r3, r3, #8
    8188:	b2db      	uxtb	r3, r3
    818a:	0019      	movs	r1, r3
    818c:	4b44      	ldr	r3, [pc, #272]	; (82a0 <wc_AesEncrypt+0x5f0>)
    818e:	0089      	lsls	r1, r1, #2
    8190:	58c9      	ldr	r1, [r1, r3]
    8192:	23ff      	movs	r3, #255	; 0xff
    8194:	021b      	lsls	r3, r3, #8
    8196:	400b      	ands	r3, r1
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
        rk[1];
    s2 =
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
    8198:	405a      	eors	r2, r3
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
    819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    819c:	b2db      	uxtb	r3, r3
    819e:	0019      	movs	r1, r3
    81a0:	4b3f      	ldr	r3, [pc, #252]	; (82a0 <wc_AesEncrypt+0x5f0>)
    81a2:	3101      	adds	r1, #1
    81a4:	31ff      	adds	r1, #255	; 0xff
    81a6:	0089      	lsls	r1, r1, #2
    81a8:	58cb      	ldr	r3, [r1, r3]
    81aa:	21ff      	movs	r1, #255	; 0xff
    81ac:	400b      	ands	r3, r1
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
        rk[1];
    s2 =
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
    81ae:	405a      	eors	r2, r3
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
        rk[2];
    81b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    81b2:	3308      	adds	r3, #8
    81b4:	681b      	ldr	r3, [r3, #0]
        rk[1];
    s2 =
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
    81b6:	4053      	eors	r3, r2
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
        rk[1];
    s2 =
    81b8:	617b      	str	r3, [r7, #20]
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
        rk[2];
    s3 =
        (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
    81ba:	6a3b      	ldr	r3, [r7, #32]
    81bc:	0e1b      	lsrs	r3, r3, #24
    81be:	b2db      	uxtb	r3, r3
    81c0:	001a      	movs	r2, r3
    81c2:	4b37      	ldr	r3, [pc, #220]	; (82a0 <wc_AesEncrypt+0x5f0>)
    81c4:	2180      	movs	r1, #128	; 0x80
    81c6:	0089      	lsls	r1, r1, #2
    81c8:	468c      	mov	ip, r1
    81ca:	4462      	add	r2, ip
    81cc:	0092      	lsls	r2, r2, #2
    81ce:	58d3      	ldr	r3, [r2, r3]
    81d0:	0e1b      	lsrs	r3, r3, #24
    81d2:	061a      	lsls	r2, r3, #24
        (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
    81d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81d6:	0c1b      	lsrs	r3, r3, #16
    81d8:	b2db      	uxtb	r3, r3
    81da:	0019      	movs	r1, r3
    81dc:	4b30      	ldr	r3, [pc, #192]	; (82a0 <wc_AesEncrypt+0x5f0>)
    81de:	20c0      	movs	r0, #192	; 0xc0
    81e0:	0080      	lsls	r0, r0, #2
    81e2:	4684      	mov	ip, r0
    81e4:	4461      	add	r1, ip
    81e6:	0089      	lsls	r1, r1, #2
    81e8:	58c9      	ldr	r1, [r1, r3]
    81ea:	23ff      	movs	r3, #255	; 0xff
    81ec:	041b      	lsls	r3, r3, #16
    81ee:	400b      	ands	r3, r1
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
        rk[2];
    s3 =
        (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
    81f0:	405a      	eors	r2, r3
        (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
    81f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    81f4:	0a1b      	lsrs	r3, r3, #8
    81f6:	b2db      	uxtb	r3, r3
    81f8:	0019      	movs	r1, r3
    81fa:	4b29      	ldr	r3, [pc, #164]	; (82a0 <wc_AesEncrypt+0x5f0>)
    81fc:	0089      	lsls	r1, r1, #2
    81fe:	58c9      	ldr	r1, [r1, r3]
    8200:	23ff      	movs	r3, #255	; 0xff
    8202:	021b      	lsls	r3, r3, #8
    8204:	400b      	ands	r3, r1
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
        rk[2];
    s3 =
        (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
    8206:	405a      	eors	r2, r3
        (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
    8208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    820a:	b2db      	uxtb	r3, r3
    820c:	0019      	movs	r1, r3
    820e:	4b24      	ldr	r3, [pc, #144]	; (82a0 <wc_AesEncrypt+0x5f0>)
    8210:	3101      	adds	r1, #1
    8212:	31ff      	adds	r1, #255	; 0xff
    8214:	0089      	lsls	r1, r1, #2
    8216:	58cb      	ldr	r3, [r1, r3]
    8218:	21ff      	movs	r1, #255	; 0xff
    821a:	400b      	ands	r3, r1
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
        rk[2];
    s3 =
        (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
    821c:	405a      	eors	r2, r3
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
        rk[3];
    821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8220:	330c      	adds	r3, #12
    8222:	681b      	ldr	r3, [r3, #0]
        rk[2];
    s3 =
        (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
    8224:	4053      	eors	r3, r2
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
        rk[2];
    s3 =
    8226:	613b      	str	r3, [r7, #16]
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
        rk[3];

    /* write out */
#ifdef LITTLE_ENDIAN_ORDER
    s0 = ByteReverseWord32(s0);
    8228:	69fb      	ldr	r3, [r7, #28]
    822a:	0018      	movs	r0, r3
    822c:	f7ff fc40 	bl	7ab0 <ByteReverseWord32>
    8230:	0003      	movs	r3, r0
    8232:	61fb      	str	r3, [r7, #28]
    s1 = ByteReverseWord32(s1);
    8234:	69bb      	ldr	r3, [r7, #24]
    8236:	0018      	movs	r0, r3
    8238:	f7ff fc3a 	bl	7ab0 <ByteReverseWord32>
    823c:	0003      	movs	r3, r0
    823e:	61bb      	str	r3, [r7, #24]
    s2 = ByteReverseWord32(s2);
    8240:	697b      	ldr	r3, [r7, #20]
    8242:	0018      	movs	r0, r3
    8244:	f7ff fc34 	bl	7ab0 <ByteReverseWord32>
    8248:	0003      	movs	r3, r0
    824a:	617b      	str	r3, [r7, #20]
    s3 = ByteReverseWord32(s3);
    824c:	693b      	ldr	r3, [r7, #16]
    824e:	0018      	movs	r0, r3
    8250:	f7ff fc2e 	bl	7ab0 <ByteReverseWord32>
    8254:	0003      	movs	r3, r0
    8256:	613b      	str	r3, [r7, #16]
#endif

    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    8258:	231c      	movs	r3, #28
    825a:	18f9      	adds	r1, r7, r3
    825c:	687b      	ldr	r3, [r7, #4]
    825e:	2204      	movs	r2, #4
    8260:	0018      	movs	r0, r3
    8262:	f01d fa44 	bl	256ee <memcpy>
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    8266:	687b      	ldr	r3, [r7, #4]
    8268:	3304      	adds	r3, #4
    826a:	2218      	movs	r2, #24
    826c:	18b9      	adds	r1, r7, r2
    826e:	2204      	movs	r2, #4
    8270:	0018      	movs	r0, r3
    8272:	f01d fa3c 	bl	256ee <memcpy>
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    8276:	687b      	ldr	r3, [r7, #4]
    8278:	3308      	adds	r3, #8
    827a:	2214      	movs	r2, #20
    827c:	18b9      	adds	r1, r7, r2
    827e:	2204      	movs	r2, #4
    8280:	0018      	movs	r0, r3
    8282:	f01d fa34 	bl	256ee <memcpy>
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
    8286:	687b      	ldr	r3, [r7, #4]
    8288:	330c      	adds	r3, #12
    828a:	2210      	movs	r2, #16
    828c:	18b9      	adds	r1, r7, r2
    828e:	2204      	movs	r2, #4
    8290:	0018      	movs	r0, r3
    8292:	f01d fa2c 	bl	256ee <memcpy>
    8296:	e000      	b.n	829a <wc_AesEncrypt+0x5ea>
    word32 r = aes->rounds >> 1;
    const word32* rk = aes->key;

    if (r > 7 || r == 0) {
        WOLFSSL_MSG("AesEncrypt encountered improper key, set it up");
        return;  /* stop instead of seg-faulting, set up your keys! */
    8298:	46c0      	nop			; (mov r8, r8)
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));

}
    829a:	46bd      	mov	sp, r7
    829c:	b00e      	add	sp, #56	; 0x38
    829e:	bd80      	pop	{r7, pc}
    82a0:	0002a3a8 	.word	0x0002a3a8

000082a4 <PreFetchTd>:
#if (defined(HAVE_AES_CBC) || defined(WOLFSSL_AES_DIRECT)) && \
    !defined(WOLFSSL_DEVCRYPTO_CBC)

/* load 4 Td Tables into cache by cache line stride */
static WC_INLINE word32 PreFetchTd(void)
{
    82a4:	b580      	push	{r7, lr}
    82a6:	b084      	sub	sp, #16
    82a8:	af00      	add	r7, sp, #0
    word32 x = 0;
    82aa:	2300      	movs	r3, #0
    82ac:	60fb      	str	r3, [r7, #12]
    int i,j;

    for (i = 0; i < 4; i++) {
    82ae:	2300      	movs	r3, #0
    82b0:	60bb      	str	r3, [r7, #8]
    82b2:	e015      	b.n	82e0 <PreFetchTd+0x3c>
        /* 256 elements, each one is 4 bytes */
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
    82b4:	2300      	movs	r3, #0
    82b6:	607b      	str	r3, [r7, #4]
    82b8:	e00c      	b.n	82d4 <PreFetchTd+0x30>
            x &= Td[i][j];
    82ba:	4b0d      	ldr	r3, [pc, #52]	; (82f0 <PreFetchTd+0x4c>)
    82bc:	68ba      	ldr	r2, [r7, #8]
    82be:	0211      	lsls	r1, r2, #8
    82c0:	687a      	ldr	r2, [r7, #4]
    82c2:	188a      	adds	r2, r1, r2
    82c4:	0092      	lsls	r2, r2, #2
    82c6:	58d2      	ldr	r2, [r2, r3]
    82c8:	68fb      	ldr	r3, [r7, #12]
    82ca:	4013      	ands	r3, r2
    82cc:	60fb      	str	r3, [r7, #12]
    word32 x = 0;
    int i,j;

    for (i = 0; i < 4; i++) {
        /* 256 elements, each one is 4 bytes */
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
    82ce:	687b      	ldr	r3, [r7, #4]
    82d0:	3308      	adds	r3, #8
    82d2:	607b      	str	r3, [r7, #4]
    82d4:	687b      	ldr	r3, [r7, #4]
    82d6:	2bff      	cmp	r3, #255	; 0xff
    82d8:	ddef      	ble.n	82ba <PreFetchTd+0x16>
static WC_INLINE word32 PreFetchTd(void)
{
    word32 x = 0;
    int i,j;

    for (i = 0; i < 4; i++) {
    82da:	68bb      	ldr	r3, [r7, #8]
    82dc:	3301      	adds	r3, #1
    82de:	60bb      	str	r3, [r7, #8]
    82e0:	68bb      	ldr	r3, [r7, #8]
    82e2:	2b03      	cmp	r3, #3
    82e4:	dde6      	ble.n	82b4 <PreFetchTd+0x10>
        /* 256 elements, each one is 4 bytes */
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
            x &= Td[i][j];
        }
    }
    return x;
    82e6:	68fb      	ldr	r3, [r7, #12]
}
    82e8:	0018      	movs	r0, r3
    82ea:	46bd      	mov	sp, r7
    82ec:	b004      	add	sp, #16
    82ee:	bd80      	pop	{r7, pc}
    82f0:	0002b3a8 	.word	0x0002b3a8

000082f4 <PreFetchTd4>:

/* load Td Table4 into cache by cache line stride */
static WC_INLINE word32 PreFetchTd4(void)
{
    82f4:	b580      	push	{r7, lr}
    82f6:	b082      	sub	sp, #8
    82f8:	af00      	add	r7, sp, #0
    word32 x = 0;
    82fa:	2300      	movs	r3, #0
    82fc:	607b      	str	r3, [r7, #4]
    int i;

    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
    82fe:	2300      	movs	r3, #0
    8300:	603b      	str	r3, [r7, #0]
    8302:	e00a      	b.n	831a <PreFetchTd4+0x26>
        x &= (word32)Td4[i];
    8304:	4a09      	ldr	r2, [pc, #36]	; (832c <PreFetchTd4+0x38>)
    8306:	683b      	ldr	r3, [r7, #0]
    8308:	18d3      	adds	r3, r2, r3
    830a:	781b      	ldrb	r3, [r3, #0]
    830c:	001a      	movs	r2, r3
    830e:	687b      	ldr	r3, [r7, #4]
    8310:	4013      	ands	r3, r2
    8312:	607b      	str	r3, [r7, #4]
static WC_INLINE word32 PreFetchTd4(void)
{
    word32 x = 0;
    int i;

    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
    8314:	683b      	ldr	r3, [r7, #0]
    8316:	3320      	adds	r3, #32
    8318:	603b      	str	r3, [r7, #0]
    831a:	683b      	ldr	r3, [r7, #0]
    831c:	2bff      	cmp	r3, #255	; 0xff
    831e:	ddf1      	ble.n	8304 <PreFetchTd4+0x10>
        x &= (word32)Td4[i];
    }
    return x;
    8320:	687b      	ldr	r3, [r7, #4]
}
    8322:	0018      	movs	r0, r3
    8324:	46bd      	mov	sp, r7
    8326:	b002      	add	sp, #8
    8328:	bd80      	pop	{r7, pc}
    832a:	46c0      	nop			; (mov r8, r8)
    832c:	0002c3a8 	.word	0x0002c3a8

00008330 <wc_AesDecrypt>:

/* Software AES - ECB Decrypt */
static void wc_AesDecrypt(Aes* aes, const byte* inBlock, byte* outBlock)
{
    8330:	b580      	push	{r7, lr}
    8332:	b08e      	sub	sp, #56	; 0x38
    8334:	af00      	add	r7, sp, #0
    8336:	60f8      	str	r0, [r7, #12]
    8338:	60b9      	str	r1, [r7, #8]
    833a:	607a      	str	r2, [r7, #4]
    word32 s0, s1, s2, s3;
    word32 t0, t1, t2, t3;
    word32 r = aes->rounds >> 1;
    833c:	68fb      	ldr	r3, [r7, #12]
    833e:	22f0      	movs	r2, #240	; 0xf0
    8340:	589b      	ldr	r3, [r3, r2]
    8342:	085b      	lsrs	r3, r3, #1
    8344:	637b      	str	r3, [r7, #52]	; 0x34

    const word32* rk = aes->key;
    8346:	68fb      	ldr	r3, [r7, #12]
    8348:	633b      	str	r3, [r7, #48]	; 0x30
    if (r > 7 || r == 0) {
    834a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    834c:	2b07      	cmp	r3, #7
    834e:	d900      	bls.n	8352 <wc_AesDecrypt+0x22>
    8350:	e294      	b.n	887c <wc_AesDecrypt+0x54c>
    8352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8354:	2b00      	cmp	r3, #0
    8356:	d100      	bne.n	835a <wc_AesDecrypt+0x2a>
    8358:	e290      	b.n	887c <wc_AesDecrypt+0x54c>

    /*
     * map byte array block to cipher state
     * and add initial round key:
     */
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
    835a:	68b9      	ldr	r1, [r7, #8]
    835c:	231c      	movs	r3, #28
    835e:	18fb      	adds	r3, r7, r3
    8360:	2204      	movs	r2, #4
    8362:	0018      	movs	r0, r3
    8364:	f01d f9c3 	bl	256ee <memcpy>
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
    8368:	68bb      	ldr	r3, [r7, #8]
    836a:	1d19      	adds	r1, r3, #4
    836c:	2318      	movs	r3, #24
    836e:	18fb      	adds	r3, r7, r3
    8370:	2204      	movs	r2, #4
    8372:	0018      	movs	r0, r3
    8374:	f01d f9bb 	bl	256ee <memcpy>
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
    8378:	68bb      	ldr	r3, [r7, #8]
    837a:	3308      	adds	r3, #8
    837c:	0019      	movs	r1, r3
    837e:	2314      	movs	r3, #20
    8380:	18fb      	adds	r3, r7, r3
    8382:	2204      	movs	r2, #4
    8384:	0018      	movs	r0, r3
    8386:	f01d f9b2 	bl	256ee <memcpy>
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
    838a:	68bb      	ldr	r3, [r7, #8]
    838c:	330c      	adds	r3, #12
    838e:	0019      	movs	r1, r3
    8390:	2310      	movs	r3, #16
    8392:	18fb      	adds	r3, r7, r3
    8394:	2204      	movs	r2, #4
    8396:	0018      	movs	r0, r3
    8398:	f01d f9a9 	bl	256ee <memcpy>

#ifdef LITTLE_ENDIAN_ORDER
    s0 = ByteReverseWord32(s0);
    839c:	69fb      	ldr	r3, [r7, #28]
    839e:	0018      	movs	r0, r3
    83a0:	f7ff fb86 	bl	7ab0 <ByteReverseWord32>
    83a4:	0003      	movs	r3, r0
    83a6:	61fb      	str	r3, [r7, #28]
    s1 = ByteReverseWord32(s1);
    83a8:	69bb      	ldr	r3, [r7, #24]
    83aa:	0018      	movs	r0, r3
    83ac:	f7ff fb80 	bl	7ab0 <ByteReverseWord32>
    83b0:	0003      	movs	r3, r0
    83b2:	61bb      	str	r3, [r7, #24]
    s2 = ByteReverseWord32(s2);
    83b4:	697b      	ldr	r3, [r7, #20]
    83b6:	0018      	movs	r0, r3
    83b8:	f7ff fb7a 	bl	7ab0 <ByteReverseWord32>
    83bc:	0003      	movs	r3, r0
    83be:	617b      	str	r3, [r7, #20]
    s3 = ByteReverseWord32(s3);
    83c0:	693b      	ldr	r3, [r7, #16]
    83c2:	0018      	movs	r0, r3
    83c4:	f7ff fb74 	bl	7ab0 <ByteReverseWord32>
    83c8:	0003      	movs	r3, r0
    83ca:	613b      	str	r3, [r7, #16]
#endif

    s0 ^= rk[0];
    83cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    83ce:	681a      	ldr	r2, [r3, #0]
    83d0:	69fb      	ldr	r3, [r7, #28]
    83d2:	4053      	eors	r3, r2
    83d4:	61fb      	str	r3, [r7, #28]
    s1 ^= rk[1];
    83d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    83d8:	3304      	adds	r3, #4
    83da:	681a      	ldr	r2, [r3, #0]
    83dc:	69bb      	ldr	r3, [r7, #24]
    83de:	4053      	eors	r3, r2
    83e0:	61bb      	str	r3, [r7, #24]
    s2 ^= rk[2];
    83e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    83e4:	3308      	adds	r3, #8
    83e6:	681a      	ldr	r2, [r3, #0]
    83e8:	697b      	ldr	r3, [r7, #20]
    83ea:	4053      	eors	r3, r2
    83ec:	617b      	str	r3, [r7, #20]
    s3 ^= rk[3];
    83ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    83f0:	330c      	adds	r3, #12
    83f2:	681a      	ldr	r2, [r3, #0]
    83f4:	693b      	ldr	r3, [r7, #16]
    83f6:	4053      	eors	r3, r2
    83f8:	613b      	str	r3, [r7, #16]

    s0 |= PreFetchTd();
    83fa:	f7ff ff53 	bl	82a4 <PreFetchTd>
    83fe:	0002      	movs	r2, r0
    8400:	69fb      	ldr	r3, [r7, #28]
    8402:	4313      	orrs	r3, r2
    8404:	61fb      	str	r3, [r7, #28]
     * Nr - 1 full rounds:
     */

    for (;;) {
        t0 =
            Td[0][GETBYTE(s0, 3)] ^
    8406:	69fb      	ldr	r3, [r7, #28]
    8408:	0e1b      	lsrs	r3, r3, #24
    840a:	b2db      	uxtb	r3, r3
    840c:	001a      	movs	r2, r3
    840e:	4bb7      	ldr	r3, [pc, #732]	; (86ec <wc_AesDecrypt+0x3bc>)
    8410:	0092      	lsls	r2, r2, #2
    8412:	58d2      	ldr	r2, [r2, r3]
            Td[1][GETBYTE(s3, 2)] ^
    8414:	693b      	ldr	r3, [r7, #16]
    8416:	0c1b      	lsrs	r3, r3, #16
    8418:	b2db      	uxtb	r3, r3
    841a:	0019      	movs	r1, r3
    841c:	4bb3      	ldr	r3, [pc, #716]	; (86ec <wc_AesDecrypt+0x3bc>)
    841e:	3101      	adds	r1, #1
    8420:	31ff      	adds	r1, #255	; 0xff
    8422:	0089      	lsls	r1, r1, #2
    8424:	58cb      	ldr	r3, [r1, r3]
     * Nr - 1 full rounds:
     */

    for (;;) {
        t0 =
            Td[0][GETBYTE(s0, 3)] ^
    8426:	405a      	eors	r2, r3
            Td[1][GETBYTE(s3, 2)] ^
            Td[2][GETBYTE(s2, 1)] ^
    8428:	697b      	ldr	r3, [r7, #20]
    842a:	0a1b      	lsrs	r3, r3, #8
    842c:	b2db      	uxtb	r3, r3
    842e:	0019      	movs	r1, r3
    8430:	4bae      	ldr	r3, [pc, #696]	; (86ec <wc_AesDecrypt+0x3bc>)
    8432:	2080      	movs	r0, #128	; 0x80
    8434:	0080      	lsls	r0, r0, #2
    8436:	4684      	mov	ip, r0
    8438:	4461      	add	r1, ip
    843a:	0089      	lsls	r1, r1, #2
    843c:	58cb      	ldr	r3, [r1, r3]
     */

    for (;;) {
        t0 =
            Td[0][GETBYTE(s0, 3)] ^
            Td[1][GETBYTE(s3, 2)] ^
    843e:	405a      	eors	r2, r3
            Td[2][GETBYTE(s2, 1)] ^
            Td[3][GETBYTE(s1, 0)] ^
    8440:	69bb      	ldr	r3, [r7, #24]
    8442:	b2db      	uxtb	r3, r3
    8444:	0019      	movs	r1, r3
    8446:	4ba9      	ldr	r3, [pc, #676]	; (86ec <wc_AesDecrypt+0x3bc>)
    8448:	20c0      	movs	r0, #192	; 0xc0
    844a:	0080      	lsls	r0, r0, #2
    844c:	4684      	mov	ip, r0
    844e:	4461      	add	r1, ip
    8450:	0089      	lsls	r1, r1, #2
    8452:	58cb      	ldr	r3, [r1, r3]

    for (;;) {
        t0 =
            Td[0][GETBYTE(s0, 3)] ^
            Td[1][GETBYTE(s3, 2)] ^
            Td[2][GETBYTE(s2, 1)] ^
    8454:	405a      	eors	r2, r3
            Td[3][GETBYTE(s1, 0)] ^
            rk[4];
    8456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8458:	3310      	adds	r3, #16
    845a:	681b      	ldr	r3, [r3, #0]
    /*
     * Nr - 1 full rounds:
     */

    for (;;) {
        t0 =
    845c:	4053      	eors	r3, r2
    845e:	62fb      	str	r3, [r7, #44]	; 0x2c
            Td[1][GETBYTE(s3, 2)] ^
            Td[2][GETBYTE(s2, 1)] ^
            Td[3][GETBYTE(s1, 0)] ^
            rk[4];
        t1 =
            Td[0][GETBYTE(s1, 3)] ^
    8460:	69bb      	ldr	r3, [r7, #24]
    8462:	0e1b      	lsrs	r3, r3, #24
    8464:	b2db      	uxtb	r3, r3
    8466:	001a      	movs	r2, r3
    8468:	4ba0      	ldr	r3, [pc, #640]	; (86ec <wc_AesDecrypt+0x3bc>)
    846a:	0092      	lsls	r2, r2, #2
    846c:	58d2      	ldr	r2, [r2, r3]
            Td[1][GETBYTE(s0, 2)] ^
    846e:	69fb      	ldr	r3, [r7, #28]
    8470:	0c1b      	lsrs	r3, r3, #16
    8472:	b2db      	uxtb	r3, r3
    8474:	0019      	movs	r1, r3
    8476:	4b9d      	ldr	r3, [pc, #628]	; (86ec <wc_AesDecrypt+0x3bc>)
    8478:	3101      	adds	r1, #1
    847a:	31ff      	adds	r1, #255	; 0xff
    847c:	0089      	lsls	r1, r1, #2
    847e:	58cb      	ldr	r3, [r1, r3]
            Td[1][GETBYTE(s3, 2)] ^
            Td[2][GETBYTE(s2, 1)] ^
            Td[3][GETBYTE(s1, 0)] ^
            rk[4];
        t1 =
            Td[0][GETBYTE(s1, 3)] ^
    8480:	405a      	eors	r2, r3
            Td[1][GETBYTE(s0, 2)] ^
            Td[2][GETBYTE(s3, 1)] ^
    8482:	693b      	ldr	r3, [r7, #16]
    8484:	0a1b      	lsrs	r3, r3, #8
    8486:	b2db      	uxtb	r3, r3
    8488:	0019      	movs	r1, r3
    848a:	4b98      	ldr	r3, [pc, #608]	; (86ec <wc_AesDecrypt+0x3bc>)
    848c:	2080      	movs	r0, #128	; 0x80
    848e:	0080      	lsls	r0, r0, #2
    8490:	4684      	mov	ip, r0
    8492:	4461      	add	r1, ip
    8494:	0089      	lsls	r1, r1, #2
    8496:	58cb      	ldr	r3, [r1, r3]
            Td[2][GETBYTE(s2, 1)] ^
            Td[3][GETBYTE(s1, 0)] ^
            rk[4];
        t1 =
            Td[0][GETBYTE(s1, 3)] ^
            Td[1][GETBYTE(s0, 2)] ^
    8498:	405a      	eors	r2, r3
            Td[2][GETBYTE(s3, 1)] ^
            Td[3][GETBYTE(s2, 0)] ^
    849a:	697b      	ldr	r3, [r7, #20]
    849c:	b2db      	uxtb	r3, r3
    849e:	0019      	movs	r1, r3
    84a0:	4b92      	ldr	r3, [pc, #584]	; (86ec <wc_AesDecrypt+0x3bc>)
    84a2:	20c0      	movs	r0, #192	; 0xc0
    84a4:	0080      	lsls	r0, r0, #2
    84a6:	4684      	mov	ip, r0
    84a8:	4461      	add	r1, ip
    84aa:	0089      	lsls	r1, r1, #2
    84ac:	58cb      	ldr	r3, [r1, r3]
            Td[3][GETBYTE(s1, 0)] ^
            rk[4];
        t1 =
            Td[0][GETBYTE(s1, 3)] ^
            Td[1][GETBYTE(s0, 2)] ^
            Td[2][GETBYTE(s3, 1)] ^
    84ae:	405a      	eors	r2, r3
            Td[3][GETBYTE(s2, 0)] ^
            rk[5];
    84b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    84b2:	3314      	adds	r3, #20
    84b4:	681b      	ldr	r3, [r3, #0]
            Td[0][GETBYTE(s0, 3)] ^
            Td[1][GETBYTE(s3, 2)] ^
            Td[2][GETBYTE(s2, 1)] ^
            Td[3][GETBYTE(s1, 0)] ^
            rk[4];
        t1 =
    84b6:	4053      	eors	r3, r2
    84b8:	62bb      	str	r3, [r7, #40]	; 0x28
            Td[1][GETBYTE(s0, 2)] ^
            Td[2][GETBYTE(s3, 1)] ^
            Td[3][GETBYTE(s2, 0)] ^
            rk[5];
        t2 =
            Td[0][GETBYTE(s2, 3)] ^
    84ba:	697b      	ldr	r3, [r7, #20]
    84bc:	0e1b      	lsrs	r3, r3, #24
    84be:	b2db      	uxtb	r3, r3
    84c0:	001a      	movs	r2, r3
    84c2:	4b8a      	ldr	r3, [pc, #552]	; (86ec <wc_AesDecrypt+0x3bc>)
    84c4:	0092      	lsls	r2, r2, #2
    84c6:	58d2      	ldr	r2, [r2, r3]
            Td[1][GETBYTE(s1, 2)] ^
    84c8:	69bb      	ldr	r3, [r7, #24]
    84ca:	0c1b      	lsrs	r3, r3, #16
    84cc:	b2db      	uxtb	r3, r3
    84ce:	0019      	movs	r1, r3
    84d0:	4b86      	ldr	r3, [pc, #536]	; (86ec <wc_AesDecrypt+0x3bc>)
    84d2:	3101      	adds	r1, #1
    84d4:	31ff      	adds	r1, #255	; 0xff
    84d6:	0089      	lsls	r1, r1, #2
    84d8:	58cb      	ldr	r3, [r1, r3]
            Td[1][GETBYTE(s0, 2)] ^
            Td[2][GETBYTE(s3, 1)] ^
            Td[3][GETBYTE(s2, 0)] ^
            rk[5];
        t2 =
            Td[0][GETBYTE(s2, 3)] ^
    84da:	405a      	eors	r2, r3
            Td[1][GETBYTE(s1, 2)] ^
            Td[2][GETBYTE(s0, 1)] ^
    84dc:	69fb      	ldr	r3, [r7, #28]
    84de:	0a1b      	lsrs	r3, r3, #8
    84e0:	b2db      	uxtb	r3, r3
    84e2:	0019      	movs	r1, r3
    84e4:	4b81      	ldr	r3, [pc, #516]	; (86ec <wc_AesDecrypt+0x3bc>)
    84e6:	2080      	movs	r0, #128	; 0x80
    84e8:	0080      	lsls	r0, r0, #2
    84ea:	4684      	mov	ip, r0
    84ec:	4461      	add	r1, ip
    84ee:	0089      	lsls	r1, r1, #2
    84f0:	58cb      	ldr	r3, [r1, r3]
            Td[2][GETBYTE(s3, 1)] ^
            Td[3][GETBYTE(s2, 0)] ^
            rk[5];
        t2 =
            Td[0][GETBYTE(s2, 3)] ^
            Td[1][GETBYTE(s1, 2)] ^
    84f2:	405a      	eors	r2, r3
            Td[2][GETBYTE(s0, 1)] ^
            Td[3][GETBYTE(s3, 0)] ^
    84f4:	693b      	ldr	r3, [r7, #16]
    84f6:	b2db      	uxtb	r3, r3
    84f8:	0019      	movs	r1, r3
    84fa:	4b7c      	ldr	r3, [pc, #496]	; (86ec <wc_AesDecrypt+0x3bc>)
    84fc:	20c0      	movs	r0, #192	; 0xc0
    84fe:	0080      	lsls	r0, r0, #2
    8500:	4684      	mov	ip, r0
    8502:	4461      	add	r1, ip
    8504:	0089      	lsls	r1, r1, #2
    8506:	58cb      	ldr	r3, [r1, r3]
            Td[3][GETBYTE(s2, 0)] ^
            rk[5];
        t2 =
            Td[0][GETBYTE(s2, 3)] ^
            Td[1][GETBYTE(s1, 2)] ^
            Td[2][GETBYTE(s0, 1)] ^
    8508:	405a      	eors	r2, r3
            Td[3][GETBYTE(s3, 0)] ^
            rk[6];
    850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    850c:	3318      	adds	r3, #24
    850e:	681b      	ldr	r3, [r3, #0]
            Td[0][GETBYTE(s1, 3)] ^
            Td[1][GETBYTE(s0, 2)] ^
            Td[2][GETBYTE(s3, 1)] ^
            Td[3][GETBYTE(s2, 0)] ^
            rk[5];
        t2 =
    8510:	4053      	eors	r3, r2
    8512:	627b      	str	r3, [r7, #36]	; 0x24
            Td[1][GETBYTE(s1, 2)] ^
            Td[2][GETBYTE(s0, 1)] ^
            Td[3][GETBYTE(s3, 0)] ^
            rk[6];
        t3 =
            Td[0][GETBYTE(s3, 3)] ^
    8514:	693b      	ldr	r3, [r7, #16]
    8516:	0e1b      	lsrs	r3, r3, #24
    8518:	b2db      	uxtb	r3, r3
    851a:	001a      	movs	r2, r3
    851c:	4b73      	ldr	r3, [pc, #460]	; (86ec <wc_AesDecrypt+0x3bc>)
    851e:	0092      	lsls	r2, r2, #2
    8520:	58d2      	ldr	r2, [r2, r3]
            Td[1][GETBYTE(s2, 2)] ^
    8522:	697b      	ldr	r3, [r7, #20]
    8524:	0c1b      	lsrs	r3, r3, #16
    8526:	b2db      	uxtb	r3, r3
    8528:	0019      	movs	r1, r3
    852a:	4b70      	ldr	r3, [pc, #448]	; (86ec <wc_AesDecrypt+0x3bc>)
    852c:	3101      	adds	r1, #1
    852e:	31ff      	adds	r1, #255	; 0xff
    8530:	0089      	lsls	r1, r1, #2
    8532:	58cb      	ldr	r3, [r1, r3]
            Td[1][GETBYTE(s1, 2)] ^
            Td[2][GETBYTE(s0, 1)] ^
            Td[3][GETBYTE(s3, 0)] ^
            rk[6];
        t3 =
            Td[0][GETBYTE(s3, 3)] ^
    8534:	405a      	eors	r2, r3
            Td[1][GETBYTE(s2, 2)] ^
            Td[2][GETBYTE(s1, 1)] ^
    8536:	69bb      	ldr	r3, [r7, #24]
    8538:	0a1b      	lsrs	r3, r3, #8
    853a:	b2db      	uxtb	r3, r3
    853c:	0019      	movs	r1, r3
    853e:	4b6b      	ldr	r3, [pc, #428]	; (86ec <wc_AesDecrypt+0x3bc>)
    8540:	2080      	movs	r0, #128	; 0x80
    8542:	0080      	lsls	r0, r0, #2
    8544:	4684      	mov	ip, r0
    8546:	4461      	add	r1, ip
    8548:	0089      	lsls	r1, r1, #2
    854a:	58cb      	ldr	r3, [r1, r3]
            Td[2][GETBYTE(s0, 1)] ^
            Td[3][GETBYTE(s3, 0)] ^
            rk[6];
        t3 =
            Td[0][GETBYTE(s3, 3)] ^
            Td[1][GETBYTE(s2, 2)] ^
    854c:	405a      	eors	r2, r3
            Td[2][GETBYTE(s1, 1)] ^
            Td[3][GETBYTE(s0, 0)] ^
    854e:	69fb      	ldr	r3, [r7, #28]
    8550:	b2db      	uxtb	r3, r3
    8552:	0019      	movs	r1, r3
    8554:	4b65      	ldr	r3, [pc, #404]	; (86ec <wc_AesDecrypt+0x3bc>)
    8556:	20c0      	movs	r0, #192	; 0xc0
    8558:	0080      	lsls	r0, r0, #2
    855a:	4684      	mov	ip, r0
    855c:	4461      	add	r1, ip
    855e:	0089      	lsls	r1, r1, #2
    8560:	58cb      	ldr	r3, [r1, r3]
            Td[3][GETBYTE(s3, 0)] ^
            rk[6];
        t3 =
            Td[0][GETBYTE(s3, 3)] ^
            Td[1][GETBYTE(s2, 2)] ^
            Td[2][GETBYTE(s1, 1)] ^
    8562:	405a      	eors	r2, r3
            Td[3][GETBYTE(s0, 0)] ^
            rk[7];
    8564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8566:	331c      	adds	r3, #28
    8568:	681b      	ldr	r3, [r3, #0]
            Td[0][GETBYTE(s2, 3)] ^
            Td[1][GETBYTE(s1, 2)] ^
            Td[2][GETBYTE(s0, 1)] ^
            Td[3][GETBYTE(s3, 0)] ^
            rk[6];
        t3 =
    856a:	4053      	eors	r3, r2
    856c:	623b      	str	r3, [r7, #32]
            Td[1][GETBYTE(s2, 2)] ^
            Td[2][GETBYTE(s1, 1)] ^
            Td[3][GETBYTE(s0, 0)] ^
            rk[7];

        rk += 8;
    856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8570:	3320      	adds	r3, #32
    8572:	633b      	str	r3, [r7, #48]	; 0x30
        if (--r == 0) {
    8574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8576:	3b01      	subs	r3, #1
    8578:	637b      	str	r3, [r7, #52]	; 0x34
    857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    857c:	2b00      	cmp	r3, #0
    857e:	d100      	bne.n	8582 <wc_AesDecrypt+0x252>
    8580:	e0b6      	b.n	86f0 <wc_AesDecrypt+0x3c0>
            break;
        }

        s0 =
            Td[0][GETBYTE(t0, 3)] ^
    8582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8584:	0e1b      	lsrs	r3, r3, #24
    8586:	b2db      	uxtb	r3, r3
    8588:	001a      	movs	r2, r3
    858a:	4b58      	ldr	r3, [pc, #352]	; (86ec <wc_AesDecrypt+0x3bc>)
    858c:	0092      	lsls	r2, r2, #2
    858e:	58d2      	ldr	r2, [r2, r3]
            Td[1][GETBYTE(t3, 2)] ^
    8590:	6a3b      	ldr	r3, [r7, #32]
    8592:	0c1b      	lsrs	r3, r3, #16
    8594:	b2db      	uxtb	r3, r3
    8596:	0019      	movs	r1, r3
    8598:	4b54      	ldr	r3, [pc, #336]	; (86ec <wc_AesDecrypt+0x3bc>)
    859a:	3101      	adds	r1, #1
    859c:	31ff      	adds	r1, #255	; 0xff
    859e:	0089      	lsls	r1, r1, #2
    85a0:	58cb      	ldr	r3, [r1, r3]
        if (--r == 0) {
            break;
        }

        s0 =
            Td[0][GETBYTE(t0, 3)] ^
    85a2:	405a      	eors	r2, r3
            Td[1][GETBYTE(t3, 2)] ^
            Td[2][GETBYTE(t2, 1)] ^
    85a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85a6:	0a1b      	lsrs	r3, r3, #8
    85a8:	b2db      	uxtb	r3, r3
    85aa:	0019      	movs	r1, r3
    85ac:	4b4f      	ldr	r3, [pc, #316]	; (86ec <wc_AesDecrypt+0x3bc>)
    85ae:	2080      	movs	r0, #128	; 0x80
    85b0:	0080      	lsls	r0, r0, #2
    85b2:	4684      	mov	ip, r0
    85b4:	4461      	add	r1, ip
    85b6:	0089      	lsls	r1, r1, #2
    85b8:	58cb      	ldr	r3, [r1, r3]
            break;
        }

        s0 =
            Td[0][GETBYTE(t0, 3)] ^
            Td[1][GETBYTE(t3, 2)] ^
    85ba:	405a      	eors	r2, r3
            Td[2][GETBYTE(t2, 1)] ^
            Td[3][GETBYTE(t1, 0)] ^
    85bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    85be:	b2db      	uxtb	r3, r3
    85c0:	0019      	movs	r1, r3
    85c2:	4b4a      	ldr	r3, [pc, #296]	; (86ec <wc_AesDecrypt+0x3bc>)
    85c4:	20c0      	movs	r0, #192	; 0xc0
    85c6:	0080      	lsls	r0, r0, #2
    85c8:	4684      	mov	ip, r0
    85ca:	4461      	add	r1, ip
    85cc:	0089      	lsls	r1, r1, #2
    85ce:	58cb      	ldr	r3, [r1, r3]
        }

        s0 =
            Td[0][GETBYTE(t0, 3)] ^
            Td[1][GETBYTE(t3, 2)] ^
            Td[2][GETBYTE(t2, 1)] ^
    85d0:	405a      	eors	r2, r3
            Td[3][GETBYTE(t1, 0)] ^
            rk[0];
    85d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    85d4:	681b      	ldr	r3, [r3, #0]

        s0 =
            Td[0][GETBYTE(t0, 3)] ^
            Td[1][GETBYTE(t3, 2)] ^
            Td[2][GETBYTE(t2, 1)] ^
            Td[3][GETBYTE(t1, 0)] ^
    85d6:	4053      	eors	r3, r2
        rk += 8;
        if (--r == 0) {
            break;
        }

        s0 =
    85d8:	61fb      	str	r3, [r7, #28]
            Td[1][GETBYTE(t3, 2)] ^
            Td[2][GETBYTE(t2, 1)] ^
            Td[3][GETBYTE(t1, 0)] ^
            rk[0];
        s1 =
            Td[0][GETBYTE(t1, 3)] ^
    85da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    85dc:	0e1b      	lsrs	r3, r3, #24
    85de:	b2db      	uxtb	r3, r3
    85e0:	001a      	movs	r2, r3
    85e2:	4b42      	ldr	r3, [pc, #264]	; (86ec <wc_AesDecrypt+0x3bc>)
    85e4:	0092      	lsls	r2, r2, #2
    85e6:	58d2      	ldr	r2, [r2, r3]
            Td[1][GETBYTE(t0, 2)] ^
    85e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85ea:	0c1b      	lsrs	r3, r3, #16
    85ec:	b2db      	uxtb	r3, r3
    85ee:	0019      	movs	r1, r3
    85f0:	4b3e      	ldr	r3, [pc, #248]	; (86ec <wc_AesDecrypt+0x3bc>)
    85f2:	3101      	adds	r1, #1
    85f4:	31ff      	adds	r1, #255	; 0xff
    85f6:	0089      	lsls	r1, r1, #2
    85f8:	58cb      	ldr	r3, [r1, r3]
            Td[1][GETBYTE(t3, 2)] ^
            Td[2][GETBYTE(t2, 1)] ^
            Td[3][GETBYTE(t1, 0)] ^
            rk[0];
        s1 =
            Td[0][GETBYTE(t1, 3)] ^
    85fa:	405a      	eors	r2, r3
            Td[1][GETBYTE(t0, 2)] ^
            Td[2][GETBYTE(t3, 1)] ^
    85fc:	6a3b      	ldr	r3, [r7, #32]
    85fe:	0a1b      	lsrs	r3, r3, #8
    8600:	b2db      	uxtb	r3, r3
    8602:	0019      	movs	r1, r3
    8604:	4b39      	ldr	r3, [pc, #228]	; (86ec <wc_AesDecrypt+0x3bc>)
    8606:	2080      	movs	r0, #128	; 0x80
    8608:	0080      	lsls	r0, r0, #2
    860a:	4684      	mov	ip, r0
    860c:	4461      	add	r1, ip
    860e:	0089      	lsls	r1, r1, #2
    8610:	58cb      	ldr	r3, [r1, r3]
            Td[2][GETBYTE(t2, 1)] ^
            Td[3][GETBYTE(t1, 0)] ^
            rk[0];
        s1 =
            Td[0][GETBYTE(t1, 3)] ^
            Td[1][GETBYTE(t0, 2)] ^
    8612:	405a      	eors	r2, r3
            Td[2][GETBYTE(t3, 1)] ^
            Td[3][GETBYTE(t2, 0)] ^
    8614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8616:	b2db      	uxtb	r3, r3
    8618:	0019      	movs	r1, r3
    861a:	4b34      	ldr	r3, [pc, #208]	; (86ec <wc_AesDecrypt+0x3bc>)
    861c:	20c0      	movs	r0, #192	; 0xc0
    861e:	0080      	lsls	r0, r0, #2
    8620:	4684      	mov	ip, r0
    8622:	4461      	add	r1, ip
    8624:	0089      	lsls	r1, r1, #2
    8626:	58cb      	ldr	r3, [r1, r3]
            Td[3][GETBYTE(t1, 0)] ^
            rk[0];
        s1 =
            Td[0][GETBYTE(t1, 3)] ^
            Td[1][GETBYTE(t0, 2)] ^
            Td[2][GETBYTE(t3, 1)] ^
    8628:	405a      	eors	r2, r3
            Td[3][GETBYTE(t2, 0)] ^
            rk[1];
    862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    862c:	3304      	adds	r3, #4
    862e:	681b      	ldr	r3, [r3, #0]
            rk[0];
        s1 =
            Td[0][GETBYTE(t1, 3)] ^
            Td[1][GETBYTE(t0, 2)] ^
            Td[2][GETBYTE(t3, 1)] ^
            Td[3][GETBYTE(t2, 0)] ^
    8630:	4053      	eors	r3, r2
            Td[0][GETBYTE(t0, 3)] ^
            Td[1][GETBYTE(t3, 2)] ^
            Td[2][GETBYTE(t2, 1)] ^
            Td[3][GETBYTE(t1, 0)] ^
            rk[0];
        s1 =
    8632:	61bb      	str	r3, [r7, #24]
            Td[1][GETBYTE(t0, 2)] ^
            Td[2][GETBYTE(t3, 1)] ^
            Td[3][GETBYTE(t2, 0)] ^
            rk[1];
        s2 =
            Td[0][GETBYTE(t2, 3)] ^
    8634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8636:	0e1b      	lsrs	r3, r3, #24
    8638:	b2db      	uxtb	r3, r3
    863a:	001a      	movs	r2, r3
    863c:	4b2b      	ldr	r3, [pc, #172]	; (86ec <wc_AesDecrypt+0x3bc>)
    863e:	0092      	lsls	r2, r2, #2
    8640:	58d2      	ldr	r2, [r2, r3]
            Td[1][GETBYTE(t1, 2)] ^
    8642:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8644:	0c1b      	lsrs	r3, r3, #16
    8646:	b2db      	uxtb	r3, r3
    8648:	0019      	movs	r1, r3
    864a:	4b28      	ldr	r3, [pc, #160]	; (86ec <wc_AesDecrypt+0x3bc>)
    864c:	3101      	adds	r1, #1
    864e:	31ff      	adds	r1, #255	; 0xff
    8650:	0089      	lsls	r1, r1, #2
    8652:	58cb      	ldr	r3, [r1, r3]
            Td[1][GETBYTE(t0, 2)] ^
            Td[2][GETBYTE(t3, 1)] ^
            Td[3][GETBYTE(t2, 0)] ^
            rk[1];
        s2 =
            Td[0][GETBYTE(t2, 3)] ^
    8654:	405a      	eors	r2, r3
            Td[1][GETBYTE(t1, 2)] ^
            Td[2][GETBYTE(t0, 1)] ^
    8656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8658:	0a1b      	lsrs	r3, r3, #8
    865a:	b2db      	uxtb	r3, r3
    865c:	0019      	movs	r1, r3
    865e:	4b23      	ldr	r3, [pc, #140]	; (86ec <wc_AesDecrypt+0x3bc>)
    8660:	2080      	movs	r0, #128	; 0x80
    8662:	0080      	lsls	r0, r0, #2
    8664:	4684      	mov	ip, r0
    8666:	4461      	add	r1, ip
    8668:	0089      	lsls	r1, r1, #2
    866a:	58cb      	ldr	r3, [r1, r3]
            Td[2][GETBYTE(t3, 1)] ^
            Td[3][GETBYTE(t2, 0)] ^
            rk[1];
        s2 =
            Td[0][GETBYTE(t2, 3)] ^
            Td[1][GETBYTE(t1, 2)] ^
    866c:	405a      	eors	r2, r3
            Td[2][GETBYTE(t0, 1)] ^
            Td[3][GETBYTE(t3, 0)] ^
    866e:	6a3b      	ldr	r3, [r7, #32]
    8670:	b2db      	uxtb	r3, r3
    8672:	0019      	movs	r1, r3
    8674:	4b1d      	ldr	r3, [pc, #116]	; (86ec <wc_AesDecrypt+0x3bc>)
    8676:	20c0      	movs	r0, #192	; 0xc0
    8678:	0080      	lsls	r0, r0, #2
    867a:	4684      	mov	ip, r0
    867c:	4461      	add	r1, ip
    867e:	0089      	lsls	r1, r1, #2
    8680:	58cb      	ldr	r3, [r1, r3]
            Td[3][GETBYTE(t2, 0)] ^
            rk[1];
        s2 =
            Td[0][GETBYTE(t2, 3)] ^
            Td[1][GETBYTE(t1, 2)] ^
            Td[2][GETBYTE(t0, 1)] ^
    8682:	405a      	eors	r2, r3
            Td[3][GETBYTE(t3, 0)] ^
            rk[2];
    8684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8686:	3308      	adds	r3, #8
    8688:	681b      	ldr	r3, [r3, #0]
            rk[1];
        s2 =
            Td[0][GETBYTE(t2, 3)] ^
            Td[1][GETBYTE(t1, 2)] ^
            Td[2][GETBYTE(t0, 1)] ^
            Td[3][GETBYTE(t3, 0)] ^
    868a:	4053      	eors	r3, r2
            Td[0][GETBYTE(t1, 3)] ^
            Td[1][GETBYTE(t0, 2)] ^
            Td[2][GETBYTE(t3, 1)] ^
            Td[3][GETBYTE(t2, 0)] ^
            rk[1];
        s2 =
    868c:	617b      	str	r3, [r7, #20]
            Td[1][GETBYTE(t1, 2)] ^
            Td[2][GETBYTE(t0, 1)] ^
            Td[3][GETBYTE(t3, 0)] ^
            rk[2];
        s3 =
            Td[0][GETBYTE(t3, 3)] ^
    868e:	6a3b      	ldr	r3, [r7, #32]
    8690:	0e1b      	lsrs	r3, r3, #24
    8692:	b2db      	uxtb	r3, r3
    8694:	001a      	movs	r2, r3
    8696:	4b15      	ldr	r3, [pc, #84]	; (86ec <wc_AesDecrypt+0x3bc>)
    8698:	0092      	lsls	r2, r2, #2
    869a:	58d2      	ldr	r2, [r2, r3]
            Td[1][GETBYTE(t2, 2)] ^
    869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    869e:	0c1b      	lsrs	r3, r3, #16
    86a0:	b2db      	uxtb	r3, r3
    86a2:	0019      	movs	r1, r3
    86a4:	4b11      	ldr	r3, [pc, #68]	; (86ec <wc_AesDecrypt+0x3bc>)
    86a6:	3101      	adds	r1, #1
    86a8:	31ff      	adds	r1, #255	; 0xff
    86aa:	0089      	lsls	r1, r1, #2
    86ac:	58cb      	ldr	r3, [r1, r3]
            Td[1][GETBYTE(t1, 2)] ^
            Td[2][GETBYTE(t0, 1)] ^
            Td[3][GETBYTE(t3, 0)] ^
            rk[2];
        s3 =
            Td[0][GETBYTE(t3, 3)] ^
    86ae:	405a      	eors	r2, r3
            Td[1][GETBYTE(t2, 2)] ^
            Td[2][GETBYTE(t1, 1)] ^
    86b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    86b2:	0a1b      	lsrs	r3, r3, #8
    86b4:	b2db      	uxtb	r3, r3
    86b6:	0019      	movs	r1, r3
    86b8:	4b0c      	ldr	r3, [pc, #48]	; (86ec <wc_AesDecrypt+0x3bc>)
    86ba:	2080      	movs	r0, #128	; 0x80
    86bc:	0080      	lsls	r0, r0, #2
    86be:	4684      	mov	ip, r0
    86c0:	4461      	add	r1, ip
    86c2:	0089      	lsls	r1, r1, #2
    86c4:	58cb      	ldr	r3, [r1, r3]
            Td[2][GETBYTE(t0, 1)] ^
            Td[3][GETBYTE(t3, 0)] ^
            rk[2];
        s3 =
            Td[0][GETBYTE(t3, 3)] ^
            Td[1][GETBYTE(t2, 2)] ^
    86c6:	405a      	eors	r2, r3
            Td[2][GETBYTE(t1, 1)] ^
            Td[3][GETBYTE(t0, 0)] ^
    86c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86ca:	b2db      	uxtb	r3, r3
    86cc:	0019      	movs	r1, r3
    86ce:	4b07      	ldr	r3, [pc, #28]	; (86ec <wc_AesDecrypt+0x3bc>)
    86d0:	20c0      	movs	r0, #192	; 0xc0
    86d2:	0080      	lsls	r0, r0, #2
    86d4:	4684      	mov	ip, r0
    86d6:	4461      	add	r1, ip
    86d8:	0089      	lsls	r1, r1, #2
    86da:	58cb      	ldr	r3, [r1, r3]
            Td[3][GETBYTE(t3, 0)] ^
            rk[2];
        s3 =
            Td[0][GETBYTE(t3, 3)] ^
            Td[1][GETBYTE(t2, 2)] ^
            Td[2][GETBYTE(t1, 1)] ^
    86dc:	405a      	eors	r2, r3
            Td[3][GETBYTE(t0, 0)] ^
            rk[3];
    86de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    86e0:	330c      	adds	r3, #12
    86e2:	681b      	ldr	r3, [r3, #0]
            rk[2];
        s3 =
            Td[0][GETBYTE(t3, 3)] ^
            Td[1][GETBYTE(t2, 2)] ^
            Td[2][GETBYTE(t1, 1)] ^
            Td[3][GETBYTE(t0, 0)] ^
    86e4:	4053      	eors	r3, r2
            Td[0][GETBYTE(t2, 3)] ^
            Td[1][GETBYTE(t1, 2)] ^
            Td[2][GETBYTE(t0, 1)] ^
            Td[3][GETBYTE(t3, 0)] ^
            rk[2];
        s3 =
    86e6:	613b      	str	r3, [r7, #16]
            Td[0][GETBYTE(t3, 3)] ^
            Td[1][GETBYTE(t2, 2)] ^
            Td[2][GETBYTE(t1, 1)] ^
            Td[3][GETBYTE(t0, 0)] ^
            rk[3];
    }
    86e8:	e68d      	b.n	8406 <wc_AesDecrypt+0xd6>
    86ea:	46c0      	nop			; (mov r8, r8)
    86ec:	0002b3a8 	.word	0x0002b3a8
            Td[3][GETBYTE(s0, 0)] ^
            rk[7];

        rk += 8;
        if (--r == 0) {
            break;
    86f0:	46c0      	nop			; (mov r8, r8)
    /*
     * apply last round and
     * map cipher state to byte array block:
     */

    t0 |= PreFetchTd4();
    86f2:	f7ff fdff 	bl	82f4 <PreFetchTd4>
    86f6:	0002      	movs	r2, r0
    86f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86fa:	4313      	orrs	r3, r2
    86fc:	62fb      	str	r3, [r7, #44]	; 0x2c

    s0 =
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
    86fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8700:	0e1b      	lsrs	r3, r3, #24
    8702:	b2db      	uxtb	r3, r3
    8704:	001a      	movs	r2, r3
    8706:	4b5f      	ldr	r3, [pc, #380]	; (8884 <wc_AesDecrypt+0x554>)
    8708:	5c9b      	ldrb	r3, [r3, r2]
    870a:	061a      	lsls	r2, r3, #24
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
    870c:	6a3b      	ldr	r3, [r7, #32]
    870e:	0c1b      	lsrs	r3, r3, #16
    8710:	b2db      	uxtb	r3, r3
    8712:	0019      	movs	r1, r3
    8714:	4b5b      	ldr	r3, [pc, #364]	; (8884 <wc_AesDecrypt+0x554>)
    8716:	5c5b      	ldrb	r3, [r3, r1]
    8718:	041b      	lsls	r3, r3, #16
     */

    t0 |= PreFetchTd4();

    s0 =
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
    871a:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
    871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    871e:	0a1b      	lsrs	r3, r3, #8
    8720:	b2db      	uxtb	r3, r3
    8722:	0019      	movs	r1, r3
    8724:	4b57      	ldr	r3, [pc, #348]	; (8884 <wc_AesDecrypt+0x554>)
    8726:	5c5b      	ldrb	r3, [r3, r1]
    8728:	021b      	lsls	r3, r3, #8

    t0 |= PreFetchTd4();

    s0 =
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
    872a:	4053      	eors	r3, r2
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    872c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    872e:	b2d2      	uxtb	r2, r2
    8730:	0011      	movs	r1, r2
    8732:	4a54      	ldr	r2, [pc, #336]	; (8884 <wc_AesDecrypt+0x554>)
    8734:	5c52      	ldrb	r2, [r2, r1]
    t0 |= PreFetchTd4();

    s0 =
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
    8736:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t1, 0)]) ^
        rk[0];
    8738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    873a:	681b      	ldr	r3, [r3, #0]

    s0 =
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    873c:	4053      	eors	r3, r2
     * map cipher state to byte array block:
     */

    t0 |= PreFetchTd4();

    s0 =
    873e:	61fb      	str	r3, [r7, #28]
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t1, 0)]) ^
        rk[0];
    s1 =
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
    8740:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8742:	0e1b      	lsrs	r3, r3, #24
    8744:	b2db      	uxtb	r3, r3
    8746:	001a      	movs	r2, r3
    8748:	4b4e      	ldr	r3, [pc, #312]	; (8884 <wc_AesDecrypt+0x554>)
    874a:	5c9b      	ldrb	r3, [r3, r2]
    874c:	061a      	lsls	r2, r3, #24
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
    874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8750:	0c1b      	lsrs	r3, r3, #16
    8752:	b2db      	uxtb	r3, r3
    8754:	0019      	movs	r1, r3
    8756:	4b4b      	ldr	r3, [pc, #300]	; (8884 <wc_AesDecrypt+0x554>)
    8758:	5c5b      	ldrb	r3, [r3, r1]
    875a:	041b      	lsls	r3, r3, #16
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t1, 0)]) ^
        rk[0];
    s1 =
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
    875c:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
    875e:	6a3b      	ldr	r3, [r7, #32]
    8760:	0a1b      	lsrs	r3, r3, #8
    8762:	b2db      	uxtb	r3, r3
    8764:	0019      	movs	r1, r3
    8766:	4b47      	ldr	r3, [pc, #284]	; (8884 <wc_AesDecrypt+0x554>)
    8768:	5c5b      	ldrb	r3, [r3, r1]
    876a:	021b      	lsls	r3, r3, #8
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t1, 0)]) ^
        rk[0];
    s1 =
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
    876c:	4053      	eors	r3, r2
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    876e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8770:	b2d2      	uxtb	r2, r2
    8772:	0011      	movs	r1, r2
    8774:	4a43      	ldr	r2, [pc, #268]	; (8884 <wc_AesDecrypt+0x554>)
    8776:	5c52      	ldrb	r2, [r2, r1]
        ((word32)Td4[GETBYTE(t1, 0)]) ^
        rk[0];
    s1 =
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
    8778:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t2, 0)]) ^
        rk[1];
    877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    877c:	3304      	adds	r3, #4
    877e:	681b      	ldr	r3, [r3, #0]
        rk[0];
    s1 =
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    8780:	4053      	eors	r3, r2
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t1, 0)]) ^
        rk[0];
    s1 =
    8782:	61bb      	str	r3, [r7, #24]
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t2, 0)]) ^
        rk[1];
    s2 =
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
    8784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8786:	0e1b      	lsrs	r3, r3, #24
    8788:	b2db      	uxtb	r3, r3
    878a:	001a      	movs	r2, r3
    878c:	4b3d      	ldr	r3, [pc, #244]	; (8884 <wc_AesDecrypt+0x554>)
    878e:	5c9b      	ldrb	r3, [r3, r2]
    8790:	061a      	lsls	r2, r3, #24
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
    8792:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8794:	0c1b      	lsrs	r3, r3, #16
    8796:	b2db      	uxtb	r3, r3
    8798:	0019      	movs	r1, r3
    879a:	4b3a      	ldr	r3, [pc, #232]	; (8884 <wc_AesDecrypt+0x554>)
    879c:	5c5b      	ldrb	r3, [r3, r1]
    879e:	041b      	lsls	r3, r3, #16
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t2, 0)]) ^
        rk[1];
    s2 =
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
    87a0:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
    87a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87a4:	0a1b      	lsrs	r3, r3, #8
    87a6:	b2db      	uxtb	r3, r3
    87a8:	0019      	movs	r1, r3
    87aa:	4b36      	ldr	r3, [pc, #216]	; (8884 <wc_AesDecrypt+0x554>)
    87ac:	5c5b      	ldrb	r3, [r3, r1]
    87ae:	021b      	lsls	r3, r3, #8
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t2, 0)]) ^
        rk[1];
    s2 =
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
    87b0:	4053      	eors	r3, r2
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    87b2:	6a3a      	ldr	r2, [r7, #32]
    87b4:	b2d2      	uxtb	r2, r2
    87b6:	0011      	movs	r1, r2
    87b8:	4a32      	ldr	r2, [pc, #200]	; (8884 <wc_AesDecrypt+0x554>)
    87ba:	5c52      	ldrb	r2, [r2, r1]
        ((word32)Td4[GETBYTE(t2, 0)]) ^
        rk[1];
    s2 =
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
    87bc:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t3, 0)]) ^
        rk[2];
    87be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    87c0:	3308      	adds	r3, #8
    87c2:	681b      	ldr	r3, [r3, #0]
        rk[1];
    s2 =
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    87c4:	4053      	eors	r3, r2
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t2, 0)]) ^
        rk[1];
    s2 =
    87c6:	617b      	str	r3, [r7, #20]
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t3, 0)]) ^
        rk[2];
    s3 =
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
    87c8:	6a3b      	ldr	r3, [r7, #32]
    87ca:	0e1b      	lsrs	r3, r3, #24
    87cc:	b2db      	uxtb	r3, r3
    87ce:	001a      	movs	r2, r3
    87d0:	4b2c      	ldr	r3, [pc, #176]	; (8884 <wc_AesDecrypt+0x554>)
    87d2:	5c9b      	ldrb	r3, [r3, r2]
    87d4:	061a      	lsls	r2, r3, #24
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
    87d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87d8:	0c1b      	lsrs	r3, r3, #16
    87da:	b2db      	uxtb	r3, r3
    87dc:	0019      	movs	r1, r3
    87de:	4b29      	ldr	r3, [pc, #164]	; (8884 <wc_AesDecrypt+0x554>)
    87e0:	5c5b      	ldrb	r3, [r3, r1]
    87e2:	041b      	lsls	r3, r3, #16
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t3, 0)]) ^
        rk[2];
    s3 =
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
    87e4:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
    87e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    87e8:	0a1b      	lsrs	r3, r3, #8
    87ea:	b2db      	uxtb	r3, r3
    87ec:	0019      	movs	r1, r3
    87ee:	4b25      	ldr	r3, [pc, #148]	; (8884 <wc_AesDecrypt+0x554>)
    87f0:	5c5b      	ldrb	r3, [r3, r1]
    87f2:	021b      	lsls	r3, r3, #8
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t3, 0)]) ^
        rk[2];
    s3 =
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
    87f4:	4053      	eors	r3, r2
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    87f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    87f8:	b2d2      	uxtb	r2, r2
    87fa:	0011      	movs	r1, r2
    87fc:	4a21      	ldr	r2, [pc, #132]	; (8884 <wc_AesDecrypt+0x554>)
    87fe:	5c52      	ldrb	r2, [r2, r1]
        ((word32)Td4[GETBYTE(t3, 0)]) ^
        rk[2];
    s3 =
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
    8800:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t0, 0)]) ^
        rk[3];
    8802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8804:	330c      	adds	r3, #12
    8806:	681b      	ldr	r3, [r3, #0]
        rk[2];
    s3 =
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    8808:	4053      	eors	r3, r2
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
        ((word32)Td4[GETBYTE(t3, 0)]) ^
        rk[2];
    s3 =
    880a:	613b      	str	r3, [r7, #16]
        ((word32)Td4[GETBYTE(t0, 0)]) ^
        rk[3];

    /* write out */
#ifdef LITTLE_ENDIAN_ORDER
    s0 = ByteReverseWord32(s0);
    880c:	69fb      	ldr	r3, [r7, #28]
    880e:	0018      	movs	r0, r3
    8810:	f7ff f94e 	bl	7ab0 <ByteReverseWord32>
    8814:	0003      	movs	r3, r0
    8816:	61fb      	str	r3, [r7, #28]
    s1 = ByteReverseWord32(s1);
    8818:	69bb      	ldr	r3, [r7, #24]
    881a:	0018      	movs	r0, r3
    881c:	f7ff f948 	bl	7ab0 <ByteReverseWord32>
    8820:	0003      	movs	r3, r0
    8822:	61bb      	str	r3, [r7, #24]
    s2 = ByteReverseWord32(s2);
    8824:	697b      	ldr	r3, [r7, #20]
    8826:	0018      	movs	r0, r3
    8828:	f7ff f942 	bl	7ab0 <ByteReverseWord32>
    882c:	0003      	movs	r3, r0
    882e:	617b      	str	r3, [r7, #20]
    s3 = ByteReverseWord32(s3);
    8830:	693b      	ldr	r3, [r7, #16]
    8832:	0018      	movs	r0, r3
    8834:	f7ff f93c 	bl	7ab0 <ByteReverseWord32>
    8838:	0003      	movs	r3, r0
    883a:	613b      	str	r3, [r7, #16]
#endif

    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    883c:	231c      	movs	r3, #28
    883e:	18f9      	adds	r1, r7, r3
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	2204      	movs	r2, #4
    8844:	0018      	movs	r0, r3
    8846:	f01c ff52 	bl	256ee <memcpy>
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    884a:	687b      	ldr	r3, [r7, #4]
    884c:	3304      	adds	r3, #4
    884e:	2218      	movs	r2, #24
    8850:	18b9      	adds	r1, r7, r2
    8852:	2204      	movs	r2, #4
    8854:	0018      	movs	r0, r3
    8856:	f01c ff4a 	bl	256ee <memcpy>
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    885a:	687b      	ldr	r3, [r7, #4]
    885c:	3308      	adds	r3, #8
    885e:	2214      	movs	r2, #20
    8860:	18b9      	adds	r1, r7, r2
    8862:	2204      	movs	r2, #4
    8864:	0018      	movs	r0, r3
    8866:	f01c ff42 	bl	256ee <memcpy>
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
    886a:	687b      	ldr	r3, [r7, #4]
    886c:	330c      	adds	r3, #12
    886e:	2210      	movs	r2, #16
    8870:	18b9      	adds	r1, r7, r2
    8872:	2204      	movs	r2, #4
    8874:	0018      	movs	r0, r3
    8876:	f01c ff3a 	bl	256ee <memcpy>
    887a:	e000      	b.n	887e <wc_AesDecrypt+0x54e>
    word32 r = aes->rounds >> 1;

    const word32* rk = aes->key;
    if (r > 7 || r == 0) {
        WOLFSSL_MSG("AesDecrypt encountered improper key, set it up");
        return;  /* stop instead of seg-faulting, set up your keys! */
    887c:	46c0      	nop			; (mov r8, r8)

    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
}
    887e:	46bd      	mov	sp, r7
    8880:	b00e      	add	sp, #56	; 0x38
    8882:	bd80      	pop	{r7, pc}
    8884:	0002c3a8 	.word	0x0002c3a8

00008888 <wc_AesSetKeyLocal>:
#else

    /* Software AES - SetKey */
    static int wc_AesSetKeyLocal(Aes* aes, const byte* userKey, word32 keylen,
                const byte* iv, int dir)
    {
    8888:	b590      	push	{r4, r7, lr}
    888a:	b089      	sub	sp, #36	; 0x24
    888c:	af00      	add	r7, sp, #0
    888e:	60f8      	str	r0, [r7, #12]
    8890:	60b9      	str	r1, [r7, #8]
    8892:	607a      	str	r2, [r7, #4]
    8894:	603b      	str	r3, [r7, #0]
        word32 *rk = aes->key;
    8896:	68fb      	ldr	r3, [r7, #12]
    8898:	61fb      	str	r3, [r7, #28]
    #ifdef NEED_AES_TABLES
        word32 temp;
        unsigned int i = 0;
    889a:	2300      	movs	r3, #0
    889c:	61bb      	str	r3, [r7, #24]
        #endif /* WOLFSSL_AESNI */
        #if defined(WOLFSSL_AES_CFB) || defined(WOLFSSL_AES_COUNTER)
            aes->left = 0;
        #endif

        aes->keylen = keylen;
    889e:	687a      	ldr	r2, [r7, #4]
    88a0:	68fb      	ldr	r3, [r7, #12]
    88a2:	21f4      	movs	r1, #244	; 0xf4
    88a4:	505a      	str	r2, [r3, r1]
        aes->rounds = (keylen/4) + 6;
    88a6:	687b      	ldr	r3, [r7, #4]
    88a8:	089b      	lsrs	r3, r3, #2
    88aa:	1d9a      	adds	r2, r3, #6
    88ac:	68fb      	ldr	r3, [r7, #12]
    88ae:	21f0      	movs	r1, #240	; 0xf0
    88b0:	505a      	str	r2, [r3, r1]

        XMEMCPY(rk, userKey, keylen);
    88b2:	687a      	ldr	r2, [r7, #4]
    88b4:	68b9      	ldr	r1, [r7, #8]
    88b6:	69fb      	ldr	r3, [r7, #28]
    88b8:	0018      	movs	r0, r3
    88ba:	f01c ff18 	bl	256ee <memcpy>
    #if defined(LITTLE_ENDIAN_ORDER) && !defined(WOLFSSL_PIC32MZ_CRYPT) && \
        (!defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
          defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_AES))
        ByteReverseWords(rk, rk, keylen);
    88be:	687a      	ldr	r2, [r7, #4]
    88c0:	69f9      	ldr	r1, [r7, #28]
    88c2:	69fb      	ldr	r3, [r7, #28]
    88c4:	0018      	movs	r0, r3
    88c6:	f7ff f90f 	bl	7ae8 <ByteReverseWords>
    #endif

#ifdef NEED_AES_TABLES

        switch (keylen) {
    88ca:	687b      	ldr	r3, [r7, #4]
    88cc:	2b18      	cmp	r3, #24
    88ce:	d06f      	beq.n	89b0 <wc_AesSetKeyLocal+0x128>
    88d0:	2b20      	cmp	r3, #32
    88d2:	d100      	bne.n	88d6 <wc_AesSetKeyLocal+0x4e>
    88d4:	e0ea      	b.n	8aac <wc_AesSetKeyLocal+0x224>
    88d6:	2b10      	cmp	r3, #16
    88d8:	d000      	beq.n	88dc <wc_AesSetKeyLocal+0x54>
    88da:	e1ab      	b.n	8c34 <wc_AesSetKeyLocal+0x3ac>
    #if defined(AES_MAX_KEY_SIZE) && AES_MAX_KEY_SIZE >= 128 && \
            defined(WOLFSSL_AES_128)
        case 16:
            while (1)
            {
                temp  = rk[3];
    88dc:	69fb      	ldr	r3, [r7, #28]
    88de:	68db      	ldr	r3, [r3, #12]
    88e0:	613b      	str	r3, [r7, #16]
                rk[4] = rk[0] ^
    88e2:	69fb      	ldr	r3, [r7, #28]
    88e4:	3310      	adds	r3, #16
    88e6:	69fa      	ldr	r2, [r7, #28]
    88e8:	6811      	ldr	r1, [r2, #0]
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    88ea:	693a      	ldr	r2, [r7, #16]
    88ec:	0c12      	lsrs	r2, r2, #16
    88ee:	b2d2      	uxtb	r2, r2
    88f0:	0010      	movs	r0, r2
    88f2:	4ad9      	ldr	r2, [pc, #868]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    88f4:	2480      	movs	r4, #128	; 0x80
    88f6:	00a4      	lsls	r4, r4, #2
    88f8:	46a4      	mov	ip, r4
    88fa:	4460      	add	r0, ip
    88fc:	0080      	lsls	r0, r0, #2
    88fe:	5882      	ldr	r2, [r0, r2]
    8900:	0e12      	lsrs	r2, r2, #24
    8902:	0612      	lsls	r2, r2, #24
            defined(WOLFSSL_AES_128)
        case 16:
            while (1)
            {
                temp  = rk[3];
                rk[4] = rk[0] ^
    8904:	4051      	eors	r1, r2
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    8906:	693a      	ldr	r2, [r7, #16]
    8908:	0a12      	lsrs	r2, r2, #8
    890a:	b2d2      	uxtb	r2, r2
    890c:	0010      	movs	r0, r2
    890e:	4ad2      	ldr	r2, [pc, #840]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8910:	24c0      	movs	r4, #192	; 0xc0
    8912:	00a4      	lsls	r4, r4, #2
    8914:	46a4      	mov	ip, r4
    8916:	4460      	add	r0, ip
    8918:	0080      	lsls	r0, r0, #2
    891a:	5880      	ldr	r0, [r0, r2]
    891c:	22ff      	movs	r2, #255	; 0xff
    891e:	0412      	lsls	r2, r2, #16
    8920:	4002      	ands	r2, r0
        case 16:
            while (1)
            {
                temp  = rk[3];
                rk[4] = rk[0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    8922:	4051      	eors	r1, r2
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    8924:	693a      	ldr	r2, [r7, #16]
    8926:	b2d2      	uxtb	r2, r2
    8928:	0010      	movs	r0, r2
    892a:	4acb      	ldr	r2, [pc, #812]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    892c:	0080      	lsls	r0, r0, #2
    892e:	5880      	ldr	r0, [r0, r2]
    8930:	22ff      	movs	r2, #255	; 0xff
    8932:	0212      	lsls	r2, r2, #8
    8934:	4002      	ands	r2, r0
            while (1)
            {
                temp  = rk[3];
                rk[4] = rk[0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    8936:	4051      	eors	r1, r2
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    8938:	693a      	ldr	r2, [r7, #16]
    893a:	0e12      	lsrs	r2, r2, #24
    893c:	b2d2      	uxtb	r2, r2
    893e:	0010      	movs	r0, r2
    8940:	4ac5      	ldr	r2, [pc, #788]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8942:	3001      	adds	r0, #1
    8944:	30ff      	adds	r0, #255	; 0xff
    8946:	0080      	lsls	r0, r0, #2
    8948:	5882      	ldr	r2, [r0, r2]
    894a:	20ff      	movs	r0, #255	; 0xff
    894c:	4002      	ands	r2, r0
            {
                temp  = rk[3];
                rk[4] = rk[0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    894e:	4051      	eors	r1, r2
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
                    rcon[i];
    8950:	4ac2      	ldr	r2, [pc, #776]	; (8c5c <wc_AesSetKeyLocal+0x3d4>)
    8952:	69b8      	ldr	r0, [r7, #24]
    8954:	0080      	lsls	r0, r0, #2
    8956:	5882      	ldr	r2, [r0, r2]
                temp  = rk[3];
                rk[4] = rk[0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    8958:	404a      	eors	r2, r1
            defined(WOLFSSL_AES_128)
        case 16:
            while (1)
            {
                temp  = rk[3];
                rk[4] = rk[0] ^
    895a:	601a      	str	r2, [r3, #0]
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
                    rcon[i];
                rk[5] = rk[1] ^ rk[4];
    895c:	69fb      	ldr	r3, [r7, #28]
    895e:	3314      	adds	r3, #20
    8960:	69fa      	ldr	r2, [r7, #28]
    8962:	3204      	adds	r2, #4
    8964:	6811      	ldr	r1, [r2, #0]
    8966:	69fa      	ldr	r2, [r7, #28]
    8968:	3210      	adds	r2, #16
    896a:	6812      	ldr	r2, [r2, #0]
    896c:	404a      	eors	r2, r1
    896e:	601a      	str	r2, [r3, #0]
                rk[6] = rk[2] ^ rk[5];
    8970:	69fb      	ldr	r3, [r7, #28]
    8972:	3318      	adds	r3, #24
    8974:	69fa      	ldr	r2, [r7, #28]
    8976:	3208      	adds	r2, #8
    8978:	6811      	ldr	r1, [r2, #0]
    897a:	69fa      	ldr	r2, [r7, #28]
    897c:	3214      	adds	r2, #20
    897e:	6812      	ldr	r2, [r2, #0]
    8980:	404a      	eors	r2, r1
    8982:	601a      	str	r2, [r3, #0]
                rk[7] = rk[3] ^ rk[6];
    8984:	69fb      	ldr	r3, [r7, #28]
    8986:	331c      	adds	r3, #28
    8988:	69fa      	ldr	r2, [r7, #28]
    898a:	320c      	adds	r2, #12
    898c:	6811      	ldr	r1, [r2, #0]
    898e:	69fa      	ldr	r2, [r7, #28]
    8990:	3218      	adds	r2, #24
    8992:	6812      	ldr	r2, [r2, #0]
    8994:	404a      	eors	r2, r1
    8996:	601a      	str	r2, [r3, #0]
                if (++i == 10)
    8998:	69bb      	ldr	r3, [r7, #24]
    899a:	3301      	adds	r3, #1
    899c:	61bb      	str	r3, [r7, #24]
    899e:	69bb      	ldr	r3, [r7, #24]
    89a0:	2b0a      	cmp	r3, #10
    89a2:	d003      	beq.n	89ac <wc_AesSetKeyLocal+0x124>
                    break;
                rk += 4;
    89a4:	69fb      	ldr	r3, [r7, #28]
    89a6:	3310      	adds	r3, #16
    89a8:	61fb      	str	r3, [r7, #28]
            }
    89aa:	e797      	b.n	88dc <wc_AesSetKeyLocal+0x54>
                    rcon[i];
                rk[5] = rk[1] ^ rk[4];
                rk[6] = rk[2] ^ rk[5];
                rk[7] = rk[3] ^ rk[6];
                if (++i == 10)
                    break;
    89ac:	46c0      	nop			; (mov r8, r8)
                rk += 4;
            }
            break;
    89ae:	e144      	b.n	8c3a <wc_AesSetKeyLocal+0x3b2>
            defined(WOLFSSL_AES_192)
        case 24:
            /* for (;;) here triggers a bug in VC60 SP4 w/ Pro Pack */
            while (1)
            {
                temp = rk[ 5];
    89b0:	69fb      	ldr	r3, [r7, #28]
    89b2:	695b      	ldr	r3, [r3, #20]
    89b4:	613b      	str	r3, [r7, #16]
                rk[ 6] = rk[ 0] ^
    89b6:	69fb      	ldr	r3, [r7, #28]
    89b8:	3318      	adds	r3, #24
    89ba:	69fa      	ldr	r2, [r7, #28]
    89bc:	6811      	ldr	r1, [r2, #0]
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    89be:	693a      	ldr	r2, [r7, #16]
    89c0:	0c12      	lsrs	r2, r2, #16
    89c2:	b2d2      	uxtb	r2, r2
    89c4:	0010      	movs	r0, r2
    89c6:	4aa4      	ldr	r2, [pc, #656]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    89c8:	2480      	movs	r4, #128	; 0x80
    89ca:	00a4      	lsls	r4, r4, #2
    89cc:	46a4      	mov	ip, r4
    89ce:	4460      	add	r0, ip
    89d0:	0080      	lsls	r0, r0, #2
    89d2:	5882      	ldr	r2, [r0, r2]
    89d4:	0e12      	lsrs	r2, r2, #24
    89d6:	0612      	lsls	r2, r2, #24
        case 24:
            /* for (;;) here triggers a bug in VC60 SP4 w/ Pro Pack */
            while (1)
            {
                temp = rk[ 5];
                rk[ 6] = rk[ 0] ^
    89d8:	4051      	eors	r1, r2
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    89da:	693a      	ldr	r2, [r7, #16]
    89dc:	0a12      	lsrs	r2, r2, #8
    89de:	b2d2      	uxtb	r2, r2
    89e0:	0010      	movs	r0, r2
    89e2:	4a9d      	ldr	r2, [pc, #628]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    89e4:	24c0      	movs	r4, #192	; 0xc0
    89e6:	00a4      	lsls	r4, r4, #2
    89e8:	46a4      	mov	ip, r4
    89ea:	4460      	add	r0, ip
    89ec:	0080      	lsls	r0, r0, #2
    89ee:	5880      	ldr	r0, [r0, r2]
    89f0:	22ff      	movs	r2, #255	; 0xff
    89f2:	0412      	lsls	r2, r2, #16
    89f4:	4002      	ands	r2, r0
            /* for (;;) here triggers a bug in VC60 SP4 w/ Pro Pack */
            while (1)
            {
                temp = rk[ 5];
                rk[ 6] = rk[ 0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    89f6:	4051      	eors	r1, r2
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    89f8:	693a      	ldr	r2, [r7, #16]
    89fa:	b2d2      	uxtb	r2, r2
    89fc:	0010      	movs	r0, r2
    89fe:	4a96      	ldr	r2, [pc, #600]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8a00:	0080      	lsls	r0, r0, #2
    8a02:	5880      	ldr	r0, [r0, r2]
    8a04:	22ff      	movs	r2, #255	; 0xff
    8a06:	0212      	lsls	r2, r2, #8
    8a08:	4002      	ands	r2, r0
            while (1)
            {
                temp = rk[ 5];
                rk[ 6] = rk[ 0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    8a0a:	4051      	eors	r1, r2
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    8a0c:	693a      	ldr	r2, [r7, #16]
    8a0e:	0e12      	lsrs	r2, r2, #24
    8a10:	b2d2      	uxtb	r2, r2
    8a12:	0010      	movs	r0, r2
    8a14:	4a90      	ldr	r2, [pc, #576]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8a16:	3001      	adds	r0, #1
    8a18:	30ff      	adds	r0, #255	; 0xff
    8a1a:	0080      	lsls	r0, r0, #2
    8a1c:	5882      	ldr	r2, [r0, r2]
    8a1e:	20ff      	movs	r0, #255	; 0xff
    8a20:	4002      	ands	r2, r0
            {
                temp = rk[ 5];
                rk[ 6] = rk[ 0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    8a22:	4051      	eors	r1, r2
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
                    rcon[i];
    8a24:	4a8d      	ldr	r2, [pc, #564]	; (8c5c <wc_AesSetKeyLocal+0x3d4>)
    8a26:	69b8      	ldr	r0, [r7, #24]
    8a28:	0080      	lsls	r0, r0, #2
    8a2a:	5882      	ldr	r2, [r0, r2]
                temp = rk[ 5];
                rk[ 6] = rk[ 0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    8a2c:	404a      	eors	r2, r1
        case 24:
            /* for (;;) here triggers a bug in VC60 SP4 w/ Pro Pack */
            while (1)
            {
                temp = rk[ 5];
                rk[ 6] = rk[ 0] ^
    8a2e:	601a      	str	r2, [r3, #0]
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
                    rcon[i];
                rk[ 7] = rk[ 1] ^ rk[ 6];
    8a30:	69fb      	ldr	r3, [r7, #28]
    8a32:	331c      	adds	r3, #28
    8a34:	69fa      	ldr	r2, [r7, #28]
    8a36:	3204      	adds	r2, #4
    8a38:	6811      	ldr	r1, [r2, #0]
    8a3a:	69fa      	ldr	r2, [r7, #28]
    8a3c:	3218      	adds	r2, #24
    8a3e:	6812      	ldr	r2, [r2, #0]
    8a40:	404a      	eors	r2, r1
    8a42:	601a      	str	r2, [r3, #0]
                rk[ 8] = rk[ 2] ^ rk[ 7];
    8a44:	69fb      	ldr	r3, [r7, #28]
    8a46:	3320      	adds	r3, #32
    8a48:	69fa      	ldr	r2, [r7, #28]
    8a4a:	3208      	adds	r2, #8
    8a4c:	6811      	ldr	r1, [r2, #0]
    8a4e:	69fa      	ldr	r2, [r7, #28]
    8a50:	321c      	adds	r2, #28
    8a52:	6812      	ldr	r2, [r2, #0]
    8a54:	404a      	eors	r2, r1
    8a56:	601a      	str	r2, [r3, #0]
                rk[ 9] = rk[ 3] ^ rk[ 8];
    8a58:	69fb      	ldr	r3, [r7, #28]
    8a5a:	3324      	adds	r3, #36	; 0x24
    8a5c:	69fa      	ldr	r2, [r7, #28]
    8a5e:	320c      	adds	r2, #12
    8a60:	6811      	ldr	r1, [r2, #0]
    8a62:	69fa      	ldr	r2, [r7, #28]
    8a64:	3220      	adds	r2, #32
    8a66:	6812      	ldr	r2, [r2, #0]
    8a68:	404a      	eors	r2, r1
    8a6a:	601a      	str	r2, [r3, #0]
                if (++i == 8)
    8a6c:	69bb      	ldr	r3, [r7, #24]
    8a6e:	3301      	adds	r3, #1
    8a70:	61bb      	str	r3, [r7, #24]
    8a72:	69bb      	ldr	r3, [r7, #24]
    8a74:	2b08      	cmp	r3, #8
    8a76:	d017      	beq.n	8aa8 <wc_AesSetKeyLocal+0x220>
                    break;
                rk[10] = rk[ 4] ^ rk[ 9];
    8a78:	69fb      	ldr	r3, [r7, #28]
    8a7a:	3328      	adds	r3, #40	; 0x28
    8a7c:	69fa      	ldr	r2, [r7, #28]
    8a7e:	3210      	adds	r2, #16
    8a80:	6811      	ldr	r1, [r2, #0]
    8a82:	69fa      	ldr	r2, [r7, #28]
    8a84:	3224      	adds	r2, #36	; 0x24
    8a86:	6812      	ldr	r2, [r2, #0]
    8a88:	404a      	eors	r2, r1
    8a8a:	601a      	str	r2, [r3, #0]
                rk[11] = rk[ 5] ^ rk[10];
    8a8c:	69fb      	ldr	r3, [r7, #28]
    8a8e:	332c      	adds	r3, #44	; 0x2c
    8a90:	69fa      	ldr	r2, [r7, #28]
    8a92:	3214      	adds	r2, #20
    8a94:	6811      	ldr	r1, [r2, #0]
    8a96:	69fa      	ldr	r2, [r7, #28]
    8a98:	3228      	adds	r2, #40	; 0x28
    8a9a:	6812      	ldr	r2, [r2, #0]
    8a9c:	404a      	eors	r2, r1
    8a9e:	601a      	str	r2, [r3, #0]
                rk += 6;
    8aa0:	69fb      	ldr	r3, [r7, #28]
    8aa2:	3318      	adds	r3, #24
    8aa4:	61fb      	str	r3, [r7, #28]
            }
    8aa6:	e783      	b.n	89b0 <wc_AesSetKeyLocal+0x128>
                    rcon[i];
                rk[ 7] = rk[ 1] ^ rk[ 6];
                rk[ 8] = rk[ 2] ^ rk[ 7];
                rk[ 9] = rk[ 3] ^ rk[ 8];
                if (++i == 8)
                    break;
    8aa8:	46c0      	nop			; (mov r8, r8)
                rk[10] = rk[ 4] ^ rk[ 9];
                rk[11] = rk[ 5] ^ rk[10];
                rk += 6;
            }
            break;
    8aaa:	e0c6      	b.n	8c3a <wc_AesSetKeyLocal+0x3b2>
    #if defined(AES_MAX_KEY_SIZE) && AES_MAX_KEY_SIZE >= 256 && \
            defined(WOLFSSL_AES_256)
        case 32:
            while (1)
            {
                temp = rk[ 7];
    8aac:	69fb      	ldr	r3, [r7, #28]
    8aae:	69db      	ldr	r3, [r3, #28]
    8ab0:	613b      	str	r3, [r7, #16]
                rk[ 8] = rk[ 0] ^
    8ab2:	69fb      	ldr	r3, [r7, #28]
    8ab4:	3320      	adds	r3, #32
    8ab6:	69fa      	ldr	r2, [r7, #28]
    8ab8:	6811      	ldr	r1, [r2, #0]
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    8aba:	693a      	ldr	r2, [r7, #16]
    8abc:	0c12      	lsrs	r2, r2, #16
    8abe:	b2d2      	uxtb	r2, r2
    8ac0:	0010      	movs	r0, r2
    8ac2:	4a65      	ldr	r2, [pc, #404]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8ac4:	2480      	movs	r4, #128	; 0x80
    8ac6:	00a4      	lsls	r4, r4, #2
    8ac8:	46a4      	mov	ip, r4
    8aca:	4460      	add	r0, ip
    8acc:	0080      	lsls	r0, r0, #2
    8ace:	5882      	ldr	r2, [r0, r2]
    8ad0:	0e12      	lsrs	r2, r2, #24
    8ad2:	0612      	lsls	r2, r2, #24
            defined(WOLFSSL_AES_256)
        case 32:
            while (1)
            {
                temp = rk[ 7];
                rk[ 8] = rk[ 0] ^
    8ad4:	4051      	eors	r1, r2
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    8ad6:	693a      	ldr	r2, [r7, #16]
    8ad8:	0a12      	lsrs	r2, r2, #8
    8ada:	b2d2      	uxtb	r2, r2
    8adc:	0010      	movs	r0, r2
    8ade:	4a5e      	ldr	r2, [pc, #376]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8ae0:	24c0      	movs	r4, #192	; 0xc0
    8ae2:	00a4      	lsls	r4, r4, #2
    8ae4:	46a4      	mov	ip, r4
    8ae6:	4460      	add	r0, ip
    8ae8:	0080      	lsls	r0, r0, #2
    8aea:	5880      	ldr	r0, [r0, r2]
    8aec:	22ff      	movs	r2, #255	; 0xff
    8aee:	0412      	lsls	r2, r2, #16
    8af0:	4002      	ands	r2, r0
        case 32:
            while (1)
            {
                temp = rk[ 7];
                rk[ 8] = rk[ 0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    8af2:	4051      	eors	r1, r2
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    8af4:	693a      	ldr	r2, [r7, #16]
    8af6:	b2d2      	uxtb	r2, r2
    8af8:	0010      	movs	r0, r2
    8afa:	4a57      	ldr	r2, [pc, #348]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8afc:	0080      	lsls	r0, r0, #2
    8afe:	5880      	ldr	r0, [r0, r2]
    8b00:	22ff      	movs	r2, #255	; 0xff
    8b02:	0212      	lsls	r2, r2, #8
    8b04:	4002      	ands	r2, r0
            while (1)
            {
                temp = rk[ 7];
                rk[ 8] = rk[ 0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    8b06:	4051      	eors	r1, r2
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    8b08:	693a      	ldr	r2, [r7, #16]
    8b0a:	0e12      	lsrs	r2, r2, #24
    8b0c:	b2d2      	uxtb	r2, r2
    8b0e:	0010      	movs	r0, r2
    8b10:	4a51      	ldr	r2, [pc, #324]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8b12:	3001      	adds	r0, #1
    8b14:	30ff      	adds	r0, #255	; 0xff
    8b16:	0080      	lsls	r0, r0, #2
    8b18:	5882      	ldr	r2, [r0, r2]
    8b1a:	20ff      	movs	r0, #255	; 0xff
    8b1c:	4002      	ands	r2, r0
            {
                temp = rk[ 7];
                rk[ 8] = rk[ 0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    8b1e:	4051      	eors	r1, r2
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
                    rcon[i];
    8b20:	4a4e      	ldr	r2, [pc, #312]	; (8c5c <wc_AesSetKeyLocal+0x3d4>)
    8b22:	69b8      	ldr	r0, [r7, #24]
    8b24:	0080      	lsls	r0, r0, #2
    8b26:	5882      	ldr	r2, [r0, r2]
                temp = rk[ 7];
                rk[ 8] = rk[ 0] ^
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    8b28:	404a      	eors	r2, r1
            defined(WOLFSSL_AES_256)
        case 32:
            while (1)
            {
                temp = rk[ 7];
                rk[ 8] = rk[ 0] ^
    8b2a:	601a      	str	r2, [r3, #0]
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
                    rcon[i];
                rk[ 9] = rk[ 1] ^ rk[ 8];
    8b2c:	69fb      	ldr	r3, [r7, #28]
    8b2e:	3324      	adds	r3, #36	; 0x24
    8b30:	69fa      	ldr	r2, [r7, #28]
    8b32:	3204      	adds	r2, #4
    8b34:	6811      	ldr	r1, [r2, #0]
    8b36:	69fa      	ldr	r2, [r7, #28]
    8b38:	3220      	adds	r2, #32
    8b3a:	6812      	ldr	r2, [r2, #0]
    8b3c:	404a      	eors	r2, r1
    8b3e:	601a      	str	r2, [r3, #0]
                rk[10] = rk[ 2] ^ rk[ 9];
    8b40:	69fb      	ldr	r3, [r7, #28]
    8b42:	3328      	adds	r3, #40	; 0x28
    8b44:	69fa      	ldr	r2, [r7, #28]
    8b46:	3208      	adds	r2, #8
    8b48:	6811      	ldr	r1, [r2, #0]
    8b4a:	69fa      	ldr	r2, [r7, #28]
    8b4c:	3224      	adds	r2, #36	; 0x24
    8b4e:	6812      	ldr	r2, [r2, #0]
    8b50:	404a      	eors	r2, r1
    8b52:	601a      	str	r2, [r3, #0]
                rk[11] = rk[ 3] ^ rk[10];
    8b54:	69fb      	ldr	r3, [r7, #28]
    8b56:	332c      	adds	r3, #44	; 0x2c
    8b58:	69fa      	ldr	r2, [r7, #28]
    8b5a:	320c      	adds	r2, #12
    8b5c:	6811      	ldr	r1, [r2, #0]
    8b5e:	69fa      	ldr	r2, [r7, #28]
    8b60:	3228      	adds	r2, #40	; 0x28
    8b62:	6812      	ldr	r2, [r2, #0]
    8b64:	404a      	eors	r2, r1
    8b66:	601a      	str	r2, [r3, #0]
                if (++i == 7)
    8b68:	69bb      	ldr	r3, [r7, #24]
    8b6a:	3301      	adds	r3, #1
    8b6c:	61bb      	str	r3, [r7, #24]
    8b6e:	69bb      	ldr	r3, [r7, #24]
    8b70:	2b07      	cmp	r3, #7
    8b72:	d05d      	beq.n	8c30 <wc_AesSetKeyLocal+0x3a8>
                    break;
                temp = rk[11];
    8b74:	69fb      	ldr	r3, [r7, #28]
    8b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8b78:	613b      	str	r3, [r7, #16]
                rk[12] = rk[ 4] ^
    8b7a:	69fb      	ldr	r3, [r7, #28]
    8b7c:	3330      	adds	r3, #48	; 0x30
    8b7e:	69fa      	ldr	r2, [r7, #28]
    8b80:	3210      	adds	r2, #16
    8b82:	6811      	ldr	r1, [r2, #0]
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
    8b84:	693a      	ldr	r2, [r7, #16]
    8b86:	0e12      	lsrs	r2, r2, #24
    8b88:	b2d2      	uxtb	r2, r2
    8b8a:	0010      	movs	r0, r2
    8b8c:	4a32      	ldr	r2, [pc, #200]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8b8e:	2480      	movs	r4, #128	; 0x80
    8b90:	00a4      	lsls	r4, r4, #2
    8b92:	46a4      	mov	ip, r4
    8b94:	4460      	add	r0, ip
    8b96:	0080      	lsls	r0, r0, #2
    8b98:	5882      	ldr	r2, [r0, r2]
    8b9a:	0e12      	lsrs	r2, r2, #24
    8b9c:	0612      	lsls	r2, r2, #24
                rk[10] = rk[ 2] ^ rk[ 9];
                rk[11] = rk[ 3] ^ rk[10];
                if (++i == 7)
                    break;
                temp = rk[11];
                rk[12] = rk[ 4] ^
    8b9e:	4051      	eors	r1, r2
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
    8ba0:	693a      	ldr	r2, [r7, #16]
    8ba2:	0c12      	lsrs	r2, r2, #16
    8ba4:	b2d2      	uxtb	r2, r2
    8ba6:	0010      	movs	r0, r2
    8ba8:	4a2b      	ldr	r2, [pc, #172]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8baa:	24c0      	movs	r4, #192	; 0xc0
    8bac:	00a4      	lsls	r4, r4, #2
    8bae:	46a4      	mov	ip, r4
    8bb0:	4460      	add	r0, ip
    8bb2:	0080      	lsls	r0, r0, #2
    8bb4:	5880      	ldr	r0, [r0, r2]
    8bb6:	22ff      	movs	r2, #255	; 0xff
    8bb8:	0412      	lsls	r2, r2, #16
    8bba:	4002      	ands	r2, r0
                rk[11] = rk[ 3] ^ rk[10];
                if (++i == 7)
                    break;
                temp = rk[11];
                rk[12] = rk[ 4] ^
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
    8bbc:	4051      	eors	r1, r2
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
    8bbe:	693a      	ldr	r2, [r7, #16]
    8bc0:	0a12      	lsrs	r2, r2, #8
    8bc2:	b2d2      	uxtb	r2, r2
    8bc4:	0010      	movs	r0, r2
    8bc6:	4a24      	ldr	r2, [pc, #144]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8bc8:	0080      	lsls	r0, r0, #2
    8bca:	5880      	ldr	r0, [r0, r2]
    8bcc:	22ff      	movs	r2, #255	; 0xff
    8bce:	0212      	lsls	r2, r2, #8
    8bd0:	4002      	ands	r2, r0
                if (++i == 7)
                    break;
                temp = rk[11];
                rk[12] = rk[ 4] ^
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
    8bd2:	4051      	eors	r1, r2
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
                    (Te[1][GETBYTE(temp, 0)] & 0x000000ff);
    8bd4:	693a      	ldr	r2, [r7, #16]
    8bd6:	b2d2      	uxtb	r2, r2
    8bd8:	0010      	movs	r0, r2
    8bda:	4a1f      	ldr	r2, [pc, #124]	; (8c58 <wc_AesSetKeyLocal+0x3d0>)
    8bdc:	3001      	adds	r0, #1
    8bde:	30ff      	adds	r0, #255	; 0xff
    8be0:	0080      	lsls	r0, r0, #2
    8be2:	5882      	ldr	r2, [r0, r2]
    8be4:	20ff      	movs	r0, #255	; 0xff
    8be6:	4002      	ands	r2, r0
                    break;
                temp = rk[11];
                rk[12] = rk[ 4] ^
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
    8be8:	404a      	eors	r2, r1
                rk[10] = rk[ 2] ^ rk[ 9];
                rk[11] = rk[ 3] ^ rk[10];
                if (++i == 7)
                    break;
                temp = rk[11];
                rk[12] = rk[ 4] ^
    8bea:	601a      	str	r2, [r3, #0]
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
                    (Te[1][GETBYTE(temp, 0)] & 0x000000ff);
                rk[13] = rk[ 5] ^ rk[12];
    8bec:	69fb      	ldr	r3, [r7, #28]
    8bee:	3334      	adds	r3, #52	; 0x34
    8bf0:	69fa      	ldr	r2, [r7, #28]
    8bf2:	3214      	adds	r2, #20
    8bf4:	6811      	ldr	r1, [r2, #0]
    8bf6:	69fa      	ldr	r2, [r7, #28]
    8bf8:	3230      	adds	r2, #48	; 0x30
    8bfa:	6812      	ldr	r2, [r2, #0]
    8bfc:	404a      	eors	r2, r1
    8bfe:	601a      	str	r2, [r3, #0]
                rk[14] = rk[ 6] ^ rk[13];
    8c00:	69fb      	ldr	r3, [r7, #28]
    8c02:	3338      	adds	r3, #56	; 0x38
    8c04:	69fa      	ldr	r2, [r7, #28]
    8c06:	3218      	adds	r2, #24
    8c08:	6811      	ldr	r1, [r2, #0]
    8c0a:	69fa      	ldr	r2, [r7, #28]
    8c0c:	3234      	adds	r2, #52	; 0x34
    8c0e:	6812      	ldr	r2, [r2, #0]
    8c10:	404a      	eors	r2, r1
    8c12:	601a      	str	r2, [r3, #0]
                rk[15] = rk[ 7] ^ rk[14];
    8c14:	69fb      	ldr	r3, [r7, #28]
    8c16:	333c      	adds	r3, #60	; 0x3c
    8c18:	69fa      	ldr	r2, [r7, #28]
    8c1a:	321c      	adds	r2, #28
    8c1c:	6811      	ldr	r1, [r2, #0]
    8c1e:	69fa      	ldr	r2, [r7, #28]
    8c20:	3238      	adds	r2, #56	; 0x38
    8c22:	6812      	ldr	r2, [r2, #0]
    8c24:	404a      	eors	r2, r1
    8c26:	601a      	str	r2, [r3, #0]

                rk += 8;
    8c28:	69fb      	ldr	r3, [r7, #28]
    8c2a:	3320      	adds	r3, #32
    8c2c:	61fb      	str	r3, [r7, #28]
            }
    8c2e:	e73d      	b.n	8aac <wc_AesSetKeyLocal+0x224>
                    rcon[i];
                rk[ 9] = rk[ 1] ^ rk[ 8];
                rk[10] = rk[ 2] ^ rk[ 9];
                rk[11] = rk[ 3] ^ rk[10];
                if (++i == 7)
                    break;
    8c30:	46c0      	nop			; (mov r8, r8)
                rk[14] = rk[ 6] ^ rk[13];
                rk[15] = rk[ 7] ^ rk[14];

                rk += 8;
            }
            break;
    8c32:	e002      	b.n	8c3a <wc_AesSetKeyLocal+0x3b2>
    #endif /* 256 */

        default:
            return BAD_FUNC_ARG;
    8c34:	23ad      	movs	r3, #173	; 0xad
    8c36:	425b      	negs	r3, r3
    8c38:	e1ce      	b.n	8fd8 <wc_AesSetKeyLocal+0x750>
        } /* switch */

    #ifdef HAVE_AES_DECRYPT
        if (dir == AES_DECRYPTION) {
    8c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8c3c:	2b01      	cmp	r3, #1
    8c3e:	d000      	beq.n	8c42 <wc_AesSetKeyLocal+0x3ba>
    8c40:	e1c3      	b.n	8fca <wc_AesSetKeyLocal+0x742>
            unsigned int j;
            rk = aes->key;
    8c42:	68fb      	ldr	r3, [r7, #12]
    8c44:	61fb      	str	r3, [r7, #28]

            /* invert the order of the round keys: */
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
    8c46:	2300      	movs	r3, #0
    8c48:	61bb      	str	r3, [r7, #24]
    8c4a:	68fb      	ldr	r3, [r7, #12]
    8c4c:	22f0      	movs	r2, #240	; 0xf0
    8c4e:	589b      	ldr	r3, [r3, r2]
    8c50:	009b      	lsls	r3, r3, #2
    8c52:	617b      	str	r3, [r7, #20]
    8c54:	e06e      	b.n	8d34 <wc_AesSetKeyLocal+0x4ac>
    8c56:	46c0      	nop			; (mov r8, r8)
    8c58:	0002a3a8 	.word	0x0002a3a8
    8c5c:	0002a380 	.word	0x0002a380
                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
    8c60:	69bb      	ldr	r3, [r7, #24]
    8c62:	009b      	lsls	r3, r3, #2
    8c64:	69fa      	ldr	r2, [r7, #28]
    8c66:	18d3      	adds	r3, r2, r3
    8c68:	681b      	ldr	r3, [r3, #0]
    8c6a:	613b      	str	r3, [r7, #16]
    8c6c:	69bb      	ldr	r3, [r7, #24]
    8c6e:	009b      	lsls	r3, r3, #2
    8c70:	69fa      	ldr	r2, [r7, #28]
    8c72:	18d3      	adds	r3, r2, r3
    8c74:	697a      	ldr	r2, [r7, #20]
    8c76:	0092      	lsls	r2, r2, #2
    8c78:	69f9      	ldr	r1, [r7, #28]
    8c7a:	188a      	adds	r2, r1, r2
    8c7c:	6812      	ldr	r2, [r2, #0]
    8c7e:	601a      	str	r2, [r3, #0]
    8c80:	697b      	ldr	r3, [r7, #20]
    8c82:	009b      	lsls	r3, r3, #2
    8c84:	69fa      	ldr	r2, [r7, #28]
    8c86:	18d3      	adds	r3, r2, r3
    8c88:	693a      	ldr	r2, [r7, #16]
    8c8a:	601a      	str	r2, [r3, #0]
                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
    8c8c:	69bb      	ldr	r3, [r7, #24]
    8c8e:	3301      	adds	r3, #1
    8c90:	009b      	lsls	r3, r3, #2
    8c92:	69fa      	ldr	r2, [r7, #28]
    8c94:	18d3      	adds	r3, r2, r3
    8c96:	681b      	ldr	r3, [r3, #0]
    8c98:	613b      	str	r3, [r7, #16]
    8c9a:	69bb      	ldr	r3, [r7, #24]
    8c9c:	3301      	adds	r3, #1
    8c9e:	009b      	lsls	r3, r3, #2
    8ca0:	69fa      	ldr	r2, [r7, #28]
    8ca2:	18d3      	adds	r3, r2, r3
    8ca4:	697a      	ldr	r2, [r7, #20]
    8ca6:	3201      	adds	r2, #1
    8ca8:	0092      	lsls	r2, r2, #2
    8caa:	69f9      	ldr	r1, [r7, #28]
    8cac:	188a      	adds	r2, r1, r2
    8cae:	6812      	ldr	r2, [r2, #0]
    8cb0:	601a      	str	r2, [r3, #0]
    8cb2:	697b      	ldr	r3, [r7, #20]
    8cb4:	3301      	adds	r3, #1
    8cb6:	009b      	lsls	r3, r3, #2
    8cb8:	69fa      	ldr	r2, [r7, #28]
    8cba:	18d3      	adds	r3, r2, r3
    8cbc:	693a      	ldr	r2, [r7, #16]
    8cbe:	601a      	str	r2, [r3, #0]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
    8cc0:	69bb      	ldr	r3, [r7, #24]
    8cc2:	3302      	adds	r3, #2
    8cc4:	009b      	lsls	r3, r3, #2
    8cc6:	69fa      	ldr	r2, [r7, #28]
    8cc8:	18d3      	adds	r3, r2, r3
    8cca:	681b      	ldr	r3, [r3, #0]
    8ccc:	613b      	str	r3, [r7, #16]
    8cce:	69bb      	ldr	r3, [r7, #24]
    8cd0:	3302      	adds	r3, #2
    8cd2:	009b      	lsls	r3, r3, #2
    8cd4:	69fa      	ldr	r2, [r7, #28]
    8cd6:	18d3      	adds	r3, r2, r3
    8cd8:	697a      	ldr	r2, [r7, #20]
    8cda:	3202      	adds	r2, #2
    8cdc:	0092      	lsls	r2, r2, #2
    8cde:	69f9      	ldr	r1, [r7, #28]
    8ce0:	188a      	adds	r2, r1, r2
    8ce2:	6812      	ldr	r2, [r2, #0]
    8ce4:	601a      	str	r2, [r3, #0]
    8ce6:	697b      	ldr	r3, [r7, #20]
    8ce8:	3302      	adds	r3, #2
    8cea:	009b      	lsls	r3, r3, #2
    8cec:	69fa      	ldr	r2, [r7, #28]
    8cee:	18d3      	adds	r3, r2, r3
    8cf0:	693a      	ldr	r2, [r7, #16]
    8cf2:	601a      	str	r2, [r3, #0]
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
    8cf4:	69bb      	ldr	r3, [r7, #24]
    8cf6:	3303      	adds	r3, #3
    8cf8:	009b      	lsls	r3, r3, #2
    8cfa:	69fa      	ldr	r2, [r7, #28]
    8cfc:	18d3      	adds	r3, r2, r3
    8cfe:	681b      	ldr	r3, [r3, #0]
    8d00:	613b      	str	r3, [r7, #16]
    8d02:	69bb      	ldr	r3, [r7, #24]
    8d04:	3303      	adds	r3, #3
    8d06:	009b      	lsls	r3, r3, #2
    8d08:	69fa      	ldr	r2, [r7, #28]
    8d0a:	18d3      	adds	r3, r2, r3
    8d0c:	697a      	ldr	r2, [r7, #20]
    8d0e:	3203      	adds	r2, #3
    8d10:	0092      	lsls	r2, r2, #2
    8d12:	69f9      	ldr	r1, [r7, #28]
    8d14:	188a      	adds	r2, r1, r2
    8d16:	6812      	ldr	r2, [r2, #0]
    8d18:	601a      	str	r2, [r3, #0]
    8d1a:	697b      	ldr	r3, [r7, #20]
    8d1c:	3303      	adds	r3, #3
    8d1e:	009b      	lsls	r3, r3, #2
    8d20:	69fa      	ldr	r2, [r7, #28]
    8d22:	18d3      	adds	r3, r2, r3
    8d24:	693a      	ldr	r2, [r7, #16]
    8d26:	601a      	str	r2, [r3, #0]
        if (dir == AES_DECRYPTION) {
            unsigned int j;
            rk = aes->key;

            /* invert the order of the round keys: */
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
    8d28:	69bb      	ldr	r3, [r7, #24]
    8d2a:	3304      	adds	r3, #4
    8d2c:	61bb      	str	r3, [r7, #24]
    8d2e:	697b      	ldr	r3, [r7, #20]
    8d30:	3b04      	subs	r3, #4
    8d32:	617b      	str	r3, [r7, #20]
    8d34:	69ba      	ldr	r2, [r7, #24]
    8d36:	697b      	ldr	r3, [r7, #20]
    8d38:	429a      	cmp	r2, r3
    8d3a:	d391      	bcc.n	8c60 <wc_AesSetKeyLocal+0x3d8>
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
            }
            /* apply the inverse MixColumn transform to all round keys but the
               first and the last: */
            for (i = 1; i < aes->rounds; i++) {
    8d3c:	2301      	movs	r3, #1
    8d3e:	61bb      	str	r3, [r7, #24]
    8d40:	e13c      	b.n	8fbc <wc_AesSetKeyLocal+0x734>
                rk += 4;
    8d42:	69fb      	ldr	r3, [r7, #28]
    8d44:	3310      	adds	r3, #16
    8d46:	61fb      	str	r3, [r7, #28]
                rk[0] =
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
    8d48:	69fb      	ldr	r3, [r7, #28]
    8d4a:	681b      	ldr	r3, [r3, #0]
    8d4c:	0e1b      	lsrs	r3, r3, #24
    8d4e:	b2db      	uxtb	r3, r3
    8d50:	001a      	movs	r2, r3
    8d52:	4ba3      	ldr	r3, [pc, #652]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8d54:	3201      	adds	r2, #1
    8d56:	32ff      	adds	r2, #255	; 0xff
    8d58:	0092      	lsls	r2, r2, #2
    8d5a:	58d3      	ldr	r3, [r2, r3]
    8d5c:	22ff      	movs	r2, #255	; 0xff
    8d5e:	401a      	ands	r2, r3
    8d60:	4ba0      	ldr	r3, [pc, #640]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8d62:	0092      	lsls	r2, r2, #2
    8d64:	58d2      	ldr	r2, [r2, r3]
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
    8d66:	69fb      	ldr	r3, [r7, #28]
    8d68:	681b      	ldr	r3, [r3, #0]
    8d6a:	0c1b      	lsrs	r3, r3, #16
    8d6c:	b2db      	uxtb	r3, r3
    8d6e:	0019      	movs	r1, r3
    8d70:	4b9b      	ldr	r3, [pc, #620]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8d72:	3101      	adds	r1, #1
    8d74:	31ff      	adds	r1, #255	; 0xff
    8d76:	0089      	lsls	r1, r1, #2
    8d78:	58cb      	ldr	r3, [r1, r3]
    8d7a:	21ff      	movs	r1, #255	; 0xff
    8d7c:	4019      	ands	r1, r3
    8d7e:	4b99      	ldr	r3, [pc, #612]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8d80:	3101      	adds	r1, #1
    8d82:	31ff      	adds	r1, #255	; 0xff
    8d84:	0089      	lsls	r1, r1, #2
    8d86:	58cb      	ldr	r3, [r1, r3]
            /* apply the inverse MixColumn transform to all round keys but the
               first and the last: */
            for (i = 1; i < aes->rounds; i++) {
                rk += 4;
                rk[0] =
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
    8d88:	405a      	eors	r2, r3
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
    8d8a:	69fb      	ldr	r3, [r7, #28]
    8d8c:	681b      	ldr	r3, [r3, #0]
    8d8e:	0a1b      	lsrs	r3, r3, #8
    8d90:	b2db      	uxtb	r3, r3
    8d92:	0019      	movs	r1, r3
    8d94:	4b92      	ldr	r3, [pc, #584]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8d96:	3101      	adds	r1, #1
    8d98:	31ff      	adds	r1, #255	; 0xff
    8d9a:	0089      	lsls	r1, r1, #2
    8d9c:	58cb      	ldr	r3, [r1, r3]
    8d9e:	21ff      	movs	r1, #255	; 0xff
    8da0:	4019      	ands	r1, r3
    8da2:	4b90      	ldr	r3, [pc, #576]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8da4:	2080      	movs	r0, #128	; 0x80
    8da6:	0080      	lsls	r0, r0, #2
    8da8:	4684      	mov	ip, r0
    8daa:	4461      	add	r1, ip
    8dac:	0089      	lsls	r1, r1, #2
    8dae:	58cb      	ldr	r3, [r1, r3]
               first and the last: */
            for (i = 1; i < aes->rounds; i++) {
                rk += 4;
                rk[0] =
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
    8db0:	405a      	eors	r2, r3
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
    8db2:	69fb      	ldr	r3, [r7, #28]
    8db4:	681b      	ldr	r3, [r3, #0]
    8db6:	b2db      	uxtb	r3, r3
    8db8:	0019      	movs	r1, r3
    8dba:	4b89      	ldr	r3, [pc, #548]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8dbc:	3101      	adds	r1, #1
    8dbe:	31ff      	adds	r1, #255	; 0xff
    8dc0:	0089      	lsls	r1, r1, #2
    8dc2:	58cb      	ldr	r3, [r1, r3]
    8dc4:	21ff      	movs	r1, #255	; 0xff
    8dc6:	4019      	ands	r1, r3
    8dc8:	4b86      	ldr	r3, [pc, #536]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8dca:	20c0      	movs	r0, #192	; 0xc0
    8dcc:	0080      	lsls	r0, r0, #2
    8dce:	4684      	mov	ip, r0
    8dd0:	4461      	add	r1, ip
    8dd2:	0089      	lsls	r1, r1, #2
    8dd4:	58cb      	ldr	r3, [r1, r3]
            for (i = 1; i < aes->rounds; i++) {
                rk += 4;
                rk[0] =
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
    8dd6:	405a      	eors	r2, r3
            }
            /* apply the inverse MixColumn transform to all round keys but the
               first and the last: */
            for (i = 1; i < aes->rounds; i++) {
                rk += 4;
                rk[0] =
    8dd8:	69fb      	ldr	r3, [r7, #28]
    8dda:	601a      	str	r2, [r3, #0]
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
                rk[1] =
    8ddc:	69fb      	ldr	r3, [r7, #28]
    8dde:	3304      	adds	r3, #4
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
    8de0:	69fa      	ldr	r2, [r7, #28]
    8de2:	3204      	adds	r2, #4
    8de4:	6812      	ldr	r2, [r2, #0]
    8de6:	0e12      	lsrs	r2, r2, #24
    8de8:	b2d2      	uxtb	r2, r2
    8dea:	0011      	movs	r1, r2
    8dec:	4a7c      	ldr	r2, [pc, #496]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8dee:	3101      	adds	r1, #1
    8df0:	31ff      	adds	r1, #255	; 0xff
    8df2:	0089      	lsls	r1, r1, #2
    8df4:	588a      	ldr	r2, [r1, r2]
    8df6:	21ff      	movs	r1, #255	; 0xff
    8df8:	4011      	ands	r1, r2
    8dfa:	4a7a      	ldr	r2, [pc, #488]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8dfc:	0089      	lsls	r1, r1, #2
    8dfe:	5889      	ldr	r1, [r1, r2]
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
    8e00:	69fa      	ldr	r2, [r7, #28]
    8e02:	3204      	adds	r2, #4
    8e04:	6812      	ldr	r2, [r2, #0]
    8e06:	0c12      	lsrs	r2, r2, #16
    8e08:	b2d2      	uxtb	r2, r2
    8e0a:	0010      	movs	r0, r2
    8e0c:	4a74      	ldr	r2, [pc, #464]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8e0e:	3001      	adds	r0, #1
    8e10:	30ff      	adds	r0, #255	; 0xff
    8e12:	0080      	lsls	r0, r0, #2
    8e14:	5882      	ldr	r2, [r0, r2]
    8e16:	20ff      	movs	r0, #255	; 0xff
    8e18:	4010      	ands	r0, r2
    8e1a:	4a72      	ldr	r2, [pc, #456]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8e1c:	3001      	adds	r0, #1
    8e1e:	30ff      	adds	r0, #255	; 0xff
    8e20:	0080      	lsls	r0, r0, #2
    8e22:	5882      	ldr	r2, [r0, r2]
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
                rk[1] =
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
    8e24:	4051      	eors	r1, r2
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
    8e26:	69fa      	ldr	r2, [r7, #28]
    8e28:	3204      	adds	r2, #4
    8e2a:	6812      	ldr	r2, [r2, #0]
    8e2c:	0a12      	lsrs	r2, r2, #8
    8e2e:	b2d2      	uxtb	r2, r2
    8e30:	0010      	movs	r0, r2
    8e32:	4a6b      	ldr	r2, [pc, #428]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8e34:	3001      	adds	r0, #1
    8e36:	30ff      	adds	r0, #255	; 0xff
    8e38:	0080      	lsls	r0, r0, #2
    8e3a:	5882      	ldr	r2, [r0, r2]
    8e3c:	20ff      	movs	r0, #255	; 0xff
    8e3e:	4010      	ands	r0, r2
    8e40:	4a68      	ldr	r2, [pc, #416]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8e42:	2480      	movs	r4, #128	; 0x80
    8e44:	00a4      	lsls	r4, r4, #2
    8e46:	46a4      	mov	ip, r4
    8e48:	4460      	add	r0, ip
    8e4a:	0080      	lsls	r0, r0, #2
    8e4c:	5882      	ldr	r2, [r0, r2]
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
                rk[1] =
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
    8e4e:	4051      	eors	r1, r2
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
    8e50:	69fa      	ldr	r2, [r7, #28]
    8e52:	3204      	adds	r2, #4
    8e54:	6812      	ldr	r2, [r2, #0]
    8e56:	b2d2      	uxtb	r2, r2
    8e58:	0010      	movs	r0, r2
    8e5a:	4a61      	ldr	r2, [pc, #388]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8e5c:	3001      	adds	r0, #1
    8e5e:	30ff      	adds	r0, #255	; 0xff
    8e60:	0080      	lsls	r0, r0, #2
    8e62:	5882      	ldr	r2, [r0, r2]
    8e64:	20ff      	movs	r0, #255	; 0xff
    8e66:	4010      	ands	r0, r2
    8e68:	4a5e      	ldr	r2, [pc, #376]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8e6a:	24c0      	movs	r4, #192	; 0xc0
    8e6c:	00a4      	lsls	r4, r4, #2
    8e6e:	46a4      	mov	ip, r4
    8e70:	4460      	add	r0, ip
    8e72:	0080      	lsls	r0, r0, #2
    8e74:	5882      	ldr	r2, [r0, r2]
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
                rk[1] =
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
    8e76:	404a      	eors	r2, r1
                rk[0] =
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
                rk[1] =
    8e78:	601a      	str	r2, [r3, #0]
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
                rk[2] =
    8e7a:	69fb      	ldr	r3, [r7, #28]
    8e7c:	3308      	adds	r3, #8
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
    8e7e:	69fa      	ldr	r2, [r7, #28]
    8e80:	3208      	adds	r2, #8
    8e82:	6812      	ldr	r2, [r2, #0]
    8e84:	0e12      	lsrs	r2, r2, #24
    8e86:	b2d2      	uxtb	r2, r2
    8e88:	0011      	movs	r1, r2
    8e8a:	4a55      	ldr	r2, [pc, #340]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8e8c:	3101      	adds	r1, #1
    8e8e:	31ff      	adds	r1, #255	; 0xff
    8e90:	0089      	lsls	r1, r1, #2
    8e92:	588a      	ldr	r2, [r1, r2]
    8e94:	21ff      	movs	r1, #255	; 0xff
    8e96:	4011      	ands	r1, r2
    8e98:	4a52      	ldr	r2, [pc, #328]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8e9a:	0089      	lsls	r1, r1, #2
    8e9c:	5889      	ldr	r1, [r1, r2]
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
    8e9e:	69fa      	ldr	r2, [r7, #28]
    8ea0:	3208      	adds	r2, #8
    8ea2:	6812      	ldr	r2, [r2, #0]
    8ea4:	0c12      	lsrs	r2, r2, #16
    8ea6:	b2d2      	uxtb	r2, r2
    8ea8:	0010      	movs	r0, r2
    8eaa:	4a4d      	ldr	r2, [pc, #308]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8eac:	3001      	adds	r0, #1
    8eae:	30ff      	adds	r0, #255	; 0xff
    8eb0:	0080      	lsls	r0, r0, #2
    8eb2:	5882      	ldr	r2, [r0, r2]
    8eb4:	20ff      	movs	r0, #255	; 0xff
    8eb6:	4010      	ands	r0, r2
    8eb8:	4a4a      	ldr	r2, [pc, #296]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8eba:	3001      	adds	r0, #1
    8ebc:	30ff      	adds	r0, #255	; 0xff
    8ebe:	0080      	lsls	r0, r0, #2
    8ec0:	5882      	ldr	r2, [r0, r2]
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
                rk[2] =
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
    8ec2:	4051      	eors	r1, r2
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
    8ec4:	69fa      	ldr	r2, [r7, #28]
    8ec6:	3208      	adds	r2, #8
    8ec8:	6812      	ldr	r2, [r2, #0]
    8eca:	0a12      	lsrs	r2, r2, #8
    8ecc:	b2d2      	uxtb	r2, r2
    8ece:	0010      	movs	r0, r2
    8ed0:	4a43      	ldr	r2, [pc, #268]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8ed2:	3001      	adds	r0, #1
    8ed4:	30ff      	adds	r0, #255	; 0xff
    8ed6:	0080      	lsls	r0, r0, #2
    8ed8:	5882      	ldr	r2, [r0, r2]
    8eda:	20ff      	movs	r0, #255	; 0xff
    8edc:	4010      	ands	r0, r2
    8ede:	4a41      	ldr	r2, [pc, #260]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8ee0:	2480      	movs	r4, #128	; 0x80
    8ee2:	00a4      	lsls	r4, r4, #2
    8ee4:	46a4      	mov	ip, r4
    8ee6:	4460      	add	r0, ip
    8ee8:	0080      	lsls	r0, r0, #2
    8eea:	5882      	ldr	r2, [r0, r2]
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
                rk[2] =
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
    8eec:	4051      	eors	r1, r2
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
    8eee:	69fa      	ldr	r2, [r7, #28]
    8ef0:	3208      	adds	r2, #8
    8ef2:	6812      	ldr	r2, [r2, #0]
    8ef4:	b2d2      	uxtb	r2, r2
    8ef6:	0010      	movs	r0, r2
    8ef8:	4a39      	ldr	r2, [pc, #228]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8efa:	3001      	adds	r0, #1
    8efc:	30ff      	adds	r0, #255	; 0xff
    8efe:	0080      	lsls	r0, r0, #2
    8f00:	5882      	ldr	r2, [r0, r2]
    8f02:	20ff      	movs	r0, #255	; 0xff
    8f04:	4010      	ands	r0, r2
    8f06:	4a37      	ldr	r2, [pc, #220]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8f08:	24c0      	movs	r4, #192	; 0xc0
    8f0a:	00a4      	lsls	r4, r4, #2
    8f0c:	46a4      	mov	ip, r4
    8f0e:	4460      	add	r0, ip
    8f10:	0080      	lsls	r0, r0, #2
    8f12:	5882      	ldr	r2, [r0, r2]
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
                rk[2] =
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
    8f14:	404a      	eors	r2, r1
                rk[1] =
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
                rk[2] =
    8f16:	601a      	str	r2, [r3, #0]
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
                rk[3] =
    8f18:	69fb      	ldr	r3, [r7, #28]
    8f1a:	330c      	adds	r3, #12
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
    8f1c:	69fa      	ldr	r2, [r7, #28]
    8f1e:	320c      	adds	r2, #12
    8f20:	6812      	ldr	r2, [r2, #0]
    8f22:	0e12      	lsrs	r2, r2, #24
    8f24:	b2d2      	uxtb	r2, r2
    8f26:	0011      	movs	r1, r2
    8f28:	4a2d      	ldr	r2, [pc, #180]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8f2a:	3101      	adds	r1, #1
    8f2c:	31ff      	adds	r1, #255	; 0xff
    8f2e:	0089      	lsls	r1, r1, #2
    8f30:	588a      	ldr	r2, [r1, r2]
    8f32:	21ff      	movs	r1, #255	; 0xff
    8f34:	4011      	ands	r1, r2
    8f36:	4a2b      	ldr	r2, [pc, #172]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8f38:	0089      	lsls	r1, r1, #2
    8f3a:	5889      	ldr	r1, [r1, r2]
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
    8f3c:	69fa      	ldr	r2, [r7, #28]
    8f3e:	320c      	adds	r2, #12
    8f40:	6812      	ldr	r2, [r2, #0]
    8f42:	0c12      	lsrs	r2, r2, #16
    8f44:	b2d2      	uxtb	r2, r2
    8f46:	0010      	movs	r0, r2
    8f48:	4a25      	ldr	r2, [pc, #148]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8f4a:	3001      	adds	r0, #1
    8f4c:	30ff      	adds	r0, #255	; 0xff
    8f4e:	0080      	lsls	r0, r0, #2
    8f50:	5882      	ldr	r2, [r0, r2]
    8f52:	20ff      	movs	r0, #255	; 0xff
    8f54:	4010      	ands	r0, r2
    8f56:	4a23      	ldr	r2, [pc, #140]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8f58:	3001      	adds	r0, #1
    8f5a:	30ff      	adds	r0, #255	; 0xff
    8f5c:	0080      	lsls	r0, r0, #2
    8f5e:	5882      	ldr	r2, [r0, r2]
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
                rk[3] =
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
    8f60:	4051      	eors	r1, r2
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
    8f62:	69fa      	ldr	r2, [r7, #28]
    8f64:	320c      	adds	r2, #12
    8f66:	6812      	ldr	r2, [r2, #0]
    8f68:	0a12      	lsrs	r2, r2, #8
    8f6a:	b2d2      	uxtb	r2, r2
    8f6c:	0010      	movs	r0, r2
    8f6e:	4a1c      	ldr	r2, [pc, #112]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8f70:	3001      	adds	r0, #1
    8f72:	30ff      	adds	r0, #255	; 0xff
    8f74:	0080      	lsls	r0, r0, #2
    8f76:	5882      	ldr	r2, [r0, r2]
    8f78:	20ff      	movs	r0, #255	; 0xff
    8f7a:	4010      	ands	r0, r2
    8f7c:	4a19      	ldr	r2, [pc, #100]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8f7e:	2480      	movs	r4, #128	; 0x80
    8f80:	00a4      	lsls	r4, r4, #2
    8f82:	46a4      	mov	ip, r4
    8f84:	4460      	add	r0, ip
    8f86:	0080      	lsls	r0, r0, #2
    8f88:	5882      	ldr	r2, [r0, r2]
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
                rk[3] =
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
    8f8a:	4051      	eors	r1, r2
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[3], 0)] & 0xff];
    8f8c:	69fa      	ldr	r2, [r7, #28]
    8f8e:	320c      	adds	r2, #12
    8f90:	6812      	ldr	r2, [r2, #0]
    8f92:	b2d2      	uxtb	r2, r2
    8f94:	0010      	movs	r0, r2
    8f96:	4a12      	ldr	r2, [pc, #72]	; (8fe0 <wc_AesSetKeyLocal+0x758>)
    8f98:	3001      	adds	r0, #1
    8f9a:	30ff      	adds	r0, #255	; 0xff
    8f9c:	0080      	lsls	r0, r0, #2
    8f9e:	5882      	ldr	r2, [r0, r2]
    8fa0:	20ff      	movs	r0, #255	; 0xff
    8fa2:	4010      	ands	r0, r2
    8fa4:	4a0f      	ldr	r2, [pc, #60]	; (8fe4 <wc_AesSetKeyLocal+0x75c>)
    8fa6:	24c0      	movs	r4, #192	; 0xc0
    8fa8:	00a4      	lsls	r4, r4, #2
    8faa:	46a4      	mov	ip, r4
    8fac:	4460      	add	r0, ip
    8fae:	0080      	lsls	r0, r0, #2
    8fb0:	5882      	ldr	r2, [r0, r2]
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
                rk[3] =
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
    8fb2:	404a      	eors	r2, r1
                rk[2] =
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
                rk[3] =
    8fb4:	601a      	str	r2, [r3, #0]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
            }
            /* apply the inverse MixColumn transform to all round keys but the
               first and the last: */
            for (i = 1; i < aes->rounds; i++) {
    8fb6:	69bb      	ldr	r3, [r7, #24]
    8fb8:	3301      	adds	r3, #1
    8fba:	61bb      	str	r3, [r7, #24]
    8fbc:	68fb      	ldr	r3, [r7, #12]
    8fbe:	22f0      	movs	r2, #240	; 0xf0
    8fc0:	589a      	ldr	r2, [r3, r2]
    8fc2:	69bb      	ldr	r3, [r7, #24]
    8fc4:	429a      	cmp	r2, r3
    8fc6:	d900      	bls.n	8fca <wc_AesSetKeyLocal+0x742>
    8fc8:	e6bb      	b.n	8d42 <wc_AesSetKeyLocal+0x4ba>
    #else
        (void)dir;
    #endif /* HAVE_AES_DECRYPT */
#endif /* NEED_AES_TABLES */

        return wc_AesSetIV(aes, iv);
    8fca:	683a      	ldr	r2, [r7, #0]
    8fcc:	68fb      	ldr	r3, [r7, #12]
    8fce:	0011      	movs	r1, r2
    8fd0:	0018      	movs	r0, r3
    8fd2:	f000 f843 	bl	905c <wc_AesSetIV>
    8fd6:	0003      	movs	r3, r0
    }
    8fd8:	0018      	movs	r0, r3
    8fda:	46bd      	mov	sp, r7
    8fdc:	b009      	add	sp, #36	; 0x24
    8fde:	bd90      	pop	{r4, r7, pc}
    8fe0:	0002a3a8 	.word	0x0002a3a8
    8fe4:	0002b3a8 	.word	0x0002b3a8

00008fe8 <wc_AesSetKey>:

    int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen,
        const byte* iv, int dir)
    {
    8fe8:	b590      	push	{r4, r7, lr}
    8fea:	b089      	sub	sp, #36	; 0x24
    8fec:	af02      	add	r7, sp, #8
    8fee:	60f8      	str	r0, [r7, #12]
    8ff0:	60b9      	str	r1, [r7, #8]
    8ff2:	607a      	str	r2, [r7, #4]
    8ff4:	603b      	str	r3, [r7, #0]
        int ret;
    #if defined(AES_MAX_KEY_SIZE)
        const word32 max_key_len = (AES_MAX_KEY_SIZE / 8);
    8ff6:	2320      	movs	r3, #32
    8ff8:	617b      	str	r3, [r7, #20]
            /* set local values */
            userKey = local;
            keylen = localSz;
        }
    #endif
        if (aes == NULL ||
    8ffa:	68fb      	ldr	r3, [r7, #12]
    8ffc:	2b00      	cmp	r3, #0
    8ffe:	d008      	beq.n	9012 <wc_AesSetKey+0x2a>
    9000:	687b      	ldr	r3, [r7, #4]
    9002:	2b10      	cmp	r3, #16
    9004:	d008      	beq.n	9018 <wc_AesSetKey+0x30>
                !((keylen == 16) || (keylen == 24) || (keylen == 32))) {
    9006:	687b      	ldr	r3, [r7, #4]
    9008:	2b18      	cmp	r3, #24
    900a:	d005      	beq.n	9018 <wc_AesSetKey+0x30>
    900c:	687b      	ldr	r3, [r7, #4]
    900e:	2b20      	cmp	r3, #32
    9010:	d002      	beq.n	9018 <wc_AesSetKey+0x30>
            return BAD_FUNC_ARG;
    9012:	23ad      	movs	r3, #173	; 0xad
    9014:	425b      	negs	r3, r3
    9016:	e01c      	b.n	9052 <wc_AesSetKey+0x6a>
        }

    #if defined(AES_MAX_KEY_SIZE)
        /* Check key length */
        if (keylen > max_key_len) {
    9018:	687a      	ldr	r2, [r7, #4]
    901a:	697b      	ldr	r3, [r7, #20]
    901c:	429a      	cmp	r2, r3
    901e:	d902      	bls.n	9026 <wc_AesSetKey+0x3e>
            return BAD_FUNC_ARG;
    9020:	23ad      	movs	r3, #173	; 0xad
    9022:	425b      	negs	r3, r3
    9024:	e015      	b.n	9052 <wc_AesSetKey+0x6a>
        }
    #endif
        aes->keylen = keylen;
    9026:	687a      	ldr	r2, [r7, #4]
    9028:	68fb      	ldr	r3, [r7, #12]
    902a:	21f4      	movs	r1, #244	; 0xf4
    902c:	505a      	str	r2, [r3, r1]
        aes->rounds = keylen/4 + 6;
    902e:	687b      	ldr	r3, [r7, #4]
    9030:	089b      	lsrs	r3, r3, #2
    9032:	1d9a      	adds	r2, r3, #6
    9034:	68fb      	ldr	r3, [r7, #12]
    9036:	21f0      	movs	r1, #240	; 0xf0
    9038:	505a      	str	r2, [r3, r1]
                return AES_set_decrypt_key(userKey, keylen * 8, aes);
        #endif
        }
    #endif /* WOLFSSL_AESNI */

        ret = wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir);
    903a:	683c      	ldr	r4, [r7, #0]
    903c:	687a      	ldr	r2, [r7, #4]
    903e:	68b9      	ldr	r1, [r7, #8]
    9040:	68f8      	ldr	r0, [r7, #12]
    9042:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9044:	9300      	str	r3, [sp, #0]
    9046:	0023      	movs	r3, r4
    9048:	f7ff fc1e 	bl	8888 <wc_AesSetKeyLocal>
    904c:	0003      	movs	r3, r0
    904e:	613b      	str	r3, [r7, #16]
        XMEMCPY(aes->devKey, userKey, keylen);
    #endif
    #ifdef WOLFSSL_IMX6_CAAM_BLOB
        ForceZero(local, sizeof(local));
    #endif
        return ret;
    9050:	693b      	ldr	r3, [r7, #16]
    }
    9052:	0018      	movs	r0, r3
    9054:	46bd      	mov	sp, r7
    9056:	b007      	add	sp, #28
    9058:	bd90      	pop	{r4, r7, pc}
    905a:	46c0      	nop			; (mov r8, r8)

0000905c <wc_AesSetIV>:
#endif /* wc_AesSetKey block */


/* wc_AesSetIV is shared between software and hardware */
int wc_AesSetIV(Aes* aes, const byte* iv)
{
    905c:	b580      	push	{r7, lr}
    905e:	b082      	sub	sp, #8
    9060:	af00      	add	r7, sp, #0
    9062:	6078      	str	r0, [r7, #4]
    9064:	6039      	str	r1, [r7, #0]
    if (aes == NULL)
    9066:	687b      	ldr	r3, [r7, #4]
    9068:	2b00      	cmp	r3, #0
    906a:	d102      	bne.n	9072 <wc_AesSetIV+0x16>
        return BAD_FUNC_ARG;
    906c:	23ad      	movs	r3, #173	; 0xad
    906e:	425b      	negs	r3, r3
    9070:	e012      	b.n	9098 <wc_AesSetIV+0x3c>

    if (iv)
    9072:	683b      	ldr	r3, [r7, #0]
    9074:	2b00      	cmp	r3, #0
    9076:	d007      	beq.n	9088 <wc_AesSetIV+0x2c>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
    9078:	687b      	ldr	r3, [r7, #4]
    907a:	33f8      	adds	r3, #248	; 0xf8
    907c:	6839      	ldr	r1, [r7, #0]
    907e:	2210      	movs	r2, #16
    9080:	0018      	movs	r0, r3
    9082:	f01c fb34 	bl	256ee <memcpy>
    9086:	e006      	b.n	9096 <wc_AesSetIV+0x3a>
    else
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
    9088:	687b      	ldr	r3, [r7, #4]
    908a:	33f8      	adds	r3, #248	; 0xf8
    908c:	2210      	movs	r2, #16
    908e:	2100      	movs	r1, #0
    9090:	0018      	movs	r0, r3
    9092:	f01c fb4a 	bl	2572a <memset>

    return 0;
    9096:	2300      	movs	r3, #0
}
    9098:	0018      	movs	r0, r3
    909a:	46bd      	mov	sp, r7
    909c:	b002      	add	sp, #8
    909e:	bd80      	pop	{r7, pc}

000090a0 <wc_AesCbcEncrypt>:

#else

    /* Software AES - CBC Encrypt */
    int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
    {
    90a0:	b580      	push	{r7, lr}
    90a2:	b086      	sub	sp, #24
    90a4:	af00      	add	r7, sp, #0
    90a6:	60f8      	str	r0, [r7, #12]
    90a8:	60b9      	str	r1, [r7, #8]
    90aa:	607a      	str	r2, [r7, #4]
    90ac:	603b      	str	r3, [r7, #0]
        word32 blocks = (sz / AES_BLOCK_SIZE);
    90ae:	683b      	ldr	r3, [r7, #0]
    90b0:	091b      	lsrs	r3, r3, #4
    90b2:	617b      	str	r3, [r7, #20]

        if (aes == NULL || out == NULL || in == NULL) {
    90b4:	68fb      	ldr	r3, [r7, #12]
    90b6:	2b00      	cmp	r3, #0
    90b8:	d005      	beq.n	90c6 <wc_AesCbcEncrypt+0x26>
    90ba:	68bb      	ldr	r3, [r7, #8]
    90bc:	2b00      	cmp	r3, #0
    90be:	d002      	beq.n	90c6 <wc_AesCbcEncrypt+0x26>
    90c0:	687b      	ldr	r3, [r7, #4]
    90c2:	2b00      	cmp	r3, #0
    90c4:	d121      	bne.n	910a <wc_AesCbcEncrypt+0x6a>
            return BAD_FUNC_ARG;
    90c6:	23ad      	movs	r3, #173	; 0xad
    90c8:	425b      	negs	r3, r3
    90ca:	e024      	b.n	9116 <wc_AesCbcEncrypt+0x76>
            return 0;
        }
    #endif

        while (blocks--) {
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
    90cc:	68fb      	ldr	r3, [r7, #12]
    90ce:	33f8      	adds	r3, #248	; 0xf8
    90d0:	6879      	ldr	r1, [r7, #4]
    90d2:	2210      	movs	r2, #16
    90d4:	0018      	movs	r0, r3
    90d6:	f7fe fd51 	bl	7b7c <xorbuf>
            wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
    90da:	68fb      	ldr	r3, [r7, #12]
    90dc:	33f8      	adds	r3, #248	; 0xf8
    90de:	0019      	movs	r1, r3
    90e0:	68fb      	ldr	r3, [r7, #12]
    90e2:	33f8      	adds	r3, #248	; 0xf8
    90e4:	001a      	movs	r2, r3
    90e6:	68fb      	ldr	r3, [r7, #12]
    90e8:	0018      	movs	r0, r3
    90ea:	f7fe fde1 	bl	7cb0 <wc_AesEncrypt>
            XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
    90ee:	68fb      	ldr	r3, [r7, #12]
    90f0:	33f8      	adds	r3, #248	; 0xf8
    90f2:	0019      	movs	r1, r3
    90f4:	68bb      	ldr	r3, [r7, #8]
    90f6:	2210      	movs	r2, #16
    90f8:	0018      	movs	r0, r3
    90fa:	f01c faf8 	bl	256ee <memcpy>

            out += AES_BLOCK_SIZE;
    90fe:	68bb      	ldr	r3, [r7, #8]
    9100:	3310      	adds	r3, #16
    9102:	60bb      	str	r3, [r7, #8]
            in  += AES_BLOCK_SIZE;
    9104:	687b      	ldr	r3, [r7, #4]
    9106:	3310      	adds	r3, #16
    9108:	607b      	str	r3, [r7, #4]

            return 0;
        }
    #endif

        while (blocks--) {
    910a:	697b      	ldr	r3, [r7, #20]
    910c:	1e5a      	subs	r2, r3, #1
    910e:	617a      	str	r2, [r7, #20]
    9110:	2b00      	cmp	r3, #0
    9112:	d1db      	bne.n	90cc <wc_AesCbcEncrypt+0x2c>

            out += AES_BLOCK_SIZE;
            in  += AES_BLOCK_SIZE;
        }

        return 0;
    9114:	2300      	movs	r3, #0
    }
    9116:	0018      	movs	r0, r3
    9118:	46bd      	mov	sp, r7
    911a:	b006      	add	sp, #24
    911c:	bd80      	pop	{r7, pc}
    911e:	46c0      	nop			; (mov r8, r8)

00009120 <wc_AesCbcDecrypt>:

    #ifdef HAVE_AES_DECRYPT
    /* Software AES - CBC Decrypt */
    int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
    {
    9120:	b580      	push	{r7, lr}
    9122:	b086      	sub	sp, #24
    9124:	af00      	add	r7, sp, #0
    9126:	60f8      	str	r0, [r7, #12]
    9128:	60b9      	str	r1, [r7, #8]
    912a:	607a      	str	r2, [r7, #4]
    912c:	603b      	str	r3, [r7, #0]
        word32 blocks;

        if (aes == NULL || out == NULL || in == NULL
    912e:	68fb      	ldr	r3, [r7, #12]
    9130:	2b00      	cmp	r3, #0
    9132:	d009      	beq.n	9148 <wc_AesCbcDecrypt+0x28>
    9134:	68bb      	ldr	r3, [r7, #8]
    9136:	2b00      	cmp	r3, #0
    9138:	d006      	beq.n	9148 <wc_AesCbcDecrypt+0x28>
    913a:	687b      	ldr	r3, [r7, #4]
    913c:	2b00      	cmp	r3, #0
    913e:	d003      	beq.n	9148 <wc_AesCbcDecrypt+0x28>
                                       || sz % AES_BLOCK_SIZE != 0) {
    9140:	683b      	ldr	r3, [r7, #0]
    9142:	220f      	movs	r2, #15
    9144:	4013      	ands	r3, r2
    9146:	d002      	beq.n	914e <wc_AesCbcDecrypt+0x2e>
            return BAD_FUNC_ARG;
    9148:	23ad      	movs	r3, #173	; 0xad
    914a:	425b      	negs	r3, r3
    914c:	e032      	b.n	91b4 <wc_AesCbcDecrypt+0x94>
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
            return 0;
        }
    #endif

        blocks = sz / AES_BLOCK_SIZE;
    914e:	683b      	ldr	r3, [r7, #0]
    9150:	091b      	lsrs	r3, r3, #4
    9152:	617b      	str	r3, [r7, #20]
        while (blocks--) {
    9154:	e028      	b.n	91a8 <wc_AesCbcDecrypt+0x88>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
    9156:	68fb      	ldr	r3, [r7, #12]
    9158:	3309      	adds	r3, #9
    915a:	33ff      	adds	r3, #255	; 0xff
    915c:	6879      	ldr	r1, [r7, #4]
    915e:	2210      	movs	r2, #16
    9160:	0018      	movs	r0, r3
    9162:	f01c fac4 	bl	256ee <memcpy>
            wc_AesDecrypt(aes, (byte*)aes->tmp, out);
    9166:	68fb      	ldr	r3, [r7, #12]
    9168:	3309      	adds	r3, #9
    916a:	33ff      	adds	r3, #255	; 0xff
    916c:	0019      	movs	r1, r3
    916e:	68ba      	ldr	r2, [r7, #8]
    9170:	68fb      	ldr	r3, [r7, #12]
    9172:	0018      	movs	r0, r3
    9174:	f7ff f8dc 	bl	8330 <wc_AesDecrypt>
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
    9178:	68fb      	ldr	r3, [r7, #12]
    917a:	33f8      	adds	r3, #248	; 0xf8
    917c:	0019      	movs	r1, r3
    917e:	68bb      	ldr	r3, [r7, #8]
    9180:	2210      	movs	r2, #16
    9182:	0018      	movs	r0, r3
    9184:	f7fe fcfa 	bl	7b7c <xorbuf>
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
    9188:	68fb      	ldr	r3, [r7, #12]
    918a:	33f8      	adds	r3, #248	; 0xf8
    918c:	0018      	movs	r0, r3
    918e:	68fb      	ldr	r3, [r7, #12]
    9190:	3309      	adds	r3, #9
    9192:	33ff      	adds	r3, #255	; 0xff
    9194:	2210      	movs	r2, #16
    9196:	0019      	movs	r1, r3
    9198:	f01c faa9 	bl	256ee <memcpy>

            out += AES_BLOCK_SIZE;
    919c:	68bb      	ldr	r3, [r7, #8]
    919e:	3310      	adds	r3, #16
    91a0:	60bb      	str	r3, [r7, #8]
            in  += AES_BLOCK_SIZE;
    91a2:	687b      	ldr	r3, [r7, #4]
    91a4:	3310      	adds	r3, #16
    91a6:	607b      	str	r3, [r7, #4]
            return 0;
        }
    #endif

        blocks = sz / AES_BLOCK_SIZE;
        while (blocks--) {
    91a8:	697b      	ldr	r3, [r7, #20]
    91aa:	1e5a      	subs	r2, r3, #1
    91ac:	617a      	str	r2, [r7, #20]
    91ae:	2b00      	cmp	r3, #0
    91b0:	d1d1      	bne.n	9156 <wc_AesCbcDecrypt+0x36>

            out += AES_BLOCK_SIZE;
            in  += AES_BLOCK_SIZE;
        }

        return 0;
    91b2:	2300      	movs	r3, #0
    }
    91b4:	0018      	movs	r0, r3
    91b6:	46bd      	mov	sp, r7
    91b8:	b006      	add	sp, #24
    91ba:	bd80      	pop	{r7, pc}

000091bc <IncCtr>:
 * block counter during the encryption.
 */

#if (defined(HAVE_AESGCM) && !defined(WC_NO_RNG)) || defined(HAVE_AESCCM)
static WC_INLINE void IncCtr(byte* ctr, word32 ctrSz)
{
    91bc:	b580      	push	{r7, lr}
    91be:	b084      	sub	sp, #16
    91c0:	af00      	add	r7, sp, #0
    91c2:	6078      	str	r0, [r7, #4]
    91c4:	6039      	str	r1, [r7, #0]
    int i;
    for (i = ctrSz-1; i >= 0; i--) {
    91c6:	683b      	ldr	r3, [r7, #0]
    91c8:	3b01      	subs	r3, #1
    91ca:	60fb      	str	r3, [r7, #12]
    91cc:	e00c      	b.n	91e8 <IncCtr+0x2c>
        if (++ctr[i])
    91ce:	68fb      	ldr	r3, [r7, #12]
    91d0:	687a      	ldr	r2, [r7, #4]
    91d2:	18d3      	adds	r3, r2, r3
    91d4:	781a      	ldrb	r2, [r3, #0]
    91d6:	3201      	adds	r2, #1
    91d8:	b2d2      	uxtb	r2, r2
    91da:	701a      	strb	r2, [r3, #0]
    91dc:	781b      	ldrb	r3, [r3, #0]
    91de:	2b00      	cmp	r3, #0
    91e0:	d106      	bne.n	91f0 <IncCtr+0x34>

#if (defined(HAVE_AESGCM) && !defined(WC_NO_RNG)) || defined(HAVE_AESCCM)
static WC_INLINE void IncCtr(byte* ctr, word32 ctrSz)
{
    int i;
    for (i = ctrSz-1; i >= 0; i--) {
    91e2:	68fb      	ldr	r3, [r7, #12]
    91e4:	3b01      	subs	r3, #1
    91e6:	60fb      	str	r3, [r7, #12]
    91e8:	68fb      	ldr	r3, [r7, #12]
    91ea:	2b00      	cmp	r3, #0
    91ec:	daef      	bge.n	91ce <IncCtr+0x12>
        if (++ctr[i])
            break;
    }
}
    91ee:	e000      	b.n	91f2 <IncCtr+0x36>
static WC_INLINE void IncCtr(byte* ctr, word32 ctrSz)
{
    int i;
    for (i = ctrSz-1; i >= 0; i--) {
        if (++ctr[i])
            break;
    91f0:	46c0      	nop			; (mov r8, r8)
    }
}
    91f2:	46c0      	nop			; (mov r8, r8)
    91f4:	46bd      	mov	sp, r7
    91f6:	b004      	add	sp, #16
    91f8:	bd80      	pop	{r7, pc}
    91fa:	46c0      	nop			; (mov r8, r8)

000091fc <IncrementGcmCounter>:

#else /* software + AESNI implementation */

#if !defined(FREESCALE_LTC_AES_GCM)
static WC_INLINE void IncrementGcmCounter(byte* inOutCtr)
{
    91fc:	b580      	push	{r7, lr}
    91fe:	b084      	sub	sp, #16
    9200:	af00      	add	r7, sp, #0
    9202:	6078      	str	r0, [r7, #4]
    int i;

    /* in network byte order so start at end and work back */
    for (i = AES_BLOCK_SIZE - 1; i >= AES_BLOCK_SIZE - CTR_SZ; i--) {
    9204:	230f      	movs	r3, #15
    9206:	60fb      	str	r3, [r7, #12]
    9208:	e00c      	b.n	9224 <IncrementGcmCounter+0x28>
        if (++inOutCtr[i])  /* we're done unless we overflow */
    920a:	68fb      	ldr	r3, [r7, #12]
    920c:	687a      	ldr	r2, [r7, #4]
    920e:	18d3      	adds	r3, r2, r3
    9210:	781a      	ldrb	r2, [r3, #0]
    9212:	3201      	adds	r2, #1
    9214:	b2d2      	uxtb	r2, r2
    9216:	701a      	strb	r2, [r3, #0]
    9218:	781b      	ldrb	r3, [r3, #0]
    921a:	2b00      	cmp	r3, #0
    921c:	d106      	bne.n	922c <IncrementGcmCounter+0x30>
static WC_INLINE void IncrementGcmCounter(byte* inOutCtr)
{
    int i;

    /* in network byte order so start at end and work back */
    for (i = AES_BLOCK_SIZE - 1; i >= AES_BLOCK_SIZE - CTR_SZ; i--) {
    921e:	68fb      	ldr	r3, [r7, #12]
    9220:	3b01      	subs	r3, #1
    9222:	60fb      	str	r3, [r7, #12]
    9224:	68fb      	ldr	r3, [r7, #12]
    9226:	2b0b      	cmp	r3, #11
    9228:	dcef      	bgt.n	920a <IncrementGcmCounter+0xe>
    922a:	e000      	b.n	922e <IncrementGcmCounter+0x32>
        if (++inOutCtr[i])  /* we're done unless we overflow */
            return;
    922c:	46c0      	nop			; (mov r8, r8)
    }
}
    922e:	46bd      	mov	sp, r7
    9230:	b004      	add	sp, #16
    9232:	bd80      	pop	{r7, pc}

00009234 <FlattenSzInBits>:
#endif /* !FREESCALE_LTC_AES_GCM */

#if defined(GCM_SMALL) || defined(GCM_TABLE)

static WC_INLINE void FlattenSzInBits(byte* buf, word32 sz)
{
    9234:	b580      	push	{r7, lr}
    9236:	b084      	sub	sp, #16
    9238:	af00      	add	r7, sp, #0
    923a:	6078      	str	r0, [r7, #4]
    923c:	6039      	str	r1, [r7, #0]
    /* Multiply the sz by 8 */
    word32 szHi = (sz >> (8*sizeof(sz) - 3));
    923e:	683b      	ldr	r3, [r7, #0]
    9240:	0f5b      	lsrs	r3, r3, #29
    9242:	60fb      	str	r3, [r7, #12]
    sz <<= 3;
    9244:	683b      	ldr	r3, [r7, #0]
    9246:	00db      	lsls	r3, r3, #3
    9248:	603b      	str	r3, [r7, #0]

    /* copy over the words of the sz into the destination buffer */
    buf[0] = (szHi >> 24) & 0xff;
    924a:	68fb      	ldr	r3, [r7, #12]
    924c:	0e1b      	lsrs	r3, r3, #24
    924e:	b2da      	uxtb	r2, r3
    9250:	687b      	ldr	r3, [r7, #4]
    9252:	701a      	strb	r2, [r3, #0]
    buf[1] = (szHi >> 16) & 0xff;
    9254:	687b      	ldr	r3, [r7, #4]
    9256:	3301      	adds	r3, #1
    9258:	68fa      	ldr	r2, [r7, #12]
    925a:	0c12      	lsrs	r2, r2, #16
    925c:	b2d2      	uxtb	r2, r2
    925e:	701a      	strb	r2, [r3, #0]
    buf[2] = (szHi >>  8) & 0xff;
    9260:	687b      	ldr	r3, [r7, #4]
    9262:	3302      	adds	r3, #2
    9264:	68fa      	ldr	r2, [r7, #12]
    9266:	0a12      	lsrs	r2, r2, #8
    9268:	b2d2      	uxtb	r2, r2
    926a:	701a      	strb	r2, [r3, #0]
    buf[3] = szHi & 0xff;
    926c:	687b      	ldr	r3, [r7, #4]
    926e:	3303      	adds	r3, #3
    9270:	68fa      	ldr	r2, [r7, #12]
    9272:	b2d2      	uxtb	r2, r2
    9274:	701a      	strb	r2, [r3, #0]
    buf[4] = (sz >> 24) & 0xff;
    9276:	687b      	ldr	r3, [r7, #4]
    9278:	3304      	adds	r3, #4
    927a:	683a      	ldr	r2, [r7, #0]
    927c:	0e12      	lsrs	r2, r2, #24
    927e:	b2d2      	uxtb	r2, r2
    9280:	701a      	strb	r2, [r3, #0]
    buf[5] = (sz >> 16) & 0xff;
    9282:	687b      	ldr	r3, [r7, #4]
    9284:	3305      	adds	r3, #5
    9286:	683a      	ldr	r2, [r7, #0]
    9288:	0c12      	lsrs	r2, r2, #16
    928a:	b2d2      	uxtb	r2, r2
    928c:	701a      	strb	r2, [r3, #0]
    buf[6] = (sz >>  8) & 0xff;
    928e:	687b      	ldr	r3, [r7, #4]
    9290:	3306      	adds	r3, #6
    9292:	683a      	ldr	r2, [r7, #0]
    9294:	0a12      	lsrs	r2, r2, #8
    9296:	b2d2      	uxtb	r2, r2
    9298:	701a      	strb	r2, [r3, #0]
    buf[7] = sz & 0xff;
    929a:	687b      	ldr	r3, [r7, #4]
    929c:	3307      	adds	r3, #7
    929e:	683a      	ldr	r2, [r7, #0]
    92a0:	b2d2      	uxtb	r2, r2
    92a2:	701a      	strb	r2, [r3, #0]
}
    92a4:	46c0      	nop			; (mov r8, r8)
    92a6:	46bd      	mov	sp, r7
    92a8:	b004      	add	sp, #16
    92aa:	bd80      	pop	{r7, pc}

000092ac <RIGHTSHIFTX>:


static WC_INLINE void RIGHTSHIFTX(byte* x)
{
    92ac:	b580      	push	{r7, lr}
    92ae:	b086      	sub	sp, #24
    92b0:	af00      	add	r7, sp, #0
    92b2:	6078      	str	r0, [r7, #4]
    int i;
    int carryOut = 0;
    92b4:	2300      	movs	r3, #0
    92b6:	60fb      	str	r3, [r7, #12]
    int carryIn = 0;
    92b8:	2300      	movs	r3, #0
    92ba:	613b      	str	r3, [r7, #16]
    int borrow = x[15] & 0x01;
    92bc:	687b      	ldr	r3, [r7, #4]
    92be:	330f      	adds	r3, #15
    92c0:	781b      	ldrb	r3, [r3, #0]
    92c2:	001a      	movs	r2, r3
    92c4:	2301      	movs	r3, #1
    92c6:	4013      	ands	r3, r2
    92c8:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < AES_BLOCK_SIZE; i++) {
    92ca:	2300      	movs	r3, #0
    92cc:	617b      	str	r3, [r7, #20]
    92ce:	e021      	b.n	9314 <RIGHTSHIFTX+0x68>
        carryOut = x[i] & 0x01;
    92d0:	697b      	ldr	r3, [r7, #20]
    92d2:	687a      	ldr	r2, [r7, #4]
    92d4:	18d3      	adds	r3, r2, r3
    92d6:	781b      	ldrb	r3, [r3, #0]
    92d8:	001a      	movs	r2, r3
    92da:	2301      	movs	r3, #1
    92dc:	4013      	ands	r3, r2
    92de:	60fb      	str	r3, [r7, #12]
        x[i] = (x[i] >> 1) | (carryIn ? 0x80 : 0);
    92e0:	697b      	ldr	r3, [r7, #20]
    92e2:	687a      	ldr	r2, [r7, #4]
    92e4:	18d2      	adds	r2, r2, r3
    92e6:	697b      	ldr	r3, [r7, #20]
    92e8:	6879      	ldr	r1, [r7, #4]
    92ea:	18cb      	adds	r3, r1, r3
    92ec:	781b      	ldrb	r3, [r3, #0]
    92ee:	085b      	lsrs	r3, r3, #1
    92f0:	b2db      	uxtb	r3, r3
    92f2:	b259      	sxtb	r1, r3
    92f4:	693b      	ldr	r3, [r7, #16]
    92f6:	2b00      	cmp	r3, #0
    92f8:	d002      	beq.n	9300 <RIGHTSHIFTX+0x54>
    92fa:	2380      	movs	r3, #128	; 0x80
    92fc:	425b      	negs	r3, r3
    92fe:	e000      	b.n	9302 <RIGHTSHIFTX+0x56>
    9300:	2300      	movs	r3, #0
    9302:	430b      	orrs	r3, r1
    9304:	b25b      	sxtb	r3, r3
    9306:	b2db      	uxtb	r3, r3
    9308:	7013      	strb	r3, [r2, #0]
        carryIn = carryOut;
    930a:	68fb      	ldr	r3, [r7, #12]
    930c:	613b      	str	r3, [r7, #16]
    int i;
    int carryOut = 0;
    int carryIn = 0;
    int borrow = x[15] & 0x01;

    for (i = 0; i < AES_BLOCK_SIZE; i++) {
    930e:	697b      	ldr	r3, [r7, #20]
    9310:	3301      	adds	r3, #1
    9312:	617b      	str	r3, [r7, #20]
    9314:	697b      	ldr	r3, [r7, #20]
    9316:	2b0f      	cmp	r3, #15
    9318:	ddda      	ble.n	92d0 <RIGHTSHIFTX+0x24>
        carryOut = x[i] & 0x01;
        x[i] = (x[i] >> 1) | (carryIn ? 0x80 : 0);
        carryIn = carryOut;
    }
    if (borrow) x[0] ^= 0xE1;
    931a:	68bb      	ldr	r3, [r7, #8]
    931c:	2b00      	cmp	r3, #0
    931e:	d007      	beq.n	9330 <RIGHTSHIFTX+0x84>
    9320:	687b      	ldr	r3, [r7, #4]
    9322:	781b      	ldrb	r3, [r3, #0]
    9324:	221f      	movs	r2, #31
    9326:	4252      	negs	r2, r2
    9328:	4053      	eors	r3, r2
    932a:	b2da      	uxtb	r2, r3
    932c:	687b      	ldr	r3, [r7, #4]
    932e:	701a      	strb	r2, [r3, #0]
}
    9330:	46c0      	nop			; (mov r8, r8)
    9332:	46bd      	mov	sp, r7
    9334:	b006      	add	sp, #24
    9336:	bd80      	pop	{r7, pc}

00009338 <wc_AesGcmSetKey>:

#endif /* GCM_TABLE */

/* Software AES - GCM SetKey */
int wc_AesGcmSetKey(Aes* aes, const byte* key, word32 len)
{
    9338:	b590      	push	{r4, r7, lr}
    933a:	b08d      	sub	sp, #52	; 0x34
    933c:	af02      	add	r7, sp, #8
    933e:	60f8      	str	r0, [r7, #12]
    9340:	60b9      	str	r1, [r7, #8]
    9342:	607a      	str	r2, [r7, #4]
            key = local;
            len = localSz;
        }
    #endif

    if (!((len == 16) || (len == 24) || (len == 32)))
    9344:	687b      	ldr	r3, [r7, #4]
    9346:	2b10      	cmp	r3, #16
    9348:	d008      	beq.n	935c <wc_AesGcmSetKey+0x24>
    934a:	687b      	ldr	r3, [r7, #4]
    934c:	2b18      	cmp	r3, #24
    934e:	d005      	beq.n	935c <wc_AesGcmSetKey+0x24>
    9350:	687b      	ldr	r3, [r7, #4]
    9352:	2b20      	cmp	r3, #32
    9354:	d002      	beq.n	935c <wc_AesGcmSetKey+0x24>
        return BAD_FUNC_ARG;
    9356:	23ad      	movs	r3, #173	; 0xad
    9358:	425b      	negs	r3, r3
    935a:	e020      	b.n	939e <wc_AesGcmSetKey+0x66>

    XMEMSET(iv, 0, AES_BLOCK_SIZE);
    935c:	2314      	movs	r3, #20
    935e:	18fb      	adds	r3, r7, r3
    9360:	2210      	movs	r2, #16
    9362:	2100      	movs	r1, #0
    9364:	0018      	movs	r0, r3
    9366:	f01c f9e0 	bl	2572a <memset>
    ret = wc_AesSetKey(aes, key, len, iv, AES_ENCRYPTION);
    936a:	2314      	movs	r3, #20
    936c:	18fc      	adds	r4, r7, r3
    936e:	687a      	ldr	r2, [r7, #4]
    9370:	68b9      	ldr	r1, [r7, #8]
    9372:	68f8      	ldr	r0, [r7, #12]
    9374:	2300      	movs	r3, #0
    9376:	9300      	str	r3, [sp, #0]
    9378:	0023      	movs	r3, r4
    937a:	f7ff fe35 	bl	8fe8 <wc_AesSetKey>
    937e:	0003      	movs	r3, r0
    9380:	627b      	str	r3, [r7, #36]	; 0x24
        if (haveAESNI)
            return ret;
    #endif /* WOLFSSL_AESNI */

#if !defined(FREESCALE_LTC_AES_GCM)
    if (ret == 0) {
    9382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9384:	2b00      	cmp	r3, #0
    9386:	d109      	bne.n	939c <wc_AesGcmSetKey+0x64>
        wc_AesEncrypt(aes, iv, aes->H);
    9388:	68fb      	ldr	r3, [r7, #12]
    938a:	3325      	adds	r3, #37	; 0x25
    938c:	33ff      	adds	r3, #255	; 0xff
    938e:	001a      	movs	r2, r3
    9390:	2314      	movs	r3, #20
    9392:	18f9      	adds	r1, r7, r3
    9394:	68fb      	ldr	r3, [r7, #12]
    9396:	0018      	movs	r0, r3
    9398:	f7fe fc8a 	bl	7cb0 <wc_AesEncrypt>

#ifdef WOLFSSL_IMX6_CAAM_BLOB
    ForceZero(local, sizeof(local));
#endif

    return ret;
    939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    939e:	0018      	movs	r0, r3
    93a0:	46bd      	mov	sp, r7
    93a2:	b00b      	add	sp, #44	; 0x2c
    93a4:	bd90      	pop	{r4, r7, pc}
    93a6:	46c0      	nop			; (mov r8, r8)

000093a8 <GMULT>:
#endif /* WOLFSSL_AESNI */


#if defined(GCM_SMALL)
static void GMULT(byte* X, byte* Y)
{
    93a8:	b580      	push	{r7, lr}
    93aa:	b08e      	sub	sp, #56	; 0x38
    93ac:	af00      	add	r7, sp, #0
    93ae:	6078      	str	r0, [r7, #4]
    93b0:	6039      	str	r1, [r7, #0]
    byte Z[AES_BLOCK_SIZE];
    byte V[AES_BLOCK_SIZE];
    int i, j;

    XMEMSET(Z, 0, AES_BLOCK_SIZE);
    93b2:	231c      	movs	r3, #28
    93b4:	18fb      	adds	r3, r7, r3
    93b6:	2210      	movs	r2, #16
    93b8:	2100      	movs	r1, #0
    93ba:	0018      	movs	r0, r3
    93bc:	f01c f9b5 	bl	2572a <memset>
    XMEMCPY(V, X, AES_BLOCK_SIZE);
    93c0:	230c      	movs	r3, #12
    93c2:	18fa      	adds	r2, r7, r3
    93c4:	687b      	ldr	r3, [r7, #4]
    93c6:	0010      	movs	r0, r2
    93c8:	0019      	movs	r1, r3
    93ca:	2310      	movs	r3, #16
    93cc:	001a      	movs	r2, r3
    93ce:	f01c f98e 	bl	256ee <memcpy>
    for (i = 0; i < AES_BLOCK_SIZE; i++)
    93d2:	2300      	movs	r3, #0
    93d4:	637b      	str	r3, [r7, #52]	; 0x34
    93d6:	e02c      	b.n	9432 <GMULT+0x8a>
    {
        byte y = Y[i];
    93d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    93da:	683a      	ldr	r2, [r7, #0]
    93dc:	18d2      	adds	r2, r2, r3
    93de:	232f      	movs	r3, #47	; 0x2f
    93e0:	18fb      	adds	r3, r7, r3
    93e2:	7812      	ldrb	r2, [r2, #0]
    93e4:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++)
    93e6:	2300      	movs	r3, #0
    93e8:	633b      	str	r3, [r7, #48]	; 0x30
    93ea:	e01c      	b.n	9426 <GMULT+0x7e>
        {
            if (y & 0x80) {
    93ec:	232f      	movs	r3, #47	; 0x2f
    93ee:	18fb      	adds	r3, r7, r3
    93f0:	781b      	ldrb	r3, [r3, #0]
    93f2:	b25b      	sxtb	r3, r3
    93f4:	2b00      	cmp	r3, #0
    93f6:	da07      	bge.n	9408 <GMULT+0x60>
                xorbuf(Z, V, AES_BLOCK_SIZE);
    93f8:	230c      	movs	r3, #12
    93fa:	18f9      	adds	r1, r7, r3
    93fc:	231c      	movs	r3, #28
    93fe:	18fb      	adds	r3, r7, r3
    9400:	2210      	movs	r2, #16
    9402:	0018      	movs	r0, r3
    9404:	f7fe fbba 	bl	7b7c <xorbuf>
            }

            RIGHTSHIFTX(V);
    9408:	230c      	movs	r3, #12
    940a:	18fb      	adds	r3, r7, r3
    940c:	0018      	movs	r0, r3
    940e:	f7ff ff4d 	bl	92ac <RIGHTSHIFTX>
            y = y << 1;
    9412:	232f      	movs	r3, #47	; 0x2f
    9414:	18fa      	adds	r2, r7, r3
    9416:	232f      	movs	r3, #47	; 0x2f
    9418:	18fb      	adds	r3, r7, r3
    941a:	781b      	ldrb	r3, [r3, #0]
    941c:	18db      	adds	r3, r3, r3
    941e:	7013      	strb	r3, [r2, #0]
    XMEMSET(Z, 0, AES_BLOCK_SIZE);
    XMEMCPY(V, X, AES_BLOCK_SIZE);
    for (i = 0; i < AES_BLOCK_SIZE; i++)
    {
        byte y = Y[i];
        for (j = 0; j < 8; j++)
    9420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9422:	3301      	adds	r3, #1
    9424:	633b      	str	r3, [r7, #48]	; 0x30
    9426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9428:	2b07      	cmp	r3, #7
    942a:	dddf      	ble.n	93ec <GMULT+0x44>
    byte V[AES_BLOCK_SIZE];
    int i, j;

    XMEMSET(Z, 0, AES_BLOCK_SIZE);
    XMEMCPY(V, X, AES_BLOCK_SIZE);
    for (i = 0; i < AES_BLOCK_SIZE; i++)
    942c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    942e:	3301      	adds	r3, #1
    9430:	637b      	str	r3, [r7, #52]	; 0x34
    9432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9434:	2b0f      	cmp	r3, #15
    9436:	ddcf      	ble.n	93d8 <GMULT+0x30>

            RIGHTSHIFTX(V);
            y = y << 1;
        }
    }
    XMEMCPY(X, Z, AES_BLOCK_SIZE);
    9438:	687a      	ldr	r2, [r7, #4]
    943a:	231c      	movs	r3, #28
    943c:	18fb      	adds	r3, r7, r3
    943e:	0010      	movs	r0, r2
    9440:	0019      	movs	r1, r3
    9442:	2310      	movs	r3, #16
    9444:	001a      	movs	r2, r3
    9446:	f01c f952 	bl	256ee <memcpy>
}
    944a:	46c0      	nop			; (mov r8, r8)
    944c:	46bd      	mov	sp, r7
    944e:	b00e      	add	sp, #56	; 0x38
    9450:	bd80      	pop	{r7, pc}
    9452:	46c0      	nop			; (mov r8, r8)

00009454 <GHASH>:


void GHASH(Aes* aes, const byte* a, word32 aSz, const byte* c,
    word32 cSz, byte* s, word32 sSz)
{
    9454:	b580      	push	{r7, lr}
    9456:	b090      	sub	sp, #64	; 0x40
    9458:	af00      	add	r7, sp, #0
    945a:	60f8      	str	r0, [r7, #12]
    945c:	60b9      	str	r1, [r7, #8]
    945e:	607a      	str	r2, [r7, #4]
    9460:	603b      	str	r3, [r7, #0]
    byte x[AES_BLOCK_SIZE];
    byte scratch[AES_BLOCK_SIZE];
    word32 blocks, partial;
    byte* h = aes->H;
    9462:	68fb      	ldr	r3, [r7, #12]
    9464:	3325      	adds	r3, #37	; 0x25
    9466:	33ff      	adds	r3, #255	; 0xff
    9468:	63bb      	str	r3, [r7, #56]	; 0x38

    XMEMSET(x, 0, AES_BLOCK_SIZE);
    946a:	2324      	movs	r3, #36	; 0x24
    946c:	18fb      	adds	r3, r7, r3
    946e:	2210      	movs	r2, #16
    9470:	2100      	movs	r1, #0
    9472:	0018      	movs	r0, r3
    9474:	f01c f959 	bl	2572a <memset>

    /* Hash in A, the Additional Authentication Data */
    if (aSz != 0 && a != NULL) {
    9478:	687b      	ldr	r3, [r7, #4]
    947a:	2b00      	cmp	r3, #0
    947c:	d040      	beq.n	9500 <GHASH+0xac>
    947e:	68bb      	ldr	r3, [r7, #8]
    9480:	2b00      	cmp	r3, #0
    9482:	d03d      	beq.n	9500 <GHASH+0xac>
        blocks = aSz / AES_BLOCK_SIZE;
    9484:	687b      	ldr	r3, [r7, #4]
    9486:	091b      	lsrs	r3, r3, #4
    9488:	63fb      	str	r3, [r7, #60]	; 0x3c
        partial = aSz % AES_BLOCK_SIZE;
    948a:	687b      	ldr	r3, [r7, #4]
    948c:	220f      	movs	r2, #15
    948e:	4013      	ands	r3, r2
    9490:	637b      	str	r3, [r7, #52]	; 0x34
        while (blocks--) {
    9492:	e010      	b.n	94b6 <GHASH+0x62>
            xorbuf(x, a, AES_BLOCK_SIZE);
    9494:	68b9      	ldr	r1, [r7, #8]
    9496:	2324      	movs	r3, #36	; 0x24
    9498:	18fb      	adds	r3, r7, r3
    949a:	2210      	movs	r2, #16
    949c:	0018      	movs	r0, r3
    949e:	f7fe fb6d 	bl	7b7c <xorbuf>
            GMULT(x, h);
    94a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    94a4:	2324      	movs	r3, #36	; 0x24
    94a6:	18fb      	adds	r3, r7, r3
    94a8:	0011      	movs	r1, r2
    94aa:	0018      	movs	r0, r3
    94ac:	f7ff ff7c 	bl	93a8 <GMULT>
            a += AES_BLOCK_SIZE;
    94b0:	68bb      	ldr	r3, [r7, #8]
    94b2:	3310      	adds	r3, #16
    94b4:	60bb      	str	r3, [r7, #8]

    /* Hash in A, the Additional Authentication Data */
    if (aSz != 0 && a != NULL) {
        blocks = aSz / AES_BLOCK_SIZE;
        partial = aSz % AES_BLOCK_SIZE;
        while (blocks--) {
    94b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    94b8:	1e5a      	subs	r2, r3, #1
    94ba:	63fa      	str	r2, [r7, #60]	; 0x3c
    94bc:	2b00      	cmp	r3, #0
    94be:	d1e9      	bne.n	9494 <GHASH+0x40>
            xorbuf(x, a, AES_BLOCK_SIZE);
            GMULT(x, h);
            a += AES_BLOCK_SIZE;
        }
        if (partial != 0) {
    94c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    94c2:	2b00      	cmp	r3, #0
    94c4:	d01c      	beq.n	9500 <GHASH+0xac>
            XMEMSET(scratch, 0, AES_BLOCK_SIZE);
    94c6:	2314      	movs	r3, #20
    94c8:	18fb      	adds	r3, r7, r3
    94ca:	2210      	movs	r2, #16
    94cc:	2100      	movs	r1, #0
    94ce:	0018      	movs	r0, r3
    94d0:	f01c f92b 	bl	2572a <memset>
            XMEMCPY(scratch, a, partial);
    94d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    94d6:	68b9      	ldr	r1, [r7, #8]
    94d8:	2314      	movs	r3, #20
    94da:	18fb      	adds	r3, r7, r3
    94dc:	0018      	movs	r0, r3
    94de:	f01c f906 	bl	256ee <memcpy>
            xorbuf(x, scratch, AES_BLOCK_SIZE);
    94e2:	2314      	movs	r3, #20
    94e4:	18f9      	adds	r1, r7, r3
    94e6:	2324      	movs	r3, #36	; 0x24
    94e8:	18fb      	adds	r3, r7, r3
    94ea:	2210      	movs	r2, #16
    94ec:	0018      	movs	r0, r3
    94ee:	f7fe fb45 	bl	7b7c <xorbuf>
            GMULT(x, h);
    94f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    94f4:	2324      	movs	r3, #36	; 0x24
    94f6:	18fb      	adds	r3, r7, r3
    94f8:	0011      	movs	r1, r2
    94fa:	0018      	movs	r0, r3
    94fc:	f7ff ff54 	bl	93a8 <GMULT>
        }
    }

    /* Hash in C, the Ciphertext */
    if (cSz != 0 && c != NULL) {
    9500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9502:	2b00      	cmp	r3, #0
    9504:	d040      	beq.n	9588 <GHASH+0x134>
    9506:	683b      	ldr	r3, [r7, #0]
    9508:	2b00      	cmp	r3, #0
    950a:	d03d      	beq.n	9588 <GHASH+0x134>
        blocks = cSz / AES_BLOCK_SIZE;
    950c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    950e:	091b      	lsrs	r3, r3, #4
    9510:	63fb      	str	r3, [r7, #60]	; 0x3c
        partial = cSz % AES_BLOCK_SIZE;
    9512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9514:	220f      	movs	r2, #15
    9516:	4013      	ands	r3, r2
    9518:	637b      	str	r3, [r7, #52]	; 0x34
        while (blocks--) {
    951a:	e010      	b.n	953e <GHASH+0xea>
            xorbuf(x, c, AES_BLOCK_SIZE);
    951c:	6839      	ldr	r1, [r7, #0]
    951e:	2324      	movs	r3, #36	; 0x24
    9520:	18fb      	adds	r3, r7, r3
    9522:	2210      	movs	r2, #16
    9524:	0018      	movs	r0, r3
    9526:	f7fe fb29 	bl	7b7c <xorbuf>
            GMULT(x, h);
    952a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    952c:	2324      	movs	r3, #36	; 0x24
    952e:	18fb      	adds	r3, r7, r3
    9530:	0011      	movs	r1, r2
    9532:	0018      	movs	r0, r3
    9534:	f7ff ff38 	bl	93a8 <GMULT>
            c += AES_BLOCK_SIZE;
    9538:	683b      	ldr	r3, [r7, #0]
    953a:	3310      	adds	r3, #16
    953c:	603b      	str	r3, [r7, #0]

    /* Hash in C, the Ciphertext */
    if (cSz != 0 && c != NULL) {
        blocks = cSz / AES_BLOCK_SIZE;
        partial = cSz % AES_BLOCK_SIZE;
        while (blocks--) {
    953e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9540:	1e5a      	subs	r2, r3, #1
    9542:	63fa      	str	r2, [r7, #60]	; 0x3c
    9544:	2b00      	cmp	r3, #0
    9546:	d1e9      	bne.n	951c <GHASH+0xc8>
            xorbuf(x, c, AES_BLOCK_SIZE);
            GMULT(x, h);
            c += AES_BLOCK_SIZE;
        }
        if (partial != 0) {
    9548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    954a:	2b00      	cmp	r3, #0
    954c:	d01c      	beq.n	9588 <GHASH+0x134>
            XMEMSET(scratch, 0, AES_BLOCK_SIZE);
    954e:	2314      	movs	r3, #20
    9550:	18fb      	adds	r3, r7, r3
    9552:	2210      	movs	r2, #16
    9554:	2100      	movs	r1, #0
    9556:	0018      	movs	r0, r3
    9558:	f01c f8e7 	bl	2572a <memset>
            XMEMCPY(scratch, c, partial);
    955c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    955e:	6839      	ldr	r1, [r7, #0]
    9560:	2314      	movs	r3, #20
    9562:	18fb      	adds	r3, r7, r3
    9564:	0018      	movs	r0, r3
    9566:	f01c f8c2 	bl	256ee <memcpy>
            xorbuf(x, scratch, AES_BLOCK_SIZE);
    956a:	2314      	movs	r3, #20
    956c:	18f9      	adds	r1, r7, r3
    956e:	2324      	movs	r3, #36	; 0x24
    9570:	18fb      	adds	r3, r7, r3
    9572:	2210      	movs	r2, #16
    9574:	0018      	movs	r0, r3
    9576:	f7fe fb01 	bl	7b7c <xorbuf>
            GMULT(x, h);
    957a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    957c:	2324      	movs	r3, #36	; 0x24
    957e:	18fb      	adds	r3, r7, r3
    9580:	0011      	movs	r1, r2
    9582:	0018      	movs	r0, r3
    9584:	f7ff ff10 	bl	93a8 <GMULT>
        }
    }

    /* Hash in the lengths of A and C in bits */
    FlattenSzInBits(&scratch[0], aSz);
    9588:	687a      	ldr	r2, [r7, #4]
    958a:	2314      	movs	r3, #20
    958c:	18fb      	adds	r3, r7, r3
    958e:	0011      	movs	r1, r2
    9590:	0018      	movs	r0, r3
    9592:	f7ff fe4f 	bl	9234 <FlattenSzInBits>
    FlattenSzInBits(&scratch[8], cSz);
    9596:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9598:	2314      	movs	r3, #20
    959a:	18fb      	adds	r3, r7, r3
    959c:	3308      	adds	r3, #8
    959e:	0011      	movs	r1, r2
    95a0:	0018      	movs	r0, r3
    95a2:	f7ff fe47 	bl	9234 <FlattenSzInBits>
    xorbuf(x, scratch, AES_BLOCK_SIZE);
    95a6:	2314      	movs	r3, #20
    95a8:	18f9      	adds	r1, r7, r3
    95aa:	2324      	movs	r3, #36	; 0x24
    95ac:	18fb      	adds	r3, r7, r3
    95ae:	2210      	movs	r2, #16
    95b0:	0018      	movs	r0, r3
    95b2:	f7fe fae3 	bl	7b7c <xorbuf>
    GMULT(x, h);
    95b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    95b8:	2324      	movs	r3, #36	; 0x24
    95ba:	18fb      	adds	r3, r7, r3
    95bc:	0011      	movs	r1, r2
    95be:	0018      	movs	r0, r3
    95c0:	f7ff fef2 	bl	93a8 <GMULT>

    /* Copy the result into s. */
    XMEMCPY(s, x, sSz);
    95c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    95c6:	2324      	movs	r3, #36	; 0x24
    95c8:	18f9      	adds	r1, r7, r3
    95ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    95cc:	0018      	movs	r0, r3
    95ce:	f01c f88e 	bl	256ee <memcpy>
}
    95d2:	46c0      	nop			; (mov r8, r8)
    95d4:	46bd      	mov	sp, r7
    95d6:	b010      	add	sp, #64	; 0x40
    95d8:	bd80      	pop	{r7, pc}
    95da:	46c0      	nop			; (mov r8, r8)

000095dc <AES_GCM_encrypt_C>:
#endif
int AES_GCM_encrypt_C(Aes* aes, byte* out, const byte* in, word32 sz,
                      const byte* iv, word32 ivSz,
                      byte* authTag, word32 authTagSz,
                      const byte* authIn, word32 authInSz)
{
    95dc:	b590      	push	{r4, r7, lr}
    95de:	b09b      	sub	sp, #108	; 0x6c
    95e0:	af04      	add	r7, sp, #16
    95e2:	60f8      	str	r0, [r7, #12]
    95e4:	60b9      	str	r1, [r7, #8]
    95e6:	607a      	str	r2, [r7, #4]
    95e8:	603b      	str	r3, [r7, #0]
    int ret = 0;
    95ea:	2300      	movs	r3, #0
    95ec:	64bb      	str	r3, [r7, #72]	; 0x48
    word32 blocks = sz / AES_BLOCK_SIZE;
    95ee:	683b      	ldr	r3, [r7, #0]
    95f0:	091b      	lsrs	r3, r3, #4
    95f2:	657b      	str	r3, [r7, #84]	; 0x54
    word32 partial = sz % AES_BLOCK_SIZE;
    95f4:	683b      	ldr	r3, [r7, #0]
    95f6:	220f      	movs	r2, #15
    95f8:	4013      	ands	r3, r2
    95fa:	647b      	str	r3, [r7, #68]	; 0x44
    const byte* p = in;
    95fc:	687b      	ldr	r3, [r7, #4]
    95fe:	653b      	str	r3, [r7, #80]	; 0x50
    byte* c = out;
    9600:	68bb      	ldr	r3, [r7, #8]
    9602:	64fb      	str	r3, [r7, #76]	; 0x4c
    byte counter[AES_BLOCK_SIZE];
    byte initialCounter[AES_BLOCK_SIZE];
    byte *ctr;
    byte scratch[AES_BLOCK_SIZE];

    ctr = counter;
    9604:	2330      	movs	r3, #48	; 0x30
    9606:	18fb      	adds	r3, r7, r3
    9608:	643b      	str	r3, [r7, #64]	; 0x40
    XMEMSET(initialCounter, 0, AES_BLOCK_SIZE);
    960a:	2320      	movs	r3, #32
    960c:	18fb      	adds	r3, r7, r3
    960e:	2210      	movs	r2, #16
    9610:	2100      	movs	r1, #0
    9612:	0018      	movs	r0, r3
    9614:	f01c f889 	bl	2572a <memset>
    if (ivSz == GCM_NONCE_MID_SZ) {
    9618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    961a:	2b0c      	cmp	r3, #12
    961c:	d10b      	bne.n	9636 <AES_GCM_encrypt_C+0x5a>
        XMEMCPY(initialCounter, iv, ivSz);
    961e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    9620:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    9622:	2320      	movs	r3, #32
    9624:	18fb      	adds	r3, r7, r3
    9626:	0018      	movs	r0, r3
    9628:	f01c f861 	bl	256ee <memcpy>
        initialCounter[AES_BLOCK_SIZE - 1] = 1;
    962c:	2320      	movs	r3, #32
    962e:	18fb      	adds	r3, r7, r3
    9630:	2201      	movs	r2, #1
    9632:	73da      	strb	r2, [r3, #15]
    9634:	e00d      	b.n	9652 <AES_GCM_encrypt_C+0x76>
    }
    else {
        GHASH(aes, NULL, 0, iv, ivSz, initialCounter, AES_BLOCK_SIZE);
    9636:	6eba      	ldr	r2, [r7, #104]	; 0x68
    9638:	68f8      	ldr	r0, [r7, #12]
    963a:	2310      	movs	r3, #16
    963c:	9302      	str	r3, [sp, #8]
    963e:	2320      	movs	r3, #32
    9640:	18fb      	adds	r3, r7, r3
    9642:	9301      	str	r3, [sp, #4]
    9644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    9646:	9300      	str	r3, [sp, #0]
    9648:	0013      	movs	r3, r2
    964a:	2200      	movs	r2, #0
    964c:	2100      	movs	r1, #0
    964e:	f7ff ff01 	bl	9454 <GHASH>
    }
    XMEMCPY(ctr, initialCounter, AES_BLOCK_SIZE);
    9652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9654:	2320      	movs	r3, #32
    9656:	18fb      	adds	r3, r7, r3
    9658:	0010      	movs	r0, r2
    965a:	0019      	movs	r1, r3
    965c:	2310      	movs	r3, #16
    965e:	001a      	movs	r2, r3
    9660:	f01c f845 	bl	256ee <memcpy>
        p += AES_BLOCK_SIZE * blocks;
    }
    else
#endif /* HAVE_AES_ECB && !WOLFSSL_PIC32MZ_CRYPT */

    while (blocks--) {
    9664:	e020      	b.n	96a8 <AES_GCM_encrypt_C+0xcc>
        IncrementGcmCounter(ctr);
    9666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9668:	0018      	movs	r0, r3
    966a:	f7ff fdc7 	bl	91fc <IncrementGcmCounter>
    #if !defined(WOLFSSL_PIC32MZ_CRYPT)
        wc_AesEncrypt(aes, ctr, scratch);
    966e:	2310      	movs	r3, #16
    9670:	18fa      	adds	r2, r7, r3
    9672:	6c39      	ldr	r1, [r7, #64]	; 0x40
    9674:	68fb      	ldr	r3, [r7, #12]
    9676:	0018      	movs	r0, r3
    9678:	f7fe fb1a 	bl	7cb0 <wc_AesEncrypt>
        xorbuf(scratch, p, AES_BLOCK_SIZE);
    967c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    967e:	2310      	movs	r3, #16
    9680:	18fb      	adds	r3, r7, r3
    9682:	2210      	movs	r2, #16
    9684:	0018      	movs	r0, r3
    9686:	f7fe fa79 	bl	7b7c <xorbuf>
        XMEMCPY(c, scratch, AES_BLOCK_SIZE);
    968a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    968c:	2310      	movs	r3, #16
    968e:	18fb      	adds	r3, r7, r3
    9690:	0010      	movs	r0, r2
    9692:	0019      	movs	r1, r3
    9694:	2310      	movs	r3, #16
    9696:	001a      	movs	r2, r3
    9698:	f01c f829 	bl	256ee <memcpy>
    #endif
        p += AES_BLOCK_SIZE;
    969c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    969e:	3310      	adds	r3, #16
    96a0:	653b      	str	r3, [r7, #80]	; 0x50
        c += AES_BLOCK_SIZE;
    96a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    96a4:	3310      	adds	r3, #16
    96a6:	64fb      	str	r3, [r7, #76]	; 0x4c
        p += AES_BLOCK_SIZE * blocks;
    }
    else
#endif /* HAVE_AES_ECB && !WOLFSSL_PIC32MZ_CRYPT */

    while (blocks--) {
    96a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96aa:	1e5a      	subs	r2, r3, #1
    96ac:	657a      	str	r2, [r7, #84]	; 0x54
    96ae:	2b00      	cmp	r3, #0
    96b0:	d1d9      	bne.n	9666 <AES_GCM_encrypt_C+0x8a>
    #endif
        p += AES_BLOCK_SIZE;
        c += AES_BLOCK_SIZE;
    }

    if (partial != 0) {
    96b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    96b4:	2b00      	cmp	r3, #0
    96b6:	d018      	beq.n	96ea <AES_GCM_encrypt_C+0x10e>
        IncrementGcmCounter(ctr);
    96b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    96ba:	0018      	movs	r0, r3
    96bc:	f7ff fd9e 	bl	91fc <IncrementGcmCounter>
        wc_AesEncrypt(aes, ctr, scratch);
    96c0:	2310      	movs	r3, #16
    96c2:	18fa      	adds	r2, r7, r3
    96c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
    96c6:	68fb      	ldr	r3, [r7, #12]
    96c8:	0018      	movs	r0, r3
    96ca:	f7fe faf1 	bl	7cb0 <wc_AesEncrypt>
        xorbuf(scratch, p, partial);
    96ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    96d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
    96d2:	2310      	movs	r3, #16
    96d4:	18fb      	adds	r3, r7, r3
    96d6:	0018      	movs	r0, r3
    96d8:	f7fe fa50 	bl	7b7c <xorbuf>
        XMEMCPY(c, scratch, partial);
    96dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    96de:	2310      	movs	r3, #16
    96e0:	18f9      	adds	r1, r7, r3
    96e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    96e4:	0018      	movs	r0, r3
    96e6:	f01c f802 	bl	256ee <memcpy>
    }

    if (authTag) {
    96ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    96ec:	2b00      	cmp	r3, #0
    96ee:	d01b      	beq.n	9728 <AES_GCM_encrypt_C+0x14c>
        GHASH(aes, authIn, authInSz, out, sz, authTag, authTagSz);
    96f0:	68bc      	ldr	r4, [r7, #8]
    96f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    96f4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    96f6:	68f8      	ldr	r0, [r7, #12]
    96f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    96fa:	9302      	str	r3, [sp, #8]
    96fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    96fe:	9301      	str	r3, [sp, #4]
    9700:	683b      	ldr	r3, [r7, #0]
    9702:	9300      	str	r3, [sp, #0]
    9704:	0023      	movs	r3, r4
    9706:	f7ff fea5 	bl	9454 <GHASH>
        wc_AesEncrypt(aes, initialCounter, scratch);
    970a:	2310      	movs	r3, #16
    970c:	18fa      	adds	r2, r7, r3
    970e:	2320      	movs	r3, #32
    9710:	18f9      	adds	r1, r7, r3
    9712:	68fb      	ldr	r3, [r7, #12]
    9714:	0018      	movs	r0, r3
    9716:	f7fe facb 	bl	7cb0 <wc_AesEncrypt>
        xorbuf(authTag, scratch, authTagSz);
    971a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    971c:	2310      	movs	r3, #16
    971e:	18f9      	adds	r1, r7, r3
    9720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    9722:	0018      	movs	r0, r3
    9724:	f7fe fa2a 	bl	7b7c <xorbuf>
    }

    return ret;
    9728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
    972a:	0018      	movs	r0, r3
    972c:	46bd      	mov	sp, r7
    972e:	b017      	add	sp, #92	; 0x5c
    9730:	bd90      	pop	{r4, r7, pc}
    9732:	46c0      	nop			; (mov r8, r8)

00009734 <wc_AesGcmEncrypt>:
/* Software AES - GCM Encrypt */
int wc_AesGcmEncrypt(Aes* aes, byte* out, const byte* in, word32 sz,
                   const byte* iv, word32 ivSz,
                   byte* authTag, word32 authTagSz,
                   const byte* authIn, word32 authInSz)
{
    9734:	b590      	push	{r4, r7, lr}
    9736:	b08b      	sub	sp, #44	; 0x2c
    9738:	af06      	add	r7, sp, #24
    973a:	60f8      	str	r0, [r7, #12]
    973c:	60b9      	str	r1, [r7, #8]
    973e:	607a      	str	r2, [r7, #4]
    9740:	603b      	str	r3, [r7, #0]
    /* argument checks */
    if (aes == NULL || authTagSz > AES_BLOCK_SIZE) {
    9742:	68fb      	ldr	r3, [r7, #12]
    9744:	2b00      	cmp	r3, #0
    9746:	d002      	beq.n	974e <wc_AesGcmEncrypt+0x1a>
    9748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    974a:	2b10      	cmp	r3, #16
    974c:	d902      	bls.n	9754 <wc_AesGcmEncrypt+0x20>
        return BAD_FUNC_ARG;
    974e:	23ad      	movs	r3, #173	; 0xad
    9750:	425b      	negs	r3, r3
    9752:	e019      	b.n	9788 <wc_AesGcmEncrypt+0x54>
    }

    if (authTagSz < WOLFSSL_MIN_AUTH_TAG_SZ) {
    9754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9756:	2b0b      	cmp	r3, #11
    9758:	d802      	bhi.n	9760 <wc_AesGcmEncrypt+0x2c>
        WOLFSSL_MSG("GcmEncrypt authTagSz too small error");
        return BAD_FUNC_ARG;
    975a:	23ad      	movs	r3, #173	; 0xad
    975c:	425b      	negs	r3, r3
    975e:	e013      	b.n	9788 <wc_AesGcmEncrypt+0x54>
        return 0;
    }
    else
#endif
    {
        return AES_GCM_encrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
    9760:	683c      	ldr	r4, [r7, #0]
    9762:	687a      	ldr	r2, [r7, #4]
    9764:	68b9      	ldr	r1, [r7, #8]
    9766:	68f8      	ldr	r0, [r7, #12]
    9768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    976a:	9305      	str	r3, [sp, #20]
    976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    976e:	9304      	str	r3, [sp, #16]
    9770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9772:	9303      	str	r3, [sp, #12]
    9774:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9776:	9302      	str	r3, [sp, #8]
    9778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    977a:	9301      	str	r3, [sp, #4]
    977c:	6a3b      	ldr	r3, [r7, #32]
    977e:	9300      	str	r3, [sp, #0]
    9780:	0023      	movs	r3, r4
    9782:	f7ff ff2b 	bl	95dc <AES_GCM_encrypt_C>
    9786:	0003      	movs	r3, r0
                                                              authIn, authInSz);
    }
}
    9788:	0018      	movs	r0, r3
    978a:	46bd      	mov	sp, r7
    978c:	b005      	add	sp, #20
    978e:	bd90      	pop	{r4, r7, pc}

00009790 <AES_GCM_decrypt_C>:
#endif
int AES_GCM_decrypt_C(Aes* aes, byte* out, const byte* in, word32 sz,
                      const byte* iv, word32 ivSz,
                      const byte* authTag, word32 authTagSz,
                      const byte* authIn, word32 authInSz)
{
    9790:	b590      	push	{r4, r7, lr}
    9792:	b0a3      	sub	sp, #140	; 0x8c
    9794:	af04      	add	r7, sp, #16
    9796:	60f8      	str	r0, [r7, #12]
    9798:	60b9      	str	r1, [r7, #8]
    979a:	607a      	str	r2, [r7, #4]
    979c:	603b      	str	r3, [r7, #0]
    int ret = 0;
    979e:	2300      	movs	r3, #0
    97a0:	66bb      	str	r3, [r7, #104]	; 0x68
    word32 blocks = sz / AES_BLOCK_SIZE;
    97a2:	683b      	ldr	r3, [r7, #0]
    97a4:	091b      	lsrs	r3, r3, #4
    97a6:	677b      	str	r3, [r7, #116]	; 0x74
    word32 partial = sz % AES_BLOCK_SIZE;
    97a8:	683b      	ldr	r3, [r7, #0]
    97aa:	220f      	movs	r2, #15
    97ac:	4013      	ands	r3, r2
    97ae:	667b      	str	r3, [r7, #100]	; 0x64
    const byte* c = in;
    97b0:	687b      	ldr	r3, [r7, #4]
    97b2:	673b      	str	r3, [r7, #112]	; 0x70
    byte* p = out;
    97b4:	68bb      	ldr	r3, [r7, #8]
    97b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    byte *ctr;
    byte scratch[AES_BLOCK_SIZE];
    byte Tprime[AES_BLOCK_SIZE];
    byte EKY0[AES_BLOCK_SIZE];

    ctr = counter;
    97b8:	2350      	movs	r3, #80	; 0x50
    97ba:	18fb      	adds	r3, r7, r3
    97bc:	663b      	str	r3, [r7, #96]	; 0x60
    XMEMSET(initialCounter, 0, AES_BLOCK_SIZE);
    97be:	2340      	movs	r3, #64	; 0x40
    97c0:	18fb      	adds	r3, r7, r3
    97c2:	2210      	movs	r2, #16
    97c4:	2100      	movs	r1, #0
    97c6:	0018      	movs	r0, r3
    97c8:	f01b ffaf 	bl	2572a <memset>
    if (ivSz == GCM_NONCE_MID_SZ) {
    97cc:	238c      	movs	r3, #140	; 0x8c
    97ce:	18fb      	adds	r3, r7, r3
    97d0:	681b      	ldr	r3, [r3, #0]
    97d2:	2b0c      	cmp	r3, #12
    97d4:	d10f      	bne.n	97f6 <AES_GCM_decrypt_C+0x66>
        XMEMCPY(initialCounter, iv, ivSz);
    97d6:	238c      	movs	r3, #140	; 0x8c
    97d8:	18fb      	adds	r3, r7, r3
    97da:	681a      	ldr	r2, [r3, #0]
    97dc:	2388      	movs	r3, #136	; 0x88
    97de:	18fb      	adds	r3, r7, r3
    97e0:	6819      	ldr	r1, [r3, #0]
    97e2:	2340      	movs	r3, #64	; 0x40
    97e4:	18fb      	adds	r3, r7, r3
    97e6:	0018      	movs	r0, r3
    97e8:	f01b ff81 	bl	256ee <memcpy>
        initialCounter[AES_BLOCK_SIZE - 1] = 1;
    97ec:	2340      	movs	r3, #64	; 0x40
    97ee:	18fb      	adds	r3, r7, r3
    97f0:	2201      	movs	r2, #1
    97f2:	73da      	strb	r2, [r3, #15]
    97f4:	e011      	b.n	981a <AES_GCM_decrypt_C+0x8a>
    }
    else {
        GHASH(aes, NULL, 0, iv, ivSz, initialCounter, AES_BLOCK_SIZE);
    97f6:	2388      	movs	r3, #136	; 0x88
    97f8:	18fb      	adds	r3, r7, r3
    97fa:	681a      	ldr	r2, [r3, #0]
    97fc:	68f8      	ldr	r0, [r7, #12]
    97fe:	2310      	movs	r3, #16
    9800:	9302      	str	r3, [sp, #8]
    9802:	2340      	movs	r3, #64	; 0x40
    9804:	18fb      	adds	r3, r7, r3
    9806:	9301      	str	r3, [sp, #4]
    9808:	238c      	movs	r3, #140	; 0x8c
    980a:	18fb      	adds	r3, r7, r3
    980c:	681b      	ldr	r3, [r3, #0]
    980e:	9300      	str	r3, [sp, #0]
    9810:	0013      	movs	r3, r2
    9812:	2200      	movs	r2, #0
    9814:	2100      	movs	r1, #0
    9816:	f7ff fe1d 	bl	9454 <GHASH>
    }
    XMEMCPY(ctr, initialCounter, AES_BLOCK_SIZE);
    981a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    981c:	2340      	movs	r3, #64	; 0x40
    981e:	18fb      	adds	r3, r7, r3
    9820:	0010      	movs	r0, r2
    9822:	0019      	movs	r1, r3
    9824:	2310      	movs	r3, #16
    9826:	001a      	movs	r2, r3
    9828:	f01b ff61 	bl	256ee <memcpy>

    /* Calc the authTag again using the received auth data and the cipher text */
    GHASH(aes, authIn, authInSz, in, sz, Tprime, sizeof(Tprime));
    982c:	687c      	ldr	r4, [r7, #4]
    982e:	239c      	movs	r3, #156	; 0x9c
    9830:	18fb      	adds	r3, r7, r3
    9832:	681a      	ldr	r2, [r3, #0]
    9834:	2398      	movs	r3, #152	; 0x98
    9836:	18fb      	adds	r3, r7, r3
    9838:	6819      	ldr	r1, [r3, #0]
    983a:	68f8      	ldr	r0, [r7, #12]
    983c:	2310      	movs	r3, #16
    983e:	9302      	str	r3, [sp, #8]
    9840:	2320      	movs	r3, #32
    9842:	18fb      	adds	r3, r7, r3
    9844:	9301      	str	r3, [sp, #4]
    9846:	683b      	ldr	r3, [r7, #0]
    9848:	9300      	str	r3, [sp, #0]
    984a:	0023      	movs	r3, r4
    984c:	f7ff fe02 	bl	9454 <GHASH>
    wc_AesEncrypt(aes, ctr, EKY0);
    9850:	2310      	movs	r3, #16
    9852:	18fa      	adds	r2, r7, r3
    9854:	6e39      	ldr	r1, [r7, #96]	; 0x60
    9856:	68fb      	ldr	r3, [r7, #12]
    9858:	0018      	movs	r0, r3
    985a:	f7fe fa29 	bl	7cb0 <wc_AesEncrypt>
    xorbuf(Tprime, EKY0, sizeof(Tprime));
    985e:	2310      	movs	r3, #16
    9860:	18f9      	adds	r1, r7, r3
    9862:	2320      	movs	r3, #32
    9864:	18fb      	adds	r3, r7, r3
    9866:	2210      	movs	r2, #16
    9868:	0018      	movs	r0, r3
    986a:	f7fe f987 	bl	7b7c <xorbuf>

    if (ConstantCompare(authTag, Tprime, authTagSz) != 0) {
    986e:	2394      	movs	r3, #148	; 0x94
    9870:	18fb      	adds	r3, r7, r3
    9872:	681a      	ldr	r2, [r3, #0]
    9874:	2320      	movs	r3, #32
    9876:	18f9      	adds	r1, r7, r3
    9878:	2390      	movs	r3, #144	; 0x90
    987a:	18fb      	adds	r3, r7, r3
    987c:	681b      	ldr	r3, [r3, #0]
    987e:	0018      	movs	r0, r3
    9880:	f7fe f9c8 	bl	7c14 <ConstantCompare>
    9884:	1e03      	subs	r3, r0, #0
    9886:	d023      	beq.n	98d0 <AES_GCM_decrypt_C+0x140>
        return AES_GCM_AUTH_E;
    9888:	23b4      	movs	r3, #180	; 0xb4
    988a:	425b      	negs	r3, r3
    988c:	e042      	b.n	9914 <AES_GCM_decrypt_C+0x184>
        c += AES_BLOCK_SIZE * blocks;
    }
    else
#endif /* HAVE_AES_ECB && !PIC32MZ */
    while (blocks--) {
        IncrementGcmCounter(ctr);
    988e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9890:	0018      	movs	r0, r3
    9892:	f7ff fcb3 	bl	91fc <IncrementGcmCounter>
    #if !defined(WOLFSSL_PIC32MZ_CRYPT)
        wc_AesEncrypt(aes, ctr, scratch);
    9896:	2330      	movs	r3, #48	; 0x30
    9898:	18fa      	adds	r2, r7, r3
    989a:	6e39      	ldr	r1, [r7, #96]	; 0x60
    989c:	68fb      	ldr	r3, [r7, #12]
    989e:	0018      	movs	r0, r3
    98a0:	f7fe fa06 	bl	7cb0 <wc_AesEncrypt>
        xorbuf(scratch, c, AES_BLOCK_SIZE);
    98a4:	6f39      	ldr	r1, [r7, #112]	; 0x70
    98a6:	2330      	movs	r3, #48	; 0x30
    98a8:	18fb      	adds	r3, r7, r3
    98aa:	2210      	movs	r2, #16
    98ac:	0018      	movs	r0, r3
    98ae:	f7fe f965 	bl	7b7c <xorbuf>
        XMEMCPY(p, scratch, AES_BLOCK_SIZE);
    98b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    98b4:	2330      	movs	r3, #48	; 0x30
    98b6:	18fb      	adds	r3, r7, r3
    98b8:	0010      	movs	r0, r2
    98ba:	0019      	movs	r1, r3
    98bc:	2310      	movs	r3, #16
    98be:	001a      	movs	r2, r3
    98c0:	f01b ff15 	bl	256ee <memcpy>
    #endif
        p += AES_BLOCK_SIZE;
    98c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    98c6:	3310      	adds	r3, #16
    98c8:	66fb      	str	r3, [r7, #108]	; 0x6c
        c += AES_BLOCK_SIZE;
    98ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    98cc:	3310      	adds	r3, #16
    98ce:	673b      	str	r3, [r7, #112]	; 0x70
        xorbuf(out, c, AES_BLOCK_SIZE * blocks);
        c += AES_BLOCK_SIZE * blocks;
    }
    else
#endif /* HAVE_AES_ECB && !PIC32MZ */
    while (blocks--) {
    98d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    98d2:	1e5a      	subs	r2, r3, #1
    98d4:	677a      	str	r2, [r7, #116]	; 0x74
    98d6:	2b00      	cmp	r3, #0
    98d8:	d1d9      	bne.n	988e <AES_GCM_decrypt_C+0xfe>
    #endif
        p += AES_BLOCK_SIZE;
        c += AES_BLOCK_SIZE;
    }

    if (partial != 0) {
    98da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    98dc:	2b00      	cmp	r3, #0
    98de:	d018      	beq.n	9912 <AES_GCM_decrypt_C+0x182>
        IncrementGcmCounter(ctr);
    98e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    98e2:	0018      	movs	r0, r3
    98e4:	f7ff fc8a 	bl	91fc <IncrementGcmCounter>
        wc_AesEncrypt(aes, ctr, scratch);
    98e8:	2330      	movs	r3, #48	; 0x30
    98ea:	18fa      	adds	r2, r7, r3
    98ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
    98ee:	68fb      	ldr	r3, [r7, #12]
    98f0:	0018      	movs	r0, r3
    98f2:	f7fe f9dd 	bl	7cb0 <wc_AesEncrypt>
        xorbuf(scratch, c, partial);
    98f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    98f8:	6f39      	ldr	r1, [r7, #112]	; 0x70
    98fa:	2330      	movs	r3, #48	; 0x30
    98fc:	18fb      	adds	r3, r7, r3
    98fe:	0018      	movs	r0, r3
    9900:	f7fe f93c 	bl	7b7c <xorbuf>
        XMEMCPY(p, scratch, partial);
    9904:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    9906:	2330      	movs	r3, #48	; 0x30
    9908:	18f9      	adds	r1, r7, r3
    990a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    990c:	0018      	movs	r0, r3
    990e:	f01b feee 	bl	256ee <memcpy>
    }

    return ret;
    9912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
    9914:	0018      	movs	r0, r3
    9916:	46bd      	mov	sp, r7
    9918:	b01f      	add	sp, #124	; 0x7c
    991a:	bd90      	pop	{r4, r7, pc}

0000991c <wc_AesGcmDecrypt>:
/* Software AES - GCM Decrypt */
int wc_AesGcmDecrypt(Aes* aes, byte* out, const byte* in, word32 sz,
                     const byte* iv, word32 ivSz,
                     const byte* authTag, word32 authTagSz,
                     const byte* authIn, word32 authInSz)
{
    991c:	b590      	push	{r4, r7, lr}
    991e:	b08b      	sub	sp, #44	; 0x2c
    9920:	af06      	add	r7, sp, #24
    9922:	60f8      	str	r0, [r7, #12]
    9924:	60b9      	str	r1, [r7, #8]
    9926:	607a      	str	r2, [r7, #4]
    9928:	603b      	str	r3, [r7, #0]
#endif

    /* argument checks */
    /* If the sz is non-zero, both in and out must be set. If sz is 0,
     * in and out are don't cares, as this is is the GMAC case. */
    if (aes == NULL || iv == NULL || (sz != 0 && (in == NULL || out == NULL)) ||
    992a:	68fb      	ldr	r3, [r7, #12]
    992c:	2b00      	cmp	r3, #0
    992e:	d014      	beq.n	995a <wc_AesGcmDecrypt+0x3e>
    9930:	6a3b      	ldr	r3, [r7, #32]
    9932:	2b00      	cmp	r3, #0
    9934:	d011      	beq.n	995a <wc_AesGcmDecrypt+0x3e>
    9936:	683b      	ldr	r3, [r7, #0]
    9938:	2b00      	cmp	r3, #0
    993a:	d005      	beq.n	9948 <wc_AesGcmDecrypt+0x2c>
    993c:	687b      	ldr	r3, [r7, #4]
    993e:	2b00      	cmp	r3, #0
    9940:	d00b      	beq.n	995a <wc_AesGcmDecrypt+0x3e>
    9942:	68bb      	ldr	r3, [r7, #8]
    9944:	2b00      	cmp	r3, #0
    9946:	d008      	beq.n	995a <wc_AesGcmDecrypt+0x3e>
    9948:	6abb      	ldr	r3, [r7, #40]	; 0x28
    994a:	2b00      	cmp	r3, #0
    994c:	d005      	beq.n	995a <wc_AesGcmDecrypt+0x3e>
        authTag == NULL || authTagSz > AES_BLOCK_SIZE || authTagSz == 0) {
    994e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9950:	2b10      	cmp	r3, #16
    9952:	d802      	bhi.n	995a <wc_AesGcmDecrypt+0x3e>
    9954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9956:	2b00      	cmp	r3, #0
    9958:	d102      	bne.n	9960 <wc_AesGcmDecrypt+0x44>

        return BAD_FUNC_ARG;
    995a:	23ad      	movs	r3, #173	; 0xad
    995c:	425b      	negs	r3, r3
    995e:	e013      	b.n	9988 <wc_AesGcmDecrypt+0x6c>
        return 0;
    }
    else
#endif
    {
        return AES_GCM_decrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
    9960:	683c      	ldr	r4, [r7, #0]
    9962:	687a      	ldr	r2, [r7, #4]
    9964:	68b9      	ldr	r1, [r7, #8]
    9966:	68f8      	ldr	r0, [r7, #12]
    9968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    996a:	9305      	str	r3, [sp, #20]
    996c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    996e:	9304      	str	r3, [sp, #16]
    9970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9972:	9303      	str	r3, [sp, #12]
    9974:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9976:	9302      	str	r3, [sp, #8]
    9978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    997a:	9301      	str	r3, [sp, #4]
    997c:	6a3b      	ldr	r3, [r7, #32]
    997e:	9300      	str	r3, [sp, #0]
    9980:	0023      	movs	r3, r4
    9982:	f7ff ff05 	bl	9790 <AES_GCM_decrypt_C>
    9986:	0003      	movs	r3, r0
                                                              authIn, authInSz);
    }
}
    9988:	0018      	movs	r0, r3
    998a:	46bd      	mov	sp, r7
    998c:	b005      	add	sp, #20
    998e:	bd90      	pop	{r4, r7, pc}

00009990 <wc_AesGcmSetIV>:


int wc_AesGcmSetIV(Aes* aes, word32 ivSz,
                   const byte* ivFixed, word32 ivFixedSz,
                   WC_RNG* rng)
{
    9990:	b580      	push	{r7, lr}
    9992:	b086      	sub	sp, #24
    9994:	af00      	add	r7, sp, #0
    9996:	60f8      	str	r0, [r7, #12]
    9998:	60b9      	str	r1, [r7, #8]
    999a:	607a      	str	r2, [r7, #4]
    999c:	603b      	str	r3, [r7, #0]
    int ret = 0;
    999e:	2300      	movs	r3, #0
    99a0:	617b      	str	r3, [r7, #20]

    if (aes == NULL || rng == NULL ||
    99a2:	68fb      	ldr	r3, [r7, #12]
    99a4:	2b00      	cmp	r3, #0
    99a6:	d017      	beq.n	99d8 <wc_AesGcmSetIV+0x48>
    99a8:	6a3b      	ldr	r3, [r7, #32]
    99aa:	2b00      	cmp	r3, #0
    99ac:	d014      	beq.n	99d8 <wc_AesGcmSetIV+0x48>
    99ae:	68bb      	ldr	r3, [r7, #8]
    99b0:	2b08      	cmp	r3, #8
    99b2:	d005      	beq.n	99c0 <wc_AesGcmSetIV+0x30>
        (ivSz != GCM_NONCE_MIN_SZ && ivSz != GCM_NONCE_MID_SZ &&
    99b4:	68bb      	ldr	r3, [r7, #8]
    99b6:	2b0c      	cmp	r3, #12
    99b8:	d002      	beq.n	99c0 <wc_AesGcmSetIV+0x30>
    99ba:	68bb      	ldr	r3, [r7, #8]
    99bc:	2b10      	cmp	r3, #16
    99be:	d10b      	bne.n	99d8 <wc_AesGcmSetIV+0x48>
         ivSz != GCM_NONCE_MAX_SZ) ||
    99c0:	687b      	ldr	r3, [r7, #4]
    99c2:	2b00      	cmp	r3, #0
    99c4:	d102      	bne.n	99cc <wc_AesGcmSetIV+0x3c>
        (ivFixed == NULL && ivFixedSz != 0) ||
    99c6:	683b      	ldr	r3, [r7, #0]
    99c8:	2b00      	cmp	r3, #0
    99ca:	d105      	bne.n	99d8 <wc_AesGcmSetIV+0x48>
    99cc:	687b      	ldr	r3, [r7, #4]
    99ce:	2b00      	cmp	r3, #0
    99d0:	d005      	beq.n	99de <wc_AesGcmSetIV+0x4e>
        (ivFixed != NULL && ivFixedSz != AES_IV_FIXED_SZ)) {
    99d2:	683b      	ldr	r3, [r7, #0]
    99d4:	2b04      	cmp	r3, #4
    99d6:	d002      	beq.n	99de <wc_AesGcmSetIV+0x4e>

        ret = BAD_FUNC_ARG;
    99d8:	23ad      	movs	r3, #173	; 0xad
    99da:	425b      	negs	r3, r3
    99dc:	617b      	str	r3, [r7, #20]
    }

    if (ret == 0) {
    99de:	697b      	ldr	r3, [r7, #20]
    99e0:	2b00      	cmp	r3, #0
    99e2:	d117      	bne.n	9a14 <wc_AesGcmSetIV+0x84>
        byte* iv = (byte*)aes->reg;
    99e4:	68fb      	ldr	r3, [r7, #12]
    99e6:	33f8      	adds	r3, #248	; 0xf8
    99e8:	613b      	str	r3, [r7, #16]

        if (ivFixedSz)
    99ea:	683b      	ldr	r3, [r7, #0]
    99ec:	2b00      	cmp	r3, #0
    99ee:	d005      	beq.n	99fc <wc_AesGcmSetIV+0x6c>
            XMEMCPY(iv, ivFixed, ivFixedSz);
    99f0:	683a      	ldr	r2, [r7, #0]
    99f2:	6879      	ldr	r1, [r7, #4]
    99f4:	693b      	ldr	r3, [r7, #16]
    99f6:	0018      	movs	r0, r3
    99f8:	f01b fe79 	bl	256ee <memcpy>

        ret = wc_RNG_GenerateBlock(rng, iv + ivFixedSz, ivSz - ivFixedSz);
    99fc:	693a      	ldr	r2, [r7, #16]
    99fe:	683b      	ldr	r3, [r7, #0]
    9a00:	18d1      	adds	r1, r2, r3
    9a02:	68ba      	ldr	r2, [r7, #8]
    9a04:	683b      	ldr	r3, [r7, #0]
    9a06:	1ad2      	subs	r2, r2, r3
    9a08:	6a3b      	ldr	r3, [r7, #32]
    9a0a:	0018      	movs	r0, r3
    9a0c:	f7fb fd14 	bl	5438 <wc_RNG_GenerateBlock>
    9a10:	0003      	movs	r3, r0
    9a12:	617b      	str	r3, [r7, #20]
    }

    if (ret == 0) {
    9a14:	697b      	ldr	r3, [r7, #20]
    9a16:	2b00      	cmp	r3, #0
    9a18:	d114      	bne.n	9a44 <wc_AesGcmSetIV+0xb4>
        /* If the IV is 96, allow for a 2^64 invocation counter.
         * For any other size for the nonce, limit the invocation
         * counter to 32-bits. (SP 800-38D 8.3) */
        aes->invokeCtr[0] = 0;
    9a1a:	68fa      	ldr	r2, [r7, #12]
    9a1c:	238c      	movs	r3, #140	; 0x8c
    9a1e:	005b      	lsls	r3, r3, #1
    9a20:	2100      	movs	r1, #0
    9a22:	50d1      	str	r1, [r2, r3]
        aes->invokeCtr[1] = (ivSz == GCM_NONCE_MID_SZ) ? 0 : 0xFFFFFFFF;
    9a24:	68bb      	ldr	r3, [r7, #8]
    9a26:	2b0c      	cmp	r3, #12
    9a28:	d101      	bne.n	9a2e <wc_AesGcmSetIV+0x9e>
    9a2a:	2300      	movs	r3, #0
    9a2c:	e001      	b.n	9a32 <wc_AesGcmSetIV+0xa2>
    9a2e:	2301      	movs	r3, #1
    9a30:	425b      	negs	r3, r3
    9a32:	68f9      	ldr	r1, [r7, #12]
    9a34:	228e      	movs	r2, #142	; 0x8e
    9a36:	0052      	lsls	r2, r2, #1
    9a38:	508b      	str	r3, [r1, r2]
        aes->nonceSz = ivSz;
    9a3a:	68fa      	ldr	r2, [r7, #12]
    9a3c:	2390      	movs	r3, #144	; 0x90
    9a3e:	005b      	lsls	r3, r3, #1
    9a40:	68b9      	ldr	r1, [r7, #8]
    9a42:	50d1      	str	r1, [r2, r3]
    }

    return ret;
    9a44:	697b      	ldr	r3, [r7, #20]
}
    9a46:	0018      	movs	r0, r3
    9a48:	46bd      	mov	sp, r7
    9a4a:	b006      	add	sp, #24
    9a4c:	bd80      	pop	{r7, pc}
    9a4e:	46c0      	nop			; (mov r8, r8)

00009a50 <wc_AesGcmEncrypt_ex>:

int wc_AesGcmEncrypt_ex(Aes* aes, byte* out, const byte* in, word32 sz,
                        byte* ivOut, word32 ivOutSz,
                        byte* authTag, word32 authTagSz,
                        const byte* authIn, word32 authInSz)
{
    9a50:	b5b0      	push	{r4, r5, r7, lr}
    9a52:	b08c      	sub	sp, #48	; 0x30
    9a54:	af06      	add	r7, sp, #24
    9a56:	60f8      	str	r0, [r7, #12]
    9a58:	60b9      	str	r1, [r7, #8]
    9a5a:	607a      	str	r2, [r7, #4]
    9a5c:	603b      	str	r3, [r7, #0]
    int ret = 0;
    9a5e:	2300      	movs	r3, #0
    9a60:	617b      	str	r3, [r7, #20]

    if (aes == NULL || (sz != 0 && (in == NULL || out == NULL)) ||
    9a62:	68fb      	ldr	r3, [r7, #12]
    9a64:	2b00      	cmp	r3, #0
    9a66:	d018      	beq.n	9a9a <wc_AesGcmEncrypt_ex+0x4a>
    9a68:	683b      	ldr	r3, [r7, #0]
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	d005      	beq.n	9a7a <wc_AesGcmEncrypt_ex+0x2a>
    9a6e:	687b      	ldr	r3, [r7, #4]
    9a70:	2b00      	cmp	r3, #0
    9a72:	d012      	beq.n	9a9a <wc_AesGcmEncrypt_ex+0x4a>
    9a74:	68bb      	ldr	r3, [r7, #8]
    9a76:	2b00      	cmp	r3, #0
    9a78:	d00f      	beq.n	9a9a <wc_AesGcmEncrypt_ex+0x4a>
    9a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	d00c      	beq.n	9a9a <wc_AesGcmEncrypt_ex+0x4a>
        ivOut == NULL || ivOutSz != aes->nonceSz ||
    9a80:	68fa      	ldr	r2, [r7, #12]
    9a82:	2390      	movs	r3, #144	; 0x90
    9a84:	005b      	lsls	r3, r3, #1
    9a86:	58d2      	ldr	r2, [r2, r3]
    9a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9a8a:	429a      	cmp	r2, r3
    9a8c:	d105      	bne.n	9a9a <wc_AesGcmEncrypt_ex+0x4a>
    9a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9a90:	2b00      	cmp	r3, #0
    9a92:	d105      	bne.n	9aa0 <wc_AesGcmEncrypt_ex+0x50>
        (authIn == NULL && authInSz != 0)) {
    9a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9a96:	2b00      	cmp	r3, #0
    9a98:	d002      	beq.n	9aa0 <wc_AesGcmEncrypt_ex+0x50>

        ret = BAD_FUNC_ARG;
    9a9a:	23ad      	movs	r3, #173	; 0xad
    9a9c:	425b      	negs	r3, r3
    9a9e:	617b      	str	r3, [r7, #20]
    }

    if (ret == 0) {
    9aa0:	697b      	ldr	r3, [r7, #20]
    9aa2:	2b00      	cmp	r3, #0
    9aa4:	d11f      	bne.n	9ae6 <wc_AesGcmEncrypt_ex+0x96>
        aes->invokeCtr[0]++;
    9aa6:	68fa      	ldr	r2, [r7, #12]
    9aa8:	238c      	movs	r3, #140	; 0x8c
    9aaa:	005b      	lsls	r3, r3, #1
    9aac:	58d3      	ldr	r3, [r2, r3]
    9aae:	1c59      	adds	r1, r3, #1
    9ab0:	68fa      	ldr	r2, [r7, #12]
    9ab2:	238c      	movs	r3, #140	; 0x8c
    9ab4:	005b      	lsls	r3, r3, #1
    9ab6:	50d1      	str	r1, [r2, r3]
        if (aes->invokeCtr[0] == 0) {
    9ab8:	68fa      	ldr	r2, [r7, #12]
    9aba:	238c      	movs	r3, #140	; 0x8c
    9abc:	005b      	lsls	r3, r3, #1
    9abe:	58d3      	ldr	r3, [r2, r3]
    9ac0:	2b00      	cmp	r3, #0
    9ac2:	d110      	bne.n	9ae6 <wc_AesGcmEncrypt_ex+0x96>
            aes->invokeCtr[1]++;
    9ac4:	68fa      	ldr	r2, [r7, #12]
    9ac6:	238e      	movs	r3, #142	; 0x8e
    9ac8:	005b      	lsls	r3, r3, #1
    9aca:	58d3      	ldr	r3, [r2, r3]
    9acc:	1c59      	adds	r1, r3, #1
    9ace:	68fa      	ldr	r2, [r7, #12]
    9ad0:	238e      	movs	r3, #142	; 0x8e
    9ad2:	005b      	lsls	r3, r3, #1
    9ad4:	50d1      	str	r1, [r2, r3]
            if (aes->invokeCtr[1] == 0)
    9ad6:	68fa      	ldr	r2, [r7, #12]
    9ad8:	238e      	movs	r3, #142	; 0x8e
    9ada:	005b      	lsls	r3, r3, #1
    9adc:	58d3      	ldr	r3, [r2, r3]
    9ade:	2b00      	cmp	r3, #0
    9ae0:	d101      	bne.n	9ae6 <wc_AesGcmEncrypt_ex+0x96>
                ret = AES_GCM_OVERFLOW_E;
    9ae2:	4b19      	ldr	r3, [pc, #100]	; (9b48 <wc_AesGcmEncrypt_ex+0xf8>)
    9ae4:	617b      	str	r3, [r7, #20]
        }
    }

    if (ret == 0) {
    9ae6:	697b      	ldr	r3, [r7, #20]
    9ae8:	2b00      	cmp	r3, #0
    9aea:	d128      	bne.n	9b3e <wc_AesGcmEncrypt_ex+0xee>
        XMEMCPY(ivOut, aes->reg, ivOutSz);
    9aec:	68fb      	ldr	r3, [r7, #12]
    9aee:	33f8      	adds	r3, #248	; 0xf8
    9af0:	0019      	movs	r1, r3
    9af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9af6:	0018      	movs	r0, r3
    9af8:	f01b fdf9 	bl	256ee <memcpy>
        ret = wc_AesGcmEncrypt(aes, out, in, sz,
                               (byte*)aes->reg, ivOutSz,
    9afc:	68fb      	ldr	r3, [r7, #12]
    9afe:	33f8      	adds	r3, #248	; 0xf8
        }
    }

    if (ret == 0) {
        XMEMCPY(ivOut, aes->reg, ivOutSz);
        ret = wc_AesGcmEncrypt(aes, out, in, sz,
    9b00:	683d      	ldr	r5, [r7, #0]
    9b02:	687c      	ldr	r4, [r7, #4]
    9b04:	68b9      	ldr	r1, [r7, #8]
    9b06:	68f8      	ldr	r0, [r7, #12]
    9b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9b0a:	9205      	str	r2, [sp, #20]
    9b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    9b0e:	9204      	str	r2, [sp, #16]
    9b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9b12:	9203      	str	r2, [sp, #12]
    9b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    9b16:	9202      	str	r2, [sp, #8]
    9b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9b1a:	9201      	str	r2, [sp, #4]
    9b1c:	9300      	str	r3, [sp, #0]
    9b1e:	002b      	movs	r3, r5
    9b20:	0022      	movs	r2, r4
    9b22:	f7ff fe07 	bl	9734 <wc_AesGcmEncrypt>
    9b26:	0003      	movs	r3, r0
    9b28:	617b      	str	r3, [r7, #20]
                               (byte*)aes->reg, ivOutSz,
                               authTag, authTagSz,
                               authIn, authInSz);
        if (ret == 0)
    9b2a:	697b      	ldr	r3, [r7, #20]
    9b2c:	2b00      	cmp	r3, #0
    9b2e:	d106      	bne.n	9b3e <wc_AesGcmEncrypt_ex+0xee>
            IncCtr((byte*)aes->reg, ivOutSz);
    9b30:	68fb      	ldr	r3, [r7, #12]
    9b32:	33f8      	adds	r3, #248	; 0xf8
    9b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9b36:	0011      	movs	r1, r2
    9b38:	0018      	movs	r0, r3
    9b3a:	f7ff fb3f 	bl	91bc <IncCtr>
    }

    return ret;
    9b3e:	697b      	ldr	r3, [r7, #20]
}
    9b40:	0018      	movs	r0, r3
    9b42:	46bd      	mov	sp, r7
    9b44:	b006      	add	sp, #24
    9b46:	bdb0      	pop	{r4, r5, r7, pc}
    9b48:	fffffefc 	.word	0xfffffefc

00009b4c <wc_Gmac>:

int wc_Gmac(const byte* key, word32 keySz, byte* iv, word32 ivSz,
            const byte* authIn, word32 authInSz,
            byte* authTag, word32 authTagSz, WC_RNG* rng)
{
    9b4c:	b580      	push	{r7, lr}
    9b4e:	b0da      	sub	sp, #360	; 0x168
    9b50:	af06      	add	r7, sp, #24
    9b52:	60f8      	str	r0, [r7, #12]
    9b54:	60b9      	str	r1, [r7, #8]
    9b56:	607a      	str	r2, [r7, #4]
    9b58:	603b      	str	r3, [r7, #0]
    Aes aes;
    int ret;

    if (key == NULL || iv == NULL || (authIn == NULL && authInSz != 0) ||
    9b5a:	68fb      	ldr	r3, [r7, #12]
    9b5c:	2b00      	cmp	r3, #0
    9b5e:	d020      	beq.n	9ba2 <wc_Gmac+0x56>
    9b60:	687b      	ldr	r3, [r7, #4]
    9b62:	2b00      	cmp	r3, #0
    9b64:	d01d      	beq.n	9ba2 <wc_Gmac+0x56>
    9b66:	23ac      	movs	r3, #172	; 0xac
    9b68:	005b      	lsls	r3, r3, #1
    9b6a:	18fb      	adds	r3, r7, r3
    9b6c:	681b      	ldr	r3, [r3, #0]
    9b6e:	2b00      	cmp	r3, #0
    9b70:	d105      	bne.n	9b7e <wc_Gmac+0x32>
    9b72:	23ae      	movs	r3, #174	; 0xae
    9b74:	005b      	lsls	r3, r3, #1
    9b76:	18fb      	adds	r3, r7, r3
    9b78:	681b      	ldr	r3, [r3, #0]
    9b7a:	2b00      	cmp	r3, #0
    9b7c:	d111      	bne.n	9ba2 <wc_Gmac+0x56>
    9b7e:	23b0      	movs	r3, #176	; 0xb0
    9b80:	005b      	lsls	r3, r3, #1
    9b82:	18fb      	adds	r3, r7, r3
    9b84:	681b      	ldr	r3, [r3, #0]
    9b86:	2b00      	cmp	r3, #0
    9b88:	d00b      	beq.n	9ba2 <wc_Gmac+0x56>
        authTag == NULL || authTagSz == 0 || rng == NULL) {
    9b8a:	23b2      	movs	r3, #178	; 0xb2
    9b8c:	005b      	lsls	r3, r3, #1
    9b8e:	18fb      	adds	r3, r7, r3
    9b90:	681b      	ldr	r3, [r3, #0]
    9b92:	2b00      	cmp	r3, #0
    9b94:	d005      	beq.n	9ba2 <wc_Gmac+0x56>
    9b96:	23b4      	movs	r3, #180	; 0xb4
    9b98:	005b      	lsls	r3, r3, #1
    9b9a:	18fb      	adds	r3, r7, r3
    9b9c:	681b      	ldr	r3, [r3, #0]
    9b9e:	2b00      	cmp	r3, #0
    9ba0:	d102      	bne.n	9ba8 <wc_Gmac+0x5c>

        return BAD_FUNC_ARG;
    9ba2:	23ad      	movs	r3, #173	; 0xad
    9ba4:	425b      	negs	r3, r3
    9ba6:	e070      	b.n	9c8a <wc_Gmac+0x13e>
    }

    ret = wc_AesInit(&aes, NULL, INVALID_DEVID);
    9ba8:	2302      	movs	r3, #2
    9baa:	425a      	negs	r2, r3
    9bac:	2314      	movs	r3, #20
    9bae:	18fb      	adds	r3, r7, r3
    9bb0:	2100      	movs	r1, #0
    9bb2:	0018      	movs	r0, r3
    9bb4:	f000 f932 	bl	9e1c <wc_AesInit>
    9bb8:	0003      	movs	r3, r0
    9bba:	22a6      	movs	r2, #166	; 0xa6
    9bbc:	0052      	lsls	r2, r2, #1
    9bbe:	18ba      	adds	r2, r7, r2
    9bc0:	6013      	str	r3, [r2, #0]
    if (ret == 0) {
    9bc2:	23a6      	movs	r3, #166	; 0xa6
    9bc4:	005b      	lsls	r3, r3, #1
    9bc6:	18fb      	adds	r3, r7, r3
    9bc8:	681b      	ldr	r3, [r3, #0]
    9bca:	2b00      	cmp	r3, #0
    9bcc:	d151      	bne.n	9c72 <wc_Gmac+0x126>
        ret = wc_AesGcmSetKey(&aes, key, keySz);
    9bce:	68ba      	ldr	r2, [r7, #8]
    9bd0:	68f9      	ldr	r1, [r7, #12]
    9bd2:	2314      	movs	r3, #20
    9bd4:	18fb      	adds	r3, r7, r3
    9bd6:	0018      	movs	r0, r3
    9bd8:	f7ff fbae 	bl	9338 <wc_AesGcmSetKey>
    9bdc:	0003      	movs	r3, r0
    9bde:	22a6      	movs	r2, #166	; 0xa6
    9be0:	0052      	lsls	r2, r2, #1
    9be2:	18ba      	adds	r2, r7, r2
    9be4:	6013      	str	r3, [r2, #0]
        if (ret == 0)
    9be6:	23a6      	movs	r3, #166	; 0xa6
    9be8:	005b      	lsls	r3, r3, #1
    9bea:	18fb      	adds	r3, r7, r3
    9bec:	681b      	ldr	r3, [r3, #0]
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d110      	bne.n	9c14 <wc_Gmac+0xc8>
            ret = wc_AesGcmSetIV(&aes, ivSz, NULL, 0, rng);
    9bf2:	6839      	ldr	r1, [r7, #0]
    9bf4:	2314      	movs	r3, #20
    9bf6:	18f8      	adds	r0, r7, r3
    9bf8:	23b4      	movs	r3, #180	; 0xb4
    9bfa:	005b      	lsls	r3, r3, #1
    9bfc:	18fb      	adds	r3, r7, r3
    9bfe:	681b      	ldr	r3, [r3, #0]
    9c00:	9300      	str	r3, [sp, #0]
    9c02:	2300      	movs	r3, #0
    9c04:	2200      	movs	r2, #0
    9c06:	f7ff fec3 	bl	9990 <wc_AesGcmSetIV>
    9c0a:	0003      	movs	r3, r0
    9c0c:	22a6      	movs	r2, #166	; 0xa6
    9c0e:	0052      	lsls	r2, r2, #1
    9c10:	18ba      	adds	r2, r7, r2
    9c12:	6013      	str	r3, [r2, #0]
        if (ret == 0)
    9c14:	23a6      	movs	r3, #166	; 0xa6
    9c16:	005b      	lsls	r3, r3, #1
    9c18:	18fb      	adds	r3, r7, r3
    9c1a:	681b      	ldr	r3, [r3, #0]
    9c1c:	2b00      	cmp	r3, #0
    9c1e:	d123      	bne.n	9c68 <wc_Gmac+0x11c>
            ret = wc_AesGcmEncrypt_ex(&aes, NULL, NULL, 0, iv, ivSz,
    9c20:	2314      	movs	r3, #20
    9c22:	18f8      	adds	r0, r7, r3
    9c24:	23ae      	movs	r3, #174	; 0xae
    9c26:	005b      	lsls	r3, r3, #1
    9c28:	18fb      	adds	r3, r7, r3
    9c2a:	681b      	ldr	r3, [r3, #0]
    9c2c:	9305      	str	r3, [sp, #20]
    9c2e:	23ac      	movs	r3, #172	; 0xac
    9c30:	005b      	lsls	r3, r3, #1
    9c32:	18fb      	adds	r3, r7, r3
    9c34:	681b      	ldr	r3, [r3, #0]
    9c36:	9304      	str	r3, [sp, #16]
    9c38:	23b2      	movs	r3, #178	; 0xb2
    9c3a:	005b      	lsls	r3, r3, #1
    9c3c:	18fb      	adds	r3, r7, r3
    9c3e:	681b      	ldr	r3, [r3, #0]
    9c40:	9303      	str	r3, [sp, #12]
    9c42:	23b0      	movs	r3, #176	; 0xb0
    9c44:	005b      	lsls	r3, r3, #1
    9c46:	18fb      	adds	r3, r7, r3
    9c48:	681b      	ldr	r3, [r3, #0]
    9c4a:	9302      	str	r3, [sp, #8]
    9c4c:	683b      	ldr	r3, [r7, #0]
    9c4e:	9301      	str	r3, [sp, #4]
    9c50:	687b      	ldr	r3, [r7, #4]
    9c52:	9300      	str	r3, [sp, #0]
    9c54:	2300      	movs	r3, #0
    9c56:	2200      	movs	r2, #0
    9c58:	2100      	movs	r1, #0
    9c5a:	f7ff fef9 	bl	9a50 <wc_AesGcmEncrypt_ex>
    9c5e:	0003      	movs	r3, r0
    9c60:	22a6      	movs	r2, #166	; 0xa6
    9c62:	0052      	lsls	r2, r2, #1
    9c64:	18ba      	adds	r2, r7, r2
    9c66:	6013      	str	r3, [r2, #0]
                                  authTag, authTagSz, authIn, authInSz);
        wc_AesFree(&aes);
    9c68:	2314      	movs	r3, #20
    9c6a:	18fb      	adds	r3, r7, r3
    9c6c:	0018      	movs	r0, r3
    9c6e:	f000 f8ed 	bl	9e4c <wc_AesFree>
    }
    ForceZero(&aes, sizeof(aes));
    9c72:	239c      	movs	r3, #156	; 0x9c
    9c74:	005a      	lsls	r2, r3, #1
    9c76:	2314      	movs	r3, #20
    9c78:	18fb      	adds	r3, r7, r3
    9c7a:	0011      	movs	r1, r2
    9c7c:	0018      	movs	r0, r3
    9c7e:	f7fd ffb3 	bl	7be8 <ForceZero>

    return ret;
    9c82:	23a6      	movs	r3, #166	; 0xa6
    9c84:	005b      	lsls	r3, r3, #1
    9c86:	18fb      	adds	r3, r7, r3
    9c88:	681b      	ldr	r3, [r3, #0]
}
    9c8a:	0018      	movs	r0, r3
    9c8c:	46bd      	mov	sp, r7
    9c8e:	b054      	add	sp, #336	; 0x150
    9c90:	bd80      	pop	{r7, pc}
    9c92:	46c0      	nop			; (mov r8, r8)

00009c94 <wc_GmacVerify>:

int wc_GmacVerify(const byte* key, word32 keySz,
                  const byte* iv, word32 ivSz,
                  const byte* authIn, word32 authInSz,
                  const byte* authTag, word32 authTagSz)
{
    9c94:	b580      	push	{r7, lr}
    9c96:	b0da      	sub	sp, #360	; 0x168
    9c98:	af06      	add	r7, sp, #24
    9c9a:	60f8      	str	r0, [r7, #12]
    9c9c:	60b9      	str	r1, [r7, #8]
    9c9e:	607a      	str	r2, [r7, #4]
    9ca0:	603b      	str	r3, [r7, #0]
    int ret;
#ifndef NO_AES_DECRYPT
    Aes aes;

    if (key == NULL || iv == NULL || (authIn == NULL && authInSz != 0) ||
    9ca2:	68fb      	ldr	r3, [r7, #12]
    9ca4:	2b00      	cmp	r3, #0
    9ca6:	d020      	beq.n	9cea <wc_GmacVerify+0x56>
    9ca8:	687b      	ldr	r3, [r7, #4]
    9caa:	2b00      	cmp	r3, #0
    9cac:	d01d      	beq.n	9cea <wc_GmacVerify+0x56>
    9cae:	23ac      	movs	r3, #172	; 0xac
    9cb0:	005b      	lsls	r3, r3, #1
    9cb2:	18fb      	adds	r3, r7, r3
    9cb4:	681b      	ldr	r3, [r3, #0]
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	d105      	bne.n	9cc6 <wc_GmacVerify+0x32>
    9cba:	23ae      	movs	r3, #174	; 0xae
    9cbc:	005b      	lsls	r3, r3, #1
    9cbe:	18fb      	adds	r3, r7, r3
    9cc0:	681b      	ldr	r3, [r3, #0]
    9cc2:	2b00      	cmp	r3, #0
    9cc4:	d111      	bne.n	9cea <wc_GmacVerify+0x56>
    9cc6:	23b0      	movs	r3, #176	; 0xb0
    9cc8:	005b      	lsls	r3, r3, #1
    9cca:	18fb      	adds	r3, r7, r3
    9ccc:	681b      	ldr	r3, [r3, #0]
    9cce:	2b00      	cmp	r3, #0
    9cd0:	d00b      	beq.n	9cea <wc_GmacVerify+0x56>
        authTag == NULL || authTagSz == 0 || authTagSz > AES_BLOCK_SIZE) {
    9cd2:	23b2      	movs	r3, #178	; 0xb2
    9cd4:	005b      	lsls	r3, r3, #1
    9cd6:	18fb      	adds	r3, r7, r3
    9cd8:	681b      	ldr	r3, [r3, #0]
    9cda:	2b00      	cmp	r3, #0
    9cdc:	d005      	beq.n	9cea <wc_GmacVerify+0x56>
    9cde:	23b2      	movs	r3, #178	; 0xb2
    9ce0:	005b      	lsls	r3, r3, #1
    9ce2:	18fb      	adds	r3, r7, r3
    9ce4:	681b      	ldr	r3, [r3, #0]
    9ce6:	2b10      	cmp	r3, #16
    9ce8:	d902      	bls.n	9cf0 <wc_GmacVerify+0x5c>

        return BAD_FUNC_ARG;
    9cea:	23ad      	movs	r3, #173	; 0xad
    9cec:	425b      	negs	r3, r3
    9cee:	e059      	b.n	9da4 <wc_GmacVerify+0x110>
    }

    ret = wc_AesInit(&aes, NULL, INVALID_DEVID);
    9cf0:	2302      	movs	r3, #2
    9cf2:	425a      	negs	r2, r3
    9cf4:	2314      	movs	r3, #20
    9cf6:	18fb      	adds	r3, r7, r3
    9cf8:	2100      	movs	r1, #0
    9cfa:	0018      	movs	r0, r3
    9cfc:	f000 f88e 	bl	9e1c <wc_AesInit>
    9d00:	0003      	movs	r3, r0
    9d02:	22a6      	movs	r2, #166	; 0xa6
    9d04:	0052      	lsls	r2, r2, #1
    9d06:	18ba      	adds	r2, r7, r2
    9d08:	6013      	str	r3, [r2, #0]
    if (ret == 0) {
    9d0a:	23a6      	movs	r3, #166	; 0xa6
    9d0c:	005b      	lsls	r3, r3, #1
    9d0e:	18fb      	adds	r3, r7, r3
    9d10:	681b      	ldr	r3, [r3, #0]
    9d12:	2b00      	cmp	r3, #0
    9d14:	d13a      	bne.n	9d8c <wc_GmacVerify+0xf8>
        ret = wc_AesGcmSetKey(&aes, key, keySz);
    9d16:	68ba      	ldr	r2, [r7, #8]
    9d18:	68f9      	ldr	r1, [r7, #12]
    9d1a:	2314      	movs	r3, #20
    9d1c:	18fb      	adds	r3, r7, r3
    9d1e:	0018      	movs	r0, r3
    9d20:	f7ff fb0a 	bl	9338 <wc_AesGcmSetKey>
    9d24:	0003      	movs	r3, r0
    9d26:	22a6      	movs	r2, #166	; 0xa6
    9d28:	0052      	lsls	r2, r2, #1
    9d2a:	18ba      	adds	r2, r7, r2
    9d2c:	6013      	str	r3, [r2, #0]
        if (ret == 0)
    9d2e:	23a6      	movs	r3, #166	; 0xa6
    9d30:	005b      	lsls	r3, r3, #1
    9d32:	18fb      	adds	r3, r7, r3
    9d34:	681b      	ldr	r3, [r3, #0]
    9d36:	2b00      	cmp	r3, #0
    9d38:	d123      	bne.n	9d82 <wc_GmacVerify+0xee>
            ret = wc_AesGcmDecrypt(&aes, NULL, NULL, 0, iv, ivSz,
    9d3a:	2314      	movs	r3, #20
    9d3c:	18f8      	adds	r0, r7, r3
    9d3e:	23ae      	movs	r3, #174	; 0xae
    9d40:	005b      	lsls	r3, r3, #1
    9d42:	18fb      	adds	r3, r7, r3
    9d44:	681b      	ldr	r3, [r3, #0]
    9d46:	9305      	str	r3, [sp, #20]
    9d48:	23ac      	movs	r3, #172	; 0xac
    9d4a:	005b      	lsls	r3, r3, #1
    9d4c:	18fb      	adds	r3, r7, r3
    9d4e:	681b      	ldr	r3, [r3, #0]
    9d50:	9304      	str	r3, [sp, #16]
    9d52:	23b2      	movs	r3, #178	; 0xb2
    9d54:	005b      	lsls	r3, r3, #1
    9d56:	18fb      	adds	r3, r7, r3
    9d58:	681b      	ldr	r3, [r3, #0]
    9d5a:	9303      	str	r3, [sp, #12]
    9d5c:	23b0      	movs	r3, #176	; 0xb0
    9d5e:	005b      	lsls	r3, r3, #1
    9d60:	18fb      	adds	r3, r7, r3
    9d62:	681b      	ldr	r3, [r3, #0]
    9d64:	9302      	str	r3, [sp, #8]
    9d66:	683b      	ldr	r3, [r7, #0]
    9d68:	9301      	str	r3, [sp, #4]
    9d6a:	687b      	ldr	r3, [r7, #4]
    9d6c:	9300      	str	r3, [sp, #0]
    9d6e:	2300      	movs	r3, #0
    9d70:	2200      	movs	r2, #0
    9d72:	2100      	movs	r1, #0
    9d74:	f7ff fdd2 	bl	991c <wc_AesGcmDecrypt>
    9d78:	0003      	movs	r3, r0
    9d7a:	22a6      	movs	r2, #166	; 0xa6
    9d7c:	0052      	lsls	r2, r2, #1
    9d7e:	18ba      	adds	r2, r7, r2
    9d80:	6013      	str	r3, [r2, #0]
                                  authTag, authTagSz, authIn, authInSz);
        wc_AesFree(&aes);
    9d82:	2314      	movs	r3, #20
    9d84:	18fb      	adds	r3, r7, r3
    9d86:	0018      	movs	r0, r3
    9d88:	f000 f860 	bl	9e4c <wc_AesFree>
    }
    ForceZero(&aes, sizeof(aes));
    9d8c:	239c      	movs	r3, #156	; 0x9c
    9d8e:	005a      	lsls	r2, r3, #1
    9d90:	2314      	movs	r3, #20
    9d92:	18fb      	adds	r3, r7, r3
    9d94:	0011      	movs	r1, r2
    9d96:	0018      	movs	r0, r3
    9d98:	f7fd ff26 	bl	7be8 <ForceZero>
    (void)authInSz;
    (void)authTag;
    (void)authTagSz;
    ret = NOT_COMPILED_IN;
#endif
    return ret;
    9d9c:	23a6      	movs	r3, #166	; 0xa6
    9d9e:	005b      	lsls	r3, r3, #1
    9da0:	18fb      	adds	r3, r7, r3
    9da2:	681b      	ldr	r3, [r3, #0]
}
    9da4:	0018      	movs	r0, r3
    9da6:	46bd      	mov	sp, r7
    9da8:	b054      	add	sp, #336	; 0x150
    9daa:	bd80      	pop	{r7, pc}

00009dac <wc_GmacSetKey>:

#endif /* WC_NO_RNG */


WOLFSSL_API int wc_GmacSetKey(Gmac* gmac, const byte* key, word32 len)
{
    9dac:	b580      	push	{r7, lr}
    9dae:	b084      	sub	sp, #16
    9db0:	af00      	add	r7, sp, #0
    9db2:	60f8      	str	r0, [r7, #12]
    9db4:	60b9      	str	r1, [r7, #8]
    9db6:	607a      	str	r2, [r7, #4]
    if (gmac == NULL || key == NULL) {
    9db8:	68fb      	ldr	r3, [r7, #12]
    9dba:	2b00      	cmp	r3, #0
    9dbc:	d002      	beq.n	9dc4 <wc_GmacSetKey+0x18>
    9dbe:	68bb      	ldr	r3, [r7, #8]
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d102      	bne.n	9dca <wc_GmacSetKey+0x1e>
        return BAD_FUNC_ARG;
    9dc4:	23ad      	movs	r3, #173	; 0xad
    9dc6:	425b      	negs	r3, r3
    9dc8:	e006      	b.n	9dd8 <wc_GmacSetKey+0x2c>
    }
    return wc_AesGcmSetKey(&gmac->aes, key, len);
    9dca:	68fb      	ldr	r3, [r7, #12]
    9dcc:	687a      	ldr	r2, [r7, #4]
    9dce:	68b9      	ldr	r1, [r7, #8]
    9dd0:	0018      	movs	r0, r3
    9dd2:	f7ff fab1 	bl	9338 <wc_AesGcmSetKey>
    9dd6:	0003      	movs	r3, r0
}
    9dd8:	0018      	movs	r0, r3
    9dda:	46bd      	mov	sp, r7
    9ddc:	b004      	add	sp, #16
    9dde:	bd80      	pop	{r7, pc}

00009de0 <wc_GmacUpdate>:


WOLFSSL_API int wc_GmacUpdate(Gmac* gmac, const byte* iv, word32 ivSz,
                              const byte* authIn, word32 authInSz,
                              byte* authTag, word32 authTagSz)
{
    9de0:	b580      	push	{r7, lr}
    9de2:	b08a      	sub	sp, #40	; 0x28
    9de4:	af06      	add	r7, sp, #24
    9de6:	60f8      	str	r0, [r7, #12]
    9de8:	60b9      	str	r1, [r7, #8]
    9dea:	607a      	str	r2, [r7, #4]
    9dec:	603b      	str	r3, [r7, #0]
    return wc_AesGcmEncrypt(&gmac->aes, NULL, NULL, 0, iv, ivSz,
    9dee:	68f8      	ldr	r0, [r7, #12]
    9df0:	69bb      	ldr	r3, [r7, #24]
    9df2:	9305      	str	r3, [sp, #20]
    9df4:	683b      	ldr	r3, [r7, #0]
    9df6:	9304      	str	r3, [sp, #16]
    9df8:	6a3b      	ldr	r3, [r7, #32]
    9dfa:	9303      	str	r3, [sp, #12]
    9dfc:	69fb      	ldr	r3, [r7, #28]
    9dfe:	9302      	str	r3, [sp, #8]
    9e00:	687b      	ldr	r3, [r7, #4]
    9e02:	9301      	str	r3, [sp, #4]
    9e04:	68bb      	ldr	r3, [r7, #8]
    9e06:	9300      	str	r3, [sp, #0]
    9e08:	2300      	movs	r3, #0
    9e0a:	2200      	movs	r2, #0
    9e0c:	2100      	movs	r1, #0
    9e0e:	f7ff fc91 	bl	9734 <wc_AesGcmEncrypt>
    9e12:	0003      	movs	r3, r0
                                         authTag, authTagSz, authIn, authInSz);
}
    9e14:	0018      	movs	r0, r3
    9e16:	46bd      	mov	sp, r7
    9e18:	b004      	add	sp, #16
    9e1a:	bd80      	pop	{r7, pc}

00009e1c <wc_AesInit>:
#endif /* HAVE_AESCCM */


/* Initialize Aes for use with async hardware */
int wc_AesInit(Aes* aes, void* heap, int devId)
{
    9e1c:	b580      	push	{r7, lr}
    9e1e:	b086      	sub	sp, #24
    9e20:	af00      	add	r7, sp, #0
    9e22:	60f8      	str	r0, [r7, #12]
    9e24:	60b9      	str	r1, [r7, #8]
    9e26:	607a      	str	r2, [r7, #4]
    int ret = 0;
    9e28:	2300      	movs	r3, #0
    9e2a:	617b      	str	r3, [r7, #20]

    if (aes == NULL)
    9e2c:	68fb      	ldr	r3, [r7, #12]
    9e2e:	2b00      	cmp	r3, #0
    9e30:	d102      	bne.n	9e38 <wc_AesInit+0x1c>
        return BAD_FUNC_ARG;
    9e32:	23ad      	movs	r3, #173	; 0xad
    9e34:	425b      	negs	r3, r3
    9e36:	e005      	b.n	9e44 <wc_AesInit+0x28>

    aes->heap = heap;
    9e38:	68fa      	ldr	r2, [r7, #12]
    9e3a:	239a      	movs	r3, #154	; 0x9a
    9e3c:	005b      	lsls	r3, r3, #1
    9e3e:	68b9      	ldr	r1, [r7, #8]
    9e40:	50d1      	str	r1, [r2, r3]
#if defined(WOLFSSL_DEVCRYPTO) && \
   (defined(WOLFSSL_DEVCRYPTO_AES) || defined(WOLFSSL_DEVCRYPTO_CBC))
    aes->ctx.cfd = -1;
#endif

    return ret;
    9e42:	697b      	ldr	r3, [r7, #20]
}
    9e44:	0018      	movs	r0, r3
    9e46:	46bd      	mov	sp, r7
    9e48:	b006      	add	sp, #24
    9e4a:	bd80      	pop	{r7, pc}

00009e4c <wc_AesFree>:
}
#endif

/* Free Aes from use with async hardware */
void wc_AesFree(Aes* aes)
{
    9e4c:	b580      	push	{r7, lr}
    9e4e:	b082      	sub	sp, #8
    9e50:	af00      	add	r7, sp, #0
    9e52:	6078      	str	r0, [r7, #4]
#endif
#if defined(WOLF_CRYPTO_CB) || (defined(WOLFSSL_DEVCRYPTO) && \
    (defined(WOLFSSL_DEVCRYPTO_AES) || defined(WOLFSSL_DEVCRYPTO_CBC)))
    ForceZero((byte*)aes->devKey, AES_MAX_KEY_SIZE/WOLFSSL_BIT_SIZE);
#endif
}
    9e54:	46bd      	mov	sp, r7
    9e56:	b002      	add	sp, #8
    9e58:	bd80      	pop	{r7, pc}
    9e5a:	46c0      	nop			; (mov r8, r8)

00009e5c <wc_AesGetKeySize>:


int wc_AesGetKeySize(Aes* aes, word32* keySize)
{
    9e5c:	b580      	push	{r7, lr}
    9e5e:	b084      	sub	sp, #16
    9e60:	af00      	add	r7, sp, #0
    9e62:	6078      	str	r0, [r7, #4]
    9e64:	6039      	str	r1, [r7, #0]
    int ret = 0;
    9e66:	2300      	movs	r3, #0
    9e68:	60fb      	str	r3, [r7, #12]

    if (aes == NULL || keySize == NULL) {
    9e6a:	687b      	ldr	r3, [r7, #4]
    9e6c:	2b00      	cmp	r3, #0
    9e6e:	d002      	beq.n	9e76 <wc_AesGetKeySize+0x1a>
    9e70:	683b      	ldr	r3, [r7, #0]
    9e72:	2b00      	cmp	r3, #0
    9e74:	d102      	bne.n	9e7c <wc_AesGetKeySize+0x20>
        return BAD_FUNC_ARG;
    9e76:	23ad      	movs	r3, #173	; 0xad
    9e78:	425b      	negs	r3, r3
    9e7a:	e01b      	b.n	9eb4 <wc_AesGetKeySize+0x58>
    }

    switch (aes->rounds) {
    9e7c:	687b      	ldr	r3, [r7, #4]
    9e7e:	22f0      	movs	r2, #240	; 0xf0
    9e80:	589b      	ldr	r3, [r3, r2]
    9e82:	2b0c      	cmp	r3, #12
    9e84:	d007      	beq.n	9e96 <wc_AesGetKeySize+0x3a>
    9e86:	2b0e      	cmp	r3, #14
    9e88:	d009      	beq.n	9e9e <wc_AesGetKeySize+0x42>
    9e8a:	2b0a      	cmp	r3, #10
    9e8c:	d10b      	bne.n	9ea6 <wc_AesGetKeySize+0x4a>
#ifdef WOLFSSL_AES_128
    case 10:
        *keySize = 16;
    9e8e:	683b      	ldr	r3, [r7, #0]
    9e90:	2210      	movs	r2, #16
    9e92:	601a      	str	r2, [r3, #0]
        break;
    9e94:	e00d      	b.n	9eb2 <wc_AesGetKeySize+0x56>
#endif
#ifdef WOLFSSL_AES_192
    case 12:
        *keySize = 24;
    9e96:	683b      	ldr	r3, [r7, #0]
    9e98:	2218      	movs	r2, #24
    9e9a:	601a      	str	r2, [r3, #0]
        break;
    9e9c:	e009      	b.n	9eb2 <wc_AesGetKeySize+0x56>
#endif
#ifdef WOLFSSL_AES_256
    case 14:
        *keySize = 32;
    9e9e:	683b      	ldr	r3, [r7, #0]
    9ea0:	2220      	movs	r2, #32
    9ea2:	601a      	str	r2, [r3, #0]
        break;
    9ea4:	e005      	b.n	9eb2 <wc_AesGetKeySize+0x56>
#endif
    default:
        *keySize = 0;
    9ea6:	683b      	ldr	r3, [r7, #0]
    9ea8:	2200      	movs	r2, #0
    9eaa:	601a      	str	r2, [r3, #0]
        ret = BAD_FUNC_ARG;
    9eac:	23ad      	movs	r3, #173	; 0xad
    9eae:	425b      	negs	r3, r3
    9eb0:	60fb      	str	r3, [r7, #12]
    }

    return ret;
    9eb2:	68fb      	ldr	r3, [r7, #12]
}
    9eb4:	0018      	movs	r0, r3
    9eb6:	46bd      	mov	sp, r7
    9eb8:	b004      	add	sp, #16
    9eba:	bd80      	pop	{r7, pc}

00009ebc <wc_HmacSizeByType>:

#else /* else build without fips, or for new fips */


int wc_HmacSizeByType(int type)
{
    9ebc:	b580      	push	{r7, lr}
    9ebe:	b084      	sub	sp, #16
    9ec0:	af00      	add	r7, sp, #0
    9ec2:	6078      	str	r0, [r7, #4]
    int ret;

    if (!(type == WC_MD5 || type == WC_SHA ||
    9ec4:	687b      	ldr	r3, [r7, #4]
    9ec6:	2b03      	cmp	r3, #3
    9ec8:	d020      	beq.n	9f0c <wc_HmacSizeByType+0x50>
    9eca:	687b      	ldr	r3, [r7, #4]
    9ecc:	2b04      	cmp	r3, #4
    9ece:	d01d      	beq.n	9f0c <wc_HmacSizeByType+0x50>
    9ed0:	687b      	ldr	r3, [r7, #4]
    9ed2:	2b05      	cmp	r3, #5
    9ed4:	d01a      	beq.n	9f0c <wc_HmacSizeByType+0x50>
            type == WC_SHA224 || type == WC_SHA256 ||
    9ed6:	687b      	ldr	r3, [r7, #4]
    9ed8:	2b06      	cmp	r3, #6
    9eda:	d017      	beq.n	9f0c <wc_HmacSizeByType+0x50>
    9edc:	687b      	ldr	r3, [r7, #4]
    9ede:	2b07      	cmp	r3, #7
    9ee0:	d014      	beq.n	9f0c <wc_HmacSizeByType+0x50>
            type == WC_SHA384 || type == WC_SHA512 ||
    9ee2:	687b      	ldr	r3, [r7, #4]
    9ee4:	2b08      	cmp	r3, #8
    9ee6:	d011      	beq.n	9f0c <wc_HmacSizeByType+0x50>
    9ee8:	687b      	ldr	r3, [r7, #4]
    9eea:	2b0a      	cmp	r3, #10
    9eec:	d00e      	beq.n	9f0c <wc_HmacSizeByType+0x50>
            type == WC_SHA3_224 || type == WC_SHA3_256 ||
    9eee:	687b      	ldr	r3, [r7, #4]
    9ef0:	2b0b      	cmp	r3, #11
    9ef2:	d00b      	beq.n	9f0c <wc_HmacSizeByType+0x50>
    9ef4:	687b      	ldr	r3, [r7, #4]
    9ef6:	2b0c      	cmp	r3, #12
    9ef8:	d008      	beq.n	9f0c <wc_HmacSizeByType+0x50>
            type == WC_SHA3_384 || type == WC_SHA3_512 ||
    9efa:	687b      	ldr	r3, [r7, #4]
    9efc:	2b0d      	cmp	r3, #13
    9efe:	d005      	beq.n	9f0c <wc_HmacSizeByType+0x50>

int wc_HmacSizeByType(int type)
{
    int ret;

    if (!(type == WC_MD5 || type == WC_SHA ||
    9f00:	687b      	ldr	r3, [r7, #4]
    9f02:	2b0e      	cmp	r3, #14
    9f04:	d002      	beq.n	9f0c <wc_HmacSizeByType+0x50>
            type == WC_SHA224 || type == WC_SHA256 ||
            type == WC_SHA384 || type == WC_SHA512 ||
            type == WC_SHA3_224 || type == WC_SHA3_256 ||
            type == WC_SHA3_384 || type == WC_SHA3_512 ||
            type == BLAKE2B_ID)) {
        return BAD_FUNC_ARG;
    9f06:	23ad      	movs	r3, #173	; 0xad
    9f08:	425b      	negs	r3, r3
    9f0a:	e010      	b.n	9f2e <wc_HmacSizeByType+0x72>
    }

    switch (type) {
    9f0c:	687b      	ldr	r3, [r7, #4]
    9f0e:	2b04      	cmp	r3, #4
    9f10:	d002      	beq.n	9f18 <wc_HmacSizeByType+0x5c>
    9f12:	2b06      	cmp	r3, #6
    9f14:	d003      	beq.n	9f1e <wc_HmacSizeByType+0x62>
    9f16:	e005      	b.n	9f24 <wc_HmacSizeByType+0x68>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            ret = WC_SHA_DIGEST_SIZE;
    9f18:	2314      	movs	r3, #20
    9f1a:	60fb      	str	r3, [r7, #12]
            break;
    9f1c:	e006      	b.n	9f2c <wc_HmacSizeByType+0x70>
            break;
    #endif /* WOLFSSL_SHA224 */

    #ifndef NO_SHA256
        case WC_SHA256:
            ret = WC_SHA256_DIGEST_SIZE;
    9f1e:	2320      	movs	r3, #32
    9f20:	60fb      	str	r3, [r7, #12]
            break;
    9f22:	e003      	b.n	9f2c <wc_HmacSizeByType+0x70>
            break;

    #endif

        default:
            ret = BAD_FUNC_ARG;
    9f24:	23ad      	movs	r3, #173	; 0xad
    9f26:	425b      	negs	r3, r3
    9f28:	60fb      	str	r3, [r7, #12]
            break;
    9f2a:	46c0      	nop			; (mov r8, r8)
    }

    return ret;
    9f2c:	68fb      	ldr	r3, [r7, #12]
}
    9f2e:	0018      	movs	r0, r3
    9f30:	46bd      	mov	sp, r7
    9f32:	b004      	add	sp, #16
    9f34:	bd80      	pop	{r7, pc}
    9f36:	46c0      	nop			; (mov r8, r8)

00009f38 <_InitHmac>:

int _InitHmac(Hmac* hmac, int type, void* heap)
{
    9f38:	b580      	push	{r7, lr}
    9f3a:	b086      	sub	sp, #24
    9f3c:	af00      	add	r7, sp, #0
    9f3e:	60f8      	str	r0, [r7, #12]
    9f40:	60b9      	str	r1, [r7, #8]
    9f42:	607a      	str	r2, [r7, #4]
    int ret = 0;
    9f44:	2300      	movs	r3, #0
    9f46:	617b      	str	r3, [r7, #20]

    switch (type) {
    9f48:	68bb      	ldr	r3, [r7, #8]
    9f4a:	2b04      	cmp	r3, #4
    9f4c:	d002      	beq.n	9f54 <_InitHmac+0x1c>
    9f4e:	2b06      	cmp	r3, #6
    9f50:	d007      	beq.n	9f62 <_InitHmac+0x2a>
    9f52:	e00d      	b.n	9f70 <_InitHmac+0x38>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            ret = wc_InitSha(&hmac->hash.sha);
    9f54:	68fb      	ldr	r3, [r7, #12]
    9f56:	0018      	movs	r0, r3
    9f58:	f002 fc7e 	bl	c858 <wc_InitSha>
    9f5c:	0003      	movs	r3, r0
    9f5e:	617b      	str	r3, [r7, #20]
            break;
    9f60:	e00a      	b.n	9f78 <_InitHmac+0x40>
            break;
    #endif /* WOLFSSL_SHA224 */

    #ifndef NO_SHA256
        case WC_SHA256:
            ret = wc_InitSha256(&hmac->hash.sha256);
    9f62:	68fb      	ldr	r3, [r7, #12]
    9f64:	0018      	movs	r0, r3
    9f66:	f003 fbed 	bl	d744 <wc_InitSha256>
    9f6a:	0003      	movs	r3, r0
    9f6c:	617b      	str	r3, [r7, #20]
            break;
    9f6e:	e003      	b.n	9f78 <_InitHmac+0x40>
            break;
	#endif
    #endif

        default:
            ret = BAD_FUNC_ARG;
    9f70:	23ad      	movs	r3, #173	; 0xad
    9f72:	425b      	negs	r3, r3
    9f74:	617b      	str	r3, [r7, #20]
            break;
    9f76:	46c0      	nop			; (mov r8, r8)

    /* default to NULL heap hint or test value */
#ifdef WOLFSSL_HEAP_TEST
    hmac->heap = (void)WOLFSSL_HEAP_TEST;
#else
    hmac->heap = heap;
    9f78:	68fa      	ldr	r2, [r7, #12]
    9f7a:	2388      	movs	r3, #136	; 0x88
    9f7c:	005b      	lsls	r3, r3, #1
    9f7e:	6879      	ldr	r1, [r7, #4]
    9f80:	50d1      	str	r1, [r2, r3]
#endif /* WOLFSSL_HEAP_TEST */

    return ret;
    9f82:	697b      	ldr	r3, [r7, #20]
}
    9f84:	0018      	movs	r0, r3
    9f86:	46bd      	mov	sp, r7
    9f88:	b006      	add	sp, #24
    9f8a:	bd80      	pop	{r7, pc}

00009f8c <wc_HmacSetKey>:


int wc_HmacSetKey(Hmac* hmac, int type, const byte* key, word32 length)
{
    9f8c:	b580      	push	{r7, lr}
    9f8e:	b08a      	sub	sp, #40	; 0x28
    9f90:	af00      	add	r7, sp, #0
    9f92:	60f8      	str	r0, [r7, #12]
    9f94:	60b9      	str	r1, [r7, #8]
    9f96:	607a      	str	r2, [r7, #4]
    9f98:	603b      	str	r3, [r7, #0]
    byte*  ip;
    byte*  op;
    word32 i, hmac_block_size = 0;
    9f9a:	2300      	movs	r3, #0
    9f9c:	623b      	str	r3, [r7, #32]
    int    ret = 0;
    9f9e:	2300      	movs	r3, #0
    9fa0:	61fb      	str	r3, [r7, #28]
    void*  heap = NULL;
    9fa2:	2300      	movs	r3, #0
    9fa4:	61bb      	str	r3, [r7, #24]

    if (hmac == NULL || (key == NULL && length != 0) ||
    9fa6:	68fb      	ldr	r3, [r7, #12]
    9fa8:	2b00      	cmp	r3, #0
    9faa:	d026      	beq.n	9ffa <wc_HmacSetKey+0x6e>
    9fac:	687b      	ldr	r3, [r7, #4]
    9fae:	2b00      	cmp	r3, #0
    9fb0:	d102      	bne.n	9fb8 <wc_HmacSetKey+0x2c>
    9fb2:	683b      	ldr	r3, [r7, #0]
    9fb4:	2b00      	cmp	r3, #0
    9fb6:	d120      	bne.n	9ffa <wc_HmacSetKey+0x6e>
    9fb8:	68bb      	ldr	r3, [r7, #8]
    9fba:	2b03      	cmp	r3, #3
    9fbc:	d020      	beq.n	a000 <wc_HmacSetKey+0x74>
       !(type == WC_MD5 || type == WC_SHA ||
    9fbe:	68bb      	ldr	r3, [r7, #8]
    9fc0:	2b04      	cmp	r3, #4
    9fc2:	d01d      	beq.n	a000 <wc_HmacSetKey+0x74>
    9fc4:	68bb      	ldr	r3, [r7, #8]
    9fc6:	2b05      	cmp	r3, #5
    9fc8:	d01a      	beq.n	a000 <wc_HmacSetKey+0x74>
            type == WC_SHA224 || type == WC_SHA256 ||
    9fca:	68bb      	ldr	r3, [r7, #8]
    9fcc:	2b06      	cmp	r3, #6
    9fce:	d017      	beq.n	a000 <wc_HmacSetKey+0x74>
    9fd0:	68bb      	ldr	r3, [r7, #8]
    9fd2:	2b07      	cmp	r3, #7
    9fd4:	d014      	beq.n	a000 <wc_HmacSetKey+0x74>
            type == WC_SHA384 || type == WC_SHA512 ||
    9fd6:	68bb      	ldr	r3, [r7, #8]
    9fd8:	2b08      	cmp	r3, #8
    9fda:	d011      	beq.n	a000 <wc_HmacSetKey+0x74>
    9fdc:	68bb      	ldr	r3, [r7, #8]
    9fde:	2b0a      	cmp	r3, #10
    9fe0:	d00e      	beq.n	a000 <wc_HmacSetKey+0x74>
            type == WC_SHA3_224 || type == WC_SHA3_256 ||
    9fe2:	68bb      	ldr	r3, [r7, #8]
    9fe4:	2b0b      	cmp	r3, #11
    9fe6:	d00b      	beq.n	a000 <wc_HmacSetKey+0x74>
    9fe8:	68bb      	ldr	r3, [r7, #8]
    9fea:	2b0c      	cmp	r3, #12
    9fec:	d008      	beq.n	a000 <wc_HmacSetKey+0x74>
            type == WC_SHA3_384 || type == WC_SHA3_512 ||
    9fee:	68bb      	ldr	r3, [r7, #8]
    9ff0:	2b0d      	cmp	r3, #13
    9ff2:	d005      	beq.n	a000 <wc_HmacSetKey+0x74>
    word32 i, hmac_block_size = 0;
    int    ret = 0;
    void*  heap = NULL;

    if (hmac == NULL || (key == NULL && length != 0) ||
       !(type == WC_MD5 || type == WC_SHA ||
    9ff4:	68bb      	ldr	r3, [r7, #8]
    9ff6:	2b0e      	cmp	r3, #14
    9ff8:	d002      	beq.n	a000 <wc_HmacSetKey+0x74>
            type == WC_SHA224 || type == WC_SHA256 ||
            type == WC_SHA384 || type == WC_SHA512 ||
            type == WC_SHA3_224 || type == WC_SHA3_256 ||
            type == WC_SHA3_384 || type == WC_SHA3_512 ||
            type == BLAKE2B_ID)) {
        return BAD_FUNC_ARG;
    9ffa:	23ad      	movs	r3, #173	; 0xad
    9ffc:	425b      	negs	r3, r3
    9ffe:	e0c0      	b.n	a182 <wc_HmacSetKey+0x1f6>
    }

    /* if set key has already been run then make sure and free existing */
    if (hmac->macType != 0) {
    a000:	68fa      	ldr	r2, [r7, #12]
    a002:	238a      	movs	r3, #138	; 0x8a
    a004:	005b      	lsls	r3, r3, #1
    a006:	5cd3      	ldrb	r3, [r2, r3]
    a008:	2b00      	cmp	r3, #0
    a00a:	d003      	beq.n	a014 <wc_HmacSetKey+0x88>
        wc_HmacFree(hmac);
    a00c:	68fb      	ldr	r3, [r7, #12]
    a00e:	0018      	movs	r0, r3
    a010:	f000 f9f0 	bl	a3f4 <wc_HmacFree>
    }

    hmac->innerHashKeyed = 0;
    a014:	68fa      	ldr	r2, [r7, #12]
    a016:	2316      	movs	r3, #22
    a018:	33ff      	adds	r3, #255	; 0xff
    a01a:	2100      	movs	r1, #0
    a01c:	54d1      	strb	r1, [r2, r3]
    hmac->macType = (byte)type;
    a01e:	68bb      	ldr	r3, [r7, #8]
    a020:	b2d9      	uxtb	r1, r3
    a022:	68fa      	ldr	r2, [r7, #12]
    a024:	238a      	movs	r3, #138	; 0x8a
    a026:	005b      	lsls	r3, r3, #1
    a028:	54d1      	strb	r1, [r2, r3]

    ret = _InitHmac(hmac, type, heap);
    a02a:	69ba      	ldr	r2, [r7, #24]
    a02c:	68b9      	ldr	r1, [r7, #8]
    a02e:	68fb      	ldr	r3, [r7, #12]
    a030:	0018      	movs	r0, r3
    a032:	f7ff ff81 	bl	9f38 <_InitHmac>
    a036:	0003      	movs	r3, r0
    a038:	61fb      	str	r3, [r7, #28]
    if (ret != 0)
    a03a:	69fb      	ldr	r3, [r7, #28]
    a03c:	2b00      	cmp	r3, #0
    a03e:	d001      	beq.n	a044 <wc_HmacSetKey+0xb8>
        return ret;
    a040:	69fb      	ldr	r3, [r7, #28]
    a042:	e09e      	b.n	a182 <wc_HmacSetKey+0x1f6>
#ifdef WOLF_CRYPTO_CB
    hmac->keyRaw = key; /* use buffer directly */
    hmac->keyLen = length;
#endif

    ip = (byte*)hmac->ipad;
    a044:	68fb      	ldr	r3, [r7, #12]
    a046:	3370      	adds	r3, #112	; 0x70
    a048:	617b      	str	r3, [r7, #20]
    op = (byte*)hmac->opad;
    a04a:	68fb      	ldr	r3, [r7, #12]
    a04c:	33b0      	adds	r3, #176	; 0xb0
    a04e:	613b      	str	r3, [r7, #16]

    switch (hmac->macType) {
    a050:	68fa      	ldr	r2, [r7, #12]
    a052:	238a      	movs	r3, #138	; 0x8a
    a054:	005b      	lsls	r3, r3, #1
    a056:	5cd3      	ldrb	r3, [r2, r3]
    a058:	2b04      	cmp	r3, #4
    a05a:	d002      	beq.n	a062 <wc_HmacSetKey+0xd6>
    a05c:	2b06      	cmp	r3, #6
    a05e:	d028      	beq.n	a0b2 <wc_HmacSetKey+0x126>
    a060:	e04f      	b.n	a102 <wc_HmacSetKey+0x176>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            hmac_block_size = WC_SHA_BLOCK_SIZE;
    a062:	2340      	movs	r3, #64	; 0x40
    a064:	623b      	str	r3, [r7, #32]
            if (length <= WC_SHA_BLOCK_SIZE) {
    a066:	683b      	ldr	r3, [r7, #0]
    a068:	2b40      	cmp	r3, #64	; 0x40
    a06a:	d809      	bhi.n	a080 <wc_HmacSetKey+0xf4>
                if (key != NULL) {
    a06c:	687b      	ldr	r3, [r7, #4]
    a06e:	2b00      	cmp	r3, #0
    a070:	d04a      	beq.n	a108 <wc_HmacSetKey+0x17c>
                    XMEMCPY(ip, key, length);
    a072:	683a      	ldr	r2, [r7, #0]
    a074:	6879      	ldr	r1, [r7, #4]
    a076:	697b      	ldr	r3, [r7, #20]
    a078:	0018      	movs	r0, r3
    a07a:	f01b fb38 	bl	256ee <memcpy>
                if (ret != 0)
                    break;

                length = WC_SHA_DIGEST_SIZE;
            }
            break;
    a07e:	e043      	b.n	a108 <wc_HmacSetKey+0x17c>
                if (key != NULL) {
                    XMEMCPY(ip, key, length);
                }
            }
            else {
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
    a080:	68fb      	ldr	r3, [r7, #12]
    a082:	683a      	ldr	r2, [r7, #0]
    a084:	6879      	ldr	r1, [r7, #4]
    a086:	0018      	movs	r0, r3
    a088:	f002 fae8 	bl	c65c <wc_ShaUpdate>
    a08c:	0003      	movs	r3, r0
    a08e:	61fb      	str	r3, [r7, #28]
                if (ret != 0)
    a090:	69fb      	ldr	r3, [r7, #28]
    a092:	2b00      	cmp	r3, #0
    a094:	d13a      	bne.n	a10c <wc_HmacSetKey+0x180>
                    break;
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
    a096:	68fb      	ldr	r3, [r7, #12]
    a098:	697a      	ldr	r2, [r7, #20]
    a09a:	0011      	movs	r1, r2
    a09c:	0018      	movs	r0, r3
    a09e:	f002 fb3f 	bl	c720 <wc_ShaFinal>
    a0a2:	0003      	movs	r3, r0
    a0a4:	61fb      	str	r3, [r7, #28]
                if (ret != 0)
    a0a6:	69fb      	ldr	r3, [r7, #28]
    a0a8:	2b00      	cmp	r3, #0
    a0aa:	d131      	bne.n	a110 <wc_HmacSetKey+0x184>
                    break;

                length = WC_SHA_DIGEST_SIZE;
    a0ac:	2314      	movs	r3, #20
    a0ae:	603b      	str	r3, [r7, #0]
            }
            break;
    a0b0:	e02a      	b.n	a108 <wc_HmacSetKey+0x17c>
        break;
    #endif /* WOLFSSL_SHA224 */

    #ifndef NO_SHA256
        case WC_SHA256:
    		hmac_block_size = WC_SHA256_BLOCK_SIZE;
    a0b2:	2340      	movs	r3, #64	; 0x40
    a0b4:	623b      	str	r3, [r7, #32]
            if (length <= WC_SHA256_BLOCK_SIZE) {
    a0b6:	683b      	ldr	r3, [r7, #0]
    a0b8:	2b40      	cmp	r3, #64	; 0x40
    a0ba:	d809      	bhi.n	a0d0 <wc_HmacSetKey+0x144>
                if (key != NULL) {
    a0bc:	687b      	ldr	r3, [r7, #4]
    a0be:	2b00      	cmp	r3, #0
    a0c0:	d028      	beq.n	a114 <wc_HmacSetKey+0x188>
                    XMEMCPY(ip, key, length);
    a0c2:	683a      	ldr	r2, [r7, #0]
    a0c4:	6879      	ldr	r1, [r7, #4]
    a0c6:	697b      	ldr	r3, [r7, #20]
    a0c8:	0018      	movs	r0, r3
    a0ca:	f01b fb10 	bl	256ee <memcpy>
                if (ret != 0)
                    break;

                length = WC_SHA256_DIGEST_SIZE;
            }
            break;
    a0ce:	e021      	b.n	a114 <wc_HmacSetKey+0x188>
                if (key != NULL) {
                    XMEMCPY(ip, key, length);
                }
            }
            else {
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
    a0d0:	68fb      	ldr	r3, [r7, #12]
    a0d2:	683a      	ldr	r2, [r7, #0]
    a0d4:	6879      	ldr	r1, [r7, #4]
    a0d6:	0018      	movs	r0, r3
    a0d8:	f003 fa62 	bl	d5a0 <wc_Sha256Update>
    a0dc:	0003      	movs	r3, r0
    a0de:	61fb      	str	r3, [r7, #28]
                if (ret != 0)
    a0e0:	69fb      	ldr	r3, [r7, #28]
    a0e2:	2b00      	cmp	r3, #0
    a0e4:	d118      	bne.n	a118 <wc_HmacSetKey+0x18c>
                    break;
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
    a0e6:	68fb      	ldr	r3, [r7, #12]
    a0e8:	697a      	ldr	r2, [r7, #20]
    a0ea:	0011      	movs	r1, r2
    a0ec:	0018      	movs	r0, r3
    a0ee:	f003 fafb 	bl	d6e8 <wc_Sha256Final>
    a0f2:	0003      	movs	r3, r0
    a0f4:	61fb      	str	r3, [r7, #28]
                if (ret != 0)
    a0f6:	69fb      	ldr	r3, [r7, #28]
    a0f8:	2b00      	cmp	r3, #0
    a0fa:	d10f      	bne.n	a11c <wc_HmacSetKey+0x190>
                    break;

                length = WC_SHA256_DIGEST_SIZE;
    a0fc:	2320      	movs	r3, #32
    a0fe:	603b      	str	r3, [r7, #0]
            }
            break;
    a100:	e008      	b.n	a114 <wc_HmacSetKey+0x188>
            break;
	#endif
    #endif /* WOLFSSL_SHA3 */

        default:
            return BAD_FUNC_ARG;
    a102:	23ad      	movs	r3, #173	; 0xad
    a104:	425b      	negs	r3, r3
    a106:	e03c      	b.n	a182 <wc_HmacSetKey+0x1f6>
                if (ret != 0)
                    break;

                length = WC_SHA_DIGEST_SIZE;
            }
            break;
    a108:	46c0      	nop			; (mov r8, r8)
    a10a:	e008      	b.n	a11e <wc_HmacSetKey+0x192>
                }
            }
            else {
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
                if (ret != 0)
                    break;
    a10c:	46c0      	nop			; (mov r8, r8)
    a10e:	e006      	b.n	a11e <wc_HmacSetKey+0x192>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
                if (ret != 0)
                    break;
    a110:	46c0      	nop			; (mov r8, r8)
    a112:	e004      	b.n	a11e <wc_HmacSetKey+0x192>
                if (ret != 0)
                    break;

                length = WC_SHA256_DIGEST_SIZE;
            }
            break;
    a114:	46c0      	nop			; (mov r8, r8)
    a116:	e002      	b.n	a11e <wc_HmacSetKey+0x192>
                }
            }
            else {
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
                if (ret != 0)
                    break;
    a118:	46c0      	nop			; (mov r8, r8)
    a11a:	e000      	b.n	a11e <wc_HmacSetKey+0x192>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
                if (ret != 0)
                    break;
    a11c:	46c0      	nop			; (mov r8, r8)
        /* no need to pad below */
    #endif
    }
#endif

    if (ret == 0) {
    a11e:	69fb      	ldr	r3, [r7, #28]
    a120:	2b00      	cmp	r3, #0
    a122:	d12d      	bne.n	a180 <wc_HmacSetKey+0x1f4>
        if (length < hmac_block_size)
    a124:	683a      	ldr	r2, [r7, #0]
    a126:	6a3b      	ldr	r3, [r7, #32]
    a128:	429a      	cmp	r2, r3
    a12a:	d209      	bcs.n	a140 <wc_HmacSetKey+0x1b4>
            XMEMSET(ip + length, 0, hmac_block_size - length);
    a12c:	697a      	ldr	r2, [r7, #20]
    a12e:	683b      	ldr	r3, [r7, #0]
    a130:	18d0      	adds	r0, r2, r3
    a132:	6a3a      	ldr	r2, [r7, #32]
    a134:	683b      	ldr	r3, [r7, #0]
    a136:	1ad3      	subs	r3, r2, r3
    a138:	001a      	movs	r2, r3
    a13a:	2100      	movs	r1, #0
    a13c:	f01b faf5 	bl	2572a <memset>

        for(i = 0; i < hmac_block_size; i++) {
    a140:	2300      	movs	r3, #0
    a142:	627b      	str	r3, [r7, #36]	; 0x24
    a144:	e018      	b.n	a178 <wc_HmacSetKey+0x1ec>
            op[i] = ip[i] ^ OPAD;
    a146:	693a      	ldr	r2, [r7, #16]
    a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a14a:	18d3      	adds	r3, r2, r3
    a14c:	6979      	ldr	r1, [r7, #20]
    a14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a150:	188a      	adds	r2, r1, r2
    a152:	7812      	ldrb	r2, [r2, #0]
    a154:	215c      	movs	r1, #92	; 0x5c
    a156:	404a      	eors	r2, r1
    a158:	b2d2      	uxtb	r2, r2
    a15a:	701a      	strb	r2, [r3, #0]
            ip[i] ^= IPAD;
    a15c:	697a      	ldr	r2, [r7, #20]
    a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a160:	18d3      	adds	r3, r2, r3
    a162:	6979      	ldr	r1, [r7, #20]
    a164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a166:	188a      	adds	r2, r1, r2
    a168:	7812      	ldrb	r2, [r2, #0]
    a16a:	2136      	movs	r1, #54	; 0x36
    a16c:	404a      	eors	r2, r1
    a16e:	b2d2      	uxtb	r2, r2
    a170:	701a      	strb	r2, [r3, #0]

    if (ret == 0) {
        if (length < hmac_block_size)
            XMEMSET(ip + length, 0, hmac_block_size - length);

        for(i = 0; i < hmac_block_size; i++) {
    a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a174:	3301      	adds	r3, #1
    a176:	627b      	str	r3, [r7, #36]	; 0x24
    a178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a17a:	6a3b      	ldr	r3, [r7, #32]
    a17c:	429a      	cmp	r2, r3
    a17e:	d3e2      	bcc.n	a146 <wc_HmacSetKey+0x1ba>
            op[i] = ip[i] ^ OPAD;
            ip[i] ^= IPAD;
        }
    }

    return ret;
    a180:	69fb      	ldr	r3, [r7, #28]
}
    a182:	0018      	movs	r0, r3
    a184:	46bd      	mov	sp, r7
    a186:	b00a      	add	sp, #40	; 0x28
    a188:	bd80      	pop	{r7, pc}
    a18a:	46c0      	nop			; (mov r8, r8)

0000a18c <HmacKeyInnerHash>:


static int HmacKeyInnerHash(Hmac* hmac)
{
    a18c:	b580      	push	{r7, lr}
    a18e:	b084      	sub	sp, #16
    a190:	af00      	add	r7, sp, #0
    a192:	6078      	str	r0, [r7, #4]
    int ret = 0;
    a194:	2300      	movs	r3, #0
    a196:	60fb      	str	r3, [r7, #12]

    switch (hmac->macType) {
    a198:	687a      	ldr	r2, [r7, #4]
    a19a:	238a      	movs	r3, #138	; 0x8a
    a19c:	005b      	lsls	r3, r3, #1
    a19e:	5cd3      	ldrb	r3, [r2, r3]
    a1a0:	2b04      	cmp	r3, #4
    a1a2:	d002      	beq.n	a1aa <HmacKeyInnerHash+0x1e>
    a1a4:	2b06      	cmp	r3, #6
    a1a6:	d00a      	beq.n	a1be <HmacKeyInnerHash+0x32>
            break;
	#endif
    #endif /* WOLFSSL_SHA3 */

        default:
            break;
    a1a8:	e013      	b.n	a1d2 <HmacKeyInnerHash+0x46>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->ipad,
    a1aa:	6878      	ldr	r0, [r7, #4]
    a1ac:	687b      	ldr	r3, [r7, #4]
    a1ae:	3370      	adds	r3, #112	; 0x70
    a1b0:	2240      	movs	r2, #64	; 0x40
    a1b2:	0019      	movs	r1, r3
    a1b4:	f002 fa52 	bl	c65c <wc_ShaUpdate>
    a1b8:	0003      	movs	r3, r0
    a1ba:	60fb      	str	r3, [r7, #12]
                                                             WC_SHA_BLOCK_SIZE);
            break;
    a1bc:	e009      	b.n	a1d2 <HmacKeyInnerHash+0x46>
            break;
    #endif /* WOLFSSL_SHA224 */

    #ifndef NO_SHA256
        case WC_SHA256:
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->ipad,
    a1be:	6878      	ldr	r0, [r7, #4]
    a1c0:	687b      	ldr	r3, [r7, #4]
    a1c2:	3370      	adds	r3, #112	; 0x70
    a1c4:	2240      	movs	r2, #64	; 0x40
    a1c6:	0019      	movs	r1, r3
    a1c8:	f003 f9ea 	bl	d5a0 <wc_Sha256Update>
    a1cc:	0003      	movs	r3, r0
    a1ce:	60fb      	str	r3, [r7, #12]
                                                             WC_SHA256_BLOCK_SIZE);
            break;
    a1d0:	46c0      	nop			; (mov r8, r8)

        default:
            break;
    }

    if (ret == 0)
    a1d2:	68fb      	ldr	r3, [r7, #12]
    a1d4:	2b00      	cmp	r3, #0
    a1d6:	d104      	bne.n	a1e2 <HmacKeyInnerHash+0x56>
        hmac->innerHashKeyed = WC_HMAC_INNER_HASH_KEYED_SW;
    a1d8:	687a      	ldr	r2, [r7, #4]
    a1da:	2316      	movs	r3, #22
    a1dc:	33ff      	adds	r3, #255	; 0xff
    a1de:	2101      	movs	r1, #1
    a1e0:	54d1      	strb	r1, [r2, r3]

    return ret;
    a1e2:	68fb      	ldr	r3, [r7, #12]
}
    a1e4:	0018      	movs	r0, r3
    a1e6:	46bd      	mov	sp, r7
    a1e8:	b004      	add	sp, #16
    a1ea:	bd80      	pop	{r7, pc}

0000a1ec <wc_HmacUpdate>:


int wc_HmacUpdate(Hmac* hmac, const byte* msg, word32 length)
{
    a1ec:	b580      	push	{r7, lr}
    a1ee:	b086      	sub	sp, #24
    a1f0:	af00      	add	r7, sp, #0
    a1f2:	60f8      	str	r0, [r7, #12]
    a1f4:	60b9      	str	r1, [r7, #8]
    a1f6:	607a      	str	r2, [r7, #4]
    int ret = 0;
    a1f8:	2300      	movs	r3, #0
    a1fa:	617b      	str	r3, [r7, #20]

    if (hmac == NULL || (msg == NULL && length > 0)) {
    a1fc:	68fb      	ldr	r3, [r7, #12]
    a1fe:	2b00      	cmp	r3, #0
    a200:	d005      	beq.n	a20e <wc_HmacUpdate+0x22>
    a202:	68bb      	ldr	r3, [r7, #8]
    a204:	2b00      	cmp	r3, #0
    a206:	d105      	bne.n	a214 <wc_HmacUpdate+0x28>
    a208:	687b      	ldr	r3, [r7, #4]
    a20a:	2b00      	cmp	r3, #0
    a20c:	d002      	beq.n	a214 <wc_HmacUpdate+0x28>
        return BAD_FUNC_ARG;
    a20e:	23ad      	movs	r3, #173	; 0xad
    a210:	425b      	negs	r3, r3
    a212:	e02c      	b.n	a26e <wc_HmacUpdate+0x82>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
    a214:	68fa      	ldr	r2, [r7, #12]
    a216:	2316      	movs	r3, #22
    a218:	33ff      	adds	r3, #255	; 0xff
    a21a:	5cd3      	ldrb	r3, [r2, r3]
    a21c:	2b00      	cmp	r3, #0
    a21e:	d10a      	bne.n	a236 <wc_HmacUpdate+0x4a>
        ret = HmacKeyInnerHash(hmac);
    a220:	68fb      	ldr	r3, [r7, #12]
    a222:	0018      	movs	r0, r3
    a224:	f7ff ffb2 	bl	a18c <HmacKeyInnerHash>
    a228:	0003      	movs	r3, r0
    a22a:	617b      	str	r3, [r7, #20]
        if (ret != 0)
    a22c:	697b      	ldr	r3, [r7, #20]
    a22e:	2b00      	cmp	r3, #0
    a230:	d001      	beq.n	a236 <wc_HmacUpdate+0x4a>
            return ret;
    a232:	697b      	ldr	r3, [r7, #20]
    a234:	e01b      	b.n	a26e <wc_HmacUpdate+0x82>
    }

    switch (hmac->macType) {
    a236:	68fa      	ldr	r2, [r7, #12]
    a238:	238a      	movs	r3, #138	; 0x8a
    a23a:	005b      	lsls	r3, r3, #1
    a23c:	5cd3      	ldrb	r3, [r2, r3]
    a23e:	2b04      	cmp	r3, #4
    a240:	d002      	beq.n	a248 <wc_HmacUpdate+0x5c>
    a242:	2b06      	cmp	r3, #6
    a244:	d009      	beq.n	a25a <wc_HmacUpdate+0x6e>
            break;
	#endif
    #endif /* WOLFSSL_SHA3 */

        default:
            break;
    a246:	e011      	b.n	a26c <wc_HmacUpdate+0x80>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
    a248:	68fb      	ldr	r3, [r7, #12]
    a24a:	687a      	ldr	r2, [r7, #4]
    a24c:	68b9      	ldr	r1, [r7, #8]
    a24e:	0018      	movs	r0, r3
    a250:	f002 fa04 	bl	c65c <wc_ShaUpdate>
    a254:	0003      	movs	r3, r0
    a256:	617b      	str	r3, [r7, #20]
            break;
    a258:	e008      	b.n	a26c <wc_HmacUpdate+0x80>
            break;
    #endif /* WOLFSSL_SHA224 */

    #ifndef NO_SHA256
        case WC_SHA256:
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
    a25a:	68fb      	ldr	r3, [r7, #12]
    a25c:	687a      	ldr	r2, [r7, #4]
    a25e:	68b9      	ldr	r1, [r7, #8]
    a260:	0018      	movs	r0, r3
    a262:	f003 f99d 	bl	d5a0 <wc_Sha256Update>
    a266:	0003      	movs	r3, r0
    a268:	617b      	str	r3, [r7, #20]
            break;
    a26a:	46c0      	nop			; (mov r8, r8)

        default:
            break;
    }

    return ret;
    a26c:	697b      	ldr	r3, [r7, #20]
}
    a26e:	0018      	movs	r0, r3
    a270:	46bd      	mov	sp, r7
    a272:	b006      	add	sp, #24
    a274:	bd80      	pop	{r7, pc}
    a276:	46c0      	nop			; (mov r8, r8)

0000a278 <wc_HmacFinal>:


int wc_HmacFinal(Hmac* hmac, byte* hash)
{
    a278:	b580      	push	{r7, lr}
    a27a:	b084      	sub	sp, #16
    a27c:	af00      	add	r7, sp, #0
    a27e:	6078      	str	r0, [r7, #4]
    a280:	6039      	str	r1, [r7, #0]
    int ret;

    if (hmac == NULL || hash == NULL) {
    a282:	687b      	ldr	r3, [r7, #4]
    a284:	2b00      	cmp	r3, #0
    a286:	d002      	beq.n	a28e <wc_HmacFinal+0x16>
    a288:	683b      	ldr	r3, [r7, #0]
    a28a:	2b00      	cmp	r3, #0
    a28c:	d102      	bne.n	a294 <wc_HmacFinal+0x1c>
        return BAD_FUNC_ARG;
    a28e:	23ad      	movs	r3, #173	; 0xad
    a290:	425b      	negs	r3, r3
    a292:	e08b      	b.n	a3ac <wc_HmacFinal+0x134>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
    a294:	687a      	ldr	r2, [r7, #4]
    a296:	2316      	movs	r3, #22
    a298:	33ff      	adds	r3, #255	; 0xff
    a29a:	5cd3      	ldrb	r3, [r2, r3]
    a29c:	2b00      	cmp	r3, #0
    a29e:	d10a      	bne.n	a2b6 <wc_HmacFinal+0x3e>
        ret = HmacKeyInnerHash(hmac);
    a2a0:	687b      	ldr	r3, [r7, #4]
    a2a2:	0018      	movs	r0, r3
    a2a4:	f7ff ff72 	bl	a18c <HmacKeyInnerHash>
    a2a8:	0003      	movs	r3, r0
    a2aa:	60fb      	str	r3, [r7, #12]
        if (ret != 0)
    a2ac:	68fb      	ldr	r3, [r7, #12]
    a2ae:	2b00      	cmp	r3, #0
    a2b0:	d001      	beq.n	a2b6 <wc_HmacFinal+0x3e>
            return ret;
    a2b2:	68fb      	ldr	r3, [r7, #12]
    a2b4:	e07a      	b.n	a3ac <wc_HmacFinal+0x134>
    }

    switch (hmac->macType) {
    a2b6:	687a      	ldr	r2, [r7, #4]
    a2b8:	238a      	movs	r3, #138	; 0x8a
    a2ba:	005b      	lsls	r3, r3, #1
    a2bc:	5cd3      	ldrb	r3, [r2, r3]
    a2be:	2b04      	cmp	r3, #4
    a2c0:	d002      	beq.n	a2c8 <wc_HmacFinal+0x50>
    a2c2:	2b06      	cmp	r3, #6
    a2c4:	d02d      	beq.n	a322 <wc_HmacFinal+0xaa>
    a2c6:	e059      	b.n	a37c <wc_HmacFinal+0x104>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            ret = wc_ShaFinal(&hmac->hash.sha, (byte*)hmac->innerHash);
    a2c8:	687a      	ldr	r2, [r7, #4]
    a2ca:	687b      	ldr	r3, [r7, #4]
    a2cc:	33f0      	adds	r3, #240	; 0xf0
    a2ce:	0019      	movs	r1, r3
    a2d0:	0010      	movs	r0, r2
    a2d2:	f002 fa25 	bl	c720 <wc_ShaFinal>
    a2d6:	0003      	movs	r3, r0
    a2d8:	60fb      	str	r3, [r7, #12]
            if (ret != 0)
    a2da:	68fb      	ldr	r3, [r7, #12]
    a2dc:	2b00      	cmp	r3, #0
    a2de:	d151      	bne.n	a384 <wc_HmacFinal+0x10c>
                break;
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->opad,
    a2e0:	6878      	ldr	r0, [r7, #4]
    a2e2:	687b      	ldr	r3, [r7, #4]
    a2e4:	33b0      	adds	r3, #176	; 0xb0
    a2e6:	2240      	movs	r2, #64	; 0x40
    a2e8:	0019      	movs	r1, r3
    a2ea:	f002 f9b7 	bl	c65c <wc_ShaUpdate>
    a2ee:	0003      	movs	r3, r0
    a2f0:	60fb      	str	r3, [r7, #12]
                                                             WC_SHA_BLOCK_SIZE);
            if (ret != 0)
    a2f2:	68fb      	ldr	r3, [r7, #12]
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	d147      	bne.n	a388 <wc_HmacFinal+0x110>
                break;
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->innerHash,
    a2f8:	6878      	ldr	r0, [r7, #4]
    a2fa:	687b      	ldr	r3, [r7, #4]
    a2fc:	33f0      	adds	r3, #240	; 0xf0
    a2fe:	2214      	movs	r2, #20
    a300:	0019      	movs	r1, r3
    a302:	f002 f9ab 	bl	c65c <wc_ShaUpdate>
    a306:	0003      	movs	r3, r0
    a308:	60fb      	str	r3, [r7, #12]
                                                            WC_SHA_DIGEST_SIZE);
            if (ret != 0)
    a30a:	68fb      	ldr	r3, [r7, #12]
    a30c:	2b00      	cmp	r3, #0
    a30e:	d13d      	bne.n	a38c <wc_HmacFinal+0x114>
                break;
            ret = wc_ShaFinal(&hmac->hash.sha, hash);
    a310:	687b      	ldr	r3, [r7, #4]
    a312:	683a      	ldr	r2, [r7, #0]
    a314:	0011      	movs	r1, r2
    a316:	0018      	movs	r0, r3
    a318:	f002 fa02 	bl	c720 <wc_ShaFinal>
    a31c:	0003      	movs	r3, r0
    a31e:	60fb      	str	r3, [r7, #12]
            break;
    a320:	e03b      	b.n	a39a <wc_HmacFinal+0x122>
        break;
    #endif /* WOLFSSL_SHA224 */

    #ifndef NO_SHA256
        case WC_SHA256:
            ret = wc_Sha256Final(&hmac->hash.sha256, (byte*)hmac->innerHash);
    a322:	687a      	ldr	r2, [r7, #4]
    a324:	687b      	ldr	r3, [r7, #4]
    a326:	33f0      	adds	r3, #240	; 0xf0
    a328:	0019      	movs	r1, r3
    a32a:	0010      	movs	r0, r2
    a32c:	f003 f9dc 	bl	d6e8 <wc_Sha256Final>
    a330:	0003      	movs	r3, r0
    a332:	60fb      	str	r3, [r7, #12]
            if (ret != 0)
    a334:	68fb      	ldr	r3, [r7, #12]
    a336:	2b00      	cmp	r3, #0
    a338:	d12a      	bne.n	a390 <wc_HmacFinal+0x118>
                break;
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
    a33a:	6878      	ldr	r0, [r7, #4]
    a33c:	687b      	ldr	r3, [r7, #4]
    a33e:	33b0      	adds	r3, #176	; 0xb0
    a340:	2240      	movs	r2, #64	; 0x40
    a342:	0019      	movs	r1, r3
    a344:	f003 f92c 	bl	d5a0 <wc_Sha256Update>
    a348:	0003      	movs	r3, r0
    a34a:	60fb      	str	r3, [r7, #12]
                                                             WC_SHA256_BLOCK_SIZE);
            if (ret != 0)
    a34c:	68fb      	ldr	r3, [r7, #12]
    a34e:	2b00      	cmp	r3, #0
    a350:	d120      	bne.n	a394 <wc_HmacFinal+0x11c>
                break;
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
    a352:	6878      	ldr	r0, [r7, #4]
    a354:	687b      	ldr	r3, [r7, #4]
    a356:	33f0      	adds	r3, #240	; 0xf0
    a358:	2220      	movs	r2, #32
    a35a:	0019      	movs	r1, r3
    a35c:	f003 f920 	bl	d5a0 <wc_Sha256Update>
    a360:	0003      	movs	r3, r0
    a362:	60fb      	str	r3, [r7, #12]
                                                            WC_SHA256_DIGEST_SIZE);
            if (ret != 0)
    a364:	68fb      	ldr	r3, [r7, #12]
    a366:	2b00      	cmp	r3, #0
    a368:	d116      	bne.n	a398 <wc_HmacFinal+0x120>
                break;
            ret = wc_Sha256Final(&hmac->hash.sha256, hash);
    a36a:	687b      	ldr	r3, [r7, #4]
    a36c:	683a      	ldr	r2, [r7, #0]
    a36e:	0011      	movs	r1, r2
    a370:	0018      	movs	r0, r3
    a372:	f003 f9b9 	bl	d6e8 <wc_Sha256Final>
    a376:	0003      	movs	r3, r0
    a378:	60fb      	str	r3, [r7, #12]
            break;
    a37a:	e00e      	b.n	a39a <wc_HmacFinal+0x122>
            break;
	#endif
    #endif /* WOLFSSL_SHA3 */

        default:
            ret = BAD_FUNC_ARG;
    a37c:	23ad      	movs	r3, #173	; 0xad
    a37e:	425b      	negs	r3, r3
    a380:	60fb      	str	r3, [r7, #12]
            break;
    a382:	e00a      	b.n	a39a <wc_HmacFinal+0x122>

    #ifndef NO_SHA
        case WC_SHA:
            ret = wc_ShaFinal(&hmac->hash.sha, (byte*)hmac->innerHash);
            if (ret != 0)
                break;
    a384:	46c0      	nop			; (mov r8, r8)
    a386:	e008      	b.n	a39a <wc_HmacFinal+0x122>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->opad,
                                                             WC_SHA_BLOCK_SIZE);
            if (ret != 0)
                break;
    a388:	46c0      	nop			; (mov r8, r8)
    a38a:	e006      	b.n	a39a <wc_HmacFinal+0x122>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->innerHash,
                                                            WC_SHA_DIGEST_SIZE);
            if (ret != 0)
                break;
    a38c:	46c0      	nop			; (mov r8, r8)
    a38e:	e004      	b.n	a39a <wc_HmacFinal+0x122>

    #ifndef NO_SHA256
        case WC_SHA256:
            ret = wc_Sha256Final(&hmac->hash.sha256, (byte*)hmac->innerHash);
            if (ret != 0)
                break;
    a390:	46c0      	nop			; (mov r8, r8)
    a392:	e002      	b.n	a39a <wc_HmacFinal+0x122>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
                                                             WC_SHA256_BLOCK_SIZE);
            if (ret != 0)
                break;
    a394:	46c0      	nop			; (mov r8, r8)
    a396:	e000      	b.n	a39a <wc_HmacFinal+0x122>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
                                                            WC_SHA256_DIGEST_SIZE);
            if (ret != 0)
                break;
    a398:	46c0      	nop			; (mov r8, r8)
        default:
            ret = BAD_FUNC_ARG;
            break;
    }

    if (ret == 0) {
    a39a:	68fb      	ldr	r3, [r7, #12]
    a39c:	2b00      	cmp	r3, #0
    a39e:	d104      	bne.n	a3aa <wc_HmacFinal+0x132>
        hmac->innerHashKeyed = 0;
    a3a0:	687a      	ldr	r2, [r7, #4]
    a3a2:	2316      	movs	r3, #22
    a3a4:	33ff      	adds	r3, #255	; 0xff
    a3a6:	2100      	movs	r1, #0
    a3a8:	54d1      	strb	r1, [r2, r3]
    }

    return ret;
    a3aa:	68fb      	ldr	r3, [r7, #12]
}
    a3ac:	0018      	movs	r0, r3
    a3ae:	46bd      	mov	sp, r7
    a3b0:	b004      	add	sp, #16
    a3b2:	bd80      	pop	{r7, pc}

0000a3b4 <wc_HmacInit>:


/* Initialize Hmac for use with async device */
int wc_HmacInit(Hmac* hmac, void* heap, int devId)
{
    a3b4:	b580      	push	{r7, lr}
    a3b6:	b086      	sub	sp, #24
    a3b8:	af00      	add	r7, sp, #0
    a3ba:	60f8      	str	r0, [r7, #12]
    a3bc:	60b9      	str	r1, [r7, #8]
    a3be:	607a      	str	r2, [r7, #4]
    int ret = 0;
    a3c0:	2300      	movs	r3, #0
    a3c2:	617b      	str	r3, [r7, #20]

    if (hmac == NULL)
    a3c4:	68fb      	ldr	r3, [r7, #12]
    a3c6:	2b00      	cmp	r3, #0
    a3c8:	d102      	bne.n	a3d0 <wc_HmacInit+0x1c>
        return BAD_FUNC_ARG;
    a3ca:	23ad      	movs	r3, #173	; 0xad
    a3cc:	425b      	negs	r3, r3
    a3ce:	e00c      	b.n	a3ea <wc_HmacInit+0x36>

    XMEMSET(hmac, 0, sizeof(Hmac));
    a3d0:	238c      	movs	r3, #140	; 0x8c
    a3d2:	005a      	lsls	r2, r3, #1
    a3d4:	68fb      	ldr	r3, [r7, #12]
    a3d6:	2100      	movs	r1, #0
    a3d8:	0018      	movs	r0, r3
    a3da:	f01b f9a6 	bl	2572a <memset>
    hmac->heap = heap;
    a3de:	68fa      	ldr	r2, [r7, #12]
    a3e0:	2388      	movs	r3, #136	; 0x88
    a3e2:	005b      	lsls	r3, r3, #1
    a3e4:	68b9      	ldr	r1, [r7, #8]
    a3e6:	50d1      	str	r1, [r2, r3]
                                                         hmac->heap, devId);
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
    a3e8:	697b      	ldr	r3, [r7, #20]
}
    a3ea:	0018      	movs	r0, r3
    a3ec:	46bd      	mov	sp, r7
    a3ee:	b006      	add	sp, #24
    a3f0:	bd80      	pop	{r7, pc}
    a3f2:	46c0      	nop			; (mov r8, r8)

0000a3f4 <wc_HmacFree>:
}
#endif

/* Free Hmac from use with async device */
void wc_HmacFree(Hmac* hmac)
{
    a3f4:	b580      	push	{r7, lr}
    a3f6:	b082      	sub	sp, #8
    a3f8:	af00      	add	r7, sp, #0
    a3fa:	6078      	str	r0, [r7, #4]
    if (hmac == NULL)
    a3fc:	687b      	ldr	r3, [r7, #4]
    a3fe:	2b00      	cmp	r3, #0
    a400:	d026      	beq.n	a450 <wc_HmacFree+0x5c>
        (void)ret; /* must ignore return code here */
        (void)finalHash;
    }
#endif

    switch (hmac->macType) {
    a402:	687a      	ldr	r2, [r7, #4]
    a404:	238a      	movs	r3, #138	; 0x8a
    a406:	005b      	lsls	r3, r3, #1
    a408:	5cd3      	ldrb	r3, [r2, r3]
    a40a:	2b04      	cmp	r3, #4
    a40c:	d002      	beq.n	a414 <wc_HmacFree+0x20>
    a40e:	2b06      	cmp	r3, #6
    a410:	d005      	beq.n	a41e <wc_HmacFree+0x2a>
            break;
	#endif
    #endif /* WOLFSSL_SHA3 */

        default:
            break;
    a412:	e009      	b.n	a428 <wc_HmacFree+0x34>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            wc_ShaFree(&hmac->hash.sha);
    a414:	687b      	ldr	r3, [r7, #4]
    a416:	0018      	movs	r0, r3
    a418:	f002 fa2e 	bl	c878 <wc_ShaFree>
            break;
    a41c:	e004      	b.n	a428 <wc_HmacFree+0x34>
            break;
    #endif /* WOLFSSL_SHA224 */

    #ifndef NO_SHA256
        case WC_SHA256:
            wc_Sha256Free(&hmac->hash.sha256);
    a41e:	687b      	ldr	r3, [r7, #4]
    a420:	0018      	movs	r0, r3
    a422:	f003 f99f 	bl	d764 <wc_Sha256Free>
            break;
    a426:	46c0      	nop			; (mov r8, r8)

#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_HMAC)
    wolfAsync_DevCtxFree(&hmac->asyncDev, WOLFSSL_ASYNC_MARKER_HMAC);
#endif /* WOLFSSL_ASYNC_CRYPT */

    switch (hmac->macType) {
    a428:	687a      	ldr	r2, [r7, #4]
    a42a:	238a      	movs	r3, #138	; 0x8a
    a42c:	005b      	lsls	r3, r3, #1
    a42e:	5cd3      	ldrb	r3, [r2, r3]
    a430:	2b04      	cmp	r3, #4
    a432:	d002      	beq.n	a43a <wc_HmacFree+0x46>
    a434:	2b06      	cmp	r3, #6
    a436:	d005      	beq.n	a444 <wc_HmacFree+0x50>
    a438:	e00b      	b.n	a452 <wc_HmacFree+0x5e>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            wc_ShaFree(&hmac->hash.sha);
    a43a:	687b      	ldr	r3, [r7, #4]
    a43c:	0018      	movs	r0, r3
    a43e:	f002 fa1b 	bl	c878 <wc_ShaFree>
            break;
    a442:	e006      	b.n	a452 <wc_HmacFree+0x5e>
            break;
    #endif /* WOLFSSL_SHA224 */

    #ifndef NO_SHA256
        case WC_SHA256:
            wc_Sha256Free(&hmac->hash.sha256);
    a444:	687b      	ldr	r3, [r7, #4]
    a446:	0018      	movs	r0, r3
    a448:	f003 f98c 	bl	d764 <wc_Sha256Free>
            break;
    a44c:	46c0      	nop			; (mov r8, r8)
    a44e:	e000      	b.n	a452 <wc_HmacFree+0x5e>

/* Free Hmac from use with async device */
void wc_HmacFree(Hmac* hmac)
{
    if (hmac == NULL)
        return;
    a450:	46c0      	nop			; (mov r8, r8)
        case WC_SHA512:
            wc_Sha512Free(&hmac->hash.sha512);
            break;
    #endif /* WOLFSSL_SHA512 */
    }
}
    a452:	46bd      	mov	sp, r7
    a454:	b002      	add	sp, #8
    a456:	bd80      	pop	{r7, pc}

0000a458 <wolfSSL_GetHmacMaxSize>:

int wolfSSL_GetHmacMaxSize(void)
{
    a458:	b580      	push	{r7, lr}
    a45a:	af00      	add	r7, sp, #0
    return WC_MAX_DIGEST_SIZE;
    a45c:	2320      	movs	r3, #32
}
    a45e:	0018      	movs	r0, r3
    a460:	46bd      	mov	sp, r7
    a462:	bd80      	pop	{r7, pc}

0000a464 <rotlFixed>:
    }

#else /* generic */

    STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
    {
    a464:	b580      	push	{r7, lr}
    a466:	b082      	sub	sp, #8
    a468:	af00      	add	r7, sp, #0
    a46a:	6078      	str	r0, [r7, #4]
    a46c:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    a46e:	683b      	ldr	r3, [r7, #0]
    a470:	2220      	movs	r2, #32
    a472:	1ad3      	subs	r3, r2, r3
    a474:	687a      	ldr	r2, [r7, #4]
    a476:	41da      	rors	r2, r3
    a478:	0013      	movs	r3, r2
    }
    a47a:	0018      	movs	r0, r3
    a47c:	46bd      	mov	sp, r7
    a47e:	b002      	add	sp, #8
    a480:	bd80      	pop	{r7, pc}
    a482:	46c0      	nop			; (mov r8, r8)

0000a484 <ByteReverseWord32>:

#endif


STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
{
    a484:	b580      	push	{r7, lr}
    a486:	b082      	sub	sp, #8
    a488:	af00      	add	r7, sp, #0
    a48a:	6078      	str	r0, [r7, #4]
    /* 5 instructions with rotate instruction, 9 without */
    return (rotrFixed(value, 8U) & 0xff00ff00) |
           (rotlFixed(value, 8U) & 0x00ff00ff);
#else
    /* 6 instructions with rotate instruction, 8 without */
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    a48c:	687b      	ldr	r3, [r7, #4]
    a48e:	0a1b      	lsrs	r3, r3, #8
    a490:	4a08      	ldr	r2, [pc, #32]	; (a4b4 <ByteReverseWord32+0x30>)
    a492:	401a      	ands	r2, r3
    a494:	687b      	ldr	r3, [r7, #4]
    a496:	021b      	lsls	r3, r3, #8
    a498:	4907      	ldr	r1, [pc, #28]	; (a4b8 <ByteReverseWord32+0x34>)
    a49a:	400b      	ands	r3, r1
    a49c:	4313      	orrs	r3, r2
    a49e:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
    a4a0:	687b      	ldr	r3, [r7, #4]
    a4a2:	2110      	movs	r1, #16
    a4a4:	0018      	movs	r0, r3
    a4a6:	f7ff ffdd 	bl	a464 <rotlFixed>
    a4aa:	0003      	movs	r3, r0
#endif
}
    a4ac:	0018      	movs	r0, r3
    a4ae:	46bd      	mov	sp, r7
    a4b0:	b002      	add	sp, #8
    a4b2:	bd80      	pop	{r7, pc}
    a4b4:	00ff00ff 	.word	0x00ff00ff
    a4b8:	ff00ff00 	.word	0xff00ff00

0000a4bc <ByteReverseWords>:


STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
                                    word32 byteCount)
{
    a4bc:	b590      	push	{r4, r7, lr}
    a4be:	b087      	sub	sp, #28
    a4c0:	af00      	add	r7, sp, #0
    a4c2:	60f8      	str	r0, [r7, #12]
    a4c4:	60b9      	str	r1, [r7, #8]
    a4c6:	607a      	str	r2, [r7, #4]
    word32 count = byteCount/(word32)sizeof(word32), i;
    a4c8:	687b      	ldr	r3, [r7, #4]
    a4ca:	089b      	lsrs	r3, r3, #2
    a4cc:	613b      	str	r3, [r7, #16]

    for (i = 0; i < count; i++)
    a4ce:	2300      	movs	r3, #0
    a4d0:	617b      	str	r3, [r7, #20]
    a4d2:	e010      	b.n	a4f6 <ByteReverseWords+0x3a>
        out[i] = ByteReverseWord32(in[i]);
    a4d4:	697b      	ldr	r3, [r7, #20]
    a4d6:	009b      	lsls	r3, r3, #2
    a4d8:	68fa      	ldr	r2, [r7, #12]
    a4da:	18d4      	adds	r4, r2, r3
    a4dc:	697b      	ldr	r3, [r7, #20]
    a4de:	009b      	lsls	r3, r3, #2
    a4e0:	68ba      	ldr	r2, [r7, #8]
    a4e2:	18d3      	adds	r3, r2, r3
    a4e4:	681b      	ldr	r3, [r3, #0]
    a4e6:	0018      	movs	r0, r3
    a4e8:	f7ff ffcc 	bl	a484 <ByteReverseWord32>
    a4ec:	0003      	movs	r3, r0
    a4ee:	6023      	str	r3, [r4, #0]
STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
                                    word32 byteCount)
{
    word32 count = byteCount/(word32)sizeof(word32), i;

    for (i = 0; i < count; i++)
    a4f0:	697b      	ldr	r3, [r7, #20]
    a4f2:	3301      	adds	r3, #1
    a4f4:	617b      	str	r3, [r7, #20]
    a4f6:	697a      	ldr	r2, [r7, #20]
    a4f8:	693b      	ldr	r3, [r7, #16]
    a4fa:	429a      	cmp	r2, r3
    a4fc:	d3ea      	bcc.n	a4d4 <ByteReverseWords+0x18>
        out[i] = ByteReverseWord32(in[i]);

}
    a4fe:	46c0      	nop			; (mov r8, r8)
    a500:	46bd      	mov	sp, r7
    a502:	b007      	add	sp, #28
    a504:	bd90      	pop	{r4, r7, pc}
    a506:	46c0      	nop			; (mov r8, r8)

0000a508 <min>:
    #define WOLFSSL_HAVE_MIN
    #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
        #define min min
    #endif
    STATIC WC_INLINE word32 min(word32 a, word32 b)
    {
    a508:	b580      	push	{r7, lr}
    a50a:	b082      	sub	sp, #8
    a50c:	af00      	add	r7, sp, #0
    a50e:	6078      	str	r0, [r7, #4]
    a510:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
    a512:	683a      	ldr	r2, [r7, #0]
    a514:	687b      	ldr	r3, [r7, #4]
    a516:	4293      	cmp	r3, r2
    a518:	d900      	bls.n	a51c <min+0x14>
    a51a:	0013      	movs	r3, r2
    }
    a51c:	0018      	movs	r0, r3
    a51e:	46bd      	mov	sp, r7
    a520:	b002      	add	sp, #8
    a522:	bd80      	pop	{r7, pc}

0000a524 <InitSha>:
#else
    /* Software implementation */
    #define USE_SHA_SOFTWARE_IMPL

    static int InitSha(wc_Sha* sha)
    {
    a524:	b580      	push	{r7, lr}
    a526:	b084      	sub	sp, #16
    a528:	af00      	add	r7, sp, #0
    a52a:	6078      	str	r0, [r7, #4]
        int ret = 0;
    a52c:	2300      	movs	r3, #0
    a52e:	60fb      	str	r3, [r7, #12]

        sha->digest[0] = 0x67452301L;
    a530:	687b      	ldr	r3, [r7, #4]
    a532:	4a0e      	ldr	r2, [pc, #56]	; (a56c <InitSha+0x48>)
    a534:	64da      	str	r2, [r3, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
    a536:	687b      	ldr	r3, [r7, #4]
    a538:	4a0d      	ldr	r2, [pc, #52]	; (a570 <InitSha+0x4c>)
    a53a:	651a      	str	r2, [r3, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
    a53c:	687b      	ldr	r3, [r7, #4]
    a53e:	4a0d      	ldr	r2, [pc, #52]	; (a574 <InitSha+0x50>)
    a540:	655a      	str	r2, [r3, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
    a542:	687b      	ldr	r3, [r7, #4]
    a544:	4a0c      	ldr	r2, [pc, #48]	; (a578 <InitSha+0x54>)
    a546:	659a      	str	r2, [r3, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
    a548:	687b      	ldr	r3, [r7, #4]
    a54a:	4a0c      	ldr	r2, [pc, #48]	; (a57c <InitSha+0x58>)
    a54c:	65da      	str	r2, [r3, #92]	; 0x5c

        sha->buffLen = 0;
    a54e:	687b      	ldr	r3, [r7, #4]
    a550:	2200      	movs	r2, #0
    a552:	601a      	str	r2, [r3, #0]
        sha->loLen   = 0;
    a554:	687b      	ldr	r3, [r7, #4]
    a556:	2200      	movs	r2, #0
    a558:	605a      	str	r2, [r3, #4]
        sha->hiLen   = 0;
    a55a:	687b      	ldr	r3, [r7, #4]
    a55c:	2200      	movs	r2, #0
    a55e:	609a      	str	r2, [r3, #8]

        return ret;
    a560:	68fb      	ldr	r3, [r7, #12]
    }
    a562:	0018      	movs	r0, r3
    a564:	46bd      	mov	sp, r7
    a566:	b004      	add	sp, #16
    a568:	bd80      	pop	{r7, pc}
    a56a:	46c0      	nop			; (mov r8, r8)
    a56c:	67452301 	.word	0x67452301
    a570:	efcdab89 	.word	0xefcdab89
    a574:	98badcfe 	.word	0x98badcfe
    a578:	10325476 	.word	0x10325476
    a57c:	c3d2e1f0 	.word	0xc3d2e1f0

0000a580 <AddLength>:

/* Software implementation */
#ifdef USE_SHA_SOFTWARE_IMPL

static WC_INLINE void AddLength(wc_Sha* sha, word32 len)
{
    a580:	b580      	push	{r7, lr}
    a582:	b084      	sub	sp, #16
    a584:	af00      	add	r7, sp, #0
    a586:	6078      	str	r0, [r7, #4]
    a588:	6039      	str	r1, [r7, #0]
    word32 tmp = sha->loLen;
    a58a:	687b      	ldr	r3, [r7, #4]
    a58c:	685b      	ldr	r3, [r3, #4]
    a58e:	60fb      	str	r3, [r7, #12]
    if ((sha->loLen += len) < tmp)
    a590:	687b      	ldr	r3, [r7, #4]
    a592:	685a      	ldr	r2, [r3, #4]
    a594:	683b      	ldr	r3, [r7, #0]
    a596:	18d2      	adds	r2, r2, r3
    a598:	687b      	ldr	r3, [r7, #4]
    a59a:	605a      	str	r2, [r3, #4]
    a59c:	687b      	ldr	r3, [r7, #4]
    a59e:	685a      	ldr	r2, [r3, #4]
    a5a0:	68fb      	ldr	r3, [r7, #12]
    a5a2:	429a      	cmp	r2, r3
    a5a4:	d204      	bcs.n	a5b0 <AddLength+0x30>
        sha->hiLen++;                       /* carry low to high */
    a5a6:	687b      	ldr	r3, [r7, #4]
    a5a8:	689b      	ldr	r3, [r3, #8]
    a5aa:	1c5a      	adds	r2, r3, #1
    a5ac:	687b      	ldr	r3, [r7, #4]
    a5ae:	609a      	str	r2, [r3, #8]
}
    a5b0:	46c0      	nop			; (mov r8, r8)
    a5b2:	46bd      	mov	sp, r7
    a5b4:	b004      	add	sp, #16
    a5b6:	bd80      	pop	{r7, pc}

0000a5b8 <Transform>:
        rotlFixed((v),5); (w) = rotlFixed((w),30);
    #define R4(v,w,x,y,z,i) (z)+= f4((w),(x),(y)) + blk1((i)) + 0xCA62C1D6+ \
        rotlFixed((v),5); (w) = rotlFixed((w),30);

    static void Transform(wc_Sha* sha, byte* data)
    {
    a5b8:	b590      	push	{r4, r7, lr}
    a5ba:	b099      	sub	sp, #100	; 0x64
    a5bc:	af00      	add	r7, sp, #0
    a5be:	6078      	str	r0, [r7, #4]
    a5c0:	6039      	str	r1, [r7, #0]
        word32 W[WC_SHA_BLOCK_SIZE / sizeof(word32)];

        /* Copy context->state[] to working vars */
        word32 a = sha->digest[0];
    a5c2:	687b      	ldr	r3, [r7, #4]
    a5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a5c6:	65fb      	str	r3, [r7, #92]	; 0x5c
        word32 b = sha->digest[1];
    a5c8:	687b      	ldr	r3, [r7, #4]
    a5ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    a5cc:	65bb      	str	r3, [r7, #88]	; 0x58
        word32 c = sha->digest[2];
    a5ce:	687b      	ldr	r3, [r7, #4]
    a5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    a5d2:	657b      	str	r3, [r7, #84]	; 0x54
        word32 d = sha->digest[3];
    a5d4:	687b      	ldr	r3, [r7, #4]
    a5d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a5d8:	653b      	str	r3, [r7, #80]	; 0x50
        word32 e = sha->digest[4];
    a5da:	687b      	ldr	r3, [r7, #4]
    a5dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    a5de:	64fb      	str	r3, [r7, #76]	; 0x4c
            t = e; e = d; d = c; c = b; b = a; a = t;
        }
    #else
        /* nearly 1 K bigger in code size but 25% faster */
        /* 4 rounds of 20 operations each. Loop unrolled. */
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
    a5e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    a5e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a5e4:	4053      	eors	r3, r2
    a5e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
    a5e8:	401a      	ands	r2, r3
    a5ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a5ec:	405a      	eors	r2, r3
    a5ee:	687b      	ldr	r3, [r7, #4]
    a5f0:	68d9      	ldr	r1, [r3, #12]
    a5f2:	230c      	movs	r3, #12
    a5f4:	18fb      	adds	r3, r7, r3
    a5f6:	6019      	str	r1, [r3, #0]
    a5f8:	230c      	movs	r3, #12
    a5fa:	18fb      	adds	r3, r7, r3
    a5fc:	681b      	ldr	r3, [r3, #0]
    a5fe:	18d4      	adds	r4, r2, r3
    a600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a602:	2105      	movs	r1, #5
    a604:	0018      	movs	r0, r3
    a606:	f7ff ff2d 	bl	a464 <rotlFixed>
    a60a:	0003      	movs	r3, r0
    a60c:	18e3      	adds	r3, r4, r3
    a60e:	4afe      	ldr	r2, [pc, #1016]	; (aa08 <Transform+0x450>)
    a610:	4694      	mov	ip, r2
    a612:	4463      	add	r3, ip
    a614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a616:	18d3      	adds	r3, r2, r3
    a618:	64fb      	str	r3, [r7, #76]	; 0x4c
    a61a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a61c:	211e      	movs	r1, #30
    a61e:	0018      	movs	r0, r3
    a620:	f7ff ff20 	bl	a464 <rotlFixed>
    a624:	0003      	movs	r3, r0
    a626:	65bb      	str	r3, [r7, #88]	; 0x58
    a628:	6dba      	ldr	r2, [r7, #88]	; 0x58
    a62a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a62c:	4053      	eors	r3, r2
    a62e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    a630:	401a      	ands	r2, r3
    a632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a634:	405a      	eors	r2, r3
    a636:	687b      	ldr	r3, [r7, #4]
    a638:	6919      	ldr	r1, [r3, #16]
    a63a:	230c      	movs	r3, #12
    a63c:	18fb      	adds	r3, r7, r3
    a63e:	6059      	str	r1, [r3, #4]
    a640:	230c      	movs	r3, #12
    a642:	18fb      	adds	r3, r7, r3
    a644:	685b      	ldr	r3, [r3, #4]
    a646:	18d4      	adds	r4, r2, r3
    a648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a64a:	2105      	movs	r1, #5
    a64c:	0018      	movs	r0, r3
    a64e:	f7ff ff09 	bl	a464 <rotlFixed>
    a652:	0003      	movs	r3, r0
    a654:	18e3      	adds	r3, r4, r3
    a656:	4aec      	ldr	r2, [pc, #944]	; (aa08 <Transform+0x450>)
    a658:	4694      	mov	ip, r2
    a65a:	4463      	add	r3, ip
    a65c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    a65e:	18d3      	adds	r3, r2, r3
    a660:	653b      	str	r3, [r7, #80]	; 0x50
    a662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a664:	211e      	movs	r1, #30
    a666:	0018      	movs	r0, r3
    a668:	f7ff fefc 	bl	a464 <rotlFixed>
    a66c:	0003      	movs	r3, r0
    a66e:	65fb      	str	r3, [r7, #92]	; 0x5c
    a670:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    a672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a674:	4053      	eors	r3, r2
    a676:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a678:	401a      	ands	r2, r3
    a67a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a67c:	405a      	eors	r2, r3
    a67e:	687b      	ldr	r3, [r7, #4]
    a680:	6959      	ldr	r1, [r3, #20]
    a682:	230c      	movs	r3, #12
    a684:	18fb      	adds	r3, r7, r3
    a686:	6099      	str	r1, [r3, #8]
    a688:	230c      	movs	r3, #12
    a68a:	18fb      	adds	r3, r7, r3
    a68c:	689b      	ldr	r3, [r3, #8]
    a68e:	18d4      	adds	r4, r2, r3
    a690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a692:	2105      	movs	r1, #5
    a694:	0018      	movs	r0, r3
    a696:	f7ff fee5 	bl	a464 <rotlFixed>
    a69a:	0003      	movs	r3, r0
    a69c:	18e3      	adds	r3, r4, r3
    a69e:	4ada      	ldr	r2, [pc, #872]	; (aa08 <Transform+0x450>)
    a6a0:	4694      	mov	ip, r2
    a6a2:	4463      	add	r3, ip
    a6a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    a6a6:	18d3      	adds	r3, r2, r3
    a6a8:	657b      	str	r3, [r7, #84]	; 0x54
    a6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a6ac:	211e      	movs	r1, #30
    a6ae:	0018      	movs	r0, r3
    a6b0:	f7ff fed8 	bl	a464 <rotlFixed>
    a6b4:	0003      	movs	r3, r0
    a6b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    a6b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a6ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a6bc:	4053      	eors	r3, r2
    a6be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    a6c0:	401a      	ands	r2, r3
    a6c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a6c4:	405a      	eors	r2, r3
    a6c6:	687b      	ldr	r3, [r7, #4]
    a6c8:	6999      	ldr	r1, [r3, #24]
    a6ca:	230c      	movs	r3, #12
    a6cc:	18fb      	adds	r3, r7, r3
    a6ce:	60d9      	str	r1, [r3, #12]
    a6d0:	230c      	movs	r3, #12
    a6d2:	18fb      	adds	r3, r7, r3
    a6d4:	68db      	ldr	r3, [r3, #12]
    a6d6:	18d4      	adds	r4, r2, r3
    a6d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a6da:	2105      	movs	r1, #5
    a6dc:	0018      	movs	r0, r3
    a6de:	f7ff fec1 	bl	a464 <rotlFixed>
    a6e2:	0003      	movs	r3, r0
    a6e4:	18e3      	adds	r3, r4, r3
    a6e6:	4ac8      	ldr	r2, [pc, #800]	; (aa08 <Transform+0x450>)
    a6e8:	4694      	mov	ip, r2
    a6ea:	4463      	add	r3, ip
    a6ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
    a6ee:	18d3      	adds	r3, r2, r3
    a6f0:	65bb      	str	r3, [r7, #88]	; 0x58
    a6f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a6f4:	211e      	movs	r1, #30
    a6f6:	0018      	movs	r0, r3
    a6f8:	f7ff feb4 	bl	a464 <rotlFixed>
    a6fc:	0003      	movs	r3, r0
    a6fe:	653b      	str	r3, [r7, #80]	; 0x50
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
    a700:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    a702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a704:	4053      	eors	r3, r2
    a706:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    a708:	401a      	ands	r2, r3
    a70a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a70c:	405a      	eors	r2, r3
    a70e:	687b      	ldr	r3, [r7, #4]
    a710:	69d9      	ldr	r1, [r3, #28]
    a712:	230c      	movs	r3, #12
    a714:	18fb      	adds	r3, r7, r3
    a716:	6119      	str	r1, [r3, #16]
    a718:	230c      	movs	r3, #12
    a71a:	18fb      	adds	r3, r7, r3
    a71c:	691b      	ldr	r3, [r3, #16]
    a71e:	18d4      	adds	r4, r2, r3
    a720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a722:	2105      	movs	r1, #5
    a724:	0018      	movs	r0, r3
    a726:	f7ff fe9d 	bl	a464 <rotlFixed>
    a72a:	0003      	movs	r3, r0
    a72c:	18e3      	adds	r3, r4, r3
    a72e:	4ab6      	ldr	r2, [pc, #728]	; (aa08 <Transform+0x450>)
    a730:	4694      	mov	ip, r2
    a732:	4463      	add	r3, ip
    a734:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    a736:	18d3      	adds	r3, r2, r3
    a738:	65fb      	str	r3, [r7, #92]	; 0x5c
    a73a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a73c:	211e      	movs	r1, #30
    a73e:	0018      	movs	r0, r3
    a740:	f7ff fe90 	bl	a464 <rotlFixed>
    a744:	0003      	movs	r3, r0
    a746:	657b      	str	r3, [r7, #84]	; 0x54
    a748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    a74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a74c:	4053      	eors	r3, r2
    a74e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    a750:	401a      	ands	r2, r3
    a752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a754:	405a      	eors	r2, r3
    a756:	687b      	ldr	r3, [r7, #4]
    a758:	6a19      	ldr	r1, [r3, #32]
    a75a:	230c      	movs	r3, #12
    a75c:	18fb      	adds	r3, r7, r3
    a75e:	6159      	str	r1, [r3, #20]
    a760:	230c      	movs	r3, #12
    a762:	18fb      	adds	r3, r7, r3
    a764:	695b      	ldr	r3, [r3, #20]
    a766:	18d4      	adds	r4, r2, r3
    a768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a76a:	2105      	movs	r1, #5
    a76c:	0018      	movs	r0, r3
    a76e:	f7ff fe79 	bl	a464 <rotlFixed>
    a772:	0003      	movs	r3, r0
    a774:	18e3      	adds	r3, r4, r3
    a776:	4aa4      	ldr	r2, [pc, #656]	; (aa08 <Transform+0x450>)
    a778:	4694      	mov	ip, r2
    a77a:	4463      	add	r3, ip
    a77c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a77e:	18d3      	adds	r3, r2, r3
    a780:	64fb      	str	r3, [r7, #76]	; 0x4c
    a782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a784:	211e      	movs	r1, #30
    a786:	0018      	movs	r0, r3
    a788:	f7ff fe6c 	bl	a464 <rotlFixed>
    a78c:	0003      	movs	r3, r0
    a78e:	65bb      	str	r3, [r7, #88]	; 0x58
    a790:	6dba      	ldr	r2, [r7, #88]	; 0x58
    a792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a794:	4053      	eors	r3, r2
    a796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    a798:	401a      	ands	r2, r3
    a79a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a79c:	405a      	eors	r2, r3
    a79e:	687b      	ldr	r3, [r7, #4]
    a7a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
    a7a2:	230c      	movs	r3, #12
    a7a4:	18fb      	adds	r3, r7, r3
    a7a6:	6199      	str	r1, [r3, #24]
    a7a8:	230c      	movs	r3, #12
    a7aa:	18fb      	adds	r3, r7, r3
    a7ac:	699b      	ldr	r3, [r3, #24]
    a7ae:	18d4      	adds	r4, r2, r3
    a7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a7b2:	2105      	movs	r1, #5
    a7b4:	0018      	movs	r0, r3
    a7b6:	f7ff fe55 	bl	a464 <rotlFixed>
    a7ba:	0003      	movs	r3, r0
    a7bc:	18e3      	adds	r3, r4, r3
    a7be:	4a92      	ldr	r2, [pc, #584]	; (aa08 <Transform+0x450>)
    a7c0:	4694      	mov	ip, r2
    a7c2:	4463      	add	r3, ip
    a7c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    a7c6:	18d3      	adds	r3, r2, r3
    a7c8:	653b      	str	r3, [r7, #80]	; 0x50
    a7ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a7cc:	211e      	movs	r1, #30
    a7ce:	0018      	movs	r0, r3
    a7d0:	f7ff fe48 	bl	a464 <rotlFixed>
    a7d4:	0003      	movs	r3, r0
    a7d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    a7d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    a7da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a7dc:	4053      	eors	r3, r2
    a7de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a7e0:	401a      	ands	r2, r3
    a7e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a7e4:	405a      	eors	r2, r3
    a7e6:	687b      	ldr	r3, [r7, #4]
    a7e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    a7ea:	230c      	movs	r3, #12
    a7ec:	18fb      	adds	r3, r7, r3
    a7ee:	61d9      	str	r1, [r3, #28]
    a7f0:	230c      	movs	r3, #12
    a7f2:	18fb      	adds	r3, r7, r3
    a7f4:	69db      	ldr	r3, [r3, #28]
    a7f6:	18d4      	adds	r4, r2, r3
    a7f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a7fa:	2105      	movs	r1, #5
    a7fc:	0018      	movs	r0, r3
    a7fe:	f7ff fe31 	bl	a464 <rotlFixed>
    a802:	0003      	movs	r3, r0
    a804:	18e3      	adds	r3, r4, r3
    a806:	4a80      	ldr	r2, [pc, #512]	; (aa08 <Transform+0x450>)
    a808:	4694      	mov	ip, r2
    a80a:	4463      	add	r3, ip
    a80c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    a80e:	18d3      	adds	r3, r2, r3
    a810:	657b      	str	r3, [r7, #84]	; 0x54
    a812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a814:	211e      	movs	r1, #30
    a816:	0018      	movs	r0, r3
    a818:	f7ff fe24 	bl	a464 <rotlFixed>
    a81c:	0003      	movs	r3, r0
    a81e:	64fb      	str	r3, [r7, #76]	; 0x4c
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
    a820:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a824:	4053      	eors	r3, r2
    a826:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    a828:	401a      	ands	r2, r3
    a82a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a82c:	405a      	eors	r2, r3
    a82e:	687b      	ldr	r3, [r7, #4]
    a830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    a832:	230c      	movs	r3, #12
    a834:	18fb      	adds	r3, r7, r3
    a836:	6219      	str	r1, [r3, #32]
    a838:	230c      	movs	r3, #12
    a83a:	18fb      	adds	r3, r7, r3
    a83c:	6a1b      	ldr	r3, [r3, #32]
    a83e:	18d4      	adds	r4, r2, r3
    a840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a842:	2105      	movs	r1, #5
    a844:	0018      	movs	r0, r3
    a846:	f7ff fe0d 	bl	a464 <rotlFixed>
    a84a:	0003      	movs	r3, r0
    a84c:	18e3      	adds	r3, r4, r3
    a84e:	4a6e      	ldr	r2, [pc, #440]	; (aa08 <Transform+0x450>)
    a850:	4694      	mov	ip, r2
    a852:	4463      	add	r3, ip
    a854:	6dba      	ldr	r2, [r7, #88]	; 0x58
    a856:	18d3      	adds	r3, r2, r3
    a858:	65bb      	str	r3, [r7, #88]	; 0x58
    a85a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a85c:	211e      	movs	r1, #30
    a85e:	0018      	movs	r0, r3
    a860:	f7ff fe00 	bl	a464 <rotlFixed>
    a864:	0003      	movs	r3, r0
    a866:	653b      	str	r3, [r7, #80]	; 0x50
    a868:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    a86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a86c:	4053      	eors	r3, r2
    a86e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    a870:	401a      	ands	r2, r3
    a872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a874:	405a      	eors	r2, r3
    a876:	687b      	ldr	r3, [r7, #4]
    a878:	6b19      	ldr	r1, [r3, #48]	; 0x30
    a87a:	230c      	movs	r3, #12
    a87c:	18fb      	adds	r3, r7, r3
    a87e:	6259      	str	r1, [r3, #36]	; 0x24
    a880:	230c      	movs	r3, #12
    a882:	18fb      	adds	r3, r7, r3
    a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a886:	18d4      	adds	r4, r2, r3
    a888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a88a:	2105      	movs	r1, #5
    a88c:	0018      	movs	r0, r3
    a88e:	f7ff fde9 	bl	a464 <rotlFixed>
    a892:	0003      	movs	r3, r0
    a894:	18e3      	adds	r3, r4, r3
    a896:	4a5c      	ldr	r2, [pc, #368]	; (aa08 <Transform+0x450>)
    a898:	4694      	mov	ip, r2
    a89a:	4463      	add	r3, ip
    a89c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    a89e:	18d3      	adds	r3, r2, r3
    a8a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    a8a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a8a4:	211e      	movs	r1, #30
    a8a6:	0018      	movs	r0, r3
    a8a8:	f7ff fddc 	bl	a464 <rotlFixed>
    a8ac:	0003      	movs	r3, r0
    a8ae:	657b      	str	r3, [r7, #84]	; 0x54
    a8b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    a8b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a8b4:	4053      	eors	r3, r2
    a8b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
    a8b8:	401a      	ands	r2, r3
    a8ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a8bc:	405a      	eors	r2, r3
    a8be:	687b      	ldr	r3, [r7, #4]
    a8c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    a8c2:	230c      	movs	r3, #12
    a8c4:	18fb      	adds	r3, r7, r3
    a8c6:	6299      	str	r1, [r3, #40]	; 0x28
    a8c8:	230c      	movs	r3, #12
    a8ca:	18fb      	adds	r3, r7, r3
    a8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a8ce:	18d4      	adds	r4, r2, r3
    a8d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a8d2:	2105      	movs	r1, #5
    a8d4:	0018      	movs	r0, r3
    a8d6:	f7ff fdc5 	bl	a464 <rotlFixed>
    a8da:	0003      	movs	r3, r0
    a8dc:	18e3      	adds	r3, r4, r3
    a8de:	4a4a      	ldr	r2, [pc, #296]	; (aa08 <Transform+0x450>)
    a8e0:	4694      	mov	ip, r2
    a8e2:	4463      	add	r3, ip
    a8e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a8e6:	18d3      	adds	r3, r2, r3
    a8e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    a8ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a8ec:	211e      	movs	r1, #30
    a8ee:	0018      	movs	r0, r3
    a8f0:	f7ff fdb8 	bl	a464 <rotlFixed>
    a8f4:	0003      	movs	r3, r0
    a8f6:	65bb      	str	r3, [r7, #88]	; 0x58
    a8f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
    a8fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a8fc:	4053      	eors	r3, r2
    a8fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    a900:	401a      	ands	r2, r3
    a902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a904:	405a      	eors	r2, r3
    a906:	687b      	ldr	r3, [r7, #4]
    a908:	6b99      	ldr	r1, [r3, #56]	; 0x38
    a90a:	230c      	movs	r3, #12
    a90c:	18fb      	adds	r3, r7, r3
    a90e:	62d9      	str	r1, [r3, #44]	; 0x2c
    a910:	230c      	movs	r3, #12
    a912:	18fb      	adds	r3, r7, r3
    a914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a916:	18d4      	adds	r4, r2, r3
    a918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a91a:	2105      	movs	r1, #5
    a91c:	0018      	movs	r0, r3
    a91e:	f7ff fda1 	bl	a464 <rotlFixed>
    a922:	0003      	movs	r3, r0
    a924:	18e3      	adds	r3, r4, r3
    a926:	4a38      	ldr	r2, [pc, #224]	; (aa08 <Transform+0x450>)
    a928:	4694      	mov	ip, r2
    a92a:	4463      	add	r3, ip
    a92c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    a92e:	18d3      	adds	r3, r2, r3
    a930:	653b      	str	r3, [r7, #80]	; 0x50
    a932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a934:	211e      	movs	r1, #30
    a936:	0018      	movs	r0, r3
    a938:	f7ff fd94 	bl	a464 <rotlFixed>
    a93c:	0003      	movs	r3, r0
    a93e:	65fb      	str	r3, [r7, #92]	; 0x5c
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
    a940:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    a942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a944:	4053      	eors	r3, r2
    a946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a948:	401a      	ands	r2, r3
    a94a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a94c:	405a      	eors	r2, r3
    a94e:	687b      	ldr	r3, [r7, #4]
    a950:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    a952:	230c      	movs	r3, #12
    a954:	18fb      	adds	r3, r7, r3
    a956:	6319      	str	r1, [r3, #48]	; 0x30
    a958:	230c      	movs	r3, #12
    a95a:	18fb      	adds	r3, r7, r3
    a95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a95e:	18d4      	adds	r4, r2, r3
    a960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a962:	2105      	movs	r1, #5
    a964:	0018      	movs	r0, r3
    a966:	f7ff fd7d 	bl	a464 <rotlFixed>
    a96a:	0003      	movs	r3, r0
    a96c:	18e3      	adds	r3, r4, r3
    a96e:	4a26      	ldr	r2, [pc, #152]	; (aa08 <Transform+0x450>)
    a970:	4694      	mov	ip, r2
    a972:	4463      	add	r3, ip
    a974:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    a976:	18d3      	adds	r3, r2, r3
    a978:	657b      	str	r3, [r7, #84]	; 0x54
    a97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a97c:	211e      	movs	r1, #30
    a97e:	0018      	movs	r0, r3
    a980:	f7ff fd70 	bl	a464 <rotlFixed>
    a984:	0003      	movs	r3, r0
    a986:	64fb      	str	r3, [r7, #76]	; 0x4c
    a988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a98a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a98c:	4053      	eors	r3, r2
    a98e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    a990:	401a      	ands	r2, r3
    a992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a994:	405a      	eors	r2, r3
    a996:	687b      	ldr	r3, [r7, #4]
    a998:	6c19      	ldr	r1, [r3, #64]	; 0x40
    a99a:	230c      	movs	r3, #12
    a99c:	18fb      	adds	r3, r7, r3
    a99e:	6359      	str	r1, [r3, #52]	; 0x34
    a9a0:	230c      	movs	r3, #12
    a9a2:	18fb      	adds	r3, r7, r3
    a9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a9a6:	18d4      	adds	r4, r2, r3
    a9a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    a9aa:	2105      	movs	r1, #5
    a9ac:	0018      	movs	r0, r3
    a9ae:	f7ff fd59 	bl	a464 <rotlFixed>
    a9b2:	0003      	movs	r3, r0
    a9b4:	18e3      	adds	r3, r4, r3
    a9b6:	4a14      	ldr	r2, [pc, #80]	; (aa08 <Transform+0x450>)
    a9b8:	4694      	mov	ip, r2
    a9ba:	4463      	add	r3, ip
    a9bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
    a9be:	18d3      	adds	r3, r2, r3
    a9c0:	65bb      	str	r3, [r7, #88]	; 0x58
    a9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    a9c4:	211e      	movs	r1, #30
    a9c6:	0018      	movs	r0, r3
    a9c8:	f7ff fd4c 	bl	a464 <rotlFixed>
    a9cc:	0003      	movs	r3, r0
    a9ce:	653b      	str	r3, [r7, #80]	; 0x50
    a9d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    a9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a9d4:	4053      	eors	r3, r2
    a9d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    a9d8:	401a      	ands	r2, r3
    a9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a9dc:	405a      	eors	r2, r3
    a9de:	687b      	ldr	r3, [r7, #4]
    a9e0:	6c59      	ldr	r1, [r3, #68]	; 0x44
    a9e2:	230c      	movs	r3, #12
    a9e4:	18fb      	adds	r3, r7, r3
    a9e6:	6399      	str	r1, [r3, #56]	; 0x38
    a9e8:	230c      	movs	r3, #12
    a9ea:	18fb      	adds	r3, r7, r3
    a9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a9ee:	18d4      	adds	r4, r2, r3
    a9f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    a9f2:	2105      	movs	r1, #5
    a9f4:	0018      	movs	r0, r3
    a9f6:	f7ff fd35 	bl	a464 <rotlFixed>
    a9fa:	0003      	movs	r3, r0
    a9fc:	18e3      	adds	r3, r4, r3
    a9fe:	4a02      	ldr	r2, [pc, #8]	; (aa08 <Transform+0x450>)
    aa00:	4694      	mov	ip, r2
    aa02:	4463      	add	r3, ip
    aa04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    aa06:	e001      	b.n	aa0c <Transform+0x454>
    aa08:	5a827999 	.word	0x5a827999
    aa0c:	18d3      	adds	r3, r2, r3
    aa0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    aa10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    aa12:	211e      	movs	r1, #30
    aa14:	0018      	movs	r0, r3
    aa16:	f7ff fd25 	bl	a464 <rotlFixed>
    aa1a:	0003      	movs	r3, r0
    aa1c:	657b      	str	r3, [r7, #84]	; 0x54
    aa1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    aa20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    aa22:	4053      	eors	r3, r2
    aa24:	6dba      	ldr	r2, [r7, #88]	; 0x58
    aa26:	401a      	ands	r2, r3
    aa28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    aa2a:	405a      	eors	r2, r3
    aa2c:	687b      	ldr	r3, [r7, #4]
    aa2e:	6c99      	ldr	r1, [r3, #72]	; 0x48
    aa30:	230c      	movs	r3, #12
    aa32:	18fb      	adds	r3, r7, r3
    aa34:	63d9      	str	r1, [r3, #60]	; 0x3c
    aa36:	230c      	movs	r3, #12
    aa38:	18fb      	adds	r3, r7, r3
    aa3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    aa3c:	18d4      	adds	r4, r2, r3
    aa3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    aa40:	2105      	movs	r1, #5
    aa42:	0018      	movs	r0, r3
    aa44:	f7ff fd0e 	bl	a464 <rotlFixed>
    aa48:	0003      	movs	r3, r0
    aa4a:	18e3      	adds	r3, r4, r3
    aa4c:	4afe      	ldr	r2, [pc, #1016]	; (ae48 <Transform+0x890>)
    aa4e:	4694      	mov	ip, r2
    aa50:	4463      	add	r3, ip
    aa52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    aa54:	18d3      	adds	r3, r2, r3
    aa56:	64fb      	str	r3, [r7, #76]	; 0x4c
    aa58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    aa5a:	211e      	movs	r1, #30
    aa5c:	0018      	movs	r0, r3
    aa5e:	f7ff fd01 	bl	a464 <rotlFixed>
    aa62:	0003      	movs	r3, r0
    aa64:	65bb      	str	r3, [r7, #88]	; 0x58

        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
    aa66:	6dba      	ldr	r2, [r7, #88]	; 0x58
    aa68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    aa6a:	4053      	eors	r3, r2
    aa6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    aa6e:	401a      	ands	r2, r3
    aa70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    aa72:	405a      	eors	r2, r3
    aa74:	0014      	movs	r4, r2
    aa76:	230c      	movs	r3, #12
    aa78:	18fb      	adds	r3, r7, r3
    aa7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    aa7c:	230c      	movs	r3, #12
    aa7e:	18fb      	adds	r3, r7, r3
    aa80:	6a1b      	ldr	r3, [r3, #32]
    aa82:	405a      	eors	r2, r3
    aa84:	230c      	movs	r3, #12
    aa86:	18fb      	adds	r3, r7, r3
    aa88:	689b      	ldr	r3, [r3, #8]
    aa8a:	405a      	eors	r2, r3
    aa8c:	230c      	movs	r3, #12
    aa8e:	18fb      	adds	r3, r7, r3
    aa90:	681b      	ldr	r3, [r3, #0]
    aa92:	4053      	eors	r3, r2
    aa94:	2101      	movs	r1, #1
    aa96:	0018      	movs	r0, r3
    aa98:	f7ff fce4 	bl	a464 <rotlFixed>
    aa9c:	0002      	movs	r2, r0
    aa9e:	230c      	movs	r3, #12
    aaa0:	18fb      	adds	r3, r7, r3
    aaa2:	601a      	str	r2, [r3, #0]
    aaa4:	230c      	movs	r3, #12
    aaa6:	18fb      	adds	r3, r7, r3
    aaa8:	681b      	ldr	r3, [r3, #0]
    aaaa:	18e4      	adds	r4, r4, r3
    aaac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    aaae:	2105      	movs	r1, #5
    aab0:	0018      	movs	r0, r3
    aab2:	f7ff fcd7 	bl	a464 <rotlFixed>
    aab6:	0003      	movs	r3, r0
    aab8:	18e3      	adds	r3, r4, r3
    aaba:	4ae3      	ldr	r2, [pc, #908]	; (ae48 <Transform+0x890>)
    aabc:	4694      	mov	ip, r2
    aabe:	4463      	add	r3, ip
    aac0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    aac2:	18d3      	adds	r3, r2, r3
    aac4:	653b      	str	r3, [r7, #80]	; 0x50
    aac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    aac8:	211e      	movs	r1, #30
    aaca:	0018      	movs	r0, r3
    aacc:	f7ff fcca 	bl	a464 <rotlFixed>
    aad0:	0003      	movs	r3, r0
    aad2:	65fb      	str	r3, [r7, #92]	; 0x5c
    aad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    aad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    aad8:	4053      	eors	r3, r2
    aada:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    aadc:	401a      	ands	r2, r3
    aade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    aae0:	405a      	eors	r2, r3
    aae2:	0014      	movs	r4, r2
    aae4:	230c      	movs	r3, #12
    aae6:	18fb      	adds	r3, r7, r3
    aae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    aaea:	230c      	movs	r3, #12
    aaec:	18fb      	adds	r3, r7, r3
    aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aaf0:	405a      	eors	r2, r3
    aaf2:	230c      	movs	r3, #12
    aaf4:	18fb      	adds	r3, r7, r3
    aaf6:	68db      	ldr	r3, [r3, #12]
    aaf8:	405a      	eors	r2, r3
    aafa:	230c      	movs	r3, #12
    aafc:	18fb      	adds	r3, r7, r3
    aafe:	685b      	ldr	r3, [r3, #4]
    ab00:	4053      	eors	r3, r2
    ab02:	2101      	movs	r1, #1
    ab04:	0018      	movs	r0, r3
    ab06:	f7ff fcad 	bl	a464 <rotlFixed>
    ab0a:	0002      	movs	r2, r0
    ab0c:	230c      	movs	r3, #12
    ab0e:	18fb      	adds	r3, r7, r3
    ab10:	605a      	str	r2, [r3, #4]
    ab12:	230c      	movs	r3, #12
    ab14:	18fb      	adds	r3, r7, r3
    ab16:	685b      	ldr	r3, [r3, #4]
    ab18:	18e4      	adds	r4, r4, r3
    ab1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ab1c:	2105      	movs	r1, #5
    ab1e:	0018      	movs	r0, r3
    ab20:	f7ff fca0 	bl	a464 <rotlFixed>
    ab24:	0003      	movs	r3, r0
    ab26:	18e3      	adds	r3, r4, r3
    ab28:	4ac7      	ldr	r2, [pc, #796]	; (ae48 <Transform+0x890>)
    ab2a:	4694      	mov	ip, r2
    ab2c:	4463      	add	r3, ip
    ab2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    ab30:	18d3      	adds	r3, r2, r3
    ab32:	657b      	str	r3, [r7, #84]	; 0x54
    ab34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ab36:	211e      	movs	r1, #30
    ab38:	0018      	movs	r0, r3
    ab3a:	f7ff fc93 	bl	a464 <rotlFixed>
    ab3e:	0003      	movs	r3, r0
    ab40:	64fb      	str	r3, [r7, #76]	; 0x4c
    ab42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    ab44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ab46:	4053      	eors	r3, r2
    ab48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    ab4a:	401a      	ands	r2, r3
    ab4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ab4e:	405a      	eors	r2, r3
    ab50:	0014      	movs	r4, r2
    ab52:	230c      	movs	r3, #12
    ab54:	18fb      	adds	r3, r7, r3
    ab56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    ab58:	230c      	movs	r3, #12
    ab5a:	18fb      	adds	r3, r7, r3
    ab5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ab5e:	405a      	eors	r2, r3
    ab60:	230c      	movs	r3, #12
    ab62:	18fb      	adds	r3, r7, r3
    ab64:	691b      	ldr	r3, [r3, #16]
    ab66:	405a      	eors	r2, r3
    ab68:	230c      	movs	r3, #12
    ab6a:	18fb      	adds	r3, r7, r3
    ab6c:	689b      	ldr	r3, [r3, #8]
    ab6e:	4053      	eors	r3, r2
    ab70:	2101      	movs	r1, #1
    ab72:	0018      	movs	r0, r3
    ab74:	f7ff fc76 	bl	a464 <rotlFixed>
    ab78:	0002      	movs	r2, r0
    ab7a:	230c      	movs	r3, #12
    ab7c:	18fb      	adds	r3, r7, r3
    ab7e:	609a      	str	r2, [r3, #8]
    ab80:	230c      	movs	r3, #12
    ab82:	18fb      	adds	r3, r7, r3
    ab84:	689b      	ldr	r3, [r3, #8]
    ab86:	18e4      	adds	r4, r4, r3
    ab88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ab8a:	2105      	movs	r1, #5
    ab8c:	0018      	movs	r0, r3
    ab8e:	f7ff fc69 	bl	a464 <rotlFixed>
    ab92:	0003      	movs	r3, r0
    ab94:	18e3      	adds	r3, r4, r3
    ab96:	4aac      	ldr	r2, [pc, #688]	; (ae48 <Transform+0x890>)
    ab98:	4694      	mov	ip, r2
    ab9a:	4463      	add	r3, ip
    ab9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
    ab9e:	18d3      	adds	r3, r2, r3
    aba0:	65bb      	str	r3, [r7, #88]	; 0x58
    aba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    aba4:	211e      	movs	r1, #30
    aba6:	0018      	movs	r0, r3
    aba8:	f7ff fc5c 	bl	a464 <rotlFixed>
    abac:	0003      	movs	r3, r0
    abae:	653b      	str	r3, [r7, #80]	; 0x50
    abb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    abb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    abb4:	4053      	eors	r3, r2
    abb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    abb8:	401a      	ands	r2, r3
    abba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    abbc:	405a      	eors	r2, r3
    abbe:	0014      	movs	r4, r2
    abc0:	230c      	movs	r3, #12
    abc2:	18fb      	adds	r3, r7, r3
    abc4:	681a      	ldr	r2, [r3, #0]
    abc6:	230c      	movs	r3, #12
    abc8:	18fb      	adds	r3, r7, r3
    abca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    abcc:	405a      	eors	r2, r3
    abce:	230c      	movs	r3, #12
    abd0:	18fb      	adds	r3, r7, r3
    abd2:	695b      	ldr	r3, [r3, #20]
    abd4:	405a      	eors	r2, r3
    abd6:	230c      	movs	r3, #12
    abd8:	18fb      	adds	r3, r7, r3
    abda:	68db      	ldr	r3, [r3, #12]
    abdc:	4053      	eors	r3, r2
    abde:	2101      	movs	r1, #1
    abe0:	0018      	movs	r0, r3
    abe2:	f7ff fc3f 	bl	a464 <rotlFixed>
    abe6:	0002      	movs	r2, r0
    abe8:	230c      	movs	r3, #12
    abea:	18fb      	adds	r3, r7, r3
    abec:	60da      	str	r2, [r3, #12]
    abee:	230c      	movs	r3, #12
    abf0:	18fb      	adds	r3, r7, r3
    abf2:	68db      	ldr	r3, [r3, #12]
    abf4:	18e4      	adds	r4, r4, r3
    abf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    abf8:	2105      	movs	r1, #5
    abfa:	0018      	movs	r0, r3
    abfc:	f7ff fc32 	bl	a464 <rotlFixed>
    ac00:	0003      	movs	r3, r0
    ac02:	18e3      	adds	r3, r4, r3
    ac04:	4a90      	ldr	r2, [pc, #576]	; (ae48 <Transform+0x890>)
    ac06:	4694      	mov	ip, r2
    ac08:	4463      	add	r3, ip
    ac0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    ac0c:	18d3      	adds	r3, r2, r3
    ac0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    ac10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ac12:	211e      	movs	r1, #30
    ac14:	0018      	movs	r0, r3
    ac16:	f7ff fc25 	bl	a464 <rotlFixed>
    ac1a:	0003      	movs	r3, r0
    ac1c:	657b      	str	r3, [r7, #84]	; 0x54

        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
    ac1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    ac20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ac22:	405a      	eors	r2, r3
    ac24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ac26:	405a      	eors	r2, r3
    ac28:	0014      	movs	r4, r2
    ac2a:	230c      	movs	r3, #12
    ac2c:	18fb      	adds	r3, r7, r3
    ac2e:	685a      	ldr	r2, [r3, #4]
    ac30:	230c      	movs	r3, #12
    ac32:	18fb      	adds	r3, r7, r3
    ac34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ac36:	405a      	eors	r2, r3
    ac38:	230c      	movs	r3, #12
    ac3a:	18fb      	adds	r3, r7, r3
    ac3c:	699b      	ldr	r3, [r3, #24]
    ac3e:	405a      	eors	r2, r3
    ac40:	230c      	movs	r3, #12
    ac42:	18fb      	adds	r3, r7, r3
    ac44:	691b      	ldr	r3, [r3, #16]
    ac46:	4053      	eors	r3, r2
    ac48:	2101      	movs	r1, #1
    ac4a:	0018      	movs	r0, r3
    ac4c:	f7ff fc0a 	bl	a464 <rotlFixed>
    ac50:	0002      	movs	r2, r0
    ac52:	230c      	movs	r3, #12
    ac54:	18fb      	adds	r3, r7, r3
    ac56:	611a      	str	r2, [r3, #16]
    ac58:	230c      	movs	r3, #12
    ac5a:	18fb      	adds	r3, r7, r3
    ac5c:	691b      	ldr	r3, [r3, #16]
    ac5e:	18e4      	adds	r4, r4, r3
    ac60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ac62:	2105      	movs	r1, #5
    ac64:	0018      	movs	r0, r3
    ac66:	f7ff fbfd 	bl	a464 <rotlFixed>
    ac6a:	0003      	movs	r3, r0
    ac6c:	18e3      	adds	r3, r4, r3
    ac6e:	4a77      	ldr	r2, [pc, #476]	; (ae4c <Transform+0x894>)
    ac70:	4694      	mov	ip, r2
    ac72:	4463      	add	r3, ip
    ac74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    ac76:	18d3      	adds	r3, r2, r3
    ac78:	64fb      	str	r3, [r7, #76]	; 0x4c
    ac7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    ac7c:	211e      	movs	r1, #30
    ac7e:	0018      	movs	r0, r3
    ac80:	f7ff fbf0 	bl	a464 <rotlFixed>
    ac84:	0003      	movs	r3, r0
    ac86:	65bb      	str	r3, [r7, #88]	; 0x58
    ac88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    ac8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    ac8c:	405a      	eors	r2, r3
    ac8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ac90:	405a      	eors	r2, r3
    ac92:	0014      	movs	r4, r2
    ac94:	230c      	movs	r3, #12
    ac96:	18fb      	adds	r3, r7, r3
    ac98:	689a      	ldr	r2, [r3, #8]
    ac9a:	230c      	movs	r3, #12
    ac9c:	18fb      	adds	r3, r7, r3
    ac9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aca0:	405a      	eors	r2, r3
    aca2:	230c      	movs	r3, #12
    aca4:	18fb      	adds	r3, r7, r3
    aca6:	69db      	ldr	r3, [r3, #28]
    aca8:	405a      	eors	r2, r3
    acaa:	230c      	movs	r3, #12
    acac:	18fb      	adds	r3, r7, r3
    acae:	695b      	ldr	r3, [r3, #20]
    acb0:	4053      	eors	r3, r2
    acb2:	2101      	movs	r1, #1
    acb4:	0018      	movs	r0, r3
    acb6:	f7ff fbd5 	bl	a464 <rotlFixed>
    acba:	0002      	movs	r2, r0
    acbc:	230c      	movs	r3, #12
    acbe:	18fb      	adds	r3, r7, r3
    acc0:	615a      	str	r2, [r3, #20]
    acc2:	230c      	movs	r3, #12
    acc4:	18fb      	adds	r3, r7, r3
    acc6:	695b      	ldr	r3, [r3, #20]
    acc8:	18e4      	adds	r4, r4, r3
    acca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    accc:	2105      	movs	r1, #5
    acce:	0018      	movs	r0, r3
    acd0:	f7ff fbc8 	bl	a464 <rotlFixed>
    acd4:	0003      	movs	r3, r0
    acd6:	18e3      	adds	r3, r4, r3
    acd8:	4a5c      	ldr	r2, [pc, #368]	; (ae4c <Transform+0x894>)
    acda:	4694      	mov	ip, r2
    acdc:	4463      	add	r3, ip
    acde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    ace0:	18d3      	adds	r3, r2, r3
    ace2:	653b      	str	r3, [r7, #80]	; 0x50
    ace4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ace6:	211e      	movs	r1, #30
    ace8:	0018      	movs	r0, r3
    acea:	f7ff fbbb 	bl	a464 <rotlFixed>
    acee:	0003      	movs	r3, r0
    acf0:	65fb      	str	r3, [r7, #92]	; 0x5c
    acf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    acf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    acf6:	405a      	eors	r2, r3
    acf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    acfa:	405a      	eors	r2, r3
    acfc:	0014      	movs	r4, r2
    acfe:	230c      	movs	r3, #12
    ad00:	18fb      	adds	r3, r7, r3
    ad02:	68da      	ldr	r2, [r3, #12]
    ad04:	230c      	movs	r3, #12
    ad06:	18fb      	adds	r3, r7, r3
    ad08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ad0a:	405a      	eors	r2, r3
    ad0c:	230c      	movs	r3, #12
    ad0e:	18fb      	adds	r3, r7, r3
    ad10:	6a1b      	ldr	r3, [r3, #32]
    ad12:	405a      	eors	r2, r3
    ad14:	230c      	movs	r3, #12
    ad16:	18fb      	adds	r3, r7, r3
    ad18:	699b      	ldr	r3, [r3, #24]
    ad1a:	4053      	eors	r3, r2
    ad1c:	2101      	movs	r1, #1
    ad1e:	0018      	movs	r0, r3
    ad20:	f7ff fba0 	bl	a464 <rotlFixed>
    ad24:	0002      	movs	r2, r0
    ad26:	230c      	movs	r3, #12
    ad28:	18fb      	adds	r3, r7, r3
    ad2a:	619a      	str	r2, [r3, #24]
    ad2c:	230c      	movs	r3, #12
    ad2e:	18fb      	adds	r3, r7, r3
    ad30:	699b      	ldr	r3, [r3, #24]
    ad32:	18e4      	adds	r4, r4, r3
    ad34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ad36:	2105      	movs	r1, #5
    ad38:	0018      	movs	r0, r3
    ad3a:	f7ff fb93 	bl	a464 <rotlFixed>
    ad3e:	0003      	movs	r3, r0
    ad40:	18e3      	adds	r3, r4, r3
    ad42:	4a42      	ldr	r2, [pc, #264]	; (ae4c <Transform+0x894>)
    ad44:	4694      	mov	ip, r2
    ad46:	4463      	add	r3, ip
    ad48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    ad4a:	18d3      	adds	r3, r2, r3
    ad4c:	657b      	str	r3, [r7, #84]	; 0x54
    ad4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ad50:	211e      	movs	r1, #30
    ad52:	0018      	movs	r0, r3
    ad54:	f7ff fb86 	bl	a464 <rotlFixed>
    ad58:	0003      	movs	r3, r0
    ad5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    ad5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    ad5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ad60:	405a      	eors	r2, r3
    ad62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ad64:	405a      	eors	r2, r3
    ad66:	0014      	movs	r4, r2
    ad68:	230c      	movs	r3, #12
    ad6a:	18fb      	adds	r3, r7, r3
    ad6c:	691a      	ldr	r2, [r3, #16]
    ad6e:	230c      	movs	r3, #12
    ad70:	18fb      	adds	r3, r7, r3
    ad72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ad74:	405a      	eors	r2, r3
    ad76:	230c      	movs	r3, #12
    ad78:	18fb      	adds	r3, r7, r3
    ad7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ad7c:	405a      	eors	r2, r3
    ad7e:	230c      	movs	r3, #12
    ad80:	18fb      	adds	r3, r7, r3
    ad82:	69db      	ldr	r3, [r3, #28]
    ad84:	4053      	eors	r3, r2
    ad86:	2101      	movs	r1, #1
    ad88:	0018      	movs	r0, r3
    ad8a:	f7ff fb6b 	bl	a464 <rotlFixed>
    ad8e:	0002      	movs	r2, r0
    ad90:	230c      	movs	r3, #12
    ad92:	18fb      	adds	r3, r7, r3
    ad94:	61da      	str	r2, [r3, #28]
    ad96:	230c      	movs	r3, #12
    ad98:	18fb      	adds	r3, r7, r3
    ad9a:	69db      	ldr	r3, [r3, #28]
    ad9c:	18e4      	adds	r4, r4, r3
    ad9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ada0:	2105      	movs	r1, #5
    ada2:	0018      	movs	r0, r3
    ada4:	f7ff fb5e 	bl	a464 <rotlFixed>
    ada8:	0003      	movs	r3, r0
    adaa:	18e3      	adds	r3, r4, r3
    adac:	4a27      	ldr	r2, [pc, #156]	; (ae4c <Transform+0x894>)
    adae:	4694      	mov	ip, r2
    adb0:	4463      	add	r3, ip
    adb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
    adb4:	18d3      	adds	r3, r2, r3
    adb6:	65bb      	str	r3, [r7, #88]	; 0x58
    adb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    adba:	211e      	movs	r1, #30
    adbc:	0018      	movs	r0, r3
    adbe:	f7ff fb51 	bl	a464 <rotlFixed>
    adc2:	0003      	movs	r3, r0
    adc4:	653b      	str	r3, [r7, #80]	; 0x50
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
    adc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    adc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    adca:	405a      	eors	r2, r3
    adcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    adce:	405a      	eors	r2, r3
    add0:	0014      	movs	r4, r2
    add2:	230c      	movs	r3, #12
    add4:	18fb      	adds	r3, r7, r3
    add6:	695a      	ldr	r2, [r3, #20]
    add8:	230c      	movs	r3, #12
    adda:	18fb      	adds	r3, r7, r3
    addc:	681b      	ldr	r3, [r3, #0]
    adde:	405a      	eors	r2, r3
    ade0:	230c      	movs	r3, #12
    ade2:	18fb      	adds	r3, r7, r3
    ade4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ade6:	405a      	eors	r2, r3
    ade8:	230c      	movs	r3, #12
    adea:	18fb      	adds	r3, r7, r3
    adec:	6a1b      	ldr	r3, [r3, #32]
    adee:	4053      	eors	r3, r2
    adf0:	2101      	movs	r1, #1
    adf2:	0018      	movs	r0, r3
    adf4:	f7ff fb36 	bl	a464 <rotlFixed>
    adf8:	0002      	movs	r2, r0
    adfa:	230c      	movs	r3, #12
    adfc:	18fb      	adds	r3, r7, r3
    adfe:	621a      	str	r2, [r3, #32]
    ae00:	230c      	movs	r3, #12
    ae02:	18fb      	adds	r3, r7, r3
    ae04:	6a1b      	ldr	r3, [r3, #32]
    ae06:	18e4      	adds	r4, r4, r3
    ae08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    ae0a:	2105      	movs	r1, #5
    ae0c:	0018      	movs	r0, r3
    ae0e:	f7ff fb29 	bl	a464 <rotlFixed>
    ae12:	0003      	movs	r3, r0
    ae14:	18e3      	adds	r3, r4, r3
    ae16:	4a0d      	ldr	r2, [pc, #52]	; (ae4c <Transform+0x894>)
    ae18:	4694      	mov	ip, r2
    ae1a:	4463      	add	r3, ip
    ae1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    ae1e:	18d3      	adds	r3, r2, r3
    ae20:	65fb      	str	r3, [r7, #92]	; 0x5c
    ae22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ae24:	211e      	movs	r1, #30
    ae26:	0018      	movs	r0, r3
    ae28:	f7ff fb1c 	bl	a464 <rotlFixed>
    ae2c:	0003      	movs	r3, r0
    ae2e:	657b      	str	r3, [r7, #84]	; 0x54
    ae30:	6dba      	ldr	r2, [r7, #88]	; 0x58
    ae32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ae34:	405a      	eors	r2, r3
    ae36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ae38:	405a      	eors	r2, r3
    ae3a:	0014      	movs	r4, r2
    ae3c:	230c      	movs	r3, #12
    ae3e:	18fb      	adds	r3, r7, r3
    ae40:	699a      	ldr	r2, [r3, #24]
    ae42:	230c      	movs	r3, #12
    ae44:	e004      	b.n	ae50 <Transform+0x898>
    ae46:	46c0      	nop			; (mov r8, r8)
    ae48:	5a827999 	.word	0x5a827999
    ae4c:	6ed9eba1 	.word	0x6ed9eba1
    ae50:	18fb      	adds	r3, r7, r3
    ae52:	685b      	ldr	r3, [r3, #4]
    ae54:	405a      	eors	r2, r3
    ae56:	230c      	movs	r3, #12
    ae58:	18fb      	adds	r3, r7, r3
    ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ae5c:	405a      	eors	r2, r3
    ae5e:	230c      	movs	r3, #12
    ae60:	18fb      	adds	r3, r7, r3
    ae62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ae64:	4053      	eors	r3, r2
    ae66:	2101      	movs	r1, #1
    ae68:	0018      	movs	r0, r3
    ae6a:	f7ff fafb 	bl	a464 <rotlFixed>
    ae6e:	0002      	movs	r2, r0
    ae70:	230c      	movs	r3, #12
    ae72:	18fb      	adds	r3, r7, r3
    ae74:	625a      	str	r2, [r3, #36]	; 0x24
    ae76:	230c      	movs	r3, #12
    ae78:	18fb      	adds	r3, r7, r3
    ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ae7c:	18e4      	adds	r4, r4, r3
    ae7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ae80:	2105      	movs	r1, #5
    ae82:	0018      	movs	r0, r3
    ae84:	f7ff faee 	bl	a464 <rotlFixed>
    ae88:	0003      	movs	r3, r0
    ae8a:	18e3      	adds	r3, r4, r3
    ae8c:	4afe      	ldr	r2, [pc, #1016]	; (b288 <Transform+0xcd0>)
    ae8e:	4694      	mov	ip, r2
    ae90:	4463      	add	r3, ip
    ae92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    ae94:	18d3      	adds	r3, r2, r3
    ae96:	64fb      	str	r3, [r7, #76]	; 0x4c
    ae98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    ae9a:	211e      	movs	r1, #30
    ae9c:	0018      	movs	r0, r3
    ae9e:	f7ff fae1 	bl	a464 <rotlFixed>
    aea2:	0003      	movs	r3, r0
    aea4:	65bb      	str	r3, [r7, #88]	; 0x58
    aea6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    aea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    aeaa:	405a      	eors	r2, r3
    aeac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    aeae:	405a      	eors	r2, r3
    aeb0:	0014      	movs	r4, r2
    aeb2:	230c      	movs	r3, #12
    aeb4:	18fb      	adds	r3, r7, r3
    aeb6:	69da      	ldr	r2, [r3, #28]
    aeb8:	230c      	movs	r3, #12
    aeba:	18fb      	adds	r3, r7, r3
    aebc:	689b      	ldr	r3, [r3, #8]
    aebe:	405a      	eors	r2, r3
    aec0:	230c      	movs	r3, #12
    aec2:	18fb      	adds	r3, r7, r3
    aec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    aec6:	405a      	eors	r2, r3
    aec8:	230c      	movs	r3, #12
    aeca:	18fb      	adds	r3, r7, r3
    aecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aece:	4053      	eors	r3, r2
    aed0:	2101      	movs	r1, #1
    aed2:	0018      	movs	r0, r3
    aed4:	f7ff fac6 	bl	a464 <rotlFixed>
    aed8:	0002      	movs	r2, r0
    aeda:	230c      	movs	r3, #12
    aedc:	18fb      	adds	r3, r7, r3
    aede:	629a      	str	r2, [r3, #40]	; 0x28
    aee0:	230c      	movs	r3, #12
    aee2:	18fb      	adds	r3, r7, r3
    aee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aee6:	18e4      	adds	r4, r4, r3
    aee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    aeea:	2105      	movs	r1, #5
    aeec:	0018      	movs	r0, r3
    aeee:	f7ff fab9 	bl	a464 <rotlFixed>
    aef2:	0003      	movs	r3, r0
    aef4:	18e3      	adds	r3, r4, r3
    aef6:	4ae4      	ldr	r2, [pc, #912]	; (b288 <Transform+0xcd0>)
    aef8:	4694      	mov	ip, r2
    aefa:	4463      	add	r3, ip
    aefc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    aefe:	18d3      	adds	r3, r2, r3
    af00:	653b      	str	r3, [r7, #80]	; 0x50
    af02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    af04:	211e      	movs	r1, #30
    af06:	0018      	movs	r0, r3
    af08:	f7ff faac 	bl	a464 <rotlFixed>
    af0c:	0003      	movs	r3, r0
    af0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    af10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    af12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    af14:	405a      	eors	r2, r3
    af16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    af18:	405a      	eors	r2, r3
    af1a:	0014      	movs	r4, r2
    af1c:	230c      	movs	r3, #12
    af1e:	18fb      	adds	r3, r7, r3
    af20:	6a1a      	ldr	r2, [r3, #32]
    af22:	230c      	movs	r3, #12
    af24:	18fb      	adds	r3, r7, r3
    af26:	68db      	ldr	r3, [r3, #12]
    af28:	405a      	eors	r2, r3
    af2a:	230c      	movs	r3, #12
    af2c:	18fb      	adds	r3, r7, r3
    af2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    af30:	405a      	eors	r2, r3
    af32:	230c      	movs	r3, #12
    af34:	18fb      	adds	r3, r7, r3
    af36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    af38:	4053      	eors	r3, r2
    af3a:	2101      	movs	r1, #1
    af3c:	0018      	movs	r0, r3
    af3e:	f7ff fa91 	bl	a464 <rotlFixed>
    af42:	0002      	movs	r2, r0
    af44:	230c      	movs	r3, #12
    af46:	18fb      	adds	r3, r7, r3
    af48:	62da      	str	r2, [r3, #44]	; 0x2c
    af4a:	230c      	movs	r3, #12
    af4c:	18fb      	adds	r3, r7, r3
    af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    af50:	18e4      	adds	r4, r4, r3
    af52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    af54:	2105      	movs	r1, #5
    af56:	0018      	movs	r0, r3
    af58:	f7ff fa84 	bl	a464 <rotlFixed>
    af5c:	0003      	movs	r3, r0
    af5e:	18e3      	adds	r3, r4, r3
    af60:	4ac9      	ldr	r2, [pc, #804]	; (b288 <Transform+0xcd0>)
    af62:	4694      	mov	ip, r2
    af64:	4463      	add	r3, ip
    af66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    af68:	18d3      	adds	r3, r2, r3
    af6a:	657b      	str	r3, [r7, #84]	; 0x54
    af6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af6e:	211e      	movs	r1, #30
    af70:	0018      	movs	r0, r3
    af72:	f7ff fa77 	bl	a464 <rotlFixed>
    af76:	0003      	movs	r3, r0
    af78:	64fb      	str	r3, [r7, #76]	; 0x4c
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
    af7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    af7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af7e:	405a      	eors	r2, r3
    af80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    af82:	405a      	eors	r2, r3
    af84:	0014      	movs	r4, r2
    af86:	230c      	movs	r3, #12
    af88:	18fb      	adds	r3, r7, r3
    af8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    af8c:	230c      	movs	r3, #12
    af8e:	18fb      	adds	r3, r7, r3
    af90:	691b      	ldr	r3, [r3, #16]
    af92:	405a      	eors	r2, r3
    af94:	230c      	movs	r3, #12
    af96:	18fb      	adds	r3, r7, r3
    af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    af9a:	405a      	eors	r2, r3
    af9c:	230c      	movs	r3, #12
    af9e:	18fb      	adds	r3, r7, r3
    afa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    afa2:	4053      	eors	r3, r2
    afa4:	2101      	movs	r1, #1
    afa6:	0018      	movs	r0, r3
    afa8:	f7ff fa5c 	bl	a464 <rotlFixed>
    afac:	0002      	movs	r2, r0
    afae:	230c      	movs	r3, #12
    afb0:	18fb      	adds	r3, r7, r3
    afb2:	631a      	str	r2, [r3, #48]	; 0x30
    afb4:	230c      	movs	r3, #12
    afb6:	18fb      	adds	r3, r7, r3
    afb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    afba:	18e4      	adds	r4, r4, r3
    afbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    afbe:	2105      	movs	r1, #5
    afc0:	0018      	movs	r0, r3
    afc2:	f7ff fa4f 	bl	a464 <rotlFixed>
    afc6:	0003      	movs	r3, r0
    afc8:	18e3      	adds	r3, r4, r3
    afca:	4aaf      	ldr	r2, [pc, #700]	; (b288 <Transform+0xcd0>)
    afcc:	4694      	mov	ip, r2
    afce:	4463      	add	r3, ip
    afd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
    afd2:	18d3      	adds	r3, r2, r3
    afd4:	65bb      	str	r3, [r7, #88]	; 0x58
    afd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    afd8:	211e      	movs	r1, #30
    afda:	0018      	movs	r0, r3
    afdc:	f7ff fa42 	bl	a464 <rotlFixed>
    afe0:	0003      	movs	r3, r0
    afe2:	653b      	str	r3, [r7, #80]	; 0x50
    afe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    afe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    afe8:	405a      	eors	r2, r3
    afea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afec:	405a      	eors	r2, r3
    afee:	0014      	movs	r4, r2
    aff0:	230c      	movs	r3, #12
    aff2:	18fb      	adds	r3, r7, r3
    aff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    aff6:	230c      	movs	r3, #12
    aff8:	18fb      	adds	r3, r7, r3
    affa:	695b      	ldr	r3, [r3, #20]
    affc:	405a      	eors	r2, r3
    affe:	230c      	movs	r3, #12
    b000:	18fb      	adds	r3, r7, r3
    b002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b004:	405a      	eors	r2, r3
    b006:	230c      	movs	r3, #12
    b008:	18fb      	adds	r3, r7, r3
    b00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b00c:	4053      	eors	r3, r2
    b00e:	2101      	movs	r1, #1
    b010:	0018      	movs	r0, r3
    b012:	f7ff fa27 	bl	a464 <rotlFixed>
    b016:	0002      	movs	r2, r0
    b018:	230c      	movs	r3, #12
    b01a:	18fb      	adds	r3, r7, r3
    b01c:	635a      	str	r2, [r3, #52]	; 0x34
    b01e:	230c      	movs	r3, #12
    b020:	18fb      	adds	r3, r7, r3
    b022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b024:	18e4      	adds	r4, r4, r3
    b026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b028:	2105      	movs	r1, #5
    b02a:	0018      	movs	r0, r3
    b02c:	f7ff fa1a 	bl	a464 <rotlFixed>
    b030:	0003      	movs	r3, r0
    b032:	18e3      	adds	r3, r4, r3
    b034:	4a94      	ldr	r2, [pc, #592]	; (b288 <Transform+0xcd0>)
    b036:	4694      	mov	ip, r2
    b038:	4463      	add	r3, ip
    b03a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b03c:	18d3      	adds	r3, r2, r3
    b03e:	65fb      	str	r3, [r7, #92]	; 0x5c
    b040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b042:	211e      	movs	r1, #30
    b044:	0018      	movs	r0, r3
    b046:	f7ff fa0d 	bl	a464 <rotlFixed>
    b04a:	0003      	movs	r3, r0
    b04c:	657b      	str	r3, [r7, #84]	; 0x54
    b04e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    b050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b052:	405a      	eors	r2, r3
    b054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b056:	405a      	eors	r2, r3
    b058:	0014      	movs	r4, r2
    b05a:	230c      	movs	r3, #12
    b05c:	18fb      	adds	r3, r7, r3
    b05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b060:	230c      	movs	r3, #12
    b062:	18fb      	adds	r3, r7, r3
    b064:	699b      	ldr	r3, [r3, #24]
    b066:	405a      	eors	r2, r3
    b068:	230c      	movs	r3, #12
    b06a:	18fb      	adds	r3, r7, r3
    b06c:	681b      	ldr	r3, [r3, #0]
    b06e:	405a      	eors	r2, r3
    b070:	230c      	movs	r3, #12
    b072:	18fb      	adds	r3, r7, r3
    b074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b076:	4053      	eors	r3, r2
    b078:	2101      	movs	r1, #1
    b07a:	0018      	movs	r0, r3
    b07c:	f7ff f9f2 	bl	a464 <rotlFixed>
    b080:	0002      	movs	r2, r0
    b082:	230c      	movs	r3, #12
    b084:	18fb      	adds	r3, r7, r3
    b086:	639a      	str	r2, [r3, #56]	; 0x38
    b088:	230c      	movs	r3, #12
    b08a:	18fb      	adds	r3, r7, r3
    b08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b08e:	18e4      	adds	r4, r4, r3
    b090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b092:	2105      	movs	r1, #5
    b094:	0018      	movs	r0, r3
    b096:	f7ff f9e5 	bl	a464 <rotlFixed>
    b09a:	0003      	movs	r3, r0
    b09c:	18e3      	adds	r3, r4, r3
    b09e:	4a7a      	ldr	r2, [pc, #488]	; (b288 <Transform+0xcd0>)
    b0a0:	4694      	mov	ip, r2
    b0a2:	4463      	add	r3, ip
    b0a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b0a6:	18d3      	adds	r3, r2, r3
    b0a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    b0aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b0ac:	211e      	movs	r1, #30
    b0ae:	0018      	movs	r0, r3
    b0b0:	f7ff f9d8 	bl	a464 <rotlFixed>
    b0b4:	0003      	movs	r3, r0
    b0b6:	65bb      	str	r3, [r7, #88]	; 0x58
    b0b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b0ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b0bc:	405a      	eors	r2, r3
    b0be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b0c0:	405a      	eors	r2, r3
    b0c2:	0014      	movs	r4, r2
    b0c4:	230c      	movs	r3, #12
    b0c6:	18fb      	adds	r3, r7, r3
    b0c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    b0ca:	230c      	movs	r3, #12
    b0cc:	18fb      	adds	r3, r7, r3
    b0ce:	69db      	ldr	r3, [r3, #28]
    b0d0:	405a      	eors	r2, r3
    b0d2:	230c      	movs	r3, #12
    b0d4:	18fb      	adds	r3, r7, r3
    b0d6:	685b      	ldr	r3, [r3, #4]
    b0d8:	405a      	eors	r2, r3
    b0da:	230c      	movs	r3, #12
    b0dc:	18fb      	adds	r3, r7, r3
    b0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b0e0:	4053      	eors	r3, r2
    b0e2:	2101      	movs	r1, #1
    b0e4:	0018      	movs	r0, r3
    b0e6:	f7ff f9bd 	bl	a464 <rotlFixed>
    b0ea:	0002      	movs	r2, r0
    b0ec:	230c      	movs	r3, #12
    b0ee:	18fb      	adds	r3, r7, r3
    b0f0:	63da      	str	r2, [r3, #60]	; 0x3c
    b0f2:	230c      	movs	r3, #12
    b0f4:	18fb      	adds	r3, r7, r3
    b0f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b0f8:	18e4      	adds	r4, r4, r3
    b0fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0fc:	2105      	movs	r1, #5
    b0fe:	0018      	movs	r0, r3
    b100:	f7ff f9b0 	bl	a464 <rotlFixed>
    b104:	0003      	movs	r3, r0
    b106:	18e3      	adds	r3, r4, r3
    b108:	4a5f      	ldr	r2, [pc, #380]	; (b288 <Transform+0xcd0>)
    b10a:	4694      	mov	ip, r2
    b10c:	4463      	add	r3, ip
    b10e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    b110:	18d3      	adds	r3, r2, r3
    b112:	653b      	str	r3, [r7, #80]	; 0x50
    b114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b116:	211e      	movs	r1, #30
    b118:	0018      	movs	r0, r3
    b11a:	f7ff f9a3 	bl	a464 <rotlFixed>
    b11e:	0003      	movs	r3, r0
    b120:	65fb      	str	r3, [r7, #92]	; 0x5c
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
    b122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b126:	405a      	eors	r2, r3
    b128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b12a:	405a      	eors	r2, r3
    b12c:	0014      	movs	r4, r2
    b12e:	230c      	movs	r3, #12
    b130:	18fb      	adds	r3, r7, r3
    b132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    b134:	230c      	movs	r3, #12
    b136:	18fb      	adds	r3, r7, r3
    b138:	6a1b      	ldr	r3, [r3, #32]
    b13a:	405a      	eors	r2, r3
    b13c:	230c      	movs	r3, #12
    b13e:	18fb      	adds	r3, r7, r3
    b140:	689b      	ldr	r3, [r3, #8]
    b142:	405a      	eors	r2, r3
    b144:	230c      	movs	r3, #12
    b146:	18fb      	adds	r3, r7, r3
    b148:	681b      	ldr	r3, [r3, #0]
    b14a:	4053      	eors	r3, r2
    b14c:	2101      	movs	r1, #1
    b14e:	0018      	movs	r0, r3
    b150:	f7ff f988 	bl	a464 <rotlFixed>
    b154:	0002      	movs	r2, r0
    b156:	230c      	movs	r3, #12
    b158:	18fb      	adds	r3, r7, r3
    b15a:	601a      	str	r2, [r3, #0]
    b15c:	230c      	movs	r3, #12
    b15e:	18fb      	adds	r3, r7, r3
    b160:	681b      	ldr	r3, [r3, #0]
    b162:	18e4      	adds	r4, r4, r3
    b164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b166:	2105      	movs	r1, #5
    b168:	0018      	movs	r0, r3
    b16a:	f7ff f97b 	bl	a464 <rotlFixed>
    b16e:	0003      	movs	r3, r0
    b170:	18e3      	adds	r3, r4, r3
    b172:	4a45      	ldr	r2, [pc, #276]	; (b288 <Transform+0xcd0>)
    b174:	4694      	mov	ip, r2
    b176:	4463      	add	r3, ip
    b178:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b17a:	18d3      	adds	r3, r2, r3
    b17c:	657b      	str	r3, [r7, #84]	; 0x54
    b17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b180:	211e      	movs	r1, #30
    b182:	0018      	movs	r0, r3
    b184:	f7ff f96e 	bl	a464 <rotlFixed>
    b188:	0003      	movs	r3, r0
    b18a:	64fb      	str	r3, [r7, #76]	; 0x4c
    b18c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    b18e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b190:	405a      	eors	r2, r3
    b192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b194:	405a      	eors	r2, r3
    b196:	0014      	movs	r4, r2
    b198:	230c      	movs	r3, #12
    b19a:	18fb      	adds	r3, r7, r3
    b19c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b19e:	230c      	movs	r3, #12
    b1a0:	18fb      	adds	r3, r7, r3
    b1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b1a4:	405a      	eors	r2, r3
    b1a6:	230c      	movs	r3, #12
    b1a8:	18fb      	adds	r3, r7, r3
    b1aa:	68db      	ldr	r3, [r3, #12]
    b1ac:	405a      	eors	r2, r3
    b1ae:	230c      	movs	r3, #12
    b1b0:	18fb      	adds	r3, r7, r3
    b1b2:	685b      	ldr	r3, [r3, #4]
    b1b4:	4053      	eors	r3, r2
    b1b6:	2101      	movs	r1, #1
    b1b8:	0018      	movs	r0, r3
    b1ba:	f7ff f953 	bl	a464 <rotlFixed>
    b1be:	0002      	movs	r2, r0
    b1c0:	230c      	movs	r3, #12
    b1c2:	18fb      	adds	r3, r7, r3
    b1c4:	605a      	str	r2, [r3, #4]
    b1c6:	230c      	movs	r3, #12
    b1c8:	18fb      	adds	r3, r7, r3
    b1ca:	685b      	ldr	r3, [r3, #4]
    b1cc:	18e4      	adds	r4, r4, r3
    b1ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b1d0:	2105      	movs	r1, #5
    b1d2:	0018      	movs	r0, r3
    b1d4:	f7ff f946 	bl	a464 <rotlFixed>
    b1d8:	0003      	movs	r3, r0
    b1da:	18e3      	adds	r3, r4, r3
    b1dc:	4a2a      	ldr	r2, [pc, #168]	; (b288 <Transform+0xcd0>)
    b1de:	4694      	mov	ip, r2
    b1e0:	4463      	add	r3, ip
    b1e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
    b1e4:	18d3      	adds	r3, r2, r3
    b1e6:	65bb      	str	r3, [r7, #88]	; 0x58
    b1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b1ea:	211e      	movs	r1, #30
    b1ec:	0018      	movs	r0, r3
    b1ee:	f7ff f939 	bl	a464 <rotlFixed>
    b1f2:	0003      	movs	r3, r0
    b1f4:	653b      	str	r3, [r7, #80]	; 0x50
    b1f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b1f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b1fa:	405a      	eors	r2, r3
    b1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b1fe:	405a      	eors	r2, r3
    b200:	0014      	movs	r4, r2
    b202:	230c      	movs	r3, #12
    b204:	18fb      	adds	r3, r7, r3
    b206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    b208:	230c      	movs	r3, #12
    b20a:	18fb      	adds	r3, r7, r3
    b20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b20e:	405a      	eors	r2, r3
    b210:	230c      	movs	r3, #12
    b212:	18fb      	adds	r3, r7, r3
    b214:	691b      	ldr	r3, [r3, #16]
    b216:	405a      	eors	r2, r3
    b218:	230c      	movs	r3, #12
    b21a:	18fb      	adds	r3, r7, r3
    b21c:	689b      	ldr	r3, [r3, #8]
    b21e:	4053      	eors	r3, r2
    b220:	2101      	movs	r1, #1
    b222:	0018      	movs	r0, r3
    b224:	f7ff f91e 	bl	a464 <rotlFixed>
    b228:	0002      	movs	r2, r0
    b22a:	230c      	movs	r3, #12
    b22c:	18fb      	adds	r3, r7, r3
    b22e:	609a      	str	r2, [r3, #8]
    b230:	230c      	movs	r3, #12
    b232:	18fb      	adds	r3, r7, r3
    b234:	689b      	ldr	r3, [r3, #8]
    b236:	18e4      	adds	r4, r4, r3
    b238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b23a:	2105      	movs	r1, #5
    b23c:	0018      	movs	r0, r3
    b23e:	f7ff f911 	bl	a464 <rotlFixed>
    b242:	0003      	movs	r3, r0
    b244:	18e3      	adds	r3, r4, r3
    b246:	4a10      	ldr	r2, [pc, #64]	; (b288 <Transform+0xcd0>)
    b248:	4694      	mov	ip, r2
    b24a:	4463      	add	r3, ip
    b24c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b24e:	18d3      	adds	r3, r2, r3
    b250:	65fb      	str	r3, [r7, #92]	; 0x5c
    b252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b254:	211e      	movs	r1, #30
    b256:	0018      	movs	r0, r3
    b258:	f7ff f904 	bl	a464 <rotlFixed>
    b25c:	0003      	movs	r3, r0
    b25e:	657b      	str	r3, [r7, #84]	; 0x54
    b260:	6dba      	ldr	r2, [r7, #88]	; 0x58
    b262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b264:	405a      	eors	r2, r3
    b266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b268:	405a      	eors	r2, r3
    b26a:	0014      	movs	r4, r2
    b26c:	230c      	movs	r3, #12
    b26e:	18fb      	adds	r3, r7, r3
    b270:	681a      	ldr	r2, [r3, #0]
    b272:	230c      	movs	r3, #12
    b274:	18fb      	adds	r3, r7, r3
    b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b278:	405a      	eors	r2, r3
    b27a:	230c      	movs	r3, #12
    b27c:	18fb      	adds	r3, r7, r3
    b27e:	695b      	ldr	r3, [r3, #20]
    b280:	405a      	eors	r2, r3
    b282:	230c      	movs	r3, #12
    b284:	e002      	b.n	b28c <Transform+0xcd4>
    b286:	46c0      	nop			; (mov r8, r8)
    b288:	6ed9eba1 	.word	0x6ed9eba1
    b28c:	18fb      	adds	r3, r7, r3
    b28e:	68db      	ldr	r3, [r3, #12]
    b290:	4053      	eors	r3, r2
    b292:	2101      	movs	r1, #1
    b294:	0018      	movs	r0, r3
    b296:	f7ff f8e5 	bl	a464 <rotlFixed>
    b29a:	0002      	movs	r2, r0
    b29c:	230c      	movs	r3, #12
    b29e:	18fb      	adds	r3, r7, r3
    b2a0:	60da      	str	r2, [r3, #12]
    b2a2:	230c      	movs	r3, #12
    b2a4:	18fb      	adds	r3, r7, r3
    b2a6:	68db      	ldr	r3, [r3, #12]
    b2a8:	18e4      	adds	r4, r4, r3
    b2aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b2ac:	2105      	movs	r1, #5
    b2ae:	0018      	movs	r0, r3
    b2b0:	f7ff f8d8 	bl	a464 <rotlFixed>
    b2b4:	0003      	movs	r3, r0
    b2b6:	18e3      	adds	r3, r4, r3
    b2b8:	4afe      	ldr	r2, [pc, #1016]	; (b6b4 <Transform+0x10fc>)
    b2ba:	4694      	mov	ip, r2
    b2bc:	4463      	add	r3, ip
    b2be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b2c0:	18d3      	adds	r3, r2, r3
    b2c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    b2c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b2c6:	211e      	movs	r1, #30
    b2c8:	0018      	movs	r0, r3
    b2ca:	f7ff f8cb 	bl	a464 <rotlFixed>
    b2ce:	0003      	movs	r3, r0
    b2d0:	65bb      	str	r3, [r7, #88]	; 0x58
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
    b2d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b2d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b2d6:	405a      	eors	r2, r3
    b2d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b2da:	405a      	eors	r2, r3
    b2dc:	0014      	movs	r4, r2
    b2de:	230c      	movs	r3, #12
    b2e0:	18fb      	adds	r3, r7, r3
    b2e2:	685a      	ldr	r2, [r3, #4]
    b2e4:	230c      	movs	r3, #12
    b2e6:	18fb      	adds	r3, r7, r3
    b2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b2ea:	405a      	eors	r2, r3
    b2ec:	230c      	movs	r3, #12
    b2ee:	18fb      	adds	r3, r7, r3
    b2f0:	699b      	ldr	r3, [r3, #24]
    b2f2:	405a      	eors	r2, r3
    b2f4:	230c      	movs	r3, #12
    b2f6:	18fb      	adds	r3, r7, r3
    b2f8:	691b      	ldr	r3, [r3, #16]
    b2fa:	4053      	eors	r3, r2
    b2fc:	2101      	movs	r1, #1
    b2fe:	0018      	movs	r0, r3
    b300:	f7ff f8b0 	bl	a464 <rotlFixed>
    b304:	0002      	movs	r2, r0
    b306:	230c      	movs	r3, #12
    b308:	18fb      	adds	r3, r7, r3
    b30a:	611a      	str	r2, [r3, #16]
    b30c:	230c      	movs	r3, #12
    b30e:	18fb      	adds	r3, r7, r3
    b310:	691b      	ldr	r3, [r3, #16]
    b312:	18e4      	adds	r4, r4, r3
    b314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b316:	2105      	movs	r1, #5
    b318:	0018      	movs	r0, r3
    b31a:	f7ff f8a3 	bl	a464 <rotlFixed>
    b31e:	0003      	movs	r3, r0
    b320:	18e3      	adds	r3, r4, r3
    b322:	4ae4      	ldr	r2, [pc, #912]	; (b6b4 <Transform+0x10fc>)
    b324:	4694      	mov	ip, r2
    b326:	4463      	add	r3, ip
    b328:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    b32a:	18d3      	adds	r3, r2, r3
    b32c:	653b      	str	r3, [r7, #80]	; 0x50
    b32e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b330:	211e      	movs	r1, #30
    b332:	0018      	movs	r0, r3
    b334:	f7ff f896 	bl	a464 <rotlFixed>
    b338:	0003      	movs	r3, r0
    b33a:	65fb      	str	r3, [r7, #92]	; 0x5c
    b33c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b33e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b340:	405a      	eors	r2, r3
    b342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b344:	405a      	eors	r2, r3
    b346:	0014      	movs	r4, r2
    b348:	230c      	movs	r3, #12
    b34a:	18fb      	adds	r3, r7, r3
    b34c:	689a      	ldr	r2, [r3, #8]
    b34e:	230c      	movs	r3, #12
    b350:	18fb      	adds	r3, r7, r3
    b352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b354:	405a      	eors	r2, r3
    b356:	230c      	movs	r3, #12
    b358:	18fb      	adds	r3, r7, r3
    b35a:	69db      	ldr	r3, [r3, #28]
    b35c:	405a      	eors	r2, r3
    b35e:	230c      	movs	r3, #12
    b360:	18fb      	adds	r3, r7, r3
    b362:	695b      	ldr	r3, [r3, #20]
    b364:	4053      	eors	r3, r2
    b366:	2101      	movs	r1, #1
    b368:	0018      	movs	r0, r3
    b36a:	f7ff f87b 	bl	a464 <rotlFixed>
    b36e:	0002      	movs	r2, r0
    b370:	230c      	movs	r3, #12
    b372:	18fb      	adds	r3, r7, r3
    b374:	615a      	str	r2, [r3, #20]
    b376:	230c      	movs	r3, #12
    b378:	18fb      	adds	r3, r7, r3
    b37a:	695b      	ldr	r3, [r3, #20]
    b37c:	18e4      	adds	r4, r4, r3
    b37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b380:	2105      	movs	r1, #5
    b382:	0018      	movs	r0, r3
    b384:	f7ff f86e 	bl	a464 <rotlFixed>
    b388:	0003      	movs	r3, r0
    b38a:	18e3      	adds	r3, r4, r3
    b38c:	4ac9      	ldr	r2, [pc, #804]	; (b6b4 <Transform+0x10fc>)
    b38e:	4694      	mov	ip, r2
    b390:	4463      	add	r3, ip
    b392:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b394:	18d3      	adds	r3, r2, r3
    b396:	657b      	str	r3, [r7, #84]	; 0x54
    b398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b39a:	211e      	movs	r1, #30
    b39c:	0018      	movs	r0, r3
    b39e:	f7ff f861 	bl	a464 <rotlFixed>
    b3a2:	0003      	movs	r3, r0
    b3a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    b3a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    b3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b3aa:	405a      	eors	r2, r3
    b3ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b3ae:	405a      	eors	r2, r3
    b3b0:	0014      	movs	r4, r2
    b3b2:	230c      	movs	r3, #12
    b3b4:	18fb      	adds	r3, r7, r3
    b3b6:	68da      	ldr	r2, [r3, #12]
    b3b8:	230c      	movs	r3, #12
    b3ba:	18fb      	adds	r3, r7, r3
    b3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b3be:	405a      	eors	r2, r3
    b3c0:	230c      	movs	r3, #12
    b3c2:	18fb      	adds	r3, r7, r3
    b3c4:	6a1b      	ldr	r3, [r3, #32]
    b3c6:	405a      	eors	r2, r3
    b3c8:	230c      	movs	r3, #12
    b3ca:	18fb      	adds	r3, r7, r3
    b3cc:	699b      	ldr	r3, [r3, #24]
    b3ce:	4053      	eors	r3, r2
    b3d0:	2101      	movs	r1, #1
    b3d2:	0018      	movs	r0, r3
    b3d4:	f7ff f846 	bl	a464 <rotlFixed>
    b3d8:	0002      	movs	r2, r0
    b3da:	230c      	movs	r3, #12
    b3dc:	18fb      	adds	r3, r7, r3
    b3de:	619a      	str	r2, [r3, #24]
    b3e0:	230c      	movs	r3, #12
    b3e2:	18fb      	adds	r3, r7, r3
    b3e4:	699b      	ldr	r3, [r3, #24]
    b3e6:	18e4      	adds	r4, r4, r3
    b3e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b3ea:	2105      	movs	r1, #5
    b3ec:	0018      	movs	r0, r3
    b3ee:	f7ff f839 	bl	a464 <rotlFixed>
    b3f2:	0003      	movs	r3, r0
    b3f4:	18e3      	adds	r3, r4, r3
    b3f6:	4aaf      	ldr	r2, [pc, #700]	; (b6b4 <Transform+0x10fc>)
    b3f8:	4694      	mov	ip, r2
    b3fa:	4463      	add	r3, ip
    b3fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
    b3fe:	18d3      	adds	r3, r2, r3
    b400:	65bb      	str	r3, [r7, #88]	; 0x58
    b402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b404:	211e      	movs	r1, #30
    b406:	0018      	movs	r0, r3
    b408:	f7ff f82c 	bl	a464 <rotlFixed>
    b40c:	0003      	movs	r3, r0
    b40e:	653b      	str	r3, [r7, #80]	; 0x50
    b410:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b414:	405a      	eors	r2, r3
    b416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b418:	405a      	eors	r2, r3
    b41a:	0014      	movs	r4, r2
    b41c:	230c      	movs	r3, #12
    b41e:	18fb      	adds	r3, r7, r3
    b420:	691a      	ldr	r2, [r3, #16]
    b422:	230c      	movs	r3, #12
    b424:	18fb      	adds	r3, r7, r3
    b426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b428:	405a      	eors	r2, r3
    b42a:	230c      	movs	r3, #12
    b42c:	18fb      	adds	r3, r7, r3
    b42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b430:	405a      	eors	r2, r3
    b432:	230c      	movs	r3, #12
    b434:	18fb      	adds	r3, r7, r3
    b436:	69db      	ldr	r3, [r3, #28]
    b438:	4053      	eors	r3, r2
    b43a:	2101      	movs	r1, #1
    b43c:	0018      	movs	r0, r3
    b43e:	f7ff f811 	bl	a464 <rotlFixed>
    b442:	0002      	movs	r2, r0
    b444:	230c      	movs	r3, #12
    b446:	18fb      	adds	r3, r7, r3
    b448:	61da      	str	r2, [r3, #28]
    b44a:	230c      	movs	r3, #12
    b44c:	18fb      	adds	r3, r7, r3
    b44e:	69db      	ldr	r3, [r3, #28]
    b450:	18e4      	adds	r4, r4, r3
    b452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b454:	2105      	movs	r1, #5
    b456:	0018      	movs	r0, r3
    b458:	f7ff f804 	bl	a464 <rotlFixed>
    b45c:	0003      	movs	r3, r0
    b45e:	18e3      	adds	r3, r4, r3
    b460:	4a94      	ldr	r2, [pc, #592]	; (b6b4 <Transform+0x10fc>)
    b462:	4694      	mov	ip, r2
    b464:	4463      	add	r3, ip
    b466:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b468:	18d3      	adds	r3, r2, r3
    b46a:	65fb      	str	r3, [r7, #92]	; 0x5c
    b46c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b46e:	211e      	movs	r1, #30
    b470:	0018      	movs	r0, r3
    b472:	f7fe fff7 	bl	a464 <rotlFixed>
    b476:	0003      	movs	r3, r0
    b478:	657b      	str	r3, [r7, #84]	; 0x54

        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
    b47a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b47c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b47e:	401a      	ands	r2, r3
    b480:	6db9      	ldr	r1, [r7, #88]	; 0x58
    b482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b484:	430b      	orrs	r3, r1
    b486:	6d39      	ldr	r1, [r7, #80]	; 0x50
    b488:	400b      	ands	r3, r1
    b48a:	431a      	orrs	r2, r3
    b48c:	0014      	movs	r4, r2
    b48e:	230c      	movs	r3, #12
    b490:	18fb      	adds	r3, r7, r3
    b492:	695a      	ldr	r2, [r3, #20]
    b494:	230c      	movs	r3, #12
    b496:	18fb      	adds	r3, r7, r3
    b498:	681b      	ldr	r3, [r3, #0]
    b49a:	405a      	eors	r2, r3
    b49c:	230c      	movs	r3, #12
    b49e:	18fb      	adds	r3, r7, r3
    b4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b4a2:	405a      	eors	r2, r3
    b4a4:	230c      	movs	r3, #12
    b4a6:	18fb      	adds	r3, r7, r3
    b4a8:	6a1b      	ldr	r3, [r3, #32]
    b4aa:	4053      	eors	r3, r2
    b4ac:	2101      	movs	r1, #1
    b4ae:	0018      	movs	r0, r3
    b4b0:	f7fe ffd8 	bl	a464 <rotlFixed>
    b4b4:	0002      	movs	r2, r0
    b4b6:	230c      	movs	r3, #12
    b4b8:	18fb      	adds	r3, r7, r3
    b4ba:	621a      	str	r2, [r3, #32]
    b4bc:	230c      	movs	r3, #12
    b4be:	18fb      	adds	r3, r7, r3
    b4c0:	6a1b      	ldr	r3, [r3, #32]
    b4c2:	18e4      	adds	r4, r4, r3
    b4c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b4c6:	2105      	movs	r1, #5
    b4c8:	0018      	movs	r0, r3
    b4ca:	f7fe ffcb 	bl	a464 <rotlFixed>
    b4ce:	0003      	movs	r3, r0
    b4d0:	18e3      	adds	r3, r4, r3
    b4d2:	4a79      	ldr	r2, [pc, #484]	; (b6b8 <Transform+0x1100>)
    b4d4:	4694      	mov	ip, r2
    b4d6:	4463      	add	r3, ip
    b4d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b4da:	18d3      	adds	r3, r2, r3
    b4dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    b4de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b4e0:	211e      	movs	r1, #30
    b4e2:	0018      	movs	r0, r3
    b4e4:	f7fe ffbe 	bl	a464 <rotlFixed>
    b4e8:	0003      	movs	r3, r0
    b4ea:	65bb      	str	r3, [r7, #88]	; 0x58
    b4ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b4ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
    b4f0:	401a      	ands	r2, r3
    b4f2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    b4f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b4f6:	430b      	orrs	r3, r1
    b4f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
    b4fa:	400b      	ands	r3, r1
    b4fc:	431a      	orrs	r2, r3
    b4fe:	0014      	movs	r4, r2
    b500:	230c      	movs	r3, #12
    b502:	18fb      	adds	r3, r7, r3
    b504:	699a      	ldr	r2, [r3, #24]
    b506:	230c      	movs	r3, #12
    b508:	18fb      	adds	r3, r7, r3
    b50a:	685b      	ldr	r3, [r3, #4]
    b50c:	405a      	eors	r2, r3
    b50e:	230c      	movs	r3, #12
    b510:	18fb      	adds	r3, r7, r3
    b512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b514:	405a      	eors	r2, r3
    b516:	230c      	movs	r3, #12
    b518:	18fb      	adds	r3, r7, r3
    b51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b51c:	4053      	eors	r3, r2
    b51e:	2101      	movs	r1, #1
    b520:	0018      	movs	r0, r3
    b522:	f7fe ff9f 	bl	a464 <rotlFixed>
    b526:	0002      	movs	r2, r0
    b528:	230c      	movs	r3, #12
    b52a:	18fb      	adds	r3, r7, r3
    b52c:	625a      	str	r2, [r3, #36]	; 0x24
    b52e:	230c      	movs	r3, #12
    b530:	18fb      	adds	r3, r7, r3
    b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b534:	18e4      	adds	r4, r4, r3
    b536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b538:	2105      	movs	r1, #5
    b53a:	0018      	movs	r0, r3
    b53c:	f7fe ff92 	bl	a464 <rotlFixed>
    b540:	0003      	movs	r3, r0
    b542:	18e3      	adds	r3, r4, r3
    b544:	4a5c      	ldr	r2, [pc, #368]	; (b6b8 <Transform+0x1100>)
    b546:	4694      	mov	ip, r2
    b548:	4463      	add	r3, ip
    b54a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    b54c:	18d3      	adds	r3, r2, r3
    b54e:	653b      	str	r3, [r7, #80]	; 0x50
    b550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b552:	211e      	movs	r1, #30
    b554:	0018      	movs	r0, r3
    b556:	f7fe ff85 	bl	a464 <rotlFixed>
    b55a:	0003      	movs	r3, r0
    b55c:	65fb      	str	r3, [r7, #92]	; 0x5c
    b55e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b562:	401a      	ands	r2, r3
    b564:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    b566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b568:	430b      	orrs	r3, r1
    b56a:	6db9      	ldr	r1, [r7, #88]	; 0x58
    b56c:	400b      	ands	r3, r1
    b56e:	431a      	orrs	r2, r3
    b570:	0014      	movs	r4, r2
    b572:	230c      	movs	r3, #12
    b574:	18fb      	adds	r3, r7, r3
    b576:	69da      	ldr	r2, [r3, #28]
    b578:	230c      	movs	r3, #12
    b57a:	18fb      	adds	r3, r7, r3
    b57c:	689b      	ldr	r3, [r3, #8]
    b57e:	405a      	eors	r2, r3
    b580:	230c      	movs	r3, #12
    b582:	18fb      	adds	r3, r7, r3
    b584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b586:	405a      	eors	r2, r3
    b588:	230c      	movs	r3, #12
    b58a:	18fb      	adds	r3, r7, r3
    b58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b58e:	4053      	eors	r3, r2
    b590:	2101      	movs	r1, #1
    b592:	0018      	movs	r0, r3
    b594:	f7fe ff66 	bl	a464 <rotlFixed>
    b598:	0002      	movs	r2, r0
    b59a:	230c      	movs	r3, #12
    b59c:	18fb      	adds	r3, r7, r3
    b59e:	629a      	str	r2, [r3, #40]	; 0x28
    b5a0:	230c      	movs	r3, #12
    b5a2:	18fb      	adds	r3, r7, r3
    b5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b5a6:	18e4      	adds	r4, r4, r3
    b5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b5aa:	2105      	movs	r1, #5
    b5ac:	0018      	movs	r0, r3
    b5ae:	f7fe ff59 	bl	a464 <rotlFixed>
    b5b2:	0003      	movs	r3, r0
    b5b4:	18e3      	adds	r3, r4, r3
    b5b6:	4a40      	ldr	r2, [pc, #256]	; (b6b8 <Transform+0x1100>)
    b5b8:	4694      	mov	ip, r2
    b5ba:	4463      	add	r3, ip
    b5bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b5be:	18d3      	adds	r3, r2, r3
    b5c0:	657b      	str	r3, [r7, #84]	; 0x54
    b5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b5c4:	211e      	movs	r1, #30
    b5c6:	0018      	movs	r0, r3
    b5c8:	f7fe ff4c 	bl	a464 <rotlFixed>
    b5cc:	0003      	movs	r3, r0
    b5ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    b5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b5d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b5d4:	401a      	ands	r2, r3
    b5d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
    b5d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b5da:	430b      	orrs	r3, r1
    b5dc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    b5de:	400b      	ands	r3, r1
    b5e0:	431a      	orrs	r2, r3
    b5e2:	0014      	movs	r4, r2
    b5e4:	230c      	movs	r3, #12
    b5e6:	18fb      	adds	r3, r7, r3
    b5e8:	6a1a      	ldr	r2, [r3, #32]
    b5ea:	230c      	movs	r3, #12
    b5ec:	18fb      	adds	r3, r7, r3
    b5ee:	68db      	ldr	r3, [r3, #12]
    b5f0:	405a      	eors	r2, r3
    b5f2:	230c      	movs	r3, #12
    b5f4:	18fb      	adds	r3, r7, r3
    b5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b5f8:	405a      	eors	r2, r3
    b5fa:	230c      	movs	r3, #12
    b5fc:	18fb      	adds	r3, r7, r3
    b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b600:	4053      	eors	r3, r2
    b602:	2101      	movs	r1, #1
    b604:	0018      	movs	r0, r3
    b606:	f7fe ff2d 	bl	a464 <rotlFixed>
    b60a:	0002      	movs	r2, r0
    b60c:	230c      	movs	r3, #12
    b60e:	18fb      	adds	r3, r7, r3
    b610:	62da      	str	r2, [r3, #44]	; 0x2c
    b612:	230c      	movs	r3, #12
    b614:	18fb      	adds	r3, r7, r3
    b616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b618:	18e4      	adds	r4, r4, r3
    b61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b61c:	2105      	movs	r1, #5
    b61e:	0018      	movs	r0, r3
    b620:	f7fe ff20 	bl	a464 <rotlFixed>
    b624:	0003      	movs	r3, r0
    b626:	18e3      	adds	r3, r4, r3
    b628:	4a23      	ldr	r2, [pc, #140]	; (b6b8 <Transform+0x1100>)
    b62a:	4694      	mov	ip, r2
    b62c:	4463      	add	r3, ip
    b62e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    b630:	18d3      	adds	r3, r2, r3
    b632:	65bb      	str	r3, [r7, #88]	; 0x58
    b634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b636:	211e      	movs	r1, #30
    b638:	0018      	movs	r0, r3
    b63a:	f7fe ff13 	bl	a464 <rotlFixed>
    b63e:	0003      	movs	r3, r0
    b640:	653b      	str	r3, [r7, #80]	; 0x50
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
    b642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b644:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    b646:	401a      	ands	r2, r3
    b648:	6d79      	ldr	r1, [r7, #84]	; 0x54
    b64a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b64c:	430b      	orrs	r3, r1
    b64e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    b650:	400b      	ands	r3, r1
    b652:	431a      	orrs	r2, r3
    b654:	0014      	movs	r4, r2
    b656:	230c      	movs	r3, #12
    b658:	18fb      	adds	r3, r7, r3
    b65a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b65c:	230c      	movs	r3, #12
    b65e:	18fb      	adds	r3, r7, r3
    b660:	691b      	ldr	r3, [r3, #16]
    b662:	405a      	eors	r2, r3
    b664:	230c      	movs	r3, #12
    b666:	18fb      	adds	r3, r7, r3
    b668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b66a:	405a      	eors	r2, r3
    b66c:	230c      	movs	r3, #12
    b66e:	18fb      	adds	r3, r7, r3
    b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b672:	4053      	eors	r3, r2
    b674:	2101      	movs	r1, #1
    b676:	0018      	movs	r0, r3
    b678:	f7fe fef4 	bl	a464 <rotlFixed>
    b67c:	0002      	movs	r2, r0
    b67e:	230c      	movs	r3, #12
    b680:	18fb      	adds	r3, r7, r3
    b682:	631a      	str	r2, [r3, #48]	; 0x30
    b684:	230c      	movs	r3, #12
    b686:	18fb      	adds	r3, r7, r3
    b688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b68a:	18e4      	adds	r4, r4, r3
    b68c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b68e:	2105      	movs	r1, #5
    b690:	0018      	movs	r0, r3
    b692:	f7fe fee7 	bl	a464 <rotlFixed>
    b696:	0003      	movs	r3, r0
    b698:	18e3      	adds	r3, r4, r3
    b69a:	4a07      	ldr	r2, [pc, #28]	; (b6b8 <Transform+0x1100>)
    b69c:	4694      	mov	ip, r2
    b69e:	4463      	add	r3, ip
    b6a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b6a2:	18d3      	adds	r3, r2, r3
    b6a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    b6a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b6a8:	211e      	movs	r1, #30
    b6aa:	0018      	movs	r0, r3
    b6ac:	f7fe feda 	bl	a464 <rotlFixed>
    b6b0:	e004      	b.n	b6bc <Transform+0x1104>
    b6b2:	46c0      	nop			; (mov r8, r8)
    b6b4:	6ed9eba1 	.word	0x6ed9eba1
    b6b8:	8f1bbcdc 	.word	0x8f1bbcdc
    b6bc:	0003      	movs	r3, r0
    b6be:	657b      	str	r3, [r7, #84]	; 0x54
    b6c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b6c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b6c4:	401a      	ands	r2, r3
    b6c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
    b6c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b6ca:	430b      	orrs	r3, r1
    b6cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
    b6ce:	400b      	ands	r3, r1
    b6d0:	431a      	orrs	r2, r3
    b6d2:	0014      	movs	r4, r2
    b6d4:	230c      	movs	r3, #12
    b6d6:	18fb      	adds	r3, r7, r3
    b6d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6da:	230c      	movs	r3, #12
    b6dc:	18fb      	adds	r3, r7, r3
    b6de:	695b      	ldr	r3, [r3, #20]
    b6e0:	405a      	eors	r2, r3
    b6e2:	230c      	movs	r3, #12
    b6e4:	18fb      	adds	r3, r7, r3
    b6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b6e8:	405a      	eors	r2, r3
    b6ea:	230c      	movs	r3, #12
    b6ec:	18fb      	adds	r3, r7, r3
    b6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b6f0:	4053      	eors	r3, r2
    b6f2:	2101      	movs	r1, #1
    b6f4:	0018      	movs	r0, r3
    b6f6:	f7fe feb5 	bl	a464 <rotlFixed>
    b6fa:	0002      	movs	r2, r0
    b6fc:	230c      	movs	r3, #12
    b6fe:	18fb      	adds	r3, r7, r3
    b700:	635a      	str	r2, [r3, #52]	; 0x34
    b702:	230c      	movs	r3, #12
    b704:	18fb      	adds	r3, r7, r3
    b706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b708:	18e4      	adds	r4, r4, r3
    b70a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b70c:	2105      	movs	r1, #5
    b70e:	0018      	movs	r0, r3
    b710:	f7fe fea8 	bl	a464 <rotlFixed>
    b714:	0003      	movs	r3, r0
    b716:	18e3      	adds	r3, r4, r3
    b718:	4afe      	ldr	r2, [pc, #1016]	; (bb14 <Transform+0x155c>)
    b71a:	4694      	mov	ip, r2
    b71c:	4463      	add	r3, ip
    b71e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b720:	18d3      	adds	r3, r2, r3
    b722:	64fb      	str	r3, [r7, #76]	; 0x4c
    b724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b726:	211e      	movs	r1, #30
    b728:	0018      	movs	r0, r3
    b72a:	f7fe fe9b 	bl	a464 <rotlFixed>
    b72e:	0003      	movs	r3, r0
    b730:	65bb      	str	r3, [r7, #88]	; 0x58
    b732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b734:	6dba      	ldr	r2, [r7, #88]	; 0x58
    b736:	401a      	ands	r2, r3
    b738:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    b73a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b73c:	430b      	orrs	r3, r1
    b73e:	6d79      	ldr	r1, [r7, #84]	; 0x54
    b740:	400b      	ands	r3, r1
    b742:	431a      	orrs	r2, r3
    b744:	0014      	movs	r4, r2
    b746:	230c      	movs	r3, #12
    b748:	18fb      	adds	r3, r7, r3
    b74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b74c:	230c      	movs	r3, #12
    b74e:	18fb      	adds	r3, r7, r3
    b750:	699b      	ldr	r3, [r3, #24]
    b752:	405a      	eors	r2, r3
    b754:	230c      	movs	r3, #12
    b756:	18fb      	adds	r3, r7, r3
    b758:	681b      	ldr	r3, [r3, #0]
    b75a:	405a      	eors	r2, r3
    b75c:	230c      	movs	r3, #12
    b75e:	18fb      	adds	r3, r7, r3
    b760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b762:	4053      	eors	r3, r2
    b764:	2101      	movs	r1, #1
    b766:	0018      	movs	r0, r3
    b768:	f7fe fe7c 	bl	a464 <rotlFixed>
    b76c:	0002      	movs	r2, r0
    b76e:	230c      	movs	r3, #12
    b770:	18fb      	adds	r3, r7, r3
    b772:	639a      	str	r2, [r3, #56]	; 0x38
    b774:	230c      	movs	r3, #12
    b776:	18fb      	adds	r3, r7, r3
    b778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b77a:	18e4      	adds	r4, r4, r3
    b77c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b77e:	2105      	movs	r1, #5
    b780:	0018      	movs	r0, r3
    b782:	f7fe fe6f 	bl	a464 <rotlFixed>
    b786:	0003      	movs	r3, r0
    b788:	18e3      	adds	r3, r4, r3
    b78a:	4ae2      	ldr	r2, [pc, #904]	; (bb14 <Transform+0x155c>)
    b78c:	4694      	mov	ip, r2
    b78e:	4463      	add	r3, ip
    b790:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    b792:	18d3      	adds	r3, r2, r3
    b794:	653b      	str	r3, [r7, #80]	; 0x50
    b796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b798:	211e      	movs	r1, #30
    b79a:	0018      	movs	r0, r3
    b79c:	f7fe fe62 	bl	a464 <rotlFixed>
    b7a0:	0003      	movs	r3, r0
    b7a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    b7a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b7a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b7a8:	401a      	ands	r2, r3
    b7aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    b7ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b7ae:	430b      	orrs	r3, r1
    b7b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
    b7b2:	400b      	ands	r3, r1
    b7b4:	431a      	orrs	r2, r3
    b7b6:	0014      	movs	r4, r2
    b7b8:	230c      	movs	r3, #12
    b7ba:	18fb      	adds	r3, r7, r3
    b7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    b7be:	230c      	movs	r3, #12
    b7c0:	18fb      	adds	r3, r7, r3
    b7c2:	69db      	ldr	r3, [r3, #28]
    b7c4:	405a      	eors	r2, r3
    b7c6:	230c      	movs	r3, #12
    b7c8:	18fb      	adds	r3, r7, r3
    b7ca:	685b      	ldr	r3, [r3, #4]
    b7cc:	405a      	eors	r2, r3
    b7ce:	230c      	movs	r3, #12
    b7d0:	18fb      	adds	r3, r7, r3
    b7d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b7d4:	4053      	eors	r3, r2
    b7d6:	2101      	movs	r1, #1
    b7d8:	0018      	movs	r0, r3
    b7da:	f7fe fe43 	bl	a464 <rotlFixed>
    b7de:	0002      	movs	r2, r0
    b7e0:	230c      	movs	r3, #12
    b7e2:	18fb      	adds	r3, r7, r3
    b7e4:	63da      	str	r2, [r3, #60]	; 0x3c
    b7e6:	230c      	movs	r3, #12
    b7e8:	18fb      	adds	r3, r7, r3
    b7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b7ec:	18e4      	adds	r4, r4, r3
    b7ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b7f0:	2105      	movs	r1, #5
    b7f2:	0018      	movs	r0, r3
    b7f4:	f7fe fe36 	bl	a464 <rotlFixed>
    b7f8:	0003      	movs	r3, r0
    b7fa:	18e3      	adds	r3, r4, r3
    b7fc:	4ac5      	ldr	r2, [pc, #788]	; (bb14 <Transform+0x155c>)
    b7fe:	4694      	mov	ip, r2
    b800:	4463      	add	r3, ip
    b802:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b804:	18d3      	adds	r3, r2, r3
    b806:	657b      	str	r3, [r7, #84]	; 0x54
    b808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b80a:	211e      	movs	r1, #30
    b80c:	0018      	movs	r0, r3
    b80e:	f7fe fe29 	bl	a464 <rotlFixed>
    b812:	0003      	movs	r3, r0
    b814:	64fb      	str	r3, [r7, #76]	; 0x4c
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
    b816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b81a:	401a      	ands	r2, r3
    b81c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    b81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b820:	430b      	orrs	r3, r1
    b822:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    b824:	400b      	ands	r3, r1
    b826:	431a      	orrs	r2, r3
    b828:	0014      	movs	r4, r2
    b82a:	230c      	movs	r3, #12
    b82c:	18fb      	adds	r3, r7, r3
    b82e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    b830:	230c      	movs	r3, #12
    b832:	18fb      	adds	r3, r7, r3
    b834:	6a1b      	ldr	r3, [r3, #32]
    b836:	405a      	eors	r2, r3
    b838:	230c      	movs	r3, #12
    b83a:	18fb      	adds	r3, r7, r3
    b83c:	689b      	ldr	r3, [r3, #8]
    b83e:	405a      	eors	r2, r3
    b840:	230c      	movs	r3, #12
    b842:	18fb      	adds	r3, r7, r3
    b844:	681b      	ldr	r3, [r3, #0]
    b846:	4053      	eors	r3, r2
    b848:	2101      	movs	r1, #1
    b84a:	0018      	movs	r0, r3
    b84c:	f7fe fe0a 	bl	a464 <rotlFixed>
    b850:	0002      	movs	r2, r0
    b852:	230c      	movs	r3, #12
    b854:	18fb      	adds	r3, r7, r3
    b856:	601a      	str	r2, [r3, #0]
    b858:	230c      	movs	r3, #12
    b85a:	18fb      	adds	r3, r7, r3
    b85c:	681b      	ldr	r3, [r3, #0]
    b85e:	18e4      	adds	r4, r4, r3
    b860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b862:	2105      	movs	r1, #5
    b864:	0018      	movs	r0, r3
    b866:	f7fe fdfd 	bl	a464 <rotlFixed>
    b86a:	0003      	movs	r3, r0
    b86c:	18e3      	adds	r3, r4, r3
    b86e:	4aa9      	ldr	r2, [pc, #676]	; (bb14 <Transform+0x155c>)
    b870:	4694      	mov	ip, r2
    b872:	4463      	add	r3, ip
    b874:	6dba      	ldr	r2, [r7, #88]	; 0x58
    b876:	18d3      	adds	r3, r2, r3
    b878:	65bb      	str	r3, [r7, #88]	; 0x58
    b87a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b87c:	211e      	movs	r1, #30
    b87e:	0018      	movs	r0, r3
    b880:	f7fe fdf0 	bl	a464 <rotlFixed>
    b884:	0003      	movs	r3, r0
    b886:	653b      	str	r3, [r7, #80]	; 0x50
    b888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b88a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    b88c:	401a      	ands	r2, r3
    b88e:	6d79      	ldr	r1, [r7, #84]	; 0x54
    b890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b892:	430b      	orrs	r3, r1
    b894:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    b896:	400b      	ands	r3, r1
    b898:	431a      	orrs	r2, r3
    b89a:	0014      	movs	r4, r2
    b89c:	230c      	movs	r3, #12
    b89e:	18fb      	adds	r3, r7, r3
    b8a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b8a2:	230c      	movs	r3, #12
    b8a4:	18fb      	adds	r3, r7, r3
    b8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b8a8:	405a      	eors	r2, r3
    b8aa:	230c      	movs	r3, #12
    b8ac:	18fb      	adds	r3, r7, r3
    b8ae:	68db      	ldr	r3, [r3, #12]
    b8b0:	405a      	eors	r2, r3
    b8b2:	230c      	movs	r3, #12
    b8b4:	18fb      	adds	r3, r7, r3
    b8b6:	685b      	ldr	r3, [r3, #4]
    b8b8:	4053      	eors	r3, r2
    b8ba:	2101      	movs	r1, #1
    b8bc:	0018      	movs	r0, r3
    b8be:	f7fe fdd1 	bl	a464 <rotlFixed>
    b8c2:	0002      	movs	r2, r0
    b8c4:	230c      	movs	r3, #12
    b8c6:	18fb      	adds	r3, r7, r3
    b8c8:	605a      	str	r2, [r3, #4]
    b8ca:	230c      	movs	r3, #12
    b8cc:	18fb      	adds	r3, r7, r3
    b8ce:	685b      	ldr	r3, [r3, #4]
    b8d0:	18e4      	adds	r4, r4, r3
    b8d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b8d4:	2105      	movs	r1, #5
    b8d6:	0018      	movs	r0, r3
    b8d8:	f7fe fdc4 	bl	a464 <rotlFixed>
    b8dc:	0003      	movs	r3, r0
    b8de:	18e3      	adds	r3, r4, r3
    b8e0:	4a8c      	ldr	r2, [pc, #560]	; (bb14 <Transform+0x155c>)
    b8e2:	4694      	mov	ip, r2
    b8e4:	4463      	add	r3, ip
    b8e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b8e8:	18d3      	adds	r3, r2, r3
    b8ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    b8ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b8ee:	211e      	movs	r1, #30
    b8f0:	0018      	movs	r0, r3
    b8f2:	f7fe fdb7 	bl	a464 <rotlFixed>
    b8f6:	0003      	movs	r3, r0
    b8f8:	657b      	str	r3, [r7, #84]	; 0x54
    b8fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b8fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b8fe:	401a      	ands	r2, r3
    b900:	6db9      	ldr	r1, [r7, #88]	; 0x58
    b902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b904:	430b      	orrs	r3, r1
    b906:	6d39      	ldr	r1, [r7, #80]	; 0x50
    b908:	400b      	ands	r3, r1
    b90a:	431a      	orrs	r2, r3
    b90c:	0014      	movs	r4, r2
    b90e:	230c      	movs	r3, #12
    b910:	18fb      	adds	r3, r7, r3
    b912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    b914:	230c      	movs	r3, #12
    b916:	18fb      	adds	r3, r7, r3
    b918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b91a:	405a      	eors	r2, r3
    b91c:	230c      	movs	r3, #12
    b91e:	18fb      	adds	r3, r7, r3
    b920:	691b      	ldr	r3, [r3, #16]
    b922:	405a      	eors	r2, r3
    b924:	230c      	movs	r3, #12
    b926:	18fb      	adds	r3, r7, r3
    b928:	689b      	ldr	r3, [r3, #8]
    b92a:	4053      	eors	r3, r2
    b92c:	2101      	movs	r1, #1
    b92e:	0018      	movs	r0, r3
    b930:	f7fe fd98 	bl	a464 <rotlFixed>
    b934:	0002      	movs	r2, r0
    b936:	230c      	movs	r3, #12
    b938:	18fb      	adds	r3, r7, r3
    b93a:	609a      	str	r2, [r3, #8]
    b93c:	230c      	movs	r3, #12
    b93e:	18fb      	adds	r3, r7, r3
    b940:	689b      	ldr	r3, [r3, #8]
    b942:	18e4      	adds	r4, r4, r3
    b944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b946:	2105      	movs	r1, #5
    b948:	0018      	movs	r0, r3
    b94a:	f7fe fd8b 	bl	a464 <rotlFixed>
    b94e:	0003      	movs	r3, r0
    b950:	18e3      	adds	r3, r4, r3
    b952:	4a70      	ldr	r2, [pc, #448]	; (bb14 <Transform+0x155c>)
    b954:	4694      	mov	ip, r2
    b956:	4463      	add	r3, ip
    b958:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b95a:	18d3      	adds	r3, r2, r3
    b95c:	64fb      	str	r3, [r7, #76]	; 0x4c
    b95e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b960:	211e      	movs	r1, #30
    b962:	0018      	movs	r0, r3
    b964:	f7fe fd7e 	bl	a464 <rotlFixed>
    b968:	0003      	movs	r3, r0
    b96a:	65bb      	str	r3, [r7, #88]	; 0x58
    b96c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b96e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    b970:	401a      	ands	r2, r3
    b972:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    b974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    b976:	430b      	orrs	r3, r1
    b978:	6d79      	ldr	r1, [r7, #84]	; 0x54
    b97a:	400b      	ands	r3, r1
    b97c:	431a      	orrs	r2, r3
    b97e:	0014      	movs	r4, r2
    b980:	230c      	movs	r3, #12
    b982:	18fb      	adds	r3, r7, r3
    b984:	681a      	ldr	r2, [r3, #0]
    b986:	230c      	movs	r3, #12
    b988:	18fb      	adds	r3, r7, r3
    b98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b98c:	405a      	eors	r2, r3
    b98e:	230c      	movs	r3, #12
    b990:	18fb      	adds	r3, r7, r3
    b992:	695b      	ldr	r3, [r3, #20]
    b994:	405a      	eors	r2, r3
    b996:	230c      	movs	r3, #12
    b998:	18fb      	adds	r3, r7, r3
    b99a:	68db      	ldr	r3, [r3, #12]
    b99c:	4053      	eors	r3, r2
    b99e:	2101      	movs	r1, #1
    b9a0:	0018      	movs	r0, r3
    b9a2:	f7fe fd5f 	bl	a464 <rotlFixed>
    b9a6:	0002      	movs	r2, r0
    b9a8:	230c      	movs	r3, #12
    b9aa:	18fb      	adds	r3, r7, r3
    b9ac:	60da      	str	r2, [r3, #12]
    b9ae:	230c      	movs	r3, #12
    b9b0:	18fb      	adds	r3, r7, r3
    b9b2:	68db      	ldr	r3, [r3, #12]
    b9b4:	18e4      	adds	r4, r4, r3
    b9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b9b8:	2105      	movs	r1, #5
    b9ba:	0018      	movs	r0, r3
    b9bc:	f7fe fd52 	bl	a464 <rotlFixed>
    b9c0:	0003      	movs	r3, r0
    b9c2:	18e3      	adds	r3, r4, r3
    b9c4:	4a53      	ldr	r2, [pc, #332]	; (bb14 <Transform+0x155c>)
    b9c6:	4694      	mov	ip, r2
    b9c8:	4463      	add	r3, ip
    b9ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    b9cc:	18d3      	adds	r3, r2, r3
    b9ce:	653b      	str	r3, [r7, #80]	; 0x50
    b9d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b9d2:	211e      	movs	r1, #30
    b9d4:	0018      	movs	r0, r3
    b9d6:	f7fe fd45 	bl	a464 <rotlFixed>
    b9da:	0003      	movs	r3, r0
    b9dc:	65fb      	str	r3, [r7, #92]	; 0x5c
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
    b9de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b9e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b9e2:	401a      	ands	r2, r3
    b9e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    b9e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b9e8:	430b      	orrs	r3, r1
    b9ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
    b9ec:	400b      	ands	r3, r1
    b9ee:	431a      	orrs	r2, r3
    b9f0:	0014      	movs	r4, r2
    b9f2:	230c      	movs	r3, #12
    b9f4:	18fb      	adds	r3, r7, r3
    b9f6:	685a      	ldr	r2, [r3, #4]
    b9f8:	230c      	movs	r3, #12
    b9fa:	18fb      	adds	r3, r7, r3
    b9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b9fe:	405a      	eors	r2, r3
    ba00:	230c      	movs	r3, #12
    ba02:	18fb      	adds	r3, r7, r3
    ba04:	699b      	ldr	r3, [r3, #24]
    ba06:	405a      	eors	r2, r3
    ba08:	230c      	movs	r3, #12
    ba0a:	18fb      	adds	r3, r7, r3
    ba0c:	691b      	ldr	r3, [r3, #16]
    ba0e:	4053      	eors	r3, r2
    ba10:	2101      	movs	r1, #1
    ba12:	0018      	movs	r0, r3
    ba14:	f7fe fd26 	bl	a464 <rotlFixed>
    ba18:	0002      	movs	r2, r0
    ba1a:	230c      	movs	r3, #12
    ba1c:	18fb      	adds	r3, r7, r3
    ba1e:	611a      	str	r2, [r3, #16]
    ba20:	230c      	movs	r3, #12
    ba22:	18fb      	adds	r3, r7, r3
    ba24:	691b      	ldr	r3, [r3, #16]
    ba26:	18e4      	adds	r4, r4, r3
    ba28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ba2a:	2105      	movs	r1, #5
    ba2c:	0018      	movs	r0, r3
    ba2e:	f7fe fd19 	bl	a464 <rotlFixed>
    ba32:	0003      	movs	r3, r0
    ba34:	18e3      	adds	r3, r4, r3
    ba36:	4a37      	ldr	r2, [pc, #220]	; (bb14 <Transform+0x155c>)
    ba38:	4694      	mov	ip, r2
    ba3a:	4463      	add	r3, ip
    ba3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    ba3e:	18d3      	adds	r3, r2, r3
    ba40:	657b      	str	r3, [r7, #84]	; 0x54
    ba42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ba44:	211e      	movs	r1, #30
    ba46:	0018      	movs	r0, r3
    ba48:	f7fe fd0c 	bl	a464 <rotlFixed>
    ba4c:	0003      	movs	r3, r0
    ba4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    ba50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ba52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    ba54:	401a      	ands	r2, r3
    ba56:	6d39      	ldr	r1, [r7, #80]	; 0x50
    ba58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ba5a:	430b      	orrs	r3, r1
    ba5c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    ba5e:	400b      	ands	r3, r1
    ba60:	431a      	orrs	r2, r3
    ba62:	0014      	movs	r4, r2
    ba64:	230c      	movs	r3, #12
    ba66:	18fb      	adds	r3, r7, r3
    ba68:	689a      	ldr	r2, [r3, #8]
    ba6a:	230c      	movs	r3, #12
    ba6c:	18fb      	adds	r3, r7, r3
    ba6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ba70:	405a      	eors	r2, r3
    ba72:	230c      	movs	r3, #12
    ba74:	18fb      	adds	r3, r7, r3
    ba76:	69db      	ldr	r3, [r3, #28]
    ba78:	405a      	eors	r2, r3
    ba7a:	230c      	movs	r3, #12
    ba7c:	18fb      	adds	r3, r7, r3
    ba7e:	695b      	ldr	r3, [r3, #20]
    ba80:	4053      	eors	r3, r2
    ba82:	2101      	movs	r1, #1
    ba84:	0018      	movs	r0, r3
    ba86:	f7fe fced 	bl	a464 <rotlFixed>
    ba8a:	0002      	movs	r2, r0
    ba8c:	230c      	movs	r3, #12
    ba8e:	18fb      	adds	r3, r7, r3
    ba90:	615a      	str	r2, [r3, #20]
    ba92:	230c      	movs	r3, #12
    ba94:	18fb      	adds	r3, r7, r3
    ba96:	695b      	ldr	r3, [r3, #20]
    ba98:	18e4      	adds	r4, r4, r3
    ba9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ba9c:	2105      	movs	r1, #5
    ba9e:	0018      	movs	r0, r3
    baa0:	f7fe fce0 	bl	a464 <rotlFixed>
    baa4:	0003      	movs	r3, r0
    baa6:	18e3      	adds	r3, r4, r3
    baa8:	4a1a      	ldr	r2, [pc, #104]	; (bb14 <Transform+0x155c>)
    baaa:	4694      	mov	ip, r2
    baac:	4463      	add	r3, ip
    baae:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bab0:	18d3      	adds	r3, r2, r3
    bab2:	65bb      	str	r3, [r7, #88]	; 0x58
    bab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bab6:	211e      	movs	r1, #30
    bab8:	0018      	movs	r0, r3
    baba:	f7fe fcd3 	bl	a464 <rotlFixed>
    babe:	0003      	movs	r3, r0
    bac0:	653b      	str	r3, [r7, #80]	; 0x50
    bac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bac4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    bac6:	401a      	ands	r2, r3
    bac8:	6d79      	ldr	r1, [r7, #84]	; 0x54
    baca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bacc:	430b      	orrs	r3, r1
    bace:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    bad0:	400b      	ands	r3, r1
    bad2:	431a      	orrs	r2, r3
    bad4:	0014      	movs	r4, r2
    bad6:	230c      	movs	r3, #12
    bad8:	18fb      	adds	r3, r7, r3
    bada:	68da      	ldr	r2, [r3, #12]
    badc:	230c      	movs	r3, #12
    bade:	18fb      	adds	r3, r7, r3
    bae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    bae2:	405a      	eors	r2, r3
    bae4:	230c      	movs	r3, #12
    bae6:	18fb      	adds	r3, r7, r3
    bae8:	6a1b      	ldr	r3, [r3, #32]
    baea:	405a      	eors	r2, r3
    baec:	230c      	movs	r3, #12
    baee:	18fb      	adds	r3, r7, r3
    baf0:	699b      	ldr	r3, [r3, #24]
    baf2:	4053      	eors	r3, r2
    baf4:	2101      	movs	r1, #1
    baf6:	0018      	movs	r0, r3
    baf8:	f7fe fcb4 	bl	a464 <rotlFixed>
    bafc:	0002      	movs	r2, r0
    bafe:	230c      	movs	r3, #12
    bb00:	18fb      	adds	r3, r7, r3
    bb02:	619a      	str	r2, [r3, #24]
    bb04:	230c      	movs	r3, #12
    bb06:	18fb      	adds	r3, r7, r3
    bb08:	699b      	ldr	r3, [r3, #24]
    bb0a:	18e4      	adds	r4, r4, r3
    bb0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bb0e:	2105      	movs	r1, #5
    bb10:	e002      	b.n	bb18 <Transform+0x1560>
    bb12:	46c0      	nop			; (mov r8, r8)
    bb14:	8f1bbcdc 	.word	0x8f1bbcdc
    bb18:	0018      	movs	r0, r3
    bb1a:	f7fe fca3 	bl	a464 <rotlFixed>
    bb1e:	0003      	movs	r3, r0
    bb20:	18e3      	adds	r3, r4, r3
    bb22:	4afe      	ldr	r2, [pc, #1016]	; (bf1c <Transform+0x1964>)
    bb24:	4694      	mov	ip, r2
    bb26:	4463      	add	r3, ip
    bb28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    bb2a:	18d3      	adds	r3, r2, r3
    bb2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    bb2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bb30:	211e      	movs	r1, #30
    bb32:	0018      	movs	r0, r3
    bb34:	f7fe fc96 	bl	a464 <rotlFixed>
    bb38:	0003      	movs	r3, r0
    bb3a:	657b      	str	r3, [r7, #84]	; 0x54
    bb3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bb3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    bb40:	401a      	ands	r2, r3
    bb42:	6db9      	ldr	r1, [r7, #88]	; 0x58
    bb44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bb46:	430b      	orrs	r3, r1
    bb48:	6d39      	ldr	r1, [r7, #80]	; 0x50
    bb4a:	400b      	ands	r3, r1
    bb4c:	431a      	orrs	r2, r3
    bb4e:	0014      	movs	r4, r2
    bb50:	230c      	movs	r3, #12
    bb52:	18fb      	adds	r3, r7, r3
    bb54:	691a      	ldr	r2, [r3, #16]
    bb56:	230c      	movs	r3, #12
    bb58:	18fb      	adds	r3, r7, r3
    bb5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    bb5c:	405a      	eors	r2, r3
    bb5e:	230c      	movs	r3, #12
    bb60:	18fb      	adds	r3, r7, r3
    bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bb64:	405a      	eors	r2, r3
    bb66:	230c      	movs	r3, #12
    bb68:	18fb      	adds	r3, r7, r3
    bb6a:	69db      	ldr	r3, [r3, #28]
    bb6c:	4053      	eors	r3, r2
    bb6e:	2101      	movs	r1, #1
    bb70:	0018      	movs	r0, r3
    bb72:	f7fe fc77 	bl	a464 <rotlFixed>
    bb76:	0002      	movs	r2, r0
    bb78:	230c      	movs	r3, #12
    bb7a:	18fb      	adds	r3, r7, r3
    bb7c:	61da      	str	r2, [r3, #28]
    bb7e:	230c      	movs	r3, #12
    bb80:	18fb      	adds	r3, r7, r3
    bb82:	69db      	ldr	r3, [r3, #28]
    bb84:	18e4      	adds	r4, r4, r3
    bb86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bb88:	2105      	movs	r1, #5
    bb8a:	0018      	movs	r0, r3
    bb8c:	f7fe fc6a 	bl	a464 <rotlFixed>
    bb90:	0003      	movs	r3, r0
    bb92:	18e3      	adds	r3, r4, r3
    bb94:	4ae1      	ldr	r2, [pc, #900]	; (bf1c <Transform+0x1964>)
    bb96:	4694      	mov	ip, r2
    bb98:	4463      	add	r3, ip
    bb9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    bb9c:	18d3      	adds	r3, r2, r3
    bb9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    bba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bba2:	211e      	movs	r1, #30
    bba4:	0018      	movs	r0, r3
    bba6:	f7fe fc5d 	bl	a464 <rotlFixed>
    bbaa:	0003      	movs	r3, r0
    bbac:	65bb      	str	r3, [r7, #88]	; 0x58
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
    bbae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bbb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bbb2:	401a      	ands	r2, r3
    bbb4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    bbb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bbb8:	430b      	orrs	r3, r1
    bbba:	6d79      	ldr	r1, [r7, #84]	; 0x54
    bbbc:	400b      	ands	r3, r1
    bbbe:	431a      	orrs	r2, r3
    bbc0:	0014      	movs	r4, r2
    bbc2:	230c      	movs	r3, #12
    bbc4:	18fb      	adds	r3, r7, r3
    bbc6:	695a      	ldr	r2, [r3, #20]
    bbc8:	230c      	movs	r3, #12
    bbca:	18fb      	adds	r3, r7, r3
    bbcc:	681b      	ldr	r3, [r3, #0]
    bbce:	405a      	eors	r2, r3
    bbd0:	230c      	movs	r3, #12
    bbd2:	18fb      	adds	r3, r7, r3
    bbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bbd6:	405a      	eors	r2, r3
    bbd8:	230c      	movs	r3, #12
    bbda:	18fb      	adds	r3, r7, r3
    bbdc:	6a1b      	ldr	r3, [r3, #32]
    bbde:	4053      	eors	r3, r2
    bbe0:	2101      	movs	r1, #1
    bbe2:	0018      	movs	r0, r3
    bbe4:	f7fe fc3e 	bl	a464 <rotlFixed>
    bbe8:	0002      	movs	r2, r0
    bbea:	230c      	movs	r3, #12
    bbec:	18fb      	adds	r3, r7, r3
    bbee:	621a      	str	r2, [r3, #32]
    bbf0:	230c      	movs	r3, #12
    bbf2:	18fb      	adds	r3, r7, r3
    bbf4:	6a1b      	ldr	r3, [r3, #32]
    bbf6:	18e4      	adds	r4, r4, r3
    bbf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bbfa:	2105      	movs	r1, #5
    bbfc:	0018      	movs	r0, r3
    bbfe:	f7fe fc31 	bl	a464 <rotlFixed>
    bc02:	0003      	movs	r3, r0
    bc04:	18e3      	adds	r3, r4, r3
    bc06:	4ac5      	ldr	r2, [pc, #788]	; (bf1c <Transform+0x1964>)
    bc08:	4694      	mov	ip, r2
    bc0a:	4463      	add	r3, ip
    bc0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    bc0e:	18d3      	adds	r3, r2, r3
    bc10:	653b      	str	r3, [r7, #80]	; 0x50
    bc12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bc14:	211e      	movs	r1, #30
    bc16:	0018      	movs	r0, r3
    bc18:	f7fe fc24 	bl	a464 <rotlFixed>
    bc1c:	0003      	movs	r3, r0
    bc1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    bc20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bc22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    bc24:	401a      	ands	r2, r3
    bc26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    bc28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bc2a:	430b      	orrs	r3, r1
    bc2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
    bc2e:	400b      	ands	r3, r1
    bc30:	431a      	orrs	r2, r3
    bc32:	0014      	movs	r4, r2
    bc34:	230c      	movs	r3, #12
    bc36:	18fb      	adds	r3, r7, r3
    bc38:	699a      	ldr	r2, [r3, #24]
    bc3a:	230c      	movs	r3, #12
    bc3c:	18fb      	adds	r3, r7, r3
    bc3e:	685b      	ldr	r3, [r3, #4]
    bc40:	405a      	eors	r2, r3
    bc42:	230c      	movs	r3, #12
    bc44:	18fb      	adds	r3, r7, r3
    bc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bc48:	405a      	eors	r2, r3
    bc4a:	230c      	movs	r3, #12
    bc4c:	18fb      	adds	r3, r7, r3
    bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bc50:	4053      	eors	r3, r2
    bc52:	2101      	movs	r1, #1
    bc54:	0018      	movs	r0, r3
    bc56:	f7fe fc05 	bl	a464 <rotlFixed>
    bc5a:	0002      	movs	r2, r0
    bc5c:	230c      	movs	r3, #12
    bc5e:	18fb      	adds	r3, r7, r3
    bc60:	625a      	str	r2, [r3, #36]	; 0x24
    bc62:	230c      	movs	r3, #12
    bc64:	18fb      	adds	r3, r7, r3
    bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bc68:	18e4      	adds	r4, r4, r3
    bc6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bc6c:	2105      	movs	r1, #5
    bc6e:	0018      	movs	r0, r3
    bc70:	f7fe fbf8 	bl	a464 <rotlFixed>
    bc74:	0003      	movs	r3, r0
    bc76:	18e3      	adds	r3, r4, r3
    bc78:	4aa8      	ldr	r2, [pc, #672]	; (bf1c <Transform+0x1964>)
    bc7a:	4694      	mov	ip, r2
    bc7c:	4463      	add	r3, ip
    bc7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    bc80:	18d3      	adds	r3, r2, r3
    bc82:	657b      	str	r3, [r7, #84]	; 0x54
    bc84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bc86:	211e      	movs	r1, #30
    bc88:	0018      	movs	r0, r3
    bc8a:	f7fe fbeb 	bl	a464 <rotlFixed>
    bc8e:	0003      	movs	r3, r0
    bc90:	64fb      	str	r3, [r7, #76]	; 0x4c
    bc92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bc94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    bc96:	401a      	ands	r2, r3
    bc98:	6d39      	ldr	r1, [r7, #80]	; 0x50
    bc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bc9c:	430b      	orrs	r3, r1
    bc9e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    bca0:	400b      	ands	r3, r1
    bca2:	431a      	orrs	r2, r3
    bca4:	0014      	movs	r4, r2
    bca6:	230c      	movs	r3, #12
    bca8:	18fb      	adds	r3, r7, r3
    bcaa:	69da      	ldr	r2, [r3, #28]
    bcac:	230c      	movs	r3, #12
    bcae:	18fb      	adds	r3, r7, r3
    bcb0:	689b      	ldr	r3, [r3, #8]
    bcb2:	405a      	eors	r2, r3
    bcb4:	230c      	movs	r3, #12
    bcb6:	18fb      	adds	r3, r7, r3
    bcb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bcba:	405a      	eors	r2, r3
    bcbc:	230c      	movs	r3, #12
    bcbe:	18fb      	adds	r3, r7, r3
    bcc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bcc2:	4053      	eors	r3, r2
    bcc4:	2101      	movs	r1, #1
    bcc6:	0018      	movs	r0, r3
    bcc8:	f7fe fbcc 	bl	a464 <rotlFixed>
    bccc:	0002      	movs	r2, r0
    bcce:	230c      	movs	r3, #12
    bcd0:	18fb      	adds	r3, r7, r3
    bcd2:	629a      	str	r2, [r3, #40]	; 0x28
    bcd4:	230c      	movs	r3, #12
    bcd6:	18fb      	adds	r3, r7, r3
    bcd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bcda:	18e4      	adds	r4, r4, r3
    bcdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bcde:	2105      	movs	r1, #5
    bce0:	0018      	movs	r0, r3
    bce2:	f7fe fbbf 	bl	a464 <rotlFixed>
    bce6:	0003      	movs	r3, r0
    bce8:	18e3      	adds	r3, r4, r3
    bcea:	4a8c      	ldr	r2, [pc, #560]	; (bf1c <Transform+0x1964>)
    bcec:	4694      	mov	ip, r2
    bcee:	4463      	add	r3, ip
    bcf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bcf2:	18d3      	adds	r3, r2, r3
    bcf4:	65bb      	str	r3, [r7, #88]	; 0x58
    bcf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bcf8:	211e      	movs	r1, #30
    bcfa:	0018      	movs	r0, r3
    bcfc:	f7fe fbb2 	bl	a464 <rotlFixed>
    bd00:	0003      	movs	r3, r0
    bd02:	653b      	str	r3, [r7, #80]	; 0x50
    bd04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bd06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    bd08:	401a      	ands	r2, r3
    bd0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
    bd0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bd0e:	430b      	orrs	r3, r1
    bd10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    bd12:	400b      	ands	r3, r1
    bd14:	431a      	orrs	r2, r3
    bd16:	0014      	movs	r4, r2
    bd18:	230c      	movs	r3, #12
    bd1a:	18fb      	adds	r3, r7, r3
    bd1c:	6a1a      	ldr	r2, [r3, #32]
    bd1e:	230c      	movs	r3, #12
    bd20:	18fb      	adds	r3, r7, r3
    bd22:	68db      	ldr	r3, [r3, #12]
    bd24:	405a      	eors	r2, r3
    bd26:	230c      	movs	r3, #12
    bd28:	18fb      	adds	r3, r7, r3
    bd2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bd2c:	405a      	eors	r2, r3
    bd2e:	230c      	movs	r3, #12
    bd30:	18fb      	adds	r3, r7, r3
    bd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bd34:	4053      	eors	r3, r2
    bd36:	2101      	movs	r1, #1
    bd38:	0018      	movs	r0, r3
    bd3a:	f7fe fb93 	bl	a464 <rotlFixed>
    bd3e:	0002      	movs	r2, r0
    bd40:	230c      	movs	r3, #12
    bd42:	18fb      	adds	r3, r7, r3
    bd44:	62da      	str	r2, [r3, #44]	; 0x2c
    bd46:	230c      	movs	r3, #12
    bd48:	18fb      	adds	r3, r7, r3
    bd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bd4c:	18e4      	adds	r4, r4, r3
    bd4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bd50:	2105      	movs	r1, #5
    bd52:	0018      	movs	r0, r3
    bd54:	f7fe fb86 	bl	a464 <rotlFixed>
    bd58:	0003      	movs	r3, r0
    bd5a:	18e3      	adds	r3, r4, r3
    bd5c:	4a6f      	ldr	r2, [pc, #444]	; (bf1c <Transform+0x1964>)
    bd5e:	4694      	mov	ip, r2
    bd60:	4463      	add	r3, ip
    bd62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    bd64:	18d3      	adds	r3, r2, r3
    bd66:	65fb      	str	r3, [r7, #92]	; 0x5c
    bd68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bd6a:	211e      	movs	r1, #30
    bd6c:	0018      	movs	r0, r3
    bd6e:	f7fe fb79 	bl	a464 <rotlFixed>
    bd72:	0003      	movs	r3, r0
    bd74:	657b      	str	r3, [r7, #84]	; 0x54

        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
    bd76:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bd78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bd7a:	405a      	eors	r2, r3
    bd7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bd7e:	405a      	eors	r2, r3
    bd80:	0014      	movs	r4, r2
    bd82:	230c      	movs	r3, #12
    bd84:	18fb      	adds	r3, r7, r3
    bd86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bd88:	230c      	movs	r3, #12
    bd8a:	18fb      	adds	r3, r7, r3
    bd8c:	691b      	ldr	r3, [r3, #16]
    bd8e:	405a      	eors	r2, r3
    bd90:	230c      	movs	r3, #12
    bd92:	18fb      	adds	r3, r7, r3
    bd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    bd96:	405a      	eors	r2, r3
    bd98:	230c      	movs	r3, #12
    bd9a:	18fb      	adds	r3, r7, r3
    bd9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bd9e:	4053      	eors	r3, r2
    bda0:	2101      	movs	r1, #1
    bda2:	0018      	movs	r0, r3
    bda4:	f7fe fb5e 	bl	a464 <rotlFixed>
    bda8:	0002      	movs	r2, r0
    bdaa:	230c      	movs	r3, #12
    bdac:	18fb      	adds	r3, r7, r3
    bdae:	631a      	str	r2, [r3, #48]	; 0x30
    bdb0:	230c      	movs	r3, #12
    bdb2:	18fb      	adds	r3, r7, r3
    bdb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bdb6:	18e4      	adds	r4, r4, r3
    bdb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bdba:	2105      	movs	r1, #5
    bdbc:	0018      	movs	r0, r3
    bdbe:	f7fe fb51 	bl	a464 <rotlFixed>
    bdc2:	0003      	movs	r3, r0
    bdc4:	18e3      	adds	r3, r4, r3
    bdc6:	4a56      	ldr	r2, [pc, #344]	; (bf20 <Transform+0x1968>)
    bdc8:	4694      	mov	ip, r2
    bdca:	4463      	add	r3, ip
    bdcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    bdce:	18d3      	adds	r3, r2, r3
    bdd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    bdd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bdd4:	211e      	movs	r1, #30
    bdd6:	0018      	movs	r0, r3
    bdd8:	f7fe fb44 	bl	a464 <rotlFixed>
    bddc:	0003      	movs	r3, r0
    bdde:	65bb      	str	r3, [r7, #88]	; 0x58
    bde0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    bde2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bde4:	405a      	eors	r2, r3
    bde6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bde8:	405a      	eors	r2, r3
    bdea:	0014      	movs	r4, r2
    bdec:	230c      	movs	r3, #12
    bdee:	18fb      	adds	r3, r7, r3
    bdf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bdf2:	230c      	movs	r3, #12
    bdf4:	18fb      	adds	r3, r7, r3
    bdf6:	695b      	ldr	r3, [r3, #20]
    bdf8:	405a      	eors	r2, r3
    bdfa:	230c      	movs	r3, #12
    bdfc:	18fb      	adds	r3, r7, r3
    bdfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    be00:	405a      	eors	r2, r3
    be02:	230c      	movs	r3, #12
    be04:	18fb      	adds	r3, r7, r3
    be06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    be08:	4053      	eors	r3, r2
    be0a:	2101      	movs	r1, #1
    be0c:	0018      	movs	r0, r3
    be0e:	f7fe fb29 	bl	a464 <rotlFixed>
    be12:	0002      	movs	r2, r0
    be14:	230c      	movs	r3, #12
    be16:	18fb      	adds	r3, r7, r3
    be18:	635a      	str	r2, [r3, #52]	; 0x34
    be1a:	230c      	movs	r3, #12
    be1c:	18fb      	adds	r3, r7, r3
    be1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    be20:	18e4      	adds	r4, r4, r3
    be22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    be24:	2105      	movs	r1, #5
    be26:	0018      	movs	r0, r3
    be28:	f7fe fb1c 	bl	a464 <rotlFixed>
    be2c:	0003      	movs	r3, r0
    be2e:	18e3      	adds	r3, r4, r3
    be30:	4a3b      	ldr	r2, [pc, #236]	; (bf20 <Transform+0x1968>)
    be32:	4694      	mov	ip, r2
    be34:	4463      	add	r3, ip
    be36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    be38:	18d3      	adds	r3, r2, r3
    be3a:	653b      	str	r3, [r7, #80]	; 0x50
    be3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    be3e:	211e      	movs	r1, #30
    be40:	0018      	movs	r0, r3
    be42:	f7fe fb0f 	bl	a464 <rotlFixed>
    be46:	0003      	movs	r3, r0
    be48:	65fb      	str	r3, [r7, #92]	; 0x5c
    be4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    be4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    be4e:	405a      	eors	r2, r3
    be50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    be52:	405a      	eors	r2, r3
    be54:	0014      	movs	r4, r2
    be56:	230c      	movs	r3, #12
    be58:	18fb      	adds	r3, r7, r3
    be5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    be5c:	230c      	movs	r3, #12
    be5e:	18fb      	adds	r3, r7, r3
    be60:	699b      	ldr	r3, [r3, #24]
    be62:	405a      	eors	r2, r3
    be64:	230c      	movs	r3, #12
    be66:	18fb      	adds	r3, r7, r3
    be68:	681b      	ldr	r3, [r3, #0]
    be6a:	405a      	eors	r2, r3
    be6c:	230c      	movs	r3, #12
    be6e:	18fb      	adds	r3, r7, r3
    be70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    be72:	4053      	eors	r3, r2
    be74:	2101      	movs	r1, #1
    be76:	0018      	movs	r0, r3
    be78:	f7fe faf4 	bl	a464 <rotlFixed>
    be7c:	0002      	movs	r2, r0
    be7e:	230c      	movs	r3, #12
    be80:	18fb      	adds	r3, r7, r3
    be82:	639a      	str	r2, [r3, #56]	; 0x38
    be84:	230c      	movs	r3, #12
    be86:	18fb      	adds	r3, r7, r3
    be88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    be8a:	18e4      	adds	r4, r4, r3
    be8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    be8e:	2105      	movs	r1, #5
    be90:	0018      	movs	r0, r3
    be92:	f7fe fae7 	bl	a464 <rotlFixed>
    be96:	0003      	movs	r3, r0
    be98:	18e3      	adds	r3, r4, r3
    be9a:	4a21      	ldr	r2, [pc, #132]	; (bf20 <Transform+0x1968>)
    be9c:	4694      	mov	ip, r2
    be9e:	4463      	add	r3, ip
    bea0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    bea2:	18d3      	adds	r3, r2, r3
    bea4:	657b      	str	r3, [r7, #84]	; 0x54
    bea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bea8:	211e      	movs	r1, #30
    beaa:	0018      	movs	r0, r3
    beac:	f7fe fada 	bl	a464 <rotlFixed>
    beb0:	0003      	movs	r3, r0
    beb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    beb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    beb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    beb8:	405a      	eors	r2, r3
    beba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bebc:	405a      	eors	r2, r3
    bebe:	0014      	movs	r4, r2
    bec0:	230c      	movs	r3, #12
    bec2:	18fb      	adds	r3, r7, r3
    bec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    bec6:	230c      	movs	r3, #12
    bec8:	18fb      	adds	r3, r7, r3
    beca:	69db      	ldr	r3, [r3, #28]
    becc:	405a      	eors	r2, r3
    bece:	230c      	movs	r3, #12
    bed0:	18fb      	adds	r3, r7, r3
    bed2:	685b      	ldr	r3, [r3, #4]
    bed4:	405a      	eors	r2, r3
    bed6:	230c      	movs	r3, #12
    bed8:	18fb      	adds	r3, r7, r3
    beda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    bedc:	4053      	eors	r3, r2
    bede:	2101      	movs	r1, #1
    bee0:	0018      	movs	r0, r3
    bee2:	f7fe fabf 	bl	a464 <rotlFixed>
    bee6:	0002      	movs	r2, r0
    bee8:	230c      	movs	r3, #12
    beea:	18fb      	adds	r3, r7, r3
    beec:	63da      	str	r2, [r3, #60]	; 0x3c
    beee:	230c      	movs	r3, #12
    bef0:	18fb      	adds	r3, r7, r3
    bef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    bef4:	18e4      	adds	r4, r4, r3
    bef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bef8:	2105      	movs	r1, #5
    befa:	0018      	movs	r0, r3
    befc:	f7fe fab2 	bl	a464 <rotlFixed>
    bf00:	0003      	movs	r3, r0
    bf02:	18e3      	adds	r3, r4, r3
    bf04:	4a06      	ldr	r2, [pc, #24]	; (bf20 <Transform+0x1968>)
    bf06:	4694      	mov	ip, r2
    bf08:	4463      	add	r3, ip
    bf0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bf0c:	18d3      	adds	r3, r2, r3
    bf0e:	65bb      	str	r3, [r7, #88]	; 0x58
    bf10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bf12:	211e      	movs	r1, #30
    bf14:	0018      	movs	r0, r3
    bf16:	f7fe faa5 	bl	a464 <rotlFixed>
    bf1a:	e003      	b.n	bf24 <Transform+0x196c>
    bf1c:	8f1bbcdc 	.word	0x8f1bbcdc
    bf20:	ca62c1d6 	.word	0xca62c1d6
    bf24:	0003      	movs	r3, r0
    bf26:	653b      	str	r3, [r7, #80]	; 0x50
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
    bf28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    bf2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bf2c:	405a      	eors	r2, r3
    bf2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bf30:	405a      	eors	r2, r3
    bf32:	0014      	movs	r4, r2
    bf34:	230c      	movs	r3, #12
    bf36:	18fb      	adds	r3, r7, r3
    bf38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    bf3a:	230c      	movs	r3, #12
    bf3c:	18fb      	adds	r3, r7, r3
    bf3e:	6a1b      	ldr	r3, [r3, #32]
    bf40:	405a      	eors	r2, r3
    bf42:	230c      	movs	r3, #12
    bf44:	18fb      	adds	r3, r7, r3
    bf46:	689b      	ldr	r3, [r3, #8]
    bf48:	405a      	eors	r2, r3
    bf4a:	230c      	movs	r3, #12
    bf4c:	18fb      	adds	r3, r7, r3
    bf4e:	681b      	ldr	r3, [r3, #0]
    bf50:	4053      	eors	r3, r2
    bf52:	2101      	movs	r1, #1
    bf54:	0018      	movs	r0, r3
    bf56:	f7fe fa85 	bl	a464 <rotlFixed>
    bf5a:	0002      	movs	r2, r0
    bf5c:	230c      	movs	r3, #12
    bf5e:	18fb      	adds	r3, r7, r3
    bf60:	601a      	str	r2, [r3, #0]
    bf62:	230c      	movs	r3, #12
    bf64:	18fb      	adds	r3, r7, r3
    bf66:	681b      	ldr	r3, [r3, #0]
    bf68:	18e4      	adds	r4, r4, r3
    bf6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bf6c:	2105      	movs	r1, #5
    bf6e:	0018      	movs	r0, r3
    bf70:	f7fe fa78 	bl	a464 <rotlFixed>
    bf74:	0003      	movs	r3, r0
    bf76:	18e3      	adds	r3, r4, r3
    bf78:	4afe      	ldr	r2, [pc, #1016]	; (c374 <Transform+0x1dbc>)
    bf7a:	4694      	mov	ip, r2
    bf7c:	4463      	add	r3, ip
    bf7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    bf80:	18d3      	adds	r3, r2, r3
    bf82:	65fb      	str	r3, [r7, #92]	; 0x5c
    bf84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bf86:	211e      	movs	r1, #30
    bf88:	0018      	movs	r0, r3
    bf8a:	f7fe fa6b 	bl	a464 <rotlFixed>
    bf8e:	0003      	movs	r3, r0
    bf90:	657b      	str	r3, [r7, #84]	; 0x54
    bf92:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bf94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bf96:	405a      	eors	r2, r3
    bf98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bf9a:	405a      	eors	r2, r3
    bf9c:	0014      	movs	r4, r2
    bf9e:	230c      	movs	r3, #12
    bfa0:	18fb      	adds	r3, r7, r3
    bfa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    bfa4:	230c      	movs	r3, #12
    bfa6:	18fb      	adds	r3, r7, r3
    bfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bfaa:	405a      	eors	r2, r3
    bfac:	230c      	movs	r3, #12
    bfae:	18fb      	adds	r3, r7, r3
    bfb0:	68db      	ldr	r3, [r3, #12]
    bfb2:	405a      	eors	r2, r3
    bfb4:	230c      	movs	r3, #12
    bfb6:	18fb      	adds	r3, r7, r3
    bfb8:	685b      	ldr	r3, [r3, #4]
    bfba:	4053      	eors	r3, r2
    bfbc:	2101      	movs	r1, #1
    bfbe:	0018      	movs	r0, r3
    bfc0:	f7fe fa50 	bl	a464 <rotlFixed>
    bfc4:	0002      	movs	r2, r0
    bfc6:	230c      	movs	r3, #12
    bfc8:	18fb      	adds	r3, r7, r3
    bfca:	605a      	str	r2, [r3, #4]
    bfcc:	230c      	movs	r3, #12
    bfce:	18fb      	adds	r3, r7, r3
    bfd0:	685b      	ldr	r3, [r3, #4]
    bfd2:	18e4      	adds	r4, r4, r3
    bfd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfd6:	2105      	movs	r1, #5
    bfd8:	0018      	movs	r0, r3
    bfda:	f7fe fa43 	bl	a464 <rotlFixed>
    bfde:	0003      	movs	r3, r0
    bfe0:	18e3      	adds	r3, r4, r3
    bfe2:	4ae4      	ldr	r2, [pc, #912]	; (c374 <Transform+0x1dbc>)
    bfe4:	4694      	mov	ip, r2
    bfe6:	4463      	add	r3, ip
    bfe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    bfea:	18d3      	adds	r3, r2, r3
    bfec:	64fb      	str	r3, [r7, #76]	; 0x4c
    bfee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bff0:	211e      	movs	r1, #30
    bff2:	0018      	movs	r0, r3
    bff4:	f7fe fa36 	bl	a464 <rotlFixed>
    bff8:	0003      	movs	r3, r0
    bffa:	65bb      	str	r3, [r7, #88]	; 0x58
    bffc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    bffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c000:	405a      	eors	r2, r3
    c002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c004:	405a      	eors	r2, r3
    c006:	0014      	movs	r4, r2
    c008:	230c      	movs	r3, #12
    c00a:	18fb      	adds	r3, r7, r3
    c00c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    c00e:	230c      	movs	r3, #12
    c010:	18fb      	adds	r3, r7, r3
    c012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c014:	405a      	eors	r2, r3
    c016:	230c      	movs	r3, #12
    c018:	18fb      	adds	r3, r7, r3
    c01a:	691b      	ldr	r3, [r3, #16]
    c01c:	405a      	eors	r2, r3
    c01e:	230c      	movs	r3, #12
    c020:	18fb      	adds	r3, r7, r3
    c022:	689b      	ldr	r3, [r3, #8]
    c024:	4053      	eors	r3, r2
    c026:	2101      	movs	r1, #1
    c028:	0018      	movs	r0, r3
    c02a:	f7fe fa1b 	bl	a464 <rotlFixed>
    c02e:	0002      	movs	r2, r0
    c030:	230c      	movs	r3, #12
    c032:	18fb      	adds	r3, r7, r3
    c034:	609a      	str	r2, [r3, #8]
    c036:	230c      	movs	r3, #12
    c038:	18fb      	adds	r3, r7, r3
    c03a:	689b      	ldr	r3, [r3, #8]
    c03c:	18e4      	adds	r4, r4, r3
    c03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c040:	2105      	movs	r1, #5
    c042:	0018      	movs	r0, r3
    c044:	f7fe fa0e 	bl	a464 <rotlFixed>
    c048:	0003      	movs	r3, r0
    c04a:	18e3      	adds	r3, r4, r3
    c04c:	4ac9      	ldr	r2, [pc, #804]	; (c374 <Transform+0x1dbc>)
    c04e:	4694      	mov	ip, r2
    c050:	4463      	add	r3, ip
    c052:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    c054:	18d3      	adds	r3, r2, r3
    c056:	653b      	str	r3, [r7, #80]	; 0x50
    c058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c05a:	211e      	movs	r1, #30
    c05c:	0018      	movs	r0, r3
    c05e:	f7fe fa01 	bl	a464 <rotlFixed>
    c062:	0003      	movs	r3, r0
    c064:	65fb      	str	r3, [r7, #92]	; 0x5c
    c066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    c068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c06a:	405a      	eors	r2, r3
    c06c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c06e:	405a      	eors	r2, r3
    c070:	0014      	movs	r4, r2
    c072:	230c      	movs	r3, #12
    c074:	18fb      	adds	r3, r7, r3
    c076:	681a      	ldr	r2, [r3, #0]
    c078:	230c      	movs	r3, #12
    c07a:	18fb      	adds	r3, r7, r3
    c07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c07e:	405a      	eors	r2, r3
    c080:	230c      	movs	r3, #12
    c082:	18fb      	adds	r3, r7, r3
    c084:	695b      	ldr	r3, [r3, #20]
    c086:	405a      	eors	r2, r3
    c088:	230c      	movs	r3, #12
    c08a:	18fb      	adds	r3, r7, r3
    c08c:	68db      	ldr	r3, [r3, #12]
    c08e:	4053      	eors	r3, r2
    c090:	2101      	movs	r1, #1
    c092:	0018      	movs	r0, r3
    c094:	f7fe f9e6 	bl	a464 <rotlFixed>
    c098:	0002      	movs	r2, r0
    c09a:	230c      	movs	r3, #12
    c09c:	18fb      	adds	r3, r7, r3
    c09e:	60da      	str	r2, [r3, #12]
    c0a0:	230c      	movs	r3, #12
    c0a2:	18fb      	adds	r3, r7, r3
    c0a4:	68db      	ldr	r3, [r3, #12]
    c0a6:	18e4      	adds	r4, r4, r3
    c0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c0aa:	2105      	movs	r1, #5
    c0ac:	0018      	movs	r0, r3
    c0ae:	f7fe f9d9 	bl	a464 <rotlFixed>
    c0b2:	0003      	movs	r3, r0
    c0b4:	18e3      	adds	r3, r4, r3
    c0b6:	4aaf      	ldr	r2, [pc, #700]	; (c374 <Transform+0x1dbc>)
    c0b8:	4694      	mov	ip, r2
    c0ba:	4463      	add	r3, ip
    c0bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    c0be:	18d3      	adds	r3, r2, r3
    c0c0:	657b      	str	r3, [r7, #84]	; 0x54
    c0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c0c4:	211e      	movs	r1, #30
    c0c6:	0018      	movs	r0, r3
    c0c8:	f7fe f9cc 	bl	a464 <rotlFixed>
    c0cc:	0003      	movs	r3, r0
    c0ce:	64fb      	str	r3, [r7, #76]	; 0x4c
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
    c0d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    c0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c0d4:	405a      	eors	r2, r3
    c0d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c0d8:	405a      	eors	r2, r3
    c0da:	0014      	movs	r4, r2
    c0dc:	230c      	movs	r3, #12
    c0de:	18fb      	adds	r3, r7, r3
    c0e0:	685a      	ldr	r2, [r3, #4]
    c0e2:	230c      	movs	r3, #12
    c0e4:	18fb      	adds	r3, r7, r3
    c0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c0e8:	405a      	eors	r2, r3
    c0ea:	230c      	movs	r3, #12
    c0ec:	18fb      	adds	r3, r7, r3
    c0ee:	699b      	ldr	r3, [r3, #24]
    c0f0:	405a      	eors	r2, r3
    c0f2:	230c      	movs	r3, #12
    c0f4:	18fb      	adds	r3, r7, r3
    c0f6:	691b      	ldr	r3, [r3, #16]
    c0f8:	4053      	eors	r3, r2
    c0fa:	2101      	movs	r1, #1
    c0fc:	0018      	movs	r0, r3
    c0fe:	f7fe f9b1 	bl	a464 <rotlFixed>
    c102:	0002      	movs	r2, r0
    c104:	230c      	movs	r3, #12
    c106:	18fb      	adds	r3, r7, r3
    c108:	611a      	str	r2, [r3, #16]
    c10a:	230c      	movs	r3, #12
    c10c:	18fb      	adds	r3, r7, r3
    c10e:	691b      	ldr	r3, [r3, #16]
    c110:	18e4      	adds	r4, r4, r3
    c112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c114:	2105      	movs	r1, #5
    c116:	0018      	movs	r0, r3
    c118:	f7fe f9a4 	bl	a464 <rotlFixed>
    c11c:	0003      	movs	r3, r0
    c11e:	18e3      	adds	r3, r4, r3
    c120:	4a94      	ldr	r2, [pc, #592]	; (c374 <Transform+0x1dbc>)
    c122:	4694      	mov	ip, r2
    c124:	4463      	add	r3, ip
    c126:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c128:	18d3      	adds	r3, r2, r3
    c12a:	65bb      	str	r3, [r7, #88]	; 0x58
    c12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c12e:	211e      	movs	r1, #30
    c130:	0018      	movs	r0, r3
    c132:	f7fe f997 	bl	a464 <rotlFixed>
    c136:	0003      	movs	r3, r0
    c138:	653b      	str	r3, [r7, #80]	; 0x50
    c13a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    c13c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c13e:	405a      	eors	r2, r3
    c140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c142:	405a      	eors	r2, r3
    c144:	0014      	movs	r4, r2
    c146:	230c      	movs	r3, #12
    c148:	18fb      	adds	r3, r7, r3
    c14a:	689a      	ldr	r2, [r3, #8]
    c14c:	230c      	movs	r3, #12
    c14e:	18fb      	adds	r3, r7, r3
    c150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c152:	405a      	eors	r2, r3
    c154:	230c      	movs	r3, #12
    c156:	18fb      	adds	r3, r7, r3
    c158:	69db      	ldr	r3, [r3, #28]
    c15a:	405a      	eors	r2, r3
    c15c:	230c      	movs	r3, #12
    c15e:	18fb      	adds	r3, r7, r3
    c160:	695b      	ldr	r3, [r3, #20]
    c162:	4053      	eors	r3, r2
    c164:	2101      	movs	r1, #1
    c166:	0018      	movs	r0, r3
    c168:	f7fe f97c 	bl	a464 <rotlFixed>
    c16c:	0002      	movs	r2, r0
    c16e:	230c      	movs	r3, #12
    c170:	18fb      	adds	r3, r7, r3
    c172:	615a      	str	r2, [r3, #20]
    c174:	230c      	movs	r3, #12
    c176:	18fb      	adds	r3, r7, r3
    c178:	695b      	ldr	r3, [r3, #20]
    c17a:	18e4      	adds	r4, r4, r3
    c17c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c17e:	2105      	movs	r1, #5
    c180:	0018      	movs	r0, r3
    c182:	f7fe f96f 	bl	a464 <rotlFixed>
    c186:	0003      	movs	r3, r0
    c188:	18e3      	adds	r3, r4, r3
    c18a:	4a7a      	ldr	r2, [pc, #488]	; (c374 <Transform+0x1dbc>)
    c18c:	4694      	mov	ip, r2
    c18e:	4463      	add	r3, ip
    c190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    c192:	18d3      	adds	r3, r2, r3
    c194:	65fb      	str	r3, [r7, #92]	; 0x5c
    c196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c198:	211e      	movs	r1, #30
    c19a:	0018      	movs	r0, r3
    c19c:	f7fe f962 	bl	a464 <rotlFixed>
    c1a0:	0003      	movs	r3, r0
    c1a2:	657b      	str	r3, [r7, #84]	; 0x54
    c1a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c1a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c1a8:	405a      	eors	r2, r3
    c1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c1ac:	405a      	eors	r2, r3
    c1ae:	0014      	movs	r4, r2
    c1b0:	230c      	movs	r3, #12
    c1b2:	18fb      	adds	r3, r7, r3
    c1b4:	68da      	ldr	r2, [r3, #12]
    c1b6:	230c      	movs	r3, #12
    c1b8:	18fb      	adds	r3, r7, r3
    c1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c1bc:	405a      	eors	r2, r3
    c1be:	230c      	movs	r3, #12
    c1c0:	18fb      	adds	r3, r7, r3
    c1c2:	6a1b      	ldr	r3, [r3, #32]
    c1c4:	405a      	eors	r2, r3
    c1c6:	230c      	movs	r3, #12
    c1c8:	18fb      	adds	r3, r7, r3
    c1ca:	699b      	ldr	r3, [r3, #24]
    c1cc:	4053      	eors	r3, r2
    c1ce:	2101      	movs	r1, #1
    c1d0:	0018      	movs	r0, r3
    c1d2:	f7fe f947 	bl	a464 <rotlFixed>
    c1d6:	0002      	movs	r2, r0
    c1d8:	230c      	movs	r3, #12
    c1da:	18fb      	adds	r3, r7, r3
    c1dc:	619a      	str	r2, [r3, #24]
    c1de:	230c      	movs	r3, #12
    c1e0:	18fb      	adds	r3, r7, r3
    c1e2:	699b      	ldr	r3, [r3, #24]
    c1e4:	18e4      	adds	r4, r4, r3
    c1e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c1e8:	2105      	movs	r1, #5
    c1ea:	0018      	movs	r0, r3
    c1ec:	f7fe f93a 	bl	a464 <rotlFixed>
    c1f0:	0003      	movs	r3, r0
    c1f2:	18e3      	adds	r3, r4, r3
    c1f4:	4a5f      	ldr	r2, [pc, #380]	; (c374 <Transform+0x1dbc>)
    c1f6:	4694      	mov	ip, r2
    c1f8:	4463      	add	r3, ip
    c1fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    c1fc:	18d3      	adds	r3, r2, r3
    c1fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    c200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c202:	211e      	movs	r1, #30
    c204:	0018      	movs	r0, r3
    c206:	f7fe f92d 	bl	a464 <rotlFixed>
    c20a:	0003      	movs	r3, r0
    c20c:	65bb      	str	r3, [r7, #88]	; 0x58
    c20e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    c210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c212:	405a      	eors	r2, r3
    c214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c216:	405a      	eors	r2, r3
    c218:	0014      	movs	r4, r2
    c21a:	230c      	movs	r3, #12
    c21c:	18fb      	adds	r3, r7, r3
    c21e:	691a      	ldr	r2, [r3, #16]
    c220:	230c      	movs	r3, #12
    c222:	18fb      	adds	r3, r7, r3
    c224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c226:	405a      	eors	r2, r3
    c228:	230c      	movs	r3, #12
    c22a:	18fb      	adds	r3, r7, r3
    c22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c22e:	405a      	eors	r2, r3
    c230:	230c      	movs	r3, #12
    c232:	18fb      	adds	r3, r7, r3
    c234:	69db      	ldr	r3, [r3, #28]
    c236:	4053      	eors	r3, r2
    c238:	2101      	movs	r1, #1
    c23a:	0018      	movs	r0, r3
    c23c:	f7fe f912 	bl	a464 <rotlFixed>
    c240:	0002      	movs	r2, r0
    c242:	230c      	movs	r3, #12
    c244:	18fb      	adds	r3, r7, r3
    c246:	61da      	str	r2, [r3, #28]
    c248:	230c      	movs	r3, #12
    c24a:	18fb      	adds	r3, r7, r3
    c24c:	69db      	ldr	r3, [r3, #28]
    c24e:	18e4      	adds	r4, r4, r3
    c250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c252:	2105      	movs	r1, #5
    c254:	0018      	movs	r0, r3
    c256:	f7fe f905 	bl	a464 <rotlFixed>
    c25a:	0003      	movs	r3, r0
    c25c:	18e3      	adds	r3, r4, r3
    c25e:	4a45      	ldr	r2, [pc, #276]	; (c374 <Transform+0x1dbc>)
    c260:	4694      	mov	ip, r2
    c262:	4463      	add	r3, ip
    c264:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    c266:	18d3      	adds	r3, r2, r3
    c268:	653b      	str	r3, [r7, #80]	; 0x50
    c26a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c26c:	211e      	movs	r1, #30
    c26e:	0018      	movs	r0, r3
    c270:	f7fe f8f8 	bl	a464 <rotlFixed>
    c274:	0003      	movs	r3, r0
    c276:	65fb      	str	r3, [r7, #92]	; 0x5c
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
    c278:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    c27a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c27c:	405a      	eors	r2, r3
    c27e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c280:	405a      	eors	r2, r3
    c282:	0014      	movs	r4, r2
    c284:	230c      	movs	r3, #12
    c286:	18fb      	adds	r3, r7, r3
    c288:	695a      	ldr	r2, [r3, #20]
    c28a:	230c      	movs	r3, #12
    c28c:	18fb      	adds	r3, r7, r3
    c28e:	681b      	ldr	r3, [r3, #0]
    c290:	405a      	eors	r2, r3
    c292:	230c      	movs	r3, #12
    c294:	18fb      	adds	r3, r7, r3
    c296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c298:	405a      	eors	r2, r3
    c29a:	230c      	movs	r3, #12
    c29c:	18fb      	adds	r3, r7, r3
    c29e:	6a1b      	ldr	r3, [r3, #32]
    c2a0:	4053      	eors	r3, r2
    c2a2:	2101      	movs	r1, #1
    c2a4:	0018      	movs	r0, r3
    c2a6:	f7fe f8dd 	bl	a464 <rotlFixed>
    c2aa:	0002      	movs	r2, r0
    c2ac:	230c      	movs	r3, #12
    c2ae:	18fb      	adds	r3, r7, r3
    c2b0:	621a      	str	r2, [r3, #32]
    c2b2:	230c      	movs	r3, #12
    c2b4:	18fb      	adds	r3, r7, r3
    c2b6:	6a1b      	ldr	r3, [r3, #32]
    c2b8:	18e4      	adds	r4, r4, r3
    c2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c2bc:	2105      	movs	r1, #5
    c2be:	0018      	movs	r0, r3
    c2c0:	f7fe f8d0 	bl	a464 <rotlFixed>
    c2c4:	0003      	movs	r3, r0
    c2c6:	18e3      	adds	r3, r4, r3
    c2c8:	4a2a      	ldr	r2, [pc, #168]	; (c374 <Transform+0x1dbc>)
    c2ca:	4694      	mov	ip, r2
    c2cc:	4463      	add	r3, ip
    c2ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    c2d0:	18d3      	adds	r3, r2, r3
    c2d2:	657b      	str	r3, [r7, #84]	; 0x54
    c2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c2d6:	211e      	movs	r1, #30
    c2d8:	0018      	movs	r0, r3
    c2da:	f7fe f8c3 	bl	a464 <rotlFixed>
    c2de:	0003      	movs	r3, r0
    c2e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    c2e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    c2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c2e6:	405a      	eors	r2, r3
    c2e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c2ea:	405a      	eors	r2, r3
    c2ec:	0014      	movs	r4, r2
    c2ee:	230c      	movs	r3, #12
    c2f0:	18fb      	adds	r3, r7, r3
    c2f2:	699a      	ldr	r2, [r3, #24]
    c2f4:	230c      	movs	r3, #12
    c2f6:	18fb      	adds	r3, r7, r3
    c2f8:	685b      	ldr	r3, [r3, #4]
    c2fa:	405a      	eors	r2, r3
    c2fc:	230c      	movs	r3, #12
    c2fe:	18fb      	adds	r3, r7, r3
    c300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c302:	405a      	eors	r2, r3
    c304:	230c      	movs	r3, #12
    c306:	18fb      	adds	r3, r7, r3
    c308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c30a:	4053      	eors	r3, r2
    c30c:	2101      	movs	r1, #1
    c30e:	0018      	movs	r0, r3
    c310:	f7fe f8a8 	bl	a464 <rotlFixed>
    c314:	0002      	movs	r2, r0
    c316:	230c      	movs	r3, #12
    c318:	18fb      	adds	r3, r7, r3
    c31a:	625a      	str	r2, [r3, #36]	; 0x24
    c31c:	230c      	movs	r3, #12
    c31e:	18fb      	adds	r3, r7, r3
    c320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c322:	18e4      	adds	r4, r4, r3
    c324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c326:	2105      	movs	r1, #5
    c328:	0018      	movs	r0, r3
    c32a:	f7fe f89b 	bl	a464 <rotlFixed>
    c32e:	0003      	movs	r3, r0
    c330:	18e3      	adds	r3, r4, r3
    c332:	4a10      	ldr	r2, [pc, #64]	; (c374 <Transform+0x1dbc>)
    c334:	4694      	mov	ip, r2
    c336:	4463      	add	r3, ip
    c338:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c33a:	18d3      	adds	r3, r2, r3
    c33c:	65bb      	str	r3, [r7, #88]	; 0x58
    c33e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c340:	211e      	movs	r1, #30
    c342:	0018      	movs	r0, r3
    c344:	f7fe f88e 	bl	a464 <rotlFixed>
    c348:	0003      	movs	r3, r0
    c34a:	653b      	str	r3, [r7, #80]	; 0x50
    c34c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    c34e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c350:	405a      	eors	r2, r3
    c352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c354:	405a      	eors	r2, r3
    c356:	0014      	movs	r4, r2
    c358:	230c      	movs	r3, #12
    c35a:	18fb      	adds	r3, r7, r3
    c35c:	69da      	ldr	r2, [r3, #28]
    c35e:	230c      	movs	r3, #12
    c360:	18fb      	adds	r3, r7, r3
    c362:	689b      	ldr	r3, [r3, #8]
    c364:	405a      	eors	r2, r3
    c366:	230c      	movs	r3, #12
    c368:	18fb      	adds	r3, r7, r3
    c36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c36c:	405a      	eors	r2, r3
    c36e:	230c      	movs	r3, #12
    c370:	e002      	b.n	c378 <Transform+0x1dc0>
    c372:	46c0      	nop			; (mov r8, r8)
    c374:	ca62c1d6 	.word	0xca62c1d6
    c378:	18fb      	adds	r3, r7, r3
    c37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c37c:	4053      	eors	r3, r2
    c37e:	2101      	movs	r1, #1
    c380:	0018      	movs	r0, r3
    c382:	f7fe f86f 	bl	a464 <rotlFixed>
    c386:	0002      	movs	r2, r0
    c388:	230c      	movs	r3, #12
    c38a:	18fb      	adds	r3, r7, r3
    c38c:	629a      	str	r2, [r3, #40]	; 0x28
    c38e:	230c      	movs	r3, #12
    c390:	18fb      	adds	r3, r7, r3
    c392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c394:	18e4      	adds	r4, r4, r3
    c396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c398:	2105      	movs	r1, #5
    c39a:	0018      	movs	r0, r3
    c39c:	f7fe f862 	bl	a464 <rotlFixed>
    c3a0:	0003      	movs	r3, r0
    c3a2:	18e3      	adds	r3, r4, r3
    c3a4:	4a9b      	ldr	r2, [pc, #620]	; (c614 <Transform+0x205c>)
    c3a6:	4694      	mov	ip, r2
    c3a8:	4463      	add	r3, ip
    c3aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    c3ac:	18d3      	adds	r3, r2, r3
    c3ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    c3b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c3b2:	211e      	movs	r1, #30
    c3b4:	0018      	movs	r0, r3
    c3b6:	f7fe f855 	bl	a464 <rotlFixed>
    c3ba:	0003      	movs	r3, r0
    c3bc:	657b      	str	r3, [r7, #84]	; 0x54
    c3be:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c3c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c3c2:	405a      	eors	r2, r3
    c3c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c3c6:	405a      	eors	r2, r3
    c3c8:	0014      	movs	r4, r2
    c3ca:	230c      	movs	r3, #12
    c3cc:	18fb      	adds	r3, r7, r3
    c3ce:	6a1a      	ldr	r2, [r3, #32]
    c3d0:	230c      	movs	r3, #12
    c3d2:	18fb      	adds	r3, r7, r3
    c3d4:	68db      	ldr	r3, [r3, #12]
    c3d6:	405a      	eors	r2, r3
    c3d8:	230c      	movs	r3, #12
    c3da:	18fb      	adds	r3, r7, r3
    c3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c3de:	405a      	eors	r2, r3
    c3e0:	230c      	movs	r3, #12
    c3e2:	18fb      	adds	r3, r7, r3
    c3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c3e6:	4053      	eors	r3, r2
    c3e8:	2101      	movs	r1, #1
    c3ea:	0018      	movs	r0, r3
    c3ec:	f7fe f83a 	bl	a464 <rotlFixed>
    c3f0:	0002      	movs	r2, r0
    c3f2:	230c      	movs	r3, #12
    c3f4:	18fb      	adds	r3, r7, r3
    c3f6:	62da      	str	r2, [r3, #44]	; 0x2c
    c3f8:	230c      	movs	r3, #12
    c3fa:	18fb      	adds	r3, r7, r3
    c3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c3fe:	18e4      	adds	r4, r4, r3
    c400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c402:	2105      	movs	r1, #5
    c404:	0018      	movs	r0, r3
    c406:	f7fe f82d 	bl	a464 <rotlFixed>
    c40a:	0003      	movs	r3, r0
    c40c:	18e3      	adds	r3, r4, r3
    c40e:	4a81      	ldr	r2, [pc, #516]	; (c614 <Transform+0x205c>)
    c410:	4694      	mov	ip, r2
    c412:	4463      	add	r3, ip
    c414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    c416:	18d3      	adds	r3, r2, r3
    c418:	64fb      	str	r3, [r7, #76]	; 0x4c
    c41a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c41c:	211e      	movs	r1, #30
    c41e:	0018      	movs	r0, r3
    c420:	f7fe f820 	bl	a464 <rotlFixed>
    c424:	0003      	movs	r3, r0
    c426:	65bb      	str	r3, [r7, #88]	; 0x58
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
    c428:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    c42a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c42c:	405a      	eors	r2, r3
    c42e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c430:	405a      	eors	r2, r3
    c432:	0014      	movs	r4, r2
    c434:	230c      	movs	r3, #12
    c436:	18fb      	adds	r3, r7, r3
    c438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c43a:	230c      	movs	r3, #12
    c43c:	18fb      	adds	r3, r7, r3
    c43e:	691b      	ldr	r3, [r3, #16]
    c440:	405a      	eors	r2, r3
    c442:	230c      	movs	r3, #12
    c444:	18fb      	adds	r3, r7, r3
    c446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c448:	405a      	eors	r2, r3
    c44a:	230c      	movs	r3, #12
    c44c:	18fb      	adds	r3, r7, r3
    c44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c450:	4053      	eors	r3, r2
    c452:	2101      	movs	r1, #1
    c454:	0018      	movs	r0, r3
    c456:	f7fe f805 	bl	a464 <rotlFixed>
    c45a:	0002      	movs	r2, r0
    c45c:	230c      	movs	r3, #12
    c45e:	18fb      	adds	r3, r7, r3
    c460:	631a      	str	r2, [r3, #48]	; 0x30
    c462:	230c      	movs	r3, #12
    c464:	18fb      	adds	r3, r7, r3
    c466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c468:	18e4      	adds	r4, r4, r3
    c46a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c46c:	2105      	movs	r1, #5
    c46e:	0018      	movs	r0, r3
    c470:	f7fd fff8 	bl	a464 <rotlFixed>
    c474:	0003      	movs	r3, r0
    c476:	18e3      	adds	r3, r4, r3
    c478:	4a66      	ldr	r2, [pc, #408]	; (c614 <Transform+0x205c>)
    c47a:	4694      	mov	ip, r2
    c47c:	4463      	add	r3, ip
    c47e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    c480:	18d3      	adds	r3, r2, r3
    c482:	653b      	str	r3, [r7, #80]	; 0x50
    c484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c486:	211e      	movs	r1, #30
    c488:	0018      	movs	r0, r3
    c48a:	f7fd ffeb 	bl	a464 <rotlFixed>
    c48e:	0003      	movs	r3, r0
    c490:	65fb      	str	r3, [r7, #92]	; 0x5c
    c492:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    c494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c496:	405a      	eors	r2, r3
    c498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c49a:	405a      	eors	r2, r3
    c49c:	0014      	movs	r4, r2
    c49e:	230c      	movs	r3, #12
    c4a0:	18fb      	adds	r3, r7, r3
    c4a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c4a4:	230c      	movs	r3, #12
    c4a6:	18fb      	adds	r3, r7, r3
    c4a8:	695b      	ldr	r3, [r3, #20]
    c4aa:	405a      	eors	r2, r3
    c4ac:	230c      	movs	r3, #12
    c4ae:	18fb      	adds	r3, r7, r3
    c4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c4b2:	405a      	eors	r2, r3
    c4b4:	230c      	movs	r3, #12
    c4b6:	18fb      	adds	r3, r7, r3
    c4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c4ba:	4053      	eors	r3, r2
    c4bc:	2101      	movs	r1, #1
    c4be:	0018      	movs	r0, r3
    c4c0:	f7fd ffd0 	bl	a464 <rotlFixed>
    c4c4:	0002      	movs	r2, r0
    c4c6:	230c      	movs	r3, #12
    c4c8:	18fb      	adds	r3, r7, r3
    c4ca:	635a      	str	r2, [r3, #52]	; 0x34
    c4cc:	230c      	movs	r3, #12
    c4ce:	18fb      	adds	r3, r7, r3
    c4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c4d2:	18e4      	adds	r4, r4, r3
    c4d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c4d6:	2105      	movs	r1, #5
    c4d8:	0018      	movs	r0, r3
    c4da:	f7fd ffc3 	bl	a464 <rotlFixed>
    c4de:	0003      	movs	r3, r0
    c4e0:	18e3      	adds	r3, r4, r3
    c4e2:	4a4c      	ldr	r2, [pc, #304]	; (c614 <Transform+0x205c>)
    c4e4:	4694      	mov	ip, r2
    c4e6:	4463      	add	r3, ip
    c4e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    c4ea:	18d3      	adds	r3, r2, r3
    c4ec:	657b      	str	r3, [r7, #84]	; 0x54
    c4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c4f0:	211e      	movs	r1, #30
    c4f2:	0018      	movs	r0, r3
    c4f4:	f7fd ffb6 	bl	a464 <rotlFixed>
    c4f8:	0003      	movs	r3, r0
    c4fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    c4fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    c4fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c500:	405a      	eors	r2, r3
    c502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c504:	405a      	eors	r2, r3
    c506:	0014      	movs	r4, r2
    c508:	230c      	movs	r3, #12
    c50a:	18fb      	adds	r3, r7, r3
    c50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c50e:	230c      	movs	r3, #12
    c510:	18fb      	adds	r3, r7, r3
    c512:	699b      	ldr	r3, [r3, #24]
    c514:	405a      	eors	r2, r3
    c516:	230c      	movs	r3, #12
    c518:	18fb      	adds	r3, r7, r3
    c51a:	681b      	ldr	r3, [r3, #0]
    c51c:	405a      	eors	r2, r3
    c51e:	230c      	movs	r3, #12
    c520:	18fb      	adds	r3, r7, r3
    c522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c524:	4053      	eors	r3, r2
    c526:	2101      	movs	r1, #1
    c528:	0018      	movs	r0, r3
    c52a:	f7fd ff9b 	bl	a464 <rotlFixed>
    c52e:	0002      	movs	r2, r0
    c530:	230c      	movs	r3, #12
    c532:	18fb      	adds	r3, r7, r3
    c534:	639a      	str	r2, [r3, #56]	; 0x38
    c536:	230c      	movs	r3, #12
    c538:	18fb      	adds	r3, r7, r3
    c53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c53c:	18e4      	adds	r4, r4, r3
    c53e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c540:	2105      	movs	r1, #5
    c542:	0018      	movs	r0, r3
    c544:	f7fd ff8e 	bl	a464 <rotlFixed>
    c548:	0003      	movs	r3, r0
    c54a:	18e3      	adds	r3, r4, r3
    c54c:	4a31      	ldr	r2, [pc, #196]	; (c614 <Transform+0x205c>)
    c54e:	4694      	mov	ip, r2
    c550:	4463      	add	r3, ip
    c552:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c554:	18d3      	adds	r3, r2, r3
    c556:	65bb      	str	r3, [r7, #88]	; 0x58
    c558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c55a:	211e      	movs	r1, #30
    c55c:	0018      	movs	r0, r3
    c55e:	f7fd ff81 	bl	a464 <rotlFixed>
    c562:	0003      	movs	r3, r0
    c564:	653b      	str	r3, [r7, #80]	; 0x50
    c566:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    c568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c56a:	405a      	eors	r2, r3
    c56c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c56e:	405a      	eors	r2, r3
    c570:	0014      	movs	r4, r2
    c572:	230c      	movs	r3, #12
    c574:	18fb      	adds	r3, r7, r3
    c576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    c578:	230c      	movs	r3, #12
    c57a:	18fb      	adds	r3, r7, r3
    c57c:	69db      	ldr	r3, [r3, #28]
    c57e:	405a      	eors	r2, r3
    c580:	230c      	movs	r3, #12
    c582:	18fb      	adds	r3, r7, r3
    c584:	685b      	ldr	r3, [r3, #4]
    c586:	405a      	eors	r2, r3
    c588:	230c      	movs	r3, #12
    c58a:	18fb      	adds	r3, r7, r3
    c58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c58e:	4053      	eors	r3, r2
    c590:	2101      	movs	r1, #1
    c592:	0018      	movs	r0, r3
    c594:	f7fd ff66 	bl	a464 <rotlFixed>
    c598:	0002      	movs	r2, r0
    c59a:	230c      	movs	r3, #12
    c59c:	18fb      	adds	r3, r7, r3
    c59e:	63da      	str	r2, [r3, #60]	; 0x3c
    c5a0:	230c      	movs	r3, #12
    c5a2:	18fb      	adds	r3, r7, r3
    c5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c5a6:	18e4      	adds	r4, r4, r3
    c5a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c5aa:	2105      	movs	r1, #5
    c5ac:	0018      	movs	r0, r3
    c5ae:	f7fd ff59 	bl	a464 <rotlFixed>
    c5b2:	0003      	movs	r3, r0
    c5b4:	18e3      	adds	r3, r4, r3
    c5b6:	4a17      	ldr	r2, [pc, #92]	; (c614 <Transform+0x205c>)
    c5b8:	4694      	mov	ip, r2
    c5ba:	4463      	add	r3, ip
    c5bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    c5be:	18d3      	adds	r3, r2, r3
    c5c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    c5c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c5c4:	211e      	movs	r1, #30
    c5c6:	0018      	movs	r0, r3
    c5c8:	f7fd ff4c 	bl	a464 <rotlFixed>
    c5cc:	0003      	movs	r3, r0
    c5ce:	657b      	str	r3, [r7, #84]	; 0x54
    #endif

        /* Add the working vars back into digest state[] */
        sha->digest[0] += a;
    c5d0:	687b      	ldr	r3, [r7, #4]
    c5d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    c5d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c5d6:	18d2      	adds	r2, r2, r3
    c5d8:	687b      	ldr	r3, [r7, #4]
    c5da:	64da      	str	r2, [r3, #76]	; 0x4c
        sha->digest[1] += b;
    c5dc:	687b      	ldr	r3, [r7, #4]
    c5de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    c5e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c5e2:	18d2      	adds	r2, r2, r3
    c5e4:	687b      	ldr	r3, [r7, #4]
    c5e6:	651a      	str	r2, [r3, #80]	; 0x50
        sha->digest[2] += c;
    c5e8:	687b      	ldr	r3, [r7, #4]
    c5ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    c5ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c5ee:	18d2      	adds	r2, r2, r3
    c5f0:	687b      	ldr	r3, [r7, #4]
    c5f2:	655a      	str	r2, [r3, #84]	; 0x54
        sha->digest[3] += d;
    c5f4:	687b      	ldr	r3, [r7, #4]
    c5f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    c5f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c5fa:	18d2      	adds	r2, r2, r3
    c5fc:	687b      	ldr	r3, [r7, #4]
    c5fe:	659a      	str	r2, [r3, #88]	; 0x58
        sha->digest[4] += e;
    c600:	687b      	ldr	r3, [r7, #4]
    c602:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    c604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c606:	18d2      	adds	r2, r2, r3
    c608:	687b      	ldr	r3, [r7, #4]
    c60a:	65da      	str	r2, [r3, #92]	; 0x5c

        (void)data; /* Not used */
    }
    c60c:	46c0      	nop			; (mov r8, r8)
    c60e:	46bd      	mov	sp, r7
    c610:	b019      	add	sp, #100	; 0x64
    c612:	bd90      	pop	{r4, r7, pc}
    c614:	ca62c1d6 	.word	0xca62c1d6

0000c618 <wc_InitSha_ex>:
#endif /* !USE_CUSTOM_SHA_TRANSFORM */


int wc_InitSha_ex(wc_Sha* sha, void* heap, int devId)
{
    c618:	b580      	push	{r7, lr}
    c61a:	b086      	sub	sp, #24
    c61c:	af00      	add	r7, sp, #0
    c61e:	60f8      	str	r0, [r7, #12]
    c620:	60b9      	str	r1, [r7, #8]
    c622:	607a      	str	r2, [r7, #4]
    int ret = 0;
    c624:	2300      	movs	r3, #0
    c626:	617b      	str	r3, [r7, #20]

    if (sha == NULL)
    c628:	68fb      	ldr	r3, [r7, #12]
    c62a:	2b00      	cmp	r3, #0
    c62c:	d102      	bne.n	c634 <wc_InitSha_ex+0x1c>
        return BAD_FUNC_ARG;
    c62e:	23ad      	movs	r3, #173	; 0xad
    c630:	425b      	negs	r3, r3
    c632:	e00e      	b.n	c652 <wc_InitSha_ex+0x3a>

    sha->heap = heap;
    c634:	68fb      	ldr	r3, [r7, #12]
    c636:	68ba      	ldr	r2, [r7, #8]
    c638:	661a      	str	r2, [r3, #96]	; 0x60
#if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
    !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
    sha->ctx.mode = ESP32_SHA_INIT;
    sha->ctx.isfirstblock = 1;
#endif
    ret = InitSha(sha);
    c63a:	68fb      	ldr	r3, [r7, #12]
    c63c:	0018      	movs	r0, r3
    c63e:	f7fd ff71 	bl	a524 <InitSha>
    c642:	0003      	movs	r3, r0
    c644:	617b      	str	r3, [r7, #20]
    if (ret != 0)
    c646:	697b      	ldr	r3, [r7, #20]
    c648:	2b00      	cmp	r3, #0
    c64a:	d001      	beq.n	c650 <wc_InitSha_ex+0x38>
        return ret;
    c64c:	697b      	ldr	r3, [r7, #20]
    c64e:	e000      	b.n	c652 <wc_InitSha_ex+0x3a>
                                                            sha->heap, devId);
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
    c650:	697b      	ldr	r3, [r7, #20]
}
    c652:	0018      	movs	r0, r3
    c654:	46bd      	mov	sp, r7
    c656:	b006      	add	sp, #24
    c658:	bd80      	pop	{r7, pc}
    c65a:	46c0      	nop			; (mov r8, r8)

0000c65c <wc_ShaUpdate>:

int wc_ShaUpdate(wc_Sha* sha, const byte* data, word32 len)
{
    c65c:	b580      	push	{r7, lr}
    c65e:	b086      	sub	sp, #24
    c660:	af00      	add	r7, sp, #0
    c662:	60f8      	str	r0, [r7, #12]
    c664:	60b9      	str	r1, [r7, #8]
    c666:	607a      	str	r2, [r7, #4]
    byte* local;

    if (sha == NULL ||(data == NULL && len > 0)) {
    c668:	68fb      	ldr	r3, [r7, #12]
    c66a:	2b00      	cmp	r3, #0
    c66c:	d005      	beq.n	c67a <wc_ShaUpdate+0x1e>
    c66e:	68bb      	ldr	r3, [r7, #8]
    c670:	2b00      	cmp	r3, #0
    c672:	d105      	bne.n	c680 <wc_ShaUpdate+0x24>
    c674:	687b      	ldr	r3, [r7, #4]
    c676:	2b00      	cmp	r3, #0
    c678:	d002      	beq.n	c680 <wc_ShaUpdate+0x24>
        return BAD_FUNC_ARG;
    c67a:	23ad      	movs	r3, #173	; 0xad
    c67c:	425b      	negs	r3, r3
    c67e:	e04a      	b.n	c716 <wc_ShaUpdate+0xba>
    }

    /* do block size increments */
    local = (byte*)sha->buffer;
    c680:	68fb      	ldr	r3, [r7, #12]
    c682:	330c      	adds	r3, #12
    c684:	617b      	str	r3, [r7, #20]
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    /* check that internal buffLen is valid */
    if (sha->buffLen >= WC_SHA_BLOCK_SIZE)
    c686:	68fb      	ldr	r3, [r7, #12]
    c688:	681b      	ldr	r3, [r3, #0]
    c68a:	2b3f      	cmp	r3, #63	; 0x3f
    c68c:	d93f      	bls.n	c70e <wc_ShaUpdate+0xb2>
        return BUFFER_E;
    c68e:	2384      	movs	r3, #132	; 0x84
    c690:	425b      	negs	r3, r3
    c692:	e040      	b.n	c716 <wc_ShaUpdate+0xba>

    while (len) {
        word32 add = min(len, WC_SHA_BLOCK_SIZE - sha->buffLen);
    c694:	68fb      	ldr	r3, [r7, #12]
    c696:	681b      	ldr	r3, [r3, #0]
    c698:	2240      	movs	r2, #64	; 0x40
    c69a:	1ad2      	subs	r2, r2, r3
    c69c:	687b      	ldr	r3, [r7, #4]
    c69e:	0011      	movs	r1, r2
    c6a0:	0018      	movs	r0, r3
    c6a2:	f7fd ff31 	bl	a508 <min>
    c6a6:	0003      	movs	r3, r0
    c6a8:	613b      	str	r3, [r7, #16]
        XMEMCPY(&local[sha->buffLen], data, add);
    c6aa:	68fb      	ldr	r3, [r7, #12]
    c6ac:	681b      	ldr	r3, [r3, #0]
    c6ae:	697a      	ldr	r2, [r7, #20]
    c6b0:	18d3      	adds	r3, r2, r3
    c6b2:	693a      	ldr	r2, [r7, #16]
    c6b4:	68b9      	ldr	r1, [r7, #8]
    c6b6:	0018      	movs	r0, r3
    c6b8:	f019 f819 	bl	256ee <memcpy>

        sha->buffLen += add;
    c6bc:	68fb      	ldr	r3, [r7, #12]
    c6be:	681a      	ldr	r2, [r3, #0]
    c6c0:	693b      	ldr	r3, [r7, #16]
    c6c2:	18d2      	adds	r2, r2, r3
    c6c4:	68fb      	ldr	r3, [r7, #12]
    c6c6:	601a      	str	r2, [r3, #0]
        data         += add;
    c6c8:	68ba      	ldr	r2, [r7, #8]
    c6ca:	693b      	ldr	r3, [r7, #16]
    c6cc:	18d3      	adds	r3, r2, r3
    c6ce:	60bb      	str	r3, [r7, #8]
        len          -= add;
    c6d0:	687a      	ldr	r2, [r7, #4]
    c6d2:	693b      	ldr	r3, [r7, #16]
    c6d4:	1ad3      	subs	r3, r2, r3
    c6d6:	607b      	str	r3, [r7, #4]

        if (sha->buffLen == WC_SHA_BLOCK_SIZE) {
    c6d8:	68fb      	ldr	r3, [r7, #12]
    c6da:	681b      	ldr	r3, [r3, #0]
    c6dc:	2b40      	cmp	r3, #64	; 0x40
    c6de:	d116      	bne.n	c70e <wc_ShaUpdate+0xb2>
#if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
            ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
    c6e0:	68fb      	ldr	r3, [r7, #12]
    c6e2:	330c      	adds	r3, #12
    c6e4:	0018      	movs	r0, r3
    c6e6:	68fb      	ldr	r3, [r7, #12]
    c6e8:	330c      	adds	r3, #12
    c6ea:	2240      	movs	r2, #64	; 0x40
    c6ec:	0019      	movs	r1, r3
    c6ee:	f7fd fee5 	bl	a4bc <ByteReverseWords>
#endif
#if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
    defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
            XTRANSFORM(sha, local);
    c6f2:	697a      	ldr	r2, [r7, #20]
    c6f4:	68fb      	ldr	r3, [r7, #12]
    c6f6:	0011      	movs	r1, r2
    c6f8:	0018      	movs	r0, r3
    c6fa:	f7fd ff5d 	bl	a5b8 <Transform>
                XTRANSFORM(sha, local);
            } else {
                esp_sha_process(sha);
            }
#endif
            AddLength(sha, WC_SHA_BLOCK_SIZE);
    c6fe:	68fb      	ldr	r3, [r7, #12]
    c700:	2140      	movs	r1, #64	; 0x40
    c702:	0018      	movs	r0, r3
    c704:	f7fd ff3c 	bl	a580 <AddLength>
            sha->buffLen = 0;
    c708:	68fb      	ldr	r3, [r7, #12]
    c70a:	2200      	movs	r2, #0
    c70c:	601a      	str	r2, [r3, #0]

    /* check that internal buffLen is valid */
    if (sha->buffLen >= WC_SHA_BLOCK_SIZE)
        return BUFFER_E;

    while (len) {
    c70e:	687b      	ldr	r3, [r7, #4]
    c710:	2b00      	cmp	r3, #0
    c712:	d1bf      	bne.n	c694 <wc_ShaUpdate+0x38>
            AddLength(sha, WC_SHA_BLOCK_SIZE);
            sha->buffLen = 0;
        }
    }

    return 0;
    c714:	2300      	movs	r3, #0
}
    c716:	0018      	movs	r0, r3
    c718:	46bd      	mov	sp, r7
    c71a:	b006      	add	sp, #24
    c71c:	bd80      	pop	{r7, pc}
    c71e:	46c0      	nop			; (mov r8, r8)

0000c720 <wc_ShaFinal>:

    return 0;
}

int wc_ShaFinal(wc_Sha* sha, byte* hash)
{
    c720:	b580      	push	{r7, lr}
    c722:	b084      	sub	sp, #16
    c724:	af00      	add	r7, sp, #0
    c726:	6078      	str	r0, [r7, #4]
    c728:	6039      	str	r1, [r7, #0]
    byte* local;

    if (sha == NULL || hash == NULL) {
    c72a:	687b      	ldr	r3, [r7, #4]
    c72c:	2b00      	cmp	r3, #0
    c72e:	d002      	beq.n	c736 <wc_ShaFinal+0x16>
    c730:	683b      	ldr	r3, [r7, #0]
    c732:	2b00      	cmp	r3, #0
    c734:	d102      	bne.n	c73c <wc_ShaFinal+0x1c>
        return BAD_FUNC_ARG;
    c736:	23ad      	movs	r3, #173	; 0xad
    c738:	425b      	negs	r3, r3
    c73a:	e088      	b.n	c84e <wc_ShaFinal+0x12e>
    }

    local = (byte*)sha->buffer;
    c73c:	687b      	ldr	r3, [r7, #4]
    c73e:	330c      	adds	r3, #12
    c740:	60fb      	str	r3, [r7, #12]
        return IntelQaSymSha(&sha->asyncDev, hash, NULL, WC_SHA_DIGEST_SIZE);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    AddLength(sha, sha->buffLen);  /* before adding pads */
    c742:	687b      	ldr	r3, [r7, #4]
    c744:	681a      	ldr	r2, [r3, #0]
    c746:	687b      	ldr	r3, [r7, #4]
    c748:	0011      	movs	r1, r2
    c74a:	0018      	movs	r0, r3
    c74c:	f7fd ff18 	bl	a580 <AddLength>

    local[sha->buffLen++] = 0x80;  /* add 1 */
    c750:	687b      	ldr	r3, [r7, #4]
    c752:	681b      	ldr	r3, [r3, #0]
    c754:	1c59      	adds	r1, r3, #1
    c756:	687a      	ldr	r2, [r7, #4]
    c758:	6011      	str	r1, [r2, #0]
    c75a:	68fa      	ldr	r2, [r7, #12]
    c75c:	18d3      	adds	r3, r2, r3
    c75e:	2280      	movs	r2, #128	; 0x80
    c760:	701a      	strb	r2, [r3, #0]

    /* pad with zeros */
    if (sha->buffLen > WC_SHA_PAD_SIZE) {
    c762:	687b      	ldr	r3, [r7, #4]
    c764:	681b      	ldr	r3, [r3, #0]
    c766:	2b38      	cmp	r3, #56	; 0x38
    c768:	d920      	bls.n	c7ac <wc_ShaFinal+0x8c>
        XMEMSET(&local[sha->buffLen], 0, WC_SHA_BLOCK_SIZE - sha->buffLen);
    c76a:	687b      	ldr	r3, [r7, #4]
    c76c:	681b      	ldr	r3, [r3, #0]
    c76e:	68fa      	ldr	r2, [r7, #12]
    c770:	18d0      	adds	r0, r2, r3
    c772:	687b      	ldr	r3, [r7, #4]
    c774:	681b      	ldr	r3, [r3, #0]
    c776:	2240      	movs	r2, #64	; 0x40
    c778:	1ad3      	subs	r3, r2, r3
    c77a:	001a      	movs	r2, r3
    c77c:	2100      	movs	r1, #0
    c77e:	f018 ffd4 	bl	2572a <memset>
        sha->buffLen += WC_SHA_BLOCK_SIZE - sha->buffLen;
    c782:	687b      	ldr	r3, [r7, #4]
    c784:	2240      	movs	r2, #64	; 0x40
    c786:	601a      	str	r2, [r3, #0]

#if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
    c788:	687b      	ldr	r3, [r7, #4]
    c78a:	330c      	adds	r3, #12
    c78c:	0018      	movs	r0, r3
    c78e:	687b      	ldr	r3, [r7, #4]
    c790:	330c      	adds	r3, #12
    c792:	2240      	movs	r2, #64	; 0x40
    c794:	0019      	movs	r1, r3
    c796:	f7fd fe91 	bl	a4bc <ByteReverseWords>
#endif
#if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
    defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
        XTRANSFORM(sha, local);
    c79a:	68fa      	ldr	r2, [r7, #12]
    c79c:	687b      	ldr	r3, [r7, #4]
    c79e:	0011      	movs	r1, r2
    c7a0:	0018      	movs	r0, r3
    c7a2:	f7fd ff09 	bl	a5b8 <Transform>
            XTRANSFORM(sha, local);
        } else {
            esp_sha_process(sha);
        }
#endif
        sha->buffLen = 0;
    c7a6:	687b      	ldr	r3, [r7, #4]
    c7a8:	2200      	movs	r2, #0
    c7aa:	601a      	str	r2, [r3, #0]
    }
    XMEMSET(&local[sha->buffLen], 0, WC_SHA_PAD_SIZE - sha->buffLen);
    c7ac:	687b      	ldr	r3, [r7, #4]
    c7ae:	681b      	ldr	r3, [r3, #0]
    c7b0:	68fa      	ldr	r2, [r7, #12]
    c7b2:	18d0      	adds	r0, r2, r3
    c7b4:	687b      	ldr	r3, [r7, #4]
    c7b6:	681b      	ldr	r3, [r3, #0]
    c7b8:	2238      	movs	r2, #56	; 0x38
    c7ba:	1ad3      	subs	r3, r2, r3
    c7bc:	001a      	movs	r2, r3
    c7be:	2100      	movs	r1, #0
    c7c0:	f018 ffb3 	bl	2572a <memset>

#if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
    c7c4:	687b      	ldr	r3, [r7, #4]
    c7c6:	330c      	adds	r3, #12
    c7c8:	0018      	movs	r0, r3
    c7ca:	687b      	ldr	r3, [r7, #4]
    c7cc:	330c      	adds	r3, #12
    c7ce:	2240      	movs	r2, #64	; 0x40
    c7d0:	0019      	movs	r1, r3
    c7d2:	f7fd fe73 	bl	a4bc <ByteReverseWords>
#endif

    /* store lengths */
    /* put lengths in bits */
    sha->hiLen = (sha->loLen >> (8*sizeof(sha->loLen) - 3)) + (sha->hiLen << 3);
    c7d6:	687b      	ldr	r3, [r7, #4]
    c7d8:	685b      	ldr	r3, [r3, #4]
    c7da:	0f5a      	lsrs	r2, r3, #29
    c7dc:	687b      	ldr	r3, [r7, #4]
    c7de:	689b      	ldr	r3, [r3, #8]
    c7e0:	00db      	lsls	r3, r3, #3
    c7e2:	18d2      	adds	r2, r2, r3
    c7e4:	687b      	ldr	r3, [r7, #4]
    c7e6:	609a      	str	r2, [r3, #8]
    sha->loLen = sha->loLen << 3;
    c7e8:	687b      	ldr	r3, [r7, #4]
    c7ea:	685b      	ldr	r3, [r3, #4]
    c7ec:	00da      	lsls	r2, r3, #3
    c7ee:	687b      	ldr	r3, [r7, #4]
    c7f0:	605a      	str	r2, [r3, #4]

    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[WC_SHA_PAD_SIZE], &sha->hiLen, sizeof(word32));
    c7f2:	68fb      	ldr	r3, [r7, #12]
    c7f4:	3338      	adds	r3, #56	; 0x38
    c7f6:	0018      	movs	r0, r3
    c7f8:	687b      	ldr	r3, [r7, #4]
    c7fa:	3308      	adds	r3, #8
    c7fc:	2204      	movs	r2, #4
    c7fe:	0019      	movs	r1, r3
    c800:	f018 ff75 	bl	256ee <memcpy>
    XMEMCPY(&local[WC_SHA_PAD_SIZE + sizeof(word32)], &sha->loLen, sizeof(word32));
    c804:	68fb      	ldr	r3, [r7, #12]
    c806:	333c      	adds	r3, #60	; 0x3c
    c808:	0018      	movs	r0, r3
    c80a:	687b      	ldr	r3, [r7, #4]
    c80c:	3304      	adds	r3, #4
    c80e:	2204      	movs	r2, #4
    c810:	0019      	movs	r1, r3
    c812:	f018 ff6c 	bl	256ee <memcpy>
                     2 * sizeof(word32));
#endif

#if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
    defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
    XTRANSFORM(sha, local);
    c816:	68fa      	ldr	r2, [r7, #12]
    c818:	687b      	ldr	r3, [r7, #4]
    c81a:	0011      	movs	r1, r2
    c81c:	0018      	movs	r0, r3
    c81e:	f7fd fecb 	bl	a5b8 <Transform>
        esp_sha_digest_process(sha, 1);
    }
#endif

#ifdef LITTLE_ENDIAN_ORDER
    ByteReverseWords(sha->digest, sha->digest, WC_SHA_DIGEST_SIZE);
    c822:	687b      	ldr	r3, [r7, #4]
    c824:	334c      	adds	r3, #76	; 0x4c
    c826:	0018      	movs	r0, r3
    c828:	687b      	ldr	r3, [r7, #4]
    c82a:	334c      	adds	r3, #76	; 0x4c
    c82c:	2214      	movs	r2, #20
    c82e:	0019      	movs	r1, r3
    c830:	f7fd fe44 	bl	a4bc <ByteReverseWords>
#endif
    XMEMCPY(hash, sha->digest, WC_SHA_DIGEST_SIZE);
    c834:	687b      	ldr	r3, [r7, #4]
    c836:	334c      	adds	r3, #76	; 0x4c
    c838:	0019      	movs	r1, r3
    c83a:	683b      	ldr	r3, [r7, #0]
    c83c:	2214      	movs	r2, #20
    c83e:	0018      	movs	r0, r3
    c840:	f018 ff55 	bl	256ee <memcpy>

    return InitSha(sha); /* reset state */
    c844:	687b      	ldr	r3, [r7, #4]
    c846:	0018      	movs	r0, r3
    c848:	f7fd fe6c 	bl	a524 <InitSha>
    c84c:	0003      	movs	r3, r0
}
    c84e:	0018      	movs	r0, r3
    c850:	46bd      	mov	sp, r7
    c852:	b004      	add	sp, #16
    c854:	bd80      	pop	{r7, pc}
    c856:	46c0      	nop			; (mov r8, r8)

0000c858 <wc_InitSha>:

#endif /* USE_SHA_SOFTWARE_IMPL */


int wc_InitSha(wc_Sha* sha)
{
    c858:	b580      	push	{r7, lr}
    c85a:	b082      	sub	sp, #8
    c85c:	af00      	add	r7, sp, #0
    c85e:	6078      	str	r0, [r7, #4]
    return wc_InitSha_ex(sha, NULL, INVALID_DEVID);
    c860:	2302      	movs	r3, #2
    c862:	425a      	negs	r2, r3
    c864:	687b      	ldr	r3, [r7, #4]
    c866:	2100      	movs	r1, #0
    c868:	0018      	movs	r0, r3
    c86a:	f7ff fed5 	bl	c618 <wc_InitSha_ex>
    c86e:	0003      	movs	r3, r0
}
    c870:	0018      	movs	r0, r3
    c872:	46bd      	mov	sp, r7
    c874:	b002      	add	sp, #8
    c876:	bd80      	pop	{r7, pc}

0000c878 <wc_ShaFree>:

void wc_ShaFree(wc_Sha* sha)
{
    c878:	b580      	push	{r7, lr}
    c87a:	b082      	sub	sp, #8
    c87c:	af00      	add	r7, sp, #0
    c87e:	6078      	str	r0, [r7, #4]
#endif /* WOLFSSL_ASYNC_CRYPT */

#ifdef WOLFSSL_PIC32MZ_HASH
    wc_ShaPic32Free(sha);
#endif
}
    c880:	46bd      	mov	sp, r7
    c882:	b002      	add	sp, #8
    c884:	bd80      	pop	{r7, pc}
    c886:	46c0      	nop			; (mov r8, r8)

0000c888 <wc_ShaGetHash>:
#endif /* !WOLFSSL_TI_HASH */
#endif /* HAVE_FIPS */

#ifndef WOLFSSL_TI_HASH
int wc_ShaGetHash(wc_Sha* sha, byte* hash)
{
    c888:	b580      	push	{r7, lr}
    c88a:	b09c      	sub	sp, #112	; 0x70
    c88c:	af00      	add	r7, sp, #0
    c88e:	6078      	str	r0, [r7, #4]
    c890:	6039      	str	r1, [r7, #0]
    int ret;
    wc_Sha tmpSha;

    if (sha == NULL || hash == NULL)
    c892:	687b      	ldr	r3, [r7, #4]
    c894:	2b00      	cmp	r3, #0
    c896:	d002      	beq.n	c89e <wc_ShaGetHash+0x16>
    c898:	683b      	ldr	r3, [r7, #0]
    c89a:	2b00      	cmp	r3, #0
    c89c:	d102      	bne.n	c8a4 <wc_ShaGetHash+0x1c>
        return BAD_FUNC_ARG;
    c89e:	23ad      	movs	r3, #173	; 0xad
    c8a0:	425b      	negs	r3, r3
    c8a2:	e015      	b.n	c8d0 <wc_ShaGetHash+0x48>
    }
    if(sha->ctx.mode != ESP32_SHA_SW)
        esp_sha_digest_process(sha, 0);
#endif

    ret = wc_ShaCopy(sha, &tmpSha);
    c8a4:	2308      	movs	r3, #8
    c8a6:	18fa      	adds	r2, r7, r3
    c8a8:	687b      	ldr	r3, [r7, #4]
    c8aa:	0011      	movs	r1, r2
    c8ac:	0018      	movs	r0, r3
    c8ae:	f000 f813 	bl	c8d8 <wc_ShaCopy>
    c8b2:	0003      	movs	r3, r0
    c8b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (ret == 0) {
    c8b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    c8b8:	2b00      	cmp	r3, #0
    c8ba:	d108      	bne.n	c8ce <wc_ShaGetHash+0x46>
       ret = wc_ShaFinal(&tmpSha, hash);
    c8bc:	683a      	ldr	r2, [r7, #0]
    c8be:	2308      	movs	r3, #8
    c8c0:	18fb      	adds	r3, r7, r3
    c8c2:	0011      	movs	r1, r2
    c8c4:	0018      	movs	r0, r3
    c8c6:	f7ff ff2b 	bl	c720 <wc_ShaFinal>
    c8ca:	0003      	movs	r3, r0
    c8cc:	66fb      	str	r3, [r7, #108]	; 0x6c
#if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
    !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
        sha->ctx.mode = ESP32_SHA_SW;
#endif
    }
    return ret;
    c8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
    c8d0:	0018      	movs	r0, r3
    c8d2:	46bd      	mov	sp, r7
    c8d4:	b01c      	add	sp, #112	; 0x70
    c8d6:	bd80      	pop	{r7, pc}

0000c8d8 <wc_ShaCopy>:

int wc_ShaCopy(wc_Sha* src, wc_Sha* dst)
{
    c8d8:	b580      	push	{r7, lr}
    c8da:	b084      	sub	sp, #16
    c8dc:	af00      	add	r7, sp, #0
    c8de:	6078      	str	r0, [r7, #4]
    c8e0:	6039      	str	r1, [r7, #0]
    int ret = 0;
    c8e2:	2300      	movs	r3, #0
    c8e4:	60fb      	str	r3, [r7, #12]

    if (src == NULL || dst == NULL)
    c8e6:	687b      	ldr	r3, [r7, #4]
    c8e8:	2b00      	cmp	r3, #0
    c8ea:	d002      	beq.n	c8f2 <wc_ShaCopy+0x1a>
    c8ec:	683b      	ldr	r3, [r7, #0]
    c8ee:	2b00      	cmp	r3, #0
    c8f0:	d102      	bne.n	c8f8 <wc_ShaCopy+0x20>
        return BAD_FUNC_ARG;
    c8f2:	23ad      	movs	r3, #173	; 0xad
    c8f4:	425b      	negs	r3, r3
    c8f6:	e006      	b.n	c906 <wc_ShaCopy+0x2e>

    XMEMCPY(dst, src, sizeof(wc_Sha));
    c8f8:	6879      	ldr	r1, [r7, #4]
    c8fa:	683b      	ldr	r3, [r7, #0]
    c8fc:	2264      	movs	r2, #100	; 0x64
    c8fe:	0018      	movs	r0, r3
    c900:	f018 fef5 	bl	256ee <memcpy>
#endif
#if defined(WOLFSSL_HASH_FLAGS) || defined(WOLF_CRYPTO_CB)
     dst->flags |= WC_HASH_FLAG_ISCOPY;
#endif

    return ret;
    c904:	68fb      	ldr	r3, [r7, #12]
}
    c906:	0018      	movs	r0, r3
    c908:	46bd      	mov	sp, r7
    c90a:	b004      	add	sp, #16
    c90c:	bd80      	pop	{r7, pc}
    c90e:	46c0      	nop			; (mov r8, r8)

0000c910 <rotlFixed>:
    }

#else /* generic */

    STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
    {
    c910:	b580      	push	{r7, lr}
    c912:	b082      	sub	sp, #8
    c914:	af00      	add	r7, sp, #0
    c916:	6078      	str	r0, [r7, #4]
    c918:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    c91a:	683b      	ldr	r3, [r7, #0]
    c91c:	2220      	movs	r2, #32
    c91e:	1ad3      	subs	r3, r2, r3
    c920:	687a      	ldr	r2, [r7, #4]
    c922:	41da      	rors	r2, r3
    c924:	0013      	movs	r3, r2
    }
    c926:	0018      	movs	r0, r3
    c928:	46bd      	mov	sp, r7
    c92a:	b002      	add	sp, #8
    c92c:	bd80      	pop	{r7, pc}
    c92e:	46c0      	nop			; (mov r8, r8)

0000c930 <rotrFixed>:


    STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
    {
    c930:	b580      	push	{r7, lr}
    c932:	b082      	sub	sp, #8
    c934:	af00      	add	r7, sp, #0
    c936:	6078      	str	r0, [r7, #4]
    c938:	6039      	str	r1, [r7, #0]
        return (x >> y) | (x << (sizeof(y) * 8 - y));
    c93a:	687a      	ldr	r2, [r7, #4]
    c93c:	683b      	ldr	r3, [r7, #0]
    c93e:	41da      	rors	r2, r3
    c940:	0013      	movs	r3, r2
    }
    c942:	0018      	movs	r0, r3
    c944:	46bd      	mov	sp, r7
    c946:	b002      	add	sp, #8
    c948:	bd80      	pop	{r7, pc}
    c94a:	46c0      	nop			; (mov r8, r8)

0000c94c <ByteReverseWord32>:

#endif


STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
{
    c94c:	b580      	push	{r7, lr}
    c94e:	b082      	sub	sp, #8
    c950:	af00      	add	r7, sp, #0
    c952:	6078      	str	r0, [r7, #4]
    /* 5 instructions with rotate instruction, 9 without */
    return (rotrFixed(value, 8U) & 0xff00ff00) |
           (rotlFixed(value, 8U) & 0x00ff00ff);
#else
    /* 6 instructions with rotate instruction, 8 without */
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    c954:	687b      	ldr	r3, [r7, #4]
    c956:	0a1b      	lsrs	r3, r3, #8
    c958:	4a08      	ldr	r2, [pc, #32]	; (c97c <ByteReverseWord32+0x30>)
    c95a:	401a      	ands	r2, r3
    c95c:	687b      	ldr	r3, [r7, #4]
    c95e:	021b      	lsls	r3, r3, #8
    c960:	4907      	ldr	r1, [pc, #28]	; (c980 <ByteReverseWord32+0x34>)
    c962:	400b      	ands	r3, r1
    c964:	4313      	orrs	r3, r2
    c966:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
    c968:	687b      	ldr	r3, [r7, #4]
    c96a:	2110      	movs	r1, #16
    c96c:	0018      	movs	r0, r3
    c96e:	f7ff ffcf 	bl	c910 <rotlFixed>
    c972:	0003      	movs	r3, r0
#endif
}
    c974:	0018      	movs	r0, r3
    c976:	46bd      	mov	sp, r7
    c978:	b002      	add	sp, #8
    c97a:	bd80      	pop	{r7, pc}
    c97c:	00ff00ff 	.word	0x00ff00ff
    c980:	ff00ff00 	.word	0xff00ff00

0000c984 <ByteReverseWords>:


STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
                                    word32 byteCount)
{
    c984:	b590      	push	{r4, r7, lr}
    c986:	b087      	sub	sp, #28
    c988:	af00      	add	r7, sp, #0
    c98a:	60f8      	str	r0, [r7, #12]
    c98c:	60b9      	str	r1, [r7, #8]
    c98e:	607a      	str	r2, [r7, #4]
    word32 count = byteCount/(word32)sizeof(word32), i;
    c990:	687b      	ldr	r3, [r7, #4]
    c992:	089b      	lsrs	r3, r3, #2
    c994:	613b      	str	r3, [r7, #16]

    for (i = 0; i < count; i++)
    c996:	2300      	movs	r3, #0
    c998:	617b      	str	r3, [r7, #20]
    c99a:	e010      	b.n	c9be <ByteReverseWords+0x3a>
        out[i] = ByteReverseWord32(in[i]);
    c99c:	697b      	ldr	r3, [r7, #20]
    c99e:	009b      	lsls	r3, r3, #2
    c9a0:	68fa      	ldr	r2, [r7, #12]
    c9a2:	18d4      	adds	r4, r2, r3
    c9a4:	697b      	ldr	r3, [r7, #20]
    c9a6:	009b      	lsls	r3, r3, #2
    c9a8:	68ba      	ldr	r2, [r7, #8]
    c9aa:	18d3      	adds	r3, r2, r3
    c9ac:	681b      	ldr	r3, [r3, #0]
    c9ae:	0018      	movs	r0, r3
    c9b0:	f7ff ffcc 	bl	c94c <ByteReverseWord32>
    c9b4:	0003      	movs	r3, r0
    c9b6:	6023      	str	r3, [r4, #0]
STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
                                    word32 byteCount)
{
    word32 count = byteCount/(word32)sizeof(word32), i;

    for (i = 0; i < count; i++)
    c9b8:	697b      	ldr	r3, [r7, #20]
    c9ba:	3301      	adds	r3, #1
    c9bc:	617b      	str	r3, [r7, #20]
    c9be:	697a      	ldr	r2, [r7, #20]
    c9c0:	693b      	ldr	r3, [r7, #16]
    c9c2:	429a      	cmp	r2, r3
    c9c4:	d3ea      	bcc.n	c99c <ByteReverseWords+0x18>
        out[i] = ByteReverseWord32(in[i]);

}
    c9c6:	46c0      	nop			; (mov r8, r8)
    c9c8:	46bd      	mov	sp, r7
    c9ca:	b007      	add	sp, #28
    c9cc:	bd90      	pop	{r4, r7, pc}
    c9ce:	46c0      	nop			; (mov r8, r8)

0000c9d0 <min>:
    #define WOLFSSL_HAVE_MIN
    #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
        #define min min
    #endif
    STATIC WC_INLINE word32 min(word32 a, word32 b)
    {
    c9d0:	b580      	push	{r7, lr}
    c9d2:	b082      	sub	sp, #8
    c9d4:	af00      	add	r7, sp, #0
    c9d6:	6078      	str	r0, [r7, #4]
    c9d8:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
    c9da:	683a      	ldr	r2, [r7, #0]
    c9dc:	687b      	ldr	r3, [r7, #4]
    c9de:	4293      	cmp	r3, r2
    c9e0:	d900      	bls.n	c9e4 <min+0x14>
    c9e2:	0013      	movs	r3, r2
    }
    c9e4:	0018      	movs	r0, r3
    c9e6:	46bd      	mov	sp, r7
    c9e8:	b002      	add	sp, #8
    c9ea:	bd80      	pop	{r7, pc}

0000c9ec <InitSha256>:
#if !defined(WOLFSSL_PIC32MZ_HASH) && !defined(STM32_HASH_SHA2) && \
    (!defined(WOLFSSL_IMX6_CAAM) || defined(NO_IMX6_CAAM_HASH)) && \
    !defined(WOLFSSL_AFALG_HASH) && !defined(WOLFSSL_DEVCRYPTO_HASH) && \
    (!defined(WOLFSSL_ESP32WROOM32_CRYPT) || defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH))
static int InitSha256(wc_Sha256* sha256)
{
    c9ec:	b580      	push	{r7, lr}
    c9ee:	b084      	sub	sp, #16
    c9f0:	af00      	add	r7, sp, #0
    c9f2:	6078      	str	r0, [r7, #4]
    int ret = 0;
    c9f4:	2300      	movs	r3, #0
    c9f6:	60fb      	str	r3, [r7, #12]

    if (sha256 == NULL)
    c9f8:	687b      	ldr	r3, [r7, #4]
    c9fa:	2b00      	cmp	r3, #0
    c9fc:	d102      	bne.n	ca04 <InitSha256+0x18>
        return BAD_FUNC_ARG;
    c9fe:	23ad      	movs	r3, #173	; 0xad
    ca00:	425b      	negs	r3, r3
    ca02:	e027      	b.n	ca54 <InitSha256+0x68>

    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
    ca04:	687b      	ldr	r3, [r7, #4]
    ca06:	2220      	movs	r2, #32
    ca08:	2100      	movs	r1, #0
    ca0a:	0018      	movs	r0, r3
    ca0c:	f018 fe8d 	bl	2572a <memset>
    sha256->digest[0] = 0x6A09E667L;
    ca10:	687b      	ldr	r3, [r7, #4]
    ca12:	4a12      	ldr	r2, [pc, #72]	; (ca5c <InitSha256+0x70>)
    ca14:	601a      	str	r2, [r3, #0]
    sha256->digest[1] = 0xBB67AE85L;
    ca16:	687b      	ldr	r3, [r7, #4]
    ca18:	4a11      	ldr	r2, [pc, #68]	; (ca60 <InitSha256+0x74>)
    ca1a:	605a      	str	r2, [r3, #4]
    sha256->digest[2] = 0x3C6EF372L;
    ca1c:	687b      	ldr	r3, [r7, #4]
    ca1e:	4a11      	ldr	r2, [pc, #68]	; (ca64 <InitSha256+0x78>)
    ca20:	609a      	str	r2, [r3, #8]
    sha256->digest[3] = 0xA54FF53AL;
    ca22:	687b      	ldr	r3, [r7, #4]
    ca24:	4a10      	ldr	r2, [pc, #64]	; (ca68 <InitSha256+0x7c>)
    ca26:	60da      	str	r2, [r3, #12]
    sha256->digest[4] = 0x510E527FL;
    ca28:	687b      	ldr	r3, [r7, #4]
    ca2a:	4a10      	ldr	r2, [pc, #64]	; (ca6c <InitSha256+0x80>)
    ca2c:	611a      	str	r2, [r3, #16]
    sha256->digest[5] = 0x9B05688CL;
    ca2e:	687b      	ldr	r3, [r7, #4]
    ca30:	4a0f      	ldr	r2, [pc, #60]	; (ca70 <InitSha256+0x84>)
    ca32:	615a      	str	r2, [r3, #20]
    sha256->digest[6] = 0x1F83D9ABL;
    ca34:	687b      	ldr	r3, [r7, #4]
    ca36:	4a0f      	ldr	r2, [pc, #60]	; (ca74 <InitSha256+0x88>)
    ca38:	619a      	str	r2, [r3, #24]
    sha256->digest[7] = 0x5BE0CD19L;
    ca3a:	687b      	ldr	r3, [r7, #4]
    ca3c:	4a0e      	ldr	r2, [pc, #56]	; (ca78 <InitSha256+0x8c>)
    ca3e:	61da      	str	r2, [r3, #28]

    sha256->buffLen = 0;
    ca40:	687b      	ldr	r3, [r7, #4]
    ca42:	2200      	movs	r2, #0
    ca44:	661a      	str	r2, [r3, #96]	; 0x60
    sha256->loLen   = 0;
    ca46:	687b      	ldr	r3, [r7, #4]
    ca48:	2200      	movs	r2, #0
    ca4a:	665a      	str	r2, [r3, #100]	; 0x64
    sha256->hiLen   = 0;
    ca4c:	687b      	ldr	r3, [r7, #4]
    ca4e:	2200      	movs	r2, #0
    ca50:	669a      	str	r2, [r3, #104]	; 0x68

    return ret;
    ca52:	68fb      	ldr	r3, [r7, #12]
}
    ca54:	0018      	movs	r0, r3
    ca56:	46bd      	mov	sp, r7
    ca58:	b004      	add	sp, #16
    ca5a:	bd80      	pop	{r7, pc}
    ca5c:	6a09e667 	.word	0x6a09e667
    ca60:	bb67ae85 	.word	0xbb67ae85
    ca64:	3c6ef372 	.word	0x3c6ef372
    ca68:	a54ff53a 	.word	0xa54ff53a
    ca6c:	510e527f 	.word	0x510e527f
    ca70:	9b05688c 	.word	0x9b05688c
    ca74:	1f83d9ab 	.word	0x1f83d9ab
    ca78:	5be0cd19 	.word	0x5be0cd19

0000ca7c <wc_InitSha256_ex>:
    }
#else
    #define NEED_SOFT_SHA256

    int wc_InitSha256_ex(wc_Sha256* sha256, void* heap, int devId)
    {
    ca7c:	b580      	push	{r7, lr}
    ca7e:	b086      	sub	sp, #24
    ca80:	af00      	add	r7, sp, #0
    ca82:	60f8      	str	r0, [r7, #12]
    ca84:	60b9      	str	r1, [r7, #8]
    ca86:	607a      	str	r2, [r7, #4]
        int ret = 0;
    ca88:	2300      	movs	r3, #0
    ca8a:	617b      	str	r3, [r7, #20]
        if (sha256 == NULL)
    ca8c:	68fb      	ldr	r3, [r7, #12]
    ca8e:	2b00      	cmp	r3, #0
    ca90:	d102      	bne.n	ca98 <wc_InitSha256_ex+0x1c>
            return BAD_FUNC_ARG;
    ca92:	23ad      	movs	r3, #173	; 0xad
    ca94:	425b      	negs	r3, r3
    ca96:	e00e      	b.n	cab6 <wc_InitSha256_ex+0x3a>

        sha256->heap = heap;
    ca98:	68fb      	ldr	r3, [r7, #12]
    ca9a:	68ba      	ldr	r2, [r7, #8]
    ca9c:	66da      	str	r2, [r3, #108]	; 0x6c
    #ifdef WOLF_CRYPTO_CB
        sha256->devId = devId;
        sha256->devCtx = NULL;
    #endif

        ret = InitSha256(sha256);
    ca9e:	68fb      	ldr	r3, [r7, #12]
    caa0:	0018      	movs	r0, r3
    caa2:	f7ff ffa3 	bl	c9ec <InitSha256>
    caa6:	0003      	movs	r3, r0
    caa8:	617b      	str	r3, [r7, #20]
        if (ret != 0)
    caaa:	697b      	ldr	r3, [r7, #20]
    caac:	2b00      	cmp	r3, #0
    caae:	d001      	beq.n	cab4 <wc_InitSha256_ex+0x38>
            return ret;
    cab0:	697b      	ldr	r3, [r7, #20]
    cab2:	e000      	b.n	cab6 <wc_InitSha256_ex+0x3a>
                            WOLFSSL_ASYNC_MARKER_SHA256, sha256->heap, devId);
    #else
        (void)devId;
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return ret;
    cab4:	697b      	ldr	r3, [r7, #20]
    }
    cab6:	0018      	movs	r0, r3
    cab8:	46bd      	mov	sp, r7
    caba:	b006      	add	sp, #24
    cabc:	bd80      	pop	{r7, pc}
    cabe:	46c0      	nop			; (mov r8, r8)

0000cac0 <Transform_Sha256>:
         #define XTRANSFORM(S)            Transform_Sha256((S))
         #define XTRANSFORM_LEN(S, D, L)  Transform_Sha256_Len((S),(D),(L))
    #endif

    static int Transform_Sha256(wc_Sha256* sha256)
    {
    cac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cac2:	b091      	sub	sp, #68	; 0x44
    cac4:	af00      	add	r7, sp, #0
    cac6:	6078      	str	r0, [r7, #4]
                return MEMORY_E;
            sha256->W = W;
        }
    #elif defined(WOLFSSL_SMALL_STACK)
        word32* W;
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
    cac8:	2380      	movs	r3, #128	; 0x80
    caca:	005b      	lsls	r3, r3, #1
    cacc:	0018      	movs	r0, r3
    cace:	f018 fdd9 	bl	25684 <malloc>
    cad2:	0003      	movs	r3, r0
    cad4:	63bb      	str	r3, [r7, #56]	; 0x38
                                                       DYNAMIC_TYPE_TMP_BUFFER);
        if (W == NULL)
    cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cad8:	2b00      	cmp	r3, #0
    cada:	d103      	bne.n	cae4 <Transform_Sha256+0x24>
            return MEMORY_E;
    cadc:	237d      	movs	r3, #125	; 0x7d
    cade:	425b      	negs	r3, r3
    cae0:	f000 fc98 	bl	d414 <Transform_Sha256+0x954>
    #else
        word32 W[WC_SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
    cae4:	2300      	movs	r3, #0
    cae6:	63fb      	str	r3, [r7, #60]	; 0x3c
    cae8:	e00b      	b.n	cb02 <Transform_Sha256+0x42>
            S[i] = sha256->digest[i];
    caea:	687b      	ldr	r3, [r7, #4]
    caec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    caee:	0092      	lsls	r2, r2, #2
    caf0:	58d1      	ldr	r1, [r2, r3]
    caf2:	230c      	movs	r3, #12
    caf4:	18fb      	adds	r3, r7, r3
    caf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    caf8:	0092      	lsls	r2, r2, #2
    cafa:	50d1      	str	r1, [r2, r3]
    #else
        word32 W[WC_SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
    cafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cafe:	3301      	adds	r3, #1
    cb00:	63fb      	str	r3, [r7, #60]	; 0x3c
    cb02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb04:	2b07      	cmp	r3, #7
    cb06:	ddf0      	ble.n	caea <Transform_Sha256+0x2a>
            S[i] = sha256->digest[i];

        for (i = 0; i < 16; i++)
    cb08:	2300      	movs	r3, #0
    cb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    cb0c:	e00c      	b.n	cb28 <Transform_Sha256+0x68>
            W[i] = sha256->buffer[i];
    cb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb10:	009b      	lsls	r3, r3, #2
    cb12:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cb14:	18d3      	adds	r3, r2, r3
    cb16:	687a      	ldr	r2, [r7, #4]
    cb18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    cb1a:	3108      	adds	r1, #8
    cb1c:	0089      	lsls	r1, r1, #2
    cb1e:	588a      	ldr	r2, [r1, r2]
    cb20:	601a      	str	r2, [r3, #0]

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
            S[i] = sha256->digest[i];

        for (i = 0; i < 16; i++)
    cb22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb24:	3301      	adds	r3, #1
    cb26:	63fb      	str	r3, [r7, #60]	; 0x3c
    cb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb2a:	2b0f      	cmp	r3, #15
    cb2c:	ddef      	ble.n	cb0e <Transform_Sha256+0x4e>
            W[i] = sha256->buffer[i];

        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
    cb2e:	2310      	movs	r3, #16
    cb30:	63fb      	str	r3, [r7, #60]	; 0x3c
    cb32:	e066      	b.n	cc02 <Transform_Sha256+0x142>
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
    cb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb36:	009b      	lsls	r3, r3, #2
    cb38:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cb3a:	18d4      	adds	r4, r2, r3
    cb3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb3e:	4a34      	ldr	r2, [pc, #208]	; (cc10 <Transform_Sha256+0x150>)
    cb40:	4694      	mov	ip, r2
    cb42:	4463      	add	r3, ip
    cb44:	009b      	lsls	r3, r3, #2
    cb46:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cb48:	18d3      	adds	r3, r2, r3
    cb4a:	681b      	ldr	r3, [r3, #0]
    cb4c:	2111      	movs	r1, #17
    cb4e:	0018      	movs	r0, r3
    cb50:	f7ff feee 	bl	c930 <rotrFixed>
    cb54:	0005      	movs	r5, r0
    cb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb58:	4a2d      	ldr	r2, [pc, #180]	; (cc10 <Transform_Sha256+0x150>)
    cb5a:	4694      	mov	ip, r2
    cb5c:	4463      	add	r3, ip
    cb5e:	009b      	lsls	r3, r3, #2
    cb60:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cb62:	18d3      	adds	r3, r2, r3
    cb64:	681b      	ldr	r3, [r3, #0]
    cb66:	2113      	movs	r1, #19
    cb68:	0018      	movs	r0, r3
    cb6a:	f7ff fee1 	bl	c930 <rotrFixed>
    cb6e:	0003      	movs	r3, r0
    cb70:	002a      	movs	r2, r5
    cb72:	405a      	eors	r2, r3
    cb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb76:	4926      	ldr	r1, [pc, #152]	; (cc10 <Transform_Sha256+0x150>)
    cb78:	468c      	mov	ip, r1
    cb7a:	4463      	add	r3, ip
    cb7c:	009b      	lsls	r3, r3, #2
    cb7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    cb80:	18cb      	adds	r3, r1, r3
    cb82:	681b      	ldr	r3, [r3, #0]
    cb84:	0a9b      	lsrs	r3, r3, #10
    cb86:	405a      	eors	r2, r3
    cb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb8a:	4922      	ldr	r1, [pc, #136]	; (cc14 <Transform_Sha256+0x154>)
    cb8c:	468c      	mov	ip, r1
    cb8e:	4463      	add	r3, ip
    cb90:	009b      	lsls	r3, r3, #2
    cb92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    cb94:	18cb      	adds	r3, r1, r3
    cb96:	681b      	ldr	r3, [r3, #0]
    cb98:	18d5      	adds	r5, r2, r3
    cb9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb9c:	4a1e      	ldr	r2, [pc, #120]	; (cc18 <Transform_Sha256+0x158>)
    cb9e:	4694      	mov	ip, r2
    cba0:	4463      	add	r3, ip
    cba2:	009b      	lsls	r3, r3, #2
    cba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cba6:	18d3      	adds	r3, r2, r3
    cba8:	681b      	ldr	r3, [r3, #0]
    cbaa:	2107      	movs	r1, #7
    cbac:	0018      	movs	r0, r3
    cbae:	f7ff febf 	bl	c930 <rotrFixed>
    cbb2:	0006      	movs	r6, r0
    cbb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbb6:	4a18      	ldr	r2, [pc, #96]	; (cc18 <Transform_Sha256+0x158>)
    cbb8:	4694      	mov	ip, r2
    cbba:	4463      	add	r3, ip
    cbbc:	009b      	lsls	r3, r3, #2
    cbbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cbc0:	18d3      	adds	r3, r2, r3
    cbc2:	681b      	ldr	r3, [r3, #0]
    cbc4:	2112      	movs	r1, #18
    cbc6:	0018      	movs	r0, r3
    cbc8:	f7ff feb2 	bl	c930 <rotrFixed>
    cbcc:	0003      	movs	r3, r0
    cbce:	0032      	movs	r2, r6
    cbd0:	405a      	eors	r2, r3
    cbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbd4:	4910      	ldr	r1, [pc, #64]	; (cc18 <Transform_Sha256+0x158>)
    cbd6:	468c      	mov	ip, r1
    cbd8:	4463      	add	r3, ip
    cbda:	009b      	lsls	r3, r3, #2
    cbdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    cbde:	18cb      	adds	r3, r1, r3
    cbe0:	681b      	ldr	r3, [r3, #0]
    cbe2:	08db      	lsrs	r3, r3, #3
    cbe4:	4053      	eors	r3, r2
    cbe6:	18ea      	adds	r2, r5, r3
    cbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbea:	490c      	ldr	r1, [pc, #48]	; (cc1c <Transform_Sha256+0x15c>)
    cbec:	468c      	mov	ip, r1
    cbee:	4463      	add	r3, ip
    cbf0:	009b      	lsls	r3, r3, #2
    cbf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    cbf4:	18cb      	adds	r3, r1, r3
    cbf6:	681b      	ldr	r3, [r3, #0]
    cbf8:	18d3      	adds	r3, r2, r3
    cbfa:	6023      	str	r3, [r4, #0]
            S[i] = sha256->digest[i];

        for (i = 0; i < 16; i++)
            W[i] = sha256->buffer[i];

        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
    cbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbfe:	3301      	adds	r3, #1
    cc00:	63fb      	str	r3, [r7, #60]	; 0x3c
    cc02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc04:	2b3f      	cmp	r3, #63	; 0x3f
    cc06:	dd95      	ble.n	cb34 <Transform_Sha256+0x74>
                RND(j);
            }
        }
    #else
        /* partially loop unrolled */
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
    cc08:	2300      	movs	r3, #0
    cc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    cc0c:	e3dd      	b.n	d3ca <Transform_Sha256+0x90a>
    cc0e:	46c0      	nop			; (mov r8, r8)
    cc10:	3ffffffe 	.word	0x3ffffffe
    cc14:	3ffffff9 	.word	0x3ffffff9
    cc18:	3ffffff1 	.word	0x3ffffff1
    cc1c:	3ffffff0 	.word	0x3ffffff0
            RND(0); RND(1); RND(2); RND(3);
    cc20:	230c      	movs	r3, #12
    cc22:	18fb      	adds	r3, r7, r3
    cc24:	69dc      	ldr	r4, [r3, #28]
    cc26:	230c      	movs	r3, #12
    cc28:	18fb      	adds	r3, r7, r3
    cc2a:	691b      	ldr	r3, [r3, #16]
    cc2c:	2106      	movs	r1, #6
    cc2e:	0018      	movs	r0, r3
    cc30:	f7ff fe7e 	bl	c930 <rotrFixed>
    cc34:	0005      	movs	r5, r0
    cc36:	230c      	movs	r3, #12
    cc38:	18fb      	adds	r3, r7, r3
    cc3a:	691b      	ldr	r3, [r3, #16]
    cc3c:	210b      	movs	r1, #11
    cc3e:	0018      	movs	r0, r3
    cc40:	f7ff fe76 	bl	c930 <rotrFixed>
    cc44:	0003      	movs	r3, r0
    cc46:	405d      	eors	r5, r3
    cc48:	230c      	movs	r3, #12
    cc4a:	18fb      	adds	r3, r7, r3
    cc4c:	691b      	ldr	r3, [r3, #16]
    cc4e:	2119      	movs	r1, #25
    cc50:	0018      	movs	r0, r3
    cc52:	f7ff fe6d 	bl	c930 <rotrFixed>
    cc56:	0003      	movs	r3, r0
    cc58:	406b      	eors	r3, r5
    cc5a:	18e2      	adds	r2, r4, r3
    cc5c:	230c      	movs	r3, #12
    cc5e:	18fb      	adds	r3, r7, r3
    cc60:	6999      	ldr	r1, [r3, #24]
    cc62:	230c      	movs	r3, #12
    cc64:	18fb      	adds	r3, r7, r3
    cc66:	6918      	ldr	r0, [r3, #16]
    cc68:	230c      	movs	r3, #12
    cc6a:	18fb      	adds	r3, r7, r3
    cc6c:	695c      	ldr	r4, [r3, #20]
    cc6e:	230c      	movs	r3, #12
    cc70:	18fb      	adds	r3, r7, r3
    cc72:	699b      	ldr	r3, [r3, #24]
    cc74:	4063      	eors	r3, r4
    cc76:	4003      	ands	r3, r0
    cc78:	404b      	eors	r3, r1
    cc7a:	18d2      	adds	r2, r2, r3
    cc7c:	4bfe      	ldr	r3, [pc, #1016]	; (d078 <Transform_Sha256+0x5b8>)
    cc7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    cc80:	0089      	lsls	r1, r1, #2
    cc82:	58cb      	ldr	r3, [r1, r3]
    cc84:	18d2      	adds	r2, r2, r3
    cc86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc88:	009b      	lsls	r3, r3, #2
    cc8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    cc8c:	18cb      	adds	r3, r1, r3
    cc8e:	681b      	ldr	r3, [r3, #0]
    cc90:	18d3      	adds	r3, r2, r3
    cc92:	637b      	str	r3, [r7, #52]	; 0x34
    cc94:	230c      	movs	r3, #12
    cc96:	18fb      	adds	r3, r7, r3
    cc98:	681b      	ldr	r3, [r3, #0]
    cc9a:	2102      	movs	r1, #2
    cc9c:	0018      	movs	r0, r3
    cc9e:	f7ff fe47 	bl	c930 <rotrFixed>
    cca2:	0004      	movs	r4, r0
    cca4:	230c      	movs	r3, #12
    cca6:	18fb      	adds	r3, r7, r3
    cca8:	681b      	ldr	r3, [r3, #0]
    ccaa:	210d      	movs	r1, #13
    ccac:	0018      	movs	r0, r3
    ccae:	f7ff fe3f 	bl	c930 <rotrFixed>
    ccb2:	0003      	movs	r3, r0
    ccb4:	405c      	eors	r4, r3
    ccb6:	230c      	movs	r3, #12
    ccb8:	18fb      	adds	r3, r7, r3
    ccba:	681b      	ldr	r3, [r3, #0]
    ccbc:	2116      	movs	r1, #22
    ccbe:	0018      	movs	r0, r3
    ccc0:	f7ff fe36 	bl	c930 <rotrFixed>
    ccc4:	0003      	movs	r3, r0
    ccc6:	0022      	movs	r2, r4
    ccc8:	405a      	eors	r2, r3
    ccca:	230c      	movs	r3, #12
    cccc:	18fb      	adds	r3, r7, r3
    ccce:	6819      	ldr	r1, [r3, #0]
    ccd0:	230c      	movs	r3, #12
    ccd2:	18fb      	adds	r3, r7, r3
    ccd4:	685b      	ldr	r3, [r3, #4]
    ccd6:	4319      	orrs	r1, r3
    ccd8:	230c      	movs	r3, #12
    ccda:	18fb      	adds	r3, r7, r3
    ccdc:	689b      	ldr	r3, [r3, #8]
    ccde:	4019      	ands	r1, r3
    cce0:	230c      	movs	r3, #12
    cce2:	18fb      	adds	r3, r7, r3
    cce4:	6818      	ldr	r0, [r3, #0]
    cce6:	230c      	movs	r3, #12
    cce8:	18fb      	adds	r3, r7, r3
    ccea:	685b      	ldr	r3, [r3, #4]
    ccec:	4003      	ands	r3, r0
    ccee:	430b      	orrs	r3, r1
    ccf0:	18d3      	adds	r3, r2, r3
    ccf2:	633b      	str	r3, [r7, #48]	; 0x30
    ccf4:	230c      	movs	r3, #12
    ccf6:	18fb      	adds	r3, r7, r3
    ccf8:	68da      	ldr	r2, [r3, #12]
    ccfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ccfc:	18d2      	adds	r2, r2, r3
    ccfe:	230c      	movs	r3, #12
    cd00:	18fb      	adds	r3, r7, r3
    cd02:	60da      	str	r2, [r3, #12]
    cd04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    cd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cd08:	18d2      	adds	r2, r2, r3
    cd0a:	230c      	movs	r3, #12
    cd0c:	18fb      	adds	r3, r7, r3
    cd0e:	61da      	str	r2, [r3, #28]
    cd10:	230c      	movs	r3, #12
    cd12:	18fb      	adds	r3, r7, r3
    cd14:	699c      	ldr	r4, [r3, #24]
    cd16:	230c      	movs	r3, #12
    cd18:	18fb      	adds	r3, r7, r3
    cd1a:	68db      	ldr	r3, [r3, #12]
    cd1c:	2106      	movs	r1, #6
    cd1e:	0018      	movs	r0, r3
    cd20:	f7ff fe06 	bl	c930 <rotrFixed>
    cd24:	0005      	movs	r5, r0
    cd26:	230c      	movs	r3, #12
    cd28:	18fb      	adds	r3, r7, r3
    cd2a:	68db      	ldr	r3, [r3, #12]
    cd2c:	210b      	movs	r1, #11
    cd2e:	0018      	movs	r0, r3
    cd30:	f7ff fdfe 	bl	c930 <rotrFixed>
    cd34:	0003      	movs	r3, r0
    cd36:	405d      	eors	r5, r3
    cd38:	230c      	movs	r3, #12
    cd3a:	18fb      	adds	r3, r7, r3
    cd3c:	68db      	ldr	r3, [r3, #12]
    cd3e:	2119      	movs	r1, #25
    cd40:	0018      	movs	r0, r3
    cd42:	f7ff fdf5 	bl	c930 <rotrFixed>
    cd46:	0003      	movs	r3, r0
    cd48:	406b      	eors	r3, r5
    cd4a:	18e2      	adds	r2, r4, r3
    cd4c:	230c      	movs	r3, #12
    cd4e:	18fb      	adds	r3, r7, r3
    cd50:	6959      	ldr	r1, [r3, #20]
    cd52:	230c      	movs	r3, #12
    cd54:	18fb      	adds	r3, r7, r3
    cd56:	68d8      	ldr	r0, [r3, #12]
    cd58:	230c      	movs	r3, #12
    cd5a:	18fb      	adds	r3, r7, r3
    cd5c:	691c      	ldr	r4, [r3, #16]
    cd5e:	230c      	movs	r3, #12
    cd60:	18fb      	adds	r3, r7, r3
    cd62:	695b      	ldr	r3, [r3, #20]
    cd64:	4063      	eors	r3, r4
    cd66:	4003      	ands	r3, r0
    cd68:	404b      	eors	r3, r1
    cd6a:	18d2      	adds	r2, r2, r3
    cd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd6e:	1c59      	adds	r1, r3, #1
    cd70:	4bc1      	ldr	r3, [pc, #772]	; (d078 <Transform_Sha256+0x5b8>)
    cd72:	0089      	lsls	r1, r1, #2
    cd74:	58cb      	ldr	r3, [r1, r3]
    cd76:	18d2      	adds	r2, r2, r3
    cd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd7a:	3301      	adds	r3, #1
    cd7c:	009b      	lsls	r3, r3, #2
    cd7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    cd80:	18cb      	adds	r3, r1, r3
    cd82:	681b      	ldr	r3, [r3, #0]
    cd84:	18d3      	adds	r3, r2, r3
    cd86:	637b      	str	r3, [r7, #52]	; 0x34
    cd88:	230c      	movs	r3, #12
    cd8a:	18fb      	adds	r3, r7, r3
    cd8c:	69db      	ldr	r3, [r3, #28]
    cd8e:	2102      	movs	r1, #2
    cd90:	0018      	movs	r0, r3
    cd92:	f7ff fdcd 	bl	c930 <rotrFixed>
    cd96:	0004      	movs	r4, r0
    cd98:	230c      	movs	r3, #12
    cd9a:	18fb      	adds	r3, r7, r3
    cd9c:	69db      	ldr	r3, [r3, #28]
    cd9e:	210d      	movs	r1, #13
    cda0:	0018      	movs	r0, r3
    cda2:	f7ff fdc5 	bl	c930 <rotrFixed>
    cda6:	0003      	movs	r3, r0
    cda8:	405c      	eors	r4, r3
    cdaa:	230c      	movs	r3, #12
    cdac:	18fb      	adds	r3, r7, r3
    cdae:	69db      	ldr	r3, [r3, #28]
    cdb0:	2116      	movs	r1, #22
    cdb2:	0018      	movs	r0, r3
    cdb4:	f7ff fdbc 	bl	c930 <rotrFixed>
    cdb8:	0003      	movs	r3, r0
    cdba:	0022      	movs	r2, r4
    cdbc:	405a      	eors	r2, r3
    cdbe:	230c      	movs	r3, #12
    cdc0:	18fb      	adds	r3, r7, r3
    cdc2:	69d9      	ldr	r1, [r3, #28]
    cdc4:	230c      	movs	r3, #12
    cdc6:	18fb      	adds	r3, r7, r3
    cdc8:	681b      	ldr	r3, [r3, #0]
    cdca:	4319      	orrs	r1, r3
    cdcc:	230c      	movs	r3, #12
    cdce:	18fb      	adds	r3, r7, r3
    cdd0:	685b      	ldr	r3, [r3, #4]
    cdd2:	4019      	ands	r1, r3
    cdd4:	230c      	movs	r3, #12
    cdd6:	18fb      	adds	r3, r7, r3
    cdd8:	69d8      	ldr	r0, [r3, #28]
    cdda:	230c      	movs	r3, #12
    cddc:	18fb      	adds	r3, r7, r3
    cdde:	681b      	ldr	r3, [r3, #0]
    cde0:	4003      	ands	r3, r0
    cde2:	430b      	orrs	r3, r1
    cde4:	18d3      	adds	r3, r2, r3
    cde6:	633b      	str	r3, [r7, #48]	; 0x30
    cde8:	230c      	movs	r3, #12
    cdea:	18fb      	adds	r3, r7, r3
    cdec:	689a      	ldr	r2, [r3, #8]
    cdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cdf0:	18d2      	adds	r2, r2, r3
    cdf2:	230c      	movs	r3, #12
    cdf4:	18fb      	adds	r3, r7, r3
    cdf6:	609a      	str	r2, [r3, #8]
    cdf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cdfc:	18d2      	adds	r2, r2, r3
    cdfe:	230c      	movs	r3, #12
    ce00:	18fb      	adds	r3, r7, r3
    ce02:	619a      	str	r2, [r3, #24]
    ce04:	230c      	movs	r3, #12
    ce06:	18fb      	adds	r3, r7, r3
    ce08:	695c      	ldr	r4, [r3, #20]
    ce0a:	230c      	movs	r3, #12
    ce0c:	18fb      	adds	r3, r7, r3
    ce0e:	689b      	ldr	r3, [r3, #8]
    ce10:	2106      	movs	r1, #6
    ce12:	0018      	movs	r0, r3
    ce14:	f7ff fd8c 	bl	c930 <rotrFixed>
    ce18:	0005      	movs	r5, r0
    ce1a:	230c      	movs	r3, #12
    ce1c:	18fb      	adds	r3, r7, r3
    ce1e:	689b      	ldr	r3, [r3, #8]
    ce20:	210b      	movs	r1, #11
    ce22:	0018      	movs	r0, r3
    ce24:	f7ff fd84 	bl	c930 <rotrFixed>
    ce28:	0003      	movs	r3, r0
    ce2a:	405d      	eors	r5, r3
    ce2c:	230c      	movs	r3, #12
    ce2e:	18fb      	adds	r3, r7, r3
    ce30:	689b      	ldr	r3, [r3, #8]
    ce32:	2119      	movs	r1, #25
    ce34:	0018      	movs	r0, r3
    ce36:	f7ff fd7b 	bl	c930 <rotrFixed>
    ce3a:	0003      	movs	r3, r0
    ce3c:	406b      	eors	r3, r5
    ce3e:	18e2      	adds	r2, r4, r3
    ce40:	230c      	movs	r3, #12
    ce42:	18fb      	adds	r3, r7, r3
    ce44:	6919      	ldr	r1, [r3, #16]
    ce46:	230c      	movs	r3, #12
    ce48:	18fb      	adds	r3, r7, r3
    ce4a:	6898      	ldr	r0, [r3, #8]
    ce4c:	230c      	movs	r3, #12
    ce4e:	18fb      	adds	r3, r7, r3
    ce50:	68dc      	ldr	r4, [r3, #12]
    ce52:	230c      	movs	r3, #12
    ce54:	18fb      	adds	r3, r7, r3
    ce56:	691b      	ldr	r3, [r3, #16]
    ce58:	4063      	eors	r3, r4
    ce5a:	4003      	ands	r3, r0
    ce5c:	404b      	eors	r3, r1
    ce5e:	18d2      	adds	r2, r2, r3
    ce60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce62:	1c99      	adds	r1, r3, #2
    ce64:	4b84      	ldr	r3, [pc, #528]	; (d078 <Transform_Sha256+0x5b8>)
    ce66:	0089      	lsls	r1, r1, #2
    ce68:	58cb      	ldr	r3, [r1, r3]
    ce6a:	18d2      	adds	r2, r2, r3
    ce6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce6e:	3302      	adds	r3, #2
    ce70:	009b      	lsls	r3, r3, #2
    ce72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    ce74:	18cb      	adds	r3, r1, r3
    ce76:	681b      	ldr	r3, [r3, #0]
    ce78:	18d3      	adds	r3, r2, r3
    ce7a:	637b      	str	r3, [r7, #52]	; 0x34
    ce7c:	230c      	movs	r3, #12
    ce7e:	18fb      	adds	r3, r7, r3
    ce80:	699b      	ldr	r3, [r3, #24]
    ce82:	2102      	movs	r1, #2
    ce84:	0018      	movs	r0, r3
    ce86:	f7ff fd53 	bl	c930 <rotrFixed>
    ce8a:	0004      	movs	r4, r0
    ce8c:	230c      	movs	r3, #12
    ce8e:	18fb      	adds	r3, r7, r3
    ce90:	699b      	ldr	r3, [r3, #24]
    ce92:	210d      	movs	r1, #13
    ce94:	0018      	movs	r0, r3
    ce96:	f7ff fd4b 	bl	c930 <rotrFixed>
    ce9a:	0003      	movs	r3, r0
    ce9c:	405c      	eors	r4, r3
    ce9e:	230c      	movs	r3, #12
    cea0:	18fb      	adds	r3, r7, r3
    cea2:	699b      	ldr	r3, [r3, #24]
    cea4:	2116      	movs	r1, #22
    cea6:	0018      	movs	r0, r3
    cea8:	f7ff fd42 	bl	c930 <rotrFixed>
    ceac:	0003      	movs	r3, r0
    ceae:	0022      	movs	r2, r4
    ceb0:	405a      	eors	r2, r3
    ceb2:	230c      	movs	r3, #12
    ceb4:	18fb      	adds	r3, r7, r3
    ceb6:	6999      	ldr	r1, [r3, #24]
    ceb8:	230c      	movs	r3, #12
    ceba:	18fb      	adds	r3, r7, r3
    cebc:	69db      	ldr	r3, [r3, #28]
    cebe:	4319      	orrs	r1, r3
    cec0:	230c      	movs	r3, #12
    cec2:	18fb      	adds	r3, r7, r3
    cec4:	681b      	ldr	r3, [r3, #0]
    cec6:	4019      	ands	r1, r3
    cec8:	230c      	movs	r3, #12
    ceca:	18fb      	adds	r3, r7, r3
    cecc:	6998      	ldr	r0, [r3, #24]
    cece:	230c      	movs	r3, #12
    ced0:	18fb      	adds	r3, r7, r3
    ced2:	69db      	ldr	r3, [r3, #28]
    ced4:	4003      	ands	r3, r0
    ced6:	430b      	orrs	r3, r1
    ced8:	18d3      	adds	r3, r2, r3
    ceda:	633b      	str	r3, [r7, #48]	; 0x30
    cedc:	230c      	movs	r3, #12
    cede:	18fb      	adds	r3, r7, r3
    cee0:	685a      	ldr	r2, [r3, #4]
    cee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cee4:	18d2      	adds	r2, r2, r3
    cee6:	230c      	movs	r3, #12
    cee8:	18fb      	adds	r3, r7, r3
    ceea:	605a      	str	r2, [r3, #4]
    ceec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ceee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cef0:	18d2      	adds	r2, r2, r3
    cef2:	230c      	movs	r3, #12
    cef4:	18fb      	adds	r3, r7, r3
    cef6:	615a      	str	r2, [r3, #20]
    cef8:	230c      	movs	r3, #12
    cefa:	18fb      	adds	r3, r7, r3
    cefc:	691c      	ldr	r4, [r3, #16]
    cefe:	230c      	movs	r3, #12
    cf00:	18fb      	adds	r3, r7, r3
    cf02:	685b      	ldr	r3, [r3, #4]
    cf04:	2106      	movs	r1, #6
    cf06:	0018      	movs	r0, r3
    cf08:	f7ff fd12 	bl	c930 <rotrFixed>
    cf0c:	0005      	movs	r5, r0
    cf0e:	230c      	movs	r3, #12
    cf10:	18fb      	adds	r3, r7, r3
    cf12:	685b      	ldr	r3, [r3, #4]
    cf14:	210b      	movs	r1, #11
    cf16:	0018      	movs	r0, r3
    cf18:	f7ff fd0a 	bl	c930 <rotrFixed>
    cf1c:	0003      	movs	r3, r0
    cf1e:	405d      	eors	r5, r3
    cf20:	230c      	movs	r3, #12
    cf22:	18fb      	adds	r3, r7, r3
    cf24:	685b      	ldr	r3, [r3, #4]
    cf26:	2119      	movs	r1, #25
    cf28:	0018      	movs	r0, r3
    cf2a:	f7ff fd01 	bl	c930 <rotrFixed>
    cf2e:	0003      	movs	r3, r0
    cf30:	406b      	eors	r3, r5
    cf32:	18e2      	adds	r2, r4, r3
    cf34:	230c      	movs	r3, #12
    cf36:	18fb      	adds	r3, r7, r3
    cf38:	68d9      	ldr	r1, [r3, #12]
    cf3a:	230c      	movs	r3, #12
    cf3c:	18fb      	adds	r3, r7, r3
    cf3e:	6858      	ldr	r0, [r3, #4]
    cf40:	230c      	movs	r3, #12
    cf42:	18fb      	adds	r3, r7, r3
    cf44:	689c      	ldr	r4, [r3, #8]
    cf46:	230c      	movs	r3, #12
    cf48:	18fb      	adds	r3, r7, r3
    cf4a:	68db      	ldr	r3, [r3, #12]
    cf4c:	4063      	eors	r3, r4
    cf4e:	4003      	ands	r3, r0
    cf50:	404b      	eors	r3, r1
    cf52:	18d2      	adds	r2, r2, r3
    cf54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf56:	1cd9      	adds	r1, r3, #3
    cf58:	4b47      	ldr	r3, [pc, #284]	; (d078 <Transform_Sha256+0x5b8>)
    cf5a:	0089      	lsls	r1, r1, #2
    cf5c:	58cb      	ldr	r3, [r1, r3]
    cf5e:	18d2      	adds	r2, r2, r3
    cf60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf62:	3303      	adds	r3, #3
    cf64:	009b      	lsls	r3, r3, #2
    cf66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    cf68:	18cb      	adds	r3, r1, r3
    cf6a:	681b      	ldr	r3, [r3, #0]
    cf6c:	18d3      	adds	r3, r2, r3
    cf6e:	637b      	str	r3, [r7, #52]	; 0x34
    cf70:	230c      	movs	r3, #12
    cf72:	18fb      	adds	r3, r7, r3
    cf74:	695b      	ldr	r3, [r3, #20]
    cf76:	2102      	movs	r1, #2
    cf78:	0018      	movs	r0, r3
    cf7a:	f7ff fcd9 	bl	c930 <rotrFixed>
    cf7e:	0004      	movs	r4, r0
    cf80:	230c      	movs	r3, #12
    cf82:	18fb      	adds	r3, r7, r3
    cf84:	695b      	ldr	r3, [r3, #20]
    cf86:	210d      	movs	r1, #13
    cf88:	0018      	movs	r0, r3
    cf8a:	f7ff fcd1 	bl	c930 <rotrFixed>
    cf8e:	0003      	movs	r3, r0
    cf90:	405c      	eors	r4, r3
    cf92:	230c      	movs	r3, #12
    cf94:	18fb      	adds	r3, r7, r3
    cf96:	695b      	ldr	r3, [r3, #20]
    cf98:	2116      	movs	r1, #22
    cf9a:	0018      	movs	r0, r3
    cf9c:	f7ff fcc8 	bl	c930 <rotrFixed>
    cfa0:	0003      	movs	r3, r0
    cfa2:	0022      	movs	r2, r4
    cfa4:	405a      	eors	r2, r3
    cfa6:	230c      	movs	r3, #12
    cfa8:	18fb      	adds	r3, r7, r3
    cfaa:	6959      	ldr	r1, [r3, #20]
    cfac:	230c      	movs	r3, #12
    cfae:	18fb      	adds	r3, r7, r3
    cfb0:	699b      	ldr	r3, [r3, #24]
    cfb2:	4319      	orrs	r1, r3
    cfb4:	230c      	movs	r3, #12
    cfb6:	18fb      	adds	r3, r7, r3
    cfb8:	69db      	ldr	r3, [r3, #28]
    cfba:	4019      	ands	r1, r3
    cfbc:	230c      	movs	r3, #12
    cfbe:	18fb      	adds	r3, r7, r3
    cfc0:	6958      	ldr	r0, [r3, #20]
    cfc2:	230c      	movs	r3, #12
    cfc4:	18fb      	adds	r3, r7, r3
    cfc6:	699b      	ldr	r3, [r3, #24]
    cfc8:	4003      	ands	r3, r0
    cfca:	430b      	orrs	r3, r1
    cfcc:	18d3      	adds	r3, r2, r3
    cfce:	633b      	str	r3, [r7, #48]	; 0x30
    cfd0:	230c      	movs	r3, #12
    cfd2:	18fb      	adds	r3, r7, r3
    cfd4:	681a      	ldr	r2, [r3, #0]
    cfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cfd8:	18d2      	adds	r2, r2, r3
    cfda:	230c      	movs	r3, #12
    cfdc:	18fb      	adds	r3, r7, r3
    cfde:	601a      	str	r2, [r3, #0]
    cfe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    cfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cfe4:	18d2      	adds	r2, r2, r3
    cfe6:	230c      	movs	r3, #12
    cfe8:	18fb      	adds	r3, r7, r3
    cfea:	611a      	str	r2, [r3, #16]
            RND(4); RND(5); RND(6); RND(7);
    cfec:	230c      	movs	r3, #12
    cfee:	18fb      	adds	r3, r7, r3
    cff0:	68dc      	ldr	r4, [r3, #12]
    cff2:	230c      	movs	r3, #12
    cff4:	18fb      	adds	r3, r7, r3
    cff6:	681b      	ldr	r3, [r3, #0]
    cff8:	2106      	movs	r1, #6
    cffa:	0018      	movs	r0, r3
    cffc:	f7ff fc98 	bl	c930 <rotrFixed>
    d000:	0005      	movs	r5, r0
    d002:	230c      	movs	r3, #12
    d004:	18fb      	adds	r3, r7, r3
    d006:	681b      	ldr	r3, [r3, #0]
    d008:	210b      	movs	r1, #11
    d00a:	0018      	movs	r0, r3
    d00c:	f7ff fc90 	bl	c930 <rotrFixed>
    d010:	0003      	movs	r3, r0
    d012:	405d      	eors	r5, r3
    d014:	230c      	movs	r3, #12
    d016:	18fb      	adds	r3, r7, r3
    d018:	681b      	ldr	r3, [r3, #0]
    d01a:	2119      	movs	r1, #25
    d01c:	0018      	movs	r0, r3
    d01e:	f7ff fc87 	bl	c930 <rotrFixed>
    d022:	0003      	movs	r3, r0
    d024:	406b      	eors	r3, r5
    d026:	18e2      	adds	r2, r4, r3
    d028:	230c      	movs	r3, #12
    d02a:	18fb      	adds	r3, r7, r3
    d02c:	6899      	ldr	r1, [r3, #8]
    d02e:	230c      	movs	r3, #12
    d030:	18fb      	adds	r3, r7, r3
    d032:	6818      	ldr	r0, [r3, #0]
    d034:	230c      	movs	r3, #12
    d036:	18fb      	adds	r3, r7, r3
    d038:	685c      	ldr	r4, [r3, #4]
    d03a:	230c      	movs	r3, #12
    d03c:	18fb      	adds	r3, r7, r3
    d03e:	689b      	ldr	r3, [r3, #8]
    d040:	4063      	eors	r3, r4
    d042:	4003      	ands	r3, r0
    d044:	404b      	eors	r3, r1
    d046:	18d2      	adds	r2, r2, r3
    d048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d04a:	1d19      	adds	r1, r3, #4
    d04c:	4b0a      	ldr	r3, [pc, #40]	; (d078 <Transform_Sha256+0x5b8>)
    d04e:	0089      	lsls	r1, r1, #2
    d050:	58cb      	ldr	r3, [r1, r3]
    d052:	18d2      	adds	r2, r2, r3
    d054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d056:	3304      	adds	r3, #4
    d058:	009b      	lsls	r3, r3, #2
    d05a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d05c:	18cb      	adds	r3, r1, r3
    d05e:	681b      	ldr	r3, [r3, #0]
    d060:	18d3      	adds	r3, r2, r3
    d062:	637b      	str	r3, [r7, #52]	; 0x34
    d064:	230c      	movs	r3, #12
    d066:	18fb      	adds	r3, r7, r3
    d068:	691b      	ldr	r3, [r3, #16]
    d06a:	2102      	movs	r1, #2
    d06c:	0018      	movs	r0, r3
    d06e:	f7ff fc5f 	bl	c930 <rotrFixed>
    d072:	0004      	movs	r4, r0
    d074:	e002      	b.n	d07c <Transform_Sha256+0x5bc>
    d076:	46c0      	nop			; (mov r8, r8)
    d078:	0002c4a8 	.word	0x0002c4a8
    d07c:	230c      	movs	r3, #12
    d07e:	18fb      	adds	r3, r7, r3
    d080:	691b      	ldr	r3, [r3, #16]
    d082:	210d      	movs	r1, #13
    d084:	0018      	movs	r0, r3
    d086:	f7ff fc53 	bl	c930 <rotrFixed>
    d08a:	0003      	movs	r3, r0
    d08c:	405c      	eors	r4, r3
    d08e:	230c      	movs	r3, #12
    d090:	18fb      	adds	r3, r7, r3
    d092:	691b      	ldr	r3, [r3, #16]
    d094:	2116      	movs	r1, #22
    d096:	0018      	movs	r0, r3
    d098:	f7ff fc4a 	bl	c930 <rotrFixed>
    d09c:	0003      	movs	r3, r0
    d09e:	0022      	movs	r2, r4
    d0a0:	405a      	eors	r2, r3
    d0a2:	230c      	movs	r3, #12
    d0a4:	18fb      	adds	r3, r7, r3
    d0a6:	6919      	ldr	r1, [r3, #16]
    d0a8:	230c      	movs	r3, #12
    d0aa:	18fb      	adds	r3, r7, r3
    d0ac:	695b      	ldr	r3, [r3, #20]
    d0ae:	4319      	orrs	r1, r3
    d0b0:	230c      	movs	r3, #12
    d0b2:	18fb      	adds	r3, r7, r3
    d0b4:	699b      	ldr	r3, [r3, #24]
    d0b6:	4019      	ands	r1, r3
    d0b8:	230c      	movs	r3, #12
    d0ba:	18fb      	adds	r3, r7, r3
    d0bc:	6918      	ldr	r0, [r3, #16]
    d0be:	230c      	movs	r3, #12
    d0c0:	18fb      	adds	r3, r7, r3
    d0c2:	695b      	ldr	r3, [r3, #20]
    d0c4:	4003      	ands	r3, r0
    d0c6:	430b      	orrs	r3, r1
    d0c8:	18d3      	adds	r3, r2, r3
    d0ca:	633b      	str	r3, [r7, #48]	; 0x30
    d0cc:	230c      	movs	r3, #12
    d0ce:	18fb      	adds	r3, r7, r3
    d0d0:	69da      	ldr	r2, [r3, #28]
    d0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0d4:	18d2      	adds	r2, r2, r3
    d0d6:	230c      	movs	r3, #12
    d0d8:	18fb      	adds	r3, r7, r3
    d0da:	61da      	str	r2, [r3, #28]
    d0dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d0e0:	18d2      	adds	r2, r2, r3
    d0e2:	230c      	movs	r3, #12
    d0e4:	18fb      	adds	r3, r7, r3
    d0e6:	60da      	str	r2, [r3, #12]
    d0e8:	230c      	movs	r3, #12
    d0ea:	18fb      	adds	r3, r7, r3
    d0ec:	689c      	ldr	r4, [r3, #8]
    d0ee:	230c      	movs	r3, #12
    d0f0:	18fb      	adds	r3, r7, r3
    d0f2:	69db      	ldr	r3, [r3, #28]
    d0f4:	2106      	movs	r1, #6
    d0f6:	0018      	movs	r0, r3
    d0f8:	f7ff fc1a 	bl	c930 <rotrFixed>
    d0fc:	0005      	movs	r5, r0
    d0fe:	230c      	movs	r3, #12
    d100:	18fb      	adds	r3, r7, r3
    d102:	69db      	ldr	r3, [r3, #28]
    d104:	210b      	movs	r1, #11
    d106:	0018      	movs	r0, r3
    d108:	f7ff fc12 	bl	c930 <rotrFixed>
    d10c:	0003      	movs	r3, r0
    d10e:	405d      	eors	r5, r3
    d110:	230c      	movs	r3, #12
    d112:	18fb      	adds	r3, r7, r3
    d114:	69db      	ldr	r3, [r3, #28]
    d116:	2119      	movs	r1, #25
    d118:	0018      	movs	r0, r3
    d11a:	f7ff fc09 	bl	c930 <rotrFixed>
    d11e:	0003      	movs	r3, r0
    d120:	406b      	eors	r3, r5
    d122:	18e2      	adds	r2, r4, r3
    d124:	230c      	movs	r3, #12
    d126:	18fb      	adds	r3, r7, r3
    d128:	6859      	ldr	r1, [r3, #4]
    d12a:	230c      	movs	r3, #12
    d12c:	18fb      	adds	r3, r7, r3
    d12e:	69d8      	ldr	r0, [r3, #28]
    d130:	230c      	movs	r3, #12
    d132:	18fb      	adds	r3, r7, r3
    d134:	681c      	ldr	r4, [r3, #0]
    d136:	230c      	movs	r3, #12
    d138:	18fb      	adds	r3, r7, r3
    d13a:	685b      	ldr	r3, [r3, #4]
    d13c:	4063      	eors	r3, r4
    d13e:	4003      	ands	r3, r0
    d140:	404b      	eors	r3, r1
    d142:	18d2      	adds	r2, r2, r3
    d144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d146:	1d59      	adds	r1, r3, #5
    d148:	4bb4      	ldr	r3, [pc, #720]	; (d41c <Transform_Sha256+0x95c>)
    d14a:	0089      	lsls	r1, r1, #2
    d14c:	58cb      	ldr	r3, [r1, r3]
    d14e:	18d2      	adds	r2, r2, r3
    d150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d152:	3305      	adds	r3, #5
    d154:	009b      	lsls	r3, r3, #2
    d156:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d158:	18cb      	adds	r3, r1, r3
    d15a:	681b      	ldr	r3, [r3, #0]
    d15c:	18d3      	adds	r3, r2, r3
    d15e:	637b      	str	r3, [r7, #52]	; 0x34
    d160:	230c      	movs	r3, #12
    d162:	18fb      	adds	r3, r7, r3
    d164:	68db      	ldr	r3, [r3, #12]
    d166:	2102      	movs	r1, #2
    d168:	0018      	movs	r0, r3
    d16a:	f7ff fbe1 	bl	c930 <rotrFixed>
    d16e:	0004      	movs	r4, r0
    d170:	230c      	movs	r3, #12
    d172:	18fb      	adds	r3, r7, r3
    d174:	68db      	ldr	r3, [r3, #12]
    d176:	210d      	movs	r1, #13
    d178:	0018      	movs	r0, r3
    d17a:	f7ff fbd9 	bl	c930 <rotrFixed>
    d17e:	0003      	movs	r3, r0
    d180:	405c      	eors	r4, r3
    d182:	230c      	movs	r3, #12
    d184:	18fb      	adds	r3, r7, r3
    d186:	68db      	ldr	r3, [r3, #12]
    d188:	2116      	movs	r1, #22
    d18a:	0018      	movs	r0, r3
    d18c:	f7ff fbd0 	bl	c930 <rotrFixed>
    d190:	0003      	movs	r3, r0
    d192:	0022      	movs	r2, r4
    d194:	405a      	eors	r2, r3
    d196:	230c      	movs	r3, #12
    d198:	18fb      	adds	r3, r7, r3
    d19a:	68d9      	ldr	r1, [r3, #12]
    d19c:	230c      	movs	r3, #12
    d19e:	18fb      	adds	r3, r7, r3
    d1a0:	691b      	ldr	r3, [r3, #16]
    d1a2:	4319      	orrs	r1, r3
    d1a4:	230c      	movs	r3, #12
    d1a6:	18fb      	adds	r3, r7, r3
    d1a8:	695b      	ldr	r3, [r3, #20]
    d1aa:	4019      	ands	r1, r3
    d1ac:	230c      	movs	r3, #12
    d1ae:	18fb      	adds	r3, r7, r3
    d1b0:	68d8      	ldr	r0, [r3, #12]
    d1b2:	230c      	movs	r3, #12
    d1b4:	18fb      	adds	r3, r7, r3
    d1b6:	691b      	ldr	r3, [r3, #16]
    d1b8:	4003      	ands	r3, r0
    d1ba:	430b      	orrs	r3, r1
    d1bc:	18d3      	adds	r3, r2, r3
    d1be:	633b      	str	r3, [r7, #48]	; 0x30
    d1c0:	230c      	movs	r3, #12
    d1c2:	18fb      	adds	r3, r7, r3
    d1c4:	699a      	ldr	r2, [r3, #24]
    d1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1c8:	18d2      	adds	r2, r2, r3
    d1ca:	230c      	movs	r3, #12
    d1cc:	18fb      	adds	r3, r7, r3
    d1ce:	619a      	str	r2, [r3, #24]
    d1d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d1d4:	18d2      	adds	r2, r2, r3
    d1d6:	230c      	movs	r3, #12
    d1d8:	18fb      	adds	r3, r7, r3
    d1da:	609a      	str	r2, [r3, #8]
    d1dc:	230c      	movs	r3, #12
    d1de:	18fb      	adds	r3, r7, r3
    d1e0:	685c      	ldr	r4, [r3, #4]
    d1e2:	230c      	movs	r3, #12
    d1e4:	18fb      	adds	r3, r7, r3
    d1e6:	699b      	ldr	r3, [r3, #24]
    d1e8:	2106      	movs	r1, #6
    d1ea:	0018      	movs	r0, r3
    d1ec:	f7ff fba0 	bl	c930 <rotrFixed>
    d1f0:	0005      	movs	r5, r0
    d1f2:	230c      	movs	r3, #12
    d1f4:	18fb      	adds	r3, r7, r3
    d1f6:	699b      	ldr	r3, [r3, #24]
    d1f8:	210b      	movs	r1, #11
    d1fa:	0018      	movs	r0, r3
    d1fc:	f7ff fb98 	bl	c930 <rotrFixed>
    d200:	0003      	movs	r3, r0
    d202:	405d      	eors	r5, r3
    d204:	230c      	movs	r3, #12
    d206:	18fb      	adds	r3, r7, r3
    d208:	699b      	ldr	r3, [r3, #24]
    d20a:	2119      	movs	r1, #25
    d20c:	0018      	movs	r0, r3
    d20e:	f7ff fb8f 	bl	c930 <rotrFixed>
    d212:	0003      	movs	r3, r0
    d214:	406b      	eors	r3, r5
    d216:	18e2      	adds	r2, r4, r3
    d218:	230c      	movs	r3, #12
    d21a:	18fb      	adds	r3, r7, r3
    d21c:	6819      	ldr	r1, [r3, #0]
    d21e:	230c      	movs	r3, #12
    d220:	18fb      	adds	r3, r7, r3
    d222:	6998      	ldr	r0, [r3, #24]
    d224:	230c      	movs	r3, #12
    d226:	18fb      	adds	r3, r7, r3
    d228:	69dc      	ldr	r4, [r3, #28]
    d22a:	230c      	movs	r3, #12
    d22c:	18fb      	adds	r3, r7, r3
    d22e:	681b      	ldr	r3, [r3, #0]
    d230:	4063      	eors	r3, r4
    d232:	4003      	ands	r3, r0
    d234:	404b      	eors	r3, r1
    d236:	18d2      	adds	r2, r2, r3
    d238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d23a:	1d99      	adds	r1, r3, #6
    d23c:	4b77      	ldr	r3, [pc, #476]	; (d41c <Transform_Sha256+0x95c>)
    d23e:	0089      	lsls	r1, r1, #2
    d240:	58cb      	ldr	r3, [r1, r3]
    d242:	18d2      	adds	r2, r2, r3
    d244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d246:	3306      	adds	r3, #6
    d248:	009b      	lsls	r3, r3, #2
    d24a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d24c:	18cb      	adds	r3, r1, r3
    d24e:	681b      	ldr	r3, [r3, #0]
    d250:	18d3      	adds	r3, r2, r3
    d252:	637b      	str	r3, [r7, #52]	; 0x34
    d254:	230c      	movs	r3, #12
    d256:	18fb      	adds	r3, r7, r3
    d258:	689b      	ldr	r3, [r3, #8]
    d25a:	2102      	movs	r1, #2
    d25c:	0018      	movs	r0, r3
    d25e:	f7ff fb67 	bl	c930 <rotrFixed>
    d262:	0004      	movs	r4, r0
    d264:	230c      	movs	r3, #12
    d266:	18fb      	adds	r3, r7, r3
    d268:	689b      	ldr	r3, [r3, #8]
    d26a:	210d      	movs	r1, #13
    d26c:	0018      	movs	r0, r3
    d26e:	f7ff fb5f 	bl	c930 <rotrFixed>
    d272:	0003      	movs	r3, r0
    d274:	405c      	eors	r4, r3
    d276:	230c      	movs	r3, #12
    d278:	18fb      	adds	r3, r7, r3
    d27a:	689b      	ldr	r3, [r3, #8]
    d27c:	2116      	movs	r1, #22
    d27e:	0018      	movs	r0, r3
    d280:	f7ff fb56 	bl	c930 <rotrFixed>
    d284:	0003      	movs	r3, r0
    d286:	0022      	movs	r2, r4
    d288:	405a      	eors	r2, r3
    d28a:	230c      	movs	r3, #12
    d28c:	18fb      	adds	r3, r7, r3
    d28e:	6899      	ldr	r1, [r3, #8]
    d290:	230c      	movs	r3, #12
    d292:	18fb      	adds	r3, r7, r3
    d294:	68db      	ldr	r3, [r3, #12]
    d296:	4319      	orrs	r1, r3
    d298:	230c      	movs	r3, #12
    d29a:	18fb      	adds	r3, r7, r3
    d29c:	691b      	ldr	r3, [r3, #16]
    d29e:	4019      	ands	r1, r3
    d2a0:	230c      	movs	r3, #12
    d2a2:	18fb      	adds	r3, r7, r3
    d2a4:	6898      	ldr	r0, [r3, #8]
    d2a6:	230c      	movs	r3, #12
    d2a8:	18fb      	adds	r3, r7, r3
    d2aa:	68db      	ldr	r3, [r3, #12]
    d2ac:	4003      	ands	r3, r0
    d2ae:	430b      	orrs	r3, r1
    d2b0:	18d3      	adds	r3, r2, r3
    d2b2:	633b      	str	r3, [r7, #48]	; 0x30
    d2b4:	230c      	movs	r3, #12
    d2b6:	18fb      	adds	r3, r7, r3
    d2b8:	695a      	ldr	r2, [r3, #20]
    d2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2bc:	18d2      	adds	r2, r2, r3
    d2be:	230c      	movs	r3, #12
    d2c0:	18fb      	adds	r3, r7, r3
    d2c2:	615a      	str	r2, [r3, #20]
    d2c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d2c8:	18d2      	adds	r2, r2, r3
    d2ca:	230c      	movs	r3, #12
    d2cc:	18fb      	adds	r3, r7, r3
    d2ce:	605a      	str	r2, [r3, #4]
    d2d0:	230c      	movs	r3, #12
    d2d2:	18fb      	adds	r3, r7, r3
    d2d4:	681c      	ldr	r4, [r3, #0]
    d2d6:	230c      	movs	r3, #12
    d2d8:	18fb      	adds	r3, r7, r3
    d2da:	695b      	ldr	r3, [r3, #20]
    d2dc:	2106      	movs	r1, #6
    d2de:	0018      	movs	r0, r3
    d2e0:	f7ff fb26 	bl	c930 <rotrFixed>
    d2e4:	0005      	movs	r5, r0
    d2e6:	230c      	movs	r3, #12
    d2e8:	18fb      	adds	r3, r7, r3
    d2ea:	695b      	ldr	r3, [r3, #20]
    d2ec:	210b      	movs	r1, #11
    d2ee:	0018      	movs	r0, r3
    d2f0:	f7ff fb1e 	bl	c930 <rotrFixed>
    d2f4:	0003      	movs	r3, r0
    d2f6:	405d      	eors	r5, r3
    d2f8:	230c      	movs	r3, #12
    d2fa:	18fb      	adds	r3, r7, r3
    d2fc:	695b      	ldr	r3, [r3, #20]
    d2fe:	2119      	movs	r1, #25
    d300:	0018      	movs	r0, r3
    d302:	f7ff fb15 	bl	c930 <rotrFixed>
    d306:	0003      	movs	r3, r0
    d308:	406b      	eors	r3, r5
    d30a:	18e2      	adds	r2, r4, r3
    d30c:	230c      	movs	r3, #12
    d30e:	18fb      	adds	r3, r7, r3
    d310:	69d9      	ldr	r1, [r3, #28]
    d312:	230c      	movs	r3, #12
    d314:	18fb      	adds	r3, r7, r3
    d316:	6958      	ldr	r0, [r3, #20]
    d318:	230c      	movs	r3, #12
    d31a:	18fb      	adds	r3, r7, r3
    d31c:	699c      	ldr	r4, [r3, #24]
    d31e:	230c      	movs	r3, #12
    d320:	18fb      	adds	r3, r7, r3
    d322:	69db      	ldr	r3, [r3, #28]
    d324:	4063      	eors	r3, r4
    d326:	4003      	ands	r3, r0
    d328:	404b      	eors	r3, r1
    d32a:	18d2      	adds	r2, r2, r3
    d32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d32e:	1dd9      	adds	r1, r3, #7
    d330:	4b3a      	ldr	r3, [pc, #232]	; (d41c <Transform_Sha256+0x95c>)
    d332:	0089      	lsls	r1, r1, #2
    d334:	58cb      	ldr	r3, [r1, r3]
    d336:	18d2      	adds	r2, r2, r3
    d338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d33a:	3307      	adds	r3, #7
    d33c:	009b      	lsls	r3, r3, #2
    d33e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d340:	18cb      	adds	r3, r1, r3
    d342:	681b      	ldr	r3, [r3, #0]
    d344:	18d3      	adds	r3, r2, r3
    d346:	637b      	str	r3, [r7, #52]	; 0x34
    d348:	230c      	movs	r3, #12
    d34a:	18fb      	adds	r3, r7, r3
    d34c:	685b      	ldr	r3, [r3, #4]
    d34e:	2102      	movs	r1, #2
    d350:	0018      	movs	r0, r3
    d352:	f7ff faed 	bl	c930 <rotrFixed>
    d356:	0004      	movs	r4, r0
    d358:	230c      	movs	r3, #12
    d35a:	18fb      	adds	r3, r7, r3
    d35c:	685b      	ldr	r3, [r3, #4]
    d35e:	210d      	movs	r1, #13
    d360:	0018      	movs	r0, r3
    d362:	f7ff fae5 	bl	c930 <rotrFixed>
    d366:	0003      	movs	r3, r0
    d368:	405c      	eors	r4, r3
    d36a:	230c      	movs	r3, #12
    d36c:	18fb      	adds	r3, r7, r3
    d36e:	685b      	ldr	r3, [r3, #4]
    d370:	2116      	movs	r1, #22
    d372:	0018      	movs	r0, r3
    d374:	f7ff fadc 	bl	c930 <rotrFixed>
    d378:	0003      	movs	r3, r0
    d37a:	0022      	movs	r2, r4
    d37c:	405a      	eors	r2, r3
    d37e:	230c      	movs	r3, #12
    d380:	18fb      	adds	r3, r7, r3
    d382:	6859      	ldr	r1, [r3, #4]
    d384:	230c      	movs	r3, #12
    d386:	18fb      	adds	r3, r7, r3
    d388:	689b      	ldr	r3, [r3, #8]
    d38a:	4319      	orrs	r1, r3
    d38c:	230c      	movs	r3, #12
    d38e:	18fb      	adds	r3, r7, r3
    d390:	68db      	ldr	r3, [r3, #12]
    d392:	4019      	ands	r1, r3
    d394:	230c      	movs	r3, #12
    d396:	18fb      	adds	r3, r7, r3
    d398:	6858      	ldr	r0, [r3, #4]
    d39a:	230c      	movs	r3, #12
    d39c:	18fb      	adds	r3, r7, r3
    d39e:	689b      	ldr	r3, [r3, #8]
    d3a0:	4003      	ands	r3, r0
    d3a2:	430b      	orrs	r3, r1
    d3a4:	18d3      	adds	r3, r2, r3
    d3a6:	633b      	str	r3, [r7, #48]	; 0x30
    d3a8:	230c      	movs	r3, #12
    d3aa:	18fb      	adds	r3, r7, r3
    d3ac:	691a      	ldr	r2, [r3, #16]
    d3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d3b0:	18d2      	adds	r2, r2, r3
    d3b2:	230c      	movs	r3, #12
    d3b4:	18fb      	adds	r3, r7, r3
    d3b6:	611a      	str	r2, [r3, #16]
    d3b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d3bc:	18d2      	adds	r2, r2, r3
    d3be:	230c      	movs	r3, #12
    d3c0:	18fb      	adds	r3, r7, r3
    d3c2:	601a      	str	r2, [r3, #0]
                RND(j);
            }
        }
    #else
        /* partially loop unrolled */
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
    d3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d3c6:	3308      	adds	r3, #8
    d3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    d3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d3cc:	2b3f      	cmp	r3, #63	; 0x3f
    d3ce:	dc00      	bgt.n	d3d2 <Transform_Sha256+0x912>
    d3d0:	e426      	b.n	cc20 <Transform_Sha256+0x160>
            RND(4); RND(5); RND(6); RND(7);
        }
    #endif /* USE_SLOW_SHA256 */

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
    d3d2:	2300      	movs	r3, #0
    d3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    d3d6:	e010      	b.n	d3fa <Transform_Sha256+0x93a>
            sha256->digest[i] += S[i];
    d3d8:	687b      	ldr	r3, [r7, #4]
    d3da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3dc:	0092      	lsls	r2, r2, #2
    d3de:	58d2      	ldr	r2, [r2, r3]
    d3e0:	230c      	movs	r3, #12
    d3e2:	18fb      	adds	r3, r7, r3
    d3e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    d3e6:	0089      	lsls	r1, r1, #2
    d3e8:	58cb      	ldr	r3, [r1, r3]
    d3ea:	18d1      	adds	r1, r2, r3
    d3ec:	687b      	ldr	r3, [r7, #4]
    d3ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3f0:	0092      	lsls	r2, r2, #2
    d3f2:	50d1      	str	r1, [r2, r3]
            RND(4); RND(5); RND(6); RND(7);
        }
    #endif /* USE_SLOW_SHA256 */

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
    d3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d3f6:	3301      	adds	r3, #1
    d3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    d3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d3fc:	2b07      	cmp	r3, #7
    d3fe:	ddeb      	ble.n	d3d8 <Transform_Sha256+0x918>
            sha256->digest[i] += S[i];
        }

    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    d400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d402:	62fb      	str	r3, [r7, #44]	; 0x2c
    d404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d406:	2b00      	cmp	r3, #0
    d408:	d003      	beq.n	d412 <Transform_Sha256+0x952>
    d40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d40c:	0018      	movs	r0, r3
    d40e:	f018 f943 	bl	25698 <free>
    #endif
        return 0;
    d412:	2300      	movs	r3, #0
    }
    d414:	0018      	movs	r0, r3
    d416:	46bd      	mov	sp, r7
    d418:	b011      	add	sp, #68	; 0x44
    d41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d41c:	0002c4a8 	.word	0x0002c4a8

0000d420 <AddLength>:


#ifdef XTRANSFORM

    static WC_INLINE void AddLength(wc_Sha256* sha256, word32 len)
    {
    d420:	b580      	push	{r7, lr}
    d422:	b084      	sub	sp, #16
    d424:	af00      	add	r7, sp, #0
    d426:	6078      	str	r0, [r7, #4]
    d428:	6039      	str	r1, [r7, #0]
        word32 tmp = sha256->loLen;
    d42a:	687b      	ldr	r3, [r7, #4]
    d42c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d42e:	60fb      	str	r3, [r7, #12]
        if ((sha256->loLen += len) < tmp)
    d430:	687b      	ldr	r3, [r7, #4]
    d432:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    d434:	683b      	ldr	r3, [r7, #0]
    d436:	18d2      	adds	r2, r2, r3
    d438:	687b      	ldr	r3, [r7, #4]
    d43a:	665a      	str	r2, [r3, #100]	; 0x64
    d43c:	687b      	ldr	r3, [r7, #4]
    d43e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    d440:	68fb      	ldr	r3, [r7, #12]
    d442:	429a      	cmp	r2, r3
    d444:	d204      	bcs.n	d450 <AddLength+0x30>
            sha256->hiLen++;                       /* carry low to high */
    d446:	687b      	ldr	r3, [r7, #4]
    d448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    d44a:	1c5a      	adds	r2, r3, #1
    d44c:	687b      	ldr	r3, [r7, #4]
    d44e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    d450:	46c0      	nop			; (mov r8, r8)
    d452:	46bd      	mov	sp, r7
    d454:	b004      	add	sp, #16
    d456:	bd80      	pop	{r7, pc}

0000d458 <Sha256Update>:

    static WC_INLINE int Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
    d458:	b580      	push	{r7, lr}
    d45a:	b088      	sub	sp, #32
    d45c:	af00      	add	r7, sp, #0
    d45e:	60f8      	str	r0, [r7, #12]
    d460:	60b9      	str	r1, [r7, #8]
    d462:	607a      	str	r2, [r7, #4]
        int ret = 0;
    d464:	2300      	movs	r3, #0
    d466:	61fb      	str	r3, [r7, #28]
        byte* local;

        if (sha256 == NULL || (data == NULL && len > 0)) {
    d468:	68fb      	ldr	r3, [r7, #12]
    d46a:	2b00      	cmp	r3, #0
    d46c:	d005      	beq.n	d47a <Sha256Update+0x22>
    d46e:	68bb      	ldr	r3, [r7, #8]
    d470:	2b00      	cmp	r3, #0
    d472:	d105      	bne.n	d480 <Sha256Update+0x28>
    d474:	687b      	ldr	r3, [r7, #4]
    d476:	2b00      	cmp	r3, #0
    d478:	d002      	beq.n	d480 <Sha256Update+0x28>
            return BAD_FUNC_ARG;
    d47a:	23ad      	movs	r3, #173	; 0xad
    d47c:	425b      	negs	r3, r3
    d47e:	e08a      	b.n	d596 <Sha256Update+0x13e>
        }

        if (data == NULL && len == 0) {
    d480:	68bb      	ldr	r3, [r7, #8]
    d482:	2b00      	cmp	r3, #0
    d484:	d104      	bne.n	d490 <Sha256Update+0x38>
    d486:	687b      	ldr	r3, [r7, #4]
    d488:	2b00      	cmp	r3, #0
    d48a:	d101      	bne.n	d490 <Sha256Update+0x38>
            /* valid, but do nothing */
            return 0;
    d48c:	2300      	movs	r3, #0
    d48e:	e082      	b.n	d596 <Sha256Update+0x13e>
        }

        AddLength(sha256, len);
    d490:	687a      	ldr	r2, [r7, #4]
    d492:	68fb      	ldr	r3, [r7, #12]
    d494:	0011      	movs	r1, r2
    d496:	0018      	movs	r0, r3
    d498:	f7ff ffc2 	bl	d420 <AddLength>

        /* do block size increments */
        local = (byte*)sha256->buffer;
    d49c:	68fb      	ldr	r3, [r7, #12]
    d49e:	3320      	adds	r3, #32
    d4a0:	61bb      	str	r3, [r7, #24]

        /* check that internal buffLen is valid */
        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE)
    d4a2:	68fb      	ldr	r3, [r7, #12]
    d4a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d4a6:	2b3f      	cmp	r3, #63	; 0x3f
    d4a8:	d902      	bls.n	d4b0 <Sha256Update+0x58>
            return BUFFER_E;
    d4aa:	2384      	movs	r3, #132	; 0x84
    d4ac:	425b      	negs	r3, r3
    d4ae:	e072      	b.n	d596 <Sha256Update+0x13e>

        if (sha256->buffLen > 0) {
    d4b0:	68fb      	ldr	r3, [r7, #12]
    d4b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d4b4:	2b00      	cmp	r3, #0
    d4b6:	d05c      	beq.n	d572 <Sha256Update+0x11a>
            word32 add = min(len, WC_SHA256_BLOCK_SIZE - sha256->buffLen);
    d4b8:	68fb      	ldr	r3, [r7, #12]
    d4ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d4bc:	2240      	movs	r2, #64	; 0x40
    d4be:	1ad2      	subs	r2, r2, r3
    d4c0:	687b      	ldr	r3, [r7, #4]
    d4c2:	0011      	movs	r1, r2
    d4c4:	0018      	movs	r0, r3
    d4c6:	f7ff fa83 	bl	c9d0 <min>
    d4ca:	0003      	movs	r3, r0
    d4cc:	617b      	str	r3, [r7, #20]
            XMEMCPY(&local[sha256->buffLen], data, add);
    d4ce:	68fb      	ldr	r3, [r7, #12]
    d4d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d4d2:	69ba      	ldr	r2, [r7, #24]
    d4d4:	18d3      	adds	r3, r2, r3
    d4d6:	697a      	ldr	r2, [r7, #20]
    d4d8:	68b9      	ldr	r1, [r7, #8]
    d4da:	0018      	movs	r0, r3
    d4dc:	f018 f907 	bl	256ee <memcpy>

            sha256->buffLen += add;
    d4e0:	68fb      	ldr	r3, [r7, #12]
    d4e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d4e4:	697b      	ldr	r3, [r7, #20]
    d4e6:	18d2      	adds	r2, r2, r3
    d4e8:	68fb      	ldr	r3, [r7, #12]
    d4ea:	661a      	str	r2, [r3, #96]	; 0x60
            data            += add;
    d4ec:	68ba      	ldr	r2, [r7, #8]
    d4ee:	697b      	ldr	r3, [r7, #20]
    d4f0:	18d3      	adds	r3, r2, r3
    d4f2:	60bb      	str	r3, [r7, #8]
            len             -= add;
    d4f4:	687a      	ldr	r2, [r7, #4]
    d4f6:	697b      	ldr	r3, [r7, #20]
    d4f8:	1ad3      	subs	r3, r2, r3
    d4fa:	607b      	str	r3, [r7, #4]

            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
    d4fc:	68fb      	ldr	r3, [r7, #12]
    d4fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d500:	2b40      	cmp	r3, #64	; 0x40
    d502:	d136      	bne.n	d572 <Sha256Update+0x11a>
        #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
            #if defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2)
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
            #endif
                {
                    ByteReverseWords(sha256->buffer, sha256->buffer,
    d504:	68fb      	ldr	r3, [r7, #12]
    d506:	3320      	adds	r3, #32
    d508:	0018      	movs	r0, r3
    d50a:	68fb      	ldr	r3, [r7, #12]
    d50c:	3320      	adds	r3, #32
    d50e:	2240      	movs	r2, #64	; 0x40
    d510:	0019      	movs	r1, r3
    d512:	f7ff fa37 	bl	c984 <ByteReverseWords>
                }
        #endif

        #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
            defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
                ret = XTRANSFORM(sha256);
    d516:	68fb      	ldr	r3, [r7, #12]
    d518:	0018      	movs	r0, r3
    d51a:	f7ff fad1 	bl	cac0 <Transform_Sha256>
    d51e:	0003      	movs	r3, r0
    d520:	61fb      	str	r3, [r7, #28]
                    ret = XTRANSFORM(sha256);
                } else {
                    esp_sha256_process(sha256);
                }
        #endif
                if (ret == 0)
    d522:	69fb      	ldr	r3, [r7, #28]
    d524:	2b00      	cmp	r3, #0
    d526:	d103      	bne.n	d530 <Sha256Update+0xd8>
                    sha256->buffLen = 0;
    d528:	68fb      	ldr	r3, [r7, #12]
    d52a:	2200      	movs	r2, #0
    d52c:	661a      	str	r2, [r3, #96]	; 0x60
    d52e:	e020      	b.n	d572 <Sha256Update+0x11a>
                else
                    len = 0;
    d530:	2300      	movs	r3, #0
    d532:	607b      	str	r3, [r7, #4]
                    break;
            }
        }
    #else
        {
            while (len >= WC_SHA256_BLOCK_SIZE) {
    d534:	e01d      	b.n	d572 <Sha256Update+0x11a>
                XMEMCPY(local, data, WC_SHA256_BLOCK_SIZE);
    d536:	68b9      	ldr	r1, [r7, #8]
    d538:	69bb      	ldr	r3, [r7, #24]
    d53a:	2240      	movs	r2, #64	; 0x40
    d53c:	0018      	movs	r0, r3
    d53e:	f018 f8d6 	bl	256ee <memcpy>

                data += WC_SHA256_BLOCK_SIZE;
    d542:	68bb      	ldr	r3, [r7, #8]
    d544:	3340      	adds	r3, #64	; 0x40
    d546:	60bb      	str	r3, [r7, #8]
                len  -= WC_SHA256_BLOCK_SIZE;
    d548:	687b      	ldr	r3, [r7, #4]
    d54a:	3b40      	subs	r3, #64	; 0x40
    d54c:	607b      	str	r3, [r7, #4]

                ByteReverseWords(sha256->buffer, sha256->buffer,
    d54e:	68fb      	ldr	r3, [r7, #12]
    d550:	3320      	adds	r3, #32
    d552:	0018      	movs	r0, r3
    d554:	68fb      	ldr	r3, [r7, #12]
    d556:	3320      	adds	r3, #32
    d558:	2240      	movs	r2, #64	; 0x40
    d55a:	0019      	movs	r1, r3
    d55c:	f7ff fa12 	bl	c984 <ByteReverseWords>
                                                          WC_SHA256_BLOCK_SIZE);
     #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
          defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
                ret = XTRANSFORM(sha256);
    d560:	68fb      	ldr	r3, [r7, #12]
    d562:	0018      	movs	r0, r3
    d564:	f7ff faac 	bl	cac0 <Transform_Sha256>
    d568:	0003      	movs	r3, r0
    d56a:	61fb      	str	r3, [r7, #28]
                    ret = XTRANSFORM(sha256);
                } else {
                    esp_sha256_process(sha256);
                }
    #endif
                if (ret != 0)
    d56c:	69fb      	ldr	r3, [r7, #28]
    d56e:	2b00      	cmp	r3, #0
    d570:	d103      	bne.n	d57a <Sha256Update+0x122>
                    break;
            }
        }
    #else
        {
            while (len >= WC_SHA256_BLOCK_SIZE) {
    d572:	687b      	ldr	r3, [r7, #4]
    d574:	2b3f      	cmp	r3, #63	; 0x3f
    d576:	d8de      	bhi.n	d536 <Sha256Update+0xde>
    d578:	e000      	b.n	d57c <Sha256Update+0x124>
                } else {
                    esp_sha256_process(sha256);
                }
    #endif
                if (ret != 0)
                    break;
    d57a:	46c0      	nop			; (mov r8, r8)
            }
        }
    #endif

        if (len > 0) {
    d57c:	687b      	ldr	r3, [r7, #4]
    d57e:	2b00      	cmp	r3, #0
    d580:	d008      	beq.n	d594 <Sha256Update+0x13c>
            XMEMCPY(local, data, len);
    d582:	687a      	ldr	r2, [r7, #4]
    d584:	68b9      	ldr	r1, [r7, #8]
    d586:	69bb      	ldr	r3, [r7, #24]
    d588:	0018      	movs	r0, r3
    d58a:	f018 f8b0 	bl	256ee <memcpy>
            sha256->buffLen = len;
    d58e:	68fb      	ldr	r3, [r7, #12]
    d590:	687a      	ldr	r2, [r7, #4]
    d592:	661a      	str	r2, [r3, #96]	; 0x60
        }

        return ret;
    d594:	69fb      	ldr	r3, [r7, #28]
    }
    d596:	0018      	movs	r0, r3
    d598:	46bd      	mov	sp, r7
    d59a:	b008      	add	sp, #32
    d59c:	bd80      	pop	{r7, pc}
    d59e:	46c0      	nop			; (mov r8, r8)

0000d5a0 <wc_Sha256Update>:

    int wc_Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
    d5a0:	b580      	push	{r7, lr}
    d5a2:	b084      	sub	sp, #16
    d5a4:	af00      	add	r7, sp, #0
    d5a6:	60f8      	str	r0, [r7, #12]
    d5a8:	60b9      	str	r1, [r7, #8]
    d5aa:	607a      	str	r2, [r7, #4]
        if (sha256 == NULL || (data == NULL && len > 0)) {
    d5ac:	68fb      	ldr	r3, [r7, #12]
    d5ae:	2b00      	cmp	r3, #0
    d5b0:	d005      	beq.n	d5be <wc_Sha256Update+0x1e>
    d5b2:	68bb      	ldr	r3, [r7, #8]
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	d105      	bne.n	d5c4 <wc_Sha256Update+0x24>
    d5b8:	687b      	ldr	r3, [r7, #4]
    d5ba:	2b00      	cmp	r3, #0
    d5bc:	d002      	beq.n	d5c4 <wc_Sha256Update+0x24>
            return BAD_FUNC_ARG;
    d5be:	23ad      	movs	r3, #173	; 0xad
    d5c0:	425b      	negs	r3, r3
    d5c2:	e00e      	b.n	d5e2 <wc_Sha256Update+0x42>
        }

        if (data == NULL && len == 0) {
    d5c4:	68bb      	ldr	r3, [r7, #8]
    d5c6:	2b00      	cmp	r3, #0
    d5c8:	d104      	bne.n	d5d4 <wc_Sha256Update+0x34>
    d5ca:	687b      	ldr	r3, [r7, #4]
    d5cc:	2b00      	cmp	r3, #0
    d5ce:	d101      	bne.n	d5d4 <wc_Sha256Update+0x34>
            /* valid, but do nothing */
            return 0;
    d5d0:	2300      	movs	r3, #0
    d5d2:	e006      	b.n	d5e2 <wc_Sha256Update+0x42>
            return IntelQaSymSha256(&sha256->asyncDev, NULL, data, len);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return Sha256Update(sha256, data, len);
    d5d4:	687a      	ldr	r2, [r7, #4]
    d5d6:	68b9      	ldr	r1, [r7, #8]
    d5d8:	68fb      	ldr	r3, [r7, #12]
    d5da:	0018      	movs	r0, r3
    d5dc:	f7ff ff3c 	bl	d458 <Sha256Update>
    d5e0:	0003      	movs	r3, r0
    }
    d5e2:	0018      	movs	r0, r3
    d5e4:	46bd      	mov	sp, r7
    d5e6:	b004      	add	sp, #16
    d5e8:	bd80      	pop	{r7, pc}
    d5ea:	46c0      	nop			; (mov r8, r8)

0000d5ec <Sha256Final>:

    static WC_INLINE int Sha256Final(wc_Sha256* sha256)
    {
    d5ec:	b580      	push	{r7, lr}
    d5ee:	b084      	sub	sp, #16
    d5f0:	af00      	add	r7, sp, #0
    d5f2:	6078      	str	r0, [r7, #4]

        int ret;
        byte* local = (byte*)sha256->buffer;
    d5f4:	687b      	ldr	r3, [r7, #4]
    d5f6:	3320      	adds	r3, #32
    d5f8:	60fb      	str	r3, [r7, #12]

        if (sha256 == NULL) {
    d5fa:	687b      	ldr	r3, [r7, #4]
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	d102      	bne.n	d606 <Sha256Final+0x1a>
            return BAD_FUNC_ARG;
    d600:	23ad      	movs	r3, #173	; 0xad
    d602:	425b      	negs	r3, r3
    d604:	e06c      	b.n	d6e0 <Sha256Final+0xf4>
        }

        local[sha256->buffLen++] = 0x80;     /* add 1 */
    d606:	687b      	ldr	r3, [r7, #4]
    d608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d60a:	1c59      	adds	r1, r3, #1
    d60c:	687a      	ldr	r2, [r7, #4]
    d60e:	6611      	str	r1, [r2, #96]	; 0x60
    d610:	68fa      	ldr	r2, [r7, #12]
    d612:	18d3      	adds	r3, r2, r3
    d614:	2280      	movs	r2, #128	; 0x80
    d616:	701a      	strb	r2, [r3, #0]

        /* pad with zeros */
        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
    d618:	687b      	ldr	r3, [r7, #4]
    d61a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d61c:	2b38      	cmp	r3, #56	; 0x38
    d61e:	d925      	bls.n	d66c <Sha256Final+0x80>
            XMEMSET(&local[sha256->buffLen], 0,
    d620:	687b      	ldr	r3, [r7, #4]
    d622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d624:	68fa      	ldr	r2, [r7, #12]
    d626:	18d0      	adds	r0, r2, r3
    d628:	687b      	ldr	r3, [r7, #4]
    d62a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d62c:	2240      	movs	r2, #64	; 0x40
    d62e:	1ad3      	subs	r3, r2, r3
    d630:	001a      	movs	r2, r3
    d632:	2100      	movs	r1, #0
    d634:	f018 f879 	bl	2572a <memset>
                WC_SHA256_BLOCK_SIZE - sha256->buffLen);
            sha256->buffLen += WC_SHA256_BLOCK_SIZE - sha256->buffLen;
    d638:	687b      	ldr	r3, [r7, #4]
    d63a:	2240      	movs	r2, #64	; 0x40
    d63c:	661a      	str	r2, [r3, #96]	; 0x60
        #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
            #if defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2)
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
            #endif
                {
                    ByteReverseWords(sha256->buffer, sha256->buffer,
    d63e:	687b      	ldr	r3, [r7, #4]
    d640:	3320      	adds	r3, #32
    d642:	0018      	movs	r0, r3
    d644:	687b      	ldr	r3, [r7, #4]
    d646:	3320      	adds	r3, #32
    d648:	2240      	movs	r2, #64	; 0x40
    d64a:	0019      	movs	r1, r3
    d64c:	f7ff f99a 	bl	c984 <ByteReverseWords>
                }
        #endif
            }
        #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
             defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
                ret = XTRANSFORM(sha256);
    d650:	687b      	ldr	r3, [r7, #4]
    d652:	0018      	movs	r0, r3
    d654:	f7ff fa34 	bl	cac0 <Transform_Sha256>
    d658:	0003      	movs	r3, r0
    d65a:	60bb      	str	r3, [r7, #8]
                    ret = XTRANSFORM(sha256);
                } else {
                    ret = esp_sha256_process(sha256);
                }
        #endif
            if (ret != 0)
    d65c:	68bb      	ldr	r3, [r7, #8]
    d65e:	2b00      	cmp	r3, #0
    d660:	d001      	beq.n	d666 <Sha256Final+0x7a>
                return ret;
    d662:	68bb      	ldr	r3, [r7, #8]
    d664:	e03c      	b.n	d6e0 <Sha256Final+0xf4>

            sha256->buffLen = 0;
    d666:	687b      	ldr	r3, [r7, #4]
    d668:	2200      	movs	r2, #0
    d66a:	661a      	str	r2, [r3, #96]	; 0x60
        }
        XMEMSET(&local[sha256->buffLen], 0, WC_SHA256_PAD_SIZE - sha256->buffLen);
    d66c:	687b      	ldr	r3, [r7, #4]
    d66e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d670:	68fa      	ldr	r2, [r7, #12]
    d672:	18d0      	adds	r0, r2, r3
    d674:	687b      	ldr	r3, [r7, #4]
    d676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d678:	2238      	movs	r2, #56	; 0x38
    d67a:	1ad3      	subs	r3, r2, r3
    d67c:	001a      	movs	r2, r3
    d67e:	2100      	movs	r1, #0
    d680:	f018 f853 	bl	2572a <memset>

        /* put lengths in bits */
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
    d684:	687b      	ldr	r3, [r7, #4]
    d686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d688:	0f5a      	lsrs	r2, r3, #29
                                                         (sha256->hiLen << 3);
    d68a:	687b      	ldr	r3, [r7, #4]
    d68c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    d68e:	00db      	lsls	r3, r3, #3
            sha256->buffLen = 0;
        }
        XMEMSET(&local[sha256->buffLen], 0, WC_SHA256_PAD_SIZE - sha256->buffLen);

        /* put lengths in bits */
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
    d690:	18d2      	adds	r2, r2, r3
    d692:	687b      	ldr	r3, [r7, #4]
    d694:	669a      	str	r2, [r3, #104]	; 0x68
                                                         (sha256->hiLen << 3);
        sha256->loLen = sha256->loLen << 3;
    d696:	687b      	ldr	r3, [r7, #4]
    d698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d69a:	00da      	lsls	r2, r3, #3
    d69c:	687b      	ldr	r3, [r7, #4]
    d69e:	665a      	str	r2, [r3, #100]	; 0x64
    #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        #if defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2)
            if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
        #endif
            {
                ByteReverseWords(sha256->buffer, sha256->buffer,
    d6a0:	687b      	ldr	r3, [r7, #4]
    d6a2:	3320      	adds	r3, #32
    d6a4:	0018      	movs	r0, r3
    d6a6:	687b      	ldr	r3, [r7, #4]
    d6a8:	3320      	adds	r3, #32
    d6aa:	2240      	movs	r2, #64	; 0x40
    d6ac:	0019      	movs	r1, r3
    d6ae:	f7ff f969 	bl	c984 <ByteReverseWords>
                    WC_SHA256_BLOCK_SIZE);
            }
    #endif
        /* ! length ordering dependent on digest endian type ! */
        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
    d6b2:	68fb      	ldr	r3, [r7, #12]
    d6b4:	3338      	adds	r3, #56	; 0x38
    d6b6:	0018      	movs	r0, r3
    d6b8:	687b      	ldr	r3, [r7, #4]
    d6ba:	3368      	adds	r3, #104	; 0x68
    d6bc:	2204      	movs	r2, #4
    d6be:	0019      	movs	r1, r3
    d6c0:	f018 f815 	bl	256ee <memcpy>
        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
    d6c4:	68fb      	ldr	r3, [r7, #12]
    d6c6:	333c      	adds	r3, #60	; 0x3c
    d6c8:	0018      	movs	r0, r3
    d6ca:	687b      	ldr	r3, [r7, #4]
    d6cc:	3364      	adds	r3, #100	; 0x64
    d6ce:	2204      	movs	r2, #4
    d6d0:	0019      	movs	r1, r3
    d6d2:	f018 f80c 	bl	256ee <memcpy>
            }
    #endif

    #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
         defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
            return XTRANSFORM(sha256);
    d6d6:	687b      	ldr	r3, [r7, #4]
    d6d8:	0018      	movs	r0, r3
    d6da:	f7ff f9f1 	bl	cac0 <Transform_Sha256>
    d6de:	0003      	movs	r3, r0
            } else {
                ret = esp_sha256_digest_process(sha256, 1);
            }
            return ret;
    #endif
    }
    d6e0:	0018      	movs	r0, r3
    d6e2:	46bd      	mov	sp, r7
    d6e4:	b004      	add	sp, #16
    d6e6:	bd80      	pop	{r7, pc}

0000d6e8 <wc_Sha256Final>:

        return 0;
    }

    int wc_Sha256Final(wc_Sha256* sha256, byte* hash)
    {
    d6e8:	b580      	push	{r7, lr}
    d6ea:	b084      	sub	sp, #16
    d6ec:	af00      	add	r7, sp, #0
    d6ee:	6078      	str	r0, [r7, #4]
    d6f0:	6039      	str	r1, [r7, #0]
        int ret;

        if (sha256 == NULL || hash == NULL) {
    d6f2:	687b      	ldr	r3, [r7, #4]
    d6f4:	2b00      	cmp	r3, #0
    d6f6:	d002      	beq.n	d6fe <wc_Sha256Final+0x16>
    d6f8:	683b      	ldr	r3, [r7, #0]
    d6fa:	2b00      	cmp	r3, #0
    d6fc:	d102      	bne.n	d704 <wc_Sha256Final+0x1c>
            return BAD_FUNC_ARG;
    d6fe:	23ad      	movs	r3, #173	; 0xad
    d700:	425b      	negs	r3, r3
    d702:	e01b      	b.n	d73c <wc_Sha256Final+0x54>
                                            WC_SHA256_DIGEST_SIZE);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
    d704:	687b      	ldr	r3, [r7, #4]
    d706:	0018      	movs	r0, r3
    d708:	f7ff ff70 	bl	d5ec <Sha256Final>
    d70c:	0003      	movs	r3, r0
    d70e:	60fb      	str	r3, [r7, #12]
        if (ret != 0)
    d710:	68fb      	ldr	r3, [r7, #12]
    d712:	2b00      	cmp	r3, #0
    d714:	d001      	beq.n	d71a <wc_Sha256Final+0x32>
            return ret;
    d716:	68fb      	ldr	r3, [r7, #12]
    d718:	e010      	b.n	d73c <wc_Sha256Final+0x54>

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha256->digest, sha256->digest, WC_SHA256_DIGEST_SIZE);
    d71a:	687b      	ldr	r3, [r7, #4]
    d71c:	6879      	ldr	r1, [r7, #4]
    d71e:	2220      	movs	r2, #32
    d720:	0018      	movs	r0, r3
    d722:	f7ff f92f 	bl	c984 <ByteReverseWords>
    #endif
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
    d726:	6879      	ldr	r1, [r7, #4]
    d728:	683b      	ldr	r3, [r7, #0]
    d72a:	2220      	movs	r2, #32
    d72c:	0018      	movs	r0, r3
    d72e:	f017 ffde 	bl	256ee <memcpy>

        return InitSha256(sha256);  /* reset state */
    d732:	687b      	ldr	r3, [r7, #4]
    d734:	0018      	movs	r0, r3
    d736:	f7ff f959 	bl	c9ec <InitSha256>
    d73a:	0003      	movs	r3, r0
    }
    d73c:	0018      	movs	r0, r3
    d73e:	46bd      	mov	sp, r7
    d740:	b004      	add	sp, #16
    d742:	bd80      	pop	{r7, pc}

0000d744 <wc_InitSha256>:
    }
#endif /* WOLFSSL_SHA224 */


int wc_InitSha256(wc_Sha256* sha256)
{
    d744:	b580      	push	{r7, lr}
    d746:	b082      	sub	sp, #8
    d748:	af00      	add	r7, sp, #0
    d74a:	6078      	str	r0, [r7, #4]
    return wc_InitSha256_ex(sha256, NULL, INVALID_DEVID);
    d74c:	2302      	movs	r3, #2
    d74e:	425a      	negs	r2, r3
    d750:	687b      	ldr	r3, [r7, #4]
    d752:	2100      	movs	r1, #0
    d754:	0018      	movs	r0, r3
    d756:	f7ff f991 	bl	ca7c <wc_InitSha256_ex>
    d75a:	0003      	movs	r3, r0
}
    d75c:	0018      	movs	r0, r3
    d75e:	46bd      	mov	sp, r7
    d760:	b002      	add	sp, #8
    d762:	bd80      	pop	{r7, pc}

0000d764 <wc_Sha256Free>:

void wc_Sha256Free(wc_Sha256* sha256)
{
    d764:	b580      	push	{r7, lr}
    d766:	b082      	sub	sp, #8
    d768:	af00      	add	r7, sp, #0
    d76a:	6078      	str	r0, [r7, #4]
    if (sha256->msg != NULL) {
        XFREE(sha256->msg, sha256->heap, DYNAMIC_TYPE_TMP_BUFFER);
        sha256->msg = NULL;
    }
#endif
}
    d76c:	46bd      	mov	sp, r7
    d76e:	b002      	add	sp, #8
    d770:	bd80      	pop	{r7, pc}
    d772:	46c0      	nop			; (mov r8, r8)

0000d774 <wc_Sha256GetHash>:
    /* implemented in wolfcrypt/src/port/devcrypto/devcrypt_hash.c */

#else

int wc_Sha256GetHash(wc_Sha256* sha256, byte* hash)
{
    d774:	b580      	push	{r7, lr}
    d776:	b0a0      	sub	sp, #128	; 0x80
    d778:	af00      	add	r7, sp, #0
    d77a:	6078      	str	r0, [r7, #4]
    d77c:	6039      	str	r1, [r7, #0]
    int ret;
    wc_Sha256 tmpSha256;

    if (sha256 == NULL || hash == NULL)
    d77e:	687b      	ldr	r3, [r7, #4]
    d780:	2b00      	cmp	r3, #0
    d782:	d002      	beq.n	d78a <wc_Sha256GetHash+0x16>
    d784:	683b      	ldr	r3, [r7, #0]
    d786:	2b00      	cmp	r3, #0
    d788:	d102      	bne.n	d790 <wc_Sha256GetHash+0x1c>
        return BAD_FUNC_ARG;
    d78a:	23ad      	movs	r3, #173	; 0xad
    d78c:	425b      	negs	r3, r3
    d78e:	e01a      	b.n	d7c6 <wc_Sha256GetHash+0x52>
    if(sha256->ctx.mode == ESP32_SHA_HW)
    {
        esp_sha256_digest_process(sha256, 0);
    }
#endif
    ret = wc_Sha256Copy(sha256, &tmpSha256);
    d790:	230c      	movs	r3, #12
    d792:	18fa      	adds	r2, r7, r3
    d794:	687b      	ldr	r3, [r7, #4]
    d796:	0011      	movs	r1, r2
    d798:	0018      	movs	r0, r3
    d79a:	f000 f819 	bl	d7d0 <wc_Sha256Copy>
    d79e:	0003      	movs	r3, r0
    d7a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (ret == 0) {
    d7a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    d7a4:	2b00      	cmp	r3, #0
    d7a6:	d10d      	bne.n	d7c4 <wc_Sha256GetHash+0x50>
        ret = wc_Sha256Final(&tmpSha256, hash);
    d7a8:	683a      	ldr	r2, [r7, #0]
    d7aa:	230c      	movs	r3, #12
    d7ac:	18fb      	adds	r3, r7, r3
    d7ae:	0011      	movs	r1, r2
    d7b0:	0018      	movs	r0, r3
    d7b2:	f7ff ff99 	bl	d6e8 <wc_Sha256Final>
    d7b6:	0003      	movs	r3, r0
    d7b8:	67fb      	str	r3, [r7, #124]	; 0x7c
#if  defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
    !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
        sha256->ctx.mode = ESP32_SHA_SW;
#endif
        wc_Sha256Free(&tmpSha256);
    d7ba:	230c      	movs	r3, #12
    d7bc:	18fb      	adds	r3, r7, r3
    d7be:	0018      	movs	r0, r3
    d7c0:	f7ff ffd0 	bl	d764 <wc_Sha256Free>
    }
    return ret;
    d7c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
    d7c6:	0018      	movs	r0, r3
    d7c8:	46bd      	mov	sp, r7
    d7ca:	b020      	add	sp, #128	; 0x80
    d7cc:	bd80      	pop	{r7, pc}
    d7ce:	46c0      	nop			; (mov r8, r8)

0000d7d0 <wc_Sha256Copy>:
int wc_Sha256Copy(wc_Sha256* src, wc_Sha256* dst)
{
    d7d0:	b580      	push	{r7, lr}
    d7d2:	b084      	sub	sp, #16
    d7d4:	af00      	add	r7, sp, #0
    d7d6:	6078      	str	r0, [r7, #4]
    d7d8:	6039      	str	r1, [r7, #0]
    int ret = 0;
    d7da:	2300      	movs	r3, #0
    d7dc:	60fb      	str	r3, [r7, #12]

    if (src == NULL || dst == NULL)
    d7de:	687b      	ldr	r3, [r7, #4]
    d7e0:	2b00      	cmp	r3, #0
    d7e2:	d002      	beq.n	d7ea <wc_Sha256Copy+0x1a>
    d7e4:	683b      	ldr	r3, [r7, #0]
    d7e6:	2b00      	cmp	r3, #0
    d7e8:	d102      	bne.n	d7f0 <wc_Sha256Copy+0x20>
        return BAD_FUNC_ARG;
    d7ea:	23ad      	movs	r3, #173	; 0xad
    d7ec:	425b      	negs	r3, r3
    d7ee:	e006      	b.n	d7fe <wc_Sha256Copy+0x2e>

    XMEMCPY(dst, src, sizeof(wc_Sha256));
    d7f0:	6879      	ldr	r1, [r7, #4]
    d7f2:	683b      	ldr	r3, [r7, #0]
    d7f4:	2270      	movs	r2, #112	; 0x70
    d7f6:	0018      	movs	r0, r3
    d7f8:	f017 ff79 	bl	256ee <memcpy>
#endif
#if defined(WOLFSSL_HASH_FLAGS) || defined(WOLF_CRYPTO_CB)
     dst->flags |= WC_HASH_FLAG_ISCOPY;
#endif

    return ret;
    d7fc:	68fb      	ldr	r3, [r7, #12]
}
    d7fe:	0018      	movs	r0, r3
    d800:	46bd      	mov	sp, r7
    d802:	b004      	add	sp, #16
    d804:	bd80      	pop	{r7, pc}
    d806:	46c0      	nop			; (mov r8, r8)

0000d808 <_wc_ecc_curve_free>:
    #define ALLOC_CURVE_SPECS(intcount)
    #define FREE_CURVE_SPECS()
#endif /* ECC_CACHE_CURVE */

static void _wc_ecc_curve_free(ecc_curve_spec* curve)
{
    d808:	b580      	push	{r7, lr}
    d80a:	b082      	sub	sp, #8
    d80c:	af00      	add	r7, sp, #0
    d80e:	6078      	str	r0, [r7, #4]
    if (curve == NULL) {
    d810:	687b      	ldr	r3, [r7, #4]
    d812:	2b00      	cmp	r3, #0
    d814:	d040      	beq.n	d898 <_wc_ecc_curve_free+0x90>
        return;
    }

    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
    d816:	687b      	ldr	r3, [r7, #4]
    d818:	2224      	movs	r2, #36	; 0x24
    d81a:	5c9b      	ldrb	r3, [r3, r2]
    d81c:	001a      	movs	r2, r3
    d81e:	2301      	movs	r3, #1
    d820:	4013      	ands	r3, r2
    d822:	d004      	beq.n	d82e <_wc_ecc_curve_free+0x26>
        mp_clear(curve->prime);
    d824:	687b      	ldr	r3, [r7, #4]
    d826:	685b      	ldr	r3, [r3, #4]
    d828:	0018      	movs	r0, r3
    d82a:	f002 fa53 	bl	fcd4 <mp_clear>
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
    d82e:	687b      	ldr	r3, [r7, #4]
    d830:	2224      	movs	r2, #36	; 0x24
    d832:	5c9b      	ldrb	r3, [r3, r2]
    d834:	001a      	movs	r2, r3
    d836:	2302      	movs	r3, #2
    d838:	4013      	ands	r3, r2
    d83a:	d004      	beq.n	d846 <_wc_ecc_curve_free+0x3e>
        mp_clear(curve->Af);
    d83c:	687b      	ldr	r3, [r7, #4]
    d83e:	689b      	ldr	r3, [r3, #8]
    d840:	0018      	movs	r0, r3
    d842:	f002 fa47 	bl	fcd4 <mp_clear>
#ifdef USE_ECC_B_PARAM
    if (curve->load_mask & ECC_CURVE_FIELD_BF)
        mp_clear(curve->Bf);
#endif
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
    d846:	687b      	ldr	r3, [r7, #4]
    d848:	2224      	movs	r2, #36	; 0x24
    d84a:	5c9b      	ldrb	r3, [r3, r2]
    d84c:	001a      	movs	r2, r3
    d84e:	2308      	movs	r3, #8
    d850:	4013      	ands	r3, r2
    d852:	d004      	beq.n	d85e <_wc_ecc_curve_free+0x56>
        mp_clear(curve->order);
    d854:	687b      	ldr	r3, [r7, #4]
    d856:	68db      	ldr	r3, [r3, #12]
    d858:	0018      	movs	r0, r3
    d85a:	f002 fa3b 	bl	fcd4 <mp_clear>
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
    d85e:	687b      	ldr	r3, [r7, #4]
    d860:	2224      	movs	r2, #36	; 0x24
    d862:	5c9b      	ldrb	r3, [r3, r2]
    d864:	001a      	movs	r2, r3
    d866:	2310      	movs	r3, #16
    d868:	4013      	ands	r3, r2
    d86a:	d004      	beq.n	d876 <_wc_ecc_curve_free+0x6e>
        mp_clear(curve->Gx);
    d86c:	687b      	ldr	r3, [r7, #4]
    d86e:	691b      	ldr	r3, [r3, #16]
    d870:	0018      	movs	r0, r3
    d872:	f002 fa2f 	bl	fcd4 <mp_clear>
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
    d876:	687b      	ldr	r3, [r7, #4]
    d878:	2224      	movs	r2, #36	; 0x24
    d87a:	5c9b      	ldrb	r3, [r3, r2]
    d87c:	001a      	movs	r2, r3
    d87e:	2320      	movs	r3, #32
    d880:	4013      	ands	r3, r2
    d882:	d004      	beq.n	d88e <_wc_ecc_curve_free+0x86>
        mp_clear(curve->Gy);
    d884:	687b      	ldr	r3, [r7, #4]
    d886:	695b      	ldr	r3, [r3, #20]
    d888:	0018      	movs	r0, r3
    d88a:	f002 fa23 	bl	fcd4 <mp_clear>

    curve->load_mask = 0;
    d88e:	687b      	ldr	r3, [r7, #4]
    d890:	2224      	movs	r2, #36	; 0x24
    d892:	2100      	movs	r1, #0
    d894:	5499      	strb	r1, [r3, r2]
    d896:	e000      	b.n	d89a <_wc_ecc_curve_free+0x92>
#endif /* ECC_CACHE_CURVE */

static void _wc_ecc_curve_free(ecc_curve_spec* curve)
{
    if (curve == NULL) {
        return;
    d898:	46c0      	nop			; (mov r8, r8)
        mp_clear(curve->Gx);
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
        mp_clear(curve->Gy);

    curve->load_mask = 0;
}
    d89a:	46bd      	mov	sp, r7
    d89c:	b002      	add	sp, #8
    d89e:	bd80      	pop	{r7, pc}

0000d8a0 <wc_ecc_curve_free>:

static void wc_ecc_curve_free(ecc_curve_spec* curve)
{
    d8a0:	b580      	push	{r7, lr}
    d8a2:	b082      	sub	sp, #8
    d8a4:	af00      	add	r7, sp, #0
    d8a6:	6078      	str	r0, [r7, #4]
    /* don't free cached curves */
#ifndef ECC_CACHE_CURVE
    _wc_ecc_curve_free(curve);
    d8a8:	687b      	ldr	r3, [r7, #4]
    d8aa:	0018      	movs	r0, r3
    d8ac:	f7ff ffac 	bl	d808 <_wc_ecc_curve_free>
#endif
    (void)curve;
}
    d8b0:	46c0      	nop			; (mov r8, r8)
    d8b2:	46bd      	mov	sp, r7
    d8b4:	b002      	add	sp, #8
    d8b6:	bd80      	pop	{r7, pc}

0000d8b8 <wc_ecc_curve_load_item>:

static int wc_ecc_curve_load_item(const char* src, mp_int** dst,
    ecc_curve_spec* curve, byte mask)
{
    d8b8:	b580      	push	{r7, lr}
    d8ba:	b086      	sub	sp, #24
    d8bc:	af00      	add	r7, sp, #0
    d8be:	60f8      	str	r0, [r7, #12]
    d8c0:	60b9      	str	r1, [r7, #8]
    d8c2:	607a      	str	r2, [r7, #4]
    d8c4:	001a      	movs	r2, r3
    d8c6:	1cfb      	adds	r3, r7, #3
    d8c8:	701a      	strb	r2, [r3, #0]
    int err;

#ifndef ECC_CACHE_CURVE
    /* get mp_int from temp */
    if (curve->spec_use >= curve->spec_count) {
    d8ca:	687b      	ldr	r3, [r7, #4]
    d8cc:	6a1a      	ldr	r2, [r3, #32]
    d8ce:	687b      	ldr	r3, [r7, #4]
    d8d0:	69db      	ldr	r3, [r3, #28]
    d8d2:	429a      	cmp	r2, r3
    d8d4:	d302      	bcc.n	d8dc <wc_ecc_curve_load_item+0x24>
        WOLFSSL_MSG("Invalid DECLARE_CURVE_SPECS count");
        return ECC_BAD_ARG_E;
    d8d6:	23aa      	movs	r3, #170	; 0xaa
    d8d8:	425b      	negs	r3, r3
    d8da:	e02a      	b.n	d932 <wc_ecc_curve_load_item+0x7a>
    }
    *dst = &curve->spec_ints[curve->spec_use++];
    d8dc:	687b      	ldr	r3, [r7, #4]
    d8de:	6999      	ldr	r1, [r3, #24]
    d8e0:	687b      	ldr	r3, [r7, #4]
    d8e2:	6a1b      	ldr	r3, [r3, #32]
    d8e4:	1c58      	adds	r0, r3, #1
    d8e6:	687a      	ldr	r2, [r7, #4]
    d8e8:	6210      	str	r0, [r2, #32]
    d8ea:	228b      	movs	r2, #139	; 0x8b
    d8ec:	0092      	lsls	r2, r2, #2
    d8ee:	4353      	muls	r3, r2
    d8f0:	18ca      	adds	r2, r1, r3
    d8f2:	68bb      	ldr	r3, [r7, #8]
    d8f4:	601a      	str	r2, [r3, #0]
#endif

    err = mp_init(*dst);
    d8f6:	68bb      	ldr	r3, [r7, #8]
    d8f8:	681b      	ldr	r3, [r3, #0]
    d8fa:	0018      	movs	r0, r3
    d8fc:	f002 f986 	bl	fc0c <mp_init>
    d900:	0003      	movs	r3, r0
    d902:	617b      	str	r3, [r7, #20]
    if (err == MP_OKAY) {
    d904:	697b      	ldr	r3, [r7, #20]
    d906:	2b00      	cmp	r3, #0
    d908:	d112      	bne.n	d930 <wc_ecc_curve_load_item+0x78>
        curve->load_mask |= mask;
    d90a:	687b      	ldr	r3, [r7, #4]
    d90c:	2224      	movs	r2, #36	; 0x24
    d90e:	5c9a      	ldrb	r2, [r3, r2]
    d910:	1cfb      	adds	r3, r7, #3
    d912:	781b      	ldrb	r3, [r3, #0]
    d914:	4313      	orrs	r3, r2
    d916:	b2d9      	uxtb	r1, r3
    d918:	687b      	ldr	r3, [r7, #4]
    d91a:	2224      	movs	r2, #36	; 0x24
    d91c:	5499      	strb	r1, [r3, r2]

        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
    d91e:	68bb      	ldr	r3, [r7, #8]
    d920:	681b      	ldr	r3, [r3, #0]
    d922:	68f9      	ldr	r1, [r7, #12]
    d924:	2210      	movs	r2, #16
    d926:	0018      	movs	r0, r3
    d928:	f002 fd9c 	bl	10464 <mp_read_radix>
    d92c:	0003      	movs	r3, r0
    d92e:	617b      	str	r3, [r7, #20]
    #ifdef HAVE_WOLF_BIGINT
        if (err == MP_OKAY)
            err = wc_mp_to_bigint(*dst, &(*dst)->raw);
    #endif
    }
    return err;
    d930:	697b      	ldr	r3, [r7, #20]
}
    d932:	0018      	movs	r0, r3
    d934:	46bd      	mov	sp, r7
    d936:	b006      	add	sp, #24
    d938:	bd80      	pop	{r7, pc}
    d93a:	46c0      	nop			; (mov r8, r8)

0000d93c <wc_ecc_curve_load>:

static int wc_ecc_curve_load(const ecc_set_type* dp, ecc_curve_spec** pCurve,
    byte load_mask)
{
    d93c:	b580      	push	{r7, lr}
    d93e:	b088      	sub	sp, #32
    d940:	af00      	add	r7, sp, #0
    d942:	60f8      	str	r0, [r7, #12]
    d944:	60b9      	str	r1, [r7, #8]
    d946:	1dfb      	adds	r3, r7, #7
    d948:	701a      	strb	r2, [r3, #0]
    int ret = 0, x;
    d94a:	2300      	movs	r3, #0
    d94c:	61fb      	str	r3, [r7, #28]
    ecc_curve_spec* curve;
    byte load_items = 0; /* mask of items to load */
    d94e:	2317      	movs	r3, #23
    d950:	18fb      	adds	r3, r7, r3
    d952:	2200      	movs	r2, #0
    d954:	701a      	strb	r2, [r3, #0]

    if (dp == NULL || pCurve == NULL)
    d956:	68fb      	ldr	r3, [r7, #12]
    d958:	2b00      	cmp	r3, #0
    d95a:	d002      	beq.n	d962 <wc_ecc_curve_load+0x26>
    d95c:	68bb      	ldr	r3, [r7, #8]
    d95e:	2b00      	cmp	r3, #0
    d960:	d102      	bne.n	d968 <wc_ecc_curve_load+0x2c>
        return BAD_FUNC_ARG;
    d962:	23ad      	movs	r3, #173	; 0xad
    d964:	425b      	negs	r3, r3
    d966:	e08f      	b.n	da88 <wc_ecc_curve_load+0x14c>

    /* set curve pointer to cache */
    *pCurve = ecc_curve_spec_cache[x];

#endif /* ECC_CACHE_CURVE */
    curve = *pCurve;
    d968:	68bb      	ldr	r3, [r7, #8]
    d96a:	681b      	ldr	r3, [r3, #0]
    d96c:	613b      	str	r3, [r7, #16]

    /* make sure the curve is initialized */
    if (curve->dp != dp) {
    d96e:	693b      	ldr	r3, [r7, #16]
    d970:	681a      	ldr	r2, [r3, #0]
    d972:	68fb      	ldr	r3, [r7, #12]
    d974:	429a      	cmp	r2, r3
    d976:	d003      	beq.n	d980 <wc_ecc_curve_load+0x44>
        curve->load_mask = 0;
    d978:	693b      	ldr	r3, [r7, #16]
    d97a:	2224      	movs	r2, #36	; 0x24
    d97c:	2100      	movs	r1, #0
    d97e:	5499      	strb	r1, [r3, r2]
        curve->order = &curve->order_lcl;
        curve->Gx = &curve->Gx_lcl;
        curve->Gy = &curve->Gy_lcl;
    #endif
    }
    curve->dp = dp; /* set dp info */
    d980:	693b      	ldr	r3, [r7, #16]
    d982:	68fa      	ldr	r2, [r7, #12]
    d984:	601a      	str	r2, [r3, #0]

    /* determine items to load */
    load_items = (((byte)~(word32)curve->load_mask) & load_mask);
    d986:	693b      	ldr	r3, [r7, #16]
    d988:	2224      	movs	r2, #36	; 0x24
    d98a:	5c9b      	ldrb	r3, [r3, r2]
    d98c:	43db      	mvns	r3, r3
    d98e:	b2da      	uxtb	r2, r3
    d990:	2317      	movs	r3, #23
    d992:	18fb      	adds	r3, r7, r3
    d994:	1df9      	adds	r1, r7, #7
    d996:	7809      	ldrb	r1, [r1, #0]
    d998:	400a      	ands	r2, r1
    d99a:	701a      	strb	r2, [r3, #0]
    curve->load_mask |= load_items;
    d99c:	693b      	ldr	r3, [r7, #16]
    d99e:	2224      	movs	r2, #36	; 0x24
    d9a0:	5c9a      	ldrb	r2, [r3, r2]
    d9a2:	2317      	movs	r3, #23
    d9a4:	18fb      	adds	r3, r7, r3
    d9a6:	781b      	ldrb	r3, [r3, #0]
    d9a8:	4313      	orrs	r3, r2
    d9aa:	b2d9      	uxtb	r1, r3
    d9ac:	693b      	ldr	r3, [r7, #16]
    d9ae:	2224      	movs	r2, #36	; 0x24
    d9b0:	5499      	strb	r1, [r3, r2]

    /* load items */
    x = 0;
    d9b2:	2300      	movs	r3, #0
    d9b4:	61bb      	str	r3, [r7, #24]
    if (load_items & ECC_CURVE_FIELD_PRIME)
    d9b6:	2317      	movs	r3, #23
    d9b8:	18fb      	adds	r3, r7, r3
    d9ba:	781b      	ldrb	r3, [r3, #0]
    d9bc:	2201      	movs	r2, #1
    d9be:	4013      	ands	r3, r2
    d9c0:	d00b      	beq.n	d9da <wc_ecc_curve_load+0x9e>
        x += wc_ecc_curve_load_item(dp->prime, &curve->prime, curve,
    d9c2:	68fb      	ldr	r3, [r7, #12]
    d9c4:	68d8      	ldr	r0, [r3, #12]
    d9c6:	693b      	ldr	r3, [r7, #16]
    d9c8:	1d19      	adds	r1, r3, #4
    d9ca:	693a      	ldr	r2, [r7, #16]
    d9cc:	2301      	movs	r3, #1
    d9ce:	f7ff ff73 	bl	d8b8 <wc_ecc_curve_load_item>
    d9d2:	0002      	movs	r2, r0
    d9d4:	69bb      	ldr	r3, [r7, #24]
    d9d6:	189b      	adds	r3, r3, r2
    d9d8:	61bb      	str	r3, [r7, #24]
            ECC_CURVE_FIELD_PRIME);
    if (load_items & ECC_CURVE_FIELD_AF)
    d9da:	2317      	movs	r3, #23
    d9dc:	18fb      	adds	r3, r7, r3
    d9de:	781b      	ldrb	r3, [r3, #0]
    d9e0:	2202      	movs	r2, #2
    d9e2:	4013      	ands	r3, r2
    d9e4:	d00c      	beq.n	da00 <wc_ecc_curve_load+0xc4>
        x += wc_ecc_curve_load_item(dp->Af, &curve->Af, curve,
    d9e6:	68fb      	ldr	r3, [r7, #12]
    d9e8:	6918      	ldr	r0, [r3, #16]
    d9ea:	693b      	ldr	r3, [r7, #16]
    d9ec:	3308      	adds	r3, #8
    d9ee:	0019      	movs	r1, r3
    d9f0:	693a      	ldr	r2, [r7, #16]
    d9f2:	2302      	movs	r3, #2
    d9f4:	f7ff ff60 	bl	d8b8 <wc_ecc_curve_load_item>
    d9f8:	0002      	movs	r2, r0
    d9fa:	69bb      	ldr	r3, [r7, #24]
    d9fc:	189b      	adds	r3, r3, r2
    d9fe:	61bb      	str	r3, [r7, #24]
#ifdef USE_ECC_B_PARAM
    if (load_items & ECC_CURVE_FIELD_BF)
        x += wc_ecc_curve_load_item(dp->Bf, &curve->Bf, curve,
            ECC_CURVE_FIELD_BF);
#endif
    if (load_items & ECC_CURVE_FIELD_ORDER)
    da00:	2317      	movs	r3, #23
    da02:	18fb      	adds	r3, r7, r3
    da04:	781b      	ldrb	r3, [r3, #0]
    da06:	2208      	movs	r2, #8
    da08:	4013      	ands	r3, r2
    da0a:	d00c      	beq.n	da26 <wc_ecc_curve_load+0xea>
        x += wc_ecc_curve_load_item(dp->order, &curve->order, curve,
    da0c:	68fb      	ldr	r3, [r7, #12]
    da0e:	6998      	ldr	r0, [r3, #24]
    da10:	693b      	ldr	r3, [r7, #16]
    da12:	330c      	adds	r3, #12
    da14:	0019      	movs	r1, r3
    da16:	693a      	ldr	r2, [r7, #16]
    da18:	2308      	movs	r3, #8
    da1a:	f7ff ff4d 	bl	d8b8 <wc_ecc_curve_load_item>
    da1e:	0002      	movs	r2, r0
    da20:	69bb      	ldr	r3, [r7, #24]
    da22:	189b      	adds	r3, r3, r2
    da24:	61bb      	str	r3, [r7, #24]
            ECC_CURVE_FIELD_ORDER);
    if (load_items & ECC_CURVE_FIELD_GX)
    da26:	2317      	movs	r3, #23
    da28:	18fb      	adds	r3, r7, r3
    da2a:	781b      	ldrb	r3, [r3, #0]
    da2c:	2210      	movs	r2, #16
    da2e:	4013      	ands	r3, r2
    da30:	d00c      	beq.n	da4c <wc_ecc_curve_load+0x110>
        x += wc_ecc_curve_load_item(dp->Gx, &curve->Gx, curve,
    da32:	68fb      	ldr	r3, [r7, #12]
    da34:	69d8      	ldr	r0, [r3, #28]
    da36:	693b      	ldr	r3, [r7, #16]
    da38:	3310      	adds	r3, #16
    da3a:	0019      	movs	r1, r3
    da3c:	693a      	ldr	r2, [r7, #16]
    da3e:	2310      	movs	r3, #16
    da40:	f7ff ff3a 	bl	d8b8 <wc_ecc_curve_load_item>
    da44:	0002      	movs	r2, r0
    da46:	69bb      	ldr	r3, [r7, #24]
    da48:	189b      	adds	r3, r3, r2
    da4a:	61bb      	str	r3, [r7, #24]
            ECC_CURVE_FIELD_GX);
    if (load_items & ECC_CURVE_FIELD_GY)
    da4c:	2317      	movs	r3, #23
    da4e:	18fb      	adds	r3, r7, r3
    da50:	781b      	ldrb	r3, [r3, #0]
    da52:	2220      	movs	r2, #32
    da54:	4013      	ands	r3, r2
    da56:	d00c      	beq.n	da72 <wc_ecc_curve_load+0x136>
        x += wc_ecc_curve_load_item(dp->Gy, &curve->Gy, curve,
    da58:	68fb      	ldr	r3, [r7, #12]
    da5a:	6a18      	ldr	r0, [r3, #32]
    da5c:	693b      	ldr	r3, [r7, #16]
    da5e:	3314      	adds	r3, #20
    da60:	0019      	movs	r1, r3
    da62:	693a      	ldr	r2, [r7, #16]
    da64:	2320      	movs	r3, #32
    da66:	f7ff ff27 	bl	d8b8 <wc_ecc_curve_load_item>
    da6a:	0002      	movs	r2, r0
    da6c:	69bb      	ldr	r3, [r7, #24]
    da6e:	189b      	adds	r3, r3, r2
    da70:	61bb      	str	r3, [r7, #24]
            ECC_CURVE_FIELD_GY);

    /* check for error */
    if (x != 0) {
    da72:	69bb      	ldr	r3, [r7, #24]
    da74:	2b00      	cmp	r3, #0
    da76:	d006      	beq.n	da86 <wc_ecc_curve_load+0x14a>
        wc_ecc_curve_free(curve);
    da78:	693b      	ldr	r3, [r7, #16]
    da7a:	0018      	movs	r0, r3
    da7c:	f7ff ff10 	bl	d8a0 <wc_ecc_curve_free>
        ret = MP_READ_E;
    da80:	236f      	movs	r3, #111	; 0x6f
    da82:	425b      	negs	r3, r3
    da84:	61fb      	str	r3, [r7, #28]

#if defined(ECC_CACHE_CURVE) && !defined(SINGLE_THREADED)
    wc_UnLockMutex(&ecc_curve_cache_mutex);
#endif

    return ret;
    da86:	69fb      	ldr	r3, [r7, #28]
}
    da88:	0018      	movs	r0, r3
    da8a:	46bd      	mov	sp, r7
    da8c:	b008      	add	sp, #32
    da8e:	bd80      	pop	{r7, pc}

0000da90 <wc_ecc_set_curve>:
        return NULL;
    return ecc_sets[curve_idx].name;
}

int wc_ecc_set_curve(ecc_key* key, int keysize, int curve_id)
{
    da90:	b580      	push	{r7, lr}
    da92:	b086      	sub	sp, #24
    da94:	af00      	add	r7, sp, #0
    da96:	60f8      	str	r0, [r7, #12]
    da98:	60b9      	str	r1, [r7, #8]
    da9a:	607a      	str	r2, [r7, #4]
    if (keysize <= 0 && curve_id < 0) {
    da9c:	68bb      	ldr	r3, [r7, #8]
    da9e:	2b00      	cmp	r3, #0
    daa0:	dc05      	bgt.n	daae <wc_ecc_set_curve+0x1e>
    daa2:	687b      	ldr	r3, [r7, #4]
    daa4:	2b00      	cmp	r3, #0
    daa6:	da02      	bge.n	daae <wc_ecc_set_curve+0x1e>
        return BAD_FUNC_ARG;
    daa8:	23ad      	movs	r3, #173	; 0xad
    daaa:	425b      	negs	r3, r3
    daac:	e049      	b.n	db42 <wc_ecc_set_curve+0xb2>
    }

    if (keysize > ECC_MAXSIZE) {
    daae:	68bb      	ldr	r3, [r7, #8]
    dab0:	2b42      	cmp	r3, #66	; 0x42
    dab2:	dd02      	ble.n	daba <wc_ecc_set_curve+0x2a>
        return ECC_BAD_ARG_E;
    dab4:	23aa      	movs	r3, #170	; 0xaa
    dab6:	425b      	negs	r3, r3
    dab8:	e043      	b.n	db42 <wc_ecc_set_curve+0xb2>
    }

    /* handle custom case */
    if (key->idx != ECC_CUSTOM_IDX) {
    daba:	68fb      	ldr	r3, [r7, #12]
    dabc:	685b      	ldr	r3, [r3, #4]
    dabe:	3301      	adds	r3, #1
    dac0:	d03e      	beq.n	db40 <wc_ecc_set_curve+0xb0>
        int x;

        /* default values */
        key->idx = 0;
    dac2:	68fb      	ldr	r3, [r7, #12]
    dac4:	2200      	movs	r2, #0
    dac6:	605a      	str	r2, [r3, #4]
        key->dp = NULL;
    dac8:	68fb      	ldr	r3, [r7, #12]
    daca:	2200      	movs	r2, #0
    dacc:	611a      	str	r2, [r3, #16]

        /* find ecc_set based on curve_id or key size */
        for (x = 0; ecc_sets[x].size != 0; x++) {
    dace:	2300      	movs	r3, #0
    dad0:	617b      	str	r3, [r7, #20]
    dad2:	e018      	b.n	db06 <wc_ecc_set_curve+0x76>
            if (curve_id > ECC_CURVE_DEF) {
    dad4:	687b      	ldr	r3, [r7, #4]
    dad6:	2b00      	cmp	r3, #0
    dad8:	dd0a      	ble.n	daf0 <wc_ecc_set_curve+0x60>
                if (curve_id == ecc_sets[x].id)
    dada:	4a1c      	ldr	r2, [pc, #112]	; (db4c <wc_ecc_set_curve+0xbc>)
    dadc:	697b      	ldr	r3, [r7, #20]
    dade:	2134      	movs	r1, #52	; 0x34
    dae0:	434b      	muls	r3, r1
    dae2:	18d3      	adds	r3, r2, r3
    dae4:	3304      	adds	r3, #4
    dae6:	681a      	ldr	r2, [r3, #0]
    dae8:	687b      	ldr	r3, [r7, #4]
    daea:	429a      	cmp	r2, r3
    daec:	d108      	bne.n	db00 <wc_ecc_set_curve+0x70>
                  break;
    daee:	e013      	b.n	db18 <wc_ecc_set_curve+0x88>
            }
            else if (keysize <= ecc_sets[x].size) {
    daf0:	4b16      	ldr	r3, [pc, #88]	; (db4c <wc_ecc_set_curve+0xbc>)
    daf2:	697a      	ldr	r2, [r7, #20]
    daf4:	2134      	movs	r1, #52	; 0x34
    daf6:	434a      	muls	r2, r1
    daf8:	58d2      	ldr	r2, [r2, r3]
    dafa:	68bb      	ldr	r3, [r7, #8]
    dafc:	429a      	cmp	r2, r3
    dafe:	da0a      	bge.n	db16 <wc_ecc_set_curve+0x86>
        /* default values */
        key->idx = 0;
        key->dp = NULL;

        /* find ecc_set based on curve_id or key size */
        for (x = 0; ecc_sets[x].size != 0; x++) {
    db00:	697b      	ldr	r3, [r7, #20]
    db02:	3301      	adds	r3, #1
    db04:	617b      	str	r3, [r7, #20]
    db06:	4b11      	ldr	r3, [pc, #68]	; (db4c <wc_ecc_set_curve+0xbc>)
    db08:	697a      	ldr	r2, [r7, #20]
    db0a:	2134      	movs	r1, #52	; 0x34
    db0c:	434a      	muls	r2, r1
    db0e:	58d3      	ldr	r3, [r2, r3]
    db10:	2b00      	cmp	r3, #0
    db12:	d1df      	bne.n	dad4 <wc_ecc_set_curve+0x44>
    db14:	e000      	b.n	db18 <wc_ecc_set_curve+0x88>
            if (curve_id > ECC_CURVE_DEF) {
                if (curve_id == ecc_sets[x].id)
                  break;
            }
            else if (keysize <= ecc_sets[x].size) {
                break;
    db16:	46c0      	nop			; (mov r8, r8)
            }
        }
        if (ecc_sets[x].size == 0) {
    db18:	4b0c      	ldr	r3, [pc, #48]	; (db4c <wc_ecc_set_curve+0xbc>)
    db1a:	697a      	ldr	r2, [r7, #20]
    db1c:	2134      	movs	r1, #52	; 0x34
    db1e:	434a      	muls	r2, r1
    db20:	58d3      	ldr	r3, [r2, r3]
    db22:	2b00      	cmp	r3, #0
    db24:	d102      	bne.n	db2c <wc_ecc_set_curve+0x9c>
            WOLFSSL_MSG("ECC Curve not found");
            return ECC_CURVE_OID_E;
    db26:	23ac      	movs	r3, #172	; 0xac
    db28:	425b      	negs	r3, r3
    db2a:	e00a      	b.n	db42 <wc_ecc_set_curve+0xb2>
        }

        key->idx = x;
    db2c:	68fb      	ldr	r3, [r7, #12]
    db2e:	697a      	ldr	r2, [r7, #20]
    db30:	605a      	str	r2, [r3, #4]
        key->dp  = &ecc_sets[x];
    db32:	697b      	ldr	r3, [r7, #20]
    db34:	2234      	movs	r2, #52	; 0x34
    db36:	435a      	muls	r2, r3
    db38:	4b04      	ldr	r3, [pc, #16]	; (db4c <wc_ecc_set_curve+0xbc>)
    db3a:	18d2      	adds	r2, r2, r3
    db3c:	68fb      	ldr	r3, [r7, #12]
    db3e:	611a      	str	r2, [r3, #16]
    }

    return 0;
    db40:	2300      	movs	r3, #0
}
    db42:	0018      	movs	r0, r3
    db44:	46bd      	mov	sp, r7
    db46:	b006      	add	sp, #24
    db48:	bd80      	pop	{r7, pc}
    db4a:	46c0      	nop			; (mov r8, r8)
    db4c:	0002c754 	.word	0x0002c754

0000db50 <alt_fp_init>:


#ifdef ALT_ECC_SIZE
static void alt_fp_init(mp_int* a)
{
    db50:	b580      	push	{r7, lr}
    db52:	b082      	sub	sp, #8
    db54:	af00      	add	r7, sp, #0
    db56:	6078      	str	r0, [r7, #4]
    a->size = FP_SIZE_ECC;
    db58:	687b      	ldr	r3, [r7, #4]
    db5a:	2210      	movs	r2, #16
    db5c:	609a      	str	r2, [r3, #8]
    mp_zero(a);
    db5e:	687b      	ldr	r3, [r7, #4]
    db60:	0018      	movs	r0, r3
    db62:	f002 f873 	bl	fc4c <fp_zero>
}
    db66:	46c0      	nop			; (mov r8, r8)
    db68:	46bd      	mov	sp, r7
    db6a:	b002      	add	sp, #8
    db6c:	bd80      	pop	{r7, pc}
    db6e:	46c0      	nop			; (mov r8, r8)

0000db70 <wc_ecc_new_point_h>:
/**
 * use a heap hint when creating new ecc_point
 * return an allocated point on success or NULL on failure
 */
ecc_point* wc_ecc_new_point_h(void* heap)
{
    db70:	b580      	push	{r7, lr}
    db72:	b084      	sub	sp, #16
    db74:	af00      	add	r7, sp, #0
    db76:	6078      	str	r0, [r7, #4]
   ecc_point* p;

   (void)heap;

   p = (ecc_point*)XMALLOC(sizeof(ecc_point), heap, DYNAMIC_TYPE_ECC);
    db78:	20f0      	movs	r0, #240	; 0xf0
    db7a:	f017 fd83 	bl	25684 <malloc>
    db7e:	0003      	movs	r3, r0
    db80:	60fb      	str	r3, [r7, #12]
   if (p == NULL) {
    db82:	68fb      	ldr	r3, [r7, #12]
    db84:	2b00      	cmp	r3, #0
    db86:	d101      	bne.n	db8c <wc_ecc_new_point_h+0x1c>
      return NULL;
    db88:	2300      	movs	r3, #0
    db8a:	e024      	b.n	dbd6 <wc_ecc_new_point_h+0x66>
   }
   XMEMSET(p, 0, sizeof(ecc_point));
    db8c:	68fb      	ldr	r3, [r7, #12]
    db8e:	22f0      	movs	r2, #240	; 0xf0
    db90:	2100      	movs	r1, #0
    db92:	0018      	movs	r0, r3
    db94:	f017 fdc9 	bl	2572a <memset>
   if (mp_init_multi(p->x, p->y, p->z, NULL, NULL, NULL) != MP_OKAY) {
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
      return NULL;
   }
#else
   p->x = (mp_int*)&p->xyz[0];
    db98:	68fb      	ldr	r3, [r7, #12]
    db9a:	330c      	adds	r3, #12
    db9c:	001a      	movs	r2, r3
    db9e:	68fb      	ldr	r3, [r7, #12]
    dba0:	601a      	str	r2, [r3, #0]
   p->y = (mp_int*)&p->xyz[1];
    dba2:	68fb      	ldr	r3, [r7, #12]
    dba4:	3358      	adds	r3, #88	; 0x58
    dba6:	001a      	movs	r2, r3
    dba8:	68fb      	ldr	r3, [r7, #12]
    dbaa:	605a      	str	r2, [r3, #4]
   p->z = (mp_int*)&p->xyz[2];
    dbac:	68fb      	ldr	r3, [r7, #12]
    dbae:	33a4      	adds	r3, #164	; 0xa4
    dbb0:	001a      	movs	r2, r3
    dbb2:	68fb      	ldr	r3, [r7, #12]
    dbb4:	609a      	str	r2, [r3, #8]
   alt_fp_init(p->x);
    dbb6:	68fb      	ldr	r3, [r7, #12]
    dbb8:	681b      	ldr	r3, [r3, #0]
    dbba:	0018      	movs	r0, r3
    dbbc:	f7ff ffc8 	bl	db50 <alt_fp_init>
   alt_fp_init(p->y);
    dbc0:	68fb      	ldr	r3, [r7, #12]
    dbc2:	685b      	ldr	r3, [r3, #4]
    dbc4:	0018      	movs	r0, r3
    dbc6:	f7ff ffc3 	bl	db50 <alt_fp_init>
   alt_fp_init(p->z);
    dbca:	68fb      	ldr	r3, [r7, #12]
    dbcc:	689b      	ldr	r3, [r3, #8]
    dbce:	0018      	movs	r0, r3
    dbd0:	f7ff ffbe 	bl	db50 <alt_fp_init>
#endif

   return p;
    dbd4:	68fb      	ldr	r3, [r7, #12]
}
    dbd6:	0018      	movs	r0, r3
    dbd8:	46bd      	mov	sp, r7
    dbda:	b004      	add	sp, #16
    dbdc:	bd80      	pop	{r7, pc}
    dbde:	46c0      	nop			; (mov r8, r8)

0000dbe0 <wc_ecc_del_point_h>:
  return wc_ecc_new_point_h(NULL);
}


void wc_ecc_del_point_h(ecc_point* p, void* heap)
{
    dbe0:	b580      	push	{r7, lr}
    dbe2:	b084      	sub	sp, #16
    dbe4:	af00      	add	r7, sp, #0
    dbe6:	6078      	str	r0, [r7, #4]
    dbe8:	6039      	str	r1, [r7, #0]
   /* prevents free'ing null arguments */
   if (p != NULL) {
    dbea:	687b      	ldr	r3, [r7, #4]
    dbec:	2b00      	cmp	r3, #0
    dbee:	d017      	beq.n	dc20 <wc_ecc_del_point_h+0x40>
      mp_clear(p->x);
    dbf0:	687b      	ldr	r3, [r7, #4]
    dbf2:	681b      	ldr	r3, [r3, #0]
    dbf4:	0018      	movs	r0, r3
    dbf6:	f002 f86d 	bl	fcd4 <mp_clear>
      mp_clear(p->y);
    dbfa:	687b      	ldr	r3, [r7, #4]
    dbfc:	685b      	ldr	r3, [r3, #4]
    dbfe:	0018      	movs	r0, r3
    dc00:	f002 f868 	bl	fcd4 <mp_clear>
      mp_clear(p->z);
    dc04:	687b      	ldr	r3, [r7, #4]
    dc06:	689b      	ldr	r3, [r3, #8]
    dc08:	0018      	movs	r0, r3
    dc0a:	f002 f863 	bl	fcd4 <mp_clear>
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
    dc0e:	687b      	ldr	r3, [r7, #4]
    dc10:	60fb      	str	r3, [r7, #12]
    dc12:	68fb      	ldr	r3, [r7, #12]
    dc14:	2b00      	cmp	r3, #0
    dc16:	d003      	beq.n	dc20 <wc_ecc_del_point_h+0x40>
    dc18:	68fb      	ldr	r3, [r7, #12]
    dc1a:	0018      	movs	r0, r3
    dc1c:	f017 fd3c 	bl	25698 <free>
   }
   (void)heap;
}
    dc20:	46c0      	nop			; (mov r8, r8)
    dc22:	46bd      	mov	sp, r7
    dc24:	b004      	add	sp, #16
    dc26:	bd80      	pop	{r7, pc}

0000dc28 <wc_ecc_is_valid_idx>:
/** Returns whether an ECC idx is valid or not
  n      The idx number to check
  return 1 if valid, 0 if not
*/
int wc_ecc_is_valid_idx(int n)
{
    dc28:	b580      	push	{r7, lr}
    dc2a:	b084      	sub	sp, #16
    dc2c:	af00      	add	r7, sp, #0
    dc2e:	6078      	str	r0, [r7, #4]
   int x;

   for (x = 0; ecc_sets[x].size != 0; x++)
    dc30:	2300      	movs	r3, #0
    dc32:	60fb      	str	r3, [r7, #12]
    dc34:	e002      	b.n	dc3c <wc_ecc_is_valid_idx+0x14>
    dc36:	68fb      	ldr	r3, [r7, #12]
    dc38:	3301      	adds	r3, #1
    dc3a:	60fb      	str	r3, [r7, #12]
    dc3c:	4b0a      	ldr	r3, [pc, #40]	; (dc68 <wc_ecc_is_valid_idx+0x40>)
    dc3e:	68fa      	ldr	r2, [r7, #12]
    dc40:	2134      	movs	r1, #52	; 0x34
    dc42:	434a      	muls	r2, r1
    dc44:	58d3      	ldr	r3, [r2, r3]
    dc46:	2b00      	cmp	r3, #0
    dc48:	d1f5      	bne.n	dc36 <wc_ecc_is_valid_idx+0xe>
       ;
   /* -1 is a valid index --- indicating that the domain params
      were supplied by the user */
   if ((n >= ECC_CUSTOM_IDX) && (n < x)) {
    dc4a:	687b      	ldr	r3, [r7, #4]
    dc4c:	3301      	adds	r3, #1
    dc4e:	db05      	blt.n	dc5c <wc_ecc_is_valid_idx+0x34>
    dc50:	687a      	ldr	r2, [r7, #4]
    dc52:	68fb      	ldr	r3, [r7, #12]
    dc54:	429a      	cmp	r2, r3
    dc56:	da01      	bge.n	dc5c <wc_ecc_is_valid_idx+0x34>
      return 1;
    dc58:	2301      	movs	r3, #1
    dc5a:	e000      	b.n	dc5e <wc_ecc_is_valid_idx+0x36>
   }

   return 0;
    dc5c:	2300      	movs	r3, #0
}
    dc5e:	0018      	movs	r0, r3
    dc60:	46bd      	mov	sp, r7
    dc62:	b004      	add	sp, #16
    dc64:	bd80      	pop	{r7, pc}
    dc66:	46c0      	nop			; (mov r8, r8)
    dc68:	0002c754 	.word	0x0002c754

0000dc6c <wc_ecc_get_curve_idx>:

int wc_ecc_get_curve_idx(int curve_id)
{
    dc6c:	b580      	push	{r7, lr}
    dc6e:	b084      	sub	sp, #16
    dc70:	af00      	add	r7, sp, #0
    dc72:	6078      	str	r0, [r7, #4]
    int curve_idx;
    for (curve_idx = 0; ecc_sets[curve_idx].size != 0; curve_idx++) {
    dc74:	2300      	movs	r3, #0
    dc76:	60fb      	str	r3, [r7, #12]
    dc78:	e00c      	b.n	dc94 <wc_ecc_get_curve_idx+0x28>
        if (curve_id == ecc_sets[curve_idx].id)
    dc7a:	4a12      	ldr	r2, [pc, #72]	; (dcc4 <wc_ecc_get_curve_idx+0x58>)
    dc7c:	68fb      	ldr	r3, [r7, #12]
    dc7e:	2134      	movs	r1, #52	; 0x34
    dc80:	434b      	muls	r3, r1
    dc82:	18d3      	adds	r3, r2, r3
    dc84:	3304      	adds	r3, #4
    dc86:	681a      	ldr	r2, [r3, #0]
    dc88:	687b      	ldr	r3, [r7, #4]
    dc8a:	429a      	cmp	r2, r3
    dc8c:	d00a      	beq.n	dca4 <wc_ecc_get_curve_idx+0x38>
}

int wc_ecc_get_curve_idx(int curve_id)
{
    int curve_idx;
    for (curve_idx = 0; ecc_sets[curve_idx].size != 0; curve_idx++) {
    dc8e:	68fb      	ldr	r3, [r7, #12]
    dc90:	3301      	adds	r3, #1
    dc92:	60fb      	str	r3, [r7, #12]
    dc94:	4b0b      	ldr	r3, [pc, #44]	; (dcc4 <wc_ecc_get_curve_idx+0x58>)
    dc96:	68fa      	ldr	r2, [r7, #12]
    dc98:	2134      	movs	r1, #52	; 0x34
    dc9a:	434a      	muls	r2, r1
    dc9c:	58d3      	ldr	r3, [r2, r3]
    dc9e:	2b00      	cmp	r3, #0
    dca0:	d1eb      	bne.n	dc7a <wc_ecc_get_curve_idx+0xe>
    dca2:	e000      	b.n	dca6 <wc_ecc_get_curve_idx+0x3a>
        if (curve_id == ecc_sets[curve_idx].id)
            break;
    dca4:	46c0      	nop			; (mov r8, r8)
    }
    if (ecc_sets[curve_idx].size == 0) {
    dca6:	4b07      	ldr	r3, [pc, #28]	; (dcc4 <wc_ecc_get_curve_idx+0x58>)
    dca8:	68fa      	ldr	r2, [r7, #12]
    dcaa:	2134      	movs	r1, #52	; 0x34
    dcac:	434a      	muls	r2, r1
    dcae:	58d3      	ldr	r3, [r2, r3]
    dcb0:	2b00      	cmp	r3, #0
    dcb2:	d102      	bne.n	dcba <wc_ecc_get_curve_idx+0x4e>
        return ECC_CURVE_INVALID;
    dcb4:	2301      	movs	r3, #1
    dcb6:	425b      	negs	r3, r3
    dcb8:	e000      	b.n	dcbc <wc_ecc_get_curve_idx+0x50>
    }
    return curve_idx;
    dcba:	68fb      	ldr	r3, [r7, #12]
}
    dcbc:	0018      	movs	r0, r3
    dcbe:	46bd      	mov	sp, r7
    dcc0:	b004      	add	sp, #16
    dcc2:	bd80      	pop	{r7, pc}
    dcc4:	0002c754 	.word	0x0002c754

0000dcc8 <wc_ecc_get_curve_id>:

int wc_ecc_get_curve_id(int curve_idx)
{
    dcc8:	b580      	push	{r7, lr}
    dcca:	b082      	sub	sp, #8
    dccc:	af00      	add	r7, sp, #0
    dcce:	6078      	str	r0, [r7, #4]
    if (wc_ecc_is_valid_idx(curve_idx)) {
    dcd0:	687b      	ldr	r3, [r7, #4]
    dcd2:	0018      	movs	r0, r3
    dcd4:	f7ff ffa8 	bl	dc28 <wc_ecc_is_valid_idx>
    dcd8:	1e03      	subs	r3, r0, #0
    dcda:	d007      	beq.n	dcec <wc_ecc_get_curve_id+0x24>
        return ecc_sets[curve_idx].id;
    dcdc:	4a06      	ldr	r2, [pc, #24]	; (dcf8 <wc_ecc_get_curve_id+0x30>)
    dcde:	687b      	ldr	r3, [r7, #4]
    dce0:	2134      	movs	r1, #52	; 0x34
    dce2:	434b      	muls	r3, r1
    dce4:	18d3      	adds	r3, r2, r3
    dce6:	3304      	adds	r3, #4
    dce8:	681b      	ldr	r3, [r3, #0]
    dcea:	e001      	b.n	dcf0 <wc_ecc_get_curve_id+0x28>
    }
    return ECC_CURVE_INVALID;
    dcec:	2301      	movs	r3, #1
    dcee:	425b      	negs	r3, r3
}
    dcf0:	0018      	movs	r0, r3
    dcf2:	46bd      	mov	sp, r7
    dcf4:	b002      	add	sp, #8
    dcf6:	bd80      	pop	{r7, pc}
    dcf8:	0002c754 	.word	0x0002c754

0000dcfc <wc_ecc_get_curve_size_from_id>:
 *
 * id      curve id, from ecc_curve_id enum in ecc.h
 * return  curve size, from ecc_sets[] on success, negative on error
 */
int wc_ecc_get_curve_size_from_id(int curve_id)
{
    dcfc:	b580      	push	{r7, lr}
    dcfe:	b084      	sub	sp, #16
    dd00:	af00      	add	r7, sp, #0
    dd02:	6078      	str	r0, [r7, #4]
    int curve_idx = wc_ecc_get_curve_idx(curve_id);
    dd04:	687b      	ldr	r3, [r7, #4]
    dd06:	0018      	movs	r0, r3
    dd08:	f7ff ffb0 	bl	dc6c <wc_ecc_get_curve_idx>
    dd0c:	0003      	movs	r3, r0
    dd0e:	60fb      	str	r3, [r7, #12]
    if (curve_idx == ECC_CURVE_INVALID)
    dd10:	68fb      	ldr	r3, [r7, #12]
    dd12:	3301      	adds	r3, #1
    dd14:	d102      	bne.n	dd1c <wc_ecc_get_curve_size_from_id+0x20>
        return ECC_BAD_ARG_E;
    dd16:	23aa      	movs	r3, #170	; 0xaa
    dd18:	425b      	negs	r3, r3
    dd1a:	e004      	b.n	dd26 <wc_ecc_get_curve_size_from_id+0x2a>
    return ecc_sets[curve_idx].size;
    dd1c:	4b04      	ldr	r3, [pc, #16]	; (dd30 <wc_ecc_get_curve_size_from_id+0x34>)
    dd1e:	68fa      	ldr	r2, [r7, #12]
    dd20:	2134      	movs	r1, #52	; 0x34
    dd22:	434a      	muls	r2, r1
    dd24:	58d3      	ldr	r3, [r2, r3]
}
    dd26:	0018      	movs	r0, r3
    dd28:	46bd      	mov	sp, r7
    dd2a:	b004      	add	sp, #16
    dd2c:	bd80      	pop	{r7, pc}
    dd2e:	46c0      	nop			; (mov r8, r8)
    dd30:	0002c754 	.word	0x0002c754

0000dd34 <wc_ecc_shared_secret>:
  outlen           [in/out] The max size and resulting size of the shared secret
  return           MP_OKAY if successful
*/
int wc_ecc_shared_secret(ecc_key* private_key, ecc_key* public_key, byte* out,
                      word32* outlen)
{
    dd34:	b580      	push	{r7, lr}
    dd36:	b086      	sub	sp, #24
    dd38:	af00      	add	r7, sp, #0
    dd3a:	60f8      	str	r0, [r7, #12]
    dd3c:	60b9      	str	r1, [r7, #8]
    dd3e:	607a      	str	r2, [r7, #4]
    dd40:	603b      	str	r3, [r7, #0]
   int err;

   if (private_key == NULL || public_key == NULL || out == NULL ||
    dd42:	68fb      	ldr	r3, [r7, #12]
    dd44:	2b00      	cmp	r3, #0
    dd46:	d008      	beq.n	dd5a <wc_ecc_shared_secret+0x26>
    dd48:	68bb      	ldr	r3, [r7, #8]
    dd4a:	2b00      	cmp	r3, #0
    dd4c:	d005      	beq.n	dd5a <wc_ecc_shared_secret+0x26>
    dd4e:	687b      	ldr	r3, [r7, #4]
    dd50:	2b00      	cmp	r3, #0
    dd52:	d002      	beq.n	dd5a <wc_ecc_shared_secret+0x26>
    dd54:	683b      	ldr	r3, [r7, #0]
    dd56:	2b00      	cmp	r3, #0
    dd58:	d102      	bne.n	dd60 <wc_ecc_shared_secret+0x2c>
                                                            outlen == NULL) {
       return BAD_FUNC_ARG;
    dd5a:	23ad      	movs	r3, #173	; 0xad
    dd5c:	425b      	negs	r3, r3
    dd5e:	e045      	b.n	ddec <wc_ecc_shared_secret+0xb8>
        /* fall-through when unavailable */
    }
#endif

   /* type valid? */
   if (private_key->type != ECC_PRIVATEKEY &&
    dd60:	68fb      	ldr	r3, [r7, #12]
    dd62:	681b      	ldr	r3, [r3, #0]
    dd64:	2b02      	cmp	r3, #2
    dd66:	d006      	beq.n	dd76 <wc_ecc_shared_secret+0x42>
           private_key->type != ECC_PRIVATEKEY_ONLY) {
    dd68:	68fb      	ldr	r3, [r7, #12]
    dd6a:	681b      	ldr	r3, [r3, #0]
        /* fall-through when unavailable */
    }
#endif

   /* type valid? */
   if (private_key->type != ECC_PRIVATEKEY &&
    dd6c:	2b03      	cmp	r3, #3
    dd6e:	d002      	beq.n	dd76 <wc_ecc_shared_secret+0x42>
           private_key->type != ECC_PRIVATEKEY_ONLY) {
      return ECC_BAD_ARG_E;
    dd70:	23aa      	movs	r3, #170	; 0xaa
    dd72:	425b      	negs	r3, r3
    dd74:	e03a      	b.n	ddec <wc_ecc_shared_secret+0xb8>
   }

   /* Verify domain params supplied */
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 ||
    dd76:	68fb      	ldr	r3, [r7, #12]
    dd78:	685b      	ldr	r3, [r3, #4]
    dd7a:	0018      	movs	r0, r3
    dd7c:	f7ff ff54 	bl	dc28 <wc_ecc_is_valid_idx>
    dd80:	1e03      	subs	r3, r0, #0
    dd82:	d006      	beq.n	dd92 <wc_ecc_shared_secret+0x5e>
       wc_ecc_is_valid_idx(public_key->idx)  == 0) {
    dd84:	68bb      	ldr	r3, [r7, #8]
    dd86:	685b      	ldr	r3, [r3, #4]
    dd88:	0018      	movs	r0, r3
    dd8a:	f7ff ff4d 	bl	dc28 <wc_ecc_is_valid_idx>
    dd8e:	1e03      	subs	r3, r0, #0
           private_key->type != ECC_PRIVATEKEY_ONLY) {
      return ECC_BAD_ARG_E;
   }

   /* Verify domain params supplied */
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 ||
    dd90:	d102      	bne.n	dd98 <wc_ecc_shared_secret+0x64>
       wc_ecc_is_valid_idx(public_key->idx)  == 0) {
      return ECC_BAD_ARG_E;
    dd92:	23aa      	movs	r3, #170	; 0xaa
    dd94:	425b      	negs	r3, r3
    dd96:	e029      	b.n	ddec <wc_ecc_shared_secret+0xb8>
   }

   /* Verify curve id matches */
   if (private_key->dp->id != public_key->dp->id) {
    dd98:	68fb      	ldr	r3, [r7, #12]
    dd9a:	691b      	ldr	r3, [r3, #16]
    dd9c:	685a      	ldr	r2, [r3, #4]
    dd9e:	68bb      	ldr	r3, [r7, #8]
    dda0:	691b      	ldr	r3, [r3, #16]
    dda2:	685b      	ldr	r3, [r3, #4]
    dda4:	429a      	cmp	r2, r3
    dda6:	d002      	beq.n	ddae <wc_ecc_shared_secret+0x7a>
      return ECC_BAD_ARG_E;
    dda8:	23aa      	movs	r3, #170	; 0xaa
    ddaa:	425b      	negs	r3, r3
    ddac:	e01e      	b.n	ddec <wc_ecc_shared_secret+0xb8>
   }

#ifdef WOLFSSL_ATECC508A
   /* For SECP256R1 use hardware */
   if (private_key->dp->id == ECC_SECP256R1) {
    ddae:	68fb      	ldr	r3, [r7, #12]
    ddb0:	691b      	ldr	r3, [r3, #16]
    ddb2:	685b      	ldr	r3, [r3, #4]
    ddb4:	2b07      	cmp	r3, #7
    ddb6:	d115      	bne.n	dde4 <wc_ecc_shared_secret+0xb0>
       err = atmel_ecc_create_pms(private_key->slot, public_key->pubkey_raw, out);
    ddb8:	68fa      	ldr	r2, [r7, #12]
    ddba:	23cd      	movs	r3, #205	; 0xcd
    ddbc:	009b      	lsls	r3, r3, #2
    ddbe:	58d0      	ldr	r0, [r2, r3]
    ddc0:	68bb      	ldr	r3, [r7, #8]
    ddc2:	22ce      	movs	r2, #206	; 0xce
    ddc4:	0092      	lsls	r2, r2, #2
    ddc6:	4694      	mov	ip, r2
    ddc8:	4463      	add	r3, ip
    ddca:	687a      	ldr	r2, [r7, #4]
    ddcc:	0019      	movs	r1, r3
    ddce:	f002 fe71 	bl	10ab4 <atmel_ecc_create_pms>
    ddd2:	0003      	movs	r3, r0
    ddd4:	617b      	str	r3, [r7, #20]
       *outlen = private_key->dp->size;
    ddd6:	68fb      	ldr	r3, [r7, #12]
    ddd8:	691b      	ldr	r3, [r3, #16]
    ddda:	681b      	ldr	r3, [r3, #0]
    dddc:	001a      	movs	r2, r3
    ddde:	683b      	ldr	r3, [r7, #0]
    dde0:	601a      	str	r2, [r3, #0]
    dde2:	e002      	b.n	ddea <wc_ecc_shared_secret+0xb6>
   }
   else {
      err = NOT_COMPILED_IN;
    dde4:	23ae      	movs	r3, #174	; 0xae
    dde6:	425b      	negs	r3, r3
    dde8:	617b      	str	r3, [r7, #20]
#else

   err = wc_ecc_shared_secret_ex(private_key, &public_key->pubkey, out, outlen);
#endif /* WOLFSSL_ATECC508A */

   return err;
    ddea:	697b      	ldr	r3, [r7, #20]
}
    ddec:	0018      	movs	r0, r3
    ddee:	46bd      	mov	sp, r7
    ddf0:	b006      	add	sp, #24
    ddf2:	bd80      	pop	{r7, pc}

0000ddf4 <wc_ecc_reset>:
}
#endif /* WOLFSSL_SP_MATH */
#endif /* !WOLFSSL_ATECC508A */

static WC_INLINE void wc_ecc_reset(ecc_key* key)
{
    ddf4:	b580      	push	{r7, lr}
    ddf6:	b082      	sub	sp, #8
    ddf8:	af00      	add	r7, sp, #0
    ddfa:	6078      	str	r0, [r7, #4]
    /* make sure required key variables are reset */
    key->state = ECC_STATE_NONE;
    ddfc:	687b      	ldr	r3, [r7, #4]
    ddfe:	2200      	movs	r2, #0
    de00:	609a      	str	r2, [r3, #8]
}
    de02:	46c0      	nop			; (mov r8, r8)
    de04:	46bd      	mov	sp, r7
    de06:	b002      	add	sp, #8
    de08:	bd80      	pop	{r7, pc}
    de0a:	46c0      	nop			; (mov r8, r8)

0000de0c <wc_ecc_make_pub_ex>:
 *
 * returns MP_OKAY on success
 */
static int wc_ecc_make_pub_ex(ecc_key* key, ecc_curve_spec* curveIn,
        ecc_point* pubOut)
{
    de0c:	b580      	push	{r7, lr}
    de0e:	b086      	sub	sp, #24
    de10:	af00      	add	r7, sp, #0
    de12:	60f8      	str	r0, [r7, #12]
    de14:	60b9      	str	r1, [r7, #8]
    de16:	607a      	str	r2, [r7, #4]
    int err = MP_OKAY;
    de18:	2300      	movs	r3, #0
    de1a:	617b      	str	r3, [r7, #20]
#endif
    ecc_point* pub;
    DECLARE_CURVE_SPECS(curve, ECC_CURVE_FIELD_COUNT);
#endif /* !WOLFSSL_ATECC508A */

    if (key == NULL) {
    de1c:	68fb      	ldr	r3, [r7, #12]
    de1e:	2b00      	cmp	r3, #0
    de20:	d102      	bne.n	de28 <wc_ecc_make_pub_ex+0x1c>
        return BAD_FUNC_ARG;
    de22:	23ad      	movs	r3, #173	; 0xad
    de24:	425b      	negs	r3, r3
    de26:	e00d      	b.n	de44 <wc_ecc_make_pub_ex+0x38>
        FREE_CURVE_SPECS();
    }

#else
    (void)curveIn;
    err = NOT_COMPILED_IN;
    de28:	23ae      	movs	r3, #174	; 0xae
    de2a:	425b      	negs	r3, r3
    de2c:	617b      	str	r3, [r7, #20]
#endif /* WOLFSSL_ATECC508A */

    /* change key state if public part is cached */
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
    de2e:	68fb      	ldr	r3, [r7, #12]
    de30:	681b      	ldr	r3, [r3, #0]
    de32:	2b03      	cmp	r3, #3
    de34:	d105      	bne.n	de42 <wc_ecc_make_pub_ex+0x36>
    de36:	687b      	ldr	r3, [r7, #4]
    de38:	2b00      	cmp	r3, #0
    de3a:	d102      	bne.n	de42 <wc_ecc_make_pub_ex+0x36>
        key->type = ECC_PRIVATEKEY;
    de3c:	68fb      	ldr	r3, [r7, #12]
    de3e:	2202      	movs	r2, #2
    de40:	601a      	str	r2, [r3, #0]
    }

    return err;
    de42:	697b      	ldr	r3, [r7, #20]
}
    de44:	0018      	movs	r0, r3
    de46:	46bd      	mov	sp, r7
    de48:	b006      	add	sp, #24
    de4a:	bd80      	pop	{r7, pc}

0000de4c <wc_ecc_make_pub>:
 *
 *
 * returns MP_OKAY on success
 */
int wc_ecc_make_pub(ecc_key* key, ecc_point* pubOut)
{
    de4c:	b580      	push	{r7, lr}
    de4e:	b082      	sub	sp, #8
    de50:	af00      	add	r7, sp, #0
    de52:	6078      	str	r0, [r7, #4]
    de54:	6039      	str	r1, [r7, #0]
    WOLFSSL_ENTER("wc_ecc_make_pub");

    return wc_ecc_make_pub_ex(key, NULL, pubOut);
    de56:	683a      	ldr	r2, [r7, #0]
    de58:	687b      	ldr	r3, [r7, #4]
    de5a:	2100      	movs	r1, #0
    de5c:	0018      	movs	r0, r3
    de5e:	f7ff ffd5 	bl	de0c <wc_ecc_make_pub_ex>
    de62:	0003      	movs	r3, r0
}
    de64:	0018      	movs	r0, r3
    de66:	46bd      	mov	sp, r7
    de68:	b002      	add	sp, #8
    de6a:	bd80      	pop	{r7, pc}

0000de6c <wc_ecc_make_key_ex>:


int wc_ecc_make_key_ex(WC_RNG* rng, int keysize, ecc_key* key, int curve_id)
{
    de6c:	b580      	push	{r7, lr}
    de6e:	b086      	sub	sp, #24
    de70:	af00      	add	r7, sp, #0
    de72:	60f8      	str	r0, [r7, #12]
    de74:	60b9      	str	r1, [r7, #8]
    de76:	607a      	str	r2, [r7, #4]
    de78:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_SP_MATH
    DECLARE_CURVE_SPECS(curve, ECC_CURVE_FIELD_COUNT);
#endif
#endif /* !WOLFSSL_ATECC508A */

    if (key == NULL || rng == NULL) {
    de7a:	687b      	ldr	r3, [r7, #4]
    de7c:	2b00      	cmp	r3, #0
    de7e:	d002      	beq.n	de86 <wc_ecc_make_key_ex+0x1a>
    de80:	68fb      	ldr	r3, [r7, #12]
    de82:	2b00      	cmp	r3, #0
    de84:	d102      	bne.n	de8c <wc_ecc_make_key_ex+0x20>
        return BAD_FUNC_ARG;
    de86:	23ad      	movs	r3, #173	; 0xad
    de88:	425b      	negs	r3, r3
    de8a:	e05d      	b.n	df48 <wc_ecc_make_key_ex+0xdc>
    }

    /* make sure required variables are reset */
    wc_ecc_reset(key);
    de8c:	687b      	ldr	r3, [r7, #4]
    de8e:	0018      	movs	r0, r3
    de90:	f7ff ffb0 	bl	ddf4 <wc_ecc_reset>

    err = wc_ecc_set_curve(key, keysize, curve_id);
    de94:	683a      	ldr	r2, [r7, #0]
    de96:	68b9      	ldr	r1, [r7, #8]
    de98:	687b      	ldr	r3, [r7, #4]
    de9a:	0018      	movs	r0, r3
    de9c:	f7ff fdf8 	bl	da90 <wc_ecc_set_curve>
    dea0:	0003      	movs	r3, r0
    dea2:	617b      	str	r3, [r7, #20]
    if (err != 0) {
    dea4:	697b      	ldr	r3, [r7, #20]
    dea6:	2b00      	cmp	r3, #0
    dea8:	d001      	beq.n	deae <wc_ecc_make_key_ex+0x42>
        return err;
    deaa:	697b      	ldr	r3, [r7, #20]
    deac:	e04c      	b.n	df48 <wc_ecc_make_key_ex+0xdc>
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT && WC_ASYNC_ENABLE_ECC */

#ifdef WOLFSSL_ATECC508A
   if (key->dp->id == ECC_SECP256R1) {
    deae:	687b      	ldr	r3, [r7, #4]
    deb0:	691b      	ldr	r3, [r3, #16]
    deb2:	685b      	ldr	r3, [r3, #4]
    deb4:	2b07      	cmp	r3, #7
    deb6:	d143      	bne.n	df40 <wc_ecc_make_key_ex+0xd4>
       key->type = ECC_PRIVATEKEY;
    deb8:	687b      	ldr	r3, [r7, #4]
    deba:	2202      	movs	r2, #2
    debc:	601a      	str	r2, [r3, #0]
       key->slot = atmel_ecc_alloc(ATMEL_SLOT_ECDHE);
    debe:	2003      	movs	r0, #3
    dec0:	f002 fcf2 	bl	108a8 <atmel_ecc_alloc>
    dec4:	0001      	movs	r1, r0
    dec6:	687a      	ldr	r2, [r7, #4]
    dec8:	23cd      	movs	r3, #205	; 0xcd
    deca:	009b      	lsls	r3, r3, #2
    decc:	50d1      	str	r1, [r2, r3]
       err = atmel_ecc_create_key(key->slot, key->pubkey_raw);
    dece:	687a      	ldr	r2, [r7, #4]
    ded0:	23cd      	movs	r3, #205	; 0xcd
    ded2:	009b      	lsls	r3, r3, #2
    ded4:	58d2      	ldr	r2, [r2, r3]
    ded6:	687b      	ldr	r3, [r7, #4]
    ded8:	21ce      	movs	r1, #206	; 0xce
    deda:	0089      	lsls	r1, r1, #2
    dedc:	468c      	mov	ip, r1
    dede:	4463      	add	r3, ip
    dee0:	0019      	movs	r1, r3
    dee2:	0010      	movs	r0, r2
    dee4:	f002 fe16 	bl	10b14 <atmel_ecc_create_key>
    dee8:	0003      	movs	r3, r0
    deea:	617b      	str	r3, [r7, #20]

       /* populate key->pubkey */
       if (err == 0 && key->pubkey.x) {
    deec:	697b      	ldr	r3, [r7, #20]
    deee:	2b00      	cmp	r3, #0
    def0:	d110      	bne.n	df14 <wc_ecc_make_key_ex+0xa8>
    def2:	687b      	ldr	r3, [r7, #4]
    def4:	699b      	ldr	r3, [r3, #24]
    def6:	2b00      	cmp	r3, #0
    def8:	d00c      	beq.n	df14 <wc_ecc_make_key_ex+0xa8>
           err = mp_read_unsigned_bin(key->pubkey.x, key->pubkey_raw,
    defa:	687b      	ldr	r3, [r7, #4]
    defc:	6998      	ldr	r0, [r3, #24]
    defe:	687b      	ldr	r3, [r7, #4]
    df00:	22ce      	movs	r2, #206	; 0xce
    df02:	0092      	lsls	r2, r2, #2
    df04:	4694      	mov	ip, r2
    df06:	4463      	add	r3, ip
    df08:	2220      	movs	r2, #32
    df0a:	0019      	movs	r1, r3
    df0c:	f001 ff46 	bl	fd9c <mp_read_unsigned_bin>
    df10:	0003      	movs	r3, r0
    df12:	617b      	str	r3, [r7, #20]
                                      ECC_MAX_CRYPTO_HW_SIZE);
       }
       if (err == 0 && key->pubkey.y) {
    df14:	697b      	ldr	r3, [r7, #20]
    df16:	2b00      	cmp	r3, #0
    df18:	d115      	bne.n	df46 <wc_ecc_make_key_ex+0xda>
    df1a:	687b      	ldr	r3, [r7, #4]
    df1c:	69db      	ldr	r3, [r3, #28]
    df1e:	2b00      	cmp	r3, #0
    df20:	d011      	beq.n	df46 <wc_ecc_make_key_ex+0xda>
           err = mp_read_unsigned_bin(key->pubkey.y,
    df22:	687b      	ldr	r3, [r7, #4]
    df24:	69d8      	ldr	r0, [r3, #28]
                                      key->pubkey_raw + ECC_MAX_CRYPTO_HW_SIZE,
    df26:	687b      	ldr	r3, [r7, #4]
    df28:	22ce      	movs	r2, #206	; 0xce
    df2a:	0092      	lsls	r2, r2, #2
    df2c:	4694      	mov	ip, r2
    df2e:	4463      	add	r3, ip
       if (err == 0 && key->pubkey.x) {
           err = mp_read_unsigned_bin(key->pubkey.x, key->pubkey_raw,
                                      ECC_MAX_CRYPTO_HW_SIZE);
       }
       if (err == 0 && key->pubkey.y) {
           err = mp_read_unsigned_bin(key->pubkey.y,
    df30:	3320      	adds	r3, #32
    df32:	2220      	movs	r2, #32
    df34:	0019      	movs	r1, r3
    df36:	f001 ff31 	bl	fd9c <mp_read_unsigned_bin>
    df3a:	0003      	movs	r3, r0
    df3c:	617b      	str	r3, [r7, #20]
    df3e:	e002      	b.n	df46 <wc_ecc_make_key_ex+0xda>
                                      key->pubkey_raw + ECC_MAX_CRYPTO_HW_SIZE,
                                      ECC_MAX_CRYPTO_HW_SIZE);
       }
   }
   else {
      err = NOT_COMPILED_IN;
    df40:	23ae      	movs	r3, #174	; 0xae
    df42:	425b      	negs	r3, r3
    df44:	617b      	str	r3, [r7, #20]
         err = wc_mp_to_bigint(key->pubkey.z, &key->pubkey.z->raw);
#endif

#endif /* WOLFSSL_ATECC508A */

    return err;
    df46:	697b      	ldr	r3, [r7, #20]
}
    df48:	0018      	movs	r0, r3
    df4a:	46bd      	mov	sp, r7
    df4c:	b006      	add	sp, #24
    df4e:	bd80      	pop	{r7, pc}

0000df50 <wc_ecc_make_key>:
 key          [out] Destination of the newly created key
 return       MP_OKAY if successful,
 upon error all allocated memory will be freed
 */
int wc_ecc_make_key(WC_RNG* rng, int keysize, ecc_key* key)
{
    df50:	b580      	push	{r7, lr}
    df52:	b084      	sub	sp, #16
    df54:	af00      	add	r7, sp, #0
    df56:	60f8      	str	r0, [r7, #12]
    df58:	60b9      	str	r1, [r7, #8]
    df5a:	607a      	str	r2, [r7, #4]
    return wc_ecc_make_key_ex(rng, keysize, key, ECC_CURVE_DEF);
    df5c:	687a      	ldr	r2, [r7, #4]
    df5e:	68b9      	ldr	r1, [r7, #8]
    df60:	68f8      	ldr	r0, [r7, #12]
    df62:	2300      	movs	r3, #0
    df64:	f7ff ff82 	bl	de6c <wc_ecc_make_key_ex>
    df68:	0003      	movs	r3, r0
}
    df6a:	0018      	movs	r0, r3
    df6c:	46bd      	mov	sp, r7
    df6e:	b004      	add	sp, #16
    df70:	bd80      	pop	{r7, pc}
    df72:	46c0      	nop			; (mov r8, r8)

0000df74 <wc_ecc_init_ex>:

/* Setup dynamic pointers if using normal math for proper freeing */
int wc_ecc_init_ex(ecc_key* key, void* heap, int devId)
{
    df74:	b580      	push	{r7, lr}
    df76:	b086      	sub	sp, #24
    df78:	af00      	add	r7, sp, #0
    df7a:	60f8      	str	r0, [r7, #12]
    df7c:	60b9      	str	r1, [r7, #8]
    df7e:	607a      	str	r2, [r7, #4]
    int ret = 0;
    df80:	2300      	movs	r3, #0
    df82:	617b      	str	r3, [r7, #20]

    if (key == NULL) {
    df84:	68fb      	ldr	r3, [r7, #12]
    df86:	2b00      	cmp	r3, #0
    df88:	d102      	bne.n	df90 <wc_ecc_init_ex+0x1c>
        return BAD_FUNC_ARG;
    df8a:	23ad      	movs	r3, #173	; 0xad
    df8c:	425b      	negs	r3, r3
    df8e:	e012      	b.n	dfb6 <wc_ecc_init_ex+0x42>

#ifdef ECC_DUMP_OID
    wc_ecc_dump_oids();
#endif

    XMEMSET(key, 0, sizeof(ecc_key));
    df90:	23de      	movs	r3, #222	; 0xde
    df92:	009a      	lsls	r2, r3, #2
    df94:	68fb      	ldr	r3, [r7, #12]
    df96:	2100      	movs	r1, #0
    df98:	0018      	movs	r0, r3
    df9a:	f017 fbc6 	bl	2572a <memset>
    key->state = ECC_STATE_NONE;
    df9e:	68fb      	ldr	r3, [r7, #12]
    dfa0:	2200      	movs	r2, #0
    dfa2:	609a      	str	r2, [r3, #8]
#else
    (void)devId;
#endif

#ifdef WOLFSSL_ATECC508A
    key->slot = ATECC_INVALID_SLOT;
    dfa4:	68fa      	ldr	r2, [r7, #12]
    dfa6:	23cd      	movs	r3, #205	; 0xcd
    dfa8:	009b      	lsls	r3, r3, #2
    dfaa:	21ff      	movs	r1, #255	; 0xff
    dfac:	50d1      	str	r1, [r2, r3]
#endif /* WOLFSSL_ATECC508A */

#ifdef WOLFSSL_HEAP_TEST
    key->heap = (void*)WOLFSSL_HEAP_TEST;
#else
    key->heap = heap;
    dfae:	68fb      	ldr	r3, [r7, #12]
    dfb0:	68ba      	ldr	r2, [r7, #8]
    dfb2:	615a      	str	r2, [r3, #20]
    /* handle as async */
    ret = wolfAsync_DevCtxInit(&key->asyncDev, WOLFSSL_ASYNC_MARKER_ECC,
                                                            key->heap, devId);
#endif

    return ret;
    dfb4:	697b      	ldr	r3, [r7, #20]
}
    dfb6:	0018      	movs	r0, r3
    dfb8:	46bd      	mov	sp, r7
    dfba:	b006      	add	sp, #24
    dfbc:	bd80      	pop	{r7, pc}
    dfbe:	46c0      	nop			; (mov r8, r8)

0000dfc0 <wc_ecc_set_flags>:
    return ret;
}
#endif

int wc_ecc_set_flags(ecc_key* key, word32 flags)
{
    dfc0:	b580      	push	{r7, lr}
    dfc2:	b082      	sub	sp, #8
    dfc4:	af00      	add	r7, sp, #0
    dfc6:	6078      	str	r0, [r7, #4]
    dfc8:	6039      	str	r1, [r7, #0]
    if (key == NULL) {
    dfca:	687b      	ldr	r3, [r7, #4]
    dfcc:	2b00      	cmp	r3, #0
    dfce:	d102      	bne.n	dfd6 <wc_ecc_set_flags+0x16>
        return BAD_FUNC_ARG;
    dfd0:	23ad      	movs	r3, #173	; 0xad
    dfd2:	425b      	negs	r3, r3
    dfd4:	e006      	b.n	dfe4 <wc_ecc_set_flags+0x24>
    }
    key->flags |= flags;
    dfd6:	687b      	ldr	r3, [r7, #4]
    dfd8:	68da      	ldr	r2, [r3, #12]
    dfda:	683b      	ldr	r3, [r7, #0]
    dfdc:	431a      	orrs	r2, r3
    dfde:	687b      	ldr	r3, [r7, #4]
    dfe0:	60da      	str	r2, [r3, #12]
    return 0;
    dfe2:	2300      	movs	r3, #0
}
    dfe4:	0018      	movs	r0, r3
    dfe6:	46bd      	mov	sp, r7
    dfe8:	b002      	add	sp, #8
    dfea:	bd80      	pop	{r7, pc}

0000dfec <wc_ecc_sign_hash_hw>:

#if defined(WOLFSSL_ATECC508A) || defined(PLUTON_CRYPTO_ECC)
static int wc_ecc_sign_hash_hw(const byte* in, word32 inlen,
    mp_int* r, mp_int* s, byte* out, word32 *outlen, WC_RNG* rng,
    ecc_key* key)
{
    dfec:	b580      	push	{r7, lr}
    dfee:	b096      	sub	sp, #88	; 0x58
    dff0:	af00      	add	r7, sp, #0
    dff2:	60f8      	str	r0, [r7, #12]
    dff4:	60b9      	str	r1, [r7, #8]
    dff6:	607a      	str	r2, [r7, #4]
    dff8:	603b      	str	r3, [r7, #0]

#ifdef PLUTON_CRYPTO_ECC
    if (key->devId != INVALID_DEVID) /* use hardware */
#endif
    {
        word32 keysize = (word32)key->dp->size;
    dffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    dffc:	691b      	ldr	r3, [r3, #16]
    dffe:	681b      	ldr	r3, [r3, #0]
    e000:	657b      	str	r3, [r7, #84]	; 0x54
        word32 orderBits;
        DECLARE_CURVE_SPECS(curve, 1);
    e002:	2300      	movs	r3, #0
    e004:	653b      	str	r3, [r7, #80]	; 0x50
    e006:	2314      	movs	r3, #20
    e008:	18fb      	adds	r3, r7, r3
    e00a:	63fb      	str	r3, [r7, #60]	; 0x3c
    e00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e00e:	2228      	movs	r2, #40	; 0x28
    e010:	2100      	movs	r1, #0
    e012:	0018      	movs	r0, r3
    e014:	f017 fb89 	bl	2572a <memset>
    e018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e01a:	2201      	movs	r2, #1
    e01c:	61da      	str	r2, [r3, #28]

        /* Check args */
        if (keysize > ECC_MAX_CRYPTO_HW_SIZE || *outlen < keysize*2) {
    e01e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e020:	2b20      	cmp	r3, #32
    e022:	d805      	bhi.n	e030 <wc_ecc_sign_hash_hw+0x44>
    e024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    e026:	681a      	ldr	r2, [r3, #0]
    e028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e02a:	005b      	lsls	r3, r3, #1
    e02c:	429a      	cmp	r2, r3
    e02e:	d202      	bcs.n	e036 <wc_ecc_sign_hash_hw+0x4a>
            return ECC_BAD_ARG_E;
    e030:	23aa      	movs	r3, #170	; 0xaa
    e032:	425b      	negs	r3, r3
    e034:	e08d      	b.n	e152 <wc_ecc_sign_hash_hw+0x166>
        }

        /* if the input is larger than curve order, we must truncate */
        ALLOC_CURVE_SPECS(1);
    e036:	238b      	movs	r3, #139	; 0x8b
    e038:	009b      	lsls	r3, r3, #2
    e03a:	0018      	movs	r0, r3
    e03c:	f017 fb22 	bl	25684 <malloc>
    e040:	0003      	movs	r3, r0
    e042:	653b      	str	r3, [r7, #80]	; 0x50
    e044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e046:	2b00      	cmp	r3, #0
    e048:	d102      	bne.n	e050 <wc_ecc_sign_hash_hw+0x64>
    e04a:	237d      	movs	r3, #125	; 0x7d
    e04c:	425b      	negs	r3, r3
    e04e:	e080      	b.n	e152 <wc_ecc_sign_hash_hw+0x166>
    e050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e052:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    e054:	619a      	str	r2, [r3, #24]
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
    e056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e058:	691b      	ldr	r3, [r3, #16]
    e05a:	223c      	movs	r2, #60	; 0x3c
    e05c:	18b9      	adds	r1, r7, r2
    e05e:	2208      	movs	r2, #8
    e060:	0018      	movs	r0, r3
    e062:	f7ff fc6b 	bl	d93c <wc_ecc_curve_load>
    e066:	0003      	movs	r3, r0
    e068:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (err != 0) {
    e06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e06c:	2b00      	cmp	r3, #0
    e06e:	d00a      	beq.n	e086 <wc_ecc_sign_hash_hw+0x9a>
           FREE_CURVE_SPECS();
    e070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e072:	64bb      	str	r3, [r7, #72]	; 0x48
    e074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    e076:	2b00      	cmp	r3, #0
    e078:	d003      	beq.n	e082 <wc_ecc_sign_hash_hw+0x96>
    e07a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    e07c:	0018      	movs	r0, r3
    e07e:	f017 fb0b 	bl	25698 <free>
           return err;
    e082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e084:	e065      	b.n	e152 <wc_ecc_sign_hash_hw+0x166>
        }
        orderBits = mp_count_bits(curve->order);
    e086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e088:	68db      	ldr	r3, [r3, #12]
    e08a:	0018      	movs	r0, r3
    e08c:	f001 fefe 	bl	fe8c <mp_count_bits>
    e090:	0003      	movs	r3, r0
    e092:	647b      	str	r3, [r7, #68]	; 0x44
        if ((inlen * WOLFSSL_BIT_SIZE) > orderBits) {
    e094:	68bb      	ldr	r3, [r7, #8]
    e096:	00da      	lsls	r2, r3, #3
    e098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e09a:	429a      	cmp	r2, r3
    e09c:	d903      	bls.n	e0a6 <wc_ecc_sign_hash_hw+0xba>
           inlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
    e09e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e0a0:	3307      	adds	r3, #7
    e0a2:	08db      	lsrs	r3, r3, #3
    e0a4:	60bb      	str	r3, [r7, #8]
        }
        FREE_CURVE_SPECS();
    e0a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e0a8:	643b      	str	r3, [r7, #64]	; 0x40
    e0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e0ac:	2b00      	cmp	r3, #0
    e0ae:	d003      	beq.n	e0b8 <wc_ecc_sign_hash_hw+0xcc>
    e0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e0b2:	0018      	movs	r0, r3
    e0b4:	f017 faf0 	bl	25698 <free>

    #if defined(WOLFSSL_ATECC508A)
        key->slot = atmel_ecc_alloc(ATMEL_SLOT_DEVICE);
    e0b8:	2002      	movs	r0, #2
    e0ba:	f002 fbf5 	bl	108a8 <atmel_ecc_alloc>
    e0be:	0001      	movs	r1, r0
    e0c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    e0c2:	23cd      	movs	r3, #205	; 0xcd
    e0c4:	009b      	lsls	r3, r3, #2
    e0c6:	50d1      	str	r1, [r2, r3]
        if (key->slot == ATECC_INVALID_SLOT) {
    e0c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    e0ca:	23cd      	movs	r3, #205	; 0xcd
    e0cc:	009b      	lsls	r3, r3, #2
    e0ce:	58d3      	ldr	r3, [r2, r3]
    e0d0:	2bff      	cmp	r3, #255	; 0xff
    e0d2:	d102      	bne.n	e0da <wc_ecc_sign_hash_hw+0xee>
            return ECC_BAD_ARG_E;
    e0d4:	23aa      	movs	r3, #170	; 0xaa
    e0d6:	425b      	negs	r3, r3
    e0d8:	e03b      	b.n	e152 <wc_ecc_sign_hash_hw+0x166>
        }

        /* Sign: Result is 32-bytes of R then 32-bytes of S */
        err = atmel_ecc_sign(key->slot, in, out);
    e0da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    e0dc:	23cd      	movs	r3, #205	; 0xcd
    e0de:	009b      	lsls	r3, r3, #2
    e0e0:	58d3      	ldr	r3, [r2, r3]
    e0e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    e0e4:	68f9      	ldr	r1, [r7, #12]
    e0e6:	0018      	movs	r0, r3
    e0e8:	f002 fd34 	bl	10b54 <atmel_ecc_sign>
    e0ec:	0003      	movs	r3, r0
    e0ee:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (err != 0) {
    e0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e0f2:	2b00      	cmp	r3, #0
    e0f4:	d001      	beq.n	e0fa <wc_ecc_sign_hash_hw+0x10e>
           return err;
    e0f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e0f8:	e02b      	b.n	e152 <wc_ecc_sign_hash_hw+0x166>
            }
        }
    #endif

        /* Load R and S */
        err = mp_read_unsigned_bin(r, &out[0], keysize);
    e0fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    e0fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
    e0fe:	687b      	ldr	r3, [r7, #4]
    e100:	0018      	movs	r0, r3
    e102:	f001 fe4b 	bl	fd9c <mp_read_unsigned_bin>
    e106:	0003      	movs	r3, r0
    e108:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (err != MP_OKAY) {
    e10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e10c:	2b00      	cmp	r3, #0
    e10e:	d001      	beq.n	e114 <wc_ecc_sign_hash_hw+0x128>
            return err;
    e110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e112:	e01e      	b.n	e152 <wc_ecc_sign_hash_hw+0x166>
        }
        err = mp_read_unsigned_bin(s, &out[keysize], keysize);
    e114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    e116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e118:	18d1      	adds	r1, r2, r3
    e11a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    e11c:	683b      	ldr	r3, [r7, #0]
    e11e:	0018      	movs	r0, r3
    e120:	f001 fe3c 	bl	fd9c <mp_read_unsigned_bin>
    e124:	0003      	movs	r3, r0
    e126:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (err != MP_OKAY) {
    e128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e12a:	2b00      	cmp	r3, #0
    e12c:	d001      	beq.n	e132 <wc_ecc_sign_hash_hw+0x146>
            return err;
    e12e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e130:	e00f      	b.n	e152 <wc_ecc_sign_hash_hw+0x166>
        }

        /* Check for zeros */
        if (mp_iszero(r) || mp_iszero(s)) {
    e132:	687b      	ldr	r3, [r7, #4]
    e134:	0018      	movs	r0, r3
    e136:	f001 fe9b 	bl	fe70 <mp_iszero>
    e13a:	1e03      	subs	r3, r0, #0
    e13c:	d105      	bne.n	e14a <wc_ecc_sign_hash_hw+0x15e>
    e13e:	683b      	ldr	r3, [r7, #0]
    e140:	0018      	movs	r0, r3
    e142:	f001 fe95 	bl	fe70 <mp_iszero>
    e146:	1e03      	subs	r3, r0, #0
    e148:	d002      	beq.n	e150 <wc_ecc_sign_hash_hw+0x164>
            return MP_ZERO_E;
    e14a:	2379      	movs	r3, #121	; 0x79
    e14c:	425b      	negs	r3, r3
    e14e:	e000      	b.n	e152 <wc_ecc_sign_hash_hw+0x166>
        err = wc_ecc_sign_hash_ex(in, inlen, rng, key, r, s);
    }
#endif
    (void)rng;

    return err;
    e150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
    e152:	0018      	movs	r0, r3
    e154:	46bd      	mov	sp, r7
    e156:	b016      	add	sp, #88	; 0x58
    e158:	bd80      	pop	{r7, pc}
    e15a:	46c0      	nop			; (mov r8, r8)

0000e15c <wc_ecc_sign_hash>:
 key       A private ECC key
 return    MP_OKAY if successful
 */
int wc_ecc_sign_hash(const byte* in, word32 inlen, byte* out, word32 *outlen,
                     WC_RNG* rng, ecc_key* key)
{
    e15c:	b590      	push	{r4, r7, lr}
    e15e:	b093      	sub	sp, #76	; 0x4c
    e160:	af04      	add	r7, sp, #16
    e162:	60f8      	str	r0, [r7, #12]
    e164:	60b9      	str	r1, [r7, #8]
    e166:	607a      	str	r2, [r7, #4]
    e168:	603b      	str	r3, [r7, #0]
    int err;
    mp_int *r = NULL, *s = NULL;
    e16a:	2300      	movs	r3, #0
    e16c:	633b      	str	r3, [r7, #48]	; 0x30
    e16e:	2300      	movs	r3, #0
    e170:	62fb      	str	r3, [r7, #44]	; 0x2c
#if (!defined(WOLFSSL_ASYNC_CRYPT) || !defined(WC_ASYNC_ENABLE_ECC)) && \
    !defined(WOLFSSL_SMALL_STACK)
    mp_int r_lcl, s_lcl;
#endif

    if (in == NULL || out == NULL || outlen == NULL || key == NULL ||
    e172:	68fb      	ldr	r3, [r7, #12]
    e174:	2b00      	cmp	r3, #0
    e176:	d00b      	beq.n	e190 <wc_ecc_sign_hash+0x34>
    e178:	687b      	ldr	r3, [r7, #4]
    e17a:	2b00      	cmp	r3, #0
    e17c:	d008      	beq.n	e190 <wc_ecc_sign_hash+0x34>
    e17e:	683b      	ldr	r3, [r7, #0]
    e180:	2b00      	cmp	r3, #0
    e182:	d005      	beq.n	e190 <wc_ecc_sign_hash+0x34>
    e184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e186:	2b00      	cmp	r3, #0
    e188:	d002      	beq.n	e190 <wc_ecc_sign_hash+0x34>
    e18a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    e18c:	2b00      	cmp	r3, #0
    e18e:	d102      	bne.n	e196 <wc_ecc_sign_hash+0x3a>
                                                                rng == NULL) {
        return ECC_BAD_ARG_E;
    e190:	23aa      	movs	r3, #170	; 0xaa
    e192:	425b      	negs	r3, r3
    e194:	e0b4      	b.n	e300 <wc_ecc_sign_hash+0x1a4>
    s = key->s;
#elif !defined(WOLFSSL_SMALL_STACK)
    r = &r_lcl;
    s = &s_lcl;
#else
    r = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
    e196:	238b      	movs	r3, #139	; 0x8b
    e198:	009b      	lsls	r3, r3, #2
    e19a:	0018      	movs	r0, r3
    e19c:	f017 fa72 	bl	25684 <malloc>
    e1a0:	0003      	movs	r3, r0
    e1a2:	633b      	str	r3, [r7, #48]	; 0x30
    if (r == NULL)
    e1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e1a6:	2b00      	cmp	r3, #0
    e1a8:	d102      	bne.n	e1b0 <wc_ecc_sign_hash+0x54>
        return MEMORY_E;
    e1aa:	237d      	movs	r3, #125	; 0x7d
    e1ac:	425b      	negs	r3, r3
    e1ae:	e0a7      	b.n	e300 <wc_ecc_sign_hash+0x1a4>
    s = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
    e1b0:	238b      	movs	r3, #139	; 0x8b
    e1b2:	009b      	lsls	r3, r3, #2
    e1b4:	0018      	movs	r0, r3
    e1b6:	f017 fa65 	bl	25684 <malloc>
    e1ba:	0003      	movs	r3, r0
    e1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (s == NULL) {
    e1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e1c0:	2b00      	cmp	r3, #0
    e1c2:	d10b      	bne.n	e1dc <wc_ecc_sign_hash+0x80>
        XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
    e1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e1c6:	62bb      	str	r3, [r7, #40]	; 0x28
    e1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e1ca:	2b00      	cmp	r3, #0
    e1cc:	d003      	beq.n	e1d6 <wc_ecc_sign_hash+0x7a>
    e1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e1d0:	0018      	movs	r0, r3
    e1d2:	f017 fa61 	bl	25698 <free>
        return MEMORY_E;
    e1d6:	237d      	movs	r3, #125	; 0x7d
    e1d8:	425b      	negs	r3, r3
    e1da:	e091      	b.n	e300 <wc_ecc_sign_hash+0x1a4>
    }
#endif /* WOLFSSL_ASYNC_CRYPT && WC_ASYNC_ENABLE_ECC */

    switch(key->state) {
    e1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e1de:	689b      	ldr	r3, [r3, #8]
    e1e0:	2b03      	cmp	r3, #3
    e1e2:	d004      	beq.n	e1ee <wc_ecc_sign_hash+0x92>
    e1e4:	2b04      	cmp	r3, #4
    e1e6:	d04e      	beq.n	e286 <wc_ecc_sign_hash+0x12a>
    e1e8:	2b00      	cmp	r3, #0
    e1ea:	d000      	beq.n	e1ee <wc_ecc_sign_hash+0x92>
    e1ec:	e071      	b.n	e2d2 <wc_ecc_sign_hash+0x176>
        case ECC_STATE_NONE:
        case ECC_STATE_SIGN_DO:
            key->state = ECC_STATE_SIGN_DO;
    e1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e1f0:	2203      	movs	r2, #3
    e1f2:	609a      	str	r2, [r3, #8]

            if ((err = mp_init_multi(r, s, NULL, NULL, NULL, NULL)) != MP_OKAY){
    e1f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    e1f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    e1f8:	2300      	movs	r3, #0
    e1fa:	9301      	str	r3, [sp, #4]
    e1fc:	2300      	movs	r3, #0
    e1fe:	9300      	str	r3, [sp, #0]
    e200:	2300      	movs	r3, #0
    e202:	2200      	movs	r2, #0
    e204:	f001 fd76 	bl	fcf4 <mp_init_multi>
    e208:	0003      	movs	r3, r0
    e20a:	637b      	str	r3, [r7, #52]	; 0x34
    e20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e20e:	2b00      	cmp	r3, #0
    e210:	d012      	beq.n	e238 <wc_ecc_sign_hash+0xdc>
            #if !defined(WOLFSSL_ASYNC_CRYPT) && defined(WOLFSSL_SMALL_STACK)
                XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
    e212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e214:	627b      	str	r3, [r7, #36]	; 0x24
    e216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e218:	2b00      	cmp	r3, #0
    e21a:	d003      	beq.n	e224 <wc_ecc_sign_hash+0xc8>
    e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e21e:	0018      	movs	r0, r3
    e220:	f017 fa3a 	bl	25698 <free>
                XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
    e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e226:	623b      	str	r3, [r7, #32]
    e228:	6a3b      	ldr	r3, [r7, #32]
    e22a:	2b00      	cmp	r3, #0
    e22c:	d055      	beq.n	e2da <wc_ecc_sign_hash+0x17e>
    e22e:	6a3b      	ldr	r3, [r7, #32]
    e230:	0018      	movs	r0, r3
    e232:	f017 fa31 	bl	25698 <free>
            #endif
                break;
    e236:	e050      	b.n	e2da <wc_ecc_sign_hash+0x17e>
            }

        /* hardware crypto */
        #if defined(WOLFSSL_ATECC508A) || defined(PLUTON_CRYPTO_ECC)
            err = wc_ecc_sign_hash_hw(in, inlen, r, s, out, outlen, rng, key);
    e238:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    e23a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e23c:	68b9      	ldr	r1, [r7, #8]
    e23e:	68f8      	ldr	r0, [r7, #12]
    e240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e242:	9303      	str	r3, [sp, #12]
    e244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    e246:	9302      	str	r3, [sp, #8]
    e248:	683b      	ldr	r3, [r7, #0]
    e24a:	9301      	str	r3, [sp, #4]
    e24c:	687b      	ldr	r3, [r7, #4]
    e24e:	9300      	str	r3, [sp, #0]
    e250:	0023      	movs	r3, r4
    e252:	f7ff fecb 	bl	dfec <wc_ecc_sign_hash_hw>
    e256:	0003      	movs	r3, r0
    e258:	637b      	str	r3, [r7, #52]	; 0x34
        #else
            err = wc_ecc_sign_hash_ex(in, inlen, rng, key, r, s);
        #endif
            if (err < 0) {
    e25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e25c:	2b00      	cmp	r3, #0
    e25e:	da12      	bge.n	e286 <wc_ecc_sign_hash+0x12a>
            #if !defined(WOLFSSL_ASYNC_CRYPT) && defined(WOLFSSL_SMALL_STACK)
                XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
    e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e262:	61fb      	str	r3, [r7, #28]
    e264:	69fb      	ldr	r3, [r7, #28]
    e266:	2b00      	cmp	r3, #0
    e268:	d003      	beq.n	e272 <wc_ecc_sign_hash+0x116>
    e26a:	69fb      	ldr	r3, [r7, #28]
    e26c:	0018      	movs	r0, r3
    e26e:	f017 fa13 	bl	25698 <free>
                XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
    e272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e274:	61bb      	str	r3, [r7, #24]
    e276:	69bb      	ldr	r3, [r7, #24]
    e278:	2b00      	cmp	r3, #0
    e27a:	d030      	beq.n	e2de <wc_ecc_sign_hash+0x182>
    e27c:	69bb      	ldr	r3, [r7, #24]
    e27e:	0018      	movs	r0, r3
    e280:	f017 fa0a 	bl	25698 <free>
            #endif
                break;
    e284:	e02b      	b.n	e2de <wc_ecc_sign_hash+0x182>
            }

            FALL_THROUGH;

        case ECC_STATE_SIGN_ENCODE:
            key->state = ECC_STATE_SIGN_ENCODE;
    e286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e288:	2204      	movs	r2, #4
    e28a:	609a      	str	r2, [r3, #8]
                #endif
            }
        #endif /* WOLFSSL_ASYNC_CRYPT */

            /* encoded with DSA header */
            err = StoreECC_DSA_Sig(out, outlen, r, s);
    e28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e28e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e290:	6839      	ldr	r1, [r7, #0]
    e292:	6878      	ldr	r0, [r7, #4]
    e294:	f7f9 f948 	bl	7528 <StoreECC_DSA_Sig>
    e298:	0003      	movs	r3, r0
    e29a:	637b      	str	r3, [r7, #52]	; 0x34

            /* done with R/S */
            mp_clear(r);
    e29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e29e:	0018      	movs	r0, r3
    e2a0:	f001 fd18 	bl	fcd4 <mp_clear>
            mp_clear(s);
    e2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e2a6:	0018      	movs	r0, r3
    e2a8:	f001 fd14 	bl	fcd4 <mp_clear>
        #if !defined(WOLFSSL_ASYNC_CRYPT) && defined(WOLFSSL_SMALL_STACK)
            XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
    e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e2ae:	617b      	str	r3, [r7, #20]
    e2b0:	697b      	ldr	r3, [r7, #20]
    e2b2:	2b00      	cmp	r3, #0
    e2b4:	d003      	beq.n	e2be <wc_ecc_sign_hash+0x162>
    e2b6:	697b      	ldr	r3, [r7, #20]
    e2b8:	0018      	movs	r0, r3
    e2ba:	f017 f9ed 	bl	25698 <free>
            XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
    e2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e2c0:	613b      	str	r3, [r7, #16]
    e2c2:	693b      	ldr	r3, [r7, #16]
    e2c4:	2b00      	cmp	r3, #0
    e2c6:	d00c      	beq.n	e2e2 <wc_ecc_sign_hash+0x186>
    e2c8:	693b      	ldr	r3, [r7, #16]
    e2ca:	0018      	movs	r0, r3
    e2cc:	f017 f9e4 	bl	25698 <free>
        #endif
            break;
    e2d0:	e007      	b.n	e2e2 <wc_ecc_sign_hash+0x186>

        default:
            err = BAD_STATE_E;
    e2d2:	23c0      	movs	r3, #192	; 0xc0
    e2d4:	425b      	negs	r3, r3
    e2d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
    e2d8:	e004      	b.n	e2e4 <wc_ecc_sign_hash+0x188>
            if ((err = mp_init_multi(r, s, NULL, NULL, NULL, NULL)) != MP_OKAY){
            #if !defined(WOLFSSL_ASYNC_CRYPT) && defined(WOLFSSL_SMALL_STACK)
                XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
                XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
            #endif
                break;
    e2da:	46c0      	nop			; (mov r8, r8)
    e2dc:	e002      	b.n	e2e4 <wc_ecc_sign_hash+0x188>
            if (err < 0) {
            #if !defined(WOLFSSL_ASYNC_CRYPT) && defined(WOLFSSL_SMALL_STACK)
                XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
                XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
            #endif
                break;
    e2de:	46c0      	nop			; (mov r8, r8)
    e2e0:	e000      	b.n	e2e4 <wc_ecc_sign_hash+0x188>
            mp_clear(s);
        #if !defined(WOLFSSL_ASYNC_CRYPT) && defined(WOLFSSL_SMALL_STACK)
            XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
            XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
        #endif
            break;
    e2e2:	46c0      	nop			; (mov r8, r8)
            err = BAD_STATE_E;
            break;
    }

    /* if async pending then return and skip done cleanup below */
    if (err == WC_PENDING_E) {
    e2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2e6:	336c      	adds	r3, #108	; 0x6c
    e2e8:	d106      	bne.n	e2f8 <wc_ecc_sign_hash+0x19c>
        key->state++;
    e2ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e2ec:	689b      	ldr	r3, [r3, #8]
    e2ee:	1c5a      	adds	r2, r3, #1
    e2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e2f2:	609a      	str	r2, [r3, #8]
        return err;
    e2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2f6:	e003      	b.n	e300 <wc_ecc_sign_hash+0x1a4>

    /* cleanup */
#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_ECC)
    wc_ecc_free_async(key);
#endif
    key->state = ECC_STATE_NONE;
    e2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e2fa:	2200      	movs	r2, #0
    e2fc:	609a      	str	r2, [r3, #8]

    return err;
    e2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    e300:	0018      	movs	r0, r3
    e302:	46bd      	mov	sp, r7
    e304:	b00f      	add	sp, #60	; 0x3c
    e306:	bd90      	pop	{r4, r7, pc}

0000e308 <wc_ecc_free>:
/**
  Free an ECC key from memory
  key   The key you wish to free
*/
int wc_ecc_free(ecc_key* key)
{
    e308:	b580      	push	{r7, lr}
    e30a:	b082      	sub	sp, #8
    e30c:	af00      	add	r7, sp, #0
    e30e:	6078      	str	r0, [r7, #4]
    if (key == NULL) {
    e310:	687b      	ldr	r3, [r7, #4]
    e312:	2b00      	cmp	r3, #0
    e314:	d101      	bne.n	e31a <wc_ecc_free+0x12>
        return 0;
    e316:	2300      	movs	r3, #0
    e318:	e00c      	b.n	e334 <wc_ecc_free+0x2c>
    #endif
    wc_ecc_free_async(key);
#endif

#ifdef WOLFSSL_ATECC508A
    atmel_ecc_free(key->slot);
    e31a:	687a      	ldr	r2, [r7, #4]
    e31c:	23cd      	movs	r3, #205	; 0xcd
    e31e:	009b      	lsls	r3, r3, #2
    e320:	58d3      	ldr	r3, [r2, r3]
    e322:	0018      	movs	r0, r3
    e324:	f002 fb16 	bl	10954 <atmel_ecc_free>
    key->slot = ATECC_INVALID_SLOT;
    e328:	687a      	ldr	r2, [r7, #4]
    e32a:	23cd      	movs	r3, #205	; 0xcd
    e32c:	009b      	lsls	r3, r3, #2
    e32e:	21ff      	movs	r1, #255	; 0xff
    e330:	50d1      	str	r1, [r2, r3]
#ifdef WOLFSSL_CUSTOM_CURVES
    if (key->deallocSet && key->dp != NULL)
        wc_ecc_free_curve(key->dp, key->heap);
#endif

    return 0;
    e332:	2300      	movs	r3, #0
}
    e334:	0018      	movs	r0, r3
    e336:	46bd      	mov	sp, r7
    e338:	b002      	add	sp, #8
    e33a:	bd80      	pop	{r7, pc}

0000e33c <wc_ecc_verify_hash>:
 key         The corresponding public ECC key
 return      MP_OKAY if successful (even if the signature is not valid)
 */
int wc_ecc_verify_hash(const byte* sig, word32 siglen, const byte* hash,
                       word32 hashlen, int* res, ecc_key* key)
{
    e33c:	b590      	push	{r4, r7, lr}
    e33e:	b08f      	sub	sp, #60	; 0x3c
    e340:	af02      	add	r7, sp, #8
    e342:	60f8      	str	r0, [r7, #12]
    e344:	60b9      	str	r1, [r7, #8]
    e346:	607a      	str	r2, [r7, #4]
    e348:	603b      	str	r3, [r7, #0]
    int err;
    mp_int *r = NULL, *s = NULL;
    e34a:	2300      	movs	r3, #0
    e34c:	62bb      	str	r3, [r7, #40]	; 0x28
    e34e:	2300      	movs	r3, #0
    e350:	627b      	str	r3, [r7, #36]	; 0x24
#if (!defined(WOLFSSL_ASYNC_CRYPT) || !defined(WC_ASYNC_ENABLE_ECC)) && \
    !defined(WOLFSSL_SMALL_STACK)
    mp_int r_lcl, s_lcl;
#endif

    if (sig == NULL || hash == NULL || res == NULL || key == NULL) {
    e352:	68fb      	ldr	r3, [r7, #12]
    e354:	2b00      	cmp	r3, #0
    e356:	d008      	beq.n	e36a <wc_ecc_verify_hash+0x2e>
    e358:	687b      	ldr	r3, [r7, #4]
    e35a:	2b00      	cmp	r3, #0
    e35c:	d005      	beq.n	e36a <wc_ecc_verify_hash+0x2e>
    e35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e360:	2b00      	cmp	r3, #0
    e362:	d002      	beq.n	e36a <wc_ecc_verify_hash+0x2e>
    e364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e366:	2b00      	cmp	r3, #0
    e368:	d102      	bne.n	e370 <wc_ecc_verify_hash+0x34>
        return ECC_BAD_ARG_E;
    e36a:	23aa      	movs	r3, #170	; 0xaa
    e36c:	425b      	negs	r3, r3
    e36e:	e0b0      	b.n	e4d2 <wc_ecc_verify_hash+0x196>
#else
    #ifndef WOLFSSL_SMALL_STACK
    r = &r_lcl;
    s = &s_lcl;
    #else
    r = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
    e370:	238b      	movs	r3, #139	; 0x8b
    e372:	009b      	lsls	r3, r3, #2
    e374:	0018      	movs	r0, r3
    e376:	f017 f985 	bl	25684 <malloc>
    e37a:	0003      	movs	r3, r0
    e37c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (r == NULL)
    e37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e380:	2b00      	cmp	r3, #0
    e382:	d102      	bne.n	e38a <wc_ecc_verify_hash+0x4e>
        return MEMORY_E;
    e384:	237d      	movs	r3, #125	; 0x7d
    e386:	425b      	negs	r3, r3
    e388:	e0a3      	b.n	e4d2 <wc_ecc_verify_hash+0x196>
    s = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
    e38a:	238b      	movs	r3, #139	; 0x8b
    e38c:	009b      	lsls	r3, r3, #2
    e38e:	0018      	movs	r0, r3
    e390:	f017 f978 	bl	25684 <malloc>
    e394:	0003      	movs	r3, r0
    e396:	627b      	str	r3, [r7, #36]	; 0x24
    if (s == NULL) {
    e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e39a:	2b00      	cmp	r3, #0
    e39c:	d10b      	bne.n	e3b6 <wc_ecc_verify_hash+0x7a>
        XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
    e39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e3a0:	623b      	str	r3, [r7, #32]
    e3a2:	6a3b      	ldr	r3, [r7, #32]
    e3a4:	2b00      	cmp	r3, #0
    e3a6:	d003      	beq.n	e3b0 <wc_ecc_verify_hash+0x74>
    e3a8:	6a3b      	ldr	r3, [r7, #32]
    e3aa:	0018      	movs	r0, r3
    e3ac:	f017 f974 	bl	25698 <free>
        return MEMORY_E;
    e3b0:	237d      	movs	r3, #125	; 0x7d
    e3b2:	425b      	negs	r3, r3
    e3b4:	e08d      	b.n	e4d2 <wc_ecc_verify_hash+0x196>
    }
    #endif
    XMEMSET(r, 0, sizeof(mp_int));
    e3b6:	238b      	movs	r3, #139	; 0x8b
    e3b8:	009a      	lsls	r2, r3, #2
    e3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e3bc:	2100      	movs	r1, #0
    e3be:	0018      	movs	r0, r3
    e3c0:	f017 f9b3 	bl	2572a <memset>
    XMEMSET(s, 0, sizeof(mp_int));
    e3c4:	238b      	movs	r3, #139	; 0x8b
    e3c6:	009a      	lsls	r2, r3, #2
    e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e3ca:	2100      	movs	r1, #0
    e3cc:	0018      	movs	r0, r3
    e3ce:	f017 f9ac 	bl	2572a <memset>
#endif /* WOLFSSL_ASYNC_CRYPT */

    switch (key->state) {
    e3d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e3d4:	689b      	ldr	r3, [r3, #8]
    e3d6:	2b05      	cmp	r3, #5
    e3d8:	d008      	beq.n	e3ec <wc_ecc_verify_hash+0xb0>
    e3da:	dc02      	bgt.n	e3e2 <wc_ecc_verify_hash+0xa6>
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d005      	beq.n	e3ec <wc_ecc_verify_hash+0xb0>
    e3e0:	e04c      	b.n	e47c <wc_ecc_verify_hash+0x140>
    e3e2:	2b06      	cmp	r3, #6
    e3e4:	d013      	beq.n	e40e <wc_ecc_verify_hash+0xd2>
    e3e6:	2b07      	cmp	r3, #7
    e3e8:	d042      	beq.n	e470 <wc_ecc_verify_hash+0x134>
    e3ea:	e047      	b.n	e47c <wc_ecc_verify_hash+0x140>
        case ECC_STATE_NONE:
        case ECC_STATE_VERIFY_DECODE:
            key->state = ECC_STATE_VERIFY_DECODE;
    e3ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e3ee:	2205      	movs	r2, #5
    e3f0:	609a      	str	r2, [r3, #8]

            /* default to invalid signature */
            *res = 0;
    e3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e3f4:	2200      	movs	r2, #0
    e3f6:	601a      	str	r2, [r3, #0]
            /* Note, DecodeECC_DSA_Sig() calls mp_init() on r and s.
             * If either of those don't allocate correctly, none of
             * the rest of this function will execute, and everything
             * gets cleaned up at the end. */
            /* decode DSA header */
            err = DecodeECC_DSA_Sig(sig, siglen, r, s);
    e3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e3fc:	68b9      	ldr	r1, [r7, #8]
    e3fe:	68f8      	ldr	r0, [r7, #12]
    e400:	f7f9 f908 	bl	7614 <DecodeECC_DSA_Sig>
    e404:	0003      	movs	r3, r0
    e406:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (err < 0) {
    e408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e40a:	2b00      	cmp	r3, #0
    e40c:	db3a      	blt.n	e484 <wc_ecc_verify_hash+0x148>
                break;
            }
            FALL_THROUGH;

        case ECC_STATE_VERIFY_DO:
            key->state = ECC_STATE_VERIFY_DO;
    e40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e410:	2206      	movs	r2, #6
    e412:	609a      	str	r2, [r3, #8]

            err = wc_ecc_verify_hash_ex(r, s, hash, hashlen, res, key);
    e414:	683c      	ldr	r4, [r7, #0]
    e416:	687a      	ldr	r2, [r7, #4]
    e418:	6a79      	ldr	r1, [r7, #36]	; 0x24
    e41a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e41c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e41e:	9301      	str	r3, [sp, #4]
    e420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e422:	9300      	str	r3, [sp, #0]
    e424:	0023      	movs	r3, r4
    e426:	f000 f859 	bl	e4dc <wc_ecc_verify_hash_ex>
    e42a:	0003      	movs	r3, r0
    e42c:	62fb      	str	r3, [r7, #44]	; 0x2c

        #ifndef WOLFSSL_ASYNC_CRYPT
            /* done with R/S */
            mp_clear(r);
    e42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e430:	0018      	movs	r0, r3
    e432:	f001 fc4f 	bl	fcd4 <mp_clear>
            mp_clear(s);
    e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e438:	0018      	movs	r0, r3
    e43a:	f001 fc4b 	bl	fcd4 <mp_clear>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
    e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e440:	61fb      	str	r3, [r7, #28]
    e442:	69fb      	ldr	r3, [r7, #28]
    e444:	2b00      	cmp	r3, #0
    e446:	d003      	beq.n	e450 <wc_ecc_verify_hash+0x114>
    e448:	69fb      	ldr	r3, [r7, #28]
    e44a:	0018      	movs	r0, r3
    e44c:	f017 f924 	bl	25698 <free>
            XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
    e450:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e452:	61bb      	str	r3, [r7, #24]
    e454:	69bb      	ldr	r3, [r7, #24]
    e456:	2b00      	cmp	r3, #0
    e458:	d003      	beq.n	e462 <wc_ecc_verify_hash+0x126>
    e45a:	69bb      	ldr	r3, [r7, #24]
    e45c:	0018      	movs	r0, r3
    e45e:	f017 f91b 	bl	25698 <free>
            r = NULL;
    e462:	2300      	movs	r3, #0
    e464:	62bb      	str	r3, [r7, #40]	; 0x28
            s = NULL;
    e466:	2300      	movs	r3, #0
    e468:	627b      	str	r3, [r7, #36]	; 0x24
        #endif
        #endif

            if (err < 0) {
    e46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e46c:	2b00      	cmp	r3, #0
    e46e:	db0b      	blt.n	e488 <wc_ecc_verify_hash+0x14c>
                break;
            }
            FALL_THROUGH;

        case ECC_STATE_VERIFY_RES:
            key->state = ECC_STATE_VERIFY_RES;
    e470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e472:	2207      	movs	r2, #7
    e474:	609a      	str	r2, [r3, #8]
            err = 0;
    e476:	2300      	movs	r3, #0
    e478:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
    e47a:	e006      	b.n	e48a <wc_ecc_verify_hash+0x14e>

        default:
            err = BAD_STATE_E;
    e47c:	23c0      	movs	r3, #192	; 0xc0
    e47e:	425b      	negs	r3, r3
    e480:	62fb      	str	r3, [r7, #44]	; 0x2c
    e482:	e002      	b.n	e48a <wc_ecc_verify_hash+0x14e>
             * the rest of this function will execute, and everything
             * gets cleaned up at the end. */
            /* decode DSA header */
            err = DecodeECC_DSA_Sig(sig, siglen, r, s);
            if (err < 0) {
                break;
    e484:	46c0      	nop			; (mov r8, r8)
    e486:	e000      	b.n	e48a <wc_ecc_verify_hash+0x14e>
            s = NULL;
        #endif
        #endif

            if (err < 0) {
                break;
    e488:	46c0      	nop			; (mov r8, r8)
        default:
            err = BAD_STATE_E;
    }

    /* if async pending then return and skip done cleanup below */
    if (err == WC_PENDING_E) {
    e48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e48c:	336c      	adds	r3, #108	; 0x6c
    e48e:	d106      	bne.n	e49e <wc_ecc_verify_hash+0x162>
        key->state++;
    e490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e492:	689b      	ldr	r3, [r3, #8]
    e494:	1c5a      	adds	r2, r3, #1
    e496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e498:	609a      	str	r2, [r3, #8]
        return err;
    e49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e49c:	e019      	b.n	e4d2 <wc_ecc_verify_hash+0x196>

    /* cleanup */
#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_ECC)
    wc_ecc_free_async(key);
#elif defined(WOLFSSL_SMALL_STACK)
    XFREE(s, key->heap, DYNAMIC_TYPE_ECC);
    e49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e4a0:	617b      	str	r3, [r7, #20]
    e4a2:	697b      	ldr	r3, [r7, #20]
    e4a4:	2b00      	cmp	r3, #0
    e4a6:	d003      	beq.n	e4b0 <wc_ecc_verify_hash+0x174>
    e4a8:	697b      	ldr	r3, [r7, #20]
    e4aa:	0018      	movs	r0, r3
    e4ac:	f017 f8f4 	bl	25698 <free>
    XFREE(r, key->heap, DYNAMIC_TYPE_ECC);
    e4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e4b2:	613b      	str	r3, [r7, #16]
    e4b4:	693b      	ldr	r3, [r7, #16]
    e4b6:	2b00      	cmp	r3, #0
    e4b8:	d003      	beq.n	e4c2 <wc_ecc_verify_hash+0x186>
    e4ba:	693b      	ldr	r3, [r7, #16]
    e4bc:	0018      	movs	r0, r3
    e4be:	f017 f8eb 	bl	25698 <free>
    r = NULL;
    e4c2:	2300      	movs	r3, #0
    e4c4:	62bb      	str	r3, [r7, #40]	; 0x28
    s = NULL;
    e4c6:	2300      	movs	r3, #0
    e4c8:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    key->state = ECC_STATE_NONE;
    e4ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e4cc:	2200      	movs	r2, #0
    e4ce:	609a      	str	r2, [r3, #8]

    return err;
    e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    e4d2:	0018      	movs	r0, r3
    e4d4:	46bd      	mov	sp, r7
    e4d6:	b00d      	add	sp, #52	; 0x34
    e4d8:	bd90      	pop	{r4, r7, pc}
    e4da:	46c0      	nop			; (mov r8, r8)

0000e4dc <wc_ecc_verify_hash_ex>:
   key         The corresponding public ECC key
   return      MP_OKAY if successful (even if the signature is not valid)
*/
int wc_ecc_verify_hash_ex(mp_int *r, mp_int *s, const byte* hash,
                    word32 hashlen, int* res, ecc_key* key)
{
    e4dc:	b580      	push	{r7, lr}
    e4de:	b096      	sub	sp, #88	; 0x58
    e4e0:	af00      	add	r7, sp, #0
    e4e2:	60f8      	str	r0, [r7, #12]
    e4e4:	60b9      	str	r1, [r7, #8]
    e4e6:	607a      	str	r2, [r7, #4]
    e4e8:	603b      	str	r3, [r7, #0]
#endif /* WOLFSSL_SMALL_STACK */
   mp_int*       e;
   DECLARE_CURVE_SPECS(curve, ECC_CURVE_FIELD_COUNT);
#endif

   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
    e4ea:	68fb      	ldr	r3, [r7, #12]
    e4ec:	2b00      	cmp	r3, #0
    e4ee:	d00b      	beq.n	e508 <wc_ecc_verify_hash_ex+0x2c>
    e4f0:	68bb      	ldr	r3, [r7, #8]
    e4f2:	2b00      	cmp	r3, #0
    e4f4:	d008      	beq.n	e508 <wc_ecc_verify_hash_ex+0x2c>
    e4f6:	687b      	ldr	r3, [r7, #4]
    e4f8:	2b00      	cmp	r3, #0
    e4fa:	d005      	beq.n	e508 <wc_ecc_verify_hash_ex+0x2c>
    e4fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    e4fe:	2b00      	cmp	r3, #0
    e500:	d002      	beq.n	e508 <wc_ecc_verify_hash_ex+0x2c>
    e502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    e504:	2b00      	cmp	r3, #0
    e506:	d102      	bne.n	e50e <wc_ecc_verify_hash_ex+0x32>
       return ECC_BAD_ARG_E;
    e508:	23aa      	movs	r3, #170	; 0xaa
    e50a:	425b      	negs	r3, r3
    e50c:	e041      	b.n	e592 <wc_ecc_verify_hash_ex+0xb6>

   /* default to invalid signature */
   *res = 0;
    e50e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    e510:	2200      	movs	r2, #0
    e512:	601a      	str	r2, [r3, #0]

   /* is the IDX valid ?  */
   if (wc_ecc_is_valid_idx(key->idx) != 1) {
    e514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    e516:	685b      	ldr	r3, [r3, #4]
    e518:	0018      	movs	r0, r3
    e51a:	f7ff fb85 	bl	dc28 <wc_ecc_is_valid_idx>
    e51e:	0003      	movs	r3, r0
    e520:	2b01      	cmp	r3, #1
    e522:	d002      	beq.n	e52a <wc_ecc_verify_hash_ex+0x4e>
      return ECC_BAD_ARG_E;
    e524:	23aa      	movs	r3, #170	; 0xaa
    e526:	425b      	negs	r3, r3
    e528:	e033      	b.n	e592 <wc_ecc_verify_hash_ex+0xb6>
   }

   keySz = key->dp->size;
    e52a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    e52c:	691b      	ldr	r3, [r3, #16]
    e52e:	681b      	ldr	r3, [r3, #0]
    e530:	657b      	str	r3, [r7, #84]	; 0x54
    }
#endif

#ifdef WOLFSSL_ATECC508A
    /* Extract R and S */
    err = mp_to_unsigned_bin(r, &sigRS[0]);
    e532:	2310      	movs	r3, #16
    e534:	18fa      	adds	r2, r7, r3
    e536:	68fb      	ldr	r3, [r7, #12]
    e538:	0011      	movs	r1, r2
    e53a:	0018      	movs	r0, r3
    e53c:	f001 fc1e 	bl	fd7c <mp_to_unsigned_bin>
    e540:	0003      	movs	r3, r0
    e542:	653b      	str	r3, [r7, #80]	; 0x50
    if (err != MP_OKAY) {
    e544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e546:	2b00      	cmp	r3, #0
    e548:	d001      	beq.n	e54e <wc_ecc_verify_hash_ex+0x72>
        return err;
    e54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e54c:	e021      	b.n	e592 <wc_ecc_verify_hash_ex+0xb6>
    }
    err = mp_to_unsigned_bin(s, &sigRS[keySz]);
    e54e:	2310      	movs	r3, #16
    e550:	18fa      	adds	r2, r7, r3
    e552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e554:	18d2      	adds	r2, r2, r3
    e556:	68bb      	ldr	r3, [r7, #8]
    e558:	0011      	movs	r1, r2
    e55a:	0018      	movs	r0, r3
    e55c:	f001 fc0e 	bl	fd7c <mp_to_unsigned_bin>
    e560:	0003      	movs	r3, r0
    e562:	653b      	str	r3, [r7, #80]	; 0x50
    if (err != MP_OKAY) {
    e564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e566:	2b00      	cmp	r3, #0
    e568:	d001      	beq.n	e56e <wc_ecc_verify_hash_ex+0x92>
        return err;
    e56a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e56c:	e011      	b.n	e592 <wc_ecc_verify_hash_ex+0xb6>
    }

    err = atmel_ecc_verify(hash, sigRS, key->pubkey_raw, res);
    e56e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    e570:	22ce      	movs	r2, #206	; 0xce
    e572:	0092      	lsls	r2, r2, #2
    e574:	189a      	adds	r2, r3, r2
    e576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    e578:	2110      	movs	r1, #16
    e57a:	1879      	adds	r1, r7, r1
    e57c:	6878      	ldr	r0, [r7, #4]
    e57e:	f002 fb03 	bl	10b88 <atmel_ecc_verify>
    e582:	0003      	movs	r3, r0
    e584:	653b      	str	r3, [r7, #80]	; 0x50
    if (err != 0) {
    e586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e588:	2b00      	cmp	r3, #0
    e58a:	d001      	beq.n	e590 <wc_ecc_verify_hash_ex+0xb4>
       return err;
    e58c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e58e:	e000      	b.n	e592 <wc_ecc_verify_hash_ex+0xb6>
#endif /* WOLFSSL_ATECC508A */

   (void)keySz;
   (void)hashlen;

   return err;
    e590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
    e592:	0018      	movs	r0, r3
    e594:	46bd      	mov	sp, r7
    e596:	b016      	add	sp, #88	; 0x58
    e598:	bd80      	pop	{r7, pc}
    e59a:	46c0      	nop			; (mov r8, r8)

0000e59c <wc_ecc_export_point_der>:

#ifdef HAVE_ECC_KEY_EXPORT
/* export point to der */
int wc_ecc_export_point_der(const int curve_idx, ecc_point* point, byte* out,
                            word32* outLen)
{
    e59c:	b590      	push	{r4, r7, lr}
    e59e:	b089      	sub	sp, #36	; 0x24
    e5a0:	af00      	add	r7, sp, #0
    e5a2:	60f8      	str	r0, [r7, #12]
    e5a4:	60b9      	str	r1, [r7, #8]
    e5a6:	607a      	str	r2, [r7, #4]
    e5a8:	603b      	str	r3, [r7, #0]
    int    ret = MP_OKAY;
    e5aa:	2300      	movs	r3, #0
    e5ac:	61fb      	str	r3, [r7, #28]
    byte*  buf;
#else
    byte   buf[ECC_BUFSIZE];
#endif

    if ((curve_idx < 0) || (wc_ecc_is_valid_idx(curve_idx) == 0))
    e5ae:	68fb      	ldr	r3, [r7, #12]
    e5b0:	2b00      	cmp	r3, #0
    e5b2:	db05      	blt.n	e5c0 <wc_ecc_export_point_der+0x24>
    e5b4:	68fb      	ldr	r3, [r7, #12]
    e5b6:	0018      	movs	r0, r3
    e5b8:	f7ff fb36 	bl	dc28 <wc_ecc_is_valid_idx>
    e5bc:	1e03      	subs	r3, r0, #0
    e5be:	d102      	bne.n	e5c6 <wc_ecc_export_point_der+0x2a>
        return ECC_BAD_ARG_E;
    e5c0:	23aa      	movs	r3, #170	; 0xaa
    e5c2:	425b      	negs	r3, r3
    e5c4:	e0a4      	b.n	e710 <wc_ecc_export_point_der+0x174>

    /* return length needed only */
    if (point != NULL && out == NULL && outLen != NULL) {
    e5c6:	68bb      	ldr	r3, [r7, #8]
    e5c8:	2b00      	cmp	r3, #0
    e5ca:	d013      	beq.n	e5f4 <wc_ecc_export_point_der+0x58>
    e5cc:	687b      	ldr	r3, [r7, #4]
    e5ce:	2b00      	cmp	r3, #0
    e5d0:	d110      	bne.n	e5f4 <wc_ecc_export_point_der+0x58>
    e5d2:	683b      	ldr	r3, [r7, #0]
    e5d4:	2b00      	cmp	r3, #0
    e5d6:	d00d      	beq.n	e5f4 <wc_ecc_export_point_der+0x58>
        numlen = ecc_sets[curve_idx].size;
    e5d8:	4b4f      	ldr	r3, [pc, #316]	; (e718 <wc_ecc_export_point_der+0x17c>)
    e5da:	68fa      	ldr	r2, [r7, #12]
    e5dc:	2134      	movs	r1, #52	; 0x34
    e5de:	434a      	muls	r2, r1
    e5e0:	58d3      	ldr	r3, [r2, r3]
    e5e2:	61bb      	str	r3, [r7, #24]
        *outLen = 1 + 2*numlen;
    e5e4:	69bb      	ldr	r3, [r7, #24]
    e5e6:	005b      	lsls	r3, r3, #1
    e5e8:	1c5a      	adds	r2, r3, #1
    e5ea:	683b      	ldr	r3, [r7, #0]
    e5ec:	601a      	str	r2, [r3, #0]
        return LENGTH_ONLY_E;
    e5ee:	23ca      	movs	r3, #202	; 0xca
    e5f0:	425b      	negs	r3, r3
    e5f2:	e08d      	b.n	e710 <wc_ecc_export_point_der+0x174>
    }

    if (point == NULL || out == NULL || outLen == NULL)
    e5f4:	68bb      	ldr	r3, [r7, #8]
    e5f6:	2b00      	cmp	r3, #0
    e5f8:	d005      	beq.n	e606 <wc_ecc_export_point_der+0x6a>
    e5fa:	687b      	ldr	r3, [r7, #4]
    e5fc:	2b00      	cmp	r3, #0
    e5fe:	d002      	beq.n	e606 <wc_ecc_export_point_der+0x6a>
    e600:	683b      	ldr	r3, [r7, #0]
    e602:	2b00      	cmp	r3, #0
    e604:	d102      	bne.n	e60c <wc_ecc_export_point_der+0x70>
        return ECC_BAD_ARG_E;
    e606:	23aa      	movs	r3, #170	; 0xaa
    e608:	425b      	negs	r3, r3
    e60a:	e081      	b.n	e710 <wc_ecc_export_point_der+0x174>

    numlen = ecc_sets[curve_idx].size;
    e60c:	4b42      	ldr	r3, [pc, #264]	; (e718 <wc_ecc_export_point_der+0x17c>)
    e60e:	68fa      	ldr	r2, [r7, #12]
    e610:	2134      	movs	r1, #52	; 0x34
    e612:	434a      	muls	r2, r1
    e614:	58d3      	ldr	r3, [r2, r3]
    e616:	61bb      	str	r3, [r7, #24]

    if (*outLen < (1 + 2*numlen)) {
    e618:	683b      	ldr	r3, [r7, #0]
    e61a:	681a      	ldr	r2, [r3, #0]
    e61c:	69bb      	ldr	r3, [r7, #24]
    e61e:	005b      	lsls	r3, r3, #1
    e620:	3301      	adds	r3, #1
    e622:	429a      	cmp	r2, r3
    e624:	d207      	bcs.n	e636 <wc_ecc_export_point_der+0x9a>
        *outLen = 1 + 2*numlen;
    e626:	69bb      	ldr	r3, [r7, #24]
    e628:	005b      	lsls	r3, r3, #1
    e62a:	1c5a      	adds	r2, r3, #1
    e62c:	683b      	ldr	r3, [r7, #0]
    e62e:	601a      	str	r2, [r3, #0]
        return BUFFER_E;
    e630:	2384      	movs	r3, #132	; 0x84
    e632:	425b      	negs	r3, r3
    e634:	e06c      	b.n	e710 <wc_ecc_export_point_der+0x174>
    }

    /* store byte point type */
    out[0] = ECC_POINT_UNCOMP;
    e636:	687b      	ldr	r3, [r7, #4]
    e638:	2204      	movs	r2, #4
    e63a:	701a      	strb	r2, [r3, #0]

#ifdef WOLFSSL_SMALL_STACK
    buf = (byte*)XMALLOC(ECC_BUFSIZE, NULL, DYNAMIC_TYPE_ECC_BUFFER);
    e63c:	2380      	movs	r3, #128	; 0x80
    e63e:	005b      	lsls	r3, r3, #1
    e640:	0018      	movs	r0, r3
    e642:	f017 f81f 	bl	25684 <malloc>
    e646:	0003      	movs	r3, r0
    e648:	617b      	str	r3, [r7, #20]
    if (buf == NULL)
    e64a:	697b      	ldr	r3, [r7, #20]
    e64c:	2b00      	cmp	r3, #0
    e64e:	d102      	bne.n	e656 <wc_ecc_export_point_der+0xba>
        return MEMORY_E;
    e650:	237d      	movs	r3, #125	; 0x7d
    e652:	425b      	negs	r3, r3
    e654:	e05c      	b.n	e710 <wc_ecc_export_point_der+0x174>
#endif

    /* pad and store x */
    XMEMSET(buf, 0, ECC_BUFSIZE);
    e656:	2380      	movs	r3, #128	; 0x80
    e658:	005a      	lsls	r2, r3, #1
    e65a:	697b      	ldr	r3, [r7, #20]
    e65c:	2100      	movs	r1, #0
    e65e:	0018      	movs	r0, r3
    e660:	f017 f863 	bl	2572a <memset>
    ret = mp_to_unsigned_bin(point->x, buf +
    e664:	68bb      	ldr	r3, [r7, #8]
    e666:	681c      	ldr	r4, [r3, #0]
                                 (numlen - mp_unsigned_bin_size(point->x)));
    e668:	68bb      	ldr	r3, [r7, #8]
    e66a:	681b      	ldr	r3, [r3, #0]
    e66c:	0018      	movs	r0, r3
    e66e:	f001 fb77 	bl	fd60 <mp_unsigned_bin_size>
    e672:	0003      	movs	r3, r0
        return MEMORY_E;
#endif

    /* pad and store x */
    XMEMSET(buf, 0, ECC_BUFSIZE);
    ret = mp_to_unsigned_bin(point->x, buf +
    e674:	001a      	movs	r2, r3
    e676:	69bb      	ldr	r3, [r7, #24]
    e678:	1a9b      	subs	r3, r3, r2
    e67a:	697a      	ldr	r2, [r7, #20]
    e67c:	18d3      	adds	r3, r2, r3
    e67e:	0019      	movs	r1, r3
    e680:	0020      	movs	r0, r4
    e682:	f001 fb7b 	bl	fd7c <mp_to_unsigned_bin>
    e686:	0003      	movs	r3, r0
    e688:	61fb      	str	r3, [r7, #28]
                                 (numlen - mp_unsigned_bin_size(point->x)));
    if (ret != MP_OKAY)
    e68a:	69fb      	ldr	r3, [r7, #28]
    e68c:	2b00      	cmp	r3, #0
    e68e:	d132      	bne.n	e6f6 <wc_ecc_export_point_der+0x15a>
        goto done;
    XMEMCPY(out+1, buf, numlen);
    e690:	687b      	ldr	r3, [r7, #4]
    e692:	3301      	adds	r3, #1
    e694:	69ba      	ldr	r2, [r7, #24]
    e696:	6979      	ldr	r1, [r7, #20]
    e698:	0018      	movs	r0, r3
    e69a:	f017 f828 	bl	256ee <memcpy>

    /* pad and store y */
    XMEMSET(buf, 0, ECC_BUFSIZE);
    e69e:	2380      	movs	r3, #128	; 0x80
    e6a0:	005a      	lsls	r2, r3, #1
    e6a2:	697b      	ldr	r3, [r7, #20]
    e6a4:	2100      	movs	r1, #0
    e6a6:	0018      	movs	r0, r3
    e6a8:	f017 f83f 	bl	2572a <memset>
    ret = mp_to_unsigned_bin(point->y, buf +
    e6ac:	68bb      	ldr	r3, [r7, #8]
    e6ae:	685c      	ldr	r4, [r3, #4]
                                 (numlen - mp_unsigned_bin_size(point->y)));
    e6b0:	68bb      	ldr	r3, [r7, #8]
    e6b2:	685b      	ldr	r3, [r3, #4]
    e6b4:	0018      	movs	r0, r3
    e6b6:	f001 fb53 	bl	fd60 <mp_unsigned_bin_size>
    e6ba:	0003      	movs	r3, r0
        goto done;
    XMEMCPY(out+1, buf, numlen);

    /* pad and store y */
    XMEMSET(buf, 0, ECC_BUFSIZE);
    ret = mp_to_unsigned_bin(point->y, buf +
    e6bc:	001a      	movs	r2, r3
    e6be:	69bb      	ldr	r3, [r7, #24]
    e6c0:	1a9b      	subs	r3, r3, r2
    e6c2:	697a      	ldr	r2, [r7, #20]
    e6c4:	18d3      	adds	r3, r2, r3
    e6c6:	0019      	movs	r1, r3
    e6c8:	0020      	movs	r0, r4
    e6ca:	f001 fb57 	bl	fd7c <mp_to_unsigned_bin>
    e6ce:	0003      	movs	r3, r0
    e6d0:	61fb      	str	r3, [r7, #28]
                                 (numlen - mp_unsigned_bin_size(point->y)));
    if (ret != MP_OKAY)
    e6d2:	69fb      	ldr	r3, [r7, #28]
    e6d4:	2b00      	cmp	r3, #0
    e6d6:	d110      	bne.n	e6fa <wc_ecc_export_point_der+0x15e>
        goto done;
    XMEMCPY(out+1+numlen, buf, numlen);
    e6d8:	69bb      	ldr	r3, [r7, #24]
    e6da:	3301      	adds	r3, #1
    e6dc:	687a      	ldr	r2, [r7, #4]
    e6de:	18d3      	adds	r3, r2, r3
    e6e0:	69ba      	ldr	r2, [r7, #24]
    e6e2:	6979      	ldr	r1, [r7, #20]
    e6e4:	0018      	movs	r0, r3
    e6e6:	f017 f802 	bl	256ee <memcpy>

    *outLen = 1 + 2*numlen;
    e6ea:	69bb      	ldr	r3, [r7, #24]
    e6ec:	005b      	lsls	r3, r3, #1
    e6ee:	1c5a      	adds	r2, r3, #1
    e6f0:	683b      	ldr	r3, [r7, #0]
    e6f2:	601a      	str	r2, [r3, #0]
    e6f4:	e002      	b.n	e6fc <wc_ecc_export_point_der+0x160>
    /* pad and store x */
    XMEMSET(buf, 0, ECC_BUFSIZE);
    ret = mp_to_unsigned_bin(point->x, buf +
                                 (numlen - mp_unsigned_bin_size(point->x)));
    if (ret != MP_OKAY)
        goto done;
    e6f6:	46c0      	nop			; (mov r8, r8)
    e6f8:	e000      	b.n	e6fc <wc_ecc_export_point_der+0x160>
    /* pad and store y */
    XMEMSET(buf, 0, ECC_BUFSIZE);
    ret = mp_to_unsigned_bin(point->y, buf +
                                 (numlen - mp_unsigned_bin_size(point->y)));
    if (ret != MP_OKAY)
        goto done;
    e6fa:	46c0      	nop			; (mov r8, r8)

    *outLen = 1 + 2*numlen;

done:
#ifdef WOLFSSL_SMALL_STACK
    XFREE(buf, NULL, DYNAMIC_TYPE_ECC_BUFFER);
    e6fc:	697b      	ldr	r3, [r7, #20]
    e6fe:	613b      	str	r3, [r7, #16]
    e700:	693b      	ldr	r3, [r7, #16]
    e702:	2b00      	cmp	r3, #0
    e704:	d003      	beq.n	e70e <wc_ecc_export_point_der+0x172>
    e706:	693b      	ldr	r3, [r7, #16]
    e708:	0018      	movs	r0, r3
    e70a:	f016 ffc5 	bl	25698 <free>
#endif

    return ret;
    e70e:	69fb      	ldr	r3, [r7, #28]
}
    e710:	0018      	movs	r0, r3
    e712:	46bd      	mov	sp, r7
    e714:	b009      	add	sp, #36	; 0x24
    e716:	bd90      	pop	{r4, r7, pc}
    e718:	0002c754 	.word	0x0002c754

0000e71c <wc_ecc_export_x963>:


/* export public ECC key in ANSI X9.63 format */
int wc_ecc_export_x963(ecc_key* key, byte* out, word32* outLen)
{
    e71c:	b580      	push	{r7, lr}
    e71e:	b08a      	sub	sp, #40	; 0x28
    e720:	af00      	add	r7, sp, #0
    e722:	60f8      	str	r0, [r7, #12]
    e724:	60b9      	str	r1, [r7, #8]
    e726:	607a      	str	r2, [r7, #4]
   int    ret = MP_OKAY;
    e728:	2300      	movs	r3, #0
    e72a:	627b      	str	r3, [r7, #36]	; 0x24
   byte   buf[ECC_BUFSIZE];
#endif
   word32 pubxlen, pubylen;

   /* return length needed only */
   if (key != NULL && out == NULL && outLen != NULL) {
    e72c:	68fb      	ldr	r3, [r7, #12]
    e72e:	2b00      	cmp	r3, #0
    e730:	d011      	beq.n	e756 <wc_ecc_export_x963+0x3a>
    e732:	68bb      	ldr	r3, [r7, #8]
    e734:	2b00      	cmp	r3, #0
    e736:	d10e      	bne.n	e756 <wc_ecc_export_x963+0x3a>
    e738:	687b      	ldr	r3, [r7, #4]
    e73a:	2b00      	cmp	r3, #0
    e73c:	d00b      	beq.n	e756 <wc_ecc_export_x963+0x3a>
      numlen = key->dp->size;
    e73e:	68fb      	ldr	r3, [r7, #12]
    e740:	691b      	ldr	r3, [r3, #16]
    e742:	681b      	ldr	r3, [r3, #0]
    e744:	623b      	str	r3, [r7, #32]
      *outLen = 1 + 2*numlen;
    e746:	6a3b      	ldr	r3, [r7, #32]
    e748:	005b      	lsls	r3, r3, #1
    e74a:	1c5a      	adds	r2, r3, #1
    e74c:	687b      	ldr	r3, [r7, #4]
    e74e:	601a      	str	r2, [r3, #0]
      return LENGTH_ONLY_E;
    e750:	23ca      	movs	r3, #202	; 0xca
    e752:	425b      	negs	r3, r3
    e754:	e0a7      	b.n	e8a6 <wc_ecc_export_x963+0x18a>
   }

   if (key == NULL || out == NULL || outLen == NULL)
    e756:	68fb      	ldr	r3, [r7, #12]
    e758:	2b00      	cmp	r3, #0
    e75a:	d005      	beq.n	e768 <wc_ecc_export_x963+0x4c>
    e75c:	68bb      	ldr	r3, [r7, #8]
    e75e:	2b00      	cmp	r3, #0
    e760:	d002      	beq.n	e768 <wc_ecc_export_x963+0x4c>
    e762:	687b      	ldr	r3, [r7, #4]
    e764:	2b00      	cmp	r3, #0
    e766:	d102      	bne.n	e76e <wc_ecc_export_x963+0x52>
      return ECC_BAD_ARG_E;
    e768:	23aa      	movs	r3, #170	; 0xaa
    e76a:	425b      	negs	r3, r3
    e76c:	e09b      	b.n	e8a6 <wc_ecc_export_x963+0x18a>

   if (key->type == ECC_PRIVATEKEY_ONLY)
    e76e:	68fb      	ldr	r3, [r7, #12]
    e770:	681b      	ldr	r3, [r3, #0]
    e772:	2b03      	cmp	r3, #3
    e774:	d102      	bne.n	e77c <wc_ecc_export_x963+0x60>
       return ECC_PRIVATEONLY_E;
    e776:	23f6      	movs	r3, #246	; 0xf6
    e778:	425b      	negs	r3, r3
    e77a:	e094      	b.n	e8a6 <wc_ecc_export_x963+0x18a>

   if (wc_ecc_is_valid_idx(key->idx) == 0) {
    e77c:	68fb      	ldr	r3, [r7, #12]
    e77e:	685b      	ldr	r3, [r3, #4]
    e780:	0018      	movs	r0, r3
    e782:	f7ff fa51 	bl	dc28 <wc_ecc_is_valid_idx>
    e786:	1e03      	subs	r3, r0, #0
    e788:	d102      	bne.n	e790 <wc_ecc_export_x963+0x74>
      return ECC_BAD_ARG_E;
    e78a:	23aa      	movs	r3, #170	; 0xaa
    e78c:	425b      	negs	r3, r3
    e78e:	e08a      	b.n	e8a6 <wc_ecc_export_x963+0x18a>
   }
   numlen = key->dp->size;
    e790:	68fb      	ldr	r3, [r7, #12]
    e792:	691b      	ldr	r3, [r3, #16]
    e794:	681b      	ldr	r3, [r3, #0]
    e796:	623b      	str	r3, [r7, #32]

    /* verify room in out buffer */
   if (*outLen < (1 + 2*numlen)) {
    e798:	687b      	ldr	r3, [r7, #4]
    e79a:	681a      	ldr	r2, [r3, #0]
    e79c:	6a3b      	ldr	r3, [r7, #32]
    e79e:	005b      	lsls	r3, r3, #1
    e7a0:	3301      	adds	r3, #1
    e7a2:	429a      	cmp	r2, r3
    e7a4:	d207      	bcs.n	e7b6 <wc_ecc_export_x963+0x9a>
      *outLen = 1 + 2*numlen;
    e7a6:	6a3b      	ldr	r3, [r7, #32]
    e7a8:	005b      	lsls	r3, r3, #1
    e7aa:	1c5a      	adds	r2, r3, #1
    e7ac:	687b      	ldr	r3, [r7, #4]
    e7ae:	601a      	str	r2, [r3, #0]
      return BUFFER_E;
    e7b0:	2384      	movs	r3, #132	; 0x84
    e7b2:	425b      	negs	r3, r3
    e7b4:	e077      	b.n	e8a6 <wc_ecc_export_x963+0x18a>
   }

   /* verify public key length is less than key size */
   pubxlen = mp_unsigned_bin_size(key->pubkey.x);
    e7b6:	68fb      	ldr	r3, [r7, #12]
    e7b8:	699b      	ldr	r3, [r3, #24]
    e7ba:	0018      	movs	r0, r3
    e7bc:	f001 fad0 	bl	fd60 <mp_unsigned_bin_size>
    e7c0:	0003      	movs	r3, r0
    e7c2:	61fb      	str	r3, [r7, #28]
   pubylen = mp_unsigned_bin_size(key->pubkey.y);
    e7c4:	68fb      	ldr	r3, [r7, #12]
    e7c6:	69db      	ldr	r3, [r3, #28]
    e7c8:	0018      	movs	r0, r3
    e7ca:	f001 fac9 	bl	fd60 <mp_unsigned_bin_size>
    e7ce:	0003      	movs	r3, r0
    e7d0:	61bb      	str	r3, [r7, #24]
   if ((pubxlen > numlen) || (pubylen > numlen)) {
    e7d2:	69fa      	ldr	r2, [r7, #28]
    e7d4:	6a3b      	ldr	r3, [r7, #32]
    e7d6:	429a      	cmp	r2, r3
    e7d8:	d803      	bhi.n	e7e2 <wc_ecc_export_x963+0xc6>
    e7da:	69ba      	ldr	r2, [r7, #24]
    e7dc:	6a3b      	ldr	r3, [r7, #32]
    e7de:	429a      	cmp	r2, r3
    e7e0:	d902      	bls.n	e7e8 <wc_ecc_export_x963+0xcc>
      WOLFSSL_MSG("Public key x/y invalid!");
      return BUFFER_E;
    e7e2:	2384      	movs	r3, #132	; 0x84
    e7e4:	425b      	negs	r3, r3
    e7e6:	e05e      	b.n	e8a6 <wc_ecc_export_x963+0x18a>
   }

   /* store byte point type */
   out[0] = ECC_POINT_UNCOMP;
    e7e8:	68bb      	ldr	r3, [r7, #8]
    e7ea:	2204      	movs	r2, #4
    e7ec:	701a      	strb	r2, [r3, #0]

#ifdef WOLFSSL_SMALL_STACK
   buf = (byte*)XMALLOC(ECC_BUFSIZE, NULL, DYNAMIC_TYPE_ECC_BUFFER);
    e7ee:	2380      	movs	r3, #128	; 0x80
    e7f0:	005b      	lsls	r3, r3, #1
    e7f2:	0018      	movs	r0, r3
    e7f4:	f016 ff46 	bl	25684 <malloc>
    e7f8:	0003      	movs	r3, r0
    e7fa:	617b      	str	r3, [r7, #20]
   if (buf == NULL)
    e7fc:	697b      	ldr	r3, [r7, #20]
    e7fe:	2b00      	cmp	r3, #0
    e800:	d102      	bne.n	e808 <wc_ecc_export_x963+0xec>
      return MEMORY_E;
    e802:	237d      	movs	r3, #125	; 0x7d
    e804:	425b      	negs	r3, r3
    e806:	e04e      	b.n	e8a6 <wc_ecc_export_x963+0x18a>
#endif

   /* pad and store x */
   XMEMSET(buf, 0, ECC_BUFSIZE);
    e808:	2380      	movs	r3, #128	; 0x80
    e80a:	005a      	lsls	r2, r3, #1
    e80c:	697b      	ldr	r3, [r7, #20]
    e80e:	2100      	movs	r1, #0
    e810:	0018      	movs	r0, r3
    e812:	f016 ff8a 	bl	2572a <memset>
   ret = mp_to_unsigned_bin(key->pubkey.x, buf + (numlen - pubxlen));
    e816:	68fb      	ldr	r3, [r7, #12]
    e818:	6998      	ldr	r0, [r3, #24]
    e81a:	6a3a      	ldr	r2, [r7, #32]
    e81c:	69fb      	ldr	r3, [r7, #28]
    e81e:	1ad3      	subs	r3, r2, r3
    e820:	697a      	ldr	r2, [r7, #20]
    e822:	18d3      	adds	r3, r2, r3
    e824:	0019      	movs	r1, r3
    e826:	f001 faa9 	bl	fd7c <mp_to_unsigned_bin>
    e82a:	0003      	movs	r3, r0
    e82c:	627b      	str	r3, [r7, #36]	; 0x24
   if (ret != MP_OKAY)
    e82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e830:	2b00      	cmp	r3, #0
    e832:	d12b      	bne.n	e88c <wc_ecc_export_x963+0x170>
      goto done;
   XMEMCPY(out+1, buf, numlen);
    e834:	68bb      	ldr	r3, [r7, #8]
    e836:	3301      	adds	r3, #1
    e838:	6a3a      	ldr	r2, [r7, #32]
    e83a:	6979      	ldr	r1, [r7, #20]
    e83c:	0018      	movs	r0, r3
    e83e:	f016 ff56 	bl	256ee <memcpy>

   /* pad and store y */
   XMEMSET(buf, 0, ECC_BUFSIZE);
    e842:	2380      	movs	r3, #128	; 0x80
    e844:	005a      	lsls	r2, r3, #1
    e846:	697b      	ldr	r3, [r7, #20]
    e848:	2100      	movs	r1, #0
    e84a:	0018      	movs	r0, r3
    e84c:	f016 ff6d 	bl	2572a <memset>
   ret = mp_to_unsigned_bin(key->pubkey.y, buf + (numlen - pubylen));
    e850:	68fb      	ldr	r3, [r7, #12]
    e852:	69d8      	ldr	r0, [r3, #28]
    e854:	6a3a      	ldr	r2, [r7, #32]
    e856:	69bb      	ldr	r3, [r7, #24]
    e858:	1ad3      	subs	r3, r2, r3
    e85a:	697a      	ldr	r2, [r7, #20]
    e85c:	18d3      	adds	r3, r2, r3
    e85e:	0019      	movs	r1, r3
    e860:	f001 fa8c 	bl	fd7c <mp_to_unsigned_bin>
    e864:	0003      	movs	r3, r0
    e866:	627b      	str	r3, [r7, #36]	; 0x24
   if (ret != MP_OKAY)
    e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e86a:	2b00      	cmp	r3, #0
    e86c:	d110      	bne.n	e890 <wc_ecc_export_x963+0x174>
      goto done;
   XMEMCPY(out+1+numlen, buf, numlen);
    e86e:	6a3b      	ldr	r3, [r7, #32]
    e870:	3301      	adds	r3, #1
    e872:	68ba      	ldr	r2, [r7, #8]
    e874:	18d3      	adds	r3, r2, r3
    e876:	6a3a      	ldr	r2, [r7, #32]
    e878:	6979      	ldr	r1, [r7, #20]
    e87a:	0018      	movs	r0, r3
    e87c:	f016 ff37 	bl	256ee <memcpy>

   *outLen = 1 + 2*numlen;
    e880:	6a3b      	ldr	r3, [r7, #32]
    e882:	005b      	lsls	r3, r3, #1
    e884:	1c5a      	adds	r2, r3, #1
    e886:	687b      	ldr	r3, [r7, #4]
    e888:	601a      	str	r2, [r3, #0]
    e88a:	e002      	b.n	e892 <wc_ecc_export_x963+0x176>

   /* pad and store x */
   XMEMSET(buf, 0, ECC_BUFSIZE);
   ret = mp_to_unsigned_bin(key->pubkey.x, buf + (numlen - pubxlen));
   if (ret != MP_OKAY)
      goto done;
    e88c:	46c0      	nop			; (mov r8, r8)
    e88e:	e000      	b.n	e892 <wc_ecc_export_x963+0x176>

   /* pad and store y */
   XMEMSET(buf, 0, ECC_BUFSIZE);
   ret = mp_to_unsigned_bin(key->pubkey.y, buf + (numlen - pubylen));
   if (ret != MP_OKAY)
      goto done;
    e890:	46c0      	nop			; (mov r8, r8)

   *outLen = 1 + 2*numlen;

done:
#ifdef WOLFSSL_SMALL_STACK
   XFREE(buf, NULL, DYNAMIC_TYPE_ECC_BUFFER);
    e892:	697b      	ldr	r3, [r7, #20]
    e894:	613b      	str	r3, [r7, #16]
    e896:	693b      	ldr	r3, [r7, #16]
    e898:	2b00      	cmp	r3, #0
    e89a:	d003      	beq.n	e8a4 <wc_ecc_export_x963+0x188>
    e89c:	693b      	ldr	r3, [r7, #16]
    e89e:	0018      	movs	r0, r3
    e8a0:	f016 fefa 	bl	25698 <free>
#endif

   return ret;
    e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    e8a6:	0018      	movs	r0, r3
    e8a8:	46bd      	mov	sp, r7
    e8aa:	b00a      	add	sp, #40	; 0x28
    e8ac:	bd80      	pop	{r7, pc}
    e8ae:	46c0      	nop			; (mov r8, r8)

0000e8b0 <wc_ecc_export_x963_ex>:

/* export public ECC key in ANSI X9.63 format, extended with
 * compression option */
int wc_ecc_export_x963_ex(ecc_key* key, byte* out, word32* outLen,
                          int compressed)
{
    e8b0:	b580      	push	{r7, lr}
    e8b2:	b084      	sub	sp, #16
    e8b4:	af00      	add	r7, sp, #0
    e8b6:	60f8      	str	r0, [r7, #12]
    e8b8:	60b9      	str	r1, [r7, #8]
    e8ba:	607a      	str	r2, [r7, #4]
    e8bc:	603b      	str	r3, [r7, #0]
    if (compressed == 0)
    e8be:	683b      	ldr	r3, [r7, #0]
    e8c0:	2b00      	cmp	r3, #0
    e8c2:	d107      	bne.n	e8d4 <wc_ecc_export_x963_ex+0x24>
        return wc_ecc_export_x963(key, out, outLen);
    e8c4:	687a      	ldr	r2, [r7, #4]
    e8c6:	68b9      	ldr	r1, [r7, #8]
    e8c8:	68fb      	ldr	r3, [r7, #12]
    e8ca:	0018      	movs	r0, r3
    e8cc:	f7ff ff26 	bl	e71c <wc_ecc_export_x963>
    e8d0:	0003      	movs	r3, r0
    e8d2:	e001      	b.n	e8d8 <wc_ecc_export_x963_ex+0x28>
#ifdef HAVE_COMP_KEY
    else
        return wc_ecc_export_x963_compressed(key, out, outLen);
#else
    return NOT_COMPILED_IN;
    e8d4:	23ae      	movs	r3, #174	; 0xae
    e8d6:	425b      	negs	r3, r3
#endif
}
    e8d8:	0018      	movs	r0, r3
    e8da:	46bd      	mov	sp, r7
    e8dc:	b004      	add	sp, #16
    e8de:	bd80      	pop	{r7, pc}

0000e8e0 <wc_ecc_check_key>:
#endif /* !WOLFSSL_ATECC508A */


/* perform sanity checks on ecc key validity, 0 on success */
int wc_ecc_check_key(ecc_key* key)
{
    e8e0:	b580      	push	{r7, lr}
    e8e2:	b084      	sub	sp, #16
    e8e4:	af00      	add	r7, sp, #0
    e8e6:	6078      	str	r0, [r7, #4]
#endif
    DECLARE_CURVE_SPECS(curve, 3);
#endif /* USE_ECC_B_PARAM */
#endif /* WOLFSSL_ATECC508A */

    if (key == NULL)
    e8e8:	687b      	ldr	r3, [r7, #4]
    e8ea:	2b00      	cmp	r3, #0
    e8ec:	d102      	bne.n	e8f4 <wc_ecc_check_key+0x14>
        return BAD_FUNC_ARG;
    e8ee:	23ad      	movs	r3, #173	; 0xad
    e8f0:	425b      	negs	r3, r3
    e8f2:	e002      	b.n	e8fa <wc_ecc_check_key+0x1a>

#ifdef WOLFSSL_ATECC508A

    err = 0; /* consider key check success on ATECC508A */
    e8f4:	2300      	movs	r3, #0
    e8f6:	60fb      	str	r3, [r7, #12]
    }
    else
        err = WC_KEY_SIZE_E;
#endif

    return err;
    e8f8:	68fb      	ldr	r3, [r7, #12]
}
    e8fa:	0018      	movs	r0, r3
    e8fc:	46bd      	mov	sp, r7
    e8fe:	b004      	add	sp, #16
    e900:	bd80      	pop	{r7, pc}
    e902:	46c0      	nop			; (mov r8, r8)

0000e904 <wc_ecc_import_x963_ex>:

#ifdef HAVE_ECC_KEY_IMPORT
/* import public ECC key in ANSI X9.63 format */
int wc_ecc_import_x963_ex(const byte* in, word32 inLen, ecc_key* key,
                          int curve_id)
{
    e904:	b580      	push	{r7, lr}
    e906:	b088      	sub	sp, #32
    e908:	af00      	add	r7, sp, #0
    e90a:	60f8      	str	r0, [r7, #12]
    e90c:	60b9      	str	r1, [r7, #8]
    e90e:	607a      	str	r2, [r7, #4]
    e910:	603b      	str	r3, [r7, #0]
    int err = MP_OKAY;
    e912:	2300      	movs	r3, #0
    e914:	61fb      	str	r3, [r7, #28]
    int compressed = 0;
    e916:	2300      	movs	r3, #0
    e918:	617b      	str	r3, [r7, #20]
    int keysize = 0;
    e91a:	2300      	movs	r3, #0
    e91c:	61bb      	str	r3, [r7, #24]
    byte pointType;

    if (in == NULL || key == NULL)
    e91e:	68fb      	ldr	r3, [r7, #12]
    e920:	2b00      	cmp	r3, #0
    e922:	d002      	beq.n	e92a <wc_ecc_import_x963_ex+0x26>
    e924:	687b      	ldr	r3, [r7, #4]
    e926:	2b00      	cmp	r3, #0
    e928:	d102      	bne.n	e930 <wc_ecc_import_x963_ex+0x2c>
        return BAD_FUNC_ARG;
    e92a:	23ad      	movs	r3, #173	; 0xad
    e92c:	425b      	negs	r3, r3
    e92e:	e0c5      	b.n	eabc <wc_ecc_import_x963_ex+0x1b8>

    /* must be odd */
    if ((inLen & 1) == 0) {
    e930:	68bb      	ldr	r3, [r7, #8]
    e932:	2201      	movs	r2, #1
    e934:	4013      	ands	r3, r2
    e936:	d102      	bne.n	e93e <wc_ecc_import_x963_ex+0x3a>
        return ECC_BAD_ARG_E;
    e938:	23aa      	movs	r3, #170	; 0xaa
    e93a:	425b      	negs	r3, r3
    e93c:	e0be      	b.n	eabc <wc_ecc_import_x963_ex+0x1b8>
    }

    /* make sure required variables are reset */
    wc_ecc_reset(key);
    e93e:	687b      	ldr	r3, [r7, #4]
    e940:	0018      	movs	r0, r3
    e942:	f7ff fa57 	bl	ddf4 <wc_ecc_reset>

    /* init key */
    #ifdef ALT_ECC_SIZE
        key->pubkey.x = (mp_int*)&key->pubkey.xyz[0];
    e946:	687b      	ldr	r3, [r7, #4]
    e948:	3324      	adds	r3, #36	; 0x24
    e94a:	001a      	movs	r2, r3
    e94c:	687b      	ldr	r3, [r7, #4]
    e94e:	619a      	str	r2, [r3, #24]
        key->pubkey.y = (mp_int*)&key->pubkey.xyz[1];
    e950:	687b      	ldr	r3, [r7, #4]
    e952:	3370      	adds	r3, #112	; 0x70
    e954:	001a      	movs	r2, r3
    e956:	687b      	ldr	r3, [r7, #4]
    e958:	61da      	str	r2, [r3, #28]
        key->pubkey.z = (mp_int*)&key->pubkey.xyz[2];
    e95a:	687b      	ldr	r3, [r7, #4]
    e95c:	33bc      	adds	r3, #188	; 0xbc
    e95e:	001a      	movs	r2, r3
    e960:	687b      	ldr	r3, [r7, #4]
    e962:	621a      	str	r2, [r3, #32]
        alt_fp_init(key->pubkey.x);
    e964:	687b      	ldr	r3, [r7, #4]
    e966:	699b      	ldr	r3, [r3, #24]
    e968:	0018      	movs	r0, r3
    e96a:	f7ff f8f1 	bl	db50 <alt_fp_init>
        alt_fp_init(key->pubkey.y);
    e96e:	687b      	ldr	r3, [r7, #4]
    e970:	69db      	ldr	r3, [r3, #28]
    e972:	0018      	movs	r0, r3
    e974:	f7ff f8ec 	bl	db50 <alt_fp_init>
        alt_fp_init(key->pubkey.z);
    e978:	687b      	ldr	r3, [r7, #4]
    e97a:	6a1b      	ldr	r3, [r3, #32]
    e97c:	0018      	movs	r0, r3
    e97e:	f7ff f8e7 	bl	db50 <alt_fp_init>
        err = mp_init(&key->k);
    e982:	687b      	ldr	r3, [r7, #4]
    e984:	3309      	adds	r3, #9
    e986:	33ff      	adds	r3, #255	; 0xff
    e988:	0018      	movs	r0, r3
    e98a:	f001 f93f 	bl	fc0c <mp_init>
    e98e:	0003      	movs	r3, r0
    e990:	61fb      	str	r3, [r7, #28]
    #else
        err = mp_init_multi(&key->k,
                    key->pubkey.x, key->pubkey.y, key->pubkey.z, NULL, NULL);
    #endif
    if (err != MP_OKAY)
    e992:	69fb      	ldr	r3, [r7, #28]
    e994:	2b00      	cmp	r3, #0
    e996:	d002      	beq.n	e99e <wc_ecc_import_x963_ex+0x9a>
        return MEMORY_E;
    e998:	237d      	movs	r3, #125	; 0x7d
    e99a:	425b      	negs	r3, r3
    e99c:	e08e      	b.n	eabc <wc_ecc_import_x963_ex+0x1b8>

    /* check for point type (4, 2, or 3) */
    pointType = in[0];
    e99e:	2313      	movs	r3, #19
    e9a0:	18fb      	adds	r3, r7, r3
    e9a2:	68fa      	ldr	r2, [r7, #12]
    e9a4:	7812      	ldrb	r2, [r2, #0]
    e9a6:	701a      	strb	r2, [r3, #0]
    if (pointType != ECC_POINT_UNCOMP && pointType != ECC_POINT_COMP_EVEN &&
    e9a8:	2313      	movs	r3, #19
    e9aa:	18fb      	adds	r3, r7, r3
    e9ac:	781b      	ldrb	r3, [r3, #0]
    e9ae:	2b04      	cmp	r3, #4
    e9b0:	d00c      	beq.n	e9cc <wc_ecc_import_x963_ex+0xc8>
    e9b2:	2313      	movs	r3, #19
    e9b4:	18fb      	adds	r3, r7, r3
    e9b6:	781b      	ldrb	r3, [r3, #0]
    e9b8:	2b02      	cmp	r3, #2
    e9ba:	d007      	beq.n	e9cc <wc_ecc_import_x963_ex+0xc8>
    e9bc:	2313      	movs	r3, #19
    e9be:	18fb      	adds	r3, r7, r3
    e9c0:	781b      	ldrb	r3, [r3, #0]
    e9c2:	2b03      	cmp	r3, #3
    e9c4:	d002      	beq.n	e9cc <wc_ecc_import_x963_ex+0xc8>
                                         pointType != ECC_POINT_COMP_ODD) {
        err = ASN_PARSE_E;
    e9c6:	238c      	movs	r3, #140	; 0x8c
    e9c8:	425b      	negs	r3, r3
    e9ca:	61fb      	str	r3, [r7, #28]
    }

    if (pointType == ECC_POINT_COMP_EVEN || pointType == ECC_POINT_COMP_ODD) {
    e9cc:	2313      	movs	r3, #19
    e9ce:	18fb      	adds	r3, r7, r3
    e9d0:	781b      	ldrb	r3, [r3, #0]
    e9d2:	2b02      	cmp	r3, #2
    e9d4:	d004      	beq.n	e9e0 <wc_ecc_import_x963_ex+0xdc>
    e9d6:	2313      	movs	r3, #19
    e9d8:	18fb      	adds	r3, r7, r3
    e9da:	781b      	ldrb	r3, [r3, #0]
    e9dc:	2b03      	cmp	r3, #3
    e9de:	d102      	bne.n	e9e6 <wc_ecc_import_x963_ex+0xe2>
    #ifdef HAVE_COMP_KEY
        compressed = 1;
    #else
        err = NOT_COMPILED_IN;
    e9e0:	23ae      	movs	r3, #174	; 0xae
    e9e2:	425b      	negs	r3, r3
    e9e4:	61fb      	str	r3, [r7, #28]
    #endif
    }

    /* adjust to skip first byte */
    inLen -= 1;
    e9e6:	68bb      	ldr	r3, [r7, #8]
    e9e8:	3b01      	subs	r3, #1
    e9ea:	60bb      	str	r3, [r7, #8]
    in += 1;
    e9ec:	68fb      	ldr	r3, [r7, #12]
    e9ee:	3301      	adds	r3, #1
    e9f0:	60fb      	str	r3, [r7, #12]

#ifdef WOLFSSL_ATECC508A
    /* For SECP256R1 only save raw public key for hardware */
    if (curve_id == ECC_SECP256R1 && !compressed &&
    e9f2:	683b      	ldr	r3, [r7, #0]
    e9f4:	2b07      	cmp	r3, #7
    e9f6:	d10f      	bne.n	ea18 <wc_ecc_import_x963_ex+0x114>
    e9f8:	697b      	ldr	r3, [r7, #20]
    e9fa:	2b00      	cmp	r3, #0
    e9fc:	d10c      	bne.n	ea18 <wc_ecc_import_x963_ex+0x114>
    e9fe:	68bb      	ldr	r3, [r7, #8]
    ea00:	2b40      	cmp	r3, #64	; 0x40
    ea02:	d809      	bhi.n	ea18 <wc_ecc_import_x963_ex+0x114>
                                            inLen <= sizeof(key->pubkey_raw)) {
        XMEMCPY(key->pubkey_raw, (byte*)in, inLen);
    ea04:	687b      	ldr	r3, [r7, #4]
    ea06:	22ce      	movs	r2, #206	; 0xce
    ea08:	0092      	lsls	r2, r2, #2
    ea0a:	4694      	mov	ip, r2
    ea0c:	4463      	add	r3, ip
    ea0e:	68ba      	ldr	r2, [r7, #8]
    ea10:	68f9      	ldr	r1, [r7, #12]
    ea12:	0018      	movs	r0, r3
    ea14:	f016 fe6b 	bl	256ee <memcpy>
    }
#endif

    if (err == MP_OKAY) {
    ea18:	69fb      	ldr	r3, [r7, #28]
    ea1a:	2b00      	cmp	r3, #0
    ea1c:	d10d      	bne.n	ea3a <wc_ecc_import_x963_ex+0x136>
        if (compressed)
            inLen = inLen*2 + 1;  /* used uncompressed len */
    #endif

        /* determine key size */
        keysize = (inLen>>1);
    ea1e:	68bb      	ldr	r3, [r7, #8]
    ea20:	085b      	lsrs	r3, r3, #1
    ea22:	61bb      	str	r3, [r7, #24]
        err = wc_ecc_set_curve(key, keysize, curve_id);
    ea24:	683a      	ldr	r2, [r7, #0]
    ea26:	69b9      	ldr	r1, [r7, #24]
    ea28:	687b      	ldr	r3, [r7, #4]
    ea2a:	0018      	movs	r0, r3
    ea2c:	f7ff f830 	bl	da90 <wc_ecc_set_curve>
    ea30:	0003      	movs	r3, r0
    ea32:	61fb      	str	r3, [r7, #28]
        key->type = ECC_PUBLICKEY;
    ea34:	687b      	ldr	r3, [r7, #4]
    ea36:	2201      	movs	r2, #1
    ea38:	601a      	str	r2, [r3, #0]
    }

    /* read data */
    if (err == MP_OKAY)
    ea3a:	69fb      	ldr	r3, [r7, #28]
    ea3c:	2b00      	cmp	r3, #0
    ea3e:	d108      	bne.n	ea52 <wc_ecc_import_x963_ex+0x14e>
        err = mp_read_unsigned_bin(key->pubkey.x, (byte*)in, keysize);
    ea40:	687b      	ldr	r3, [r7, #4]
    ea42:	699b      	ldr	r3, [r3, #24]
    ea44:	69ba      	ldr	r2, [r7, #24]
    ea46:	68f9      	ldr	r1, [r7, #12]
    ea48:	0018      	movs	r0, r3
    ea4a:	f001 f9a7 	bl	fd9c <mp_read_unsigned_bin>
    ea4e:	0003      	movs	r3, r0
    ea50:	61fb      	str	r3, [r7, #28]
        sp_ecc_uncompress_256(key->pubkey.x, pointType, key->pubkey.y);
#endif
    }
#endif /* HAVE_COMP_KEY */

    if (err == MP_OKAY && compressed == 0)
    ea52:	69fb      	ldr	r3, [r7, #28]
    ea54:	2b00      	cmp	r3, #0
    ea56:	d10d      	bne.n	ea74 <wc_ecc_import_x963_ex+0x170>
    ea58:	697b      	ldr	r3, [r7, #20]
    ea5a:	2b00      	cmp	r3, #0
    ea5c:	d10a      	bne.n	ea74 <wc_ecc_import_x963_ex+0x170>
        err = mp_read_unsigned_bin(key->pubkey.y, (byte*)in + keysize, keysize);
    ea5e:	687b      	ldr	r3, [r7, #4]
    ea60:	69d8      	ldr	r0, [r3, #28]
    ea62:	69bb      	ldr	r3, [r7, #24]
    ea64:	68fa      	ldr	r2, [r7, #12]
    ea66:	18d3      	adds	r3, r2, r3
    ea68:	69ba      	ldr	r2, [r7, #24]
    ea6a:	0019      	movs	r1, r3
    ea6c:	f001 f996 	bl	fd9c <mp_read_unsigned_bin>
    ea70:	0003      	movs	r3, r0
    ea72:	61fb      	str	r3, [r7, #28]
    if (err == MP_OKAY)
    ea74:	69fb      	ldr	r3, [r7, #28]
    ea76:	2b00      	cmp	r3, #0
    ea78:	d107      	bne.n	ea8a <wc_ecc_import_x963_ex+0x186>
        err = mp_set(key->pubkey.z, 1);
    ea7a:	687b      	ldr	r3, [r7, #4]
    ea7c:	6a1b      	ldr	r3, [r3, #32]
    ea7e:	2101      	movs	r1, #1
    ea80:	0018      	movs	r0, r3
    ea82:	f001 fd01 	bl	10488 <mp_set>
    ea86:	0003      	movs	r3, r0
    ea88:	61fb      	str	r3, [r7, #28]
#ifdef WOLFSSL_VALIDATE_ECC_IMPORT
    if (err == MP_OKAY)
        err = wc_ecc_check_key(key);
#endif

    if (err != MP_OKAY) {
    ea8a:	69fb      	ldr	r3, [r7, #28]
    ea8c:	2b00      	cmp	r3, #0
    ea8e:	d014      	beq.n	eaba <wc_ecc_import_x963_ex+0x1b6>
        mp_clear(key->pubkey.x);
    ea90:	687b      	ldr	r3, [r7, #4]
    ea92:	699b      	ldr	r3, [r3, #24]
    ea94:	0018      	movs	r0, r3
    ea96:	f001 f91d 	bl	fcd4 <mp_clear>
        mp_clear(key->pubkey.y);
    ea9a:	687b      	ldr	r3, [r7, #4]
    ea9c:	69db      	ldr	r3, [r3, #28]
    ea9e:	0018      	movs	r0, r3
    eaa0:	f001 f918 	bl	fcd4 <mp_clear>
        mp_clear(key->pubkey.z);
    eaa4:	687b      	ldr	r3, [r7, #4]
    eaa6:	6a1b      	ldr	r3, [r3, #32]
    eaa8:	0018      	movs	r0, r3
    eaaa:	f001 f913 	bl	fcd4 <mp_clear>
        mp_clear(&key->k);
    eaae:	687b      	ldr	r3, [r7, #4]
    eab0:	3309      	adds	r3, #9
    eab2:	33ff      	adds	r3, #255	; 0xff
    eab4:	0018      	movs	r0, r3
    eab6:	f001 f90d 	bl	fcd4 <mp_clear>
    }

    return err;
    eaba:	69fb      	ldr	r3, [r7, #28]
}
    eabc:	0018      	movs	r0, r3
    eabe:	46bd      	mov	sp, r7
    eac0:	b008      	add	sp, #32
    eac2:	bd80      	pop	{r7, pc}

0000eac4 <wc_ecc_export_ex>:
/* export ecc key to component form, d is optional if only exporting public
 * encType is WC_TYPE_UNSIGNED_BIN or WC_TYPE_HEX_STR
 * return MP_OKAY on success */
int wc_ecc_export_ex(ecc_key* key, byte* qx, word32* qxLen,
                 byte* qy, word32* qyLen, byte* d, word32* dLen, int encType)
{
    eac4:	b590      	push	{r4, r7, lr}
    eac6:	b089      	sub	sp, #36	; 0x24
    eac8:	af02      	add	r7, sp, #8
    eaca:	60f8      	str	r0, [r7, #12]
    eacc:	60b9      	str	r1, [r7, #8]
    eace:	607a      	str	r2, [r7, #4]
    ead0:	603b      	str	r3, [r7, #0]
    int err = 0;
    ead2:	2300      	movs	r3, #0
    ead4:	617b      	str	r3, [r7, #20]
    word32 keySz;

    if (key == NULL) {
    ead6:	68fb      	ldr	r3, [r7, #12]
    ead8:	2b00      	cmp	r3, #0
    eada:	d102      	bne.n	eae2 <wc_ecc_export_ex+0x1e>
        return BAD_FUNC_ARG;
    eadc:	23ad      	movs	r3, #173	; 0xad
    eade:	425b      	negs	r3, r3
    eae0:	e05e      	b.n	eba0 <wc_ecc_export_ex+0xdc>
    }

    if (wc_ecc_is_valid_idx(key->idx) == 0) {
    eae2:	68fb      	ldr	r3, [r7, #12]
    eae4:	685b      	ldr	r3, [r3, #4]
    eae6:	0018      	movs	r0, r3
    eae8:	f7ff f89e 	bl	dc28 <wc_ecc_is_valid_idx>
    eaec:	1e03      	subs	r3, r0, #0
    eaee:	d102      	bne.n	eaf6 <wc_ecc_export_ex+0x32>
        return ECC_BAD_ARG_E;
    eaf0:	23aa      	movs	r3, #170	; 0xaa
    eaf2:	425b      	negs	r3, r3
    eaf4:	e054      	b.n	eba0 <wc_ecc_export_ex+0xdc>
    }
    keySz = key->dp->size;
    eaf6:	68fb      	ldr	r3, [r7, #12]
    eaf8:	691b      	ldr	r3, [r3, #16]
    eafa:	681b      	ldr	r3, [r3, #0]
    eafc:	613b      	str	r3, [r7, #16]

    /* private key, d */
    if (d != NULL) {
    eafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb00:	2b00      	cmp	r3, #0
    eb02:	d010      	beq.n	eb26 <wc_ecc_export_ex+0x62>
        if (dLen == NULL ||
    eb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    eb06:	2b00      	cmp	r3, #0
    eb08:	d007      	beq.n	eb1a <wc_ecc_export_ex+0x56>
            (key->type != ECC_PRIVATEKEY && key->type != ECC_PRIVATEKEY_ONLY))
    eb0a:	68fb      	ldr	r3, [r7, #12]
    eb0c:	681b      	ldr	r3, [r3, #0]
    }
    keySz = key->dp->size;

    /* private key, d */
    if (d != NULL) {
        if (dLen == NULL ||
    eb0e:	2b02      	cmp	r3, #2
    eb10:	d006      	beq.n	eb20 <wc_ecc_export_ex+0x5c>
            (key->type != ECC_PRIVATEKEY && key->type != ECC_PRIVATEKEY_ONLY))
    eb12:	68fb      	ldr	r3, [r7, #12]
    eb14:	681b      	ldr	r3, [r3, #0]
    eb16:	2b03      	cmp	r3, #3
    eb18:	d002      	beq.n	eb20 <wc_ecc_export_ex+0x5c>
            return BAD_FUNC_ARG;
    eb1a:	23ad      	movs	r3, #173	; 0xad
    eb1c:	425b      	negs	r3, r3
    eb1e:	e03f      	b.n	eba0 <wc_ecc_export_ex+0xdc>

    #ifdef WOLFSSL_ATECC508A
        /* Hardware cannot export private portion */
        return NOT_COMPILED_IN;
    eb20:	23ae      	movs	r3, #174	; 0xae
    eb22:	425b      	negs	r3, r3
    eb24:	e03c      	b.n	eba0 <wc_ecc_export_ex+0xdc>
            return err;
    #endif
    }

    /* public x component */
    if (qx != NULL) {
    eb26:	68bb      	ldr	r3, [r7, #8]
    eb28:	2b00      	cmp	r3, #0
    eb2a:	d01a      	beq.n	eb62 <wc_ecc_export_ex+0x9e>
        if (qxLen == NULL || key->type == ECC_PRIVATEKEY_ONLY)
    eb2c:	687b      	ldr	r3, [r7, #4]
    eb2e:	2b00      	cmp	r3, #0
    eb30:	d003      	beq.n	eb3a <wc_ecc_export_ex+0x76>
    eb32:	68fb      	ldr	r3, [r7, #12]
    eb34:	681b      	ldr	r3, [r3, #0]
    eb36:	2b03      	cmp	r3, #3
    eb38:	d102      	bne.n	eb40 <wc_ecc_export_ex+0x7c>
            return BAD_FUNC_ARG;
    eb3a:	23ad      	movs	r3, #173	; 0xad
    eb3c:	425b      	negs	r3, r3
    eb3e:	e02f      	b.n	eba0 <wc_ecc_export_ex+0xdc>

        err = wc_export_int(key->pubkey.x, qx, qxLen, keySz, encType);
    eb40:	68fb      	ldr	r3, [r7, #12]
    eb42:	6998      	ldr	r0, [r3, #24]
    eb44:	693c      	ldr	r4, [r7, #16]
    eb46:	687a      	ldr	r2, [r7, #4]
    eb48:	68b9      	ldr	r1, [r7, #8]
    eb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eb4c:	9300      	str	r3, [sp, #0]
    eb4e:	0023      	movs	r3, r4
    eb50:	f001 fd36 	bl	105c0 <wc_export_int>
    eb54:	0003      	movs	r3, r0
    eb56:	617b      	str	r3, [r7, #20]
        if (err != MP_OKAY)
    eb58:	697b      	ldr	r3, [r7, #20]
    eb5a:	2b00      	cmp	r3, #0
    eb5c:	d001      	beq.n	eb62 <wc_ecc_export_ex+0x9e>
            return err;
    eb5e:	697b      	ldr	r3, [r7, #20]
    eb60:	e01e      	b.n	eba0 <wc_ecc_export_ex+0xdc>
    }

    /* public y component */
    if (qy != NULL) {
    eb62:	683b      	ldr	r3, [r7, #0]
    eb64:	2b00      	cmp	r3, #0
    eb66:	d01a      	beq.n	eb9e <wc_ecc_export_ex+0xda>
        if (qyLen == NULL || key->type == ECC_PRIVATEKEY_ONLY)
    eb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eb6a:	2b00      	cmp	r3, #0
    eb6c:	d003      	beq.n	eb76 <wc_ecc_export_ex+0xb2>
    eb6e:	68fb      	ldr	r3, [r7, #12]
    eb70:	681b      	ldr	r3, [r3, #0]
    eb72:	2b03      	cmp	r3, #3
    eb74:	d102      	bne.n	eb7c <wc_ecc_export_ex+0xb8>
            return BAD_FUNC_ARG;
    eb76:	23ad      	movs	r3, #173	; 0xad
    eb78:	425b      	negs	r3, r3
    eb7a:	e011      	b.n	eba0 <wc_ecc_export_ex+0xdc>

        err = wc_export_int(key->pubkey.y, qy, qyLen, keySz, encType);
    eb7c:	68fb      	ldr	r3, [r7, #12]
    eb7e:	69d8      	ldr	r0, [r3, #28]
    eb80:	693c      	ldr	r4, [r7, #16]
    eb82:	6aba      	ldr	r2, [r7, #40]	; 0x28
    eb84:	6839      	ldr	r1, [r7, #0]
    eb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eb88:	9300      	str	r3, [sp, #0]
    eb8a:	0023      	movs	r3, r4
    eb8c:	f001 fd18 	bl	105c0 <wc_export_int>
    eb90:	0003      	movs	r3, r0
    eb92:	617b      	str	r3, [r7, #20]
        if (err != MP_OKAY)
    eb94:	697b      	ldr	r3, [r7, #20]
    eb96:	2b00      	cmp	r3, #0
    eb98:	d001      	beq.n	eb9e <wc_ecc_export_ex+0xda>
            return err;
    eb9a:	697b      	ldr	r3, [r7, #20]
    eb9c:	e000      	b.n	eba0 <wc_ecc_export_ex+0xdc>
    }

    return err;
    eb9e:	697b      	ldr	r3, [r7, #20]
}
    eba0:	0018      	movs	r0, r3
    eba2:	46bd      	mov	sp, r7
    eba4:	b007      	add	sp, #28
    eba6:	bd90      	pop	{r4, r7, pc}

0000eba8 <wc_ecc_export_private_only>:


/* export ecc private key only raw, outLen is in/out size as unsigned bin
   return MP_OKAY on success */
int wc_ecc_export_private_only(ecc_key* key, byte* out, word32* outLen)
{
    eba8:	b580      	push	{r7, lr}
    ebaa:	b088      	sub	sp, #32
    ebac:	af04      	add	r7, sp, #16
    ebae:	60f8      	str	r0, [r7, #12]
    ebb0:	60b9      	str	r1, [r7, #8]
    ebb2:	607a      	str	r2, [r7, #4]
    if (out == NULL || outLen == NULL) {
    ebb4:	68bb      	ldr	r3, [r7, #8]
    ebb6:	2b00      	cmp	r3, #0
    ebb8:	d002      	beq.n	ebc0 <wc_ecc_export_private_only+0x18>
    ebba:	687b      	ldr	r3, [r7, #4]
    ebbc:	2b00      	cmp	r3, #0
    ebbe:	d102      	bne.n	ebc6 <wc_ecc_export_private_only+0x1e>
        return BAD_FUNC_ARG;
    ebc0:	23ad      	movs	r3, #173	; 0xad
    ebc2:	425b      	negs	r3, r3
    ebc4:	e00e      	b.n	ebe4 <wc_ecc_export_private_only+0x3c>
    }

    return wc_ecc_export_ex(key, NULL, NULL, NULL, NULL, out, outLen,
    ebc6:	68f8      	ldr	r0, [r7, #12]
    ebc8:	2302      	movs	r3, #2
    ebca:	9303      	str	r3, [sp, #12]
    ebcc:	687b      	ldr	r3, [r7, #4]
    ebce:	9302      	str	r3, [sp, #8]
    ebd0:	68bb      	ldr	r3, [r7, #8]
    ebd2:	9301      	str	r3, [sp, #4]
    ebd4:	2300      	movs	r3, #0
    ebd6:	9300      	str	r3, [sp, #0]
    ebd8:	2300      	movs	r3, #0
    ebda:	2200      	movs	r2, #0
    ebdc:	2100      	movs	r1, #0
    ebde:	f7ff ff71 	bl	eac4 <wc_ecc_export_ex>
    ebe2:	0003      	movs	r3, r0
        WC_TYPE_UNSIGNED_BIN);
}
    ebe4:	0018      	movs	r0, r3
    ebe6:	46bd      	mov	sp, r7
    ebe8:	b004      	add	sp, #16
    ebea:	bd80      	pop	{r7, pc}

0000ebec <wc_ecc_export_public_raw>:

/* export public key to raw elements including public (Qx,Qy) as unsigned bin
 * return MP_OKAY on success, negative on error */
int wc_ecc_export_public_raw(ecc_key* key, byte* qx, word32* qxLen,
                             byte* qy, word32* qyLen)
{
    ebec:	b590      	push	{r4, r7, lr}
    ebee:	b089      	sub	sp, #36	; 0x24
    ebf0:	af04      	add	r7, sp, #16
    ebf2:	60f8      	str	r0, [r7, #12]
    ebf4:	60b9      	str	r1, [r7, #8]
    ebf6:	607a      	str	r2, [r7, #4]
    ebf8:	603b      	str	r3, [r7, #0]
    if (qx == NULL || qxLen == NULL || qy == NULL || qyLen == NULL) {
    ebfa:	68bb      	ldr	r3, [r7, #8]
    ebfc:	2b00      	cmp	r3, #0
    ebfe:	d008      	beq.n	ec12 <wc_ecc_export_public_raw+0x26>
    ec00:	687b      	ldr	r3, [r7, #4]
    ec02:	2b00      	cmp	r3, #0
    ec04:	d005      	beq.n	ec12 <wc_ecc_export_public_raw+0x26>
    ec06:	683b      	ldr	r3, [r7, #0]
    ec08:	2b00      	cmp	r3, #0
    ec0a:	d002      	beq.n	ec12 <wc_ecc_export_public_raw+0x26>
    ec0c:	6a3b      	ldr	r3, [r7, #32]
    ec0e:	2b00      	cmp	r3, #0
    ec10:	d102      	bne.n	ec18 <wc_ecc_export_public_raw+0x2c>
        return BAD_FUNC_ARG;
    ec12:	23ad      	movs	r3, #173	; 0xad
    ec14:	425b      	negs	r3, r3
    ec16:	e00f      	b.n	ec38 <wc_ecc_export_public_raw+0x4c>
    }

    return wc_ecc_export_ex(key, qx, qxLen, qy, qyLen, NULL, NULL,
    ec18:	683c      	ldr	r4, [r7, #0]
    ec1a:	687a      	ldr	r2, [r7, #4]
    ec1c:	68b9      	ldr	r1, [r7, #8]
    ec1e:	68f8      	ldr	r0, [r7, #12]
    ec20:	2302      	movs	r3, #2
    ec22:	9303      	str	r3, [sp, #12]
    ec24:	2300      	movs	r3, #0
    ec26:	9302      	str	r3, [sp, #8]
    ec28:	2300      	movs	r3, #0
    ec2a:	9301      	str	r3, [sp, #4]
    ec2c:	6a3b      	ldr	r3, [r7, #32]
    ec2e:	9300      	str	r3, [sp, #0]
    ec30:	0023      	movs	r3, r4
    ec32:	f7ff ff47 	bl	eac4 <wc_ecc_export_ex>
    ec36:	0003      	movs	r3, r0
        WC_TYPE_UNSIGNED_BIN);
}
    ec38:	0018      	movs	r0, r3
    ec3a:	46bd      	mov	sp, r7
    ec3c:	b005      	add	sp, #20
    ec3e:	bd90      	pop	{r4, r7, pc}

0000ec40 <wc_ecc_export_private_raw>:
/* export ecc key to raw elements including public (Qx,Qy) and
 *   private (d) as unsigned bin
 * return MP_OKAY on success, negative on error */
int wc_ecc_export_private_raw(ecc_key* key, byte* qx, word32* qxLen,
                              byte* qy, word32* qyLen, byte* d, word32* dLen)
{
    ec40:	b590      	push	{r4, r7, lr}
    ec42:	b089      	sub	sp, #36	; 0x24
    ec44:	af04      	add	r7, sp, #16
    ec46:	60f8      	str	r0, [r7, #12]
    ec48:	60b9      	str	r1, [r7, #8]
    ec4a:	607a      	str	r2, [r7, #4]
    ec4c:	603b      	str	r3, [r7, #0]
    return wc_ecc_export_ex(key, qx, qxLen, qy, qyLen, d, dLen,
    ec4e:	683c      	ldr	r4, [r7, #0]
    ec50:	687a      	ldr	r2, [r7, #4]
    ec52:	68b9      	ldr	r1, [r7, #8]
    ec54:	68f8      	ldr	r0, [r7, #12]
    ec56:	2302      	movs	r3, #2
    ec58:	9303      	str	r3, [sp, #12]
    ec5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec5c:	9302      	str	r3, [sp, #8]
    ec5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ec60:	9301      	str	r3, [sp, #4]
    ec62:	6a3b      	ldr	r3, [r7, #32]
    ec64:	9300      	str	r3, [sp, #0]
    ec66:	0023      	movs	r3, r4
    ec68:	f7ff ff2c 	bl	eac4 <wc_ecc_export_ex>
    ec6c:	0003      	movs	r3, r0
        WC_TYPE_UNSIGNED_BIN);
}
    ec6e:	0018      	movs	r0, r3
    ec70:	46bd      	mov	sp, r7
    ec72:	b005      	add	sp, #20
    ec74:	bd90      	pop	{r4, r7, pc}
    ec76:	46c0      	nop			; (mov r8, r8)

0000ec78 <wc_ecc_import_private_key_ex>:
#ifdef HAVE_ECC_KEY_IMPORT
/* import private key, public part optional if (pub) passed as NULL */
int wc_ecc_import_private_key_ex(const byte* priv, word32 privSz,
                                 const byte* pub, word32 pubSz, ecc_key* key,
                                 int curve_id)
{
    ec78:	b580      	push	{r7, lr}
    ec7a:	b086      	sub	sp, #24
    ec7c:	af00      	add	r7, sp, #0
    ec7e:	60f8      	str	r0, [r7, #12]
    ec80:	60b9      	str	r1, [r7, #8]
    ec82:	607a      	str	r2, [r7, #4]
    ec84:	603b      	str	r3, [r7, #0]
    int ret;
    word32 idx = 0;
    ec86:	2300      	movs	r3, #0
    ec88:	613b      	str	r3, [r7, #16]

    if (key == NULL || priv == NULL)
    ec8a:	6a3b      	ldr	r3, [r7, #32]
    ec8c:	2b00      	cmp	r3, #0
    ec8e:	d002      	beq.n	ec96 <wc_ecc_import_private_key_ex+0x1e>
    ec90:	68fb      	ldr	r3, [r7, #12]
    ec92:	2b00      	cmp	r3, #0
    ec94:	d102      	bne.n	ec9c <wc_ecc_import_private_key_ex+0x24>
        return BAD_FUNC_ARG;
    ec96:	23ad      	movs	r3, #173	; 0xad
    ec98:	425b      	negs	r3, r3
    ec9a:	e030      	b.n	ecfe <wc_ecc_import_private_key_ex+0x86>

    /* public optional, NULL if only importing private */
    if (pub != NULL) {
    ec9c:	687b      	ldr	r3, [r7, #4]
    ec9e:	2b00      	cmp	r3, #0
    eca0:	d017      	beq.n	ecd2 <wc_ecc_import_private_key_ex+0x5a>
        ret = wc_ecc_import_x963_ex(pub, pubSz, key, curve_id);
    eca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eca4:	6a3a      	ldr	r2, [r7, #32]
    eca6:	6839      	ldr	r1, [r7, #0]
    eca8:	6878      	ldr	r0, [r7, #4]
    ecaa:	f7ff fe2b 	bl	e904 <wc_ecc_import_x963_ex>
    ecae:	0003      	movs	r3, r0
    ecb0:	617b      	str	r3, [r7, #20]
        if (ret < 0)
    ecb2:	697b      	ldr	r3, [r7, #20]
    ecb4:	2b00      	cmp	r3, #0
    ecb6:	da08      	bge.n	ecca <wc_ecc_import_private_key_ex+0x52>
            ret = wc_EccPublicKeyDecode(pub, &idx, key, pubSz);
    ecb8:	683b      	ldr	r3, [r7, #0]
    ecba:	6a3a      	ldr	r2, [r7, #32]
    ecbc:	2110      	movs	r1, #16
    ecbe:	1879      	adds	r1, r7, r1
    ecc0:	6878      	ldr	r0, [r7, #4]
    ecc2:	f7f8 fe49 	bl	7958 <wc_EccPublicKeyDecode>
    ecc6:	0003      	movs	r3, r0
    ecc8:	617b      	str	r3, [r7, #20]
        key->type = ECC_PRIVATEKEY;
    ecca:	6a3b      	ldr	r3, [r7, #32]
    eccc:	2202      	movs	r2, #2
    ecce:	601a      	str	r2, [r3, #0]
    ecd0:	e00e      	b.n	ecf0 <wc_ecc_import_private_key_ex+0x78>
    }
    else {
        /* make sure required variables are reset */
        wc_ecc_reset(key);
    ecd2:	6a3b      	ldr	r3, [r7, #32]
    ecd4:	0018      	movs	r0, r3
    ecd6:	f7ff f88d 	bl	ddf4 <wc_ecc_reset>

        /* set key size */
        ret = wc_ecc_set_curve(key, privSz, curve_id);
    ecda:	68b9      	ldr	r1, [r7, #8]
    ecdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ecde:	6a3b      	ldr	r3, [r7, #32]
    ece0:	0018      	movs	r0, r3
    ece2:	f7fe fed5 	bl	da90 <wc_ecc_set_curve>
    ece6:	0003      	movs	r3, r0
    ece8:	617b      	str	r3, [r7, #20]
        key->type = ECC_PRIVATEKEY_ONLY;
    ecea:	6a3b      	ldr	r3, [r7, #32]
    ecec:	2203      	movs	r2, #3
    ecee:	601a      	str	r2, [r3, #0]
    }

    if (ret != 0)
    ecf0:	697b      	ldr	r3, [r7, #20]
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	d001      	beq.n	ecfa <wc_ecc_import_private_key_ex+0x82>
        return ret;
    ecf6:	697b      	ldr	r3, [r7, #20]
    ecf8:	e001      	b.n	ecfe <wc_ecc_import_private_key_ex+0x86>

#ifdef WOLFSSL_ATECC508A
    /* Hardware does not support loading private keys */
    return NOT_COMPILED_IN;
    ecfa:	23ae      	movs	r3, #174	; 0xae
    ecfc:	425b      	negs	r3, r3
        /* public key needed to perform key validation */
        ret = ecc_check_privkey_gen_helper(key);
#endif

    return ret;
}
    ecfe:	0018      	movs	r0, r3
    ed00:	46bd      	mov	sp, r7
    ed02:	b006      	add	sp, #24
    ed04:	bd80      	pop	{r7, pc}
    ed06:	46c0      	nop			; (mov r8, r8)

0000ed08 <wc_ecc_import_private_key>:

/* ecc private key import, public key in ANSI X9.63 format, private raw */
int wc_ecc_import_private_key(const byte* priv, word32 privSz, const byte* pub,
                           word32 pubSz, ecc_key* key)
{
    ed08:	b590      	push	{r4, r7, lr}
    ed0a:	b087      	sub	sp, #28
    ed0c:	af02      	add	r7, sp, #8
    ed0e:	60f8      	str	r0, [r7, #12]
    ed10:	60b9      	str	r1, [r7, #8]
    ed12:	607a      	str	r2, [r7, #4]
    ed14:	603b      	str	r3, [r7, #0]
    return wc_ecc_import_private_key_ex(priv, privSz, pub, pubSz, key,
    ed16:	683c      	ldr	r4, [r7, #0]
    ed18:	687a      	ldr	r2, [r7, #4]
    ed1a:	68b9      	ldr	r1, [r7, #8]
    ed1c:	68f8      	ldr	r0, [r7, #12]
    ed1e:	2300      	movs	r3, #0
    ed20:	9301      	str	r3, [sp, #4]
    ed22:	6a3b      	ldr	r3, [r7, #32]
    ed24:	9300      	str	r3, [sp, #0]
    ed26:	0023      	movs	r3, r4
    ed28:	f7ff ffa6 	bl	ec78 <wc_ecc_import_private_key_ex>
    ed2c:	0003      	movs	r3, r0
                                                                ECC_CURVE_DEF);
}
    ed2e:	0018      	movs	r0, r3
    ed30:	46bd      	mov	sp, r7
    ed32:	b005      	add	sp, #20
    ed34:	bd90      	pop	{r4, r7, pc}
    ed36:	46c0      	nop			; (mov r8, r8)

0000ed38 <wc_ecc_rs_to_sig>:
   out     DER-encoded ECDSA signature
   outlen  [in/out] output buffer size, output signature size
   return  MP_OKAY on success
*/
int wc_ecc_rs_to_sig(const char* r, const char* s, byte* out, word32* outlen)
{
    ed38:	b580      	push	{r7, lr}
    ed3a:	b08e      	sub	sp, #56	; 0x38
    ed3c:	af02      	add	r7, sp, #8
    ed3e:	60f8      	str	r0, [r7, #12]
    ed40:	60b9      	str	r1, [r7, #8]
    ed42:	607a      	str	r2, [r7, #4]
    ed44:	603b      	str	r3, [r7, #0]
    int err;
#ifdef WOLFSSL_SMALL_STACK
    mp_int* rtmp = NULL;
    ed46:	2300      	movs	r3, #0
    ed48:	62bb      	str	r3, [r7, #40]	; 0x28
    mp_int* stmp = NULL;
    ed4a:	2300      	movs	r3, #0
    ed4c:	627b      	str	r3, [r7, #36]	; 0x24
#else
    mp_int  rtmp[1];
    mp_int  stmp[1];
#endif

    if (r == NULL || s == NULL || out == NULL || outlen == NULL)
    ed4e:	68fb      	ldr	r3, [r7, #12]
    ed50:	2b00      	cmp	r3, #0
    ed52:	d008      	beq.n	ed66 <wc_ecc_rs_to_sig+0x2e>
    ed54:	68bb      	ldr	r3, [r7, #8]
    ed56:	2b00      	cmp	r3, #0
    ed58:	d005      	beq.n	ed66 <wc_ecc_rs_to_sig+0x2e>
    ed5a:	687b      	ldr	r3, [r7, #4]
    ed5c:	2b00      	cmp	r3, #0
    ed5e:	d002      	beq.n	ed66 <wc_ecc_rs_to_sig+0x2e>
    ed60:	683b      	ldr	r3, [r7, #0]
    ed62:	2b00      	cmp	r3, #0
    ed64:	d102      	bne.n	ed6c <wc_ecc_rs_to_sig+0x34>
        return ECC_BAD_ARG_E;
    ed66:	23aa      	movs	r3, #170	; 0xaa
    ed68:	425b      	negs	r3, r3
    ed6a:	e092      	b.n	ee92 <wc_ecc_rs_to_sig+0x15a>

#ifdef WOLFSSL_SMALL_STACK
    rtmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
    ed6c:	238b      	movs	r3, #139	; 0x8b
    ed6e:	009b      	lsls	r3, r3, #2
    ed70:	0018      	movs	r0, r3
    ed72:	f016 fc87 	bl	25684 <malloc>
    ed76:	0003      	movs	r3, r0
    ed78:	62bb      	str	r3, [r7, #40]	; 0x28
    if (rtmp == NULL)
    ed7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed7c:	2b00      	cmp	r3, #0
    ed7e:	d102      	bne.n	ed86 <wc_ecc_rs_to_sig+0x4e>
        return MEMORY_E;
    ed80:	237d      	movs	r3, #125	; 0x7d
    ed82:	425b      	negs	r3, r3
    ed84:	e085      	b.n	ee92 <wc_ecc_rs_to_sig+0x15a>
    stmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
    ed86:	238b      	movs	r3, #139	; 0x8b
    ed88:	009b      	lsls	r3, r3, #2
    ed8a:	0018      	movs	r0, r3
    ed8c:	f016 fc7a 	bl	25684 <malloc>
    ed90:	0003      	movs	r3, r0
    ed92:	627b      	str	r3, [r7, #36]	; 0x24
    if (stmp == NULL) {
    ed94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ed96:	2b00      	cmp	r3, #0
    ed98:	d10b      	bne.n	edb2 <wc_ecc_rs_to_sig+0x7a>
        XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);
    ed9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed9c:	623b      	str	r3, [r7, #32]
    ed9e:	6a3b      	ldr	r3, [r7, #32]
    eda0:	2b00      	cmp	r3, #0
    eda2:	d003      	beq.n	edac <wc_ecc_rs_to_sig+0x74>
    eda4:	6a3b      	ldr	r3, [r7, #32]
    eda6:	0018      	movs	r0, r3
    eda8:	f016 fc76 	bl	25698 <free>
        return MEMORY_E;
    edac:	237d      	movs	r3, #125	; 0x7d
    edae:	425b      	negs	r3, r3
    edb0:	e06f      	b.n	ee92 <wc_ecc_rs_to_sig+0x15a>
    }
#endif

    err = mp_init_multi(rtmp, stmp, NULL, NULL, NULL, NULL);
    edb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    edb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    edb6:	2300      	movs	r3, #0
    edb8:	9301      	str	r3, [sp, #4]
    edba:	2300      	movs	r3, #0
    edbc:	9300      	str	r3, [sp, #0]
    edbe:	2300      	movs	r3, #0
    edc0:	2200      	movs	r2, #0
    edc2:	f000 ff97 	bl	fcf4 <mp_init_multi>
    edc6:	0003      	movs	r3, r0
    edc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (err != MP_OKAY) {
    edca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    edcc:	2b00      	cmp	r3, #0
    edce:	d013      	beq.n	edf8 <wc_ecc_rs_to_sig+0xc0>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(stmp, NULL, DYNAMIC_TYPE_ECC);
    edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    edd2:	61fb      	str	r3, [r7, #28]
    edd4:	69fb      	ldr	r3, [r7, #28]
    edd6:	2b00      	cmp	r3, #0
    edd8:	d003      	beq.n	ede2 <wc_ecc_rs_to_sig+0xaa>
    edda:	69fb      	ldr	r3, [r7, #28]
    eddc:	0018      	movs	r0, r3
    edde:	f016 fc5b 	bl	25698 <free>
        XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);
    ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ede4:	61bb      	str	r3, [r7, #24]
    ede6:	69bb      	ldr	r3, [r7, #24]
    ede8:	2b00      	cmp	r3, #0
    edea:	d003      	beq.n	edf4 <wc_ecc_rs_to_sig+0xbc>
    edec:	69bb      	ldr	r3, [r7, #24]
    edee:	0018      	movs	r0, r3
    edf0:	f016 fc52 	bl	25698 <free>
    #endif
        return err;
    edf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    edf6:	e04c      	b.n	ee92 <wc_ecc_rs_to_sig+0x15a>
    }

    err = mp_read_radix(rtmp, r, MP_RADIX_HEX);
    edf8:	68f9      	ldr	r1, [r7, #12]
    edfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    edfc:	2210      	movs	r2, #16
    edfe:	0018      	movs	r0, r3
    ee00:	f001 fb30 	bl	10464 <mp_read_radix>
    ee04:	0003      	movs	r3, r0
    ee06:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (err == MP_OKAY)
    ee08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ee0a:	2b00      	cmp	r3, #0
    ee0c:	d107      	bne.n	ee1e <wc_ecc_rs_to_sig+0xe6>
        err = mp_read_radix(stmp, s, MP_RADIX_HEX);
    ee0e:	68b9      	ldr	r1, [r7, #8]
    ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee12:	2210      	movs	r2, #16
    ee14:	0018      	movs	r0, r3
    ee16:	f001 fb25 	bl	10464 <mp_read_radix>
    ee1a:	0003      	movs	r3, r0
    ee1c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* convert mp_ints to ECDSA sig, initializes rtmp and stmp internally */
    if (err == MP_OKAY)
    ee1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ee20:	2b00      	cmp	r3, #0
    ee22:	d107      	bne.n	ee34 <wc_ecc_rs_to_sig+0xfc>
        err = StoreECC_DSA_Sig(out, outlen, rtmp, stmp);
    ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee26:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ee28:	6839      	ldr	r1, [r7, #0]
    ee2a:	6878      	ldr	r0, [r7, #4]
    ee2c:	f7f8 fb7c 	bl	7528 <StoreECC_DSA_Sig>
    ee30:	0003      	movs	r3, r0
    ee32:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (err == MP_OKAY) {
    ee34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ee36:	2b00      	cmp	r3, #0
    ee38:	d110      	bne.n	ee5c <wc_ecc_rs_to_sig+0x124>
        if (mp_iszero(rtmp) == MP_YES || mp_iszero(stmp) == MP_YES)
    ee3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee3c:	0018      	movs	r0, r3
    ee3e:	f001 f817 	bl	fe70 <mp_iszero>
    ee42:	0003      	movs	r3, r0
    ee44:	2b01      	cmp	r3, #1
    ee46:	d006      	beq.n	ee56 <wc_ecc_rs_to_sig+0x11e>
    ee48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee4a:	0018      	movs	r0, r3
    ee4c:	f001 f810 	bl	fe70 <mp_iszero>
    ee50:	0003      	movs	r3, r0
    ee52:	2b01      	cmp	r3, #1
    ee54:	d102      	bne.n	ee5c <wc_ecc_rs_to_sig+0x124>
            err = MP_ZERO_E;
    ee56:	2379      	movs	r3, #121	; 0x79
    ee58:	425b      	negs	r3, r3
    ee5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    mp_clear(rtmp);
    ee5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee5e:	0018      	movs	r0, r3
    ee60:	f000 ff38 	bl	fcd4 <mp_clear>
    mp_clear(stmp);
    ee64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee66:	0018      	movs	r0, r3
    ee68:	f000 ff34 	bl	fcd4 <mp_clear>
#ifdef WOLFSSL_SMALL_STACK
    XFREE(stmp, NULL, DYNAMIC_TYPE_ECC);
    ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee6e:	617b      	str	r3, [r7, #20]
    ee70:	697b      	ldr	r3, [r7, #20]
    ee72:	2b00      	cmp	r3, #0
    ee74:	d003      	beq.n	ee7e <wc_ecc_rs_to_sig+0x146>
    ee76:	697b      	ldr	r3, [r7, #20]
    ee78:	0018      	movs	r0, r3
    ee7a:	f016 fc0d 	bl	25698 <free>
    XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);
    ee7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee80:	613b      	str	r3, [r7, #16]
    ee82:	693b      	ldr	r3, [r7, #16]
    ee84:	2b00      	cmp	r3, #0
    ee86:	d003      	beq.n	ee90 <wc_ecc_rs_to_sig+0x158>
    ee88:	693b      	ldr	r3, [r7, #16]
    ee8a:	0018      	movs	r0, r3
    ee8c:	f016 fc04 	bl	25698 <free>
#endif

    return err;
    ee90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    ee92:	0018      	movs	r0, r3
    ee94:	46bd      	mov	sp, r7
    ee96:	b00c      	add	sp, #48	; 0x30
    ee98:	bd80      	pop	{r7, pc}
    ee9a:	46c0      	nop			; (mov r8, r8)

0000ee9c <wc_ecc_rs_raw_to_sig>:
   outlen  [in/out] output buffer size, output signature size
   return  MP_OKAY on success
*/
int wc_ecc_rs_raw_to_sig(const byte* r, word32 rSz, const byte* s, word32 sSz,
    byte* out, word32* outlen)
{
    ee9c:	b580      	push	{r7, lr}
    ee9e:	b08e      	sub	sp, #56	; 0x38
    eea0:	af02      	add	r7, sp, #8
    eea2:	60f8      	str	r0, [r7, #12]
    eea4:	60b9      	str	r1, [r7, #8]
    eea6:	607a      	str	r2, [r7, #4]
    eea8:	603b      	str	r3, [r7, #0]
    int err;
#ifdef WOLFSSL_SMALL_STACK
    mp_int* rtmp = NULL;
    eeaa:	2300      	movs	r3, #0
    eeac:	62bb      	str	r3, [r7, #40]	; 0x28
    mp_int* stmp = NULL;
    eeae:	2300      	movs	r3, #0
    eeb0:	627b      	str	r3, [r7, #36]	; 0x24
#else
    mp_int  rtmp[1];
    mp_int  stmp[1];
#endif

    if (r == NULL || s == NULL || out == NULL || outlen == NULL)
    eeb2:	68fb      	ldr	r3, [r7, #12]
    eeb4:	2b00      	cmp	r3, #0
    eeb6:	d008      	beq.n	eeca <wc_ecc_rs_raw_to_sig+0x2e>
    eeb8:	687b      	ldr	r3, [r7, #4]
    eeba:	2b00      	cmp	r3, #0
    eebc:	d005      	beq.n	eeca <wc_ecc_rs_raw_to_sig+0x2e>
    eebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    eec0:	2b00      	cmp	r3, #0
    eec2:	d002      	beq.n	eeca <wc_ecc_rs_raw_to_sig+0x2e>
    eec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eec6:	2b00      	cmp	r3, #0
    eec8:	d102      	bne.n	eed0 <wc_ecc_rs_raw_to_sig+0x34>
        return ECC_BAD_ARG_E;
    eeca:	23aa      	movs	r3, #170	; 0xaa
    eecc:	425b      	negs	r3, r3
    eece:	e092      	b.n	eff6 <wc_ecc_rs_raw_to_sig+0x15a>

#ifdef WOLFSSL_SMALL_STACK
    rtmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
    eed0:	238b      	movs	r3, #139	; 0x8b
    eed2:	009b      	lsls	r3, r3, #2
    eed4:	0018      	movs	r0, r3
    eed6:	f016 fbd5 	bl	25684 <malloc>
    eeda:	0003      	movs	r3, r0
    eedc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (rtmp == NULL)
    eede:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eee0:	2b00      	cmp	r3, #0
    eee2:	d102      	bne.n	eeea <wc_ecc_rs_raw_to_sig+0x4e>
        return MEMORY_E;
    eee4:	237d      	movs	r3, #125	; 0x7d
    eee6:	425b      	negs	r3, r3
    eee8:	e085      	b.n	eff6 <wc_ecc_rs_raw_to_sig+0x15a>
    stmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
    eeea:	238b      	movs	r3, #139	; 0x8b
    eeec:	009b      	lsls	r3, r3, #2
    eeee:	0018      	movs	r0, r3
    eef0:	f016 fbc8 	bl	25684 <malloc>
    eef4:	0003      	movs	r3, r0
    eef6:	627b      	str	r3, [r7, #36]	; 0x24
    if (stmp == NULL) {
    eef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eefa:	2b00      	cmp	r3, #0
    eefc:	d10b      	bne.n	ef16 <wc_ecc_rs_raw_to_sig+0x7a>
        XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);
    eefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef00:	623b      	str	r3, [r7, #32]
    ef02:	6a3b      	ldr	r3, [r7, #32]
    ef04:	2b00      	cmp	r3, #0
    ef06:	d003      	beq.n	ef10 <wc_ecc_rs_raw_to_sig+0x74>
    ef08:	6a3b      	ldr	r3, [r7, #32]
    ef0a:	0018      	movs	r0, r3
    ef0c:	f016 fbc4 	bl	25698 <free>
        return MEMORY_E;
    ef10:	237d      	movs	r3, #125	; 0x7d
    ef12:	425b      	negs	r3, r3
    ef14:	e06f      	b.n	eff6 <wc_ecc_rs_raw_to_sig+0x15a>
    }
#endif

    err = mp_init_multi(rtmp, stmp, NULL, NULL, NULL, NULL);
    ef16:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ef18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ef1a:	2300      	movs	r3, #0
    ef1c:	9301      	str	r3, [sp, #4]
    ef1e:	2300      	movs	r3, #0
    ef20:	9300      	str	r3, [sp, #0]
    ef22:	2300      	movs	r3, #0
    ef24:	2200      	movs	r2, #0
    ef26:	f000 fee5 	bl	fcf4 <mp_init_multi>
    ef2a:	0003      	movs	r3, r0
    ef2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (err != MP_OKAY) {
    ef2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef30:	2b00      	cmp	r3, #0
    ef32:	d013      	beq.n	ef5c <wc_ecc_rs_raw_to_sig+0xc0>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(stmp, NULL, DYNAMIC_TYPE_ECC);
    ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef36:	61fb      	str	r3, [r7, #28]
    ef38:	69fb      	ldr	r3, [r7, #28]
    ef3a:	2b00      	cmp	r3, #0
    ef3c:	d003      	beq.n	ef46 <wc_ecc_rs_raw_to_sig+0xaa>
    ef3e:	69fb      	ldr	r3, [r7, #28]
    ef40:	0018      	movs	r0, r3
    ef42:	f016 fba9 	bl	25698 <free>
        XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);
    ef46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef48:	61bb      	str	r3, [r7, #24]
    ef4a:	69bb      	ldr	r3, [r7, #24]
    ef4c:	2b00      	cmp	r3, #0
    ef4e:	d003      	beq.n	ef58 <wc_ecc_rs_raw_to_sig+0xbc>
    ef50:	69bb      	ldr	r3, [r7, #24]
    ef52:	0018      	movs	r0, r3
    ef54:	f016 fba0 	bl	25698 <free>
    #endif
        return err;
    ef58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef5a:	e04c      	b.n	eff6 <wc_ecc_rs_raw_to_sig+0x15a>
    }

    err = mp_read_unsigned_bin(rtmp, r, rSz);
    ef5c:	68ba      	ldr	r2, [r7, #8]
    ef5e:	68f9      	ldr	r1, [r7, #12]
    ef60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ef62:	0018      	movs	r0, r3
    ef64:	f000 ff1a 	bl	fd9c <mp_read_unsigned_bin>
    ef68:	0003      	movs	r3, r0
    ef6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (err == MP_OKAY)
    ef6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef6e:	2b00      	cmp	r3, #0
    ef70:	d107      	bne.n	ef82 <wc_ecc_rs_raw_to_sig+0xe6>
        err = mp_read_unsigned_bin(stmp, s, sSz);
    ef72:	683a      	ldr	r2, [r7, #0]
    ef74:	6879      	ldr	r1, [r7, #4]
    ef76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef78:	0018      	movs	r0, r3
    ef7a:	f000 ff0f 	bl	fd9c <mp_read_unsigned_bin>
    ef7e:	0003      	movs	r3, r0
    ef80:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* convert mp_ints to ECDSA sig, initializes rtmp and stmp internally */
    if (err == MP_OKAY)
    ef82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef84:	2b00      	cmp	r3, #0
    ef86:	d107      	bne.n	ef98 <wc_ecc_rs_raw_to_sig+0xfc>
        err = StoreECC_DSA_Sig(out, outlen, rtmp, stmp);
    ef88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ef8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    ef8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    ef90:	f7f8 faca 	bl	7528 <StoreECC_DSA_Sig>
    ef94:	0003      	movs	r3, r0
    ef96:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (err == MP_OKAY) {
    ef98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef9a:	2b00      	cmp	r3, #0
    ef9c:	d110      	bne.n	efc0 <wc_ecc_rs_raw_to_sig+0x124>
        if (mp_iszero(rtmp) == MP_YES || mp_iszero(stmp) == MP_YES)
    ef9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    efa0:	0018      	movs	r0, r3
    efa2:	f000 ff65 	bl	fe70 <mp_iszero>
    efa6:	0003      	movs	r3, r0
    efa8:	2b01      	cmp	r3, #1
    efaa:	d006      	beq.n	efba <wc_ecc_rs_raw_to_sig+0x11e>
    efac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    efae:	0018      	movs	r0, r3
    efb0:	f000 ff5e 	bl	fe70 <mp_iszero>
    efb4:	0003      	movs	r3, r0
    efb6:	2b01      	cmp	r3, #1
    efb8:	d102      	bne.n	efc0 <wc_ecc_rs_raw_to_sig+0x124>
            err = MP_ZERO_E;
    efba:	2379      	movs	r3, #121	; 0x79
    efbc:	425b      	negs	r3, r3
    efbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    mp_clear(rtmp);
    efc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    efc2:	0018      	movs	r0, r3
    efc4:	f000 fe86 	bl	fcd4 <mp_clear>
    mp_clear(stmp);
    efc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    efca:	0018      	movs	r0, r3
    efcc:	f000 fe82 	bl	fcd4 <mp_clear>
#ifdef WOLFSSL_SMALL_STACK
    XFREE(stmp, NULL, DYNAMIC_TYPE_ECC);
    efd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    efd2:	617b      	str	r3, [r7, #20]
    efd4:	697b      	ldr	r3, [r7, #20]
    efd6:	2b00      	cmp	r3, #0
    efd8:	d003      	beq.n	efe2 <wc_ecc_rs_raw_to_sig+0x146>
    efda:	697b      	ldr	r3, [r7, #20]
    efdc:	0018      	movs	r0, r3
    efde:	f016 fb5b 	bl	25698 <free>
    XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);
    efe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    efe4:	613b      	str	r3, [r7, #16]
    efe6:	693b      	ldr	r3, [r7, #16]
    efe8:	2b00      	cmp	r3, #0
    efea:	d003      	beq.n	eff4 <wc_ecc_rs_raw_to_sig+0x158>
    efec:	693b      	ldr	r3, [r7, #16]
    efee:	0018      	movs	r0, r3
    eff0:	f016 fb52 	bl	25698 <free>
#endif

    return err;
    eff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    eff6:	0018      	movs	r0, r3
    eff8:	46bd      	mov	sp, r7
    effa:	b00c      	add	sp, #48	; 0x30
    effc:	bd80      	pop	{r7, pc}
    effe:	46c0      	nop			; (mov r8, r8)

0000f000 <wc_ecc_import_raw_private>:
#endif /* !NO_ASN */

#ifdef HAVE_ECC_KEY_IMPORT
static int wc_ecc_import_raw_private(ecc_key* key, const char* qx,
          const char* qy, const char* d, int curve_id, int encType)
{
    f000:	b590      	push	{r4, r7, lr}
    f002:	b089      	sub	sp, #36	; 0x24
    f004:	af02      	add	r7, sp, #8
    f006:	60f8      	str	r0, [r7, #12]
    f008:	60b9      	str	r1, [r7, #8]
    f00a:	607a      	str	r2, [r7, #4]
    f00c:	603b      	str	r3, [r7, #0]
    int err = MP_OKAY;
    f00e:	2300      	movs	r3, #0
    f010:	617b      	str	r3, [r7, #20]

    /* if d is NULL, only import as public key using Qx,Qy */
    if (key == NULL || qx == NULL || qy == NULL) {
    f012:	68fb      	ldr	r3, [r7, #12]
    f014:	2b00      	cmp	r3, #0
    f016:	d005      	beq.n	f024 <wc_ecc_import_raw_private+0x24>
    f018:	68bb      	ldr	r3, [r7, #8]
    f01a:	2b00      	cmp	r3, #0
    f01c:	d002      	beq.n	f024 <wc_ecc_import_raw_private+0x24>
    f01e:	687b      	ldr	r3, [r7, #4]
    f020:	2b00      	cmp	r3, #0
    f022:	d102      	bne.n	f02a <wc_ecc_import_raw_private+0x2a>
        return BAD_FUNC_ARG;
    f024:	23ad      	movs	r3, #173	; 0xad
    f026:	425b      	negs	r3, r3
    f028:	e0d3      	b.n	f1d2 <wc_ecc_import_raw_private+0x1d2>
    }

    /* make sure required variables are reset */
    wc_ecc_reset(key);
    f02a:	68fb      	ldr	r3, [r7, #12]
    f02c:	0018      	movs	r0, r3
    f02e:	f7fe fee1 	bl	ddf4 <wc_ecc_reset>

    /* set curve type and index */
    err = wc_ecc_set_curve(key, 0, curve_id);
    f032:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f034:	68fb      	ldr	r3, [r7, #12]
    f036:	2100      	movs	r1, #0
    f038:	0018      	movs	r0, r3
    f03a:	f7fe fd29 	bl	da90 <wc_ecc_set_curve>
    f03e:	0003      	movs	r3, r0
    f040:	617b      	str	r3, [r7, #20]
    if (err != 0) {
    f042:	697b      	ldr	r3, [r7, #20]
    f044:	2b00      	cmp	r3, #0
    f046:	d001      	beq.n	f04c <wc_ecc_import_raw_private+0x4c>
        return err;
    f048:	697b      	ldr	r3, [r7, #20]
    f04a:	e0c2      	b.n	f1d2 <wc_ecc_import_raw_private+0x1d2>
    }

    /* init key */
#ifdef ALT_ECC_SIZE
    key->pubkey.x = (mp_int*)&key->pubkey.xyz[0];
    f04c:	68fb      	ldr	r3, [r7, #12]
    f04e:	3324      	adds	r3, #36	; 0x24
    f050:	001a      	movs	r2, r3
    f052:	68fb      	ldr	r3, [r7, #12]
    f054:	619a      	str	r2, [r3, #24]
    key->pubkey.y = (mp_int*)&key->pubkey.xyz[1];
    f056:	68fb      	ldr	r3, [r7, #12]
    f058:	3370      	adds	r3, #112	; 0x70
    f05a:	001a      	movs	r2, r3
    f05c:	68fb      	ldr	r3, [r7, #12]
    f05e:	61da      	str	r2, [r3, #28]
    key->pubkey.z = (mp_int*)&key->pubkey.xyz[2];
    f060:	68fb      	ldr	r3, [r7, #12]
    f062:	33bc      	adds	r3, #188	; 0xbc
    f064:	001a      	movs	r2, r3
    f066:	68fb      	ldr	r3, [r7, #12]
    f068:	621a      	str	r2, [r3, #32]
    alt_fp_init(key->pubkey.x);
    f06a:	68fb      	ldr	r3, [r7, #12]
    f06c:	699b      	ldr	r3, [r3, #24]
    f06e:	0018      	movs	r0, r3
    f070:	f7fe fd6e 	bl	db50 <alt_fp_init>
    alt_fp_init(key->pubkey.y);
    f074:	68fb      	ldr	r3, [r7, #12]
    f076:	69db      	ldr	r3, [r3, #28]
    f078:	0018      	movs	r0, r3
    f07a:	f7fe fd69 	bl	db50 <alt_fp_init>
    alt_fp_init(key->pubkey.z);
    f07e:	68fb      	ldr	r3, [r7, #12]
    f080:	6a1b      	ldr	r3, [r3, #32]
    f082:	0018      	movs	r0, r3
    f084:	f7fe fd64 	bl	db50 <alt_fp_init>
    err = mp_init(&key->k);
    f088:	68fb      	ldr	r3, [r7, #12]
    f08a:	3309      	adds	r3, #9
    f08c:	33ff      	adds	r3, #255	; 0xff
    f08e:	0018      	movs	r0, r3
    f090:	f000 fdbc 	bl	fc0c <mp_init>
    f094:	0003      	movs	r3, r0
    f096:	617b      	str	r3, [r7, #20]
#else
    err = mp_init_multi(&key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
                                                                  NULL, NULL);
#endif
    if (err != MP_OKAY)
    f098:	697b      	ldr	r3, [r7, #20]
    f09a:	2b00      	cmp	r3, #0
    f09c:	d002      	beq.n	f0a4 <wc_ecc_import_raw_private+0xa4>
        return MEMORY_E;
    f09e:	237d      	movs	r3, #125	; 0x7d
    f0a0:	425b      	negs	r3, r3
    f0a2:	e096      	b.n	f1d2 <wc_ecc_import_raw_private+0x1d2>

    /* read Qx */
    if (err == MP_OKAY) {
    f0a4:	697b      	ldr	r3, [r7, #20]
    f0a6:	2b00      	cmp	r3, #0
    f0a8:	d117      	bne.n	f0da <wc_ecc_import_raw_private+0xda>
        if (encType == WC_TYPE_HEX_STR)
    f0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f0ac:	2b01      	cmp	r3, #1
    f0ae:	d109      	bne.n	f0c4 <wc_ecc_import_raw_private+0xc4>
            err = mp_read_radix(key->pubkey.x, qx, MP_RADIX_HEX);
    f0b0:	68fb      	ldr	r3, [r7, #12]
    f0b2:	699b      	ldr	r3, [r3, #24]
    f0b4:	68b9      	ldr	r1, [r7, #8]
    f0b6:	2210      	movs	r2, #16
    f0b8:	0018      	movs	r0, r3
    f0ba:	f001 f9d3 	bl	10464 <mp_read_radix>
    f0be:	0003      	movs	r3, r0
    f0c0:	617b      	str	r3, [r7, #20]
    f0c2:	e00a      	b.n	f0da <wc_ecc_import_raw_private+0xda>
        else
            err = mp_read_unsigned_bin(key->pubkey.x, (const byte*)qx,
    f0c4:	68fb      	ldr	r3, [r7, #12]
    f0c6:	6998      	ldr	r0, [r3, #24]
                key->dp->size);
    f0c8:	68fb      	ldr	r3, [r7, #12]
    f0ca:	691b      	ldr	r3, [r3, #16]
    /* read Qx */
    if (err == MP_OKAY) {
        if (encType == WC_TYPE_HEX_STR)
            err = mp_read_radix(key->pubkey.x, qx, MP_RADIX_HEX);
        else
            err = mp_read_unsigned_bin(key->pubkey.x, (const byte*)qx,
    f0cc:	681a      	ldr	r2, [r3, #0]
    f0ce:	68bb      	ldr	r3, [r7, #8]
    f0d0:	0019      	movs	r1, r3
    f0d2:	f000 fe63 	bl	fd9c <mp_read_unsigned_bin>
    f0d6:	0003      	movs	r3, r0
    f0d8:	617b      	str	r3, [r7, #20]
                key->dp->size);
    }

    /* read Qy */
    if (err == MP_OKAY) {
    f0da:	697b      	ldr	r3, [r7, #20]
    f0dc:	2b00      	cmp	r3, #0
    f0de:	d117      	bne.n	f110 <wc_ecc_import_raw_private+0x110>
        if (encType == WC_TYPE_HEX_STR)
    f0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f0e2:	2b01      	cmp	r3, #1
    f0e4:	d109      	bne.n	f0fa <wc_ecc_import_raw_private+0xfa>
            err = mp_read_radix(key->pubkey.y, qy, MP_RADIX_HEX);
    f0e6:	68fb      	ldr	r3, [r7, #12]
    f0e8:	69db      	ldr	r3, [r3, #28]
    f0ea:	6879      	ldr	r1, [r7, #4]
    f0ec:	2210      	movs	r2, #16
    f0ee:	0018      	movs	r0, r3
    f0f0:	f001 f9b8 	bl	10464 <mp_read_radix>
    f0f4:	0003      	movs	r3, r0
    f0f6:	617b      	str	r3, [r7, #20]
    f0f8:	e00a      	b.n	f110 <wc_ecc_import_raw_private+0x110>
        else
            err = mp_read_unsigned_bin(key->pubkey.y, (const byte*)qy,
    f0fa:	68fb      	ldr	r3, [r7, #12]
    f0fc:	69d8      	ldr	r0, [r3, #28]
                key->dp->size);
    f0fe:	68fb      	ldr	r3, [r7, #12]
    f100:	691b      	ldr	r3, [r3, #16]
    /* read Qy */
    if (err == MP_OKAY) {
        if (encType == WC_TYPE_HEX_STR)
            err = mp_read_radix(key->pubkey.y, qy, MP_RADIX_HEX);
        else
            err = mp_read_unsigned_bin(key->pubkey.y, (const byte*)qy,
    f102:	681a      	ldr	r2, [r3, #0]
    f104:	687b      	ldr	r3, [r7, #4]
    f106:	0019      	movs	r1, r3
    f108:	f000 fe48 	bl	fd9c <mp_read_unsigned_bin>
    f10c:	0003      	movs	r3, r0
    f10e:	617b      	str	r3, [r7, #20]
                key->dp->size);

    }

    if (err == MP_OKAY)
    f110:	697b      	ldr	r3, [r7, #20]
    f112:	2b00      	cmp	r3, #0
    f114:	d107      	bne.n	f126 <wc_ecc_import_raw_private+0x126>
        err = mp_set(key->pubkey.z, 1);
    f116:	68fb      	ldr	r3, [r7, #12]
    f118:	6a1b      	ldr	r3, [r3, #32]
    f11a:	2101      	movs	r1, #1
    f11c:	0018      	movs	r0, r3
    f11e:	f001 f9b3 	bl	10488 <mp_set>
    f122:	0003      	movs	r3, r0
    f124:	617b      	str	r3, [r7, #20]

#ifdef WOLFSSL_ATECC508A
    /* For SECP256R1 only save raw public key for hardware */
    if (err == MP_OKAY && curve_id == ECC_SECP256R1) {
    f126:	697b      	ldr	r3, [r7, #20]
    f128:	2b00      	cmp	r3, #0
    f12a:	d12c      	bne.n	f186 <wc_ecc_import_raw_private+0x186>
    f12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f12e:	2b07      	cmp	r3, #7
    f130:	d129      	bne.n	f186 <wc_ecc_import_raw_private+0x186>
        word32 keySz = key->dp->size;
    f132:	68fb      	ldr	r3, [r7, #12]
    f134:	691b      	ldr	r3, [r3, #16]
    f136:	681b      	ldr	r3, [r3, #0]
    f138:	613b      	str	r3, [r7, #16]
        err = wc_export_int(key->pubkey.x, key->pubkey_raw,
    f13a:	68fb      	ldr	r3, [r7, #12]
    f13c:	6998      	ldr	r0, [r3, #24]
    f13e:	68fb      	ldr	r3, [r7, #12]
    f140:	22ce      	movs	r2, #206	; 0xce
    f142:	0092      	lsls	r2, r2, #2
    f144:	1899      	adds	r1, r3, r2
    f146:	693c      	ldr	r4, [r7, #16]
    f148:	2310      	movs	r3, #16
    f14a:	18fa      	adds	r2, r7, r3
    f14c:	2302      	movs	r3, #2
    f14e:	9300      	str	r3, [sp, #0]
    f150:	0023      	movs	r3, r4
    f152:	f001 fa35 	bl	105c0 <wc_export_int>
    f156:	0003      	movs	r3, r0
    f158:	617b      	str	r3, [r7, #20]
            &keySz, keySz, WC_TYPE_UNSIGNED_BIN);
        if (err == MP_OKAY)
    f15a:	697b      	ldr	r3, [r7, #20]
    f15c:	2b00      	cmp	r3, #0
    f15e:	d112      	bne.n	f186 <wc_ecc_import_raw_private+0x186>
            err = wc_export_int(key->pubkey.y, &key->pubkey_raw[keySz],
    f160:	68fb      	ldr	r3, [r7, #12]
    f162:	69d8      	ldr	r0, [r3, #28]
    f164:	693b      	ldr	r3, [r7, #16]
    f166:	22ce      	movs	r2, #206	; 0xce
    f168:	0092      	lsls	r2, r2, #2
    f16a:	4694      	mov	ip, r2
    f16c:	4463      	add	r3, ip
    f16e:	68fa      	ldr	r2, [r7, #12]
    f170:	18d1      	adds	r1, r2, r3
    f172:	693c      	ldr	r4, [r7, #16]
    f174:	2310      	movs	r3, #16
    f176:	18fa      	adds	r2, r7, r3
    f178:	2302      	movs	r3, #2
    f17a:	9300      	str	r3, [sp, #0]
    f17c:	0023      	movs	r3, r4
    f17e:	f001 fa1f 	bl	105c0 <wc_export_int>
    f182:	0003      	movs	r3, r0
    f184:	617b      	str	r3, [r7, #20]
                &keySz, keySz, WC_TYPE_UNSIGNED_BIN);
    }
#endif

    /* import private key */
    if (err == MP_OKAY) {
    f186:	697b      	ldr	r3, [r7, #20]
    f188:	2b00      	cmp	r3, #0
    f18a:	d109      	bne.n	f1a0 <wc_ecc_import_raw_private+0x1a0>
        if (d != NULL) {
    f18c:	683b      	ldr	r3, [r7, #0]
    f18e:	2b00      	cmp	r3, #0
    f190:	d003      	beq.n	f19a <wc_ecc_import_raw_private+0x19a>
        #ifdef WOLFSSL_ATECC508A
            /* Hardware doesn't support loading private key */
            err = NOT_COMPILED_IN;
    f192:	23ae      	movs	r3, #174	; 0xae
    f194:	425b      	negs	r3, r3
    f196:	617b      	str	r3, [r7, #20]
    f198:	e002      	b.n	f1a0 <wc_ecc_import_raw_private+0x1a0>
            else
                err = mp_read_unsigned_bin(&key->k, (const byte*)d,
                    key->dp->size);
        #endif /* WOLFSSL_ATECC508A */
        } else {
            key->type = ECC_PUBLICKEY;
    f19a:	68fb      	ldr	r3, [r7, #12]
    f19c:	2201      	movs	r2, #1
    f19e:	601a      	str	r2, [r3, #0]
#ifdef WOLFSSL_VALIDATE_ECC_IMPORT
    if (err == MP_OKAY)
        err = wc_ecc_check_key(key);
#endif

    if (err != MP_OKAY) {
    f1a0:	697b      	ldr	r3, [r7, #20]
    f1a2:	2b00      	cmp	r3, #0
    f1a4:	d014      	beq.n	f1d0 <wc_ecc_import_raw_private+0x1d0>
        mp_clear(key->pubkey.x);
    f1a6:	68fb      	ldr	r3, [r7, #12]
    f1a8:	699b      	ldr	r3, [r3, #24]
    f1aa:	0018      	movs	r0, r3
    f1ac:	f000 fd92 	bl	fcd4 <mp_clear>
        mp_clear(key->pubkey.y);
    f1b0:	68fb      	ldr	r3, [r7, #12]
    f1b2:	69db      	ldr	r3, [r3, #28]
    f1b4:	0018      	movs	r0, r3
    f1b6:	f000 fd8d 	bl	fcd4 <mp_clear>
        mp_clear(key->pubkey.z);
    f1ba:	68fb      	ldr	r3, [r7, #12]
    f1bc:	6a1b      	ldr	r3, [r3, #32]
    f1be:	0018      	movs	r0, r3
    f1c0:	f000 fd88 	bl	fcd4 <mp_clear>
        mp_clear(&key->k);
    f1c4:	68fb      	ldr	r3, [r7, #12]
    f1c6:	3309      	adds	r3, #9
    f1c8:	33ff      	adds	r3, #255	; 0xff
    f1ca:	0018      	movs	r0, r3
    f1cc:	f000 fd82 	bl	fcd4 <mp_clear>
    }

    return err;
    f1d0:	697b      	ldr	r3, [r7, #20]
}
    f1d2:	0018      	movs	r0, r3
    f1d4:	46bd      	mov	sp, r7
    f1d6:	b007      	add	sp, #28
    f1d8:	bd90      	pop	{r4, r7, pc}
    f1da:	46c0      	nop			; (mov r8, r8)

0000f1dc <wc_ecc_import_raw_ex>:
   dp        Custom ecc_set_type
   return    MP_OKAY on success
*/
int wc_ecc_import_raw_ex(ecc_key* key, const char* qx, const char* qy,
                   const char* d, int curve_id)
{
    f1dc:	b590      	push	{r4, r7, lr}
    f1de:	b087      	sub	sp, #28
    f1e0:	af02      	add	r7, sp, #8
    f1e2:	60f8      	str	r0, [r7, #12]
    f1e4:	60b9      	str	r1, [r7, #8]
    f1e6:	607a      	str	r2, [r7, #4]
    f1e8:	603b      	str	r3, [r7, #0]
    return wc_ecc_import_raw_private(key, qx, qy, d, curve_id,
    f1ea:	683c      	ldr	r4, [r7, #0]
    f1ec:	687a      	ldr	r2, [r7, #4]
    f1ee:	68b9      	ldr	r1, [r7, #8]
    f1f0:	68f8      	ldr	r0, [r7, #12]
    f1f2:	2301      	movs	r3, #1
    f1f4:	9301      	str	r3, [sp, #4]
    f1f6:	6a3b      	ldr	r3, [r7, #32]
    f1f8:	9300      	str	r3, [sp, #0]
    f1fa:	0023      	movs	r3, r4
    f1fc:	f7ff ff00 	bl	f000 <wc_ecc_import_raw_private>
    f200:	0003      	movs	r3, r0
        WC_TYPE_HEX_STR);

}
    f202:	0018      	movs	r0, r3
    f204:	46bd      	mov	sp, r7
    f206:	b005      	add	sp, #20
    f208:	bd90      	pop	{r4, r7, pc}
    f20a:	46c0      	nop			; (mov r8, r8)

0000f20c <wc_ecc_import_unsigned>:

/* Import x, y and optional private (d) as unsigned binary */
int wc_ecc_import_unsigned(ecc_key* key, byte* qx, byte* qy,
                   byte* d, int curve_id)
{
    f20c:	b590      	push	{r4, r7, lr}
    f20e:	b087      	sub	sp, #28
    f210:	af02      	add	r7, sp, #8
    f212:	60f8      	str	r0, [r7, #12]
    f214:	60b9      	str	r1, [r7, #8]
    f216:	607a      	str	r2, [r7, #4]
    f218:	603b      	str	r3, [r7, #0]
    return wc_ecc_import_raw_private(key, (const char*)qx, (const char*)qy,
    f21a:	683c      	ldr	r4, [r7, #0]
    f21c:	687a      	ldr	r2, [r7, #4]
    f21e:	68b9      	ldr	r1, [r7, #8]
    f220:	68f8      	ldr	r0, [r7, #12]
    f222:	2302      	movs	r3, #2
    f224:	9301      	str	r3, [sp, #4]
    f226:	6a3b      	ldr	r3, [r7, #32]
    f228:	9300      	str	r3, [sp, #0]
    f22a:	0023      	movs	r3, r4
    f22c:	f7ff fee8 	bl	f000 <wc_ecc_import_raw_private>
    f230:	0003      	movs	r3, r0
        (const char*)d, curve_id, WC_TYPE_UNSIGNED_BIN);
}
    f232:	0018      	movs	r0, r3
    f234:	46bd      	mov	sp, r7
    f236:	b005      	add	sp, #20
    f238:	bd90      	pop	{r4, r7, pc}
    f23a:	46c0      	nop			; (mov r8, r8)

0000f23c <wc_ecc_import_raw>:
   curveName ECC curve name, from ecc_sets[]
   return    MP_OKAY on success
*/
int wc_ecc_import_raw(ecc_key* key, const char* qx, const char* qy,
                   const char* d, const char* curveName)
{
    f23c:	b5b0      	push	{r4, r5, r7, lr}
    f23e:	b088      	sub	sp, #32
    f240:	af02      	add	r7, sp, #8
    f242:	60f8      	str	r0, [r7, #12]
    f244:	60b9      	str	r1, [r7, #8]
    f246:	607a      	str	r2, [r7, #4]
    f248:	603b      	str	r3, [r7, #0]
    int err, x;

    /* if d is NULL, only import as public key using Qx,Qy */
    if (key == NULL || qx == NULL || qy == NULL || curveName == NULL) {
    f24a:	68fb      	ldr	r3, [r7, #12]
    f24c:	2b00      	cmp	r3, #0
    f24e:	d008      	beq.n	f262 <wc_ecc_import_raw+0x26>
    f250:	68bb      	ldr	r3, [r7, #8]
    f252:	2b00      	cmp	r3, #0
    f254:	d005      	beq.n	f262 <wc_ecc_import_raw+0x26>
    f256:	687b      	ldr	r3, [r7, #4]
    f258:	2b00      	cmp	r3, #0
    f25a:	d002      	beq.n	f262 <wc_ecc_import_raw+0x26>
    f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f25e:	2b00      	cmp	r3, #0
    f260:	d102      	bne.n	f268 <wc_ecc_import_raw+0x2c>
        return BAD_FUNC_ARG;
    f262:	23ad      	movs	r3, #173	; 0xad
    f264:	425b      	negs	r3, r3
    f266:	e040      	b.n	f2ea <wc_ecc_import_raw+0xae>
    }

    /* set curve type and index */
    for (x = 0; ecc_sets[x].size != 0; x++) {
    f268:	2300      	movs	r3, #0
    f26a:	617b      	str	r3, [r7, #20]
    f26c:	e015      	b.n	f29a <wc_ecc_import_raw+0x5e>
        if (XSTRNCMP(ecc_sets[x].name, curveName,
    f26e:	4a21      	ldr	r2, [pc, #132]	; (f2f4 <wc_ecc_import_raw+0xb8>)
    f270:	697b      	ldr	r3, [r7, #20]
    f272:	2134      	movs	r1, #52	; 0x34
    f274:	434b      	muls	r3, r1
    f276:	18d3      	adds	r3, r2, r3
    f278:	3308      	adds	r3, #8
    f27a:	681c      	ldr	r4, [r3, #0]
    f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f27e:	0018      	movs	r0, r3
    f280:	f017 f896 	bl	263b0 <strlen>
    f284:	0002      	movs	r2, r0
    f286:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f288:	0019      	movs	r1, r3
    f28a:	0020      	movs	r0, r4
    f28c:	f017 f897 	bl	263be <strncmp>
    f290:	1e03      	subs	r3, r0, #0
    f292:	d00a      	beq.n	f2aa <wc_ecc_import_raw+0x6e>
    if (key == NULL || qx == NULL || qy == NULL || curveName == NULL) {
        return BAD_FUNC_ARG;
    }

    /* set curve type and index */
    for (x = 0; ecc_sets[x].size != 0; x++) {
    f294:	697b      	ldr	r3, [r7, #20]
    f296:	3301      	adds	r3, #1
    f298:	617b      	str	r3, [r7, #20]
    f29a:	4b16      	ldr	r3, [pc, #88]	; (f2f4 <wc_ecc_import_raw+0xb8>)
    f29c:	697a      	ldr	r2, [r7, #20]
    f29e:	2134      	movs	r1, #52	; 0x34
    f2a0:	434a      	muls	r2, r1
    f2a2:	58d3      	ldr	r3, [r2, r3]
    f2a4:	2b00      	cmp	r3, #0
    f2a6:	d1e2      	bne.n	f26e <wc_ecc_import_raw+0x32>
    f2a8:	e000      	b.n	f2ac <wc_ecc_import_raw+0x70>
        if (XSTRNCMP(ecc_sets[x].name, curveName,
                     XSTRLEN(curveName)) == 0) {
            break;
    f2aa:	46c0      	nop			; (mov r8, r8)
        }
    }

    if (ecc_sets[x].size == 0) {
    f2ac:	4b11      	ldr	r3, [pc, #68]	; (f2f4 <wc_ecc_import_raw+0xb8>)
    f2ae:	697a      	ldr	r2, [r7, #20]
    f2b0:	2134      	movs	r1, #52	; 0x34
    f2b2:	434a      	muls	r2, r1
    f2b4:	58d3      	ldr	r3, [r2, r3]
    f2b6:	2b00      	cmp	r3, #0
    f2b8:	d104      	bne.n	f2c4 <wc_ecc_import_raw+0x88>
        WOLFSSL_MSG("ecc_set curve name not found");
        err = ASN_PARSE_E;
    f2ba:	238c      	movs	r3, #140	; 0x8c
    f2bc:	425b      	negs	r3, r3
    f2be:	613b      	str	r3, [r7, #16]
    } else {
        return wc_ecc_import_raw_private(key, qx, qy, d, ecc_sets[x].id,
            WC_TYPE_HEX_STR);
    }

    return err;
    f2c0:	693b      	ldr	r3, [r7, #16]
    f2c2:	e012      	b.n	f2ea <wc_ecc_import_raw+0xae>

    if (ecc_sets[x].size == 0) {
        WOLFSSL_MSG("ecc_set curve name not found");
        err = ASN_PARSE_E;
    } else {
        return wc_ecc_import_raw_private(key, qx, qy, d, ecc_sets[x].id,
    f2c4:	4a0b      	ldr	r2, [pc, #44]	; (f2f4 <wc_ecc_import_raw+0xb8>)
    f2c6:	697b      	ldr	r3, [r7, #20]
    f2c8:	2134      	movs	r1, #52	; 0x34
    f2ca:	434b      	muls	r3, r1
    f2cc:	18d3      	adds	r3, r2, r3
    f2ce:	3304      	adds	r3, #4
    f2d0:	681b      	ldr	r3, [r3, #0]
    f2d2:	683d      	ldr	r5, [r7, #0]
    f2d4:	687c      	ldr	r4, [r7, #4]
    f2d6:	68b9      	ldr	r1, [r7, #8]
    f2d8:	68f8      	ldr	r0, [r7, #12]
    f2da:	2201      	movs	r2, #1
    f2dc:	9201      	str	r2, [sp, #4]
    f2de:	9300      	str	r3, [sp, #0]
    f2e0:	002b      	movs	r3, r5
    f2e2:	0022      	movs	r2, r4
    f2e4:	f7ff fe8c 	bl	f000 <wc_ecc_import_raw_private>
    f2e8:	0003      	movs	r3, r0
            WC_TYPE_HEX_STR);
    }

    return err;
}
    f2ea:	0018      	movs	r0, r3
    f2ec:	46bd      	mov	sp, r7
    f2ee:	b006      	add	sp, #24
    f2f0:	bdb0      	pop	{r4, r5, r7, pc}
    f2f2:	46c0      	nop			; (mov r8, r8)
    f2f4:	0002c754 	.word	0x0002c754

0000f2f8 <wc_ecc_size>:
#endif /* HAVE_ECC_KEY_IMPORT */

/* key size in octets */
int wc_ecc_size(ecc_key* key)
{
    f2f8:	b580      	push	{r7, lr}
    f2fa:	b082      	sub	sp, #8
    f2fc:	af00      	add	r7, sp, #0
    f2fe:	6078      	str	r0, [r7, #4]
    if (key == NULL) return 0;
    f300:	687b      	ldr	r3, [r7, #4]
    f302:	2b00      	cmp	r3, #0
    f304:	d101      	bne.n	f30a <wc_ecc_size+0x12>
    f306:	2300      	movs	r3, #0
    f308:	e002      	b.n	f310 <wc_ecc_size+0x18>

    return key->dp->size;
    f30a:	687b      	ldr	r3, [r7, #4]
    f30c:	691b      	ldr	r3, [r3, #16]
    f30e:	681b      	ldr	r3, [r3, #0]
}
    f310:	0018      	movs	r0, r3
    f312:	46bd      	mov	sp, r7
    f314:	b002      	add	sp, #8
    f316:	bd80      	pop	{r7, pc}

0000f318 <wc_ecc_sig_size_calc>:

int wc_ecc_sig_size_calc(int sz)
{
    f318:	b580      	push	{r7, lr}
    f31a:	b082      	sub	sp, #8
    f31c:	af00      	add	r7, sp, #0
    f31e:	6078      	str	r0, [r7, #4]
    return (sz * 2) + SIG_HEADER_SZ + ECC_MAX_PAD_SZ;
    f320:	687b      	ldr	r3, [r7, #4]
    f322:	3305      	adds	r3, #5
    f324:	005b      	lsls	r3, r3, #1
}
    f326:	0018      	movs	r0, r3
    f328:	46bd      	mov	sp, r7
    f32a:	b002      	add	sp, #8
    f32c:	bd80      	pop	{r7, pc}
    f32e:	46c0      	nop			; (mov r8, r8)

0000f330 <wc_ecc_sig_size>:

/* worst case estimate, check actual return from wc_ecc_sign_hash for actual
   value of signature size in octets */
int wc_ecc_sig_size(ecc_key* key)
{
    f330:	b580      	push	{r7, lr}
    f332:	b084      	sub	sp, #16
    f334:	af00      	add	r7, sp, #0
    f336:	6078      	str	r0, [r7, #4]
    int sz = wc_ecc_size(key);
    f338:	687b      	ldr	r3, [r7, #4]
    f33a:	0018      	movs	r0, r3
    f33c:	f7ff ffdc 	bl	f2f8 <wc_ecc_size>
    f340:	0003      	movs	r3, r0
    f342:	60fb      	str	r3, [r7, #12]
    if (sz <= 0)
    f344:	68fb      	ldr	r3, [r7, #12]
    f346:	2b00      	cmp	r3, #0
    f348:	dc01      	bgt.n	f34e <wc_ecc_sig_size+0x1e>
        return sz;
    f34a:	68fb      	ldr	r3, [r7, #12]
    f34c:	e004      	b.n	f358 <wc_ecc_sig_size+0x28>

    return wc_ecc_sig_size_calc(sz);
    f34e:	68fb      	ldr	r3, [r7, #12]
    f350:	0018      	movs	r0, r3
    f352:	f7ff ffe1 	bl	f318 <wc_ecc_sig_size_calc>
    f356:	0003      	movs	r3, r0
}
    f358:	0018      	movs	r0, r3
    f35a:	46bd      	mov	sp, r7
    f35c:	b004      	add	sp, #16
    f35e:	bd80      	pop	{r7, pc}

0000f360 <wc_ecc_get_oid>:

#endif /* HAVE_COMP_KEY */


int wc_ecc_get_oid(word32 oidSum, const byte** oid, word32* oidSz)
{
    f360:	b580      	push	{r7, lr}
    f362:	b086      	sub	sp, #24
    f364:	af00      	add	r7, sp, #0
    f366:	60f8      	str	r0, [r7, #12]
    f368:	60b9      	str	r1, [r7, #8]
    f36a:	607a      	str	r2, [r7, #4]
    int x;

    if (oidSum == 0) {
    f36c:	68fb      	ldr	r3, [r7, #12]
    f36e:	2b00      	cmp	r3, #0
    f370:	d102      	bne.n	f378 <wc_ecc_get_oid+0x18>
        return BAD_FUNC_ARG;
    f372:	23ad      	movs	r3, #173	; 0xad
    f374:	425b      	negs	r3, r3
    f376:	e03f      	b.n	f3f8 <wc_ecc_get_oid+0x98>
    }

    /* find matching OID sum (based on encoded value) */
    for (x = 0; ecc_sets[x].size != 0; x++) {
    f378:	2300      	movs	r3, #0
    f37a:	617b      	str	r3, [r7, #20]
    f37c:	e033      	b.n	f3e6 <wc_ecc_get_oid+0x86>
        if (ecc_sets[x].oidSum == oidSum) {
    f37e:	4a20      	ldr	r2, [pc, #128]	; (f400 <wc_ecc_get_oid+0xa0>)
    f380:	697b      	ldr	r3, [r7, #20]
    f382:	2134      	movs	r1, #52	; 0x34
    f384:	434b      	muls	r3, r1
    f386:	18d3      	adds	r3, r2, r3
    f388:	332c      	adds	r3, #44	; 0x2c
    f38a:	681a      	ldr	r2, [r3, #0]
    f38c:	68fb      	ldr	r3, [r7, #12]
    f38e:	429a      	cmp	r2, r3
    f390:	d126      	bne.n	f3e0 <wc_ecc_get_oid+0x80>
            int ret = 0;
    f392:	2300      	movs	r3, #0
    f394:	613b      	str	r3, [r7, #16]
            }
            if (oid) {
                *oid = o->oid;
            }
        #else
            if (oidSz) {
    f396:	687b      	ldr	r3, [r7, #4]
    f398:	2b00      	cmp	r3, #0
    f39a:	d008      	beq.n	f3ae <wc_ecc_get_oid+0x4e>
                *oidSz = ecc_sets[x].oidSz;
    f39c:	4a18      	ldr	r2, [pc, #96]	; (f400 <wc_ecc_get_oid+0xa0>)
    f39e:	697b      	ldr	r3, [r7, #20]
    f3a0:	2134      	movs	r1, #52	; 0x34
    f3a2:	434b      	muls	r3, r1
    f3a4:	18d3      	adds	r3, r2, r3
    f3a6:	3328      	adds	r3, #40	; 0x28
    f3a8:	681a      	ldr	r2, [r3, #0]
    f3aa:	687b      	ldr	r3, [r7, #4]
    f3ac:	601a      	str	r2, [r3, #0]
            }
            if (oid) {
    f3ae:	68bb      	ldr	r3, [r7, #8]
    f3b0:	2b00      	cmp	r3, #0
    f3b2:	d008      	beq.n	f3c6 <wc_ecc_get_oid+0x66>
                *oid = ecc_sets[x].oid;
    f3b4:	4a12      	ldr	r2, [pc, #72]	; (f400 <wc_ecc_get_oid+0xa0>)
    f3b6:	697b      	ldr	r3, [r7, #20]
    f3b8:	2134      	movs	r1, #52	; 0x34
    f3ba:	434b      	muls	r3, r1
    f3bc:	18d3      	adds	r3, r2, r3
    f3be:	3324      	adds	r3, #36	; 0x24
    f3c0:	681a      	ldr	r2, [r3, #0]
    f3c2:	68bb      	ldr	r3, [r7, #8]
    f3c4:	601a      	str	r2, [r3, #0]
            }
        #endif
            /* on success return curve id */
            if (ret == 0) {
    f3c6:	693b      	ldr	r3, [r7, #16]
    f3c8:	2b00      	cmp	r3, #0
    f3ca:	d107      	bne.n	f3dc <wc_ecc_get_oid+0x7c>
                ret = ecc_sets[x].id;
    f3cc:	4a0c      	ldr	r2, [pc, #48]	; (f400 <wc_ecc_get_oid+0xa0>)
    f3ce:	697b      	ldr	r3, [r7, #20]
    f3d0:	2134      	movs	r1, #52	; 0x34
    f3d2:	434b      	muls	r3, r1
    f3d4:	18d3      	adds	r3, r2, r3
    f3d6:	3304      	adds	r3, #4
    f3d8:	681b      	ldr	r3, [r3, #0]
    f3da:	613b      	str	r3, [r7, #16]
            }
            return ret;
    f3dc:	693b      	ldr	r3, [r7, #16]
    f3de:	e00b      	b.n	f3f8 <wc_ecc_get_oid+0x98>
    if (oidSum == 0) {
        return BAD_FUNC_ARG;
    }

    /* find matching OID sum (based on encoded value) */
    for (x = 0; ecc_sets[x].size != 0; x++) {
    f3e0:	697b      	ldr	r3, [r7, #20]
    f3e2:	3301      	adds	r3, #1
    f3e4:	617b      	str	r3, [r7, #20]
    f3e6:	4b06      	ldr	r3, [pc, #24]	; (f400 <wc_ecc_get_oid+0xa0>)
    f3e8:	697a      	ldr	r2, [r7, #20]
    f3ea:	2134      	movs	r1, #52	; 0x34
    f3ec:	434a      	muls	r2, r1
    f3ee:	58d3      	ldr	r3, [r2, r3]
    f3f0:	2b00      	cmp	r3, #0
    f3f2:	d1c4      	bne.n	f37e <wc_ecc_get_oid+0x1e>
            }
            return ret;
        }
    }

    return NOT_COMPILED_IN;
    f3f4:	23ae      	movs	r3, #174	; 0xae
    f3f6:	425b      	negs	r3, r3
}
    f3f8:	0018      	movs	r0, r3
    f3fa:	46bd      	mov	sp, r7
    f3fc:	b006      	add	sp, #24
    f3fe:	bd80      	pop	{r7, pc}
    f400:	0002c754 	.word	0x0002c754

0000f404 <CheckRunTimeSettings>:



/* math settings check */
word32 CheckRunTimeSettings(void)
{
    f404:	b580      	push	{r7, lr}
    f406:	af00      	add	r7, sp, #0
    return CTC_SETTINGS;
    f408:	2308      	movs	r3, #8
}
    f40a:	0018      	movs	r0, r3
    f40c:	46bd      	mov	sp, r7
    f40e:	bd80      	pop	{r7, pc}

0000f410 <CheckRunTimeFastMath>:


/* math settings size check */
word32 CheckRunTimeFastMath(void)
{
    f410:	b580      	push	{r7, lr}
    f412:	af00      	add	r7, sp, #0
    return FP_SIZE;
    f414:	2388      	movs	r3, #136	; 0x88
}
    f416:	0018      	movs	r0, r3
    f418:	46bd      	mov	sp, r7
    f41a:	bd80      	pop	{r7, pc}

0000f41c <fp_mul_d>:
  b->sign = a->sign;
}

/* c = a * b */
void fp_mul_d(fp_int *a, fp_digit b, fp_int *c)
{
    f41c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f41e:	b08b      	sub	sp, #44	; 0x2c
    f420:	af00      	add	r7, sp, #0
    f422:	6178      	str	r0, [r7, #20]
    f424:	6139      	str	r1, [r7, #16]
    f426:	60fa      	str	r2, [r7, #12]
   fp_word  w;
   int      x, oldused;

   oldused = c->used;
    f428:	68fb      	ldr	r3, [r7, #12]
    f42a:	681b      	ldr	r3, [r3, #0]
    f42c:	61bb      	str	r3, [r7, #24]
   c->used = a->used;
    f42e:	697b      	ldr	r3, [r7, #20]
    f430:	681a      	ldr	r2, [r3, #0]
    f432:	68fb      	ldr	r3, [r7, #12]
    f434:	601a      	str	r2, [r3, #0]
   c->sign = a->sign;
    f436:	697b      	ldr	r3, [r7, #20]
    f438:	685a      	ldr	r2, [r3, #4]
    f43a:	68fb      	ldr	r3, [r7, #12]
    f43c:	605a      	str	r2, [r3, #4]
   w       = 0;
    f43e:	2300      	movs	r3, #0
    f440:	2400      	movs	r4, #0
    f442:	623b      	str	r3, [r7, #32]
    f444:	627c      	str	r4, [r7, #36]	; 0x24
   for (x = 0; x < a->used; x++) {
    f446:	2300      	movs	r3, #0
    f448:	61fb      	str	r3, [r7, #28]
    f44a:	e02d      	b.n	f4a8 <fp_mul_d+0x8c>
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
    f44c:	697a      	ldr	r2, [r7, #20]
    f44e:	69fb      	ldr	r3, [r7, #28]
    f450:	3302      	adds	r3, #2
    f452:	009b      	lsls	r3, r3, #2
    f454:	18d3      	adds	r3, r2, r3
    f456:	3304      	adds	r3, #4
    f458:	681b      	ldr	r3, [r3, #0]
    f45a:	001d      	movs	r5, r3
    f45c:	2300      	movs	r3, #0
    f45e:	001e      	movs	r6, r3
    f460:	693b      	ldr	r3, [r7, #16]
    f462:	603b      	str	r3, [r7, #0]
    f464:	2300      	movs	r3, #0
    f466:	607b      	str	r3, [r7, #4]
    f468:	683a      	ldr	r2, [r7, #0]
    f46a:	687b      	ldr	r3, [r7, #4]
    f46c:	0028      	movs	r0, r5
    f46e:	0031      	movs	r1, r6
    f470:	f014 f9e8 	bl	23844 <__aeabi_lmul>
    f474:	0003      	movs	r3, r0
    f476:	000c      	movs	r4, r1
    f478:	0019      	movs	r1, r3
    f47a:	0022      	movs	r2, r4
    f47c:	6a3b      	ldr	r3, [r7, #32]
    f47e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    f480:	185b      	adds	r3, r3, r1
    f482:	4154      	adcs	r4, r2
    f484:	623b      	str	r3, [r7, #32]
    f486:	627c      	str	r4, [r7, #36]	; 0x24
       c->dp[x]  = (fp_digit)w;
    f488:	6a3a      	ldr	r2, [r7, #32]
    f48a:	68f9      	ldr	r1, [r7, #12]
    f48c:	69fb      	ldr	r3, [r7, #28]
    f48e:	3302      	adds	r3, #2
    f490:	009b      	lsls	r3, r3, #2
    f492:	18cb      	adds	r3, r1, r3
    f494:	3304      	adds	r3, #4
    f496:	601a      	str	r2, [r3, #0]
       w         = w >> DIGIT_BIT;
    f498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f49a:	001b      	movs	r3, r3
    f49c:	623b      	str	r3, [r7, #32]
    f49e:	2300      	movs	r3, #0
    f4a0:	627b      	str	r3, [r7, #36]	; 0x24

   oldused = c->used;
   c->used = a->used;
   c->sign = a->sign;
   w       = 0;
   for (x = 0; x < a->used; x++) {
    f4a2:	69fb      	ldr	r3, [r7, #28]
    f4a4:	3301      	adds	r3, #1
    f4a6:	61fb      	str	r3, [r7, #28]
    f4a8:	697b      	ldr	r3, [r7, #20]
    f4aa:	681a      	ldr	r2, [r3, #0]
    f4ac:	69fb      	ldr	r3, [r7, #28]
    f4ae:	429a      	cmp	r2, r3
    f4b0:	dccc      	bgt.n	f44c <fp_mul_d+0x30>
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
       c->dp[x]  = (fp_digit)w;
       w         = w >> DIGIT_BIT;
   }
   if (w != 0 && (a->used != FP_SIZE)) {
    f4b2:	6a3b      	ldr	r3, [r7, #32]
    f4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f4b6:	4313      	orrs	r3, r2
    f4b8:	d01e      	beq.n	f4f8 <fp_mul_d+0xdc>
    f4ba:	697b      	ldr	r3, [r7, #20]
    f4bc:	681b      	ldr	r3, [r3, #0]
    f4be:	2b88      	cmp	r3, #136	; 0x88
    f4c0:	d01a      	beq.n	f4f8 <fp_mul_d+0xdc>
      c->dp[c->used++] = (fp_digit) w;
    f4c2:	68fb      	ldr	r3, [r7, #12]
    f4c4:	681b      	ldr	r3, [r3, #0]
    f4c6:	1c59      	adds	r1, r3, #1
    f4c8:	68fa      	ldr	r2, [r7, #12]
    f4ca:	6011      	str	r1, [r2, #0]
    f4cc:	6a3a      	ldr	r2, [r7, #32]
    f4ce:	68f9      	ldr	r1, [r7, #12]
    f4d0:	3302      	adds	r3, #2
    f4d2:	009b      	lsls	r3, r3, #2
    f4d4:	18cb      	adds	r3, r1, r3
    f4d6:	3304      	adds	r3, #4
    f4d8:	601a      	str	r2, [r3, #0]
      ++x;
    f4da:	69fb      	ldr	r3, [r7, #28]
    f4dc:	3301      	adds	r3, #1
    f4de:	61fb      	str	r3, [r7, #28]
   }

   /* zero any excess digits on the destination that we didn't write to */
   for (; x < oldused; x++) {
    f4e0:	e00a      	b.n	f4f8 <fp_mul_d+0xdc>
      c->dp[x] = 0;
    f4e2:	68fa      	ldr	r2, [r7, #12]
    f4e4:	69fb      	ldr	r3, [r7, #28]
    f4e6:	3302      	adds	r3, #2
    f4e8:	009b      	lsls	r3, r3, #2
    f4ea:	18d3      	adds	r3, r2, r3
    f4ec:	3304      	adds	r3, #4
    f4ee:	2200      	movs	r2, #0
    f4f0:	601a      	str	r2, [r3, #0]
      c->dp[c->used++] = (fp_digit) w;
      ++x;
   }

   /* zero any excess digits on the destination that we didn't write to */
   for (; x < oldused; x++) {
    f4f2:	69fb      	ldr	r3, [r7, #28]
    f4f4:	3301      	adds	r3, #1
    f4f6:	61fb      	str	r3, [r7, #28]
    f4f8:	69fa      	ldr	r2, [r7, #28]
    f4fa:	69bb      	ldr	r3, [r7, #24]
    f4fc:	429a      	cmp	r2, r3
    f4fe:	dbf0      	blt.n	f4e2 <fp_mul_d+0xc6>
      c->dp[x] = 0;
   }
   fp_clamp(c);
    f500:	e004      	b.n	f50c <fp_mul_d+0xf0>
    f502:	68fb      	ldr	r3, [r7, #12]
    f504:	681b      	ldr	r3, [r3, #0]
    f506:	1e5a      	subs	r2, r3, #1
    f508:	68fb      	ldr	r3, [r7, #12]
    f50a:	601a      	str	r2, [r3, #0]
    f50c:	68fb      	ldr	r3, [r7, #12]
    f50e:	681b      	ldr	r3, [r3, #0]
    f510:	2b00      	cmp	r3, #0
    f512:	d00a      	beq.n	f52a <fp_mul_d+0x10e>
    f514:	68fb      	ldr	r3, [r7, #12]
    f516:	681b      	ldr	r3, [r3, #0]
    f518:	3b01      	subs	r3, #1
    f51a:	68fa      	ldr	r2, [r7, #12]
    f51c:	3302      	adds	r3, #2
    f51e:	009b      	lsls	r3, r3, #2
    f520:	18d3      	adds	r3, r2, r3
    f522:	3304      	adds	r3, #4
    f524:	681b      	ldr	r3, [r3, #0]
    f526:	2b00      	cmp	r3, #0
    f528:	d0eb      	beq.n	f502 <fp_mul_d+0xe6>
    f52a:	68fb      	ldr	r3, [r7, #12]
    f52c:	681b      	ldr	r3, [r3, #0]
    f52e:	2b00      	cmp	r3, #0
    f530:	d002      	beq.n	f538 <fp_mul_d+0x11c>
    f532:	68fb      	ldr	r3, [r7, #12]
    f534:	685a      	ldr	r2, [r3, #4]
    f536:	e000      	b.n	f53a <fp_mul_d+0x11e>
    f538:	2200      	movs	r2, #0
    f53a:	68fb      	ldr	r3, [r7, #12]
    f53c:	605a      	str	r2, [r3, #4]
}
    f53e:	46c0      	nop			; (mov r8, r8)
    f540:	46bd      	mov	sp, r7
    f542:	b00b      	add	sp, #44	; 0x2c
    f544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f546:	46c0      	nop			; (mov r8, r8)

0000f548 <fp_div_2d>:
  fp_clamp (b);
}

/* c = a / 2**b */
void fp_div_2d(fp_int *a, int b, fp_int *c, fp_int *d)
{
    f548:	b580      	push	{r7, lr}
    f54a:	b086      	sub	sp, #24
    f54c:	af00      	add	r7, sp, #0
    f54e:	60f8      	str	r0, [r7, #12]
    f550:	60b9      	str	r1, [r7, #8]
    f552:	607a      	str	r2, [r7, #4]
    f554:	603b      	str	r3, [r7, #0]
  int      D;

  /* if the shift count is <= 0 then we do no work */
  if (b <= 0) {
    f556:	68bb      	ldr	r3, [r7, #8]
    f558:	2b00      	cmp	r3, #0
    f55a:	dc0e      	bgt.n	f57a <fp_div_2d+0x32>
    fp_copy (a, c);
    f55c:	687a      	ldr	r2, [r7, #4]
    f55e:	68fb      	ldr	r3, [r7, #12]
    f560:	0011      	movs	r1, r2
    f562:	0018      	movs	r0, r3
    f564:	f000 fc2c 	bl	fdc0 <fp_copy>
    if (d != NULL) {
    f568:	683b      	ldr	r3, [r7, #0]
    f56a:	2b00      	cmp	r3, #0
    f56c:	d100      	bne.n	f570 <fp_div_2d+0x28>
    f56e:	e065      	b.n	f63c <fp_div_2d+0xf4>
      fp_zero (d);
    f570:	683b      	ldr	r3, [r7, #0]
    f572:	0018      	movs	r0, r3
    f574:	f000 fb6a 	bl	fc4c <fp_zero>
    }
    return;
    f578:	e060      	b.n	f63c <fp_div_2d+0xf4>
  }

  /* get the remainder before a is changed in calculating c */
  if (a == c && d != NULL) {
    f57a:	68fa      	ldr	r2, [r7, #12]
    f57c:	687b      	ldr	r3, [r7, #4]
    f57e:	429a      	cmp	r2, r3
    f580:	d108      	bne.n	f594 <fp_div_2d+0x4c>
    f582:	683b      	ldr	r3, [r7, #0]
    f584:	2b00      	cmp	r3, #0
    f586:	d005      	beq.n	f594 <fp_div_2d+0x4c>
    fp_mod_2d (a, b, d);
    f588:	683a      	ldr	r2, [r7, #0]
    f58a:	68b9      	ldr	r1, [r7, #8]
    f58c:	68fb      	ldr	r3, [r7, #12]
    f58e:	0018      	movs	r0, r3
    f590:	f000 f85a 	bl	f648 <fp_mod_2d>
  }

  /* copy */
  fp_copy(a, c);
    f594:	687a      	ldr	r2, [r7, #4]
    f596:	68fb      	ldr	r3, [r7, #12]
    f598:	0011      	movs	r1, r2
    f59a:	0018      	movs	r0, r3
    f59c:	f000 fc10 	bl	fdc0 <fp_copy>

  /* shift by as many digits in the bit count */
  if (b >= (int)DIGIT_BIT) {
    f5a0:	68bb      	ldr	r3, [r7, #8]
    f5a2:	2b1f      	cmp	r3, #31
    f5a4:	dd0a      	ble.n	f5bc <fp_div_2d+0x74>
    fp_rshd (c, b / DIGIT_BIT);
    f5a6:	68bb      	ldr	r3, [r7, #8]
    f5a8:	2b00      	cmp	r3, #0
    f5aa:	da00      	bge.n	f5ae <fp_div_2d+0x66>
    f5ac:	331f      	adds	r3, #31
    f5ae:	115b      	asrs	r3, r3, #5
    f5b0:	001a      	movs	r2, r3
    f5b2:	687b      	ldr	r3, [r7, #4]
    f5b4:	0011      	movs	r1, r2
    f5b6:	0018      	movs	r0, r3
    f5b8:	f000 fa92 	bl	fae0 <fp_rshd>
  }

  /* shift any bit count < DIGIT_BIT */
  D = (b % DIGIT_BIT);
    f5bc:	68bb      	ldr	r3, [r7, #8]
    f5be:	4a21      	ldr	r2, [pc, #132]	; (f644 <fp_div_2d+0xfc>)
    f5c0:	4013      	ands	r3, r2
    f5c2:	d504      	bpl.n	f5ce <fp_div_2d+0x86>
    f5c4:	3b01      	subs	r3, #1
    f5c6:	2220      	movs	r2, #32
    f5c8:	4252      	negs	r2, r2
    f5ca:	4313      	orrs	r3, r2
    f5cc:	3301      	adds	r3, #1
    f5ce:	617b      	str	r3, [r7, #20]
  if (D != 0) {
    f5d0:	697b      	ldr	r3, [r7, #20]
    f5d2:	2b00      	cmp	r3, #0
    f5d4:	d005      	beq.n	f5e2 <fp_div_2d+0x9a>
    fp_rshb(c, D);
    f5d6:	697a      	ldr	r2, [r7, #20]
    f5d8:	687b      	ldr	r3, [r7, #4]
    f5da:	0011      	movs	r1, r2
    f5dc:	0018      	movs	r0, r3
    f5de:	f000 fa1b 	bl	fa18 <fp_rshb>
  }

  /* get the remainder if a is not changed in calculating c */
  if (a != c && d != NULL) {
    f5e2:	68fa      	ldr	r2, [r7, #12]
    f5e4:	687b      	ldr	r3, [r7, #4]
    f5e6:	429a      	cmp	r2, r3
    f5e8:	d00e      	beq.n	f608 <fp_div_2d+0xc0>
    f5ea:	683b      	ldr	r3, [r7, #0]
    f5ec:	2b00      	cmp	r3, #0
    f5ee:	d00b      	beq.n	f608 <fp_div_2d+0xc0>
    fp_mod_2d (a, b, d);
    f5f0:	683a      	ldr	r2, [r7, #0]
    f5f2:	68b9      	ldr	r1, [r7, #8]
    f5f4:	68fb      	ldr	r3, [r7, #12]
    f5f6:	0018      	movs	r0, r3
    f5f8:	f000 f826 	bl	f648 <fp_mod_2d>
  }

  fp_clamp (c);
    f5fc:	e004      	b.n	f608 <fp_div_2d+0xc0>
    f5fe:	687b      	ldr	r3, [r7, #4]
    f600:	681b      	ldr	r3, [r3, #0]
    f602:	1e5a      	subs	r2, r3, #1
    f604:	687b      	ldr	r3, [r7, #4]
    f606:	601a      	str	r2, [r3, #0]
    f608:	687b      	ldr	r3, [r7, #4]
    f60a:	681b      	ldr	r3, [r3, #0]
    f60c:	2b00      	cmp	r3, #0
    f60e:	d00a      	beq.n	f626 <fp_div_2d+0xde>
    f610:	687b      	ldr	r3, [r7, #4]
    f612:	681b      	ldr	r3, [r3, #0]
    f614:	3b01      	subs	r3, #1
    f616:	687a      	ldr	r2, [r7, #4]
    f618:	3302      	adds	r3, #2
    f61a:	009b      	lsls	r3, r3, #2
    f61c:	18d3      	adds	r3, r2, r3
    f61e:	3304      	adds	r3, #4
    f620:	681b      	ldr	r3, [r3, #0]
    f622:	2b00      	cmp	r3, #0
    f624:	d0eb      	beq.n	f5fe <fp_div_2d+0xb6>
    f626:	687b      	ldr	r3, [r7, #4]
    f628:	681b      	ldr	r3, [r3, #0]
    f62a:	2b00      	cmp	r3, #0
    f62c:	d002      	beq.n	f634 <fp_div_2d+0xec>
    f62e:	687b      	ldr	r3, [r7, #4]
    f630:	685a      	ldr	r2, [r3, #4]
    f632:	e000      	b.n	f636 <fp_div_2d+0xee>
    f634:	2200      	movs	r2, #0
    f636:	687b      	ldr	r3, [r7, #4]
    f638:	605a      	str	r2, [r3, #4]
    f63a:	e000      	b.n	f63e <fp_div_2d+0xf6>
  if (b <= 0) {
    fp_copy (a, c);
    if (d != NULL) {
      fp_zero (d);
    }
    return;
    f63c:	46c0      	nop			; (mov r8, r8)
  if (a != c && d != NULL) {
    fp_mod_2d (a, b, d);
  }

  fp_clamp (c);
}
    f63e:	46bd      	mov	sp, r7
    f640:	b006      	add	sp, #24
    f642:	bd80      	pop	{r7, pc}
    f644:	8000001f 	.word	0x8000001f

0000f648 <fp_mod_2d>:
  return err;
}

/* c = a mod 2**d */
void fp_mod_2d(fp_int *a, int b, fp_int *c)
{
    f648:	b580      	push	{r7, lr}
    f64a:	b086      	sub	sp, #24
    f64c:	af00      	add	r7, sp, #0
    f64e:	60f8      	str	r0, [r7, #12]
    f650:	60b9      	str	r1, [r7, #8]
    f652:	607a      	str	r2, [r7, #4]
   int x;

   /* zero if count less than or equal to zero */
   if (b <= 0) {
    f654:	68bb      	ldr	r3, [r7, #8]
    f656:	2b00      	cmp	r3, #0
    f658:	dc04      	bgt.n	f664 <fp_mod_2d+0x1c>
      fp_zero(c);
    f65a:	687b      	ldr	r3, [r7, #4]
    f65c:	0018      	movs	r0, r3
    f65e:	f000 faf5 	bl	fc4c <fp_zero>
      return;
    f662:	e065      	b.n	f730 <fp_mod_2d+0xe8>
   }

   /* get copy of input */
   fp_copy(a, c);
    f664:	687a      	ldr	r2, [r7, #4]
    f666:	68fb      	ldr	r3, [r7, #12]
    f668:	0011      	movs	r1, r2
    f66a:	0018      	movs	r0, r3
    f66c:	f000 fba8 	bl	fdc0 <fp_copy>

   /* if 2**d is larger than we just return */
   if (b >= (DIGIT_BIT * a->used)) {
    f670:	68fb      	ldr	r3, [r7, #12]
    f672:	681b      	ldr	r3, [r3, #0]
    f674:	015a      	lsls	r2, r3, #5
    f676:	68bb      	ldr	r3, [r7, #8]
    f678:	429a      	cmp	r2, r3
    f67a:	dd58      	ble.n	f72e <fp_mod_2d+0xe6>
      return;
   }

  /* zero digits above the last digit of the modulus */
  for (x = (b / DIGIT_BIT) + ((b % DIGIT_BIT) == 0 ? 0 : 1); x < c->used; x++) {
    f67c:	68bb      	ldr	r3, [r7, #8]
    f67e:	2b00      	cmp	r3, #0
    f680:	da00      	bge.n	f684 <fp_mod_2d+0x3c>
    f682:	331f      	adds	r3, #31
    f684:	115b      	asrs	r3, r3, #5
    f686:	0019      	movs	r1, r3
    f688:	68bb      	ldr	r3, [r7, #8]
    f68a:	221f      	movs	r2, #31
    f68c:	4013      	ands	r3, r2
    f68e:	1e5a      	subs	r2, r3, #1
    f690:	4193      	sbcs	r3, r2
    f692:	b2db      	uxtb	r3, r3
    f694:	18cb      	adds	r3, r1, r3
    f696:	617b      	str	r3, [r7, #20]
    f698:	e00a      	b.n	f6b0 <fp_mod_2d+0x68>
    c->dp[x] = 0;
    f69a:	687a      	ldr	r2, [r7, #4]
    f69c:	697b      	ldr	r3, [r7, #20]
    f69e:	3302      	adds	r3, #2
    f6a0:	009b      	lsls	r3, r3, #2
    f6a2:	18d3      	adds	r3, r2, r3
    f6a4:	3304      	adds	r3, #4
    f6a6:	2200      	movs	r2, #0
    f6a8:	601a      	str	r2, [r3, #0]
   if (b >= (DIGIT_BIT * a->used)) {
      return;
   }

  /* zero digits above the last digit of the modulus */
  for (x = (b / DIGIT_BIT) + ((b % DIGIT_BIT) == 0 ? 0 : 1); x < c->used; x++) {
    f6aa:	697b      	ldr	r3, [r7, #20]
    f6ac:	3301      	adds	r3, #1
    f6ae:	617b      	str	r3, [r7, #20]
    f6b0:	687b      	ldr	r3, [r7, #4]
    f6b2:	681a      	ldr	r2, [r3, #0]
    f6b4:	697b      	ldr	r3, [r7, #20]
    f6b6:	429a      	cmp	r2, r3
    f6b8:	dcef      	bgt.n	f69a <fp_mod_2d+0x52>
    c->dp[x] = 0;
  }
  /* clear the digit that is not completely outside/inside the modulus */
  c->dp[b / DIGIT_BIT] &= ~((fp_digit)0) >> (DIGIT_BIT - b);
    f6ba:	68bb      	ldr	r3, [r7, #8]
    f6bc:	2b00      	cmp	r3, #0
    f6be:	da00      	bge.n	f6c2 <fp_mod_2d+0x7a>
    f6c0:	331f      	adds	r3, #31
    f6c2:	115b      	asrs	r3, r3, #5
    f6c4:	001a      	movs	r2, r3
    f6c6:	6879      	ldr	r1, [r7, #4]
    f6c8:	1c93      	adds	r3, r2, #2
    f6ca:	009b      	lsls	r3, r3, #2
    f6cc:	18cb      	adds	r3, r1, r3
    f6ce:	3304      	adds	r3, #4
    f6d0:	681b      	ldr	r3, [r3, #0]
    f6d2:	68b9      	ldr	r1, [r7, #8]
    f6d4:	2020      	movs	r0, #32
    f6d6:	1a41      	subs	r1, r0, r1
    f6d8:	2001      	movs	r0, #1
    f6da:	4240      	negs	r0, r0
    f6dc:	40c8      	lsrs	r0, r1
    f6de:	0001      	movs	r1, r0
    f6e0:	4019      	ands	r1, r3
    f6e2:	6878      	ldr	r0, [r7, #4]
    f6e4:	1c93      	adds	r3, r2, #2
    f6e6:	009b      	lsls	r3, r3, #2
    f6e8:	18c3      	adds	r3, r0, r3
    f6ea:	3304      	adds	r3, #4
    f6ec:	6019      	str	r1, [r3, #0]
  fp_clamp (c);
    f6ee:	e004      	b.n	f6fa <fp_mod_2d+0xb2>
    f6f0:	687b      	ldr	r3, [r7, #4]
    f6f2:	681b      	ldr	r3, [r3, #0]
    f6f4:	1e5a      	subs	r2, r3, #1
    f6f6:	687b      	ldr	r3, [r7, #4]
    f6f8:	601a      	str	r2, [r3, #0]
    f6fa:	687b      	ldr	r3, [r7, #4]
    f6fc:	681b      	ldr	r3, [r3, #0]
    f6fe:	2b00      	cmp	r3, #0
    f700:	d00a      	beq.n	f718 <fp_mod_2d+0xd0>
    f702:	687b      	ldr	r3, [r7, #4]
    f704:	681b      	ldr	r3, [r3, #0]
    f706:	3b01      	subs	r3, #1
    f708:	687a      	ldr	r2, [r7, #4]
    f70a:	3302      	adds	r3, #2
    f70c:	009b      	lsls	r3, r3, #2
    f70e:	18d3      	adds	r3, r2, r3
    f710:	3304      	adds	r3, #4
    f712:	681b      	ldr	r3, [r3, #0]
    f714:	2b00      	cmp	r3, #0
    f716:	d0eb      	beq.n	f6f0 <fp_mod_2d+0xa8>
    f718:	687b      	ldr	r3, [r7, #4]
    f71a:	681b      	ldr	r3, [r3, #0]
    f71c:	2b00      	cmp	r3, #0
    f71e:	d002      	beq.n	f726 <fp_mod_2d+0xde>
    f720:	687b      	ldr	r3, [r7, #4]
    f722:	685a      	ldr	r2, [r3, #4]
    f724:	e000      	b.n	f728 <fp_mod_2d+0xe0>
    f726:	2200      	movs	r2, #0
    f728:	687b      	ldr	r3, [r7, #4]
    f72a:	605a      	str	r2, [r3, #4]
    f72c:	e000      	b.n	f730 <fp_mod_2d+0xe8>
   /* get copy of input */
   fp_copy(a, c);

   /* if 2**d is larger than we just return */
   if (b >= (DIGIT_BIT * a->used)) {
      return;
    f72e:	46c0      	nop			; (mov r8, r8)
    c->dp[x] = 0;
  }
  /* clear the digit that is not completely outside/inside the modulus */
  c->dp[b / DIGIT_BIT] &= ~((fp_digit)0) >> (DIGIT_BIT - b);
  fp_clamp (c);
}
    f730:	46bd      	mov	sp, r7
    f732:	b006      	add	sp, #24
    f734:	bd80      	pop	{r7, pc}
    f736:	46c0      	nop			; (mov r8, r8)

0000f738 <fp_read_unsigned_bin>:
#endif
  return FP_OKAY;
}

void fp_read_unsigned_bin(fp_int *a, const unsigned char *b, int c)
{
    f738:	b580      	push	{r7, lr}
    f73a:	b088      	sub	sp, #32
    f73c:	af00      	add	r7, sp, #0
    f73e:	60f8      	str	r0, [r7, #12]
    f740:	60b9      	str	r1, [r7, #8]
    f742:	607a      	str	r2, [r7, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
  const word32 maxC = (a->size * sizeof(fp_digit));
    f744:	68fb      	ldr	r3, [r7, #12]
    f746:	689b      	ldr	r3, [r3, #8]
    f748:	009b      	lsls	r3, r3, #2
    f74a:	61fb      	str	r3, [r7, #28]
#else
  const word32 maxC = (FP_SIZE * sizeof(fp_digit));
#endif

  /* zero the int */
  fp_zero (a);
    f74c:	68fb      	ldr	r3, [r7, #12]
    f74e:	0018      	movs	r0, r3
    f750:	f000 fa7c 	bl	fc4c <fp_zero>

  /* if input b excess max, then truncate */
  if (c > 0 && (word32)c > maxC) {
    f754:	687b      	ldr	r3, [r7, #4]
    f756:	2b00      	cmp	r3, #0
    f758:	dd0f      	ble.n	f77a <fp_read_unsigned_bin+0x42>
    f75a:	687a      	ldr	r2, [r7, #4]
    f75c:	69fb      	ldr	r3, [r7, #28]
    f75e:	429a      	cmp	r2, r3
    f760:	d90b      	bls.n	f77a <fp_read_unsigned_bin+0x42>
     int excess = (c - maxC);
    f762:	687a      	ldr	r2, [r7, #4]
    f764:	69fb      	ldr	r3, [r7, #28]
    f766:	1ad3      	subs	r3, r2, r3
    f768:	61bb      	str	r3, [r7, #24]
     c -= excess;
    f76a:	687a      	ldr	r2, [r7, #4]
    f76c:	69bb      	ldr	r3, [r7, #24]
    f76e:	1ad3      	subs	r3, r2, r3
    f770:	607b      	str	r3, [r7, #4]
     b += excess;
    f772:	69bb      	ldr	r3, [r7, #24]
    f774:	68ba      	ldr	r2, [r7, #8]
    f776:	18d3      	adds	r3, r2, r3
    f778:	60bb      	str	r3, [r7, #8]
  /* But not for both simultaneously */
#if defined(LITTLE_ENDIAN_ORDER) && defined(BIG_ENDIAN_ORDER)
#error Both LITTLE_ENDIAN_ORDER and BIG_ENDIAN_ORDER defined.
#endif
  {
     unsigned char *pd = (unsigned char *)a->dp;
    f77a:	68fb      	ldr	r3, [r7, #12]
    f77c:	330c      	adds	r3, #12
    f77e:	617b      	str	r3, [r7, #20]

     a->used = (c + sizeof(fp_digit) - 1)/sizeof(fp_digit);
    f780:	687b      	ldr	r3, [r7, #4]
    f782:	3303      	adds	r3, #3
    f784:	089b      	lsrs	r3, r3, #2
    f786:	001a      	movs	r2, r3
    f788:	68fb      	ldr	r3, [r7, #12]
    f78a:	601a      	str	r2, [r3, #0]
                     idx -= 4;
                 } while ((c -= 4) > 0);
       }
     }
#else
     for (c -= 1; c >= 0; c -= 1) {
    f78c:	687b      	ldr	r3, [r7, #4]
    f78e:	3b01      	subs	r3, #1
    f790:	607b      	str	r3, [r7, #4]
    f792:	e00a      	b.n	f7aa <fp_read_unsigned_bin+0x72>
       pd[c] = *b++;
    f794:	687b      	ldr	r3, [r7, #4]
    f796:	697a      	ldr	r2, [r7, #20]
    f798:	18d2      	adds	r2, r2, r3
    f79a:	68bb      	ldr	r3, [r7, #8]
    f79c:	1c59      	adds	r1, r3, #1
    f79e:	60b9      	str	r1, [r7, #8]
    f7a0:	781b      	ldrb	r3, [r3, #0]
    f7a2:	7013      	strb	r3, [r2, #0]
                     idx -= 4;
                 } while ((c -= 4) > 0);
       }
     }
#else
     for (c -= 1; c >= 0; c -= 1) {
    f7a4:	687b      	ldr	r3, [r7, #4]
    f7a6:	3b01      	subs	r3, #1
    f7a8:	607b      	str	r3, [r7, #4]
    f7aa:	687b      	ldr	r3, [r7, #4]
    f7ac:	2b00      	cmp	r3, #0
    f7ae:	daf1      	bge.n	f794 <fp_read_unsigned_bin+0x5c>
     if (a->used == 0) {
         a->used = 1;
     }
  }
#endif
  fp_clamp (a);
    f7b0:	e004      	b.n	f7bc <fp_read_unsigned_bin+0x84>
    f7b2:	68fb      	ldr	r3, [r7, #12]
    f7b4:	681b      	ldr	r3, [r3, #0]
    f7b6:	1e5a      	subs	r2, r3, #1
    f7b8:	68fb      	ldr	r3, [r7, #12]
    f7ba:	601a      	str	r2, [r3, #0]
    f7bc:	68fb      	ldr	r3, [r7, #12]
    f7be:	681b      	ldr	r3, [r3, #0]
    f7c0:	2b00      	cmp	r3, #0
    f7c2:	d00a      	beq.n	f7da <fp_read_unsigned_bin+0xa2>
    f7c4:	68fb      	ldr	r3, [r7, #12]
    f7c6:	681b      	ldr	r3, [r3, #0]
    f7c8:	3b01      	subs	r3, #1
    f7ca:	68fa      	ldr	r2, [r7, #12]
    f7cc:	3302      	adds	r3, #2
    f7ce:	009b      	lsls	r3, r3, #2
    f7d0:	18d3      	adds	r3, r2, r3
    f7d2:	3304      	adds	r3, #4
    f7d4:	681b      	ldr	r3, [r3, #0]
    f7d6:	2b00      	cmp	r3, #0
    f7d8:	d0eb      	beq.n	f7b2 <fp_read_unsigned_bin+0x7a>
    f7da:	68fb      	ldr	r3, [r7, #12]
    f7dc:	681b      	ldr	r3, [r3, #0]
    f7de:	2b00      	cmp	r3, #0
    f7e0:	d002      	beq.n	f7e8 <fp_read_unsigned_bin+0xb0>
    f7e2:	68fb      	ldr	r3, [r7, #12]
    f7e4:	685a      	ldr	r2, [r3, #4]
    f7e6:	e000      	b.n	f7ea <fp_read_unsigned_bin+0xb2>
    f7e8:	2200      	movs	r2, #0
    f7ea:	68fb      	ldr	r3, [r7, #12]
    f7ec:	605a      	str	r2, [r3, #4]
}
    f7ee:	46c0      	nop			; (mov r8, r8)
    f7f0:	46bd      	mov	sp, r7
    f7f2:	b008      	add	sp, #32
    f7f4:	bd80      	pop	{r7, pc}
    f7f6:	46c0      	nop			; (mov r8, r8)

0000f7f8 <fp_to_unsigned_bin_at_pos>:

int fp_to_unsigned_bin_at_pos(int x, fp_int *t, unsigned char *b)
{
    f7f8:	b580      	push	{r7, lr}
    f7fa:	b088      	sub	sp, #32
    f7fc:	af00      	add	r7, sp, #0
    f7fe:	60f8      	str	r0, [r7, #12]
    f800:	60b9      	str	r1, [r7, #8]
    f802:	607a      	str	r2, [r7, #4]
#if DIGIT_BIT == 64 || DIGIT_BIT == 32
   int i, j;
   fp_digit n;

   for (j=0,i=0; i<t->used-1; ) {
    f804:	2300      	movs	r3, #0
    f806:	61bb      	str	r3, [r7, #24]
    f808:	2300      	movs	r3, #0
    f80a:	61fb      	str	r3, [r7, #28]
    f80c:	e021      	b.n	f852 <fp_to_unsigned_bin_at_pos+0x5a>
       b[x++] = (unsigned char)(t->dp[i] >> j);
    f80e:	68fb      	ldr	r3, [r7, #12]
    f810:	1c5a      	adds	r2, r3, #1
    f812:	60fa      	str	r2, [r7, #12]
    f814:	001a      	movs	r2, r3
    f816:	687b      	ldr	r3, [r7, #4]
    f818:	189a      	adds	r2, r3, r2
    f81a:	68b9      	ldr	r1, [r7, #8]
    f81c:	69fb      	ldr	r3, [r7, #28]
    f81e:	3302      	adds	r3, #2
    f820:	009b      	lsls	r3, r3, #2
    f822:	18cb      	adds	r3, r1, r3
    f824:	3304      	adds	r3, #4
    f826:	6819      	ldr	r1, [r3, #0]
    f828:	69bb      	ldr	r3, [r7, #24]
    f82a:	40d9      	lsrs	r1, r3
    f82c:	000b      	movs	r3, r1
    f82e:	b2db      	uxtb	r3, r3
    f830:	7013      	strb	r3, [r2, #0]
       j += 8;
    f832:	69bb      	ldr	r3, [r7, #24]
    f834:	3308      	adds	r3, #8
    f836:	61bb      	str	r3, [r7, #24]
       i += j == DIGIT_BIT;
    f838:	69bb      	ldr	r3, [r7, #24]
    f83a:	3b20      	subs	r3, #32
    f83c:	425a      	negs	r2, r3
    f83e:	4153      	adcs	r3, r2
    f840:	b2db      	uxtb	r3, r3
    f842:	001a      	movs	r2, r3
    f844:	69fb      	ldr	r3, [r7, #28]
    f846:	189b      	adds	r3, r3, r2
    f848:	61fb      	str	r3, [r7, #28]
       j &= DIGIT_BIT - 1;
    f84a:	69bb      	ldr	r3, [r7, #24]
    f84c:	221f      	movs	r2, #31
    f84e:	4013      	ands	r3, r2
    f850:	61bb      	str	r3, [r7, #24]
{
#if DIGIT_BIT == 64 || DIGIT_BIT == 32
   int i, j;
   fp_digit n;

   for (j=0,i=0; i<t->used-1; ) {
    f852:	68bb      	ldr	r3, [r7, #8]
    f854:	681b      	ldr	r3, [r3, #0]
    f856:	1e5a      	subs	r2, r3, #1
    f858:	69fb      	ldr	r3, [r7, #28]
    f85a:	429a      	cmp	r2, r3
    f85c:	dcd7      	bgt.n	f80e <fp_to_unsigned_bin_at_pos+0x16>
       b[x++] = (unsigned char)(t->dp[i] >> j);
       j += 8;
       i += j == DIGIT_BIT;
       j &= DIGIT_BIT - 1;
   }
   n = t->dp[i];
    f85e:	68ba      	ldr	r2, [r7, #8]
    f860:	69fb      	ldr	r3, [r7, #28]
    f862:	3302      	adds	r3, #2
    f864:	009b      	lsls	r3, r3, #2
    f866:	18d3      	adds	r3, r2, r3
    f868:	3304      	adds	r3, #4
    f86a:	681b      	ldr	r3, [r3, #0]
    f86c:	617b      	str	r3, [r7, #20]
   while (n != 0) {
    f86e:	e00b      	b.n	f888 <fp_to_unsigned_bin_at_pos+0x90>
       b[x++] = (unsigned char)n;
    f870:	68fb      	ldr	r3, [r7, #12]
    f872:	1c5a      	adds	r2, r3, #1
    f874:	60fa      	str	r2, [r7, #12]
    f876:	001a      	movs	r2, r3
    f878:	687b      	ldr	r3, [r7, #4]
    f87a:	189b      	adds	r3, r3, r2
    f87c:	697a      	ldr	r2, [r7, #20]
    f87e:	b2d2      	uxtb	r2, r2
    f880:	701a      	strb	r2, [r3, #0]
       n >>= 8;
    f882:	697b      	ldr	r3, [r7, #20]
    f884:	0a1b      	lsrs	r3, r3, #8
    f886:	617b      	str	r3, [r7, #20]
       j += 8;
       i += j == DIGIT_BIT;
       j &= DIGIT_BIT - 1;
   }
   n = t->dp[i];
   while (n != 0) {
    f888:	697b      	ldr	r3, [r7, #20]
    f88a:	2b00      	cmp	r3, #0
    f88c:	d1f0      	bne.n	f870 <fp_to_unsigned_bin_at_pos+0x78>
       b[x++] = (unsigned char)n;
       n >>= 8;
   }
   return x;
    f88e:	68fb      	ldr	r3, [r7, #12]
      b[x++] = (unsigned char) (t->dp[0] & 255);
      fp_div_2d (t, 8, t, NULL);
  }
  return x;
#endif
}
    f890:	0018      	movs	r0, r3
    f892:	46bd      	mov	sp, r7
    f894:	b008      	add	sp, #32
    f896:	bd80      	pop	{r7, pc}

0000f898 <fp_to_unsigned_bin>:

int fp_to_unsigned_bin(fp_int *a, unsigned char *b)
{
    f898:	b580      	push	{r7, lr}
    f89a:	b086      	sub	sp, #24
    f89c:	af00      	add	r7, sp, #0
    f89e:	6078      	str	r0, [r7, #4]
    f8a0:	6039      	str	r1, [r7, #0]
#else
   fp_int *t;
#endif

#ifdef WOLFSSL_SMALL_STACK
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_TMP_BUFFER);
    f8a2:	238b      	movs	r3, #139	; 0x8b
    f8a4:	009b      	lsls	r3, r3, #2
    f8a6:	0018      	movs	r0, r3
    f8a8:	f015 feec 	bl	25684 <malloc>
    f8ac:	0003      	movs	r3, r0
    f8ae:	617b      	str	r3, [r7, #20]
   if (t == NULL)
    f8b0:	697b      	ldr	r3, [r7, #20]
    f8b2:	2b00      	cmp	r3, #0
    f8b4:	d102      	bne.n	f8bc <fp_to_unsigned_bin+0x24>
       return FP_MEM;
    f8b6:	2302      	movs	r3, #2
    f8b8:	425b      	negs	r3, r3
    f8ba:	e01d      	b.n	f8f8 <fp_to_unsigned_bin+0x60>
#endif

  fp_init_copy(t, a);
    f8bc:	687a      	ldr	r2, [r7, #4]
    f8be:	697b      	ldr	r3, [r7, #20]
    f8c0:	0011      	movs	r1, r2
    f8c2:	0018      	movs	r0, r3
    f8c4:	f000 fabc 	bl	fe40 <fp_init_copy>

  x = fp_to_unsigned_bin_at_pos(0, t, b);
    f8c8:	683a      	ldr	r2, [r7, #0]
    f8ca:	697b      	ldr	r3, [r7, #20]
    f8cc:	0019      	movs	r1, r3
    f8ce:	2000      	movs	r0, #0
    f8d0:	f7ff ff92 	bl	f7f8 <fp_to_unsigned_bin_at_pos>
    f8d4:	0003      	movs	r3, r0
    f8d6:	613b      	str	r3, [r7, #16]
  fp_reverse (b, x);
    f8d8:	693a      	ldr	r2, [r7, #16]
    f8da:	683b      	ldr	r3, [r7, #0]
    f8dc:	0011      	movs	r1, r2
    f8de:	0018      	movs	r0, r3
    f8e0:	f000 f964 	bl	fbac <fp_reverse>

#ifdef WOLFSSL_SMALL_STACK
  XFREE(t, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    f8e4:	697b      	ldr	r3, [r7, #20]
    f8e6:	60fb      	str	r3, [r7, #12]
    f8e8:	68fb      	ldr	r3, [r7, #12]
    f8ea:	2b00      	cmp	r3, #0
    f8ec:	d003      	beq.n	f8f6 <fp_to_unsigned_bin+0x5e>
    f8ee:	68fb      	ldr	r3, [r7, #12]
    f8f0:	0018      	movs	r0, r3
    f8f2:	f015 fed1 	bl	25698 <free>
#endif
  return FP_OKAY;
    f8f6:	2300      	movs	r3, #0
}
    f8f8:	0018      	movs	r0, r3
    f8fa:	46bd      	mov	sp, r7
    f8fc:	b006      	add	sp, #24
    f8fe:	bd80      	pop	{r7, pc}

0000f900 <fp_unsigned_bin_size>:
  return FP_OKAY;
#endif
}

int fp_unsigned_bin_size(fp_int *a)
{
    f900:	b580      	push	{r7, lr}
    f902:	b084      	sub	sp, #16
    f904:	af00      	add	r7, sp, #0
    f906:	6078      	str	r0, [r7, #4]
  int     size = fp_count_bits (a);
    f908:	687b      	ldr	r3, [r7, #4]
    f90a:	0018      	movs	r0, r3
    f90c:	f000 f82c 	bl	f968 <fp_count_bits>
    f910:	0003      	movs	r3, r0
    f912:	60fb      	str	r3, [r7, #12]
  return (size / 8 + ((size & 7) != 0 ? 1 : 0));
    f914:	68fb      	ldr	r3, [r7, #12]
    f916:	2b00      	cmp	r3, #0
    f918:	da00      	bge.n	f91c <fp_unsigned_bin_size+0x1c>
    f91a:	3307      	adds	r3, #7
    f91c:	10db      	asrs	r3, r3, #3
    f91e:	0019      	movs	r1, r3
    f920:	68fb      	ldr	r3, [r7, #12]
    f922:	2207      	movs	r2, #7
    f924:	4013      	ands	r3, r2
    f926:	1e5a      	subs	r2, r3, #1
    f928:	4193      	sbcs	r3, r2
    f92a:	b2db      	uxtb	r3, r3
    f92c:	18cb      	adds	r3, r1, r3
}
    f92e:	0018      	movs	r0, r3
    f930:	46bd      	mov	sp, r7
    f932:	b004      	add	sp, #16
    f934:	bd80      	pop	{r7, pc}
    f936:	46c0      	nop			; (mov r8, r8)

0000f938 <fp_set>:

void fp_set(fp_int *a, fp_digit b)
{
    f938:	b580      	push	{r7, lr}
    f93a:	b082      	sub	sp, #8
    f93c:	af00      	add	r7, sp, #0
    f93e:	6078      	str	r0, [r7, #4]
    f940:	6039      	str	r1, [r7, #0]
   fp_zero(a);
    f942:	687b      	ldr	r3, [r7, #4]
    f944:	0018      	movs	r0, r3
    f946:	f000 f981 	bl	fc4c <fp_zero>
   a->dp[0] = b;
    f94a:	687b      	ldr	r3, [r7, #4]
    f94c:	683a      	ldr	r2, [r7, #0]
    f94e:	60da      	str	r2, [r3, #12]
   a->used  = a->dp[0] ? 1 : 0;
    f950:	687b      	ldr	r3, [r7, #4]
    f952:	68db      	ldr	r3, [r3, #12]
    f954:	1e5a      	subs	r2, r3, #1
    f956:	4193      	sbcs	r3, r2
    f958:	b2db      	uxtb	r3, r3
    f95a:	001a      	movs	r2, r3
    f95c:	687b      	ldr	r3, [r7, #4]
    f95e:	601a      	str	r2, [r3, #0]
}
    f960:	46c0      	nop			; (mov r8, r8)
    f962:	46bd      	mov	sp, r7
    f964:	b002      	add	sp, #8
    f966:	bd80      	pop	{r7, pc}

0000f968 <fp_count_bits>:

    return MP_OKAY;
}

int fp_count_bits (fp_int * a)
{
    f968:	b580      	push	{r7, lr}
    f96a:	b084      	sub	sp, #16
    f96c:	af00      	add	r7, sp, #0
    f96e:	6078      	str	r0, [r7, #4]
  int     r;
  fp_digit q;

  /* shortcut */
  if (a->used == 0) {
    f970:	687b      	ldr	r3, [r7, #4]
    f972:	681b      	ldr	r3, [r3, #0]
    f974:	2b00      	cmp	r3, #0
    f976:	d101      	bne.n	f97c <fp_count_bits+0x14>
    return 0;
    f978:	2300      	movs	r3, #0
    f97a:	e019      	b.n	f9b0 <fp_count_bits+0x48>
  }

  /* get number of digits and add that */
  r = (a->used - 1) * DIGIT_BIT;
    f97c:	687b      	ldr	r3, [r7, #4]
    f97e:	681b      	ldr	r3, [r3, #0]
    f980:	3b01      	subs	r3, #1
    f982:	015b      	lsls	r3, r3, #5
    f984:	60fb      	str	r3, [r7, #12]

  /* take the last digit and count the bits in it */
  q = a->dp[a->used - 1];
    f986:	687b      	ldr	r3, [r7, #4]
    f988:	681b      	ldr	r3, [r3, #0]
    f98a:	3b01      	subs	r3, #1
    f98c:	687a      	ldr	r2, [r7, #4]
    f98e:	3302      	adds	r3, #2
    f990:	009b      	lsls	r3, r3, #2
    f992:	18d3      	adds	r3, r2, r3
    f994:	3304      	adds	r3, #4
    f996:	681b      	ldr	r3, [r3, #0]
    f998:	60bb      	str	r3, [r7, #8]
  while (q > ((fp_digit) 0)) {
    f99a:	e005      	b.n	f9a8 <fp_count_bits+0x40>
    ++r;
    f99c:	68fb      	ldr	r3, [r7, #12]
    f99e:	3301      	adds	r3, #1
    f9a0:	60fb      	str	r3, [r7, #12]
    q >>= ((fp_digit) 1);
    f9a2:	68bb      	ldr	r3, [r7, #8]
    f9a4:	085b      	lsrs	r3, r3, #1
    f9a6:	60bb      	str	r3, [r7, #8]
  /* get number of digits and add that */
  r = (a->used - 1) * DIGIT_BIT;

  /* take the last digit and count the bits in it */
  q = a->dp[a->used - 1];
  while (q > ((fp_digit) 0)) {
    f9a8:	68bb      	ldr	r3, [r7, #8]
    f9aa:	2b00      	cmp	r3, #0
    f9ac:	d1f6      	bne.n	f99c <fp_count_bits+0x34>
    ++r;
    q >>= ((fp_digit) 1);
  }

  return r;
    f9ae:	68fb      	ldr	r3, [r7, #12]
}
    f9b0:	0018      	movs	r0, r3
    f9b2:	46bd      	mov	sp, r7
    f9b4:	b004      	add	sp, #16
    f9b6:	bd80      	pop	{r7, pc}

0000f9b8 <fp_leading_bit>:

int fp_leading_bit(fp_int *a)
{
    f9b8:	b580      	push	{r7, lr}
    f9ba:	b086      	sub	sp, #24
    f9bc:	af00      	add	r7, sp, #0
    f9be:	6078      	str	r0, [r7, #4]
    int bit = 0;
    f9c0:	2300      	movs	r3, #0
    f9c2:	617b      	str	r3, [r7, #20]

    if (a->used != 0) {
    f9c4:	687b      	ldr	r3, [r7, #4]
    f9c6:	681b      	ldr	r3, [r3, #0]
    f9c8:	2b00      	cmp	r3, #0
    f9ca:	d020      	beq.n	fa0e <fp_leading_bit+0x56>
        fp_digit q = a->dp[a->used - 1];
    f9cc:	687b      	ldr	r3, [r7, #4]
    f9ce:	681b      	ldr	r3, [r3, #0]
    f9d0:	3b01      	subs	r3, #1
    f9d2:	687a      	ldr	r2, [r7, #4]
    f9d4:	3302      	adds	r3, #2
    f9d6:	009b      	lsls	r3, r3, #2
    f9d8:	18d3      	adds	r3, r2, r3
    f9da:	3304      	adds	r3, #4
    f9dc:	681b      	ldr	r3, [r3, #0]
    f9de:	613b      	str	r3, [r7, #16]
        int qSz = sizeof(fp_digit);
    f9e0:	2304      	movs	r3, #4
    f9e2:	60fb      	str	r3, [r7, #12]

        while (qSz > 0) {
    f9e4:	e010      	b.n	fa08 <fp_leading_bit+0x50>
            if ((unsigned char)q != 0)
    f9e6:	693b      	ldr	r3, [r7, #16]
    f9e8:	b2db      	uxtb	r3, r3
    f9ea:	2b00      	cmp	r3, #0
    f9ec:	d006      	beq.n	f9fc <fp_leading_bit+0x44>
                bit = (q & 0x80) != 0;
    f9ee:	693b      	ldr	r3, [r7, #16]
    f9f0:	2280      	movs	r2, #128	; 0x80
    f9f2:	4013      	ands	r3, r2
    f9f4:	1e5a      	subs	r2, r3, #1
    f9f6:	4193      	sbcs	r3, r2
    f9f8:	b2db      	uxtb	r3, r3
    f9fa:	617b      	str	r3, [r7, #20]
            q >>= 8;
    f9fc:	693b      	ldr	r3, [r7, #16]
    f9fe:	0a1b      	lsrs	r3, r3, #8
    fa00:	613b      	str	r3, [r7, #16]
            qSz--;
    fa02:	68fb      	ldr	r3, [r7, #12]
    fa04:	3b01      	subs	r3, #1
    fa06:	60fb      	str	r3, [r7, #12]

    if (a->used != 0) {
        fp_digit q = a->dp[a->used - 1];
        int qSz = sizeof(fp_digit);

        while (qSz > 0) {
    fa08:	68fb      	ldr	r3, [r7, #12]
    fa0a:	2b00      	cmp	r3, #0
    fa0c:	dceb      	bgt.n	f9e6 <fp_leading_bit+0x2e>
            q >>= 8;
            qSz--;
        }
    }

    return bit;
    fa0e:	697b      	ldr	r3, [r7, #20]
}
    fa10:	0018      	movs	r0, r3
    fa12:	46bd      	mov	sp, r7
    fa14:	b006      	add	sp, #24
    fa16:	bd80      	pop	{r7, pc}

0000fa18 <fp_rshb>:
}


/* right shift by bit count */
void fp_rshb(fp_int *c, int x)
{
    fa18:	b580      	push	{r7, lr}
    fa1a:	b088      	sub	sp, #32
    fa1c:	af00      	add	r7, sp, #0
    fa1e:	6078      	str	r0, [r7, #4]
    fa20:	6039      	str	r1, [r7, #0]
    fp_digit *tmpc, mask, shift;
    fp_digit r, rr;
    fp_digit D = x;
    fa22:	683b      	ldr	r3, [r7, #0]
    fa24:	617b      	str	r3, [r7, #20]

    /* mask */
    mask = (((fp_digit)1) << D) - 1;
    fa26:	2201      	movs	r2, #1
    fa28:	697b      	ldr	r3, [r7, #20]
    fa2a:	409a      	lsls	r2, r3
    fa2c:	0013      	movs	r3, r2
    fa2e:	3b01      	subs	r3, #1
    fa30:	613b      	str	r3, [r7, #16]

    /* shift for lsb */
    shift = DIGIT_BIT - D;
    fa32:	697b      	ldr	r3, [r7, #20]
    fa34:	2220      	movs	r2, #32
    fa36:	1ad3      	subs	r3, r2, r3
    fa38:	60fb      	str	r3, [r7, #12]

    /* alias */
    tmpc = c->dp + (c->used - 1);
    fa3a:	687b      	ldr	r3, [r7, #4]
    fa3c:	330c      	adds	r3, #12
    fa3e:	001a      	movs	r2, r3
    fa40:	687b      	ldr	r3, [r7, #4]
    fa42:	681b      	ldr	r3, [r3, #0]
    fa44:	4925      	ldr	r1, [pc, #148]	; (fadc <fp_rshb+0xc4>)
    fa46:	468c      	mov	ip, r1
    fa48:	4463      	add	r3, ip
    fa4a:	009b      	lsls	r3, r3, #2
    fa4c:	18d3      	adds	r3, r2, r3
    fa4e:	61fb      	str	r3, [r7, #28]

    /* carry */
    r = 0;
    fa50:	2300      	movs	r3, #0
    fa52:	61bb      	str	r3, [r7, #24]
    for (x = c->used - 1; x >= 0; x--) {
    fa54:	687b      	ldr	r3, [r7, #4]
    fa56:	681b      	ldr	r3, [r3, #0]
    fa58:	3b01      	subs	r3, #1
    fa5a:	603b      	str	r3, [r7, #0]
    fa5c:	e017      	b.n	fa8e <fp_rshb+0x76>
      /* get the lower  bits of this word in a temp */
      rr = *tmpc & mask;
    fa5e:	69fb      	ldr	r3, [r7, #28]
    fa60:	681b      	ldr	r3, [r3, #0]
    fa62:	693a      	ldr	r2, [r7, #16]
    fa64:	4013      	ands	r3, r2
    fa66:	60bb      	str	r3, [r7, #8]

      /* shift the current word and mix in the carry bits from previous word */
      *tmpc = (*tmpc >> D) | (r << shift);
    fa68:	69fb      	ldr	r3, [r7, #28]
    fa6a:	681a      	ldr	r2, [r3, #0]
    fa6c:	697b      	ldr	r3, [r7, #20]
    fa6e:	40da      	lsrs	r2, r3
    fa70:	69b9      	ldr	r1, [r7, #24]
    fa72:	68fb      	ldr	r3, [r7, #12]
    fa74:	4099      	lsls	r1, r3
    fa76:	000b      	movs	r3, r1
    fa78:	431a      	orrs	r2, r3
    fa7a:	69fb      	ldr	r3, [r7, #28]
    fa7c:	601a      	str	r2, [r3, #0]
      --tmpc;
    fa7e:	69fb      	ldr	r3, [r7, #28]
    fa80:	3b04      	subs	r3, #4
    fa82:	61fb      	str	r3, [r7, #28]

      /* set the carry to the carry bits of the current word found above */
      r = rr;
    fa84:	68bb      	ldr	r3, [r7, #8]
    fa86:	61bb      	str	r3, [r7, #24]
    /* alias */
    tmpc = c->dp + (c->used - 1);

    /* carry */
    r = 0;
    for (x = c->used - 1; x >= 0; x--) {
    fa88:	683b      	ldr	r3, [r7, #0]
    fa8a:	3b01      	subs	r3, #1
    fa8c:	603b      	str	r3, [r7, #0]
    fa8e:	683b      	ldr	r3, [r7, #0]
    fa90:	2b00      	cmp	r3, #0
    fa92:	dae4      	bge.n	fa5e <fp_rshb+0x46>
      /* set the carry to the carry bits of the current word found above */
      r = rr;
    }

    /* clamp digits */
    fp_clamp(c);
    fa94:	e004      	b.n	faa0 <fp_rshb+0x88>
    fa96:	687b      	ldr	r3, [r7, #4]
    fa98:	681b      	ldr	r3, [r3, #0]
    fa9a:	1e5a      	subs	r2, r3, #1
    fa9c:	687b      	ldr	r3, [r7, #4]
    fa9e:	601a      	str	r2, [r3, #0]
    faa0:	687b      	ldr	r3, [r7, #4]
    faa2:	681b      	ldr	r3, [r3, #0]
    faa4:	2b00      	cmp	r3, #0
    faa6:	d00a      	beq.n	fabe <fp_rshb+0xa6>
    faa8:	687b      	ldr	r3, [r7, #4]
    faaa:	681b      	ldr	r3, [r3, #0]
    faac:	3b01      	subs	r3, #1
    faae:	687a      	ldr	r2, [r7, #4]
    fab0:	3302      	adds	r3, #2
    fab2:	009b      	lsls	r3, r3, #2
    fab4:	18d3      	adds	r3, r2, r3
    fab6:	3304      	adds	r3, #4
    fab8:	681b      	ldr	r3, [r3, #0]
    faba:	2b00      	cmp	r3, #0
    fabc:	d0eb      	beq.n	fa96 <fp_rshb+0x7e>
    fabe:	687b      	ldr	r3, [r7, #4]
    fac0:	681b      	ldr	r3, [r3, #0]
    fac2:	2b00      	cmp	r3, #0
    fac4:	d002      	beq.n	facc <fp_rshb+0xb4>
    fac6:	687b      	ldr	r3, [r7, #4]
    fac8:	685a      	ldr	r2, [r3, #4]
    faca:	e000      	b.n	face <fp_rshb+0xb6>
    facc:	2200      	movs	r2, #0
    face:	687b      	ldr	r3, [r7, #4]
    fad0:	605a      	str	r2, [r3, #4]
}
    fad2:	46c0      	nop			; (mov r8, r8)
    fad4:	46bd      	mov	sp, r7
    fad6:	b008      	add	sp, #32
    fad8:	bd80      	pop	{r7, pc}
    fada:	46c0      	nop			; (mov r8, r8)
    fadc:	3fffffff 	.word	0x3fffffff

0000fae0 <fp_rshd>:


void fp_rshd(fp_int *a, int x)
{
    fae0:	b580      	push	{r7, lr}
    fae2:	b084      	sub	sp, #16
    fae4:	af00      	add	r7, sp, #0
    fae6:	6078      	str	r0, [r7, #4]
    fae8:	6039      	str	r1, [r7, #0]
  int y;

  /* too many digits just zero and return */
  if (x >= a->used) {
    faea:	687b      	ldr	r3, [r7, #4]
    faec:	681a      	ldr	r2, [r3, #0]
    faee:	683b      	ldr	r3, [r7, #0]
    faf0:	429a      	cmp	r2, r3
    faf2:	dc04      	bgt.n	fafe <fp_rshd+0x1e>
     fp_zero(a);
    faf4:	687b      	ldr	r3, [r7, #4]
    faf6:	0018      	movs	r0, r3
    faf8:	f000 f8a8 	bl	fc4c <fp_zero>
     return;
    fafc:	e052      	b.n	fba4 <fp_rshd+0xc4>
  }

   /* shift */
   for (y = 0; y < a->used - x; y++) {
    fafe:	2300      	movs	r3, #0
    fb00:	60fb      	str	r3, [r7, #12]
    fb02:	e012      	b.n	fb2a <fp_rshd+0x4a>
      a->dp[y] = a->dp[y+x];
    fb04:	68fa      	ldr	r2, [r7, #12]
    fb06:	683b      	ldr	r3, [r7, #0]
    fb08:	18d3      	adds	r3, r2, r3
    fb0a:	687a      	ldr	r2, [r7, #4]
    fb0c:	3302      	adds	r3, #2
    fb0e:	009b      	lsls	r3, r3, #2
    fb10:	18d3      	adds	r3, r2, r3
    fb12:	3304      	adds	r3, #4
    fb14:	681a      	ldr	r2, [r3, #0]
    fb16:	6879      	ldr	r1, [r7, #4]
    fb18:	68fb      	ldr	r3, [r7, #12]
    fb1a:	3302      	adds	r3, #2
    fb1c:	009b      	lsls	r3, r3, #2
    fb1e:	18cb      	adds	r3, r1, r3
    fb20:	3304      	adds	r3, #4
    fb22:	601a      	str	r2, [r3, #0]
     fp_zero(a);
     return;
  }

   /* shift */
   for (y = 0; y < a->used - x; y++) {
    fb24:	68fb      	ldr	r3, [r7, #12]
    fb26:	3301      	adds	r3, #1
    fb28:	60fb      	str	r3, [r7, #12]
    fb2a:	687b      	ldr	r3, [r7, #4]
    fb2c:	681a      	ldr	r2, [r3, #0]
    fb2e:	683b      	ldr	r3, [r7, #0]
    fb30:	1ad2      	subs	r2, r2, r3
    fb32:	68fb      	ldr	r3, [r7, #12]
    fb34:	429a      	cmp	r2, r3
    fb36:	dce5      	bgt.n	fb04 <fp_rshd+0x24>
      a->dp[y] = a->dp[y+x];
   }

   /* zero rest */
   for (; y < a->used; y++) {
    fb38:	e00a      	b.n	fb50 <fp_rshd+0x70>
      a->dp[y] = 0;
    fb3a:	687a      	ldr	r2, [r7, #4]
    fb3c:	68fb      	ldr	r3, [r7, #12]
    fb3e:	3302      	adds	r3, #2
    fb40:	009b      	lsls	r3, r3, #2
    fb42:	18d3      	adds	r3, r2, r3
    fb44:	3304      	adds	r3, #4
    fb46:	2200      	movs	r2, #0
    fb48:	601a      	str	r2, [r3, #0]
   for (y = 0; y < a->used - x; y++) {
      a->dp[y] = a->dp[y+x];
   }

   /* zero rest */
   for (; y < a->used; y++) {
    fb4a:	68fb      	ldr	r3, [r7, #12]
    fb4c:	3301      	adds	r3, #1
    fb4e:	60fb      	str	r3, [r7, #12]
    fb50:	687b      	ldr	r3, [r7, #4]
    fb52:	681a      	ldr	r2, [r3, #0]
    fb54:	68fb      	ldr	r3, [r7, #12]
    fb56:	429a      	cmp	r2, r3
    fb58:	dcef      	bgt.n	fb3a <fp_rshd+0x5a>
      a->dp[y] = 0;
   }

   /* decrement count */
   a->used -= x;
    fb5a:	687b      	ldr	r3, [r7, #4]
    fb5c:	681a      	ldr	r2, [r3, #0]
    fb5e:	683b      	ldr	r3, [r7, #0]
    fb60:	1ad2      	subs	r2, r2, r3
    fb62:	687b      	ldr	r3, [r7, #4]
    fb64:	601a      	str	r2, [r3, #0]
   fp_clamp(a);
    fb66:	e004      	b.n	fb72 <fp_rshd+0x92>
    fb68:	687b      	ldr	r3, [r7, #4]
    fb6a:	681b      	ldr	r3, [r3, #0]
    fb6c:	1e5a      	subs	r2, r3, #1
    fb6e:	687b      	ldr	r3, [r7, #4]
    fb70:	601a      	str	r2, [r3, #0]
    fb72:	687b      	ldr	r3, [r7, #4]
    fb74:	681b      	ldr	r3, [r3, #0]
    fb76:	2b00      	cmp	r3, #0
    fb78:	d00a      	beq.n	fb90 <fp_rshd+0xb0>
    fb7a:	687b      	ldr	r3, [r7, #4]
    fb7c:	681b      	ldr	r3, [r3, #0]
    fb7e:	3b01      	subs	r3, #1
    fb80:	687a      	ldr	r2, [r7, #4]
    fb82:	3302      	adds	r3, #2
    fb84:	009b      	lsls	r3, r3, #2
    fb86:	18d3      	adds	r3, r2, r3
    fb88:	3304      	adds	r3, #4
    fb8a:	681b      	ldr	r3, [r3, #0]
    fb8c:	2b00      	cmp	r3, #0
    fb8e:	d0eb      	beq.n	fb68 <fp_rshd+0x88>
    fb90:	687b      	ldr	r3, [r7, #4]
    fb92:	681b      	ldr	r3, [r3, #0]
    fb94:	2b00      	cmp	r3, #0
    fb96:	d002      	beq.n	fb9e <fp_rshd+0xbe>
    fb98:	687b      	ldr	r3, [r7, #4]
    fb9a:	685a      	ldr	r2, [r3, #4]
    fb9c:	e000      	b.n	fba0 <fp_rshd+0xc0>
    fb9e:	2200      	movs	r2, #0
    fba0:	687b      	ldr	r3, [r7, #4]
    fba2:	605a      	str	r2, [r3, #4]
}
    fba4:	46bd      	mov	sp, r7
    fba6:	b004      	add	sp, #16
    fba8:	bd80      	pop	{r7, pc}
    fbaa:	46c0      	nop			; (mov r8, r8)

0000fbac <fp_reverse>:

/* reverse an array, used for radix code */
void fp_reverse (unsigned char *s, int len)
{
    fbac:	b580      	push	{r7, lr}
    fbae:	b086      	sub	sp, #24
    fbb0:	af00      	add	r7, sp, #0
    fbb2:	6078      	str	r0, [r7, #4]
    fbb4:	6039      	str	r1, [r7, #0]
  int     ix, iy;
  unsigned char t;

  ix = 0;
    fbb6:	2300      	movs	r3, #0
    fbb8:	617b      	str	r3, [r7, #20]
  iy = len - 1;
    fbba:	683b      	ldr	r3, [r7, #0]
    fbbc:	3b01      	subs	r3, #1
    fbbe:	613b      	str	r3, [r7, #16]
  while (ix < iy) {
    fbc0:	e01b      	b.n	fbfa <fp_reverse+0x4e>
    t     = s[ix];
    fbc2:	697b      	ldr	r3, [r7, #20]
    fbc4:	687a      	ldr	r2, [r7, #4]
    fbc6:	18d2      	adds	r2, r2, r3
    fbc8:	230f      	movs	r3, #15
    fbca:	18fb      	adds	r3, r7, r3
    fbcc:	7812      	ldrb	r2, [r2, #0]
    fbce:	701a      	strb	r2, [r3, #0]
    s[ix] = s[iy];
    fbd0:	697b      	ldr	r3, [r7, #20]
    fbd2:	687a      	ldr	r2, [r7, #4]
    fbd4:	18d3      	adds	r3, r2, r3
    fbd6:	693a      	ldr	r2, [r7, #16]
    fbd8:	6879      	ldr	r1, [r7, #4]
    fbda:	188a      	adds	r2, r1, r2
    fbdc:	7812      	ldrb	r2, [r2, #0]
    fbde:	701a      	strb	r2, [r3, #0]
    s[iy] = t;
    fbe0:	693b      	ldr	r3, [r7, #16]
    fbe2:	687a      	ldr	r2, [r7, #4]
    fbe4:	18d3      	adds	r3, r2, r3
    fbe6:	220f      	movs	r2, #15
    fbe8:	18ba      	adds	r2, r7, r2
    fbea:	7812      	ldrb	r2, [r2, #0]
    fbec:	701a      	strb	r2, [r3, #0]
    ++ix;
    fbee:	697b      	ldr	r3, [r7, #20]
    fbf0:	3301      	adds	r3, #1
    fbf2:	617b      	str	r3, [r7, #20]
    --iy;
    fbf4:	693b      	ldr	r3, [r7, #16]
    fbf6:	3b01      	subs	r3, #1
    fbf8:	613b      	str	r3, [r7, #16]
  int     ix, iy;
  unsigned char t;

  ix = 0;
  iy = len - 1;
  while (ix < iy) {
    fbfa:	697a      	ldr	r2, [r7, #20]
    fbfc:	693b      	ldr	r3, [r7, #16]
    fbfe:	429a      	cmp	r2, r3
    fc00:	dbdf      	blt.n	fbc2 <fp_reverse+0x16>
    s[ix] = s[iy];
    s[iy] = t;
    ++ix;
    --iy;
  }
}
    fc02:	46c0      	nop			; (mov r8, r8)
    fc04:	46bd      	mov	sp, r7
    fc06:	b006      	add	sp, #24
    fc08:	bd80      	pop	{r7, pc}
    fc0a:	46c0      	nop			; (mov r8, r8)

0000fc0c <mp_init>:

/* wolfSSL callers from normal lib */

/* init a new mp_int */
int mp_init (mp_int * a)
{
    fc0c:	b580      	push	{r7, lr}
    fc0e:	b082      	sub	sp, #8
    fc10:	af00      	add	r7, sp, #0
    fc12:	6078      	str	r0, [r7, #4]
  if (a)
    fc14:	687b      	ldr	r3, [r7, #4]
    fc16:	2b00      	cmp	r3, #0
    fc18:	d003      	beq.n	fc22 <mp_init+0x16>
    fp_init(a);
    fc1a:	687b      	ldr	r3, [r7, #4]
    fc1c:	0018      	movs	r0, r3
    fc1e:	f000 f805 	bl	fc2c <fp_init>
  return MP_OKAY;
    fc22:	2300      	movs	r3, #0
}
    fc24:	0018      	movs	r0, r3
    fc26:	46bd      	mov	sp, r7
    fc28:	b002      	add	sp, #8
    fc2a:	bd80      	pop	{r7, pc}

0000fc2c <fp_init>:

void fp_init(fp_int *a)
{
    fc2c:	b580      	push	{r7, lr}
    fc2e:	b082      	sub	sp, #8
    fc30:	af00      	add	r7, sp, #0
    fc32:	6078      	str	r0, [r7, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
    a->size = FP_SIZE;
    fc34:	687b      	ldr	r3, [r7, #4]
    fc36:	2288      	movs	r2, #136	; 0x88
    fc38:	609a      	str	r2, [r3, #8]
#endif
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_init(&a->raw);
#endif
    fp_zero(a);
    fc3a:	687b      	ldr	r3, [r7, #4]
    fc3c:	0018      	movs	r0, r3
    fc3e:	f000 f805 	bl	fc4c <fp_zero>
}
    fc42:	46c0      	nop			; (mov r8, r8)
    fc44:	46bd      	mov	sp, r7
    fc46:	b002      	add	sp, #8
    fc48:	bd80      	pop	{r7, pc}
    fc4a:	46c0      	nop			; (mov r8, r8)

0000fc4c <fp_zero>:

void fp_zero(fp_int *a)
{
    fc4c:	b580      	push	{r7, lr}
    fc4e:	b084      	sub	sp, #16
    fc50:	af00      	add	r7, sp, #0
    fc52:	6078      	str	r0, [r7, #4]
    int size = FP_SIZE;
    fc54:	2388      	movs	r3, #136	; 0x88
    fc56:	60fb      	str	r3, [r7, #12]
    a->used = 0;
    fc58:	687b      	ldr	r3, [r7, #4]
    fc5a:	2200      	movs	r2, #0
    fc5c:	601a      	str	r2, [r3, #0]
    a->sign = FP_ZPOS;
    fc5e:	687b      	ldr	r3, [r7, #4]
    fc60:	2200      	movs	r2, #0
    fc62:	605a      	str	r2, [r3, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
    size = a->size;
    fc64:	687b      	ldr	r3, [r7, #4]
    fc66:	689b      	ldr	r3, [r3, #8]
    fc68:	60fb      	str	r3, [r7, #12]
#endif
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
    fc6a:	687b      	ldr	r3, [r7, #4]
    fc6c:	330c      	adds	r3, #12
    fc6e:	0018      	movs	r0, r3
    fc70:	68fb      	ldr	r3, [r7, #12]
    fc72:	009b      	lsls	r3, r3, #2
    fc74:	001a      	movs	r2, r3
    fc76:	2100      	movs	r1, #0
    fc78:	f015 fd57 	bl	2572a <memset>
}
    fc7c:	46c0      	nop			; (mov r8, r8)
    fc7e:	46bd      	mov	sp, r7
    fc80:	b004      	add	sp, #16
    fc82:	bd80      	pop	{r7, pc}

0000fc84 <fp_clear>:

void fp_clear(fp_int *a)
{
    fc84:	b580      	push	{r7, lr}
    fc86:	b084      	sub	sp, #16
    fc88:	af00      	add	r7, sp, #0
    fc8a:	6078      	str	r0, [r7, #4]
    int size = FP_SIZE;
    fc8c:	2388      	movs	r3, #136	; 0x88
    fc8e:	60fb      	str	r3, [r7, #12]
    a->used = 0;
    fc90:	687b      	ldr	r3, [r7, #4]
    fc92:	2200      	movs	r2, #0
    fc94:	601a      	str	r2, [r3, #0]
    a->sign = FP_ZPOS;
    fc96:	687b      	ldr	r3, [r7, #4]
    fc98:	2200      	movs	r2, #0
    fc9a:	605a      	str	r2, [r3, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
    size = a->size;
    fc9c:	687b      	ldr	r3, [r7, #4]
    fc9e:	689b      	ldr	r3, [r3, #8]
    fca0:	60fb      	str	r3, [r7, #12]
#endif
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
    fca2:	687b      	ldr	r3, [r7, #4]
    fca4:	330c      	adds	r3, #12
    fca6:	0018      	movs	r0, r3
    fca8:	68fb      	ldr	r3, [r7, #12]
    fcaa:	009b      	lsls	r3, r3, #2
    fcac:	001a      	movs	r2, r3
    fcae:	2100      	movs	r1, #0
    fcb0:	f015 fd3b 	bl	2572a <memset>
    fp_free(a);
    fcb4:	687b      	ldr	r3, [r7, #4]
    fcb6:	0018      	movs	r0, r3
    fcb8:	f000 f804 	bl	fcc4 <fp_free>
}
    fcbc:	46c0      	nop			; (mov r8, r8)
    fcbe:	46bd      	mov	sp, r7
    fcc0:	b004      	add	sp, #16
    fcc2:	bd80      	pop	{r7, pc}

0000fcc4 <fp_free>:
{
    fp_forcezero(a);
}

void fp_free(fp_int* a)
{
    fcc4:	b580      	push	{r7, lr}
    fcc6:	b082      	sub	sp, #8
    fcc8:	af00      	add	r7, sp, #0
    fcca:	6078      	str	r0, [r7, #4]
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_free(&a->raw);
#else
    (void)a;
#endif
}
    fccc:	46c0      	nop			; (mov r8, r8)
    fcce:	46bd      	mov	sp, r7
    fcd0:	b002      	add	sp, #8
    fcd2:	bd80      	pop	{r7, pc}

0000fcd4 <mp_clear>:


/* clear one (frees)  */
void mp_clear (mp_int * a)
{
    fcd4:	b580      	push	{r7, lr}
    fcd6:	b082      	sub	sp, #8
    fcd8:	af00      	add	r7, sp, #0
    fcda:	6078      	str	r0, [r7, #4]
    if (a == NULL)
    fcdc:	687b      	ldr	r3, [r7, #4]
    fcde:	2b00      	cmp	r3, #0
    fce0:	d004      	beq.n	fcec <mp_clear+0x18>
        return;
    fp_clear(a);
    fce2:	687b      	ldr	r3, [r7, #4]
    fce4:	0018      	movs	r0, r3
    fce6:	f7ff ffcd 	bl	fc84 <fp_clear>
    fcea:	e000      	b.n	fcee <mp_clear+0x1a>

/* clear one (frees)  */
void mp_clear (mp_int * a)
{
    if (a == NULL)
        return;
    fcec:	46c0      	nop			; (mov r8, r8)
    fp_clear(a);
}
    fcee:	46bd      	mov	sp, r7
    fcf0:	b002      	add	sp, #8
    fcf2:	bd80      	pop	{r7, pc}

0000fcf4 <mp_init_multi>:
}

/* handle up to 6 inits */
int mp_init_multi(mp_int* a, mp_int* b, mp_int* c, mp_int* d,
                  mp_int* e, mp_int* f)
{
    fcf4:	b580      	push	{r7, lr}
    fcf6:	b084      	sub	sp, #16
    fcf8:	af00      	add	r7, sp, #0
    fcfa:	60f8      	str	r0, [r7, #12]
    fcfc:	60b9      	str	r1, [r7, #8]
    fcfe:	607a      	str	r2, [r7, #4]
    fd00:	603b      	str	r3, [r7, #0]
    if (a)
    fd02:	68fb      	ldr	r3, [r7, #12]
    fd04:	2b00      	cmp	r3, #0
    fd06:	d003      	beq.n	fd10 <mp_init_multi+0x1c>
        fp_init(a);
    fd08:	68fb      	ldr	r3, [r7, #12]
    fd0a:	0018      	movs	r0, r3
    fd0c:	f7ff ff8e 	bl	fc2c <fp_init>
    if (b)
    fd10:	68bb      	ldr	r3, [r7, #8]
    fd12:	2b00      	cmp	r3, #0
    fd14:	d003      	beq.n	fd1e <mp_init_multi+0x2a>
        fp_init(b);
    fd16:	68bb      	ldr	r3, [r7, #8]
    fd18:	0018      	movs	r0, r3
    fd1a:	f7ff ff87 	bl	fc2c <fp_init>
    if (c)
    fd1e:	687b      	ldr	r3, [r7, #4]
    fd20:	2b00      	cmp	r3, #0
    fd22:	d003      	beq.n	fd2c <mp_init_multi+0x38>
        fp_init(c);
    fd24:	687b      	ldr	r3, [r7, #4]
    fd26:	0018      	movs	r0, r3
    fd28:	f7ff ff80 	bl	fc2c <fp_init>
    if (d)
    fd2c:	683b      	ldr	r3, [r7, #0]
    fd2e:	2b00      	cmp	r3, #0
    fd30:	d003      	beq.n	fd3a <mp_init_multi+0x46>
        fp_init(d);
    fd32:	683b      	ldr	r3, [r7, #0]
    fd34:	0018      	movs	r0, r3
    fd36:	f7ff ff79 	bl	fc2c <fp_init>
    if (e)
    fd3a:	69bb      	ldr	r3, [r7, #24]
    fd3c:	2b00      	cmp	r3, #0
    fd3e:	d003      	beq.n	fd48 <mp_init_multi+0x54>
        fp_init(e);
    fd40:	69bb      	ldr	r3, [r7, #24]
    fd42:	0018      	movs	r0, r3
    fd44:	f7ff ff72 	bl	fc2c <fp_init>
    if (f)
    fd48:	69fb      	ldr	r3, [r7, #28]
    fd4a:	2b00      	cmp	r3, #0
    fd4c:	d003      	beq.n	fd56 <mp_init_multi+0x62>
        fp_init(f);
    fd4e:	69fb      	ldr	r3, [r7, #28]
    fd50:	0018      	movs	r0, r3
    fd52:	f7ff ff6b 	bl	fc2c <fp_init>

    return MP_OKAY;
    fd56:	2300      	movs	r3, #0
}
    fd58:	0018      	movs	r0, r3
    fd5a:	46bd      	mov	sp, r7
    fd5c:	b004      	add	sp, #16
    fd5e:	bd80      	pop	{r7, pc}

0000fd60 <mp_unsigned_bin_size>:
  return fp_cmp_d(a, b);
}

/* get the size for an unsigned equivalent */
int mp_unsigned_bin_size (mp_int * a)
{
    fd60:	b580      	push	{r7, lr}
    fd62:	b082      	sub	sp, #8
    fd64:	af00      	add	r7, sp, #0
    fd66:	6078      	str	r0, [r7, #4]
  return fp_unsigned_bin_size(a);
    fd68:	687b      	ldr	r3, [r7, #4]
    fd6a:	0018      	movs	r0, r3
    fd6c:	f7ff fdc8 	bl	f900 <fp_unsigned_bin_size>
    fd70:	0003      	movs	r3, r0
}
    fd72:	0018      	movs	r0, r3
    fd74:	46bd      	mov	sp, r7
    fd76:	b002      	add	sp, #8
    fd78:	bd80      	pop	{r7, pc}
    fd7a:	46c0      	nop			; (mov r8, r8)

0000fd7c <mp_to_unsigned_bin>:
    return fp_to_unsigned_bin_at_pos(x, t, b);
}

/* store in unsigned [big endian] format */
int mp_to_unsigned_bin (mp_int * a, unsigned char *b)
{
    fd7c:	b580      	push	{r7, lr}
    fd7e:	b082      	sub	sp, #8
    fd80:	af00      	add	r7, sp, #0
    fd82:	6078      	str	r0, [r7, #4]
    fd84:	6039      	str	r1, [r7, #0]
  return fp_to_unsigned_bin(a,b);
    fd86:	683a      	ldr	r2, [r7, #0]
    fd88:	687b      	ldr	r3, [r7, #4]
    fd8a:	0011      	movs	r1, r2
    fd8c:	0018      	movs	r0, r3
    fd8e:	f7ff fd83 	bl	f898 <fp_to_unsigned_bin>
    fd92:	0003      	movs	r3, r0
}
    fd94:	0018      	movs	r0, r3
    fd96:	46bd      	mov	sp, r7
    fd98:	b002      	add	sp, #8
    fd9a:	bd80      	pop	{r7, pc}

0000fd9c <mp_read_unsigned_bin>:
{
  return fp_to_unsigned_bin_len(a, b, c);
}
/* reads a unsigned char array, assumes the msb is stored first [big endian] */
int mp_read_unsigned_bin (mp_int * a, const unsigned char *b, int c)
{
    fd9c:	b580      	push	{r7, lr}
    fd9e:	b084      	sub	sp, #16
    fda0:	af00      	add	r7, sp, #0
    fda2:	60f8      	str	r0, [r7, #12]
    fda4:	60b9      	str	r1, [r7, #8]
    fda6:	607a      	str	r2, [r7, #4]
  fp_read_unsigned_bin(a, b, c);
    fda8:	687a      	ldr	r2, [r7, #4]
    fdaa:	68b9      	ldr	r1, [r7, #8]
    fdac:	68fb      	ldr	r3, [r7, #12]
    fdae:	0018      	movs	r0, r3
    fdb0:	f7ff fcc2 	bl	f738 <fp_read_unsigned_bin>
  return MP_OKAY;
    fdb4:	2300      	movs	r3, #0
}
    fdb6:	0018      	movs	r0, r3
    fdb8:	46bd      	mov	sp, r7
    fdba:	b004      	add	sp, #16
    fdbc:	bd80      	pop	{r7, pc}
    fdbe:	46c0      	nop			; (mov r8, r8)

0000fdc0 <fp_copy>:
    fp_div_2d(a, b, c, d);
    return MP_OKAY;
}

void fp_copy(fp_int *a, fp_int *b)
{
    fdc0:	b580      	push	{r7, lr}
    fdc2:	b084      	sub	sp, #16
    fdc4:	af00      	add	r7, sp, #0
    fdc6:	6078      	str	r0, [r7, #4]
    fdc8:	6039      	str	r1, [r7, #0]
    /* if source and destination are different */
    if (a != b) {
    fdca:	687a      	ldr	r2, [r7, #4]
    fdcc:	683b      	ldr	r3, [r7, #0]
    fdce:	429a      	cmp	r2, r3
    fdd0:	d032      	beq.n	fe38 <fp_copy+0x78>
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
        /* verify a will fit in b */
        if (b->size >= a->used) {
    fdd2:	683b      	ldr	r3, [r7, #0]
    fdd4:	689a      	ldr	r2, [r3, #8]
    fdd6:	687b      	ldr	r3, [r7, #4]
    fdd8:	681b      	ldr	r3, [r3, #0]
    fdda:	429a      	cmp	r2, r3
    fddc:	db2c      	blt.n	fe38 <fp_copy+0x78>
            int x, oldused;
            oldused = b->used;
    fdde:	683b      	ldr	r3, [r7, #0]
    fde0:	681b      	ldr	r3, [r3, #0]
    fde2:	60bb      	str	r3, [r7, #8]
            b->used = a->used;
    fde4:	687b      	ldr	r3, [r7, #4]
    fde6:	681a      	ldr	r2, [r3, #0]
    fde8:	683b      	ldr	r3, [r7, #0]
    fdea:	601a      	str	r2, [r3, #0]
            b->sign = a->sign;
    fdec:	687b      	ldr	r3, [r7, #4]
    fdee:	685a      	ldr	r2, [r3, #4]
    fdf0:	683b      	ldr	r3, [r7, #0]
    fdf2:	605a      	str	r2, [r3, #4]

            XMEMCPY(b->dp, a->dp, a->used * sizeof(fp_digit));
    fdf4:	683b      	ldr	r3, [r7, #0]
    fdf6:	330c      	adds	r3, #12
    fdf8:	0018      	movs	r0, r3
    fdfa:	687b      	ldr	r3, [r7, #4]
    fdfc:	330c      	adds	r3, #12
    fdfe:	0019      	movs	r1, r3
    fe00:	687b      	ldr	r3, [r7, #4]
    fe02:	681b      	ldr	r3, [r3, #0]
    fe04:	009b      	lsls	r3, r3, #2
    fe06:	001a      	movs	r2, r3
    fe08:	f015 fc71 	bl	256ee <memcpy>

            /* zero any excess digits on the destination that we didn't write to */
            for (x = b->used; x >= 0 && x < oldused; x++) {
    fe0c:	683b      	ldr	r3, [r7, #0]
    fe0e:	681b      	ldr	r3, [r3, #0]
    fe10:	60fb      	str	r3, [r7, #12]
    fe12:	e00a      	b.n	fe2a <fp_copy+0x6a>
                b->dp[x] = 0;
    fe14:	683a      	ldr	r2, [r7, #0]
    fe16:	68fb      	ldr	r3, [r7, #12]
    fe18:	3302      	adds	r3, #2
    fe1a:	009b      	lsls	r3, r3, #2
    fe1c:	18d3      	adds	r3, r2, r3
    fe1e:	3304      	adds	r3, #4
    fe20:	2200      	movs	r2, #0
    fe22:	601a      	str	r2, [r3, #0]
            b->sign = a->sign;

            XMEMCPY(b->dp, a->dp, a->used * sizeof(fp_digit));

            /* zero any excess digits on the destination that we didn't write to */
            for (x = b->used; x >= 0 && x < oldused; x++) {
    fe24:	68fb      	ldr	r3, [r7, #12]
    fe26:	3301      	adds	r3, #1
    fe28:	60fb      	str	r3, [r7, #12]
    fe2a:	68fb      	ldr	r3, [r7, #12]
    fe2c:	2b00      	cmp	r3, #0
    fe2e:	db03      	blt.n	fe38 <fp_copy+0x78>
    fe30:	68fa      	ldr	r2, [r7, #12]
    fe32:	68bb      	ldr	r3, [r7, #8]
    fe34:	429a      	cmp	r2, r3
    fe36:	dbed      	blt.n	fe14 <fp_copy+0x54>
        b->used = a->used;
        b->sign = a->sign;
        XMEMCPY(b->dp, a->dp, FP_SIZE * sizeof(fp_digit));
#endif
    }
}
    fe38:	46c0      	nop			; (mov r8, r8)
    fe3a:	46bd      	mov	sp, r7
    fe3c:	b004      	add	sp, #16
    fe3e:	bd80      	pop	{r7, pc}

0000fe40 <fp_init_copy>:

void fp_init_copy(fp_int *a, fp_int* b)
{
    fe40:	b580      	push	{r7, lr}
    fe42:	b082      	sub	sp, #8
    fe44:	af00      	add	r7, sp, #0
    fe46:	6078      	str	r0, [r7, #4]
    fe48:	6039      	str	r1, [r7, #0]
    if (a != b) {
    fe4a:	687a      	ldr	r2, [r7, #4]
    fe4c:	683b      	ldr	r3, [r7, #0]
    fe4e:	429a      	cmp	r2, r3
    fe50:	d009      	beq.n	fe66 <fp_init_copy+0x26>
        fp_init(a);
    fe52:	687b      	ldr	r3, [r7, #4]
    fe54:	0018      	movs	r0, r3
    fe56:	f7ff fee9 	bl	fc2c <fp_init>
        fp_copy(b, a);
    fe5a:	687a      	ldr	r2, [r7, #4]
    fe5c:	683b      	ldr	r3, [r7, #0]
    fe5e:	0011      	movs	r1, r2
    fe60:	0018      	movs	r0, r3
    fe62:	f7ff ffad 	bl	fdc0 <fp_copy>
    }
}
    fe66:	46c0      	nop			; (mov r8, r8)
    fe68:	46bd      	mov	sp, r7
    fe6a:	b002      	add	sp, #8
    fe6c:	bd80      	pop	{r7, pc}
    fe6e:	46c0      	nop			; (mov r8, r8)

0000fe70 <mp_iszero>:
{
    return fp_isodd(a);
}

int mp_iszero(mp_int* a)
{
    fe70:	b580      	push	{r7, lr}
    fe72:	b082      	sub	sp, #8
    fe74:	af00      	add	r7, sp, #0
    fe76:	6078      	str	r0, [r7, #4]
    return fp_iszero(a);
    fe78:	687b      	ldr	r3, [r7, #4]
    fe7a:	681b      	ldr	r3, [r3, #0]
    fe7c:	425a      	negs	r2, r3
    fe7e:	4153      	adcs	r3, r2
    fe80:	b2db      	uxtb	r3, r3
}
    fe82:	0018      	movs	r0, r3
    fe84:	46bd      	mov	sp, r7
    fe86:	b002      	add	sp, #8
    fe88:	bd80      	pop	{r7, pc}
    fe8a:	46c0      	nop			; (mov r8, r8)

0000fe8c <mp_count_bits>:

int mp_count_bits (mp_int* a)
{
    fe8c:	b580      	push	{r7, lr}
    fe8e:	b082      	sub	sp, #8
    fe90:	af00      	add	r7, sp, #0
    fe92:	6078      	str	r0, [r7, #4]
    return fp_count_bits(a);
    fe94:	687b      	ldr	r3, [r7, #4]
    fe96:	0018      	movs	r0, r3
    fe98:	f7ff fd66 	bl	f968 <fp_count_bits>
    fe9c:	0003      	movs	r3, r0
}
    fe9e:	0018      	movs	r0, r3
    fea0:	46bd      	mov	sp, r7
    fea2:	b002      	add	sp, #8
    fea4:	bd80      	pop	{r7, pc}
    fea6:	46c0      	nop			; (mov r8, r8)

0000fea8 <mp_leading_bit>:

int mp_leading_bit (mp_int* a)
{
    fea8:	b580      	push	{r7, lr}
    feaa:	b082      	sub	sp, #8
    feac:	af00      	add	r7, sp, #0
    feae:	6078      	str	r0, [r7, #4]
    return fp_leading_bit(a);
    feb0:	687b      	ldr	r3, [r7, #4]
    feb2:	0018      	movs	r0, r3
    feb4:	f7ff fd80 	bl	f9b8 <fp_leading_bit>
    feb8:	0003      	movs	r3, r0
}
    feba:	0018      	movs	r0, r3
    febc:	46bd      	mov	sp, r7
    febe:	b002      	add	sp, #8
    fec0:	bd80      	pop	{r7, pc}
    fec2:	46c0      	nop			; (mov r8, r8)

0000fec4 <s_is_power_of_two>:
   return x;
}


static int s_is_power_of_two(fp_digit b, int *p)
{
    fec4:	b580      	push	{r7, lr}
    fec6:	b084      	sub	sp, #16
    fec8:	af00      	add	r7, sp, #0
    feca:	6078      	str	r0, [r7, #4]
    fecc:	6039      	str	r1, [r7, #0]
   int x;

   /* fast return if no power of two */
   if ((b==0) || (b & (b-1))) {
    fece:	687b      	ldr	r3, [r7, #4]
    fed0:	2b00      	cmp	r3, #0
    fed2:	d004      	beq.n	fede <s_is_power_of_two+0x1a>
    fed4:	687b      	ldr	r3, [r7, #4]
    fed6:	3b01      	subs	r3, #1
    fed8:	687a      	ldr	r2, [r7, #4]
    feda:	4013      	ands	r3, r2
    fedc:	d001      	beq.n	fee2 <s_is_power_of_two+0x1e>
      return FP_NO;
    fede:	2300      	movs	r3, #0
    fee0:	e014      	b.n	ff0c <s_is_power_of_two+0x48>
   }

   for (x = 0; x < DIGIT_BIT; x++) {
    fee2:	2300      	movs	r3, #0
    fee4:	60fb      	str	r3, [r7, #12]
    fee6:	e00d      	b.n	ff04 <s_is_power_of_two+0x40>
      if (b == (((fp_digit)1)<<x)) {
    fee8:	2201      	movs	r2, #1
    feea:	68fb      	ldr	r3, [r7, #12]
    feec:	409a      	lsls	r2, r3
    feee:	687b      	ldr	r3, [r7, #4]
    fef0:	429a      	cmp	r2, r3
    fef2:	d104      	bne.n	fefe <s_is_power_of_two+0x3a>
         *p = x;
    fef4:	683b      	ldr	r3, [r7, #0]
    fef6:	68fa      	ldr	r2, [r7, #12]
    fef8:	601a      	str	r2, [r3, #0]
         return FP_YES;
    fefa:	2301      	movs	r3, #1
    fefc:	e006      	b.n	ff0c <s_is_power_of_two+0x48>
   /* fast return if no power of two */
   if ((b==0) || (b & (b-1))) {
      return FP_NO;
   }

   for (x = 0; x < DIGIT_BIT; x++) {
    fefe:	68fb      	ldr	r3, [r7, #12]
    ff00:	3301      	adds	r3, #1
    ff02:	60fb      	str	r3, [r7, #12]
    ff04:	68fb      	ldr	r3, [r7, #12]
    ff06:	2b1f      	cmp	r3, #31
    ff08:	ddee      	ble.n	fee8 <s_is_power_of_two+0x24>
      if (b == (((fp_digit)1)<<x)) {
         *p = x;
         return FP_YES;
      }
   }
   return FP_NO;
    ff0a:	2300      	movs	r3, #0
}
    ff0c:	0018      	movs	r0, r3
    ff0e:	46bd      	mov	sp, r7
    ff10:	b004      	add	sp, #16
    ff12:	bd80      	pop	{r7, pc}

0000ff14 <fp_div_d>:

/* a/b => cb + d == a */
static int fp_div_d(fp_int *a, fp_digit b, fp_int *c, fp_digit *d)
{
    ff14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff16:	b095      	sub	sp, #84	; 0x54
    ff18:	af00      	add	r7, sp, #0
    ff1a:	6378      	str	r0, [r7, #52]	; 0x34
    ff1c:	6339      	str	r1, [r7, #48]	; 0x30
    ff1e:	62fa      	str	r2, [r7, #44]	; 0x2c
    ff20:	62bb      	str	r3, [r7, #40]	; 0x28
  fp_word  w;
  fp_digit t;
  int      ix;

  /* cannot divide by zero */
  if (b == 0) {
    ff22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff24:	2b00      	cmp	r3, #0
    ff26:	d102      	bne.n	ff2e <fp_div_d+0x1a>
     return FP_VAL;
    ff28:	2301      	movs	r3, #1
    ff2a:	425b      	negs	r3, r3
    ff2c:	e0f6      	b.n	1011c <fp_div_d+0x208>
  }

  /* quick outs */
  if (b == 1 || fp_iszero(a) == FP_YES) {
    ff2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff30:	2b01      	cmp	r3, #1
    ff32:	d003      	beq.n	ff3c <fp_div_d+0x28>
    ff34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ff36:	681b      	ldr	r3, [r3, #0]
    ff38:	2b00      	cmp	r3, #0
    ff3a:	d110      	bne.n	ff5e <fp_div_d+0x4a>
     if (d != NULL) {
    ff3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff3e:	2b00      	cmp	r3, #0
    ff40:	d002      	beq.n	ff48 <fp_div_d+0x34>
        *d = 0;
    ff42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff44:	2200      	movs	r2, #0
    ff46:	601a      	str	r2, [r3, #0]
     }
     if (c != NULL) {
    ff48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ff4a:	2b00      	cmp	r3, #0
    ff4c:	d005      	beq.n	ff5a <fp_div_d+0x46>
        fp_copy(a, c);
    ff4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ff50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ff52:	0011      	movs	r1, r2
    ff54:	0018      	movs	r0, r3
    ff56:	f7ff ff33 	bl	fdc0 <fp_copy>
     }
     return FP_OKAY;
    ff5a:	2300      	movs	r3, #0
    ff5c:	e0de      	b.n	1011c <fp_div_d+0x208>
  }

  /* power of two ? */
  if (s_is_power_of_two(b, &ix) == FP_YES) {
    ff5e:	2310      	movs	r3, #16
    ff60:	2228      	movs	r2, #40	; 0x28
    ff62:	18ba      	adds	r2, r7, r2
    ff64:	18d2      	adds	r2, r2, r3
    ff66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff68:	0011      	movs	r1, r2
    ff6a:	0018      	movs	r0, r3
    ff6c:	f7ff ffaa 	bl	fec4 <s_is_power_of_two>
    ff70:	0003      	movs	r3, r0
    ff72:	2b01      	cmp	r3, #1
    ff74:	d117      	bne.n	ffa6 <fp_div_d+0x92>
     if (d != NULL) {
    ff76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff78:	2b00      	cmp	r3, #0
    ff7a:	d009      	beq.n	ff90 <fp_div_d+0x7c>
        *d = a->dp[0] & ((((fp_digit)1)<<ix) - 1);
    ff7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ff7e:	68db      	ldr	r3, [r3, #12]
    ff80:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ff82:	2101      	movs	r1, #1
    ff84:	4091      	lsls	r1, r2
    ff86:	000a      	movs	r2, r1
    ff88:	3a01      	subs	r2, #1
    ff8a:	401a      	ands	r2, r3
    ff8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff8e:	601a      	str	r2, [r3, #0]
     }
     if (c != NULL) {
    ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ff92:	2b00      	cmp	r3, #0
    ff94:	d005      	beq.n	ffa2 <fp_div_d+0x8e>
        fp_div_2d(a, ix, c, NULL);
    ff96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    ff98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ff9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    ff9c:	2300      	movs	r3, #0
    ff9e:	f7ff fad3 	bl	f548 <fp_div_2d>
     }
     return FP_OKAY;
    ffa2:	2300      	movs	r3, #0
    ffa4:	e0ba      	b.n	1011c <fp_div_d+0x208>
  }

#ifdef WOLFSSL_SMALL_STACK
  q = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_TMP_BUFFER);
    ffa6:	238b      	movs	r3, #139	; 0x8b
    ffa8:	009b      	lsls	r3, r3, #2
    ffaa:	0018      	movs	r0, r3
    ffac:	f015 fb6a 	bl	25684 <malloc>
    ffb0:	0003      	movs	r3, r0
    ffb2:	643b      	str	r3, [r7, #64]	; 0x40
  if (q == NULL)
    ffb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ffb6:	2b00      	cmp	r3, #0
    ffb8:	d102      	bne.n	ffc0 <fp_div_d+0xac>
      return FP_MEM;
    ffba:	2302      	movs	r3, #2
    ffbc:	425b      	negs	r3, r3
    ffbe:	e0ad      	b.n	1011c <fp_div_d+0x208>
#endif

  fp_init(q);
    ffc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ffc2:	0018      	movs	r0, r3
    ffc4:	f7ff fe32 	bl	fc2c <fp_init>

  if (c != NULL) {
    ffc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ffca:	2b00      	cmp	r3, #0
    ffcc:	d007      	beq.n	ffde <fp_div_d+0xca>
    q->used = a->used;
    ffce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ffd0:	681a      	ldr	r2, [r3, #0]
    ffd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ffd4:	601a      	str	r2, [r3, #0]
    q->sign = a->sign;
    ffd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ffd8:	685a      	ldr	r2, [r3, #4]
    ffda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ffdc:	605a      	str	r2, [r3, #4]
  }

  w = 0;
    ffde:	2300      	movs	r3, #0
    ffe0:	2400      	movs	r4, #0
    ffe2:	64bb      	str	r3, [r7, #72]	; 0x48
    ffe4:	64fc      	str	r4, [r7, #76]	; 0x4c
  for (ix = a->used - 1; ix >= 0; ix--) {
    ffe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ffe8:	681b      	ldr	r3, [r3, #0]
    ffea:	3b01      	subs	r3, #1
    ffec:	63bb      	str	r3, [r7, #56]	; 0x38
    ffee:	e05a      	b.n	100a6 <fp_div_d+0x192>
     w = (w << ((fp_word)DIGIT_BIT)) | ((fp_word)a->dp[ix]);
    fff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fff2:	001b      	movs	r3, r3
    fff4:	627b      	str	r3, [r7, #36]	; 0x24
    fff6:	2300      	movs	r3, #0
    fff8:	623b      	str	r3, [r7, #32]
    fffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fffe:	3302      	adds	r3, #2
   10000:	009b      	lsls	r3, r3, #2
   10002:	18d3      	adds	r3, r2, r3
   10004:	3304      	adds	r3, #4
   10006:	681b      	ldr	r3, [r3, #0]
   10008:	61bb      	str	r3, [r7, #24]
   1000a:	2300      	movs	r3, #0
   1000c:	61fb      	str	r3, [r7, #28]
   1000e:	6a3b      	ldr	r3, [r7, #32]
   10010:	69b9      	ldr	r1, [r7, #24]
   10012:	69fa      	ldr	r2, [r7, #28]
   10014:	0008      	movs	r0, r1
   10016:	4303      	orrs	r3, r0
   10018:	64bb      	str	r3, [r7, #72]	; 0x48
   1001a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1001c:	4313      	orrs	r3, r2
   1001e:	64fb      	str	r3, [r7, #76]	; 0x4c

     if (w >= b) {
   10020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10022:	001d      	movs	r5, r3
   10024:	2300      	movs	r3, #0
   10026:	001e      	movs	r6, r3
   10028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1002a:	42b3      	cmp	r3, r6
   1002c:	d32b      	bcc.n	10086 <fp_div_d+0x172>
   1002e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10030:	42b3      	cmp	r3, r6
   10032:	d102      	bne.n	1003a <fp_div_d+0x126>
   10034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10036:	42ab      	cmp	r3, r5
   10038:	d325      	bcc.n	10086 <fp_div_d+0x172>
        t = (fp_digit)(w / b);
   1003a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1003c:	613b      	str	r3, [r7, #16]
   1003e:	2300      	movs	r3, #0
   10040:	617b      	str	r3, [r7, #20]
   10042:	693a      	ldr	r2, [r7, #16]
   10044:	697b      	ldr	r3, [r7, #20]
   10046:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   10048:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1004a:	f013 fbdb 	bl	23804 <__aeabi_uldivmod>
   1004e:	0003      	movs	r3, r0
   10050:	000c      	movs	r4, r1
   10052:	647b      	str	r3, [r7, #68]	; 0x44
        w -= ((fp_word)t) * ((fp_word)b);
   10054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10056:	60bb      	str	r3, [r7, #8]
   10058:	2300      	movs	r3, #0
   1005a:	60fb      	str	r3, [r7, #12]
   1005c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1005e:	603b      	str	r3, [r7, #0]
   10060:	2300      	movs	r3, #0
   10062:	607b      	str	r3, [r7, #4]
   10064:	683a      	ldr	r2, [r7, #0]
   10066:	687b      	ldr	r3, [r7, #4]
   10068:	68b8      	ldr	r0, [r7, #8]
   1006a:	68f9      	ldr	r1, [r7, #12]
   1006c:	f013 fbea 	bl	23844 <__aeabi_lmul>
   10070:	0003      	movs	r3, r0
   10072:	000c      	movs	r4, r1
   10074:	0019      	movs	r1, r3
   10076:	0022      	movs	r2, r4
   10078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1007a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   1007c:	1a5b      	subs	r3, r3, r1
   1007e:	4194      	sbcs	r4, r2
   10080:	64bb      	str	r3, [r7, #72]	; 0x48
   10082:	64fc      	str	r4, [r7, #76]	; 0x4c
   10084:	e001      	b.n	1008a <fp_div_d+0x176>
      } else {
        t = 0;
   10086:	2300      	movs	r3, #0
   10088:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (c != NULL)
   1008a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1008c:	2b00      	cmp	r3, #0
   1008e:	d007      	beq.n	100a0 <fp_div_d+0x18c>
        q->dp[ix] = (fp_digit)t;
   10090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10094:	3302      	adds	r3, #2
   10096:	009b      	lsls	r3, r3, #2
   10098:	18d3      	adds	r3, r2, r3
   1009a:	1d1a      	adds	r2, r3, #4
   1009c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1009e:	6013      	str	r3, [r2, #0]
    q->used = a->used;
    q->sign = a->sign;
  }

  w = 0;
  for (ix = a->used - 1; ix >= 0; ix--) {
   100a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   100a2:	3b01      	subs	r3, #1
   100a4:	63bb      	str	r3, [r7, #56]	; 0x38
   100a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   100a8:	2b00      	cmp	r3, #0
   100aa:	daa1      	bge.n	fff0 <fp_div_d+0xdc>
      }
      if (c != NULL)
        q->dp[ix] = (fp_digit)t;
  }

  if (d != NULL) {
   100ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   100ae:	2b00      	cmp	r3, #0
   100b0:	d002      	beq.n	100b8 <fp_div_d+0x1a4>
     *d = (fp_digit)w;
   100b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
   100b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   100b6:	601a      	str	r2, [r3, #0]
  }

  if (c != NULL) {
   100b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   100ba:	2b00      	cmp	r3, #0
   100bc:	d024      	beq.n	10108 <fp_div_d+0x1f4>
     fp_clamp(q);
   100be:	e004      	b.n	100ca <fp_div_d+0x1b6>
   100c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100c2:	681b      	ldr	r3, [r3, #0]
   100c4:	1e5a      	subs	r2, r3, #1
   100c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100c8:	601a      	str	r2, [r3, #0]
   100ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100cc:	681b      	ldr	r3, [r3, #0]
   100ce:	2b00      	cmp	r3, #0
   100d0:	d00a      	beq.n	100e8 <fp_div_d+0x1d4>
   100d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100d4:	681b      	ldr	r3, [r3, #0]
   100d6:	3b01      	subs	r3, #1
   100d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   100da:	3302      	adds	r3, #2
   100dc:	009b      	lsls	r3, r3, #2
   100de:	18d3      	adds	r3, r2, r3
   100e0:	3304      	adds	r3, #4
   100e2:	681b      	ldr	r3, [r3, #0]
   100e4:	2b00      	cmp	r3, #0
   100e6:	d0eb      	beq.n	100c0 <fp_div_d+0x1ac>
   100e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100ea:	681b      	ldr	r3, [r3, #0]
   100ec:	2b00      	cmp	r3, #0
   100ee:	d002      	beq.n	100f6 <fp_div_d+0x1e2>
   100f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100f2:	685a      	ldr	r2, [r3, #4]
   100f4:	e000      	b.n	100f8 <fp_div_d+0x1e4>
   100f6:	2200      	movs	r2, #0
   100f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100fa:	605a      	str	r2, [r3, #4]
     fp_copy(q, c);
   100fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   100fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10100:	0011      	movs	r1, r2
   10102:	0018      	movs	r0, r3
   10104:	f7ff fe5c 	bl	fdc0 <fp_copy>
  }

#ifdef WOLFSSL_SMALL_STACK
  XFREE(q, NULL, DYNAMIC_TYPE_TMP_BUFFER);
   10108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1010a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1010c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1010e:	2b00      	cmp	r3, #0
   10110:	d003      	beq.n	1011a <fp_div_d+0x206>
   10112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10114:	0018      	movs	r0, r3
   10116:	f015 fabf 	bl	25698 <free>
#endif
  return FP_OKAY;
   1011a:	2300      	movs	r3, #0
}
   1011c:	0018      	movs	r0, r3
   1011e:	46bd      	mov	sp, r7
   10120:	b015      	add	sp, #84	; 0x54
   10122:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010124 <fp_add_d>:
#if defined(HAVE_ECC) || !defined(NO_PWDBASED) || defined(OPENSSL_EXTRA) || \
    defined(WC_RSA_BLINDING) || !defined(NO_DSA) || \
    (!defined(NO_RSA) && !defined(NO_RSA_BOUNDS_CHECK))
/* c = a + b */
void fp_add_d(fp_int *a, fp_digit b, fp_int *c)
{
   10124:	b5f0      	push	{r4, r5, r6, r7, lr}
   10126:	b089      	sub	sp, #36	; 0x24
   10128:	af00      	add	r7, sp, #0
   1012a:	60f8      	str	r0, [r7, #12]
   1012c:	60b9      	str	r1, [r7, #8]
   1012e:	607a      	str	r2, [r7, #4]
   fp_init(&tmp);
   fp_set(&tmp, b);
   fp_add(a, &tmp, c);
#else
   int i;
   fp_word t = b;
   10130:	68bb      	ldr	r3, [r7, #8]
   10132:	613b      	str	r3, [r7, #16]
   10134:	2300      	movs	r3, #0
   10136:	617b      	str	r3, [r7, #20]

   fp_copy(a, c);
   10138:	687a      	ldr	r2, [r7, #4]
   1013a:	68fb      	ldr	r3, [r7, #12]
   1013c:	0011      	movs	r1, r2
   1013e:	0018      	movs	r0, r3
   10140:	f7ff fe3e 	bl	fdc0 <fp_copy>
   for (i = 0; t != 0 && i < FP_SIZE && i < c->used; i++) {
   10144:	2300      	movs	r3, #0
   10146:	61fb      	str	r3, [r7, #28]
   10148:	e01f      	b.n	1018a <fp_add_d+0x66>
     t += c->dp[i];
   1014a:	687a      	ldr	r2, [r7, #4]
   1014c:	69fb      	ldr	r3, [r7, #28]
   1014e:	3302      	adds	r3, #2
   10150:	009b      	lsls	r3, r3, #2
   10152:	18d3      	adds	r3, r2, r3
   10154:	3304      	adds	r3, #4
   10156:	681b      	ldr	r3, [r3, #0]
   10158:	001d      	movs	r5, r3
   1015a:	2300      	movs	r3, #0
   1015c:	001e      	movs	r6, r3
   1015e:	693b      	ldr	r3, [r7, #16]
   10160:	697c      	ldr	r4, [r7, #20]
   10162:	195b      	adds	r3, r3, r5
   10164:	4174      	adcs	r4, r6
   10166:	613b      	str	r3, [r7, #16]
   10168:	617c      	str	r4, [r7, #20]
     c->dp[i] = (fp_digit)t;
   1016a:	693a      	ldr	r2, [r7, #16]
   1016c:	6879      	ldr	r1, [r7, #4]
   1016e:	69fb      	ldr	r3, [r7, #28]
   10170:	3302      	adds	r3, #2
   10172:	009b      	lsls	r3, r3, #2
   10174:	18cb      	adds	r3, r1, r3
   10176:	3304      	adds	r3, #4
   10178:	601a      	str	r2, [r3, #0]
     t >>= DIGIT_BIT;
   1017a:	697b      	ldr	r3, [r7, #20]
   1017c:	001b      	movs	r3, r3
   1017e:	613b      	str	r3, [r7, #16]
   10180:	2300      	movs	r3, #0
   10182:	617b      	str	r3, [r7, #20]
#else
   int i;
   fp_word t = b;

   fp_copy(a, c);
   for (i = 0; t != 0 && i < FP_SIZE && i < c->used; i++) {
   10184:	69fb      	ldr	r3, [r7, #28]
   10186:	3301      	adds	r3, #1
   10188:	61fb      	str	r3, [r7, #28]
   1018a:	693b      	ldr	r3, [r7, #16]
   1018c:	697a      	ldr	r2, [r7, #20]
   1018e:	4313      	orrs	r3, r2
   10190:	d007      	beq.n	101a2 <fp_add_d+0x7e>
   10192:	69fb      	ldr	r3, [r7, #28]
   10194:	2b87      	cmp	r3, #135	; 0x87
   10196:	dc04      	bgt.n	101a2 <fp_add_d+0x7e>
   10198:	687b      	ldr	r3, [r7, #4]
   1019a:	681a      	ldr	r2, [r3, #0]
   1019c:	69fb      	ldr	r3, [r7, #28]
   1019e:	429a      	cmp	r2, r3
   101a0:	dcd3      	bgt.n	1014a <fp_add_d+0x26>
     t += c->dp[i];
     c->dp[i] = (fp_digit)t;
     t >>= DIGIT_BIT;
   }
   if (i == c->used && i < FP_SIZE && t != 0) {
   101a2:	687b      	ldr	r3, [r7, #4]
   101a4:	681a      	ldr	r2, [r3, #0]
   101a6:	69fb      	ldr	r3, [r7, #28]
   101a8:	429a      	cmp	r2, r3
   101aa:	d113      	bne.n	101d4 <fp_add_d+0xb0>
   101ac:	69fb      	ldr	r3, [r7, #28]
   101ae:	2b87      	cmp	r3, #135	; 0x87
   101b0:	dc10      	bgt.n	101d4 <fp_add_d+0xb0>
   101b2:	693b      	ldr	r3, [r7, #16]
   101b4:	697a      	ldr	r2, [r7, #20]
   101b6:	4313      	orrs	r3, r2
   101b8:	d00c      	beq.n	101d4 <fp_add_d+0xb0>
       c->dp[i] = t;
   101ba:	693a      	ldr	r2, [r7, #16]
   101bc:	6879      	ldr	r1, [r7, #4]
   101be:	69fb      	ldr	r3, [r7, #28]
   101c0:	3302      	adds	r3, #2
   101c2:	009b      	lsls	r3, r3, #2
   101c4:	18cb      	adds	r3, r1, r3
   101c6:	3304      	adds	r3, #4
   101c8:	601a      	str	r2, [r3, #0]
       c->used++;
   101ca:	687b      	ldr	r3, [r7, #4]
   101cc:	681b      	ldr	r3, [r3, #0]
   101ce:	1c5a      	adds	r2, r3, #1
   101d0:	687b      	ldr	r3, [r7, #4]
   101d2:	601a      	str	r2, [r3, #0]
   }
#endif
}
   101d4:	46c0      	nop			; (mov r8, r8)
   101d6:	46bd      	mov	sp, r7
   101d8:	b009      	add	sp, #36	; 0x24
   101da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000101dc <fp_read_radix_16>:
#endif

#if !defined(NO_DSA) || defined(HAVE_ECC)
#if DIGIT_BIT == 64 || DIGIT_BIT == 32
static int fp_read_radix_16(fp_int *a, const char *str)
{
   101dc:	b580      	push	{r7, lr}
   101de:	b088      	sub	sp, #32
   101e0:	af00      	add	r7, sp, #0
   101e2:	6078      	str	r0, [r7, #4]
   101e4:	6039      	str	r1, [r7, #0]
  char    ch;

  /* if the leading digit is a
   * minus set the sign to negative.
   */
  if (*str == '-') {
   101e6:	683b      	ldr	r3, [r7, #0]
   101e8:	781b      	ldrb	r3, [r3, #0]
   101ea:	2b2d      	cmp	r3, #45	; 0x2d
   101ec:	d105      	bne.n	101fa <fp_read_radix_16+0x1e>
    ++str;
   101ee:	683b      	ldr	r3, [r7, #0]
   101f0:	3301      	adds	r3, #1
   101f2:	603b      	str	r3, [r7, #0]
    neg = FP_NEG;
   101f4:	2301      	movs	r3, #1
   101f6:	613b      	str	r3, [r7, #16]
   101f8:	e001      	b.n	101fe <fp_read_radix_16+0x22>
  } else {
    neg = FP_ZPOS;
   101fa:	2300      	movs	r3, #0
   101fc:	613b      	str	r3, [r7, #16]
  }

  j = 0;
   101fe:	2300      	movs	r3, #0
   10200:	61bb      	str	r3, [r7, #24]
  k = 0;
   10202:	2300      	movs	r3, #0
   10204:	617b      	str	r3, [r7, #20]
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
   10206:	683b      	ldr	r3, [r7, #0]
   10208:	0018      	movs	r0, r3
   1020a:	f016 f8d1 	bl	263b0 <strlen>
   1020e:	0003      	movs	r3, r0
   10210:	3b01      	subs	r3, #1
   10212:	61fb      	str	r3, [r7, #28]
   10214:	e067      	b.n	102e6 <fp_read_radix_16+0x10a>
      ch = str[i];
   10216:	69fb      	ldr	r3, [r7, #28]
   10218:	683a      	ldr	r2, [r7, #0]
   1021a:	18d2      	adds	r2, r2, r3
   1021c:	230f      	movs	r3, #15
   1021e:	18fb      	adds	r3, r7, r3
   10220:	7812      	ldrb	r2, [r2, #0]
   10222:	701a      	strb	r2, [r3, #0]
      if (ch >= '0' && ch <= '9')
   10224:	230f      	movs	r3, #15
   10226:	18fb      	adds	r3, r7, r3
   10228:	781b      	ldrb	r3, [r3, #0]
   1022a:	2b2f      	cmp	r3, #47	; 0x2f
   1022c:	d90c      	bls.n	10248 <fp_read_radix_16+0x6c>
   1022e:	230f      	movs	r3, #15
   10230:	18fb      	adds	r3, r7, r3
   10232:	781b      	ldrb	r3, [r3, #0]
   10234:	2b39      	cmp	r3, #57	; 0x39
   10236:	d807      	bhi.n	10248 <fp_read_radix_16+0x6c>
          ch -= '0';
   10238:	230f      	movs	r3, #15
   1023a:	18fb      	adds	r3, r7, r3
   1023c:	220f      	movs	r2, #15
   1023e:	18ba      	adds	r2, r7, r2
   10240:	7812      	ldrb	r2, [r2, #0]
   10242:	3a30      	subs	r2, #48	; 0x30
   10244:	701a      	strb	r2, [r3, #0]
   10246:	e026      	b.n	10296 <fp_read_radix_16+0xba>
      else if (ch >= 'A' && ch <= 'F')
   10248:	230f      	movs	r3, #15
   1024a:	18fb      	adds	r3, r7, r3
   1024c:	781b      	ldrb	r3, [r3, #0]
   1024e:	2b40      	cmp	r3, #64	; 0x40
   10250:	d90c      	bls.n	1026c <fp_read_radix_16+0x90>
   10252:	230f      	movs	r3, #15
   10254:	18fb      	adds	r3, r7, r3
   10256:	781b      	ldrb	r3, [r3, #0]
   10258:	2b46      	cmp	r3, #70	; 0x46
   1025a:	d807      	bhi.n	1026c <fp_read_radix_16+0x90>
          ch -= 'A' - 10;
   1025c:	230f      	movs	r3, #15
   1025e:	18fb      	adds	r3, r7, r3
   10260:	220f      	movs	r2, #15
   10262:	18ba      	adds	r2, r7, r2
   10264:	7812      	ldrb	r2, [r2, #0]
   10266:	3a37      	subs	r2, #55	; 0x37
   10268:	701a      	strb	r2, [r3, #0]
   1026a:	e014      	b.n	10296 <fp_read_radix_16+0xba>
      else if (ch >= 'a' && ch <= 'f')
   1026c:	230f      	movs	r3, #15
   1026e:	18fb      	adds	r3, r7, r3
   10270:	781b      	ldrb	r3, [r3, #0]
   10272:	2b60      	cmp	r3, #96	; 0x60
   10274:	d90c      	bls.n	10290 <fp_read_radix_16+0xb4>
   10276:	230f      	movs	r3, #15
   10278:	18fb      	adds	r3, r7, r3
   1027a:	781b      	ldrb	r3, [r3, #0]
   1027c:	2b66      	cmp	r3, #102	; 0x66
   1027e:	d807      	bhi.n	10290 <fp_read_radix_16+0xb4>
          ch -= 'a' - 10;
   10280:	230f      	movs	r3, #15
   10282:	18fb      	adds	r3, r7, r3
   10284:	220f      	movs	r2, #15
   10286:	18ba      	adds	r2, r7, r2
   10288:	7812      	ldrb	r2, [r2, #0]
   1028a:	3a57      	subs	r2, #87	; 0x57
   1028c:	701a      	strb	r2, [r3, #0]
   1028e:	e002      	b.n	10296 <fp_read_radix_16+0xba>
      else
          return FP_VAL;
   10290:	2301      	movs	r3, #1
   10292:	425b      	negs	r3, r3
   10294:	e055      	b.n	10342 <fp_read_radix_16+0x166>

      a->dp[k] |= ((fp_digit)ch) << j;
   10296:	687a      	ldr	r2, [r7, #4]
   10298:	697b      	ldr	r3, [r7, #20]
   1029a:	3302      	adds	r3, #2
   1029c:	009b      	lsls	r3, r3, #2
   1029e:	18d3      	adds	r3, r2, r3
   102a0:	3304      	adds	r3, #4
   102a2:	681a      	ldr	r2, [r3, #0]
   102a4:	230f      	movs	r3, #15
   102a6:	18fb      	adds	r3, r7, r3
   102a8:	7819      	ldrb	r1, [r3, #0]
   102aa:	69bb      	ldr	r3, [r7, #24]
   102ac:	4099      	lsls	r1, r3
   102ae:	000b      	movs	r3, r1
   102b0:	431a      	orrs	r2, r3
   102b2:	6879      	ldr	r1, [r7, #4]
   102b4:	697b      	ldr	r3, [r7, #20]
   102b6:	3302      	adds	r3, #2
   102b8:	009b      	lsls	r3, r3, #2
   102ba:	18cb      	adds	r3, r1, r3
   102bc:	3304      	adds	r3, #4
   102be:	601a      	str	r2, [r3, #0]
      j += 4;
   102c0:	69bb      	ldr	r3, [r7, #24]
   102c2:	3304      	adds	r3, #4
   102c4:	61bb      	str	r3, [r7, #24]
      k += j == DIGIT_BIT;
   102c6:	69bb      	ldr	r3, [r7, #24]
   102c8:	3b20      	subs	r3, #32
   102ca:	425a      	negs	r2, r3
   102cc:	4153      	adcs	r3, r2
   102ce:	b2db      	uxtb	r3, r3
   102d0:	001a      	movs	r2, r3
   102d2:	697b      	ldr	r3, [r7, #20]
   102d4:	189b      	adds	r3, r3, r2
   102d6:	617b      	str	r3, [r7, #20]
      j &= DIGIT_BIT - 1;
   102d8:	69bb      	ldr	r3, [r7, #24]
   102da:	221f      	movs	r2, #31
   102dc:	4013      	ands	r3, r2
   102de:	61bb      	str	r3, [r7, #24]
    neg = FP_ZPOS;
  }

  j = 0;
  k = 0;
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
   102e0:	69fb      	ldr	r3, [r7, #28]
   102e2:	3b01      	subs	r3, #1
   102e4:	61fb      	str	r3, [r7, #28]
   102e6:	69fb      	ldr	r3, [r7, #28]
   102e8:	2b00      	cmp	r3, #0
   102ea:	da94      	bge.n	10216 <fp_read_radix_16+0x3a>
      j += 4;
      k += j == DIGIT_BIT;
      j &= DIGIT_BIT - 1;
  }

  a->used = k + 1;
   102ec:	697b      	ldr	r3, [r7, #20]
   102ee:	1c5a      	adds	r2, r3, #1
   102f0:	687b      	ldr	r3, [r7, #4]
   102f2:	601a      	str	r2, [r3, #0]
  fp_clamp(a);
   102f4:	e004      	b.n	10300 <fp_read_radix_16+0x124>
   102f6:	687b      	ldr	r3, [r7, #4]
   102f8:	681b      	ldr	r3, [r3, #0]
   102fa:	1e5a      	subs	r2, r3, #1
   102fc:	687b      	ldr	r3, [r7, #4]
   102fe:	601a      	str	r2, [r3, #0]
   10300:	687b      	ldr	r3, [r7, #4]
   10302:	681b      	ldr	r3, [r3, #0]
   10304:	2b00      	cmp	r3, #0
   10306:	d00a      	beq.n	1031e <fp_read_radix_16+0x142>
   10308:	687b      	ldr	r3, [r7, #4]
   1030a:	681b      	ldr	r3, [r3, #0]
   1030c:	3b01      	subs	r3, #1
   1030e:	687a      	ldr	r2, [r7, #4]
   10310:	3302      	adds	r3, #2
   10312:	009b      	lsls	r3, r3, #2
   10314:	18d3      	adds	r3, r2, r3
   10316:	3304      	adds	r3, #4
   10318:	681b      	ldr	r3, [r3, #0]
   1031a:	2b00      	cmp	r3, #0
   1031c:	d0eb      	beq.n	102f6 <fp_read_radix_16+0x11a>
   1031e:	687b      	ldr	r3, [r7, #4]
   10320:	681b      	ldr	r3, [r3, #0]
   10322:	2b00      	cmp	r3, #0
   10324:	d002      	beq.n	1032c <fp_read_radix_16+0x150>
   10326:	687b      	ldr	r3, [r7, #4]
   10328:	685a      	ldr	r2, [r3, #4]
   1032a:	e000      	b.n	1032e <fp_read_radix_16+0x152>
   1032c:	2200      	movs	r2, #0
   1032e:	687b      	ldr	r3, [r7, #4]
   10330:	605a      	str	r2, [r3, #4]
  /* set the sign only if a != 0 */
  if (fp_iszero(a) != FP_YES) {
   10332:	687b      	ldr	r3, [r7, #4]
   10334:	681b      	ldr	r3, [r3, #0]
   10336:	2b00      	cmp	r3, #0
   10338:	d002      	beq.n	10340 <fp_read_radix_16+0x164>
     a->sign = neg;
   1033a:	687b      	ldr	r3, [r7, #4]
   1033c:	693a      	ldr	r2, [r7, #16]
   1033e:	605a      	str	r2, [r3, #4]
  }
  return FP_OKAY;
   10340:	2300      	movs	r3, #0
}
   10342:	0018      	movs	r0, r3
   10344:	46bd      	mov	sp, r7
   10346:	b008      	add	sp, #32
   10348:	bd80      	pop	{r7, pc}
   1034a:	46c0      	nop			; (mov r8, r8)

0001034c <fp_read_radix>:
#endif

static int fp_read_radix(fp_int *a, const char *str, int radix)
{
   1034c:	b580      	push	{r7, lr}
   1034e:	b088      	sub	sp, #32
   10350:	af00      	add	r7, sp, #0
   10352:	60f8      	str	r0, [r7, #12]
   10354:	60b9      	str	r1, [r7, #8]
   10356:	607a      	str	r2, [r7, #4]
  int     y, neg;
  char    ch;

  /* set the integer to the default of zero */
  fp_zero (a);
   10358:	68fb      	ldr	r3, [r7, #12]
   1035a:	0018      	movs	r0, r3
   1035c:	f7ff fc76 	bl	fc4c <fp_zero>

#if DIGIT_BIT == 64 || DIGIT_BIT == 32
  if (radix == 16)
   10360:	687b      	ldr	r3, [r7, #4]
   10362:	2b10      	cmp	r3, #16
   10364:	d107      	bne.n	10376 <fp_read_radix+0x2a>
      return fp_read_radix_16(a, str);
   10366:	68ba      	ldr	r2, [r7, #8]
   10368:	68fb      	ldr	r3, [r7, #12]
   1036a:	0011      	movs	r1, r2
   1036c:	0018      	movs	r0, r3
   1036e:	f7ff ff35 	bl	101dc <fp_read_radix_16>
   10372:	0003      	movs	r3, r0
   10374:	e06f      	b.n	10456 <fp_read_radix+0x10a>
#endif

  /* make sure the radix is ok */
  if (radix < 2 || radix > 64) {
   10376:	687b      	ldr	r3, [r7, #4]
   10378:	2b01      	cmp	r3, #1
   1037a:	dd02      	ble.n	10382 <fp_read_radix+0x36>
   1037c:	687b      	ldr	r3, [r7, #4]
   1037e:	2b40      	cmp	r3, #64	; 0x40
   10380:	dd02      	ble.n	10388 <fp_read_radix+0x3c>
    return FP_VAL;
   10382:	2301      	movs	r3, #1
   10384:	425b      	negs	r3, r3
   10386:	e066      	b.n	10456 <fp_read_radix+0x10a>
  }

  /* if the leading digit is a
   * minus set the sign to negative.
   */
  if (*str == '-') {
   10388:	68bb      	ldr	r3, [r7, #8]
   1038a:	781b      	ldrb	r3, [r3, #0]
   1038c:	2b2d      	cmp	r3, #45	; 0x2d
   1038e:	d105      	bne.n	1039c <fp_read_radix+0x50>
    ++str;
   10390:	68bb      	ldr	r3, [r7, #8]
   10392:	3301      	adds	r3, #1
   10394:	60bb      	str	r3, [r7, #8]
    neg = FP_NEG;
   10396:	2301      	movs	r3, #1
   10398:	61bb      	str	r3, [r7, #24]
   1039a:	e04e      	b.n	1043a <fp_read_radix+0xee>
  } else {
    neg = FP_ZPOS;
   1039c:	2300      	movs	r3, #0
   1039e:	61bb      	str	r3, [r7, #24]
  }

  /* process each digit of the string */
  while (*str) {
   103a0:	e04b      	b.n	1043a <fp_read_radix+0xee>
    /* if the radix <= 36 the conversion is case insensitive
     * this allows numbers like 1AB and 1ab to represent the same  value
     * [e.g. in hex]
     */
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
   103a2:	687b      	ldr	r3, [r7, #4]
   103a4:	2b24      	cmp	r3, #36	; 0x24
   103a6:	dc1c      	bgt.n	103e2 <fp_read_radix+0x96>
   103a8:	2317      	movs	r3, #23
   103aa:	18fb      	adds	r3, r7, r3
   103ac:	68ba      	ldr	r2, [r7, #8]
   103ae:	7812      	ldrb	r2, [r2, #0]
   103b0:	701a      	strb	r2, [r3, #0]
   103b2:	f015 f95d 	bl	25670 <__locale_ctype_ptr>
   103b6:	0002      	movs	r2, r0
   103b8:	2317      	movs	r3, #23
   103ba:	18fb      	adds	r3, r7, r3
   103bc:	781b      	ldrb	r3, [r3, #0]
   103be:	3301      	adds	r3, #1
   103c0:	18d3      	adds	r3, r2, r3
   103c2:	781b      	ldrb	r3, [r3, #0]
   103c4:	001a      	movs	r2, r3
   103c6:	2303      	movs	r3, #3
   103c8:	4013      	ands	r3, r2
   103ca:	2b02      	cmp	r3, #2
   103cc:	d104      	bne.n	103d8 <fp_read_radix+0x8c>
   103ce:	2317      	movs	r3, #23
   103d0:	18fb      	adds	r3, r7, r3
   103d2:	781b      	ldrb	r3, [r3, #0]
   103d4:	3b20      	subs	r3, #32
   103d6:	e002      	b.n	103de <fp_read_radix+0x92>
   103d8:	2317      	movs	r3, #23
   103da:	18fb      	adds	r3, r7, r3
   103dc:	781b      	ldrb	r3, [r3, #0]
   103de:	b2db      	uxtb	r3, r3
   103e0:	e001      	b.n	103e6 <fp_read_radix+0x9a>
   103e2:	68bb      	ldr	r3, [r7, #8]
   103e4:	781b      	ldrb	r3, [r3, #0]
   103e6:	2216      	movs	r2, #22
   103e8:	18ba      	adds	r2, r7, r2
   103ea:	7013      	strb	r3, [r2, #0]
    for (y = 0; y < 64; y++) {
   103ec:	2300      	movs	r3, #0
   103ee:	61fb      	str	r3, [r7, #28]
   103f0:	e00b      	b.n	1040a <fp_read_radix+0xbe>
      if (ch == fp_s_rmap[y]) {
   103f2:	4a1b      	ldr	r2, [pc, #108]	; (10460 <fp_read_radix+0x114>)
   103f4:	69fb      	ldr	r3, [r7, #28]
   103f6:	18d3      	adds	r3, r2, r3
   103f8:	781b      	ldrb	r3, [r3, #0]
   103fa:	2216      	movs	r2, #22
   103fc:	18ba      	adds	r2, r7, r2
   103fe:	7812      	ldrb	r2, [r2, #0]
   10400:	429a      	cmp	r2, r3
   10402:	d006      	beq.n	10412 <fp_read_radix+0xc6>
    /* if the radix <= 36 the conversion is case insensitive
     * this allows numbers like 1AB and 1ab to represent the same  value
     * [e.g. in hex]
     */
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
    for (y = 0; y < 64; y++) {
   10404:	69fb      	ldr	r3, [r7, #28]
   10406:	3301      	adds	r3, #1
   10408:	61fb      	str	r3, [r7, #28]
   1040a:	69fb      	ldr	r3, [r7, #28]
   1040c:	2b3f      	cmp	r3, #63	; 0x3f
   1040e:	ddf0      	ble.n	103f2 <fp_read_radix+0xa6>
   10410:	e000      	b.n	10414 <fp_read_radix+0xc8>
      if (ch == fp_s_rmap[y]) {
         break;
   10412:	46c0      	nop			; (mov r8, r8)

    /* if the char was found in the map
     * and is less than the given radix add it
     * to the number, otherwise exit the loop.
     */
    if (y < radix) {
   10414:	69fa      	ldr	r2, [r7, #28]
   10416:	687b      	ldr	r3, [r7, #4]
   10418:	429a      	cmp	r2, r3
   1041a:	da13      	bge.n	10444 <fp_read_radix+0xf8>
      fp_mul_d (a, (fp_digit) radix, a);
   1041c:	6879      	ldr	r1, [r7, #4]
   1041e:	68fa      	ldr	r2, [r7, #12]
   10420:	68fb      	ldr	r3, [r7, #12]
   10422:	0018      	movs	r0, r3
   10424:	f7fe fffa 	bl	f41c <fp_mul_d>
      fp_add_d (a, (fp_digit) y, a);
   10428:	69f9      	ldr	r1, [r7, #28]
   1042a:	68fa      	ldr	r2, [r7, #12]
   1042c:	68fb      	ldr	r3, [r7, #12]
   1042e:	0018      	movs	r0, r3
   10430:	f7ff fe78 	bl	10124 <fp_add_d>
    } else {
      break;
    }
    ++str;
   10434:	68bb      	ldr	r3, [r7, #8]
   10436:	3301      	adds	r3, #1
   10438:	60bb      	str	r3, [r7, #8]
  } else {
    neg = FP_ZPOS;
  }

  /* process each digit of the string */
  while (*str) {
   1043a:	68bb      	ldr	r3, [r7, #8]
   1043c:	781b      	ldrb	r3, [r3, #0]
   1043e:	2b00      	cmp	r3, #0
   10440:	d1af      	bne.n	103a2 <fp_read_radix+0x56>
   10442:	e000      	b.n	10446 <fp_read_radix+0xfa>
     */
    if (y < radix) {
      fp_mul_d (a, (fp_digit) radix, a);
      fp_add_d (a, (fp_digit) y, a);
    } else {
      break;
   10444:	46c0      	nop			; (mov r8, r8)
    }
    ++str;
  }

  /* set the sign only if a != 0 */
  if (fp_iszero(a) != FP_YES) {
   10446:	68fb      	ldr	r3, [r7, #12]
   10448:	681b      	ldr	r3, [r3, #0]
   1044a:	2b00      	cmp	r3, #0
   1044c:	d002      	beq.n	10454 <fp_read_radix+0x108>
     a->sign = neg;
   1044e:	68fb      	ldr	r3, [r7, #12]
   10450:	69ba      	ldr	r2, [r7, #24]
   10452:	605a      	str	r2, [r3, #4]
  }
  return FP_OKAY;
   10454:	2300      	movs	r3, #0
}
   10456:	0018      	movs	r0, r3
   10458:	46bd      	mov	sp, r7
   1045a:	b008      	add	sp, #32
   1045c:	bd80      	pop	{r7, pc}
   1045e:	46c0      	nop			; (mov r8, r8)
   10460:	0002c7bc 	.word	0x0002c7bc

00010464 <mp_read_radix>:

/* fast math conversion */
int mp_read_radix(mp_int *a, const char *str, int radix)
{
   10464:	b580      	push	{r7, lr}
   10466:	b084      	sub	sp, #16
   10468:	af00      	add	r7, sp, #0
   1046a:	60f8      	str	r0, [r7, #12]
   1046c:	60b9      	str	r1, [r7, #8]
   1046e:	607a      	str	r2, [r7, #4]
    return fp_read_radix(a, str, radix);
   10470:	687a      	ldr	r2, [r7, #4]
   10472:	68b9      	ldr	r1, [r7, #8]
   10474:	68fb      	ldr	r3, [r7, #12]
   10476:	0018      	movs	r0, r3
   10478:	f7ff ff68 	bl	1034c <fp_read_radix>
   1047c:	0003      	movs	r3, r0
}
   1047e:	0018      	movs	r0, r3
   10480:	46bd      	mov	sp, r7
   10482:	b004      	add	sp, #16
   10484:	bd80      	pop	{r7, pc}
   10486:	46c0      	nop			; (mov r8, r8)

00010488 <mp_set>:

#if defined(HAVE_ECC) || !defined(NO_RSA) || !defined(NO_DSA) || \
    defined(WOLFSSL_KEY_GEN)
/* fast math conversion */
int mp_set(fp_int *a, fp_digit b)
{
   10488:	b580      	push	{r7, lr}
   1048a:	b082      	sub	sp, #8
   1048c:	af00      	add	r7, sp, #0
   1048e:	6078      	str	r0, [r7, #4]
   10490:	6039      	str	r1, [r7, #0]
    fp_set(a,b);
   10492:	683a      	ldr	r2, [r7, #0]
   10494:	687b      	ldr	r3, [r7, #4]
   10496:	0011      	movs	r1, r2
   10498:	0018      	movs	r0, r3
   1049a:	f7ff fa4d 	bl	f938 <fp_set>
    return MP_OKAY;
   1049e:	2300      	movs	r3, #0
}
   104a0:	0018      	movs	r0, r3
   104a2:	46bd      	mov	sp, r7
   104a4:	b002      	add	sp, #8
   104a6:	bd80      	pop	{r7, pc}

000104a8 <mp_toradix>:
    return FP_OKAY;
}

/* stores a bignum as a ASCII string in a given radix (2..64) */
int mp_toradix (mp_int *a, char *str, int radix)
{
   104a8:	b580      	push	{r7, lr}
   104aa:	b08c      	sub	sp, #48	; 0x30
   104ac:	af00      	add	r7, sp, #0
   104ae:	60f8      	str	r0, [r7, #12]
   104b0:	60b9      	str	r1, [r7, #8]
   104b2:	607a      	str	r2, [r7, #4]
    int      res, digs;
    fp_digit d;
    char     *_s = str;
   104b4:	68bb      	ldr	r3, [r7, #8]
   104b6:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    fp_int   *t;
#endif

    /* check range of the radix */
    if (radix < 2 || radix > 64) {
   104b8:	687b      	ldr	r3, [r7, #4]
   104ba:	2b01      	cmp	r3, #1
   104bc:	dd02      	ble.n	104c4 <mp_toradix+0x1c>
   104be:	687b      	ldr	r3, [r7, #4]
   104c0:	2b40      	cmp	r3, #64	; 0x40
   104c2:	dd02      	ble.n	104ca <mp_toradix+0x22>
        return FP_VAL;
   104c4:	2301      	movs	r3, #1
   104c6:	425b      	negs	r3, r3
   104c8:	e073      	b.n	105b2 <mp_toradix+0x10a>
    }

    /* quick out if its zero */
    if (fp_iszero(a) == FP_YES) {
   104ca:	68fb      	ldr	r3, [r7, #12]
   104cc:	681b      	ldr	r3, [r3, #0]
   104ce:	2b00      	cmp	r3, #0
   104d0:	d109      	bne.n	104e6 <mp_toradix+0x3e>
        *str++ = '0';
   104d2:	68bb      	ldr	r3, [r7, #8]
   104d4:	1c5a      	adds	r2, r3, #1
   104d6:	60ba      	str	r2, [r7, #8]
   104d8:	2230      	movs	r2, #48	; 0x30
   104da:	701a      	strb	r2, [r3, #0]
        *str = '\0';
   104dc:	68bb      	ldr	r3, [r7, #8]
   104de:	2200      	movs	r2, #0
   104e0:	701a      	strb	r2, [r3, #0]
        return FP_YES;
   104e2:	2301      	movs	r3, #1
   104e4:	e065      	b.n	105b2 <mp_toradix+0x10a>
    }

#ifdef WOLFSSL_SMALL_STACK
    t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_TMP_BUFFER);
   104e6:	238b      	movs	r3, #139	; 0x8b
   104e8:	009b      	lsls	r3, r3, #2
   104ea:	0018      	movs	r0, r3
   104ec:	f015 f8ca 	bl	25684 <malloc>
   104f0:	0003      	movs	r3, r0
   104f2:	627b      	str	r3, [r7, #36]	; 0x24
    if (t == NULL)
   104f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   104f6:	2b00      	cmp	r3, #0
   104f8:	d102      	bne.n	10500 <mp_toradix+0x58>
        return FP_MEM;
   104fa:	2302      	movs	r3, #2
   104fc:	425b      	negs	r3, r3
   104fe:	e058      	b.n	105b2 <mp_toradix+0x10a>
#endif

    /* init a copy of the input */
    fp_init_copy (t, a);
   10500:	68fa      	ldr	r2, [r7, #12]
   10502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10504:	0011      	movs	r1, r2
   10506:	0018      	movs	r0, r3
   10508:	f7ff fc9a 	bl	fe40 <fp_init_copy>

    /* if it is negative output a - */
    if (t->sign == FP_NEG) {
   1050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1050e:	685b      	ldr	r3, [r3, #4]
   10510:	2b01      	cmp	r3, #1
   10512:	d10a      	bne.n	1052a <mp_toradix+0x82>
        ++_s;
   10514:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10516:	3301      	adds	r3, #1
   10518:	62bb      	str	r3, [r7, #40]	; 0x28
        *str++ = '-';
   1051a:	68bb      	ldr	r3, [r7, #8]
   1051c:	1c5a      	adds	r2, r3, #1
   1051e:	60ba      	str	r2, [r7, #8]
   10520:	222d      	movs	r2, #45	; 0x2d
   10522:	701a      	strb	r2, [r3, #0]
        t->sign = FP_ZPOS;
   10524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10526:	2200      	movs	r2, #0
   10528:	605a      	str	r2, [r3, #4]
    }

    digs = 0;
   1052a:	2300      	movs	r3, #0
   1052c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (fp_iszero (t) == FP_NO) {
   1052e:	e025      	b.n	1057c <mp_toradix+0xd4>
        if ((res = fp_div_d (t, (fp_digit) radix, t, &d)) != FP_OKAY) {
   10530:	6879      	ldr	r1, [r7, #4]
   10532:	2314      	movs	r3, #20
   10534:	18fb      	adds	r3, r7, r3
   10536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10538:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1053a:	f7ff fceb 	bl	ff14 <fp_div_d>
   1053e:	0003      	movs	r3, r0
   10540:	623b      	str	r3, [r7, #32]
   10542:	6a3b      	ldr	r3, [r7, #32]
   10544:	2b00      	cmp	r3, #0
   10546:	d00e      	beq.n	10566 <mp_toradix+0xbe>
            fp_zero (t);
   10548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1054a:	0018      	movs	r0, r3
   1054c:	f7ff fb7e 	bl	fc4c <fp_zero>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(t, NULL, DYNAMIC_TYPE_TMP_BUFFER);
   10550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10552:	61fb      	str	r3, [r7, #28]
   10554:	69fb      	ldr	r3, [r7, #28]
   10556:	2b00      	cmp	r3, #0
   10558:	d003      	beq.n	10562 <mp_toradix+0xba>
   1055a:	69fb      	ldr	r3, [r7, #28]
   1055c:	0018      	movs	r0, r3
   1055e:	f015 f89b 	bl	25698 <free>
        #endif
            return res;
   10562:	6a3b      	ldr	r3, [r7, #32]
   10564:	e025      	b.n	105b2 <mp_toradix+0x10a>
        }
        *str++ = fp_s_rmap[d];
   10566:	68bb      	ldr	r3, [r7, #8]
   10568:	1c5a      	adds	r2, r3, #1
   1056a:	60ba      	str	r2, [r7, #8]
   1056c:	4913      	ldr	r1, [pc, #76]	; (105bc <mp_toradix+0x114>)
   1056e:	697a      	ldr	r2, [r7, #20]
   10570:	188a      	adds	r2, r1, r2
   10572:	7812      	ldrb	r2, [r2, #0]
   10574:	701a      	strb	r2, [r3, #0]
        ++digs;
   10576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10578:	3301      	adds	r3, #1
   1057a:	62fb      	str	r3, [r7, #44]	; 0x2c
        *str++ = '-';
        t->sign = FP_ZPOS;
    }

    digs = 0;
    while (fp_iszero (t) == FP_NO) {
   1057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1057e:	681b      	ldr	r3, [r3, #0]
   10580:	2b00      	cmp	r3, #0
   10582:	d1d5      	bne.n	10530 <mp_toradix+0x88>
    }

    /* reverse the digits of the string.  In this case _s points
     * to the first digit [excluding the sign] of the number]
     */
    fp_reverse ((unsigned char *)_s, digs);
   10584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10586:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10588:	0011      	movs	r1, r2
   1058a:	0018      	movs	r0, r3
   1058c:	f7ff fb0e 	bl	fbac <fp_reverse>

    /* append a NULL so the string is properly terminated */
    *str = '\0';
   10590:	68bb      	ldr	r3, [r7, #8]
   10592:	2200      	movs	r2, #0
   10594:	701a      	strb	r2, [r3, #0]

    fp_zero (t);
   10596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10598:	0018      	movs	r0, r3
   1059a:	f7ff fb57 	bl	fc4c <fp_zero>
#ifdef WOLFSSL_SMALL_STACK
    XFREE(t, NULL, DYNAMIC_TYPE_TMP_BUFFER);
   1059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   105a0:	61bb      	str	r3, [r7, #24]
   105a2:	69bb      	ldr	r3, [r7, #24]
   105a4:	2b00      	cmp	r3, #0
   105a6:	d003      	beq.n	105b0 <mp_toradix+0x108>
   105a8:	69bb      	ldr	r3, [r7, #24]
   105aa:	0018      	movs	r0, r3
   105ac:	f015 f874 	bl	25698 <free>
#endif
    return FP_OKAY;
   105b0:	2300      	movs	r3, #0
}
   105b2:	0018      	movs	r0, r3
   105b4:	46bd      	mov	sp, r7
   105b6:	b00c      	add	sp, #48	; 0x30
   105b8:	bd80      	pop	{r7, pc}
   105ba:	46c0      	nop			; (mov r8, r8)
   105bc:	0002c7bc 	.word	0x0002c7bc

000105c0 <wc_export_int>:
/* export an mp_int as unsigned char or hex string
 * encType is WC_TYPE_UNSIGNED_BIN or WC_TYPE_HEX_STR
 * return MP_OKAY on success */
int wc_export_int(mp_int* mp, byte* buf, word32* len, word32 keySz,
    int encType)
{
   105c0:	b580      	push	{r7, lr}
   105c2:	b086      	sub	sp, #24
   105c4:	af00      	add	r7, sp, #0
   105c6:	60f8      	str	r0, [r7, #12]
   105c8:	60b9      	str	r1, [r7, #8]
   105ca:	607a      	str	r2, [r7, #4]
   105cc:	603b      	str	r3, [r7, #0]
    int err;

    if (mp == NULL)
   105ce:	68fb      	ldr	r3, [r7, #12]
   105d0:	2b00      	cmp	r3, #0
   105d2:	d102      	bne.n	105da <wc_export_int+0x1a>
        return BAD_FUNC_ARG;
   105d4:	23ad      	movs	r3, #173	; 0xad
   105d6:	425b      	negs	r3, r3
   105d8:	e032      	b.n	10640 <wc_export_int+0x80>

    /* check buffer size */
    if (*len < keySz) {
   105da:	687b      	ldr	r3, [r7, #4]
   105dc:	681a      	ldr	r2, [r3, #0]
   105de:	683b      	ldr	r3, [r7, #0]
   105e0:	429a      	cmp	r2, r3
   105e2:	d205      	bcs.n	105f0 <wc_export_int+0x30>
        *len = keySz;
   105e4:	687b      	ldr	r3, [r7, #4]
   105e6:	683a      	ldr	r2, [r7, #0]
   105e8:	601a      	str	r2, [r3, #0]
        return BUFFER_E;
   105ea:	2384      	movs	r3, #132	; 0x84
   105ec:	425b      	negs	r3, r3
   105ee:	e027      	b.n	10640 <wc_export_int+0x80>
    }

    *len = keySz;
   105f0:	687b      	ldr	r3, [r7, #4]
   105f2:	683a      	ldr	r2, [r7, #0]
   105f4:	601a      	str	r2, [r3, #0]
    XMEMSET(buf, 0, *len);
   105f6:	687b      	ldr	r3, [r7, #4]
   105f8:	681a      	ldr	r2, [r3, #0]
   105fa:	68bb      	ldr	r3, [r7, #8]
   105fc:	2100      	movs	r1, #0
   105fe:	0018      	movs	r0, r3
   10600:	f015 f893 	bl	2572a <memset>

    if (encType == WC_TYPE_HEX_STR) {
   10604:	6a3b      	ldr	r3, [r7, #32]
   10606:	2b01      	cmp	r3, #1
   10608:	d108      	bne.n	1061c <wc_export_int+0x5c>
    #ifdef WC_MP_TO_RADIX
        err = mp_tohex(mp, (char*)buf);
   1060a:	68b9      	ldr	r1, [r7, #8]
   1060c:	68fb      	ldr	r3, [r7, #12]
   1060e:	2210      	movs	r2, #16
   10610:	0018      	movs	r0, r3
   10612:	f7ff ff49 	bl	104a8 <mp_toradix>
   10616:	0003      	movs	r3, r0
   10618:	617b      	str	r3, [r7, #20]
   1061a:	e010      	b.n	1063e <wc_export_int+0x7e>
    #else
        err = NOT_COMPILED_IN;
    #endif
    }
    else {
        err = mp_to_unsigned_bin(mp, buf + (keySz - mp_unsigned_bin_size(mp)));
   1061c:	68fb      	ldr	r3, [r7, #12]
   1061e:	0018      	movs	r0, r3
   10620:	f7ff fb9e 	bl	fd60 <mp_unsigned_bin_size>
   10624:	0003      	movs	r3, r0
   10626:	001a      	movs	r2, r3
   10628:	683b      	ldr	r3, [r7, #0]
   1062a:	1a9b      	subs	r3, r3, r2
   1062c:	68ba      	ldr	r2, [r7, #8]
   1062e:	18d2      	adds	r2, r2, r3
   10630:	68fb      	ldr	r3, [r7, #12]
   10632:	0011      	movs	r1, r2
   10634:	0018      	movs	r0, r3
   10636:	f7ff fba1 	bl	fd7c <mp_to_unsigned_bin>
   1063a:	0003      	movs	r3, r0
   1063c:	617b      	str	r3, [r7, #20]
    }

    return err;
   1063e:	697b      	ldr	r3, [r7, #20]
}
   10640:	0018      	movs	r0, r3
   10642:	46bd      	mov	sp, r7
   10644:	b006      	add	sp, #24
   10646:	bd80      	pop	{r7, pc}

00010648 <ForceZero>:
#endif

#ifndef WOLFSSL_NO_FORCE_ZERO
/* Make sure compiler doesn't skip */
STATIC WC_INLINE void ForceZero(const void* mem, word32 len)
{
   10648:	b580      	push	{r7, lr}
   1064a:	b084      	sub	sp, #16
   1064c:	af00      	add	r7, sp, #0
   1064e:	6078      	str	r0, [r7, #4]
   10650:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
   10652:	687b      	ldr	r3, [r7, #4]
   10654:	60fb      	str	r3, [r7, #12]
    for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
        *w++ = 0;
    z = (volatile byte*)w;
#endif

    while (len--) *z++ = 0;
   10656:	e004      	b.n	10662 <ForceZero+0x1a>
   10658:	68fb      	ldr	r3, [r7, #12]
   1065a:	1c5a      	adds	r2, r3, #1
   1065c:	60fa      	str	r2, [r7, #12]
   1065e:	2200      	movs	r2, #0
   10660:	701a      	strb	r2, [r3, #0]
   10662:	683b      	ldr	r3, [r7, #0]
   10664:	1e5a      	subs	r2, r3, #1
   10666:	603a      	str	r2, [r7, #0]
   10668:	2b00      	cmp	r3, #0
   1066a:	d1f5      	bne.n	10658 <ForceZero+0x10>
}
   1066c:	46c0      	nop			; (mov r8, r8)
   1066e:	46bd      	mov	sp, r7
   10670:	b004      	add	sp, #16
   10672:	bd80      	pop	{r7, pc}

00010674 <atmel_get_random_number>:

/**
 * \brief Generate random number to be used for hash.
 */
int atmel_get_random_number(uint32_t count, uint8_t* rand_out)
{
   10674:	b580      	push	{r7, lr}
   10676:	b08e      	sub	sp, #56	; 0x38
   10678:	af00      	add	r7, sp, #0
   1067a:	6078      	str	r0, [r7, #4]
   1067c:	6039      	str	r1, [r7, #0]
	int ret = 0;
   1067e:	2300      	movs	r3, #0
   10680:	637b      	str	r3, [r7, #52]	; 0x34
#ifdef WOLFSSL_ATECC508A
	uint8_t i = 0;
   10682:	2333      	movs	r3, #51	; 0x33
   10684:	18fb      	adds	r3, r7, r3
   10686:	2200      	movs	r2, #0
   10688:	701a      	strb	r2, [r3, #0]
	uint32_t copy_count = 0;
   1068a:	2300      	movs	r3, #0
   1068c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t rng_buffer[RANDOM_NUM_SIZE];

	if (rand_out == NULL) {
   1068e:	683b      	ldr	r3, [r7, #0]
   10690:	2b00      	cmp	r3, #0
   10692:	d12c      	bne.n	106ee <atmel_get_random_number+0x7a>
		return -1;
   10694:	2301      	movs	r3, #1
   10696:	425b      	negs	r3, r3
   10698:	e036      	b.n	10708 <atmel_get_random_number+0x94>
	}

	while (i < count) {
        ret = atcab_random(rng_buffer);
   1069a:	230c      	movs	r3, #12
   1069c:	18fb      	adds	r3, r7, r3
   1069e:	0018      	movs	r0, r3
   106a0:	f00a f84e 	bl	1a740 <atcab_random>
   106a4:	0003      	movs	r3, r0
   106a6:	637b      	str	r3, [r7, #52]	; 0x34
		if (ret != ATCA_SUCCESS) {
   106a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   106aa:	2b00      	cmp	r3, #0
   106ac:	d002      	beq.n	106b4 <atmel_get_random_number+0x40>
			WOLFSSL_MSG("Failed to create random number!");
			return -1;
   106ae:	2301      	movs	r3, #1
   106b0:	425b      	negs	r3, r3
   106b2:	e029      	b.n	10708 <atmel_get_random_number+0x94>
		}
		copy_count = (count - i > RANDOM_NUM_SIZE) ? RANDOM_NUM_SIZE : count - i;
   106b4:	2333      	movs	r3, #51	; 0x33
   106b6:	18fb      	adds	r3, r7, r3
   106b8:	781b      	ldrb	r3, [r3, #0]
   106ba:	687a      	ldr	r2, [r7, #4]
   106bc:	1ad3      	subs	r3, r2, r3
   106be:	2b20      	cmp	r3, #32
   106c0:	d900      	bls.n	106c4 <atmel_get_random_number+0x50>
   106c2:	2320      	movs	r3, #32
   106c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		XMEMCPY(&rand_out[i], rng_buffer, copy_count);
   106c6:	2333      	movs	r3, #51	; 0x33
   106c8:	18fb      	adds	r3, r7, r3
   106ca:	781b      	ldrb	r3, [r3, #0]
   106cc:	683a      	ldr	r2, [r7, #0]
   106ce:	18d3      	adds	r3, r2, r3
   106d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   106d2:	210c      	movs	r1, #12
   106d4:	1879      	adds	r1, r7, r1
   106d6:	0018      	movs	r0, r3
   106d8:	f015 f809 	bl	256ee <memcpy>
		i += copy_count;
   106dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   106de:	b2d9      	uxtb	r1, r3
   106e0:	2333      	movs	r3, #51	; 0x33
   106e2:	18fb      	adds	r3, r7, r3
   106e4:	2233      	movs	r2, #51	; 0x33
   106e6:	18ba      	adds	r2, r7, r2
   106e8:	7812      	ldrb	r2, [r2, #0]
   106ea:	188a      	adds	r2, r1, r2
   106ec:	701a      	strb	r2, [r3, #0]

	if (rand_out == NULL) {
		return -1;
	}

	while (i < count) {
   106ee:	2333      	movs	r3, #51	; 0x33
   106f0:	18fb      	adds	r3, r7, r3
   106f2:	781a      	ldrb	r2, [r3, #0]
   106f4:	687b      	ldr	r3, [r7, #4]
   106f6:	429a      	cmp	r2, r3
   106f8:	d3cf      	bcc.n	1069a <atmel_get_random_number+0x26>
		}
		copy_count = (count - i > RANDOM_NUM_SIZE) ? RANDOM_NUM_SIZE : count - i;
		XMEMCPY(&rand_out[i], rng_buffer, copy_count);
		i += copy_count;
	}
    atcab_printbin_label((const char*)"\r\nRandom Number", rand_out, count);
   106fa:	687a      	ldr	r2, [r7, #4]
   106fc:	6839      	ldr	r1, [r7, #0]
   106fe:	4b04      	ldr	r3, [pc, #16]	; (10710 <atmel_get_random_number+0x9c>)
   10700:	0018      	movs	r0, r3
   10702:	f00b f873 	bl	1b7ec <atcab_printbin_label>
#else
    /* TODO: Use on-board TRNG */
#endif
	return ret;
   10706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   10708:	0018      	movs	r0, r3
   1070a:	46bd      	mov	sp, r7
   1070c:	b00e      	add	sp, #56	; 0x38
   1070e:	bd80      	pop	{r7, pc}
   10710:	0002c800 	.word	0x0002c800

00010714 <atmel_get_random_block>:

int atmel_get_random_block(unsigned char* output, unsigned int sz)
{
   10714:	b580      	push	{r7, lr}
   10716:	b082      	sub	sp, #8
   10718:	af00      	add	r7, sp, #0
   1071a:	6078      	str	r0, [r7, #4]
   1071c:	6039      	str	r1, [r7, #0]
	return atmel_get_random_number((uint32_t)sz, (uint8_t*)output);
   1071e:	687a      	ldr	r2, [r7, #4]
   10720:	683b      	ldr	r3, [r7, #0]
   10722:	0011      	movs	r1, r2
   10724:	0018      	movs	r0, r3
   10726:	f7ff ffa5 	bl	10674 <atmel_get_random_number>
   1072a:	0003      	movs	r3, r0
}
   1072c:	0018      	movs	r0, r3
   1072e:	46bd      	mov	sp, r7
   10730:	b002      	add	sp, #8
   10732:	bd80      	pop	{r7, pc}

00010734 <atmel_get_curr_time_and_date>:
#include "asf.h"
#include "rtc_calendar.h"
extern struct rtc_module *_rtc_instance[RTC_INST_NUM];

long atmel_get_curr_time_and_date(long* tm)
{
   10734:	b5f0      	push	{r4, r5, r6, r7, lr}
   10736:	4647      	mov	r7, r8
   10738:	b480      	push	{r7}
   1073a:	b094      	sub	sp, #80	; 0x50
   1073c:	af00      	add	r7, sp, #0
   1073e:	6078      	str	r0, [r7, #4]
    long rt = 0;
   10740:	2300      	movs	r3, #0
   10742:	647b      	str	r3, [r7, #68]	; 0x44

	/* Get current time */
    struct rtc_calendar_time rtcTime;
    const int monthDay[] = {0,31,59,90,120,151,181,212,243,273,304,334};
   10744:	2308      	movs	r3, #8
   10746:	18fb      	adds	r3, r7, r3
   10748:	4a44      	ldr	r2, [pc, #272]	; (1085c <atmel_get_curr_time_and_date+0x128>)
   1074a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1074c:	c313      	stmia	r3!, {r0, r1, r4}
   1074e:	ca13      	ldmia	r2!, {r0, r1, r4}
   10750:	c313      	stmia	r3!, {r0, r1, r4}
   10752:	ca13      	ldmia	r2!, {r0, r1, r4}
   10754:	c313      	stmia	r3!, {r0, r1, r4}
   10756:	ca13      	ldmia	r2!, {r0, r1, r4}
   10758:	c313      	stmia	r3!, {r0, r1, r4}
    int month, year, yearLeap;

	rtc_calendar_get_time(_rtc_instance[0], &rtcTime);
   1075a:	4b41      	ldr	r3, [pc, #260]	; (10860 <atmel_get_curr_time_and_date+0x12c>)
   1075c:	681b      	ldr	r3, [r3, #0]
   1075e:	2238      	movs	r2, #56	; 0x38
   10760:	18ba      	adds	r2, r7, r2
   10762:	0011      	movs	r1, r2
   10764:	0018      	movs	r0, r3
   10766:	f7f1 ff09 	bl	257c <rtc_calendar_get_time>

    /* Convert rtc_calendar_time to seconds since UTC */
    month = rtcTime.month % 12;
   1076a:	2338      	movs	r3, #56	; 0x38
   1076c:	18fb      	adds	r3, r7, r3
   1076e:	795b      	ldrb	r3, [r3, #5]
   10770:	210c      	movs	r1, #12
   10772:	0018      	movs	r0, r3
   10774:	f012 ff18 	bl	235a8 <__aeabi_uidivmod>
   10778:	000b      	movs	r3, r1
   1077a:	b2db      	uxtb	r3, r3
   1077c:	64fb      	str	r3, [r7, #76]	; 0x4c
    year =  rtcTime.year + rtcTime.month / 12;
   1077e:	2338      	movs	r3, #56	; 0x38
   10780:	18fb      	adds	r3, r7, r3
   10782:	88db      	ldrh	r3, [r3, #6]
   10784:	001c      	movs	r4, r3
   10786:	2338      	movs	r3, #56	; 0x38
   10788:	18fb      	adds	r3, r7, r3
   1078a:	795b      	ldrb	r3, [r3, #5]
   1078c:	210c      	movs	r1, #12
   1078e:	0018      	movs	r0, r3
   10790:	f012 fe84 	bl	2349c <__aeabi_uidiv>
   10794:	0003      	movs	r3, r0
   10796:	b2db      	uxtb	r3, r3
   10798:	18e3      	adds	r3, r4, r3
   1079a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (month < 0) {
   1079c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1079e:	2b00      	cmp	r3, #0
   107a0:	da05      	bge.n	107ae <atmel_get_curr_time_and_date+0x7a>
        month += 12;
   107a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   107a4:	330c      	adds	r3, #12
   107a6:	64fb      	str	r3, [r7, #76]	; 0x4c
        year--;
   107a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   107aa:	3b01      	subs	r3, #1
   107ac:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    yearLeap = (month > 1) ? year + 1 : year;
   107ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   107b0:	2b01      	cmp	r3, #1
   107b2:	dd02      	ble.n	107ba <atmel_get_curr_time_and_date+0x86>
   107b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   107b6:	3301      	adds	r3, #1
   107b8:	e000      	b.n	107bc <atmel_get_curr_time_and_date+0x88>
   107ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   107bc:	643b      	str	r3, [r7, #64]	; 0x40
    rt = rtcTime.second
   107be:	2338      	movs	r3, #56	; 0x38
   107c0:	18fb      	adds	r3, r7, r3
   107c2:	781b      	ldrb	r3, [r3, #0]
   107c4:	001d      	movs	r5, r3
        + 60 * (rtcTime.minute
   107c6:	2338      	movs	r3, #56	; 0x38
   107c8:	18fb      	adds	r3, r7, r3
   107ca:	785b      	ldrb	r3, [r3, #1]
            + 60 * (rtcTime.hour
   107cc:	001e      	movs	r6, r3
   107ce:	2338      	movs	r3, #56	; 0x38
   107d0:	18fb      	adds	r3, r7, r3
   107d2:	789b      	ldrb	r3, [r3, #2]
            + 24 * (monthDay[month] + rtcTime.day - 1
   107d4:	4698      	mov	r8, r3
   107d6:	2308      	movs	r3, #8
   107d8:	18fb      	adds	r3, r7, r3
   107da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   107dc:	0092      	lsls	r2, r2, #2
   107de:	58d3      	ldr	r3, [r2, r3]
   107e0:	2238      	movs	r2, #56	; 0x38
   107e2:	18ba      	adds	r2, r7, r2
   107e4:	7912      	ldrb	r2, [r2, #4]
   107e6:	189b      	adds	r3, r3, r2
   107e8:	1e5a      	subs	r2, r3, #1
                + 365 * (year - 70)
   107ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   107ec:	3b46      	subs	r3, #70	; 0x46
   107ee:	216e      	movs	r1, #110	; 0x6e
   107f0:	31ff      	adds	r1, #255	; 0xff
   107f2:	434b      	muls	r3, r1
   107f4:	18d2      	adds	r2, r2, r3
                + (yearLeap - 69) / 4
   107f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   107f8:	3b45      	subs	r3, #69	; 0x45
   107fa:	2b00      	cmp	r3, #0
   107fc:	da00      	bge.n	10800 <atmel_get_curr_time_and_date+0xcc>
   107fe:	3303      	adds	r3, #3
   10800:	109b      	asrs	r3, r3, #2
   10802:	18d4      	adds	r4, r2, r3
                - (yearLeap - 1) / 100
   10804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10806:	3b01      	subs	r3, #1
   10808:	2164      	movs	r1, #100	; 0x64
   1080a:	0018      	movs	r0, r3
   1080c:	f012 fed0 	bl	235b0 <__aeabi_idiv>
   10810:	0003      	movs	r3, r0
   10812:	1ae4      	subs	r4, r4, r3
                + (yearLeap + 299) / 400
   10814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10816:	332c      	adds	r3, #44	; 0x2c
   10818:	33ff      	adds	r3, #255	; 0xff
   1081a:	001a      	movs	r2, r3
   1081c:	23c8      	movs	r3, #200	; 0xc8
   1081e:	0059      	lsls	r1, r3, #1
   10820:	0010      	movs	r0, r2
   10822:	f012 fec5 	bl	235b0 <__aeabi_idiv>
   10826:	0003      	movs	r3, r0
   10828:	18e2      	adds	r2, r4, r3
    }
    yearLeap = (month > 1) ? year + 1 : year;
    rt = rtcTime.second
        + 60 * (rtcTime.minute
            + 60 * (rtcTime.hour
            + 24 * (monthDay[month] + rtcTime.day - 1
   1082a:	0013      	movs	r3, r2
   1082c:	005b      	lsls	r3, r3, #1
   1082e:	189b      	adds	r3, r3, r2
   10830:	00db      	lsls	r3, r3, #3
   10832:	4443      	add	r3, r8
   10834:	001a      	movs	r2, r3
        year--;
    }
    yearLeap = (month > 1) ? year + 1 : year;
    rt = rtcTime.second
        + 60 * (rtcTime.minute
            + 60 * (rtcTime.hour
   10836:	0013      	movs	r3, r2
   10838:	011b      	lsls	r3, r3, #4
   1083a:	1a9b      	subs	r3, r3, r2
   1083c:	009b      	lsls	r3, r3, #2
   1083e:	18f2      	adds	r2, r6, r3
        month += 12;
        year--;
    }
    yearLeap = (month > 1) ? year + 1 : year;
    rt = rtcTime.second
        + 60 * (rtcTime.minute
   10840:	0013      	movs	r3, r2
   10842:	011b      	lsls	r3, r3, #4
   10844:	1a9b      	subs	r3, r3, r2
   10846:	009b      	lsls	r3, r3, #2
    if (month < 0) {
        month += 12;
        year--;
    }
    yearLeap = (month > 1) ? year + 1 : year;
    rt = rtcTime.second
   10848:	18eb      	adds	r3, r5, r3
   1084a:	647b      	str	r3, [r7, #68]	; 0x44
                )
            )
        );

    (void)tm;
    return rt;
   1084c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   1084e:	0018      	movs	r0, r3
   10850:	46bd      	mov	sp, r7
   10852:	b014      	add	sp, #80	; 0x50
   10854:	bc04      	pop	{r2}
   10856:	4690      	mov	r8, r2
   10858:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1085a:	46c0      	nop			; (mov r8, r8)
   1085c:	0002c810 	.word	0x0002c810
   10860:	200004e0 	.word	0x200004e0

00010864 <atmel_ecc_translate_err>:


#ifdef WOLFSSL_ATECC508A

int atmel_ecc_translate_err(int status)
{
   10864:	b580      	push	{r7, lr}
   10866:	b082      	sub	sp, #8
   10868:	af00      	add	r7, sp, #0
   1086a:	6078      	str	r0, [r7, #4]
    switch (status) {
   1086c:	687b      	ldr	r3, [r7, #4]
   1086e:	2be2      	cmp	r3, #226	; 0xe2
   10870:	d005      	beq.n	1087e <atmel_ecc_translate_err+0x1a>
   10872:	2bfb      	cmp	r3, #251	; 0xfb
   10874:	d006      	beq.n	10884 <atmel_ecc_translate_err+0x20>
   10876:	2b00      	cmp	r3, #0
   10878:	d107      	bne.n	1088a <atmel_ecc_translate_err+0x26>
        case ATCA_SUCCESS:
            return 0;
   1087a:	2300      	movs	r3, #0
   1087c:	e00e      	b.n	1089c <atmel_ecc_translate_err+0x38>
        case ATCA_BAD_PARAM:
            return BAD_FUNC_ARG;
   1087e:	23ad      	movs	r3, #173	; 0xad
   10880:	425b      	negs	r3, r3
   10882:	e00b      	b.n	1089c <atmel_ecc_translate_err+0x38>
        case ATCA_ALLOC_FAILURE:
            return MEMORY_E;
   10884:	237d      	movs	r3, #125	; 0x7d
   10886:	425b      	negs	r3, r3
   10888:	e008      	b.n	1089c <atmel_ecc_translate_err+0x38>
        default:
        #ifdef WOLFSSL_ATECC508A_DEBUG
            printf("ATECC Failure: %x\n", (word32)status);
   1088a:	687a      	ldr	r2, [r7, #4]
   1088c:	4b05      	ldr	r3, [pc, #20]	; (108a4 <atmel_ecc_translate_err+0x40>)
   1088e:	0011      	movs	r1, r2
   10890:	0018      	movs	r0, r3
   10892:	f015 fc75 	bl	26180 <iprintf>
        #endif
            break;
   10896:	46c0      	nop			; (mov r8, r8)
    }
    return WC_HW_E;
   10898:	23f8      	movs	r3, #248	; 0xf8
   1089a:	425b      	negs	r3, r3
}
   1089c:	0018      	movs	r0, r3
   1089e:	46bd      	mov	sp, r7
   108a0:	b002      	add	sp, #8
   108a2:	bd80      	pop	{r7, pc}
   108a4:	0002c840 	.word	0x0002c840

000108a8 <atmel_ecc_alloc>:
    return 0;
}

/* Function to allocate new slotId number */
int atmel_ecc_alloc(int slotType)
{
   108a8:	b580      	push	{r7, lr}
   108aa:	b084      	sub	sp, #16
   108ac:	af00      	add	r7, sp, #0
   108ae:	6078      	str	r0, [r7, #4]
    int slotId = ATECC_INVALID_SLOT, i;
   108b0:	23ff      	movs	r3, #255	; 0xff
   108b2:	60fb      	str	r3, [r7, #12]

#ifndef SINGLE_THREADED
    wc_LockMutex(&mSlotMutex);
#endif

    if (mSlotAlloc) {
   108b4:	4b24      	ldr	r3, [pc, #144]	; (10948 <atmel_ecc_alloc+0xa0>)
   108b6:	681b      	ldr	r3, [r3, #0]
   108b8:	2b00      	cmp	r3, #0
   108ba:	d007      	beq.n	108cc <atmel_ecc_alloc+0x24>
        slotId = mSlotAlloc(slotType);
   108bc:	4b22      	ldr	r3, [pc, #136]	; (10948 <atmel_ecc_alloc+0xa0>)
   108be:	681b      	ldr	r3, [r3, #0]
   108c0:	687a      	ldr	r2, [r7, #4]
   108c2:	0010      	movs	r0, r2
   108c4:	4798      	blx	r3
   108c6:	0003      	movs	r3, r0
   108c8:	60fb      	str	r3, [r7, #12]
   108ca:	e038      	b.n	1093e <atmel_ecc_alloc+0x96>
    }
    else {
        switch (slotType) {
   108cc:	687b      	ldr	r3, [r7, #4]
   108ce:	2b04      	cmp	r3, #4
   108d0:	d825      	bhi.n	1091e <atmel_ecc_alloc+0x76>
   108d2:	687b      	ldr	r3, [r7, #4]
   108d4:	009a      	lsls	r2, r3, #2
   108d6:	4b1d      	ldr	r3, [pc, #116]	; (1094c <atmel_ecc_alloc+0xa4>)
   108d8:	18d3      	adds	r3, r2, r3
   108da:	681b      	ldr	r3, [r3, #0]
   108dc:	469f      	mov	pc, r3
            case ATMEL_SLOT_ENCKEY:
                /* not reserved in mSlotList, so return */
                slotId = ATECC_SLOT_I2C_ENC;
   108de:	2304      	movs	r3, #4
   108e0:	60fb      	str	r3, [r7, #12]
                goto exit;
   108e2:	e02c      	b.n	1093e <atmel_ecc_alloc+0x96>
            case ATMEL_SLOT_DEVICE:
                /* not reserved in mSlotList, so return */
                slotId = ATECC_SLOT_AUTH_PRIV;
   108e4:	2300      	movs	r3, #0
   108e6:	60fb      	str	r3, [r7, #12]
                goto exit;
   108e8:	e029      	b.n	1093e <atmel_ecc_alloc+0x96>
            case ATMEL_SLOT_ECDHE:
                slotId = ATECC_SLOT_ECDHE_PRIV;
   108ea:	2302      	movs	r3, #2
   108ec:	60fb      	str	r3, [r7, #12]
                break;
   108ee:	e016      	b.n	1091e <atmel_ecc_alloc+0x76>
            case ATMEL_SLOT_ECDHE_ENC:
                slotId = ATECC_SLOT_ENC_PARENT;
   108f0:	2307      	movs	r3, #7
   108f2:	60fb      	str	r3, [r7, #12]
                break;
   108f4:	e013      	b.n	1091e <atmel_ecc_alloc+0x76>
            case ATMEL_SLOT_ANY:
                for (i=0; i < ATECC_MAX_SLOT; i++) {
   108f6:	2300      	movs	r3, #0
   108f8:	60bb      	str	r3, [r7, #8]
   108fa:	e00c      	b.n	10916 <atmel_ecc_alloc+0x6e>
                    /* Find free slotId */
                    if (mSlotList[i] == ATECC_INVALID_SLOT) {
   108fc:	4a14      	ldr	r2, [pc, #80]	; (10950 <atmel_ecc_alloc+0xa8>)
   108fe:	68bb      	ldr	r3, [r7, #8]
   10900:	18d3      	adds	r3, r2, r3
   10902:	781b      	ldrb	r3, [r3, #0]
   10904:	2bff      	cmp	r3, #255	; 0xff
   10906:	d103      	bne.n	10910 <atmel_ecc_alloc+0x68>
                        slotId = i;
   10908:	68bb      	ldr	r3, [r7, #8]
   1090a:	60fb      	str	r3, [r7, #12]
                        break;
   1090c:	46c0      	nop			; (mov r8, r8)
                    }
                }
                break;
   1090e:	e005      	b.n	1091c <atmel_ecc_alloc+0x74>
                break;
            case ATMEL_SLOT_ECDHE_ENC:
                slotId = ATECC_SLOT_ENC_PARENT;
                break;
            case ATMEL_SLOT_ANY:
                for (i=0; i < ATECC_MAX_SLOT; i++) {
   10910:	68bb      	ldr	r3, [r7, #8]
   10912:	3301      	adds	r3, #1
   10914:	60bb      	str	r3, [r7, #8]
   10916:	68bb      	ldr	r3, [r7, #8]
   10918:	2b07      	cmp	r3, #7
   1091a:	ddef      	ble.n	108fc <atmel_ecc_alloc+0x54>
                    if (mSlotList[i] == ATECC_INVALID_SLOT) {
                        slotId = i;
                        break;
                    }
                }
                break;
   1091c:	46c0      	nop			; (mov r8, r8)
        }

        /* is slot available */
        if (mSlotList[slotId] != ATECC_INVALID_SLOT) {
   1091e:	4a0c      	ldr	r2, [pc, #48]	; (10950 <atmel_ecc_alloc+0xa8>)
   10920:	68fb      	ldr	r3, [r7, #12]
   10922:	18d3      	adds	r3, r2, r3
   10924:	781b      	ldrb	r3, [r3, #0]
   10926:	2bff      	cmp	r3, #255	; 0xff
   10928:	d002      	beq.n	10930 <atmel_ecc_alloc+0x88>
            slotId = ATECC_INVALID_SLOT;
   1092a:	23ff      	movs	r3, #255	; 0xff
   1092c:	60fb      	str	r3, [r7, #12]
   1092e:	e006      	b.n	1093e <atmel_ecc_alloc+0x96>
        }
        else {
            mSlotList[slotId] = slotId;
   10930:	68fb      	ldr	r3, [r7, #12]
   10932:	b2d9      	uxtb	r1, r3
   10934:	4a06      	ldr	r2, [pc, #24]	; (10950 <atmel_ecc_alloc+0xa8>)
   10936:	68fb      	ldr	r3, [r7, #12]
   10938:	18d3      	adds	r3, r2, r3
   1093a:	1c0a      	adds	r2, r1, #0
   1093c:	701a      	strb	r2, [r3, #0]
exit:
#ifndef SINGLE_THREADED
    wc_UnLockMutex(&mSlotMutex);
#endif

    return slotId;
   1093e:	68fb      	ldr	r3, [r7, #12]
}
   10940:	0018      	movs	r0, r3
   10942:	46bd      	mov	sp, r7
   10944:	b004      	add	sp, #16
   10946:	bd80      	pop	{r7, pc}
   10948:	20000338 	.word	0x20000338
   1094c:	0002c8f4 	.word	0x0002c8f4
   10950:	20000340 	.word	0x20000340

00010954 <atmel_ecc_free>:


/* Function to return slotId number to available list */
void atmel_ecc_free(int slotId)
{
   10954:	b580      	push	{r7, lr}
   10956:	b082      	sub	sp, #8
   10958:	af00      	add	r7, sp, #0
   1095a:	6078      	str	r0, [r7, #4]
#ifndef SINGLE_THREADED
    wc_LockMutex(&mSlotMutex);
#endif
    if (mSlotDealloc) {
   1095c:	4b0f      	ldr	r3, [pc, #60]	; (1099c <atmel_ecc_free+0x48>)
   1095e:	681b      	ldr	r3, [r3, #0]
   10960:	2b00      	cmp	r3, #0
   10962:	d005      	beq.n	10970 <atmel_ecc_free+0x1c>
        mSlotDealloc(slotId);
   10964:	4b0d      	ldr	r3, [pc, #52]	; (1099c <atmel_ecc_free+0x48>)
   10966:	681b      	ldr	r3, [r3, #0]
   10968:	687a      	ldr	r2, [r7, #4]
   1096a:	0010      	movs	r0, r2
   1096c:	4798      	blx	r3
        }
    }
#ifndef SINGLE_THREADED
    wc_UnLockMutex(&mSlotMutex);
#endif
}
   1096e:	e010      	b.n	10992 <atmel_ecc_free+0x3e>
    wc_LockMutex(&mSlotMutex);
#endif
    if (mSlotDealloc) {
        mSlotDealloc(slotId);
    }
    else if (slotId >= 0 && slotId < ATECC_MAX_SLOT) {
   10970:	687b      	ldr	r3, [r7, #4]
   10972:	2b00      	cmp	r3, #0
   10974:	db0d      	blt.n	10992 <atmel_ecc_free+0x3e>
   10976:	687b      	ldr	r3, [r7, #4]
   10978:	2b07      	cmp	r3, #7
   1097a:	dc0a      	bgt.n	10992 <atmel_ecc_free+0x3e>
        if (slotId != ATECC_SLOT_AUTH_PRIV && slotId != ATECC_SLOT_I2C_ENC) {
   1097c:	687b      	ldr	r3, [r7, #4]
   1097e:	2b00      	cmp	r3, #0
   10980:	d007      	beq.n	10992 <atmel_ecc_free+0x3e>
   10982:	687b      	ldr	r3, [r7, #4]
   10984:	2b04      	cmp	r3, #4
   10986:	d004      	beq.n	10992 <atmel_ecc_free+0x3e>
            /* Mark slotId free */
            mSlotList[slotId] = ATECC_INVALID_SLOT;
   10988:	4a05      	ldr	r2, [pc, #20]	; (109a0 <atmel_ecc_free+0x4c>)
   1098a:	687b      	ldr	r3, [r7, #4]
   1098c:	18d3      	adds	r3, r2, r3
   1098e:	22ff      	movs	r2, #255	; 0xff
   10990:	701a      	strb	r2, [r3, #0]
        }
    }
#ifndef SINGLE_THREADED
    wc_UnLockMutex(&mSlotMutex);
#endif
}
   10992:	46c0      	nop			; (mov r8, r8)
   10994:	46bd      	mov	sp, r7
   10996:	b002      	add	sp, #8
   10998:	bd80      	pop	{r7, pc}
   1099a:	46c0      	nop			; (mov r8, r8)
   1099c:	2000033c 	.word	0x2000033c
   109a0:	20000340 	.word	0x20000340

000109a4 <atmel_get_enc_key_default>:

/**
 * \brief Callback function for getting the current encryption key
 */
int atmel_get_enc_key_default(byte* enckey, word16 keysize)
{
   109a4:	b580      	push	{r7, lr}
   109a6:	b082      	sub	sp, #8
   109a8:	af00      	add	r7, sp, #0
   109aa:	6078      	str	r0, [r7, #4]
   109ac:	000a      	movs	r2, r1
   109ae:	1cbb      	adds	r3, r7, #2
   109b0:	801a      	strh	r2, [r3, #0]
    if (enckey == NULL || keysize != ATECC_KEY_SIZE) {
   109b2:	687b      	ldr	r3, [r7, #4]
   109b4:	2b00      	cmp	r3, #0
   109b6:	d003      	beq.n	109c0 <atmel_get_enc_key_default+0x1c>
   109b8:	1cbb      	adds	r3, r7, #2
   109ba:	881b      	ldrh	r3, [r3, #0]
   109bc:	2b20      	cmp	r3, #32
   109be:	d002      	beq.n	109c6 <atmel_get_enc_key_default+0x22>
        return BAD_FUNC_ARG;
   109c0:	23ad      	movs	r3, #173	; 0xad
   109c2:	425b      	negs	r3, r3
   109c4:	e007      	b.n	109d6 <atmel_get_enc_key_default+0x32>
    }

    XMEMSET(enckey, 0xFF, keysize); /* use default value */
   109c6:	1cbb      	adds	r3, r7, #2
   109c8:	881a      	ldrh	r2, [r3, #0]
   109ca:	687b      	ldr	r3, [r7, #4]
   109cc:	21ff      	movs	r1, #255	; 0xff
   109ce:	0018      	movs	r0, r3
   109d0:	f014 feab 	bl	2572a <memset>

    return 0;
   109d4:	2300      	movs	r3, #0
}
   109d6:	0018      	movs	r0, r3
   109d8:	46bd      	mov	sp, r7
   109da:	b002      	add	sp, #8
   109dc:	bd80      	pop	{r7, pc}
   109de:	46c0      	nop			; (mov r8, r8)

000109e0 <atmel_init_enc_key>:

/**
 * \brief Write enc key before.
 */
static int atmel_init_enc_key(void)
{
   109e0:	b580      	push	{r7, lr}
   109e2:	b08e      	sub	sp, #56	; 0x38
   109e4:	af02      	add	r7, sp, #8
    int ret;
	uint8_t read_key[ATECC_KEY_SIZE];
    uint8_t writeBlock = 0;
   109e6:	232f      	movs	r3, #47	; 0x2f
   109e8:	18fb      	adds	r3, r7, r3
   109ea:	2200      	movs	r2, #0
   109ec:	701a      	strb	r2, [r3, #0]
    uint8_t writeOffset = 0;
   109ee:	232e      	movs	r3, #46	; 0x2e
   109f0:	18fb      	adds	r3, r7, r3
   109f2:	2200      	movs	r2, #0
   109f4:	701a      	strb	r2, [r3, #0]
    int slotId;

    slotId = atmel_ecc_alloc(ATMEL_SLOT_ENCKEY);
   109f6:	2001      	movs	r0, #1
   109f8:	f7ff ff56 	bl	108a8 <atmel_ecc_alloc>
   109fc:	0003      	movs	r3, r0
   109fe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* check for encryption key slotId */
    if (slotId == ATECC_INVALID_SLOT)
   10a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10a02:	2bff      	cmp	r3, #255	; 0xff
   10a04:	d102      	bne.n	10a0c <atmel_init_enc_key+0x2c>
        return BAD_FUNC_ARG;
   10a06:	23ad      	movs	r3, #173	; 0xad
   10a08:	425b      	negs	r3, r3
   10a0a:	e022      	b.n	10a52 <atmel_init_enc_key+0x72>

    /* get encryption key */
    ATECC_GET_ENC_KEY(read_key, sizeof(read_key));
   10a0c:	1d3b      	adds	r3, r7, #4
   10a0e:	2120      	movs	r1, #32
   10a10:	0018      	movs	r0, r3
   10a12:	f7ff ffc7 	bl	109a4 <atmel_get_enc_key_default>

    ret = atcab_write_zone(ATCA_ZONE_DATA, slotId, writeBlock, writeOffset,
   10a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10a18:	b299      	uxth	r1, r3
   10a1a:	232e      	movs	r3, #46	; 0x2e
   10a1c:	18fb      	adds	r3, r7, r3
   10a1e:	7818      	ldrb	r0, [r3, #0]
   10a20:	232f      	movs	r3, #47	; 0x2f
   10a22:	18fb      	adds	r3, r7, r3
   10a24:	781a      	ldrb	r2, [r3, #0]
   10a26:	2320      	movs	r3, #32
   10a28:	9301      	str	r3, [sp, #4]
   10a2a:	1d3b      	adds	r3, r7, #4
   10a2c:	9300      	str	r3, [sp, #0]
   10a2e:	0003      	movs	r3, r0
   10a30:	2002      	movs	r0, #2
   10a32:	f00a fd31 	bl	1b498 <atcab_write_zone>
   10a36:	0003      	movs	r3, r0
   10a38:	627b      	str	r3, [r7, #36]	; 0x24
        read_key, ATCA_BLOCK_SIZE);
    ForceZero(read_key, sizeof(read_key));
   10a3a:	1d3b      	adds	r3, r7, #4
   10a3c:	2120      	movs	r1, #32
   10a3e:	0018      	movs	r0, r3
   10a40:	f7ff fe02 	bl	10648 <ForceZero>
    ret = atmel_ecc_translate_err(ret);
   10a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10a46:	0018      	movs	r0, r3
   10a48:	f7ff ff0c 	bl	10864 <atmel_ecc_translate_err>
   10a4c:	0003      	movs	r3, r0
   10a4e:	627b      	str	r3, [r7, #36]	; 0x24

	return ret;
   10a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   10a52:	0018      	movs	r0, r3
   10a54:	46bd      	mov	sp, r7
   10a56:	b00c      	add	sp, #48	; 0x30
   10a58:	bd80      	pop	{r7, pc}
   10a5a:	46c0      	nop			; (mov r8, r8)

00010a5c <atmel_get_rev_info>:

int atmel_get_rev_info(word32* revision)
{
   10a5c:	b580      	push	{r7, lr}
   10a5e:	b084      	sub	sp, #16
   10a60:	af00      	add	r7, sp, #0
   10a62:	6078      	str	r0, [r7, #4]
    int ret;
    ret = atcab_info((uint8_t*)revision);
   10a64:	687b      	ldr	r3, [r7, #4]
   10a66:	0018      	movs	r0, r3
   10a68:	f009 faa2 	bl	19fb0 <atcab_info>
   10a6c:	0003      	movs	r3, r0
   10a6e:	60fb      	str	r3, [r7, #12]
    ret = atmel_ecc_translate_err(ret);
   10a70:	68fb      	ldr	r3, [r7, #12]
   10a72:	0018      	movs	r0, r3
   10a74:	f7ff fef6 	bl	10864 <atmel_ecc_translate_err>
   10a78:	0003      	movs	r3, r0
   10a7a:	60fb      	str	r3, [r7, #12]
    return ret;
   10a7c:	68fb      	ldr	r3, [r7, #12]
}
   10a7e:	0018      	movs	r0, r3
   10a80:	46bd      	mov	sp, r7
   10a82:	b004      	add	sp, #16
   10a84:	bd80      	pop	{r7, pc}
   10a86:	46c0      	nop			; (mov r8, r8)

00010a88 <atmel_show_rev_info>:

void atmel_show_rev_info(void)
{
   10a88:	b580      	push	{r7, lr}
   10a8a:	b082      	sub	sp, #8
   10a8c:	af00      	add	r7, sp, #0
#ifdef WOLFSSL_ATECC508A_DEBUG
    word32 revision = 0;
   10a8e:	2300      	movs	r3, #0
   10a90:	607b      	str	r3, [r7, #4]
    atmel_get_rev_info(&revision);
   10a92:	1d3b      	adds	r3, r7, #4
   10a94:	0018      	movs	r0, r3
   10a96:	f7ff ffe1 	bl	10a5c <atmel_get_rev_info>
    printf("ATECC508A Revision: %x\n", (word32)revision);
   10a9a:	687a      	ldr	r2, [r7, #4]
   10a9c:	4b04      	ldr	r3, [pc, #16]	; (10ab0 <atmel_show_rev_info+0x28>)
   10a9e:	0011      	movs	r1, r2
   10aa0:	0018      	movs	r0, r3
   10aa2:	f015 fb6d 	bl	26180 <iprintf>
#endif
}
   10aa6:	46c0      	nop			; (mov r8, r8)
   10aa8:	46bd      	mov	sp, r7
   10aaa:	b002      	add	sp, #8
   10aac:	bd80      	pop	{r7, pc}
   10aae:	46c0      	nop			; (mov r8, r8)
   10ab0:	0002c854 	.word	0x0002c854

00010ab4 <atmel_ecc_create_pms>:

int atmel_ecc_create_pms(int slotId, const uint8_t* peerKey, uint8_t* pms)
{
   10ab4:	b590      	push	{r4, r7, lr}
   10ab6:	b091      	sub	sp, #68	; 0x44
   10ab8:	af02      	add	r7, sp, #8
   10aba:	60f8      	str	r0, [r7, #12]
   10abc:	60b9      	str	r1, [r7, #8]
   10abe:	607a      	str	r2, [r7, #4]
    int ret;
    uint8_t read_key[ATECC_KEY_SIZE];
    int slotIdEnc;

    slotIdEnc = atmel_ecc_alloc(ATMEL_SLOT_ECDHE_ENC);
   10ac0:	2004      	movs	r0, #4
   10ac2:	f7ff fef1 	bl	108a8 <atmel_ecc_alloc>
   10ac6:	0003      	movs	r3, r0
   10ac8:	637b      	str	r3, [r7, #52]	; 0x34
    if (slotIdEnc == ATECC_INVALID_SLOT)
   10aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10acc:	2bff      	cmp	r3, #255	; 0xff
   10ace:	d102      	bne.n	10ad6 <atmel_ecc_create_pms+0x22>
        return BAD_FUNC_ARG;
   10ad0:	23ad      	movs	r3, #173	; 0xad
   10ad2:	425b      	negs	r3, r3
   10ad4:	e01a      	b.n	10b0c <atmel_ecc_create_pms+0x58>

    /* get encryption key */
    ATECC_GET_ENC_KEY(read_key, sizeof(read_key));
   10ad6:	2310      	movs	r3, #16
   10ad8:	18fb      	adds	r3, r7, r3
   10ada:	2120      	movs	r1, #32
   10adc:	0018      	movs	r0, r3
   10ade:	f7ff ff61 	bl	109a4 <atmel_get_enc_key_default>

    /* send the encrypted version of the ECDH command */
    ret = atcab_ecdh_enc(slotId, peerKey, pms, read_key, slotIdEnc);
   10ae2:	68fb      	ldr	r3, [r7, #12]
   10ae4:	b298      	uxth	r0, r3
   10ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10ae8:	b29b      	uxth	r3, r3
   10aea:	2210      	movs	r2, #16
   10aec:	18bc      	adds	r4, r7, r2
   10aee:	687a      	ldr	r2, [r7, #4]
   10af0:	68b9      	ldr	r1, [r7, #8]
   10af2:	9300      	str	r3, [sp, #0]
   10af4:	0023      	movs	r3, r4
   10af6:	f009 f871 	bl	19bdc <atcab_ecdh_enc>
   10afa:	0003      	movs	r3, r0
   10afc:	633b      	str	r3, [r7, #48]	; 0x30
    ret = atmel_ecc_translate_err(ret);
   10afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10b00:	0018      	movs	r0, r3
   10b02:	f7ff feaf 	bl	10864 <atmel_ecc_translate_err>
   10b06:	0003      	movs	r3, r0
   10b08:	633b      	str	r3, [r7, #48]	; 0x30
    return ret;
   10b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   10b0c:	0018      	movs	r0, r3
   10b0e:	46bd      	mov	sp, r7
   10b10:	b00f      	add	sp, #60	; 0x3c
   10b12:	bd90      	pop	{r4, r7, pc}

00010b14 <atmel_ecc_create_key>:

int atmel_ecc_create_key(int slotId, byte* peerKey)
{
   10b14:	b580      	push	{r7, lr}
   10b16:	b084      	sub	sp, #16
   10b18:	af00      	add	r7, sp, #0
   10b1a:	6078      	str	r0, [r7, #4]
   10b1c:	6039      	str	r1, [r7, #0]
    int ret;

    /* verify provided slotId */
    if (slotId == ATECC_INVALID_SLOT) {
   10b1e:	687b      	ldr	r3, [r7, #4]
   10b20:	2bff      	cmp	r3, #255	; 0xff
   10b22:	d102      	bne.n	10b2a <atmel_ecc_create_key+0x16>
        return WC_HW_WAIT_E;
   10b24:	23f9      	movs	r3, #249	; 0xf9
   10b26:	425b      	negs	r3, r3
   10b28:	e00f      	b.n	10b4a <atmel_ecc_create_key+0x36>
    }

    /* generate new ephemeral key on device */
    ret = atcab_genkey(slotId, peerKey);
   10b2a:	687b      	ldr	r3, [r7, #4]
   10b2c:	b29b      	uxth	r3, r3
   10b2e:	683a      	ldr	r2, [r7, #0]
   10b30:	0011      	movs	r1, r2
   10b32:	0018      	movs	r0, r3
   10b34:	f009 f9b6 	bl	19ea4 <atcab_genkey>
   10b38:	0003      	movs	r3, r0
   10b3a:	60fb      	str	r3, [r7, #12]
    ret = atmel_ecc_translate_err(ret);
   10b3c:	68fb      	ldr	r3, [r7, #12]
   10b3e:	0018      	movs	r0, r3
   10b40:	f7ff fe90 	bl	10864 <atmel_ecc_translate_err>
   10b44:	0003      	movs	r3, r0
   10b46:	60fb      	str	r3, [r7, #12]
    return ret;
   10b48:	68fb      	ldr	r3, [r7, #12]
}
   10b4a:	0018      	movs	r0, r3
   10b4c:	46bd      	mov	sp, r7
   10b4e:	b004      	add	sp, #16
   10b50:	bd80      	pop	{r7, pc}
   10b52:	46c0      	nop			; (mov r8, r8)

00010b54 <atmel_ecc_sign>:

int atmel_ecc_sign(int slotId, const byte* message, byte* signature)
{
   10b54:	b580      	push	{r7, lr}
   10b56:	b086      	sub	sp, #24
   10b58:	af00      	add	r7, sp, #0
   10b5a:	60f8      	str	r0, [r7, #12]
   10b5c:	60b9      	str	r1, [r7, #8]
   10b5e:	607a      	str	r2, [r7, #4]
    int ret;

    ret = atcab_sign(slotId, message, signature);
   10b60:	68fb      	ldr	r3, [r7, #12]
   10b62:	b29b      	uxth	r3, r3
   10b64:	687a      	ldr	r2, [r7, #4]
   10b66:	68b9      	ldr	r1, [r7, #8]
   10b68:	0018      	movs	r0, r3
   10b6a:	f00a fa3b 	bl	1afe4 <atcab_sign>
   10b6e:	0003      	movs	r3, r0
   10b70:	617b      	str	r3, [r7, #20]
    ret = atmel_ecc_translate_err(ret);
   10b72:	697b      	ldr	r3, [r7, #20]
   10b74:	0018      	movs	r0, r3
   10b76:	f7ff fe75 	bl	10864 <atmel_ecc_translate_err>
   10b7a:	0003      	movs	r3, r0
   10b7c:	617b      	str	r3, [r7, #20]
    return ret;
   10b7e:	697b      	ldr	r3, [r7, #20]
}
   10b80:	0018      	movs	r0, r3
   10b82:	46bd      	mov	sp, r7
   10b84:	b006      	add	sp, #24
   10b86:	bd80      	pop	{r7, pc}

00010b88 <atmel_ecc_verify>:

int atmel_ecc_verify(const byte* message, const byte* signature,
    const byte* pubkey, int* verified)
{
   10b88:	b580      	push	{r7, lr}
   10b8a:	b086      	sub	sp, #24
   10b8c:	af00      	add	r7, sp, #0
   10b8e:	60f8      	str	r0, [r7, #12]
   10b90:	60b9      	str	r1, [r7, #8]
   10b92:	607a      	str	r2, [r7, #4]
   10b94:	603b      	str	r3, [r7, #0]
    int ret;

    ret = atcab_verify_extern(message, signature, pubkey, (bool*)verified);
   10b96:	683b      	ldr	r3, [r7, #0]
   10b98:	687a      	ldr	r2, [r7, #4]
   10b9a:	68b9      	ldr	r1, [r7, #8]
   10b9c:	68f8      	ldr	r0, [r7, #12]
   10b9e:	f00a fb83 	bl	1b2a8 <atcab_verify_extern>
   10ba2:	0003      	movs	r3, r0
   10ba4:	617b      	str	r3, [r7, #20]
    ret = atmel_ecc_translate_err(ret);
   10ba6:	697b      	ldr	r3, [r7, #20]
   10ba8:	0018      	movs	r0, r3
   10baa:	f7ff fe5b 	bl	10864 <atmel_ecc_translate_err>
   10bae:	0003      	movs	r3, r0
   10bb0:	617b      	str	r3, [r7, #20]
    return ret;
   10bb2:	697b      	ldr	r3, [r7, #20]
}
   10bb4:	0018      	movs	r0, r3
   10bb6:	46bd      	mov	sp, r7
   10bb8:	b006      	add	sp, #24
   10bba:	bd80      	pop	{r7, pc}

00010bbc <atmel_init>:
#endif /* WOLFSSL_ATECC508A */



int atmel_init(void)
{
   10bbc:	b590      	push	{r4, r7, lr}
   10bbe:	b085      	sub	sp, #20
   10bc0:	af00      	add	r7, sp, #0
    int ret = 0;
   10bc2:	2300      	movs	r3, #0
   10bc4:	60bb      	str	r3, [r7, #8]

#ifdef WOLFSSL_ATECC508A
    if (!mAtcaInitDone) {
   10bc6:	4b2e      	ldr	r3, [pc, #184]	; (10c80 <atmel_init+0xc4>)
   10bc8:	681b      	ldr	r3, [r3, #0]
   10bca:	2b00      	cmp	r3, #0
   10bcc:	d152      	bne.n	10c74 <atmel_init+0xb8>
    #ifndef SINGLE_THREADED
        wc_InitMutex(&mSlotMutex);
    #endif

        /* Init the free slotId list */
        for (i=0; i<ATECC_MAX_SLOT; i++) {
   10bce:	2300      	movs	r3, #0
   10bd0:	60fb      	str	r3, [r7, #12]
   10bd2:	e015      	b.n	10c00 <atmel_init+0x44>
            if (i == ATECC_SLOT_AUTH_PRIV || i == ATECC_SLOT_I2C_ENC) {
   10bd4:	68fb      	ldr	r3, [r7, #12]
   10bd6:	2b00      	cmp	r3, #0
   10bd8:	d002      	beq.n	10be0 <atmel_init+0x24>
   10bda:	68fb      	ldr	r3, [r7, #12]
   10bdc:	2b04      	cmp	r3, #4
   10bde:	d107      	bne.n	10bf0 <atmel_init+0x34>
                mSlotList[i] = i;
   10be0:	68fb      	ldr	r3, [r7, #12]
   10be2:	b2d9      	uxtb	r1, r3
   10be4:	4a27      	ldr	r2, [pc, #156]	; (10c84 <atmel_init+0xc8>)
   10be6:	68fb      	ldr	r3, [r7, #12]
   10be8:	18d3      	adds	r3, r2, r3
   10bea:	1c0a      	adds	r2, r1, #0
   10bec:	701a      	strb	r2, [r3, #0]
   10bee:	e004      	b.n	10bfa <atmel_init+0x3e>
            }
            else {
                /* ECC Slots (mark avail) */
                mSlotList[i] = ATECC_INVALID_SLOT;
   10bf0:	4a24      	ldr	r2, [pc, #144]	; (10c84 <atmel_init+0xc8>)
   10bf2:	68fb      	ldr	r3, [r7, #12]
   10bf4:	18d3      	adds	r3, r2, r3
   10bf6:	22ff      	movs	r2, #255	; 0xff
   10bf8:	701a      	strb	r2, [r3, #0]
    #ifndef SINGLE_THREADED
        wc_InitMutex(&mSlotMutex);
    #endif

        /* Init the free slotId list */
        for (i=0; i<ATECC_MAX_SLOT; i++) {
   10bfa:	68fb      	ldr	r3, [r7, #12]
   10bfc:	3301      	adds	r3, #1
   10bfe:	60fb      	str	r3, [r7, #12]
   10c00:	68fb      	ldr	r3, [r7, #12]
   10c02:	2b07      	cmp	r3, #7
   10c04:	dde6      	ble.n	10bd4 <atmel_init+0x18>
                mSlotList[i] = ATECC_INVALID_SLOT;
            }
        }

        /* Setup the hardware interface */
        XMEMSET(&cfg_ateccx08a_i2c_pi, 0, sizeof(cfg_ateccx08a_i2c_pi));
   10c06:	4b20      	ldr	r3, [pc, #128]	; (10c88 <atmel_init+0xcc>)
   10c08:	2230      	movs	r2, #48	; 0x30
   10c0a:	2100      	movs	r1, #0
   10c0c:	0018      	movs	r0, r3
   10c0e:	f014 fd8c 	bl	2572a <memset>
        cfg_ateccx08a_i2c_pi.iface_type             = ATCA_I2C_IFACE;
   10c12:	4b1d      	ldr	r3, [pc, #116]	; (10c88 <atmel_init+0xcc>)
   10c14:	2200      	movs	r2, #0
   10c16:	701a      	strb	r2, [r3, #0]
        cfg_ateccx08a_i2c_pi.devtype                = ATECC_DEV_TYPE;
   10c18:	4b1b      	ldr	r3, [pc, #108]	; (10c88 <atmel_init+0xcc>)
   10c1a:	2202      	movs	r2, #2
   10c1c:	705a      	strb	r2, [r3, #1]
        cfg_ateccx08a_i2c_pi.atcai2c.slave_address  = ATECC_I2C_ADDR;
   10c1e:	4b1a      	ldr	r3, [pc, #104]	; (10c88 <atmel_init+0xcc>)
   10c20:	22c0      	movs	r2, #192	; 0xc0
   10c22:	711a      	strb	r2, [r3, #4]
        cfg_ateccx08a_i2c_pi.atcai2c.bus            = ATECC_I2C_BUS;
   10c24:	4b18      	ldr	r3, [pc, #96]	; (10c88 <atmel_init+0xcc>)
   10c26:	2202      	movs	r2, #2
   10c28:	715a      	strb	r2, [r3, #5]
        cfg_ateccx08a_i2c_pi.atcai2c.baud           = 400000;
   10c2a:	4b17      	ldr	r3, [pc, #92]	; (10c88 <atmel_init+0xcc>)
   10c2c:	4a17      	ldr	r2, [pc, #92]	; (10c8c <atmel_init+0xd0>)
   10c2e:	609a      	str	r2, [r3, #8]
        cfg_ateccx08a_i2c_pi.wake_delay             = 1500;
   10c30:	4b15      	ldr	r3, [pc, #84]	; (10c88 <atmel_init+0xcc>)
   10c32:	4a17      	ldr	r2, [pc, #92]	; (10c90 <atmel_init+0xd4>)
   10c34:	849a      	strh	r2, [r3, #36]	; 0x24
        cfg_ateccx08a_i2c_pi.rx_retries             = 20;
   10c36:	4b14      	ldr	r3, [pc, #80]	; (10c88 <atmel_init+0xcc>)
   10c38:	2214      	movs	r2, #20
   10c3a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Initialize the CryptoAuthLib to communicate with ATECC508A */
        status = atcab_init(&cfg_ateccx08a_i2c_pi);
   10c3c:	1dfc      	adds	r4, r7, #7
   10c3e:	4b12      	ldr	r3, [pc, #72]	; (10c88 <atmel_init+0xcc>)
   10c40:	0018      	movs	r0, r3
   10c42:	f008 fddd 	bl	19800 <atcab_init>
   10c46:	0003      	movs	r3, r0
   10c48:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS) {
   10c4a:	1dfb      	adds	r3, r7, #7
   10c4c:	781b      	ldrb	r3, [r3, #0]
   10c4e:	2b00      	cmp	r3, #0
   10c50:	d002      	beq.n	10c58 <atmel_init+0x9c>
            WOLFSSL_MSG("Failed to initialize atcab");
            return WC_HW_E;
   10c52:	23f8      	movs	r3, #248	; 0xf8
   10c54:	425b      	negs	r3, r3
   10c56:	e00e      	b.n	10c76 <atmel_init+0xba>
        }

        /* show revision information */
        atmel_show_rev_info();
   10c58:	f7ff ff16 	bl	10a88 <atmel_show_rev_info>

    #ifdef WOLFSSL_ATECC508A_TLS
        /* Configure the ECC508 for use with TLS API functions */
        device_init_default();
   10c5c:	f012 f94e 	bl	22efc <device_init_default>

        /* Init the I2C pipe encryption key. */
        /* Value is generated/stored during pair for the ATECC508A and stored
            on micro flash */
        /* For this example its a fixed value */
		if (atmel_init_enc_key() != 0) {
   10c60:	f7ff febe 	bl	109e0 <atmel_init_enc_key>
   10c64:	1e03      	subs	r3, r0, #0
   10c66:	d002      	beq.n	10c6e <atmel_init+0xb2>
			WOLFSSL_MSG("Failed to initialize transport key");
            return WC_HW_E;
   10c68:	23f8      	movs	r3, #248	; 0xf8
   10c6a:	425b      	negs	r3, r3
   10c6c:	e003      	b.n	10c76 <atmel_init+0xba>
		}

        mAtcaInitDone = 1;
   10c6e:	4b04      	ldr	r3, [pc, #16]	; (10c80 <atmel_init+0xc4>)
   10c70:	2201      	movs	r2, #1
   10c72:	601a      	str	r2, [r3, #0]
    }
#endif /* WOLFSSL_ATECC508A */
    return ret;
   10c74:	68bb      	ldr	r3, [r7, #8]
}
   10c76:	0018      	movs	r0, r3
   10c78:	46bd      	mov	sp, r7
   10c7a:	b005      	add	sp, #20
   10c7c:	bd90      	pop	{r4, r7, pc}
   10c7e:	46c0      	nop			; (mov r8, r8)
   10c80:	20000334 	.word	0x20000334
   10c84:	20000340 	.word	0x20000340
   10c88:	20000348 	.word	0x20000348
   10c8c:	00061a80 	.word	0x00061a80
   10c90:	000005dc 	.word	0x000005dc

00010c94 <err_sys>:
#ifdef HAVE_STACK_SIZE
static THREAD_RETURN err_sys(const char* msg, int es)
#else
static int err_sys(const char* msg, int es)
#endif
{
   10c94:	b580      	push	{r7, lr}
   10c96:	b082      	sub	sp, #8
   10c98:	af00      	add	r7, sp, #0
   10c9a:	6078      	str	r0, [r7, #4]
   10c9c:	6039      	str	r1, [r7, #0]
    printf("%s error = %d\n", msg, es);
   10c9e:	683a      	ldr	r2, [r7, #0]
   10ca0:	6879      	ldr	r1, [r7, #4]
   10ca2:	4b05      	ldr	r3, [pc, #20]	; (10cb8 <err_sys+0x24>)
   10ca4:	0018      	movs	r0, r3
   10ca6:	f015 fa6b 	bl	26180 <iprintf>

    EXIT_TEST(-1);
   10caa:	2301      	movs	r3, #1
   10cac:	425b      	negs	r3, r3
}
   10cae:	0018      	movs	r0, r3
   10cb0:	46bd      	mov	sp, r7
   10cb2:	b002      	add	sp, #8
   10cb4:	bd80      	pop	{r7, pc}
   10cb6:	46c0      	nop			; (mov r8, r8)
   10cb8:	0002ca00 	.word	0x0002ca00

00010cbc <wolfcrypt_test>:
#ifdef HAVE_STACK_SIZE
THREAD_RETURN WOLFSSL_THREAD wolfcrypt_test(void* args)
#else
int wolfcrypt_test(void* args)
#endif
{
   10cbc:	b580      	push	{r7, lr}
   10cbe:	b084      	sub	sp, #16
   10cc0:	af00      	add	r7, sp, #0
   10cc2:	6078      	str	r0, [r7, #4]
    int ret;

    if (args)
   10cc4:	687b      	ldr	r3, [r7, #4]
   10cc6:	2b00      	cmp	r3, #0
   10cc8:	d003      	beq.n	10cd2 <wolfcrypt_test+0x16>
        ((func_args*)args)->return_code = -1; /* error state */
   10cca:	687b      	ldr	r3, [r7, #4]
   10ccc:	2201      	movs	r2, #1
   10cce:	4252      	negs	r2, r2
   10cd0:	609a      	str	r2, [r3, #8]
#ifdef HAVE_FIPS
    wolfCrypt_SetCb_fips(myFipsCb);
#endif

#if !defined(NO_BIG_INT)
    if (CheckCtcSettings() != 1)
   10cd2:	f7fe fb97 	bl	f404 <CheckRunTimeSettings>
   10cd6:	0003      	movs	r3, r0
   10cd8:	2b08      	cmp	r3, #8
   10cda:	d007      	beq.n	10cec <wolfcrypt_test+0x30>
        return err_sys("Build vs runtime math mismatch\n", -1000);
   10cdc:	4ac4      	ldr	r2, [pc, #784]	; (10ff0 <wolfcrypt_test+0x334>)
   10cde:	4bc5      	ldr	r3, [pc, #788]	; (10ff4 <wolfcrypt_test+0x338>)
   10ce0:	0011      	movs	r1, r2
   10ce2:	0018      	movs	r0, r3
   10ce4:	f7ff ffd6 	bl	10c94 <err_sys>
   10ce8:	0003      	movs	r3, r0
   10cea:	e17c      	b.n	10fe6 <wolfcrypt_test+0x32a>

#if defined(USE_FAST_MATH) && \
	(!defined(NO_RSA) || !defined(NO_DH) || defined(HAVE_ECC))
    if (CheckFastMathSettings() != 1)
   10cec:	f7fe fb90 	bl	f410 <CheckRunTimeFastMath>
   10cf0:	0003      	movs	r3, r0
   10cf2:	2b88      	cmp	r3, #136	; 0x88
   10cf4:	d007      	beq.n	10d06 <wolfcrypt_test+0x4a>
        return err_sys("Build vs runtime fastmath FP_MAX_BITS mismatch\n",
   10cf6:	4ac0      	ldr	r2, [pc, #768]	; (10ff8 <wolfcrypt_test+0x33c>)
   10cf8:	4bc0      	ldr	r3, [pc, #768]	; (10ffc <wolfcrypt_test+0x340>)
   10cfa:	0011      	movs	r1, r2
   10cfc:	0018      	movs	r0, r3
   10cfe:	f7ff ffc9 	bl	10c94 <err_sys>
   10d02:	0003      	movs	r3, r0
   10d04:	e16f      	b.n	10fe6 <wolfcrypt_test+0x32a>
        return err_sys("CAVP selftest failed!\n", ret);
    else
        printf("CAVP selftest passed!\n");
#endif

    if ( (ret = error_test()) != 0)
   10d06:	f000 f9c5 	bl	11094 <error_test>
   10d0a:	0003      	movs	r3, r0
   10d0c:	60fb      	str	r3, [r7, #12]
   10d0e:	68fb      	ldr	r3, [r7, #12]
   10d10:	2b00      	cmp	r3, #0
   10d12:	d007      	beq.n	10d24 <wolfcrypt_test+0x68>
        return err_sys("error    test failed!\n", ret);
   10d14:	68fa      	ldr	r2, [r7, #12]
   10d16:	4bba      	ldr	r3, [pc, #744]	; (11000 <wolfcrypt_test+0x344>)
   10d18:	0011      	movs	r1, r2
   10d1a:	0018      	movs	r0, r3
   10d1c:	f7ff ffba 	bl	10c94 <err_sys>
   10d20:	0003      	movs	r3, r0
   10d22:	e160      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "error    test passed!\n");
   10d24:	4bb7      	ldr	r3, [pc, #732]	; (11004 <wolfcrypt_test+0x348>)
   10d26:	0018      	movs	r0, r3
   10d28:	f015 fa2a 	bl	26180 <iprintf>

#ifndef NO_CODING
    if ( (ret = base64_test()) != 0)
   10d2c:	f000 fab4 	bl	11298 <base64_test>
   10d30:	0003      	movs	r3, r0
   10d32:	60fb      	str	r3, [r7, #12]
   10d34:	68fb      	ldr	r3, [r7, #12]
   10d36:	2b00      	cmp	r3, #0
   10d38:	d007      	beq.n	10d4a <wolfcrypt_test+0x8e>
        return err_sys("base64   test failed!\n", ret);
   10d3a:	68fa      	ldr	r2, [r7, #12]
   10d3c:	4bb2      	ldr	r3, [pc, #712]	; (11008 <wolfcrypt_test+0x34c>)
   10d3e:	0011      	movs	r1, r2
   10d40:	0018      	movs	r0, r3
   10d42:	f7ff ffa7 	bl	10c94 <err_sys>
   10d46:	0003      	movs	r3, r0
   10d48:	e14d      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "base64   test passed!\n");
   10d4a:	4bb0      	ldr	r3, [pc, #704]	; (1100c <wolfcrypt_test+0x350>)
   10d4c:	0018      	movs	r0, r3
   10d4e:	f015 fa17 	bl	26180 <iprintf>
        printf( "base16   test passed!\n");
#endif
#endif /* !NO_CODING */

#ifndef NO_ASN
    if ( (ret = asn_test()) != 0)
   10d52:	f000 fb7f 	bl	11454 <asn_test>
   10d56:	0003      	movs	r3, r0
   10d58:	60fb      	str	r3, [r7, #12]
   10d5a:	68fb      	ldr	r3, [r7, #12]
   10d5c:	2b00      	cmp	r3, #0
   10d5e:	d007      	beq.n	10d70 <wolfcrypt_test+0xb4>
        return err_sys("asn      test failed!\n", ret);
   10d60:	68fa      	ldr	r2, [r7, #12]
   10d62:	4bab      	ldr	r3, [pc, #684]	; (11010 <wolfcrypt_test+0x354>)
   10d64:	0011      	movs	r1, r2
   10d66:	0018      	movs	r0, r3
   10d68:	f7ff ff94 	bl	10c94 <err_sys>
   10d6c:	0003      	movs	r3, r0
   10d6e:	e13a      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "asn      test passed!\n");
   10d70:	4ba8      	ldr	r3, [pc, #672]	; (11014 <wolfcrypt_test+0x358>)
   10d72:	0018      	movs	r0, r3
   10d74:	f015 fa04 	bl	26180 <iprintf>
    else
        printf( "MD4      test passed!\n");
#endif

#ifndef NO_SHA
    if ( (ret = sha_test()) != 0)
   10d78:	f000 fbdc 	bl	11534 <sha_test>
   10d7c:	0003      	movs	r3, r0
   10d7e:	60fb      	str	r3, [r7, #12]
   10d80:	68fb      	ldr	r3, [r7, #12]
   10d82:	2b00      	cmp	r3, #0
   10d84:	d007      	beq.n	10d96 <wolfcrypt_test+0xda>
        return err_sys("SHA      test failed!\n", ret);
   10d86:	68fa      	ldr	r2, [r7, #12]
   10d88:	4ba3      	ldr	r3, [pc, #652]	; (11018 <wolfcrypt_test+0x35c>)
   10d8a:	0011      	movs	r1, r2
   10d8c:	0018      	movs	r0, r3
   10d8e:	f7ff ff81 	bl	10c94 <err_sys>
   10d92:	0003      	movs	r3, r0
   10d94:	e127      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "SHA      test passed!\n");
   10d96:	4ba1      	ldr	r3, [pc, #644]	; (1101c <wolfcrypt_test+0x360>)
   10d98:	0018      	movs	r0, r3
   10d9a:	f015 f9f1 	bl	26180 <iprintf>
    else
        printf( "SHA-224  test passed!\n");
#endif

#ifndef NO_SHA256
    if ( (ret = sha256_test()) != 0)
   10d9e:	f000 feed 	bl	11b7c <sha256_test>
   10da2:	0003      	movs	r3, r0
   10da4:	60fb      	str	r3, [r7, #12]
   10da6:	68fb      	ldr	r3, [r7, #12]
   10da8:	2b00      	cmp	r3, #0
   10daa:	d007      	beq.n	10dbc <wolfcrypt_test+0x100>
        return err_sys("SHA-256  test failed!\n", ret);
   10dac:	68fa      	ldr	r2, [r7, #12]
   10dae:	4b9c      	ldr	r3, [pc, #624]	; (11020 <wolfcrypt_test+0x364>)
   10db0:	0011      	movs	r1, r2
   10db2:	0018      	movs	r0, r3
   10db4:	f7ff ff6e 	bl	10c94 <err_sys>
   10db8:	0003      	movs	r3, r0
   10dba:	e114      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "SHA-256  test passed!\n");
   10dbc:	4b99      	ldr	r3, [pc, #612]	; (11024 <wolfcrypt_test+0x368>)
   10dbe:	0018      	movs	r0, r3
   10dc0:	f015 f9de 	bl	26180 <iprintf>
        return err_sys("SHA-3    test failed!\n", ret);
    else
        printf( "SHA-3    test passed!\n");
#endif

    if ( (ret = hash_test()) != 0)
   10dc4:	f001 f980 	bl	120c8 <hash_test>
   10dc8:	0003      	movs	r3, r0
   10dca:	60fb      	str	r3, [r7, #12]
   10dcc:	68fb      	ldr	r3, [r7, #12]
   10dce:	2b00      	cmp	r3, #0
   10dd0:	d007      	beq.n	10de2 <wolfcrypt_test+0x126>
        return err_sys("Hash     test failed!\n", ret);
   10dd2:	68fa      	ldr	r2, [r7, #12]
   10dd4:	4b94      	ldr	r3, [pc, #592]	; (11028 <wolfcrypt_test+0x36c>)
   10dd6:	0011      	movs	r1, r2
   10dd8:	0018      	movs	r0, r3
   10dda:	f7ff ff5b 	bl	10c94 <err_sys>
   10dde:	0003      	movs	r3, r0
   10de0:	e101      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "Hash     test passed!\n");
   10de2:	4b92      	ldr	r3, [pc, #584]	; (1102c <wolfcrypt_test+0x370>)
   10de4:	0018      	movs	r0, r3
   10de6:	f015 f9cb 	bl	26180 <iprintf>
        else
            printf( "HMAC-MD5 test passed!\n");
    #endif

    #ifndef NO_SHA
    if ( (ret = hmac_sha_test()) != 0)
   10dea:	f001 febf 	bl	12b6c <hmac_sha_test>
   10dee:	0003      	movs	r3, r0
   10df0:	60fb      	str	r3, [r7, #12]
   10df2:	68fb      	ldr	r3, [r7, #12]
   10df4:	2b00      	cmp	r3, #0
   10df6:	d007      	beq.n	10e08 <wolfcrypt_test+0x14c>
        return err_sys("HMAC-SHA test failed!\n", ret);
   10df8:	68fa      	ldr	r2, [r7, #12]
   10dfa:	4b8d      	ldr	r3, [pc, #564]	; (11030 <wolfcrypt_test+0x374>)
   10dfc:	0011      	movs	r1, r2
   10dfe:	0018      	movs	r0, r3
   10e00:	f7ff ff48 	bl	10c94 <err_sys>
   10e04:	0003      	movs	r3, r0
   10e06:	e0ee      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "HMAC-SHA test passed!\n");
   10e08:	4b8a      	ldr	r3, [pc, #552]	; (11034 <wolfcrypt_test+0x378>)
   10e0a:	0018      	movs	r0, r3
   10e0c:	f015 f9b8 	bl	26180 <iprintf>
        else
            printf( "HMAC-SHA224 test passed!\n");
    #endif

    #ifndef NO_SHA256
        if ( (ret = hmac_sha256_test()) != 0)
   10e10:	f002 f856 	bl	12ec0 <hmac_sha256_test>
   10e14:	0003      	movs	r3, r0
   10e16:	60fb      	str	r3, [r7, #12]
   10e18:	68fb      	ldr	r3, [r7, #12]
   10e1a:	2b00      	cmp	r3, #0
   10e1c:	d007      	beq.n	10e2e <wolfcrypt_test+0x172>
            return err_sys("HMAC-SHA256 test failed!\n", ret);
   10e1e:	68fa      	ldr	r2, [r7, #12]
   10e20:	4b85      	ldr	r3, [pc, #532]	; (11038 <wolfcrypt_test+0x37c>)
   10e22:	0011      	movs	r1, r2
   10e24:	0018      	movs	r0, r3
   10e26:	f7ff ff35 	bl	10c94 <err_sys>
   10e2a:	0003      	movs	r3, r0
   10e2c:	e0db      	b.n	10fe6 <wolfcrypt_test+0x32a>
        else
            printf( "HMAC-SHA256 test passed!\n");
   10e2e:	4b83      	ldr	r3, [pc, #524]	; (1103c <wolfcrypt_test+0x380>)
   10e30:	0018      	movs	r0, r3
   10e32:	f015 f9a5 	bl	26180 <iprintf>
        printf( "X963-KDF    test passed!\n");
#endif

#if defined(HAVE_AESGCM) && defined(WOLFSSL_AES_128) && \
   !defined(WOLFSSL_AFALG_XILINX_AES)
    if ( (ret = gmac_test()) != 0)
   10e36:	f004 f9c9 	bl	151cc <gmac_test>
   10e3a:	0003      	movs	r3, r0
   10e3c:	60fb      	str	r3, [r7, #12]
   10e3e:	68fb      	ldr	r3, [r7, #12]
   10e40:	2b00      	cmp	r3, #0
   10e42:	d007      	beq.n	10e54 <wolfcrypt_test+0x198>
        return err_sys("GMAC     test failed!\n", ret);
   10e44:	68fa      	ldr	r2, [r7, #12]
   10e46:	4b7e      	ldr	r3, [pc, #504]	; (11040 <wolfcrypt_test+0x384>)
   10e48:	0011      	movs	r1, r2
   10e4a:	0018      	movs	r0, r3
   10e4c:	f7ff ff22 	bl	10c94 <err_sys>
   10e50:	0003      	movs	r3, r0
   10e52:	e0c8      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "GMAC     test passed!\n");
   10e54:	4b7b      	ldr	r3, [pc, #492]	; (11044 <wolfcrypt_test+0x388>)
   10e56:	0018      	movs	r0, r3
   10e58:	f015 f992 	bl	26180 <iprintf>
    else
        printf( "DES3     test passed!\n");
#endif

#ifndef NO_AES
    if ( (ret = aes_test()) != 0)
   10e5c:	f002 fca2 	bl	137a4 <aes_test>
   10e60:	0003      	movs	r3, r0
   10e62:	60fb      	str	r3, [r7, #12]
   10e64:	68fb      	ldr	r3, [r7, #12]
   10e66:	2b00      	cmp	r3, #0
   10e68:	d007      	beq.n	10e7a <wolfcrypt_test+0x1be>
        return err_sys("AES      test failed!\n", ret);
   10e6a:	68fa      	ldr	r2, [r7, #12]
   10e6c:	4b76      	ldr	r3, [pc, #472]	; (11048 <wolfcrypt_test+0x38c>)
   10e6e:	0011      	movs	r1, r2
   10e70:	0018      	movs	r0, r3
   10e72:	f7ff ff0f 	bl	10c94 <err_sys>
   10e76:	0003      	movs	r3, r0
   10e78:	e0b5      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "AES      test passed!\n");
   10e7a:	4b74      	ldr	r3, [pc, #464]	; (1104c <wolfcrypt_test+0x390>)
   10e7c:	0018      	movs	r0, r3
   10e7e:	f015 f97f 	bl	26180 <iprintf>

#ifdef WOLFSSL_AES_192
    if ( (ret = aes192_test()) != 0)
   10e82:	f002 feef 	bl	13c64 <aes192_test>
   10e86:	0003      	movs	r3, r0
   10e88:	60fb      	str	r3, [r7, #12]
   10e8a:	68fb      	ldr	r3, [r7, #12]
   10e8c:	2b00      	cmp	r3, #0
   10e8e:	d007      	beq.n	10ea0 <wolfcrypt_test+0x1e4>
        return err_sys("AES192   test failed!\n", ret);
   10e90:	68fa      	ldr	r2, [r7, #12]
   10e92:	4b6f      	ldr	r3, [pc, #444]	; (11050 <wolfcrypt_test+0x394>)
   10e94:	0011      	movs	r1, r2
   10e96:	0018      	movs	r0, r3
   10e98:	f7ff fefc 	bl	10c94 <err_sys>
   10e9c:	0003      	movs	r3, r0
   10e9e:	e0a2      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "AES192   test passed!\n");
   10ea0:	4b6c      	ldr	r3, [pc, #432]	; (11054 <wolfcrypt_test+0x398>)
   10ea2:	0018      	movs	r0, r3
   10ea4:	f015 f96c 	bl	26180 <iprintf>
#endif

#ifdef WOLFSSL_AES_256
    if ( (ret = aes256_test()) != 0)
   10ea8:	f002 fff0 	bl	13e8c <aes256_test>
   10eac:	0003      	movs	r3, r0
   10eae:	60fb      	str	r3, [r7, #12]
   10eb0:	68fb      	ldr	r3, [r7, #12]
   10eb2:	2b00      	cmp	r3, #0
   10eb4:	d007      	beq.n	10ec6 <wolfcrypt_test+0x20a>
        return err_sys("AES256   test failed!\n", ret);
   10eb6:	68fa      	ldr	r2, [r7, #12]
   10eb8:	4b67      	ldr	r3, [pc, #412]	; (11058 <wolfcrypt_test+0x39c>)
   10eba:	0011      	movs	r1, r2
   10ebc:	0018      	movs	r0, r3
   10ebe:	f7ff fee9 	bl	10c94 <err_sys>
   10ec2:	0003      	movs	r3, r0
   10ec4:	e08f      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "AES256   test passed!\n");
   10ec6:	4b65      	ldr	r3, [pc, #404]	; (1105c <wolfcrypt_test+0x3a0>)
   10ec8:	0018      	movs	r0, r3
   10eca:	f015 f959 	bl	26180 <iprintf>
#endif
#ifdef HAVE_AESGCM
    #if !defined(WOLFSSL_AFALG) && !defined(WOLFSSL_DEVCRYPTO)
    if ( (ret = aesgcm_test()) != 0)
   10ece:	f003 fb35 	bl	1453c <aesgcm_test>
   10ed2:	0003      	movs	r3, r0
   10ed4:	60fb      	str	r3, [r7, #12]
   10ed6:	68fb      	ldr	r3, [r7, #12]
   10ed8:	2b00      	cmp	r3, #0
   10eda:	d007      	beq.n	10eec <wolfcrypt_test+0x230>
        return err_sys("AES-GCM  test failed!\n", ret);
   10edc:	68fa      	ldr	r2, [r7, #12]
   10ede:	4b60      	ldr	r3, [pc, #384]	; (11060 <wolfcrypt_test+0x3a4>)
   10ee0:	0011      	movs	r1, r2
   10ee2:	0018      	movs	r0, r3
   10ee4:	f7ff fed6 	bl	10c94 <err_sys>
   10ee8:	0003      	movs	r3, r0
   10eea:	e07c      	b.n	10fe6 <wolfcrypt_test+0x32a>
    #endif
    #ifndef WOLFSSL_AFALG_XILINX_AES
    if ((ret = aesgcm_default_test()) != 0) {
   10eec:	f003 fa0e 	bl	1430c <aesgcm_default_test>
   10ef0:	0003      	movs	r3, r0
   10ef2:	60fb      	str	r3, [r7, #12]
   10ef4:	68fb      	ldr	r3, [r7, #12]
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	d007      	beq.n	10f0a <wolfcrypt_test+0x24e>
        return err_sys("AES-GCM  test failed!\n", ret);
   10efa:	68fa      	ldr	r2, [r7, #12]
   10efc:	4b58      	ldr	r3, [pc, #352]	; (11060 <wolfcrypt_test+0x3a4>)
   10efe:	0011      	movs	r1, r2
   10f00:	0018      	movs	r0, r3
   10f02:	f7ff fec7 	bl	10c94 <err_sys>
   10f06:	0003      	movs	r3, r0
   10f08:	e06d      	b.n	10fe6 <wolfcrypt_test+0x32a>
    }
    #endif
    printf( "AES-GCM  test passed!\n");
   10f0a:	4b56      	ldr	r3, [pc, #344]	; (11064 <wolfcrypt_test+0x3a8>)
   10f0c:	0018      	movs	r0, r3
   10f0e:	f015 f937 	bl	26180 <iprintf>
    else
        printf( "IDEA     test passed!\n");
#endif

#ifndef WC_NO_RNG
    if ( (ret = random_test()) != 0)
   10f12:	f004 fb97 	bl	15644 <random_test>
   10f16:	0003      	movs	r3, r0
   10f18:	60fb      	str	r3, [r7, #12]
   10f1a:	68fb      	ldr	r3, [r7, #12]
   10f1c:	2b00      	cmp	r3, #0
   10f1e:	d007      	beq.n	10f30 <wolfcrypt_test+0x274>
        return err_sys("RANDOM   test failed!\n", ret);
   10f20:	68fa      	ldr	r2, [r7, #12]
   10f22:	4b51      	ldr	r3, [pc, #324]	; (11068 <wolfcrypt_test+0x3ac>)
   10f24:	0011      	movs	r1, r2
   10f26:	0018      	movs	r0, r3
   10f28:	f7ff feb4 	bl	10c94 <err_sys>
   10f2c:	0003      	movs	r3, r0
   10f2e:	e05a      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "RANDOM   test passed!\n");
   10f30:	4b4e      	ldr	r3, [pc, #312]	; (1106c <wolfcrypt_test+0x3b0>)
   10f32:	0018      	movs	r0, r3
   10f34:	f015 f924 	bl	26180 <iprintf>
        printf( "OPENSSL (EVP Sign/Verify) passed!\n");

#endif

#ifdef HAVE_ECC
    if ( (ret = ecc_test()) != 0)
   10f38:	f005 fe62 	bl	16c00 <ecc_test>
   10f3c:	0003      	movs	r3, r0
   10f3e:	60fb      	str	r3, [r7, #12]
   10f40:	68fb      	ldr	r3, [r7, #12]
   10f42:	2b00      	cmp	r3, #0
   10f44:	d007      	beq.n	10f56 <wolfcrypt_test+0x29a>
        return err_sys("ECC      test failed!\n", ret);
   10f46:	68fa      	ldr	r2, [r7, #12]
   10f48:	4b49      	ldr	r3, [pc, #292]	; (11070 <wolfcrypt_test+0x3b4>)
   10f4a:	0011      	movs	r1, r2
   10f4c:	0018      	movs	r0, r3
   10f4e:	f7ff fea1 	bl	10c94 <err_sys>
   10f52:	0003      	movs	r3, r0
   10f54:	e047      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "ECC      test passed!\n");
   10f56:	4b47      	ldr	r3, [pc, #284]	; (11074 <wolfcrypt_test+0x3b8>)
   10f58:	0018      	movs	r0, r3
   10f5a:	f015 f911 	bl	26180 <iprintf>
            return err_sys("ECC Enc  test failed!\n", ret);
        else
            printf( "ECC Enc  test passed!\n");
    #endif
    #ifdef USE_CERT_BUFFERS_256
        if ( (ret = ecc_test_buffers()) != 0)
   10f5e:	f005 fe95 	bl	16c8c <ecc_test_buffers>
   10f62:	0003      	movs	r3, r0
   10f64:	60fb      	str	r3, [r7, #12]
   10f66:	68fb      	ldr	r3, [r7, #12]
   10f68:	2b00      	cmp	r3, #0
   10f6a:	d007      	beq.n	10f7c <wolfcrypt_test+0x2c0>
            return err_sys("ECC buffer test failed!\n", ret);
   10f6c:	68fa      	ldr	r2, [r7, #12]
   10f6e:	4b42      	ldr	r3, [pc, #264]	; (11078 <wolfcrypt_test+0x3bc>)
   10f70:	0011      	movs	r1, r2
   10f72:	0018      	movs	r0, r3
   10f74:	f7ff fe8e 	bl	10c94 <err_sys>
   10f78:	0003      	movs	r3, r0
   10f7a:	e034      	b.n	10fe6 <wolfcrypt_test+0x32a>
        else
            printf( "ECC buffer test passed!\n");
   10f7c:	4b3f      	ldr	r3, [pc, #252]	; (1107c <wolfcrypt_test+0x3c0>)
   10f7e:	0018      	movs	r0, r3
   10f80:	f015 f8fe 	bl	26180 <iprintf>
        return err_sys("ber-der  test failed!\n", ret);
    else
        printf( "ber-der  test passed!\n");
#endif

    if ( (ret = logging_test()) != 0)
   10f84:	f005 ffbe 	bl	16f04 <logging_test>
   10f88:	0003      	movs	r3, r0
   10f8a:	60fb      	str	r3, [r7, #12]
   10f8c:	68fb      	ldr	r3, [r7, #12]
   10f8e:	2b00      	cmp	r3, #0
   10f90:	d007      	beq.n	10fa2 <wolfcrypt_test+0x2e6>
        return err_sys("logging  test failed!\n", ret);
   10f92:	68fa      	ldr	r2, [r7, #12]
   10f94:	4b3a      	ldr	r3, [pc, #232]	; (11080 <wolfcrypt_test+0x3c4>)
   10f96:	0011      	movs	r1, r2
   10f98:	0018      	movs	r0, r3
   10f9a:	f7ff fe7b 	bl	10c94 <err_sys>
   10f9e:	0003      	movs	r3, r0
   10fa0:	e021      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "logging  test passed!\n");
   10fa2:	4b38      	ldr	r3, [pc, #224]	; (11084 <wolfcrypt_test+0x3c8>)
   10fa4:	0018      	movs	r0, r3
   10fa6:	f015 f8eb 	bl	26180 <iprintf>

    if ( (ret = mutex_test()) != 0)
   10faa:	f005 ffc7 	bl	16f3c <mutex_test>
   10fae:	0003      	movs	r3, r0
   10fb0:	60fb      	str	r3, [r7, #12]
   10fb2:	68fb      	ldr	r3, [r7, #12]
   10fb4:	2b00      	cmp	r3, #0
   10fb6:	d007      	beq.n	10fc8 <wolfcrypt_test+0x30c>
        return err_sys("mutex    test failed!\n", ret);
   10fb8:	68fa      	ldr	r2, [r7, #12]
   10fba:	4b33      	ldr	r3, [pc, #204]	; (11088 <wolfcrypt_test+0x3cc>)
   10fbc:	0011      	movs	r1, r2
   10fbe:	0018      	movs	r0, r3
   10fc0:	f7ff fe68 	bl	10c94 <err_sys>
   10fc4:	0003      	movs	r3, r0
   10fc6:	e00e      	b.n	10fe6 <wolfcrypt_test+0x32a>
    else
        printf( "mutex    test passed!\n");
   10fc8:	4b30      	ldr	r3, [pc, #192]	; (1108c <wolfcrypt_test+0x3d0>)
   10fca:	0018      	movs	r0, r3
   10fcc:	f015 f8d8 	bl	26180 <iprintf>
    /* cleanup the thread if fixed point cache is enabled and have thread local */
#if defined(HAVE_THREAD_LS) && defined(HAVE_ECC) && defined(FP_ECC)
    wc_ecc_fp_free();
#endif

    if (args)
   10fd0:	687b      	ldr	r3, [r7, #4]
   10fd2:	2b00      	cmp	r3, #0
   10fd4:	d002      	beq.n	10fdc <wolfcrypt_test+0x320>
        ((func_args*)args)->return_code = ret;
   10fd6:	687b      	ldr	r3, [r7, #4]
   10fd8:	68fa      	ldr	r2, [r7, #12]
   10fda:	609a      	str	r2, [r3, #8]

    printf("Test complete\n");
   10fdc:	4b2c      	ldr	r3, [pc, #176]	; (11090 <wolfcrypt_test+0x3d4>)
   10fde:	0018      	movs	r0, r3
   10fe0:	f015 f8ce 	bl	26180 <iprintf>

    EXIT_TEST(ret);
   10fe4:	68fb      	ldr	r3, [r7, #12]
}
   10fe6:	0018      	movs	r0, r3
   10fe8:	46bd      	mov	sp, r7
   10fea:	b004      	add	sp, #16
   10fec:	bd80      	pop	{r7, pc}
   10fee:	46c0      	nop			; (mov r8, r8)
   10ff0:	fffffc18 	.word	0xfffffc18
   10ff4:	0002ca10 	.word	0x0002ca10
   10ff8:	fffffc17 	.word	0xfffffc17
   10ffc:	0002ca30 	.word	0x0002ca30
   11000:	0002ca60 	.word	0x0002ca60
   11004:	0002ca78 	.word	0x0002ca78
   11008:	0002ca90 	.word	0x0002ca90
   1100c:	0002caa8 	.word	0x0002caa8
   11010:	0002cac0 	.word	0x0002cac0
   11014:	0002cad8 	.word	0x0002cad8
   11018:	0002caf0 	.word	0x0002caf0
   1101c:	0002cb08 	.word	0x0002cb08
   11020:	0002cb20 	.word	0x0002cb20
   11024:	0002cb38 	.word	0x0002cb38
   11028:	0002cb50 	.word	0x0002cb50
   1102c:	0002cb68 	.word	0x0002cb68
   11030:	0002cb80 	.word	0x0002cb80
   11034:	0002cb98 	.word	0x0002cb98
   11038:	0002cbb0 	.word	0x0002cbb0
   1103c:	0002cbcc 	.word	0x0002cbcc
   11040:	0002cbe8 	.word	0x0002cbe8
   11044:	0002cc00 	.word	0x0002cc00
   11048:	0002cc18 	.word	0x0002cc18
   1104c:	0002cc30 	.word	0x0002cc30
   11050:	0002cc48 	.word	0x0002cc48
   11054:	0002cc60 	.word	0x0002cc60
   11058:	0002cc78 	.word	0x0002cc78
   1105c:	0002cc90 	.word	0x0002cc90
   11060:	0002cca8 	.word	0x0002cca8
   11064:	0002ccc0 	.word	0x0002ccc0
   11068:	0002ccd8 	.word	0x0002ccd8
   1106c:	0002ccf0 	.word	0x0002ccf0
   11070:	0002cd08 	.word	0x0002cd08
   11074:	0002cd20 	.word	0x0002cd20
   11078:	0002cd38 	.word	0x0002cd38
   1107c:	0002cd54 	.word	0x0002cd54
   11080:	0002cd70 	.word	0x0002cd70
   11084:	0002cd88 	.word	0x0002cd88
   11088:	0002cda0 	.word	0x0002cda0
   1108c:	0002cdb8 	.word	0x0002cdb8
   11090:	0002cdd0 	.word	0x0002cdd0

00011094 <error_test>:
    return 0;
}
#endif /* WOLFSSL_KEY_GEN || WOLFSSL_CERT_GEN */

int error_test(void)
{
   11094:	b580      	push	{r7, lr}
   11096:	b0a8      	sub	sp, #160	; 0xa0
   11098:	af00      	add	r7, sp, #0
    const char* errStr;
    char        out[WOLFSSL_MAX_ERROR_SZ];
    const char* unknownStr = wc_GetErrorString(0);
   1109a:	2000      	movs	r0, #0
   1109c:	f7f4 fb36 	bl	570c <wc_GetErrorString>
   110a0:	0003      	movs	r3, r0
   110a2:	2294      	movs	r2, #148	; 0x94
   110a4:	18ba      	adds	r2, r7, r2
   110a6:	6013      	str	r3, [r2, #0]
        return -1100;
    if (XSTRNCMP(out, unknownStr, XSTRLEN(unknownStr)) != 0)
        return -1101;
#else
    int i;
    int j = 0;
   110a8:	2300      	movs	r3, #0
   110aa:	2298      	movs	r2, #152	; 0x98
   110ac:	18ba      	adds	r2, r7, r2
   110ae:	6013      	str	r3, [r2, #0]
    /* Values that are not or no longer error codes. */
    int missing[] = { -122, -123, -124,       -127, -128, -129,
   110b0:	003a      	movs	r2, r7
   110b2:	4b70      	ldr	r3, [pc, #448]	; (11274 <error_test+0x1e0>)
   110b4:	0010      	movs	r0, r2
   110b6:	0019      	movs	r1, r3
   110b8:	2340      	movs	r3, #64	; 0x40
   110ba:	001a      	movs	r2, r3
   110bc:	f014 fb17 	bl	256ee <memcpy>

    /* Check that all errors have a string and it's the same through the two
     * APIs. Check that the values that are not errors map to the unknown
     * string.
     */
    for (i = MAX_CODE_E-1; i >= WC_LAST_E; i--) {
   110c0:	2365      	movs	r3, #101	; 0x65
   110c2:	425b      	negs	r3, r3
   110c4:	229c      	movs	r2, #156	; 0x9c
   110c6:	18ba      	adds	r2, r7, r2
   110c8:	6013      	str	r3, [r2, #0]
   110ca:	e08c      	b.n	111e6 <error_test+0x152>
        errStr = wc_GetErrorString(i);
   110cc:	239c      	movs	r3, #156	; 0x9c
   110ce:	18fb      	adds	r3, r7, r3
   110d0:	681b      	ldr	r3, [r3, #0]
   110d2:	0018      	movs	r0, r3
   110d4:	f7f4 fb1a 	bl	570c <wc_GetErrorString>
   110d8:	0003      	movs	r3, r0
   110da:	2290      	movs	r2, #144	; 0x90
   110dc:	18ba      	adds	r2, r7, r2
   110de:	6013      	str	r3, [r2, #0]
        wc_ErrorString(i, out);
   110e0:	2340      	movs	r3, #64	; 0x40
   110e2:	18fa      	adds	r2, r7, r3
   110e4:	239c      	movs	r3, #156	; 0x9c
   110e6:	18fb      	adds	r3, r7, r3
   110e8:	681b      	ldr	r3, [r3, #0]
   110ea:	0011      	movs	r1, r2
   110ec:	0018      	movs	r0, r3
   110ee:	f7f4 fd93 	bl	5c18 <wc_ErrorString>

        if (i != missing[j]) {
   110f2:	003b      	movs	r3, r7
   110f4:	2298      	movs	r2, #152	; 0x98
   110f6:	18ba      	adds	r2, r7, r2
   110f8:	6812      	ldr	r2, [r2, #0]
   110fa:	0092      	lsls	r2, r2, #2
   110fc:	58d2      	ldr	r2, [r2, r3]
   110fe:	239c      	movs	r3, #156	; 0x9c
   11100:	18fb      	adds	r3, r7, r3
   11102:	681b      	ldr	r3, [r3, #0]
   11104:	429a      	cmp	r2, r3
   11106:	d039      	beq.n	1117c <error_test+0xe8>
            if (XSTRNCMP(errStr, unknownStr, XSTRLEN(unknownStr)) == 0)
   11108:	2394      	movs	r3, #148	; 0x94
   1110a:	18fb      	adds	r3, r7, r3
   1110c:	681b      	ldr	r3, [r3, #0]
   1110e:	0018      	movs	r0, r3
   11110:	f015 f94e 	bl	263b0 <strlen>
   11114:	0002      	movs	r2, r0
   11116:	2394      	movs	r3, #148	; 0x94
   11118:	18fb      	adds	r3, r7, r3
   1111a:	6819      	ldr	r1, [r3, #0]
   1111c:	2390      	movs	r3, #144	; 0x90
   1111e:	18fb      	adds	r3, r7, r3
   11120:	681b      	ldr	r3, [r3, #0]
   11122:	0018      	movs	r0, r3
   11124:	f015 f94b 	bl	263be <strncmp>
   11128:	1e03      	subs	r3, r0, #0
   1112a:	d101      	bne.n	11130 <error_test+0x9c>
                return -1102;
   1112c:	4b52      	ldr	r3, [pc, #328]	; (11278 <error_test+0x1e4>)
   1112e:	e09c      	b.n	1126a <error_test+0x1d6>
            if (XSTRNCMP(out, unknownStr, XSTRLEN(unknownStr)) == 0)
   11130:	2394      	movs	r3, #148	; 0x94
   11132:	18fb      	adds	r3, r7, r3
   11134:	681b      	ldr	r3, [r3, #0]
   11136:	0018      	movs	r0, r3
   11138:	f015 f93a 	bl	263b0 <strlen>
   1113c:	0002      	movs	r2, r0
   1113e:	2394      	movs	r3, #148	; 0x94
   11140:	18fb      	adds	r3, r7, r3
   11142:	6819      	ldr	r1, [r3, #0]
   11144:	2340      	movs	r3, #64	; 0x40
   11146:	18fb      	adds	r3, r7, r3
   11148:	0018      	movs	r0, r3
   1114a:	f015 f938 	bl	263be <strncmp>
   1114e:	1e03      	subs	r3, r0, #0
   11150:	d101      	bne.n	11156 <error_test+0xc2>
                return -1103;
   11152:	4b4a      	ldr	r3, [pc, #296]	; (1127c <error_test+0x1e8>)
   11154:	e089      	b.n	1126a <error_test+0x1d6>
            if (XSTRNCMP(errStr, out, XSTRLEN(errStr)) != 0)
   11156:	2390      	movs	r3, #144	; 0x90
   11158:	18fb      	adds	r3, r7, r3
   1115a:	681b      	ldr	r3, [r3, #0]
   1115c:	0018      	movs	r0, r3
   1115e:	f015 f927 	bl	263b0 <strlen>
   11162:	0002      	movs	r2, r0
   11164:	2340      	movs	r3, #64	; 0x40
   11166:	18f9      	adds	r1, r7, r3
   11168:	2390      	movs	r3, #144	; 0x90
   1116a:	18fb      	adds	r3, r7, r3
   1116c:	681b      	ldr	r3, [r3, #0]
   1116e:	0018      	movs	r0, r3
   11170:	f015 f925 	bl	263be <strncmp>
   11174:	1e03      	subs	r3, r0, #0
   11176:	d02f      	beq.n	111d8 <error_test+0x144>
                return -1104;
   11178:	4b41      	ldr	r3, [pc, #260]	; (11280 <error_test+0x1ec>)
   1117a:	e076      	b.n	1126a <error_test+0x1d6>
        }
        else {
            j++;
   1117c:	2398      	movs	r3, #152	; 0x98
   1117e:	18fb      	adds	r3, r7, r3
   11180:	681b      	ldr	r3, [r3, #0]
   11182:	3301      	adds	r3, #1
   11184:	2298      	movs	r2, #152	; 0x98
   11186:	18ba      	adds	r2, r7, r2
   11188:	6013      	str	r3, [r2, #0]
            if (XSTRNCMP(errStr, unknownStr, XSTRLEN(unknownStr)) != 0)
   1118a:	2394      	movs	r3, #148	; 0x94
   1118c:	18fb      	adds	r3, r7, r3
   1118e:	681b      	ldr	r3, [r3, #0]
   11190:	0018      	movs	r0, r3
   11192:	f015 f90d 	bl	263b0 <strlen>
   11196:	0002      	movs	r2, r0
   11198:	2394      	movs	r3, #148	; 0x94
   1119a:	18fb      	adds	r3, r7, r3
   1119c:	6819      	ldr	r1, [r3, #0]
   1119e:	2390      	movs	r3, #144	; 0x90
   111a0:	18fb      	adds	r3, r7, r3
   111a2:	681b      	ldr	r3, [r3, #0]
   111a4:	0018      	movs	r0, r3
   111a6:	f015 f90a 	bl	263be <strncmp>
   111aa:	1e03      	subs	r3, r0, #0
   111ac:	d001      	beq.n	111b2 <error_test+0x11e>
                return -1105;
   111ae:	4b35      	ldr	r3, [pc, #212]	; (11284 <error_test+0x1f0>)
   111b0:	e05b      	b.n	1126a <error_test+0x1d6>
            if (XSTRNCMP(out, unknownStr, XSTRLEN(unknownStr)) != 0)
   111b2:	2394      	movs	r3, #148	; 0x94
   111b4:	18fb      	adds	r3, r7, r3
   111b6:	681b      	ldr	r3, [r3, #0]
   111b8:	0018      	movs	r0, r3
   111ba:	f015 f8f9 	bl	263b0 <strlen>
   111be:	0002      	movs	r2, r0
   111c0:	2394      	movs	r3, #148	; 0x94
   111c2:	18fb      	adds	r3, r7, r3
   111c4:	6819      	ldr	r1, [r3, #0]
   111c6:	2340      	movs	r3, #64	; 0x40
   111c8:	18fb      	adds	r3, r7, r3
   111ca:	0018      	movs	r0, r3
   111cc:	f015 f8f7 	bl	263be <strncmp>
   111d0:	1e03      	subs	r3, r0, #0
   111d2:	d001      	beq.n	111d8 <error_test+0x144>
                return -1106;
   111d4:	4b2c      	ldr	r3, [pc, #176]	; (11288 <error_test+0x1f4>)
   111d6:	e048      	b.n	1126a <error_test+0x1d6>

    /* Check that all errors have a string and it's the same through the two
     * APIs. Check that the values that are not errors map to the unknown
     * string.
     */
    for (i = MAX_CODE_E-1; i >= WC_LAST_E; i--) {
   111d8:	239c      	movs	r3, #156	; 0x9c
   111da:	18fb      	adds	r3, r7, r3
   111dc:	681b      	ldr	r3, [r3, #0]
   111de:	3b01      	subs	r3, #1
   111e0:	229c      	movs	r2, #156	; 0x9c
   111e2:	18ba      	adds	r2, r7, r2
   111e4:	6013      	str	r3, [r2, #0]
   111e6:	239c      	movs	r3, #156	; 0x9c
   111e8:	18fb      	adds	r3, r7, r3
   111ea:	681b      	ldr	r3, [r3, #0]
   111ec:	4a27      	ldr	r2, [pc, #156]	; (1128c <error_test+0x1f8>)
   111ee:	4293      	cmp	r3, r2
   111f0:	db00      	blt.n	111f4 <error_test+0x160>
   111f2:	e76b      	b.n	110cc <error_test+0x38>
                return -1106;
        }
    }

    /* Check if the next possible value has been given a string. */
    errStr = wc_GetErrorString(i);
   111f4:	239c      	movs	r3, #156	; 0x9c
   111f6:	18fb      	adds	r3, r7, r3
   111f8:	681b      	ldr	r3, [r3, #0]
   111fa:	0018      	movs	r0, r3
   111fc:	f7f4 fa86 	bl	570c <wc_GetErrorString>
   11200:	0003      	movs	r3, r0
   11202:	2290      	movs	r2, #144	; 0x90
   11204:	18ba      	adds	r2, r7, r2
   11206:	6013      	str	r3, [r2, #0]
    wc_ErrorString(i, out);
   11208:	2340      	movs	r3, #64	; 0x40
   1120a:	18fa      	adds	r2, r7, r3
   1120c:	239c      	movs	r3, #156	; 0x9c
   1120e:	18fb      	adds	r3, r7, r3
   11210:	681b      	ldr	r3, [r3, #0]
   11212:	0011      	movs	r1, r2
   11214:	0018      	movs	r0, r3
   11216:	f7f4 fcff 	bl	5c18 <wc_ErrorString>
    if (XSTRNCMP(errStr, unknownStr, XSTRLEN(unknownStr)) != 0)
   1121a:	2394      	movs	r3, #148	; 0x94
   1121c:	18fb      	adds	r3, r7, r3
   1121e:	681b      	ldr	r3, [r3, #0]
   11220:	0018      	movs	r0, r3
   11222:	f015 f8c5 	bl	263b0 <strlen>
   11226:	0002      	movs	r2, r0
   11228:	2394      	movs	r3, #148	; 0x94
   1122a:	18fb      	adds	r3, r7, r3
   1122c:	6819      	ldr	r1, [r3, #0]
   1122e:	2390      	movs	r3, #144	; 0x90
   11230:	18fb      	adds	r3, r7, r3
   11232:	681b      	ldr	r3, [r3, #0]
   11234:	0018      	movs	r0, r3
   11236:	f015 f8c2 	bl	263be <strncmp>
   1123a:	1e03      	subs	r3, r0, #0
   1123c:	d001      	beq.n	11242 <error_test+0x1ae>
        return -1107;
   1123e:	4b14      	ldr	r3, [pc, #80]	; (11290 <error_test+0x1fc>)
   11240:	e013      	b.n	1126a <error_test+0x1d6>
    if (XSTRNCMP(out, unknownStr, XSTRLEN(unknownStr)) != 0)
   11242:	2394      	movs	r3, #148	; 0x94
   11244:	18fb      	adds	r3, r7, r3
   11246:	681b      	ldr	r3, [r3, #0]
   11248:	0018      	movs	r0, r3
   1124a:	f015 f8b1 	bl	263b0 <strlen>
   1124e:	0002      	movs	r2, r0
   11250:	2394      	movs	r3, #148	; 0x94
   11252:	18fb      	adds	r3, r7, r3
   11254:	6819      	ldr	r1, [r3, #0]
   11256:	2340      	movs	r3, #64	; 0x40
   11258:	18fb      	adds	r3, r7, r3
   1125a:	0018      	movs	r0, r3
   1125c:	f015 f8af 	bl	263be <strncmp>
   11260:	1e03      	subs	r3, r0, #0
   11262:	d001      	beq.n	11268 <error_test+0x1d4>
        return -1108;
   11264:	4b0b      	ldr	r3, [pc, #44]	; (11294 <error_test+0x200>)
   11266:	e000      	b.n	1126a <error_test+0x1d6>
#endif

    return 0;
   11268:	2300      	movs	r3, #0
}
   1126a:	0018      	movs	r0, r3
   1126c:	46bd      	mov	sp, r7
   1126e:	b028      	add	sp, #160	; 0xa0
   11270:	bd80      	pop	{r7, pc}
   11272:	46c0      	nop			; (mov r8, r8)
   11274:	0002cde0 	.word	0x0002cde0
   11278:	fffffbb2 	.word	0xfffffbb2
   1127c:	fffffbb1 	.word	0xfffffbb1
   11280:	fffffbb0 	.word	0xfffffbb0
   11284:	fffffbaf 	.word	0xfffffbaf
   11288:	fffffbae 	.word	0xfffffbae
   1128c:	fffffef1 	.word	0xfffffef1
   11290:	fffffbad 	.word	0xfffffbad
   11294:	fffffbac 	.word	0xfffffbac

00011298 <base64_test>:

#ifndef NO_CODING

int base64_test(void)
{
   11298:	b580      	push	{r7, lr}
   1129a:	b0b0      	sub	sp, #192	; 0xc0
   1129c:	af00      	add	r7, sp, #0
    int        ret;
    const byte good[] = "A+Gd\0\0\0";
   1129e:	23b0      	movs	r3, #176	; 0xb0
   112a0:	18fb      	adds	r3, r7, r3
   112a2:	4a61      	ldr	r2, [pc, #388]	; (11428 <base64_test+0x190>)
   112a4:	ca03      	ldmia	r2!, {r0, r1}
   112a6:	c303      	stmia	r3!, {r0, r1}
    const byte goodEnd[] = "A+Gd \r\n";
   112a8:	23a8      	movs	r3, #168	; 0xa8
   112aa:	18fb      	adds	r3, r7, r3
   112ac:	4a5f      	ldr	r2, [pc, #380]	; (1142c <base64_test+0x194>)
   112ae:	ca03      	ldmia	r2!, {r0, r1}
   112b0:	c303      	stmia	r3!, {r0, r1}
    byte       data[3];
    word32     dataLen;
    byte       longData[79] = { 0 };
    const byte symbols[] = "+/A=";
#endif
    const byte badSmall[] = "AAA Gdj=";
   112b2:	2318      	movs	r3, #24
   112b4:	18fb      	adds	r3, r7, r3
   112b6:	4a5e      	ldr	r2, [pc, #376]	; (11430 <base64_test+0x198>)
   112b8:	ca03      	ldmia	r2!, {r0, r1}
   112ba:	c303      	stmia	r3!, {r0, r1}
   112bc:	7812      	ldrb	r2, [r2, #0]
   112be:	701a      	strb	r2, [r3, #0]
    const byte badLarge[] = "AAA~Gdj=";
   112c0:	230c      	movs	r3, #12
   112c2:	18fb      	adds	r3, r7, r3
   112c4:	4a5b      	ldr	r2, [pc, #364]	; (11434 <base64_test+0x19c>)
   112c6:	ca03      	ldmia	r2!, {r0, r1}
   112c8:	c303      	stmia	r3!, {r0, r1}
   112ca:	7812      	ldrb	r2, [r2, #0]
   112cc:	701a      	strb	r2, [r3, #0]
    const byte badEOL[] = "A+Gd ";
   112ce:	1d3b      	adds	r3, r7, #4
   112d0:	4a59      	ldr	r2, [pc, #356]	; (11438 <base64_test+0x1a0>)
   112d2:	6811      	ldr	r1, [r2, #0]
   112d4:	6019      	str	r1, [r3, #0]
   112d6:	8892      	ldrh	r2, [r2, #4]
   112d8:	809a      	strh	r2, [r3, #4]
    int        i;

    /* Good Base64 encodings. */
    outLen = sizeof(out);
   112da:	2380      	movs	r3, #128	; 0x80
   112dc:	627b      	str	r3, [r7, #36]	; 0x24
    ret = Base64_Decode(good, sizeof(good), out, &outLen);
   112de:	2324      	movs	r3, #36	; 0x24
   112e0:	18fb      	adds	r3, r7, r3
   112e2:	2228      	movs	r2, #40	; 0x28
   112e4:	18ba      	adds	r2, r7, r2
   112e6:	21b0      	movs	r1, #176	; 0xb0
   112e8:	1878      	adds	r0, r7, r1
   112ea:	2108      	movs	r1, #8
   112ec:	f7f3 fed4 	bl	5098 <Base64_Decode>
   112f0:	0003      	movs	r3, r0
   112f2:	22b8      	movs	r2, #184	; 0xb8
   112f4:	18ba      	adds	r2, r7, r2
   112f6:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   112f8:	23b8      	movs	r3, #184	; 0xb8
   112fa:	18fb      	adds	r3, r7, r3
   112fc:	681b      	ldr	r3, [r3, #0]
   112fe:	2b00      	cmp	r3, #0
   11300:	d001      	beq.n	11306 <base64_test+0x6e>
        return -1200;
   11302:	4b4e      	ldr	r3, [pc, #312]	; (1143c <base64_test+0x1a4>)
   11304:	e08c      	b.n	11420 <base64_test+0x188>
    outLen = sizeof(out);
   11306:	2380      	movs	r3, #128	; 0x80
   11308:	627b      	str	r3, [r7, #36]	; 0x24
    ret = Base64_Decode(goodEnd, sizeof(goodEnd), out, &outLen);
   1130a:	2324      	movs	r3, #36	; 0x24
   1130c:	18fb      	adds	r3, r7, r3
   1130e:	2228      	movs	r2, #40	; 0x28
   11310:	18ba      	adds	r2, r7, r2
   11312:	21a8      	movs	r1, #168	; 0xa8
   11314:	1878      	adds	r0, r7, r1
   11316:	2108      	movs	r1, #8
   11318:	f7f3 febe 	bl	5098 <Base64_Decode>
   1131c:	0003      	movs	r3, r0
   1131e:	22b8      	movs	r2, #184	; 0xb8
   11320:	18ba      	adds	r2, r7, r2
   11322:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   11324:	23b8      	movs	r3, #184	; 0xb8
   11326:	18fb      	adds	r3, r7, r3
   11328:	681b      	ldr	r3, [r3, #0]
   1132a:	2b00      	cmp	r3, #0
   1132c:	d001      	beq.n	11332 <base64_test+0x9a>
        return -1201;
   1132e:	4b44      	ldr	r3, [pc, #272]	; (11440 <base64_test+0x1a8>)
   11330:	e076      	b.n	11420 <base64_test+0x188>

    /* Bad parameters. */
    outLen = 1;
   11332:	2301      	movs	r3, #1
   11334:	627b      	str	r3, [r7, #36]	; 0x24
    ret = Base64_Decode(good, sizeof(good), out, &outLen);
   11336:	2324      	movs	r3, #36	; 0x24
   11338:	18fb      	adds	r3, r7, r3
   1133a:	2228      	movs	r2, #40	; 0x28
   1133c:	18ba      	adds	r2, r7, r2
   1133e:	21b0      	movs	r1, #176	; 0xb0
   11340:	1878      	adds	r0, r7, r1
   11342:	2108      	movs	r1, #8
   11344:	f7f3 fea8 	bl	5098 <Base64_Decode>
   11348:	0003      	movs	r3, r0
   1134a:	22b8      	movs	r2, #184	; 0xb8
   1134c:	18ba      	adds	r2, r7, r2
   1134e:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   11350:	23b8      	movs	r3, #184	; 0xb8
   11352:	18fb      	adds	r3, r7, r3
   11354:	681b      	ldr	r3, [r3, #0]
   11356:	33ad      	adds	r3, #173	; 0xad
   11358:	d001      	beq.n	1135e <base64_test+0xc6>
        return -1202;
   1135a:	4b3a      	ldr	r3, [pc, #232]	; (11444 <base64_test+0x1ac>)
   1135c:	e060      	b.n	11420 <base64_test+0x188>

    outLen = sizeof(out);
   1135e:	2380      	movs	r3, #128	; 0x80
   11360:	627b      	str	r3, [r7, #36]	; 0x24
    ret = Base64_Decode(badEOL, sizeof(badEOL), out, &outLen);
   11362:	2324      	movs	r3, #36	; 0x24
   11364:	18fb      	adds	r3, r7, r3
   11366:	2228      	movs	r2, #40	; 0x28
   11368:	18ba      	adds	r2, r7, r2
   1136a:	1d38      	adds	r0, r7, #4
   1136c:	2106      	movs	r1, #6
   1136e:	f7f3 fe93 	bl	5098 <Base64_Decode>
   11372:	0003      	movs	r3, r0
   11374:	22b8      	movs	r2, #184	; 0xb8
   11376:	18ba      	adds	r2, r7, r2
   11378:	6013      	str	r3, [r2, #0]
    if (ret != ASN_INPUT_E)
   1137a:	23b8      	movs	r3, #184	; 0xb8
   1137c:	18fb      	adds	r3, r7, r3
   1137e:	681b      	ldr	r3, [r3, #0]
   11380:	339a      	adds	r3, #154	; 0x9a
   11382:	d001      	beq.n	11388 <base64_test+0xf0>
        return -1203;
   11384:	4b30      	ldr	r3, [pc, #192]	; (11448 <base64_test+0x1b0>)
   11386:	e04b      	b.n	11420 <base64_test+0x188>
    /* Bad character at each offset 0-3. */
    for (i = 0; i < 4; i++) {
   11388:	2300      	movs	r3, #0
   1138a:	22bc      	movs	r2, #188	; 0xbc
   1138c:	18ba      	adds	r2, r7, r2
   1138e:	6013      	str	r3, [r2, #0]
   11390:	e040      	b.n	11414 <base64_test+0x17c>
        outLen = sizeof(out);
   11392:	2380      	movs	r3, #128	; 0x80
   11394:	627b      	str	r3, [r7, #36]	; 0x24
        ret = Base64_Decode(badSmall + i, 4, out, &outLen);
   11396:	23bc      	movs	r3, #188	; 0xbc
   11398:	18fb      	adds	r3, r7, r3
   1139a:	681b      	ldr	r3, [r3, #0]
   1139c:	2218      	movs	r2, #24
   1139e:	18ba      	adds	r2, r7, r2
   113a0:	18d0      	adds	r0, r2, r3
   113a2:	2324      	movs	r3, #36	; 0x24
   113a4:	18fb      	adds	r3, r7, r3
   113a6:	2228      	movs	r2, #40	; 0x28
   113a8:	18ba      	adds	r2, r7, r2
   113aa:	2104      	movs	r1, #4
   113ac:	f7f3 fe74 	bl	5098 <Base64_Decode>
   113b0:	0003      	movs	r3, r0
   113b2:	22b8      	movs	r2, #184	; 0xb8
   113b4:	18ba      	adds	r2, r7, r2
   113b6:	6013      	str	r3, [r2, #0]
        if (ret != ASN_INPUT_E)
   113b8:	23b8      	movs	r3, #184	; 0xb8
   113ba:	18fb      	adds	r3, r7, r3
   113bc:	681b      	ldr	r3, [r3, #0]
   113be:	339a      	adds	r3, #154	; 0x9a
   113c0:	d005      	beq.n	113ce <base64_test+0x136>
            return -1204 - i;
   113c2:	23bc      	movs	r3, #188	; 0xbc
   113c4:	18fb      	adds	r3, r7, r3
   113c6:	681b      	ldr	r3, [r3, #0]
   113c8:	4a20      	ldr	r2, [pc, #128]	; (1144c <base64_test+0x1b4>)
   113ca:	1ad3      	subs	r3, r2, r3
   113cc:	e028      	b.n	11420 <base64_test+0x188>
        ret = Base64_Decode(badLarge + i, 4, out, &outLen);
   113ce:	23bc      	movs	r3, #188	; 0xbc
   113d0:	18fb      	adds	r3, r7, r3
   113d2:	681b      	ldr	r3, [r3, #0]
   113d4:	220c      	movs	r2, #12
   113d6:	18ba      	adds	r2, r7, r2
   113d8:	18d0      	adds	r0, r2, r3
   113da:	2324      	movs	r3, #36	; 0x24
   113dc:	18fb      	adds	r3, r7, r3
   113de:	2228      	movs	r2, #40	; 0x28
   113e0:	18ba      	adds	r2, r7, r2
   113e2:	2104      	movs	r1, #4
   113e4:	f7f3 fe58 	bl	5098 <Base64_Decode>
   113e8:	0003      	movs	r3, r0
   113ea:	22b8      	movs	r2, #184	; 0xb8
   113ec:	18ba      	adds	r2, r7, r2
   113ee:	6013      	str	r3, [r2, #0]
        if (ret != ASN_INPUT_E)
   113f0:	23b8      	movs	r3, #184	; 0xb8
   113f2:	18fb      	adds	r3, r7, r3
   113f4:	681b      	ldr	r3, [r3, #0]
   113f6:	339a      	adds	r3, #154	; 0x9a
   113f8:	d005      	beq.n	11406 <base64_test+0x16e>
            return -1214 - i;
   113fa:	23bc      	movs	r3, #188	; 0xbc
   113fc:	18fb      	adds	r3, r7, r3
   113fe:	681b      	ldr	r3, [r3, #0]
   11400:	4a13      	ldr	r2, [pc, #76]	; (11450 <base64_test+0x1b8>)
   11402:	1ad3      	subs	r3, r2, r3
   11404:	e00c      	b.n	11420 <base64_test+0x188>
    outLen = sizeof(out);
    ret = Base64_Decode(badEOL, sizeof(badEOL), out, &outLen);
    if (ret != ASN_INPUT_E)
        return -1203;
    /* Bad character at each offset 0-3. */
    for (i = 0; i < 4; i++) {
   11406:	23bc      	movs	r3, #188	; 0xbc
   11408:	18fb      	adds	r3, r7, r3
   1140a:	681b      	ldr	r3, [r3, #0]
   1140c:	3301      	adds	r3, #1
   1140e:	22bc      	movs	r2, #188	; 0xbc
   11410:	18ba      	adds	r2, r7, r2
   11412:	6013      	str	r3, [r2, #0]
   11414:	23bc      	movs	r3, #188	; 0xbc
   11416:	18fb      	adds	r3, r7, r3
   11418:	681b      	ldr	r3, [r3, #0]
   1141a:	2b03      	cmp	r3, #3
   1141c:	ddb9      	ble.n	11392 <base64_test+0xfa>
    ret = Base64_Encode_NoNl(longData, dataLen, out, &outLen);
    if (ret != 0)
        return -1233;
#endif

    return 0;
   1141e:	2300      	movs	r3, #0
}
   11420:	0018      	movs	r0, r3
   11422:	46bd      	mov	sp, r7
   11424:	b030      	add	sp, #192	; 0xc0
   11426:	bd80      	pop	{r7, pc}
   11428:	0002ce20 	.word	0x0002ce20
   1142c:	0002ce28 	.word	0x0002ce28
   11430:	0002ce30 	.word	0x0002ce30
   11434:	0002ce3c 	.word	0x0002ce3c
   11438:	0002ce48 	.word	0x0002ce48
   1143c:	fffffb50 	.word	0xfffffb50
   11440:	fffffb4f 	.word	0xfffffb4f
   11444:	fffffb4e 	.word	0xfffffb4e
   11448:	fffffb4d 	.word	0xfffffb4d
   1144c:	fffffb4c 	.word	0xfffffb4c
   11450:	fffffb42 	.word	0xfffffb42

00011454 <asn_test>:
#endif /* WOLFSSL_BASE16 */
#endif /* !NO_CODING */

#ifndef NO_ASN
int asn_test(void)
{
   11454:	b590      	push	{r4, r7, lr}
   11456:	b099      	sub	sp, #100	; 0x64
   11458:	af02      	add	r7, sp, #8
    int ret;
    /* ASN1 encoded date buffer */
    const byte dateBuf[] = {0x17, 0x0d, 0x31, 0x36, 0x30, 0x38, 0x31, 0x31,
   1145a:	2344      	movs	r3, #68	; 0x44
   1145c:	18fa      	adds	r2, r7, r3
   1145e:	4b2d      	ldr	r3, [pc, #180]	; (11514 <asn_test+0xc0>)
   11460:	0010      	movs	r0, r2
   11462:	0019      	movs	r1, r3
   11464:	230f      	movs	r3, #15
   11466:	001a      	movs	r2, r3
   11468:	f014 f941 	bl	256ee <memcpy>
    #else
        word32 now;
    #endif
#endif

    ret = wc_GetDateInfo(dateBuf, (int)sizeof(dateBuf), &datePart, &format,
   1146c:	2343      	movs	r3, #67	; 0x43
   1146e:	18f9      	adds	r1, r7, r3
   11470:	2338      	movs	r3, #56	; 0x38
   11472:	18fa      	adds	r2, r7, r3
   11474:	2344      	movs	r3, #68	; 0x44
   11476:	18f8      	adds	r0, r7, r3
   11478:	233c      	movs	r3, #60	; 0x3c
   1147a:	18fb      	adds	r3, r7, r3
   1147c:	9300      	str	r3, [sp, #0]
   1147e:	000b      	movs	r3, r1
   11480:	210f      	movs	r1, #15
   11482:	f7f5 ff75 	bl	7370 <wc_GetDateInfo>
   11486:	0003      	movs	r3, r0
   11488:	657b      	str	r3, [r7, #84]	; 0x54
                         &length);
    if (ret != 0)
   1148a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1148c:	2b00      	cmp	r3, #0
   1148e:	d001      	beq.n	11494 <asn_test+0x40>
        return -1400;
   11490:	4b21      	ldr	r3, [pc, #132]	; (11518 <asn_test+0xc4>)
   11492:	e03b      	b.n	1150c <asn_test+0xb8>

#ifndef NO_ASN_TIME
    /* Parameter Validation tests. */
    if (wc_GetTime(NULL, sizeof(now)) != BAD_FUNC_ARG)
   11494:	2108      	movs	r1, #8
   11496:	2000      	movs	r0, #0
   11498:	f7f5 fee2 	bl	7260 <wc_GetTime>
   1149c:	0003      	movs	r3, r0
   1149e:	33ad      	adds	r3, #173	; 0xad
   114a0:	d001      	beq.n	114a6 <asn_test+0x52>
        return -1401;
   114a2:	4b1e      	ldr	r3, [pc, #120]	; (1151c <asn_test+0xc8>)
   114a4:	e032      	b.n	1150c <asn_test+0xb8>
    if (wc_GetTime(&now, 0) != BUFFER_E)
   114a6:	003b      	movs	r3, r7
   114a8:	2100      	movs	r1, #0
   114aa:	0018      	movs	r0, r3
   114ac:	f7f5 fed8 	bl	7260 <wc_GetTime>
   114b0:	0003      	movs	r3, r0
   114b2:	3384      	adds	r3, #132	; 0x84
   114b4:	d001      	beq.n	114ba <asn_test+0x66>
        return -1402;
   114b6:	4b1a      	ldr	r3, [pc, #104]	; (11520 <asn_test+0xcc>)
   114b8:	e028      	b.n	1150c <asn_test+0xb8>

    now = 0;
   114ba:	2300      	movs	r3, #0
   114bc:	2400      	movs	r4, #0
   114be:	603b      	str	r3, [r7, #0]
   114c0:	607c      	str	r4, [r7, #4]
    if (wc_GetTime(&now, sizeof(now)) != 0) {
   114c2:	003b      	movs	r3, r7
   114c4:	2108      	movs	r1, #8
   114c6:	0018      	movs	r0, r3
   114c8:	f7f5 feca 	bl	7260 <wc_GetTime>
   114cc:	1e03      	subs	r3, r0, #0
   114ce:	d001      	beq.n	114d4 <asn_test+0x80>
        return -1403;
   114d0:	4b14      	ldr	r3, [pc, #80]	; (11524 <asn_test+0xd0>)
   114d2:	e01b      	b.n	1150c <asn_test+0xb8>
    }
    if (now == 0) {
   114d4:	683b      	ldr	r3, [r7, #0]
   114d6:	687c      	ldr	r4, [r7, #4]
   114d8:	001a      	movs	r2, r3
   114da:	4322      	orrs	r2, r4
   114dc:	d105      	bne.n	114ea <asn_test+0x96>
        printf("RTC/Time not set!\n");
   114de:	4b12      	ldr	r3, [pc, #72]	; (11528 <asn_test+0xd4>)
   114e0:	0018      	movs	r0, r3
   114e2:	f014 fe4d 	bl	26180 <iprintf>
        return -1404;
   114e6:	4b11      	ldr	r3, [pc, #68]	; (1152c <asn_test+0xd8>)
   114e8:	e010      	b.n	1150c <asn_test+0xb8>
    }

    ret = wc_GetDateAsCalendarTime(datePart, length, format, &timearg);
   114ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   114ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   114ee:	2343      	movs	r3, #67	; 0x43
   114f0:	18fb      	adds	r3, r7, r3
   114f2:	781a      	ldrb	r2, [r3, #0]
   114f4:	230c      	movs	r3, #12
   114f6:	18fb      	adds	r3, r7, r3
   114f8:	f7f5 ff5c 	bl	73b4 <wc_GetDateAsCalendarTime>
   114fc:	0003      	movs	r3, r0
   114fe:	657b      	str	r3, [r7, #84]	; 0x54
    if (ret != 0)
   11500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   11502:	2b00      	cmp	r3, #0
   11504:	d001      	beq.n	1150a <asn_test+0xb6>
        return -1405;
   11506:	4b0a      	ldr	r3, [pc, #40]	; (11530 <asn_test+0xdc>)
   11508:	e000      	b.n	1150c <asn_test+0xb8>
#endif /* !NO_ASN_TIME */

    return 0;
   1150a:	2300      	movs	r3, #0
}
   1150c:	0018      	movs	r0, r3
   1150e:	46bd      	mov	sp, r7
   11510:	b017      	add	sp, #92	; 0x5c
   11512:	bd90      	pop	{r4, r7, pc}
   11514:	0002ce64 	.word	0x0002ce64
   11518:	fffffa88 	.word	0xfffffa88
   1151c:	fffffa87 	.word	0xfffffa87
   11520:	fffffa86 	.word	0xfffffa86
   11524:	fffffa85 	.word	0xfffffa85
   11528:	0002ce50 	.word	0x0002ce50
   1152c:	fffffa84 	.word	0xfffffa84
   11530:	fffffa83 	.word	0xfffffa83

00011534 <sha_test>:
#endif /* NO_MD4 */

#ifndef NO_SHA

int sha_test(void)
{
   11534:	b580      	push	{r7, lr}
   11536:	4fe8      	ldr	r7, [pc, #928]	; (118d8 <sha_test+0x3a4>)
   11538:	44bd      	add	sp, r7
   1153a:	af00      	add	r7, sp, #0
    int ret = 0;
   1153c:	2300      	movs	r3, #0
   1153e:	4ae7      	ldr	r2, [pc, #924]	; (118dc <sha_test+0x3a8>)
   11540:	18ba      	adds	r2, r7, r2
   11542:	6013      	str	r3, [r2, #0]
    wc_Sha sha, shaCopy;
    byte hash[WC_SHA_DIGEST_SIZE];
    byte hashcopy[WC_SHA_DIGEST_SIZE];
    testVector a, b, c, d, e;
    testVector test_sha[5];
    int times = sizeof(test_sha) / sizeof(struct testVector), i;
   11544:	2305      	movs	r3, #5
   11546:	4ae6      	ldr	r2, [pc, #920]	; (118e0 <sha_test+0x3ac>)
   11548:	18ba      	adds	r2, r7, r2
   1154a:	6013      	str	r3, [r2, #0]

    a.input  = "";
   1154c:	4be5      	ldr	r3, [pc, #916]	; (118e4 <sha_test+0x3b0>)
   1154e:	22b4      	movs	r2, #180	; 0xb4
   11550:	00d2      	lsls	r2, r2, #3
   11552:	4694      	mov	ip, r2
   11554:	44bc      	add	ip, r7
   11556:	4463      	add	r3, ip
   11558:	4ae3      	ldr	r2, [pc, #908]	; (118e8 <sha_test+0x3b4>)
   1155a:	601a      	str	r2, [r3, #0]
    a.output = "\xda\x39\xa3\xee\x5e\x6b\x4b\x0d\x32\x55\xbf\xef\x95\x60\x18"
   1155c:	4be1      	ldr	r3, [pc, #900]	; (118e4 <sha_test+0x3b0>)
   1155e:	22b4      	movs	r2, #180	; 0xb4
   11560:	00d2      	lsls	r2, r2, #3
   11562:	4694      	mov	ip, r2
   11564:	44bc      	add	ip, r7
   11566:	4463      	add	r3, ip
   11568:	4ae0      	ldr	r2, [pc, #896]	; (118ec <sha_test+0x3b8>)
   1156a:	605a      	str	r2, [r3, #4]
               "\x90\xaf\xd8\x07\x09";
    a.inLen  = XSTRLEN(a.input);
   1156c:	4bdd      	ldr	r3, [pc, #884]	; (118e4 <sha_test+0x3b0>)
   1156e:	22b4      	movs	r2, #180	; 0xb4
   11570:	00d2      	lsls	r2, r2, #3
   11572:	4694      	mov	ip, r2
   11574:	44bc      	add	ip, r7
   11576:	4463      	add	r3, ip
   11578:	681b      	ldr	r3, [r3, #0]
   1157a:	0018      	movs	r0, r3
   1157c:	f014 ff18 	bl	263b0 <strlen>
   11580:	0002      	movs	r2, r0
   11582:	4bd8      	ldr	r3, [pc, #864]	; (118e4 <sha_test+0x3b0>)
   11584:	21b4      	movs	r1, #180	; 0xb4
   11586:	00c9      	lsls	r1, r1, #3
   11588:	468c      	mov	ip, r1
   1158a:	44bc      	add	ip, r7
   1158c:	4463      	add	r3, ip
   1158e:	609a      	str	r2, [r3, #8]
    a.outLen = WC_SHA_DIGEST_SIZE;
   11590:	4bd4      	ldr	r3, [pc, #848]	; (118e4 <sha_test+0x3b0>)
   11592:	22b4      	movs	r2, #180	; 0xb4
   11594:	00d2      	lsls	r2, r2, #3
   11596:	4694      	mov	ip, r2
   11598:	44bc      	add	ip, r7
   1159a:	4463      	add	r3, ip
   1159c:	2214      	movs	r2, #20
   1159e:	60da      	str	r2, [r3, #12]

    b.input  = "abc";
   115a0:	4bd3      	ldr	r3, [pc, #844]	; (118f0 <sha_test+0x3bc>)
   115a2:	22b4      	movs	r2, #180	; 0xb4
   115a4:	00d2      	lsls	r2, r2, #3
   115a6:	4694      	mov	ip, r2
   115a8:	44bc      	add	ip, r7
   115aa:	4463      	add	r3, ip
   115ac:	4ad1      	ldr	r2, [pc, #836]	; (118f4 <sha_test+0x3c0>)
   115ae:	601a      	str	r2, [r3, #0]
    b.output = "\xA9\x99\x3E\x36\x47\x06\x81\x6A\xBA\x3E\x25\x71\x78\x50\xC2"
   115b0:	4bcf      	ldr	r3, [pc, #828]	; (118f0 <sha_test+0x3bc>)
   115b2:	22b4      	movs	r2, #180	; 0xb4
   115b4:	00d2      	lsls	r2, r2, #3
   115b6:	4694      	mov	ip, r2
   115b8:	44bc      	add	ip, r7
   115ba:	4463      	add	r3, ip
   115bc:	4ace      	ldr	r2, [pc, #824]	; (118f8 <sha_test+0x3c4>)
   115be:	605a      	str	r2, [r3, #4]
               "\x6C\x9C\xD0\xD8\x9D";
    b.inLen  = XSTRLEN(b.input);
   115c0:	4bcb      	ldr	r3, [pc, #812]	; (118f0 <sha_test+0x3bc>)
   115c2:	22b4      	movs	r2, #180	; 0xb4
   115c4:	00d2      	lsls	r2, r2, #3
   115c6:	4694      	mov	ip, r2
   115c8:	44bc      	add	ip, r7
   115ca:	4463      	add	r3, ip
   115cc:	681b      	ldr	r3, [r3, #0]
   115ce:	0018      	movs	r0, r3
   115d0:	f014 feee 	bl	263b0 <strlen>
   115d4:	0002      	movs	r2, r0
   115d6:	4bc6      	ldr	r3, [pc, #792]	; (118f0 <sha_test+0x3bc>)
   115d8:	21b4      	movs	r1, #180	; 0xb4
   115da:	00c9      	lsls	r1, r1, #3
   115dc:	468c      	mov	ip, r1
   115de:	44bc      	add	ip, r7
   115e0:	4463      	add	r3, ip
   115e2:	609a      	str	r2, [r3, #8]
    b.outLen = WC_SHA_DIGEST_SIZE;
   115e4:	4bc2      	ldr	r3, [pc, #776]	; (118f0 <sha_test+0x3bc>)
   115e6:	22b4      	movs	r2, #180	; 0xb4
   115e8:	00d2      	lsls	r2, r2, #3
   115ea:	4694      	mov	ip, r2
   115ec:	44bc      	add	ip, r7
   115ee:	4463      	add	r3, ip
   115f0:	2214      	movs	r2, #20
   115f2:	60da      	str	r2, [r3, #12]

    c.input  = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
   115f4:	4bc1      	ldr	r3, [pc, #772]	; (118fc <sha_test+0x3c8>)
   115f6:	22b4      	movs	r2, #180	; 0xb4
   115f8:	00d2      	lsls	r2, r2, #3
   115fa:	4694      	mov	ip, r2
   115fc:	44bc      	add	ip, r7
   115fe:	4463      	add	r3, ip
   11600:	4abf      	ldr	r2, [pc, #764]	; (11900 <sha_test+0x3cc>)
   11602:	601a      	str	r2, [r3, #0]
    c.output = "\x84\x98\x3E\x44\x1C\x3B\xD2\x6E\xBA\xAE\x4A\xA1\xF9\x51\x29"
   11604:	4bbd      	ldr	r3, [pc, #756]	; (118fc <sha_test+0x3c8>)
   11606:	22b4      	movs	r2, #180	; 0xb4
   11608:	00d2      	lsls	r2, r2, #3
   1160a:	4694      	mov	ip, r2
   1160c:	44bc      	add	ip, r7
   1160e:	4463      	add	r3, ip
   11610:	4abc      	ldr	r2, [pc, #752]	; (11904 <sha_test+0x3d0>)
   11612:	605a      	str	r2, [r3, #4]
               "\xE5\xE5\x46\x70\xF1";
    c.inLen  = XSTRLEN(c.input);
   11614:	4bb9      	ldr	r3, [pc, #740]	; (118fc <sha_test+0x3c8>)
   11616:	22b4      	movs	r2, #180	; 0xb4
   11618:	00d2      	lsls	r2, r2, #3
   1161a:	4694      	mov	ip, r2
   1161c:	44bc      	add	ip, r7
   1161e:	4463      	add	r3, ip
   11620:	681b      	ldr	r3, [r3, #0]
   11622:	0018      	movs	r0, r3
   11624:	f014 fec4 	bl	263b0 <strlen>
   11628:	0002      	movs	r2, r0
   1162a:	4bb4      	ldr	r3, [pc, #720]	; (118fc <sha_test+0x3c8>)
   1162c:	21b4      	movs	r1, #180	; 0xb4
   1162e:	00c9      	lsls	r1, r1, #3
   11630:	468c      	mov	ip, r1
   11632:	44bc      	add	ip, r7
   11634:	4463      	add	r3, ip
   11636:	609a      	str	r2, [r3, #8]
    c.outLen = WC_SHA_DIGEST_SIZE;
   11638:	4bb0      	ldr	r3, [pc, #704]	; (118fc <sha_test+0x3c8>)
   1163a:	22b4      	movs	r2, #180	; 0xb4
   1163c:	00d2      	lsls	r2, r2, #3
   1163e:	4694      	mov	ip, r2
   11640:	44bc      	add	ip, r7
   11642:	4463      	add	r3, ip
   11644:	2214      	movs	r2, #20
   11646:	60da      	str	r2, [r3, #12]

    d.input  = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
   11648:	4baf      	ldr	r3, [pc, #700]	; (11908 <sha_test+0x3d4>)
   1164a:	22b4      	movs	r2, #180	; 0xb4
   1164c:	00d2      	lsls	r2, r2, #3
   1164e:	4694      	mov	ip, r2
   11650:	44bc      	add	ip, r7
   11652:	4463      	add	r3, ip
   11654:	4aad      	ldr	r2, [pc, #692]	; (1190c <sha_test+0x3d8>)
   11656:	601a      	str	r2, [r3, #0]
               "aaaaaa";
    d.output = "\x00\x98\xBA\x82\x4B\x5C\x16\x42\x7B\xD7\xA1\x12\x2A\x5A\x44"
   11658:	4bab      	ldr	r3, [pc, #684]	; (11908 <sha_test+0x3d4>)
   1165a:	22b4      	movs	r2, #180	; 0xb4
   1165c:	00d2      	lsls	r2, r2, #3
   1165e:	4694      	mov	ip, r2
   11660:	44bc      	add	ip, r7
   11662:	4463      	add	r3, ip
   11664:	4aaa      	ldr	r2, [pc, #680]	; (11910 <sha_test+0x3dc>)
   11666:	605a      	str	r2, [r3, #4]
               "\x2A\x25\xEC\x64\x4D";
    d.inLen  = XSTRLEN(d.input);
   11668:	4ba7      	ldr	r3, [pc, #668]	; (11908 <sha_test+0x3d4>)
   1166a:	22b4      	movs	r2, #180	; 0xb4
   1166c:	00d2      	lsls	r2, r2, #3
   1166e:	4694      	mov	ip, r2
   11670:	44bc      	add	ip, r7
   11672:	4463      	add	r3, ip
   11674:	681b      	ldr	r3, [r3, #0]
   11676:	0018      	movs	r0, r3
   11678:	f014 fe9a 	bl	263b0 <strlen>
   1167c:	0002      	movs	r2, r0
   1167e:	4ba2      	ldr	r3, [pc, #648]	; (11908 <sha_test+0x3d4>)
   11680:	21b4      	movs	r1, #180	; 0xb4
   11682:	00c9      	lsls	r1, r1, #3
   11684:	468c      	mov	ip, r1
   11686:	44bc      	add	ip, r7
   11688:	4463      	add	r3, ip
   1168a:	609a      	str	r2, [r3, #8]
    d.outLen = WC_SHA_DIGEST_SIZE;
   1168c:	4b9e      	ldr	r3, [pc, #632]	; (11908 <sha_test+0x3d4>)
   1168e:	22b4      	movs	r2, #180	; 0xb4
   11690:	00d2      	lsls	r2, r2, #3
   11692:	4694      	mov	ip, r2
   11694:	44bc      	add	ip, r7
   11696:	4463      	add	r3, ip
   11698:	2214      	movs	r2, #20
   1169a:	60da      	str	r2, [r3, #12]

    e.input  = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
   1169c:	4b9d      	ldr	r3, [pc, #628]	; (11914 <sha_test+0x3e0>)
   1169e:	22b4      	movs	r2, #180	; 0xb4
   116a0:	00d2      	lsls	r2, r2, #3
   116a2:	4694      	mov	ip, r2
   116a4:	44bc      	add	ip, r7
   116a6:	4463      	add	r3, ip
   116a8:	4a9b      	ldr	r2, [pc, #620]	; (11918 <sha_test+0x3e4>)
   116aa:	601a      	str	r2, [r3, #0]
               "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
               "aaaaaaaaaa";
    e.output = "\xAD\x5B\x3F\xDB\xCB\x52\x67\x78\xC2\x83\x9D\x2F\x15\x1E\xA7"
   116ac:	4b99      	ldr	r3, [pc, #612]	; (11914 <sha_test+0x3e0>)
   116ae:	22b4      	movs	r2, #180	; 0xb4
   116b0:	00d2      	lsls	r2, r2, #3
   116b2:	4694      	mov	ip, r2
   116b4:	44bc      	add	ip, r7
   116b6:	4463      	add	r3, ip
   116b8:	4a98      	ldr	r2, [pc, #608]	; (1191c <sha_test+0x3e8>)
   116ba:	605a      	str	r2, [r3, #4]
               "\x53\x99\x5E\x26\xA0";
    e.inLen  = XSTRLEN(e.input);
   116bc:	4b95      	ldr	r3, [pc, #596]	; (11914 <sha_test+0x3e0>)
   116be:	22b4      	movs	r2, #180	; 0xb4
   116c0:	00d2      	lsls	r2, r2, #3
   116c2:	4694      	mov	ip, r2
   116c4:	44bc      	add	ip, r7
   116c6:	4463      	add	r3, ip
   116c8:	681b      	ldr	r3, [r3, #0]
   116ca:	0018      	movs	r0, r3
   116cc:	f014 fe70 	bl	263b0 <strlen>
   116d0:	0002      	movs	r2, r0
   116d2:	4b90      	ldr	r3, [pc, #576]	; (11914 <sha_test+0x3e0>)
   116d4:	21b4      	movs	r1, #180	; 0xb4
   116d6:	00c9      	lsls	r1, r1, #3
   116d8:	468c      	mov	ip, r1
   116da:	44bc      	add	ip, r7
   116dc:	4463      	add	r3, ip
   116de:	609a      	str	r2, [r3, #8]
    e.outLen = WC_SHA_DIGEST_SIZE;
   116e0:	4b8c      	ldr	r3, [pc, #560]	; (11914 <sha_test+0x3e0>)
   116e2:	22b4      	movs	r2, #180	; 0xb4
   116e4:	00d2      	lsls	r2, r2, #3
   116e6:	4694      	mov	ip, r2
   116e8:	44bc      	add	ip, r7
   116ea:	4463      	add	r3, ip
   116ec:	2214      	movs	r2, #20
   116ee:	60da      	str	r2, [r3, #12]

    test_sha[0] = a;
   116f0:	4b8b      	ldr	r3, [pc, #556]	; (11920 <sha_test+0x3ec>)
   116f2:	22b4      	movs	r2, #180	; 0xb4
   116f4:	00d2      	lsls	r2, r2, #3
   116f6:	18ba      	adds	r2, r7, r2
   116f8:	18d2      	adds	r2, r2, r3
   116fa:	4b7a      	ldr	r3, [pc, #488]	; (118e4 <sha_test+0x3b0>)
   116fc:	21b4      	movs	r1, #180	; 0xb4
   116fe:	00c9      	lsls	r1, r1, #3
   11700:	468c      	mov	ip, r1
   11702:	44bc      	add	ip, r7
   11704:	4463      	add	r3, ip
   11706:	0010      	movs	r0, r2
   11708:	0019      	movs	r1, r3
   1170a:	2310      	movs	r3, #16
   1170c:	001a      	movs	r2, r3
   1170e:	f013 ffee 	bl	256ee <memcpy>
    test_sha[1] = b;
   11712:	4b83      	ldr	r3, [pc, #524]	; (11920 <sha_test+0x3ec>)
   11714:	22b4      	movs	r2, #180	; 0xb4
   11716:	00d2      	lsls	r2, r2, #3
   11718:	4694      	mov	ip, r2
   1171a:	44bc      	add	ip, r7
   1171c:	4463      	add	r3, ip
   1171e:	4a74      	ldr	r2, [pc, #464]	; (118f0 <sha_test+0x3bc>)
   11720:	21b4      	movs	r1, #180	; 0xb4
   11722:	00c9      	lsls	r1, r1, #3
   11724:	468c      	mov	ip, r1
   11726:	44bc      	add	ip, r7
   11728:	4462      	add	r2, ip
   1172a:	3310      	adds	r3, #16
   1172c:	0011      	movs	r1, r2
   1172e:	2210      	movs	r2, #16
   11730:	0018      	movs	r0, r3
   11732:	f013 ffdc 	bl	256ee <memcpy>
    test_sha[2] = c;
   11736:	4b7a      	ldr	r3, [pc, #488]	; (11920 <sha_test+0x3ec>)
   11738:	22b4      	movs	r2, #180	; 0xb4
   1173a:	00d2      	lsls	r2, r2, #3
   1173c:	4694      	mov	ip, r2
   1173e:	44bc      	add	ip, r7
   11740:	4463      	add	r3, ip
   11742:	4a6e      	ldr	r2, [pc, #440]	; (118fc <sha_test+0x3c8>)
   11744:	21b4      	movs	r1, #180	; 0xb4
   11746:	00c9      	lsls	r1, r1, #3
   11748:	468c      	mov	ip, r1
   1174a:	44bc      	add	ip, r7
   1174c:	4462      	add	r2, ip
   1174e:	3320      	adds	r3, #32
   11750:	0011      	movs	r1, r2
   11752:	2210      	movs	r2, #16
   11754:	0018      	movs	r0, r3
   11756:	f013 ffca 	bl	256ee <memcpy>
    test_sha[3] = d;
   1175a:	4b71      	ldr	r3, [pc, #452]	; (11920 <sha_test+0x3ec>)
   1175c:	22b4      	movs	r2, #180	; 0xb4
   1175e:	00d2      	lsls	r2, r2, #3
   11760:	4694      	mov	ip, r2
   11762:	44bc      	add	ip, r7
   11764:	4463      	add	r3, ip
   11766:	4a68      	ldr	r2, [pc, #416]	; (11908 <sha_test+0x3d4>)
   11768:	21b4      	movs	r1, #180	; 0xb4
   1176a:	00c9      	lsls	r1, r1, #3
   1176c:	468c      	mov	ip, r1
   1176e:	44bc      	add	ip, r7
   11770:	4462      	add	r2, ip
   11772:	3330      	adds	r3, #48	; 0x30
   11774:	0011      	movs	r1, r2
   11776:	2210      	movs	r2, #16
   11778:	0018      	movs	r0, r3
   1177a:	f013 ffb8 	bl	256ee <memcpy>
    test_sha[4] = e;
   1177e:	4b68      	ldr	r3, [pc, #416]	; (11920 <sha_test+0x3ec>)
   11780:	22b4      	movs	r2, #180	; 0xb4
   11782:	00d2      	lsls	r2, r2, #3
   11784:	4694      	mov	ip, r2
   11786:	44bc      	add	ip, r7
   11788:	4463      	add	r3, ip
   1178a:	4a62      	ldr	r2, [pc, #392]	; (11914 <sha_test+0x3e0>)
   1178c:	21b4      	movs	r1, #180	; 0xb4
   1178e:	00c9      	lsls	r1, r1, #3
   11790:	468c      	mov	ip, r1
   11792:	44bc      	add	ip, r7
   11794:	4462      	add	r2, ip
   11796:	3340      	adds	r3, #64	; 0x40
   11798:	0011      	movs	r1, r2
   1179a:	2210      	movs	r2, #16
   1179c:	0018      	movs	r0, r3
   1179e:	f013 ffa6 	bl	256ee <memcpy>

    ret = wc_InitSha_ex(&sha, HEAP_HINT, devId);
   117a2:	4b60      	ldr	r3, [pc, #384]	; (11924 <sha_test+0x3f0>)
   117a4:	681a      	ldr	r2, [r3, #0]
   117a6:	4b60      	ldr	r3, [pc, #384]	; (11928 <sha_test+0x3f4>)
   117a8:	18fb      	adds	r3, r7, r3
   117aa:	2100      	movs	r1, #0
   117ac:	0018      	movs	r0, r3
   117ae:	f7fa ff33 	bl	c618 <wc_InitSha_ex>
   117b2:	0003      	movs	r3, r0
   117b4:	4a49      	ldr	r2, [pc, #292]	; (118dc <sha_test+0x3a8>)
   117b6:	18ba      	adds	r2, r7, r2
   117b8:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   117ba:	4b48      	ldr	r3, [pc, #288]	; (118dc <sha_test+0x3a8>)
   117bc:	18fb      	adds	r3, r7, r3
   117be:	681b      	ldr	r3, [r3, #0]
   117c0:	2b00      	cmp	r3, #0
   117c2:	d001      	beq.n	117c8 <sha_test+0x294>
        return -1800;
   117c4:	4b59      	ldr	r3, [pc, #356]	; (1192c <sha_test+0x3f8>)
   117c6:	e1b6      	b.n	11b36 <sha_test+0x602>
    ret = wc_InitSha_ex(&shaCopy, HEAP_HINT, devId);
   117c8:	4b56      	ldr	r3, [pc, #344]	; (11924 <sha_test+0x3f0>)
   117ca:	681a      	ldr	r2, [r3, #0]
   117cc:	2399      	movs	r3, #153	; 0x99
   117ce:	00db      	lsls	r3, r3, #3
   117d0:	18fb      	adds	r3, r7, r3
   117d2:	2100      	movs	r1, #0
   117d4:	0018      	movs	r0, r3
   117d6:	f7fa ff1f 	bl	c618 <wc_InitSha_ex>
   117da:	0003      	movs	r3, r0
   117dc:	4a3f      	ldr	r2, [pc, #252]	; (118dc <sha_test+0x3a8>)
   117de:	18ba      	adds	r2, r7, r2
   117e0:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   117e2:	4b3e      	ldr	r3, [pc, #248]	; (118dc <sha_test+0x3a8>)
   117e4:	18fb      	adds	r3, r7, r3
   117e6:	681b      	ldr	r3, [r3, #0]
   117e8:	2b00      	cmp	r3, #0
   117ea:	d006      	beq.n	117fa <sha_test+0x2c6>
        wc_ShaFree(&sha);
   117ec:	4b4e      	ldr	r3, [pc, #312]	; (11928 <sha_test+0x3f4>)
   117ee:	18fb      	adds	r3, r7, r3
   117f0:	0018      	movs	r0, r3
   117f2:	f7fb f841 	bl	c878 <wc_ShaFree>
        return -1801;
   117f6:	4b4e      	ldr	r3, [pc, #312]	; (11930 <sha_test+0x3fc>)
   117f8:	e19d      	b.n	11b36 <sha_test+0x602>
    }

    for (i = 0; i < times; ++i) {
   117fa:	2300      	movs	r3, #0
   117fc:	22b3      	movs	r2, #179	; 0xb3
   117fe:	00d2      	lsls	r2, r2, #3
   11800:	18ba      	adds	r2, r7, r2
   11802:	6013      	str	r3, [r2, #0]
   11804:	e0fa      	b.n	119fc <sha_test+0x4c8>
        ret = wc_ShaUpdate(&sha, (byte*)test_sha[i].input,
   11806:	4b46      	ldr	r3, [pc, #280]	; (11920 <sha_test+0x3ec>)
   11808:	22b4      	movs	r2, #180	; 0xb4
   1180a:	00d2      	lsls	r2, r2, #3
   1180c:	4694      	mov	ip, r2
   1180e:	44bc      	add	ip, r7
   11810:	4463      	add	r3, ip
   11812:	22b3      	movs	r2, #179	; 0xb3
   11814:	00d2      	lsls	r2, r2, #3
   11816:	18ba      	adds	r2, r7, r2
   11818:	6812      	ldr	r2, [r2, #0]
   1181a:	0112      	lsls	r2, r2, #4
   1181c:	58d1      	ldr	r1, [r2, r3]
            (word32)test_sha[i].inLen);
   1181e:	4b40      	ldr	r3, [pc, #256]	; (11920 <sha_test+0x3ec>)
   11820:	22b4      	movs	r2, #180	; 0xb4
   11822:	00d2      	lsls	r2, r2, #3
   11824:	18ba      	adds	r2, r7, r2
   11826:	18d2      	adds	r2, r2, r3
   11828:	23b3      	movs	r3, #179	; 0xb3
   1182a:	00db      	lsls	r3, r3, #3
   1182c:	18fb      	adds	r3, r7, r3
   1182e:	681b      	ldr	r3, [r3, #0]
   11830:	011b      	lsls	r3, r3, #4
   11832:	18d3      	adds	r3, r2, r3
   11834:	3308      	adds	r3, #8
   11836:	681a      	ldr	r2, [r3, #0]
        wc_ShaFree(&sha);
        return -1801;
    }

    for (i = 0; i < times; ++i) {
        ret = wc_ShaUpdate(&sha, (byte*)test_sha[i].input,
   11838:	4b3b      	ldr	r3, [pc, #236]	; (11928 <sha_test+0x3f4>)
   1183a:	18fb      	adds	r3, r7, r3
   1183c:	0018      	movs	r0, r3
   1183e:	f7fa ff0d 	bl	c65c <wc_ShaUpdate>
   11842:	0003      	movs	r3, r0
   11844:	4a25      	ldr	r2, [pc, #148]	; (118dc <sha_test+0x3a8>)
   11846:	18ba      	adds	r2, r7, r2
   11848:	6013      	str	r3, [r2, #0]
            (word32)test_sha[i].inLen);
        if (ret != 0)
   1184a:	4b24      	ldr	r3, [pc, #144]	; (118dc <sha_test+0x3a8>)
   1184c:	18fb      	adds	r3, r7, r3
   1184e:	681b      	ldr	r3, [r3, #0]
   11850:	2b00      	cmp	r3, #0
   11852:	d009      	beq.n	11868 <sha_test+0x334>
            ERROR_OUT(-1802 - i, exit);
   11854:	23b3      	movs	r3, #179	; 0xb3
   11856:	00db      	lsls	r3, r3, #3
   11858:	18fb      	adds	r3, r7, r3
   1185a:	681b      	ldr	r3, [r3, #0]
   1185c:	4a35      	ldr	r2, [pc, #212]	; (11934 <sha_test+0x400>)
   1185e:	1ad3      	subs	r3, r2, r3
   11860:	4a1e      	ldr	r2, [pc, #120]	; (118dc <sha_test+0x3a8>)
   11862:	18ba      	adds	r2, r7, r2
   11864:	6013      	str	r3, [r2, #0]
   11866:	e158      	b.n	11b1a <sha_test+0x5e6>
        ret = wc_ShaGetHash(&sha, hashcopy);
   11868:	2394      	movs	r3, #148	; 0x94
   1186a:	00db      	lsls	r3, r3, #3
   1186c:	18fa      	adds	r2, r7, r3
   1186e:	4b2e      	ldr	r3, [pc, #184]	; (11928 <sha_test+0x3f4>)
   11870:	18fb      	adds	r3, r7, r3
   11872:	0011      	movs	r1, r2
   11874:	0018      	movs	r0, r3
   11876:	f7fb f807 	bl	c888 <wc_ShaGetHash>
   1187a:	0003      	movs	r3, r0
   1187c:	4a17      	ldr	r2, [pc, #92]	; (118dc <sha_test+0x3a8>)
   1187e:	18ba      	adds	r2, r7, r2
   11880:	6013      	str	r3, [r2, #0]
        if (ret != 0)
   11882:	4b16      	ldr	r3, [pc, #88]	; (118dc <sha_test+0x3a8>)
   11884:	18fb      	adds	r3, r7, r3
   11886:	681b      	ldr	r3, [r3, #0]
   11888:	2b00      	cmp	r3, #0
   1188a:	d009      	beq.n	118a0 <sha_test+0x36c>
            ERROR_OUT(-1803 - i, exit);
   1188c:	23b3      	movs	r3, #179	; 0xb3
   1188e:	00db      	lsls	r3, r3, #3
   11890:	18fb      	adds	r3, r7, r3
   11892:	681b      	ldr	r3, [r3, #0]
   11894:	4a28      	ldr	r2, [pc, #160]	; (11938 <sha_test+0x404>)
   11896:	1ad3      	subs	r3, r2, r3
   11898:	4a10      	ldr	r2, [pc, #64]	; (118dc <sha_test+0x3a8>)
   1189a:	18ba      	adds	r2, r7, r2
   1189c:	6013      	str	r3, [r2, #0]
   1189e:	e13c      	b.n	11b1a <sha_test+0x5e6>
        ret = wc_ShaCopy(&sha, &shaCopy);
   118a0:	2399      	movs	r3, #153	; 0x99
   118a2:	00db      	lsls	r3, r3, #3
   118a4:	18fa      	adds	r2, r7, r3
   118a6:	4b20      	ldr	r3, [pc, #128]	; (11928 <sha_test+0x3f4>)
   118a8:	18fb      	adds	r3, r7, r3
   118aa:	0011      	movs	r1, r2
   118ac:	0018      	movs	r0, r3
   118ae:	f7fb f813 	bl	c8d8 <wc_ShaCopy>
   118b2:	0003      	movs	r3, r0
   118b4:	4a09      	ldr	r2, [pc, #36]	; (118dc <sha_test+0x3a8>)
   118b6:	18ba      	adds	r2, r7, r2
   118b8:	6013      	str	r3, [r2, #0]
        if (ret != 0)
   118ba:	4b08      	ldr	r3, [pc, #32]	; (118dc <sha_test+0x3a8>)
   118bc:	18fb      	adds	r3, r7, r3
   118be:	681b      	ldr	r3, [r3, #0]
   118c0:	2b00      	cmp	r3, #0
   118c2:	d03d      	beq.n	11940 <sha_test+0x40c>
            ERROR_OUT(-1804 - i, exit);
   118c4:	23b3      	movs	r3, #179	; 0xb3
   118c6:	00db      	lsls	r3, r3, #3
   118c8:	18fb      	adds	r3, r7, r3
   118ca:	681b      	ldr	r3, [r3, #0]
   118cc:	4a1b      	ldr	r2, [pc, #108]	; (1193c <sha_test+0x408>)
   118ce:	1ad3      	subs	r3, r2, r3
   118d0:	4a02      	ldr	r2, [pc, #8]	; (118dc <sha_test+0x3a8>)
   118d2:	18ba      	adds	r2, r7, r2
   118d4:	6013      	str	r3, [r2, #0]
   118d6:	e120      	b.n	11b1a <sha_test+0x5e6>
   118d8:	fffffa60 	.word	0xfffffa60
   118dc:	0000059c 	.word	0x0000059c
   118e0:	00000594 	.word	0x00000594
   118e4:	fffffef0 	.word	0xfffffef0
   118e8:	0002ce74 	.word	0x0002ce74
   118ec:	0002ce78 	.word	0x0002ce78
   118f0:	fffffee0 	.word	0xfffffee0
   118f4:	0002ce90 	.word	0x0002ce90
   118f8:	0002ce94 	.word	0x0002ce94
   118fc:	fffffed0 	.word	0xfffffed0
   11900:	0002ceac 	.word	0x0002ceac
   11904:	0002cee8 	.word	0x0002cee8
   11908:	fffffec0 	.word	0xfffffec0
   1190c:	0002cf00 	.word	0x0002cf00
   11910:	0002cf44 	.word	0x0002cf44
   11914:	fffffeb0 	.word	0xfffffeb0
   11918:	0002cf5c 	.word	0x0002cf5c
   1191c:	0002cfe0 	.word	0x0002cfe0
   11920:	fffffe60 	.word	0xfffffe60
   11924:	20000010 	.word	0x20000010
   11928:	0000052c 	.word	0x0000052c
   1192c:	fffff8f8 	.word	0xfffff8f8
   11930:	fffff8f7 	.word	0xfffff8f7
   11934:	fffff8f6 	.word	0xfffff8f6
   11938:	fffff8f5 	.word	0xfffff8f5
   1193c:	fffff8f4 	.word	0xfffff8f4
        ret = wc_ShaFinal(&sha, hash);
   11940:	4b80      	ldr	r3, [pc, #512]	; (11b44 <sha_test+0x610>)
   11942:	18fa      	adds	r2, r7, r3
   11944:	4b80      	ldr	r3, [pc, #512]	; (11b48 <sha_test+0x614>)
   11946:	18fb      	adds	r3, r7, r3
   11948:	0011      	movs	r1, r2
   1194a:	0018      	movs	r0, r3
   1194c:	f7fa fee8 	bl	c720 <wc_ShaFinal>
   11950:	0003      	movs	r3, r0
   11952:	4a7e      	ldr	r2, [pc, #504]	; (11b4c <sha_test+0x618>)
   11954:	18ba      	adds	r2, r7, r2
   11956:	6013      	str	r3, [r2, #0]
        if (ret != 0)
   11958:	4b7c      	ldr	r3, [pc, #496]	; (11b4c <sha_test+0x618>)
   1195a:	18fb      	adds	r3, r7, r3
   1195c:	681b      	ldr	r3, [r3, #0]
   1195e:	2b00      	cmp	r3, #0
   11960:	d009      	beq.n	11976 <sha_test+0x442>
            ERROR_OUT(-1805 - i, exit);
   11962:	23b3      	movs	r3, #179	; 0xb3
   11964:	00db      	lsls	r3, r3, #3
   11966:	18fb      	adds	r3, r7, r3
   11968:	681b      	ldr	r3, [r3, #0]
   1196a:	4a79      	ldr	r2, [pc, #484]	; (11b50 <sha_test+0x61c>)
   1196c:	1ad3      	subs	r3, r2, r3
   1196e:	4a77      	ldr	r2, [pc, #476]	; (11b4c <sha_test+0x618>)
   11970:	18ba      	adds	r2, r7, r2
   11972:	6013      	str	r3, [r2, #0]
   11974:	e0d1      	b.n	11b1a <sha_test+0x5e6>
        wc_ShaFree(&shaCopy);
   11976:	2399      	movs	r3, #153	; 0x99
   11978:	00db      	lsls	r3, r3, #3
   1197a:	18fb      	adds	r3, r7, r3
   1197c:	0018      	movs	r0, r3
   1197e:	f7fa ff7b 	bl	c878 <wc_ShaFree>

        if (XMEMCMP(hash, test_sha[i].output, WC_SHA_DIGEST_SIZE) != 0)
   11982:	4b74      	ldr	r3, [pc, #464]	; (11b54 <sha_test+0x620>)
   11984:	22b4      	movs	r2, #180	; 0xb4
   11986:	00d2      	lsls	r2, r2, #3
   11988:	18ba      	adds	r2, r7, r2
   1198a:	18d2      	adds	r2, r2, r3
   1198c:	23b3      	movs	r3, #179	; 0xb3
   1198e:	00db      	lsls	r3, r3, #3
   11990:	18fb      	adds	r3, r7, r3
   11992:	681b      	ldr	r3, [r3, #0]
   11994:	011b      	lsls	r3, r3, #4
   11996:	18d3      	adds	r3, r2, r3
   11998:	3304      	adds	r3, #4
   1199a:	6819      	ldr	r1, [r3, #0]
   1199c:	4b69      	ldr	r3, [pc, #420]	; (11b44 <sha_test+0x610>)
   1199e:	18fb      	adds	r3, r7, r3
   119a0:	2214      	movs	r2, #20
   119a2:	0018      	movs	r0, r3
   119a4:	f013 fe94 	bl	256d0 <memcmp>
   119a8:	1e03      	subs	r3, r0, #0
   119aa:	d009      	beq.n	119c0 <sha_test+0x48c>
            ERROR_OUT(-1806 - i, exit);
   119ac:	23b3      	movs	r3, #179	; 0xb3
   119ae:	00db      	lsls	r3, r3, #3
   119b0:	18fb      	adds	r3, r7, r3
   119b2:	681b      	ldr	r3, [r3, #0]
   119b4:	4a68      	ldr	r2, [pc, #416]	; (11b58 <sha_test+0x624>)
   119b6:	1ad3      	subs	r3, r2, r3
   119b8:	4a64      	ldr	r2, [pc, #400]	; (11b4c <sha_test+0x618>)
   119ba:	18ba      	adds	r2, r7, r2
   119bc:	6013      	str	r3, [r2, #0]
   119be:	e0ac      	b.n	11b1a <sha_test+0x5e6>
        if (XMEMCMP(hash, hashcopy, WC_SHA_DIGEST_SIZE) != 0)
   119c0:	2394      	movs	r3, #148	; 0x94
   119c2:	00db      	lsls	r3, r3, #3
   119c4:	18f9      	adds	r1, r7, r3
   119c6:	4b5f      	ldr	r3, [pc, #380]	; (11b44 <sha_test+0x610>)
   119c8:	18fb      	adds	r3, r7, r3
   119ca:	2214      	movs	r2, #20
   119cc:	0018      	movs	r0, r3
   119ce:	f013 fe7f 	bl	256d0 <memcmp>
   119d2:	1e03      	subs	r3, r0, #0
   119d4:	d009      	beq.n	119ea <sha_test+0x4b6>
            ERROR_OUT(-1807 - i, exit);
   119d6:	23b3      	movs	r3, #179	; 0xb3
   119d8:	00db      	lsls	r3, r3, #3
   119da:	18fb      	adds	r3, r7, r3
   119dc:	681b      	ldr	r3, [r3, #0]
   119de:	4a5f      	ldr	r2, [pc, #380]	; (11b5c <sha_test+0x628>)
   119e0:	1ad3      	subs	r3, r2, r3
   119e2:	4a5a      	ldr	r2, [pc, #360]	; (11b4c <sha_test+0x618>)
   119e4:	18ba      	adds	r2, r7, r2
   119e6:	6013      	str	r3, [r2, #0]
   119e8:	e097      	b.n	11b1a <sha_test+0x5e6>
    if (ret != 0) {
        wc_ShaFree(&sha);
        return -1801;
    }

    for (i = 0; i < times; ++i) {
   119ea:	23b3      	movs	r3, #179	; 0xb3
   119ec:	00db      	lsls	r3, r3, #3
   119ee:	18fb      	adds	r3, r7, r3
   119f0:	681b      	ldr	r3, [r3, #0]
   119f2:	3301      	adds	r3, #1
   119f4:	22b3      	movs	r2, #179	; 0xb3
   119f6:	00d2      	lsls	r2, r2, #3
   119f8:	18ba      	adds	r2, r7, r2
   119fa:	6013      	str	r3, [r2, #0]
   119fc:	23b3      	movs	r3, #179	; 0xb3
   119fe:	00db      	lsls	r3, r3, #3
   11a00:	18fb      	adds	r3, r7, r3
   11a02:	681a      	ldr	r2, [r3, #0]
   11a04:	4b56      	ldr	r3, [pc, #344]	; (11b60 <sha_test+0x62c>)
   11a06:	18fb      	adds	r3, r7, r3
   11a08:	681b      	ldr	r3, [r3, #0]
   11a0a:	429a      	cmp	r2, r3
   11a0c:	da00      	bge.n	11a10 <sha_test+0x4dc>
   11a0e:	e6fa      	b.n	11806 <sha_test+0x2d2>
            ERROR_OUT(-1807 - i, exit);
    }

    /* BEGIN LARGE HASH TEST */ {
    byte large_input[1024];
    const char* large_digest =
   11a10:	4b54      	ldr	r3, [pc, #336]	; (11b64 <sha_test+0x630>)
   11a12:	22b2      	movs	r2, #178	; 0xb2
   11a14:	00d2      	lsls	r2, r2, #3
   11a16:	18ba      	adds	r2, r7, r2
   11a18:	6013      	str	r3, [r2, #0]
        "\x8b\x77\x02\x48\x39\xe8\xdb\xd3\x9a\xf4\x05\x24\x66\x12\x2d\x9e"
        "\xc5\xd9\x0a\xac";

    for (i = 0; i < (int)sizeof(large_input); i++) {
   11a1a:	2300      	movs	r3, #0
   11a1c:	22b3      	movs	r2, #179	; 0xb3
   11a1e:	00d2      	lsls	r2, r2, #3
   11a20:	18ba      	adds	r2, r7, r2
   11a22:	6013      	str	r3, [r2, #0]
   11a24:	e019      	b.n	11a5a <sha_test+0x526>
        large_input[i] = (byte)(i & 0xFF);
   11a26:	23b3      	movs	r3, #179	; 0xb3
   11a28:	00db      	lsls	r3, r3, #3
   11a2a:	18fb      	adds	r3, r7, r3
   11a2c:	681b      	ldr	r3, [r3, #0]
   11a2e:	b2d9      	uxtb	r1, r3
   11a30:	4b4d      	ldr	r3, [pc, #308]	; (11b68 <sha_test+0x634>)
   11a32:	22b4      	movs	r2, #180	; 0xb4
   11a34:	00d2      	lsls	r2, r2, #3
   11a36:	18ba      	adds	r2, r7, r2
   11a38:	18d2      	adds	r2, r2, r3
   11a3a:	23b3      	movs	r3, #179	; 0xb3
   11a3c:	00db      	lsls	r3, r3, #3
   11a3e:	18fb      	adds	r3, r7, r3
   11a40:	681b      	ldr	r3, [r3, #0]
   11a42:	18d3      	adds	r3, r2, r3
   11a44:	1c0a      	adds	r2, r1, #0
   11a46:	701a      	strb	r2, [r3, #0]
    byte large_input[1024];
    const char* large_digest =
        "\x8b\x77\x02\x48\x39\xe8\xdb\xd3\x9a\xf4\x05\x24\x66\x12\x2d\x9e"
        "\xc5\xd9\x0a\xac";

    for (i = 0; i < (int)sizeof(large_input); i++) {
   11a48:	23b3      	movs	r3, #179	; 0xb3
   11a4a:	00db      	lsls	r3, r3, #3
   11a4c:	18fb      	adds	r3, r7, r3
   11a4e:	681b      	ldr	r3, [r3, #0]
   11a50:	3301      	adds	r3, #1
   11a52:	22b3      	movs	r2, #179	; 0xb3
   11a54:	00d2      	lsls	r2, r2, #3
   11a56:	18ba      	adds	r2, r7, r2
   11a58:	6013      	str	r3, [r2, #0]
   11a5a:	23b3      	movs	r3, #179	; 0xb3
   11a5c:	00db      	lsls	r3, r3, #3
   11a5e:	18fb      	adds	r3, r7, r3
   11a60:	681b      	ldr	r3, [r3, #0]
   11a62:	4a42      	ldr	r2, [pc, #264]	; (11b6c <sha_test+0x638>)
   11a64:	4293      	cmp	r3, r2
   11a66:	ddde      	ble.n	11a26 <sha_test+0x4f2>
        large_input[i] = (byte)(i & 0xFF);
    }
    times = 100;
   11a68:	2364      	movs	r3, #100	; 0x64
   11a6a:	4a3d      	ldr	r2, [pc, #244]	; (11b60 <sha_test+0x62c>)
   11a6c:	18ba      	adds	r2, r7, r2
   11a6e:	6013      	str	r3, [r2, #0]
#ifdef WOLFSSL_PIC32MZ_HASH
    wc_ShaSizeSet(&sha, times * sizeof(large_input));
#endif
    for (i = 0; i < times; ++i) {
   11a70:	2300      	movs	r3, #0
   11a72:	22b3      	movs	r2, #179	; 0xb3
   11a74:	00d2      	lsls	r2, r2, #3
   11a76:	18ba      	adds	r2, r7, r2
   11a78:	6013      	str	r3, [r2, #0]
   11a7a:	e01e      	b.n	11aba <sha_test+0x586>
        ret = wc_ShaUpdate(&sha, (byte*)large_input,
   11a7c:	2380      	movs	r3, #128	; 0x80
   11a7e:	00da      	lsls	r2, r3, #3
   11a80:	0039      	movs	r1, r7
   11a82:	4b31      	ldr	r3, [pc, #196]	; (11b48 <sha_test+0x614>)
   11a84:	18fb      	adds	r3, r7, r3
   11a86:	0018      	movs	r0, r3
   11a88:	f7fa fde8 	bl	c65c <wc_ShaUpdate>
   11a8c:	0003      	movs	r3, r0
   11a8e:	4a2f      	ldr	r2, [pc, #188]	; (11b4c <sha_test+0x618>)
   11a90:	18ba      	adds	r2, r7, r2
   11a92:	6013      	str	r3, [r2, #0]
            (word32)sizeof(large_input));
        if (ret != 0)
   11a94:	4b2d      	ldr	r3, [pc, #180]	; (11b4c <sha_test+0x618>)
   11a96:	18fb      	adds	r3, r7, r3
   11a98:	681b      	ldr	r3, [r3, #0]
   11a9a:	2b00      	cmp	r3, #0
   11a9c:	d004      	beq.n	11aa8 <sha_test+0x574>
            ERROR_OUT(-1808, exit);
   11a9e:	4b34      	ldr	r3, [pc, #208]	; (11b70 <sha_test+0x63c>)
   11aa0:	4a2a      	ldr	r2, [pc, #168]	; (11b4c <sha_test+0x618>)
   11aa2:	18ba      	adds	r2, r7, r2
   11aa4:	6013      	str	r3, [r2, #0]
   11aa6:	e038      	b.n	11b1a <sha_test+0x5e6>
    }
    times = 100;
#ifdef WOLFSSL_PIC32MZ_HASH
    wc_ShaSizeSet(&sha, times * sizeof(large_input));
#endif
    for (i = 0; i < times; ++i) {
   11aa8:	23b3      	movs	r3, #179	; 0xb3
   11aaa:	00db      	lsls	r3, r3, #3
   11aac:	18fb      	adds	r3, r7, r3
   11aae:	681b      	ldr	r3, [r3, #0]
   11ab0:	3301      	adds	r3, #1
   11ab2:	22b3      	movs	r2, #179	; 0xb3
   11ab4:	00d2      	lsls	r2, r2, #3
   11ab6:	18ba      	adds	r2, r7, r2
   11ab8:	6013      	str	r3, [r2, #0]
   11aba:	23b3      	movs	r3, #179	; 0xb3
   11abc:	00db      	lsls	r3, r3, #3
   11abe:	18fb      	adds	r3, r7, r3
   11ac0:	681a      	ldr	r2, [r3, #0]
   11ac2:	4b27      	ldr	r3, [pc, #156]	; (11b60 <sha_test+0x62c>)
   11ac4:	18fb      	adds	r3, r7, r3
   11ac6:	681b      	ldr	r3, [r3, #0]
   11ac8:	429a      	cmp	r2, r3
   11aca:	dbd7      	blt.n	11a7c <sha_test+0x548>
        ret = wc_ShaUpdate(&sha, (byte*)large_input,
            (word32)sizeof(large_input));
        if (ret != 0)
            ERROR_OUT(-1808, exit);
    }
    ret = wc_ShaFinal(&sha, hash);
   11acc:	4b1d      	ldr	r3, [pc, #116]	; (11b44 <sha_test+0x610>)
   11ace:	18fa      	adds	r2, r7, r3
   11ad0:	4b1d      	ldr	r3, [pc, #116]	; (11b48 <sha_test+0x614>)
   11ad2:	18fb      	adds	r3, r7, r3
   11ad4:	0011      	movs	r1, r2
   11ad6:	0018      	movs	r0, r3
   11ad8:	f7fa fe22 	bl	c720 <wc_ShaFinal>
   11adc:	0003      	movs	r3, r0
   11ade:	4a1b      	ldr	r2, [pc, #108]	; (11b4c <sha_test+0x618>)
   11ae0:	18ba      	adds	r2, r7, r2
   11ae2:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   11ae4:	4b19      	ldr	r3, [pc, #100]	; (11b4c <sha_test+0x618>)
   11ae6:	18fb      	adds	r3, r7, r3
   11ae8:	681b      	ldr	r3, [r3, #0]
   11aea:	2b00      	cmp	r3, #0
   11aec:	d004      	beq.n	11af8 <sha_test+0x5c4>
        ERROR_OUT(-1809, exit);
   11aee:	4b21      	ldr	r3, [pc, #132]	; (11b74 <sha_test+0x640>)
   11af0:	4a16      	ldr	r2, [pc, #88]	; (11b4c <sha_test+0x618>)
   11af2:	18ba      	adds	r2, r7, r2
   11af4:	6013      	str	r3, [r2, #0]
   11af6:	e010      	b.n	11b1a <sha_test+0x5e6>
    if (XMEMCMP(hash, large_digest, WC_SHA_DIGEST_SIZE) != 0)
   11af8:	23b2      	movs	r3, #178	; 0xb2
   11afa:	00db      	lsls	r3, r3, #3
   11afc:	18fb      	adds	r3, r7, r3
   11afe:	6819      	ldr	r1, [r3, #0]
   11b00:	4b10      	ldr	r3, [pc, #64]	; (11b44 <sha_test+0x610>)
   11b02:	18fb      	adds	r3, r7, r3
   11b04:	2214      	movs	r2, #20
   11b06:	0018      	movs	r0, r3
   11b08:	f013 fde2 	bl	256d0 <memcmp>
   11b0c:	1e03      	subs	r3, r0, #0
   11b0e:	d004      	beq.n	11b1a <sha_test+0x5e6>
        ERROR_OUT(-1810, exit);
   11b10:	4b19      	ldr	r3, [pc, #100]	; (11b78 <sha_test+0x644>)
   11b12:	4a0e      	ldr	r2, [pc, #56]	; (11b4c <sha_test+0x618>)
   11b14:	18ba      	adds	r2, r7, r2
   11b16:	6013      	str	r3, [r2, #0]
   11b18:	46c0      	nop			; (mov r8, r8)
    } /* END LARGE HASH TEST */

exit:

    wc_ShaFree(&sha);
   11b1a:	4b0b      	ldr	r3, [pc, #44]	; (11b48 <sha_test+0x614>)
   11b1c:	18fb      	adds	r3, r7, r3
   11b1e:	0018      	movs	r0, r3
   11b20:	f7fa feaa 	bl	c878 <wc_ShaFree>
    wc_ShaFree(&shaCopy);
   11b24:	2399      	movs	r3, #153	; 0x99
   11b26:	00db      	lsls	r3, r3, #3
   11b28:	18fb      	adds	r3, r7, r3
   11b2a:	0018      	movs	r0, r3
   11b2c:	f7fa fea4 	bl	c878 <wc_ShaFree>

    return ret;
   11b30:	4b06      	ldr	r3, [pc, #24]	; (11b4c <sha_test+0x618>)
   11b32:	18fb      	adds	r3, r7, r3
   11b34:	681b      	ldr	r3, [r3, #0]
}
   11b36:	0018      	movs	r0, r3
   11b38:	46bd      	mov	sp, r7
   11b3a:	23b4      	movs	r3, #180	; 0xb4
   11b3c:	00db      	lsls	r3, r3, #3
   11b3e:	449d      	add	sp, r3
   11b40:	bd80      	pop	{r7, pc}
   11b42:	46c0      	nop			; (mov r8, r8)
   11b44:	000004b4 	.word	0x000004b4
   11b48:	0000052c 	.word	0x0000052c
   11b4c:	0000059c 	.word	0x0000059c
   11b50:	fffff8f3 	.word	0xfffff8f3
   11b54:	fffffe60 	.word	0xfffffe60
   11b58:	fffff8f2 	.word	0xfffff8f2
   11b5c:	fffff8f1 	.word	0xfffff8f1
   11b60:	00000594 	.word	0x00000594
   11b64:	0002cff8 	.word	0x0002cff8
   11b68:	fffffa60 	.word	0xfffffa60
   11b6c:	000003ff 	.word	0x000003ff
   11b70:	fffff8f0 	.word	0xfffff8f0
   11b74:	fffff8ef 	.word	0xfffff8ef
   11b78:	fffff8ee 	.word	0xfffff8ee

00011b7c <sha256_test>:
#endif


#ifndef NO_SHA256
int sha256_test(void)
{
   11b7c:	b580      	push	{r7, lr}
   11b7e:	4fea      	ldr	r7, [pc, #936]	; (11f28 <sha256_test+0x3ac>)
   11b80:	44bd      	add	sp, r7
   11b82:	af00      	add	r7, sp, #0
    wc_Sha256 sha, shaCopy;
    byte      hash[WC_SHA256_DIGEST_SIZE];
    byte      hashcopy[WC_SHA256_DIGEST_SIZE];
    int       ret = 0;
   11b84:	2300      	movs	r3, #0
   11b86:	4ae9      	ldr	r2, [pc, #932]	; (11f2c <sha256_test+0x3b0>)
   11b88:	18ba      	adds	r2, r7, r2
   11b8a:	6013      	str	r3, [r2, #0]

    testVector a, b, c;
    testVector test_sha[3];
    int times = sizeof(test_sha) / sizeof(struct testVector), i;
   11b8c:	2303      	movs	r3, #3
   11b8e:	4ae8      	ldr	r2, [pc, #928]	; (11f30 <sha256_test+0x3b4>)
   11b90:	18ba      	adds	r2, r7, r2
   11b92:	6013      	str	r3, [r2, #0]

    a.input  = "";
   11b94:	4be7      	ldr	r3, [pc, #924]	; (11f34 <sha256_test+0x3b8>)
   11b96:	22b2      	movs	r2, #178	; 0xb2
   11b98:	00d2      	lsls	r2, r2, #3
   11b9a:	4694      	mov	ip, r2
   11b9c:	44bc      	add	ip, r7
   11b9e:	4463      	add	r3, ip
   11ba0:	4ae5      	ldr	r2, [pc, #916]	; (11f38 <sha256_test+0x3bc>)
   11ba2:	601a      	str	r2, [r3, #0]
    a.output = "\xe3\xb0\xc4\x42\x98\xfc\x1c\x14\x9a\xfb\xf4\xc8\x99\x6f\xb9"
   11ba4:	4be3      	ldr	r3, [pc, #908]	; (11f34 <sha256_test+0x3b8>)
   11ba6:	22b2      	movs	r2, #178	; 0xb2
   11ba8:	00d2      	lsls	r2, r2, #3
   11baa:	4694      	mov	ip, r2
   11bac:	44bc      	add	ip, r7
   11bae:	4463      	add	r3, ip
   11bb0:	4ae2      	ldr	r2, [pc, #904]	; (11f3c <sha256_test+0x3c0>)
   11bb2:	605a      	str	r2, [r3, #4]
               "\x24\x27\xae\x41\xe4\x64\x9b\x93\x4c\xa4\x95\x99\x1b\x78\x52"
               "\xb8\x55";
    a.inLen  = XSTRLEN(a.input);
   11bb4:	4bdf      	ldr	r3, [pc, #892]	; (11f34 <sha256_test+0x3b8>)
   11bb6:	22b2      	movs	r2, #178	; 0xb2
   11bb8:	00d2      	lsls	r2, r2, #3
   11bba:	4694      	mov	ip, r2
   11bbc:	44bc      	add	ip, r7
   11bbe:	4463      	add	r3, ip
   11bc0:	681b      	ldr	r3, [r3, #0]
   11bc2:	0018      	movs	r0, r3
   11bc4:	f014 fbf4 	bl	263b0 <strlen>
   11bc8:	0002      	movs	r2, r0
   11bca:	4bda      	ldr	r3, [pc, #872]	; (11f34 <sha256_test+0x3b8>)
   11bcc:	21b2      	movs	r1, #178	; 0xb2
   11bce:	00c9      	lsls	r1, r1, #3
   11bd0:	468c      	mov	ip, r1
   11bd2:	44bc      	add	ip, r7
   11bd4:	4463      	add	r3, ip
   11bd6:	609a      	str	r2, [r3, #8]
    a.outLen = WC_SHA256_DIGEST_SIZE;
   11bd8:	4bd6      	ldr	r3, [pc, #856]	; (11f34 <sha256_test+0x3b8>)
   11bda:	22b2      	movs	r2, #178	; 0xb2
   11bdc:	00d2      	lsls	r2, r2, #3
   11bde:	4694      	mov	ip, r2
   11be0:	44bc      	add	ip, r7
   11be2:	4463      	add	r3, ip
   11be4:	2220      	movs	r2, #32
   11be6:	60da      	str	r2, [r3, #12]

    b.input  = "abc";
   11be8:	4bd5      	ldr	r3, [pc, #852]	; (11f40 <sha256_test+0x3c4>)
   11bea:	22b2      	movs	r2, #178	; 0xb2
   11bec:	00d2      	lsls	r2, r2, #3
   11bee:	4694      	mov	ip, r2
   11bf0:	44bc      	add	ip, r7
   11bf2:	4463      	add	r3, ip
   11bf4:	4ad3      	ldr	r2, [pc, #844]	; (11f44 <sha256_test+0x3c8>)
   11bf6:	601a      	str	r2, [r3, #0]
    b.output = "\xBA\x78\x16\xBF\x8F\x01\xCF\xEA\x41\x41\x40\xDE\x5D\xAE\x22"
   11bf8:	4bd1      	ldr	r3, [pc, #836]	; (11f40 <sha256_test+0x3c4>)
   11bfa:	22b2      	movs	r2, #178	; 0xb2
   11bfc:	00d2      	lsls	r2, r2, #3
   11bfe:	4694      	mov	ip, r2
   11c00:	44bc      	add	ip, r7
   11c02:	4463      	add	r3, ip
   11c04:	4ad0      	ldr	r2, [pc, #832]	; (11f48 <sha256_test+0x3cc>)
   11c06:	605a      	str	r2, [r3, #4]
               "\x23\xB0\x03\x61\xA3\x96\x17\x7A\x9C\xB4\x10\xFF\x61\xF2\x00"
               "\x15\xAD";
    b.inLen  = XSTRLEN(b.input);
   11c08:	4bcd      	ldr	r3, [pc, #820]	; (11f40 <sha256_test+0x3c4>)
   11c0a:	22b2      	movs	r2, #178	; 0xb2
   11c0c:	00d2      	lsls	r2, r2, #3
   11c0e:	4694      	mov	ip, r2
   11c10:	44bc      	add	ip, r7
   11c12:	4463      	add	r3, ip
   11c14:	681b      	ldr	r3, [r3, #0]
   11c16:	0018      	movs	r0, r3
   11c18:	f014 fbca 	bl	263b0 <strlen>
   11c1c:	0002      	movs	r2, r0
   11c1e:	4bc8      	ldr	r3, [pc, #800]	; (11f40 <sha256_test+0x3c4>)
   11c20:	21b2      	movs	r1, #178	; 0xb2
   11c22:	00c9      	lsls	r1, r1, #3
   11c24:	468c      	mov	ip, r1
   11c26:	44bc      	add	ip, r7
   11c28:	4463      	add	r3, ip
   11c2a:	609a      	str	r2, [r3, #8]
    b.outLen = WC_SHA256_DIGEST_SIZE;
   11c2c:	4bc4      	ldr	r3, [pc, #784]	; (11f40 <sha256_test+0x3c4>)
   11c2e:	22b2      	movs	r2, #178	; 0xb2
   11c30:	00d2      	lsls	r2, r2, #3
   11c32:	4694      	mov	ip, r2
   11c34:	44bc      	add	ip, r7
   11c36:	4463      	add	r3, ip
   11c38:	2220      	movs	r2, #32
   11c3a:	60da      	str	r2, [r3, #12]

    c.input  = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
   11c3c:	4bc3      	ldr	r3, [pc, #780]	; (11f4c <sha256_test+0x3d0>)
   11c3e:	22b2      	movs	r2, #178	; 0xb2
   11c40:	00d2      	lsls	r2, r2, #3
   11c42:	4694      	mov	ip, r2
   11c44:	44bc      	add	ip, r7
   11c46:	4463      	add	r3, ip
   11c48:	4ac1      	ldr	r2, [pc, #772]	; (11f50 <sha256_test+0x3d4>)
   11c4a:	601a      	str	r2, [r3, #0]
    c.output = "\x24\x8D\x6A\x61\xD2\x06\x38\xB8\xE5\xC0\x26\x93\x0C\x3E\x60"
   11c4c:	4bbf      	ldr	r3, [pc, #764]	; (11f4c <sha256_test+0x3d0>)
   11c4e:	22b2      	movs	r2, #178	; 0xb2
   11c50:	00d2      	lsls	r2, r2, #3
   11c52:	4694      	mov	ip, r2
   11c54:	44bc      	add	ip, r7
   11c56:	4463      	add	r3, ip
   11c58:	4abe      	ldr	r2, [pc, #760]	; (11f54 <sha256_test+0x3d8>)
   11c5a:	605a      	str	r2, [r3, #4]
               "\x39\xA3\x3C\xE4\x59\x64\xFF\x21\x67\xF6\xEC\xED\xD4\x19\xDB"
               "\x06\xC1";
    c.inLen  = XSTRLEN(c.input);
   11c5c:	4bbb      	ldr	r3, [pc, #748]	; (11f4c <sha256_test+0x3d0>)
   11c5e:	22b2      	movs	r2, #178	; 0xb2
   11c60:	00d2      	lsls	r2, r2, #3
   11c62:	4694      	mov	ip, r2
   11c64:	44bc      	add	ip, r7
   11c66:	4463      	add	r3, ip
   11c68:	681b      	ldr	r3, [r3, #0]
   11c6a:	0018      	movs	r0, r3
   11c6c:	f014 fba0 	bl	263b0 <strlen>
   11c70:	0002      	movs	r2, r0
   11c72:	4bb6      	ldr	r3, [pc, #728]	; (11f4c <sha256_test+0x3d0>)
   11c74:	21b2      	movs	r1, #178	; 0xb2
   11c76:	00c9      	lsls	r1, r1, #3
   11c78:	468c      	mov	ip, r1
   11c7a:	44bc      	add	ip, r7
   11c7c:	4463      	add	r3, ip
   11c7e:	609a      	str	r2, [r3, #8]
    c.outLen = WC_SHA256_DIGEST_SIZE;
   11c80:	4bb2      	ldr	r3, [pc, #712]	; (11f4c <sha256_test+0x3d0>)
   11c82:	22b2      	movs	r2, #178	; 0xb2
   11c84:	00d2      	lsls	r2, r2, #3
   11c86:	4694      	mov	ip, r2
   11c88:	44bc      	add	ip, r7
   11c8a:	4463      	add	r3, ip
   11c8c:	2220      	movs	r2, #32
   11c8e:	60da      	str	r2, [r3, #12]

    test_sha[0] = a;
   11c90:	4bb1      	ldr	r3, [pc, #708]	; (11f58 <sha256_test+0x3dc>)
   11c92:	22b2      	movs	r2, #178	; 0xb2
   11c94:	00d2      	lsls	r2, r2, #3
   11c96:	18ba      	adds	r2, r7, r2
   11c98:	18d2      	adds	r2, r2, r3
   11c9a:	4ba6      	ldr	r3, [pc, #664]	; (11f34 <sha256_test+0x3b8>)
   11c9c:	21b2      	movs	r1, #178	; 0xb2
   11c9e:	00c9      	lsls	r1, r1, #3
   11ca0:	468c      	mov	ip, r1
   11ca2:	44bc      	add	ip, r7
   11ca4:	4463      	add	r3, ip
   11ca6:	0010      	movs	r0, r2
   11ca8:	0019      	movs	r1, r3
   11caa:	2310      	movs	r3, #16
   11cac:	001a      	movs	r2, r3
   11cae:	f013 fd1e 	bl	256ee <memcpy>
    test_sha[1] = b;
   11cb2:	4ba9      	ldr	r3, [pc, #676]	; (11f58 <sha256_test+0x3dc>)
   11cb4:	22b2      	movs	r2, #178	; 0xb2
   11cb6:	00d2      	lsls	r2, r2, #3
   11cb8:	4694      	mov	ip, r2
   11cba:	44bc      	add	ip, r7
   11cbc:	4463      	add	r3, ip
   11cbe:	4aa0      	ldr	r2, [pc, #640]	; (11f40 <sha256_test+0x3c4>)
   11cc0:	21b2      	movs	r1, #178	; 0xb2
   11cc2:	00c9      	lsls	r1, r1, #3
   11cc4:	468c      	mov	ip, r1
   11cc6:	44bc      	add	ip, r7
   11cc8:	4462      	add	r2, ip
   11cca:	3310      	adds	r3, #16
   11ccc:	0011      	movs	r1, r2
   11cce:	2210      	movs	r2, #16
   11cd0:	0018      	movs	r0, r3
   11cd2:	f013 fd0c 	bl	256ee <memcpy>
    test_sha[2] = c;
   11cd6:	4ba0      	ldr	r3, [pc, #640]	; (11f58 <sha256_test+0x3dc>)
   11cd8:	22b2      	movs	r2, #178	; 0xb2
   11cda:	00d2      	lsls	r2, r2, #3
   11cdc:	4694      	mov	ip, r2
   11cde:	44bc      	add	ip, r7
   11ce0:	4463      	add	r3, ip
   11ce2:	4a9a      	ldr	r2, [pc, #616]	; (11f4c <sha256_test+0x3d0>)
   11ce4:	21b2      	movs	r1, #178	; 0xb2
   11ce6:	00c9      	lsls	r1, r1, #3
   11ce8:	468c      	mov	ip, r1
   11cea:	44bc      	add	ip, r7
   11cec:	4462      	add	r2, ip
   11cee:	3320      	adds	r3, #32
   11cf0:	0011      	movs	r1, r2
   11cf2:	2210      	movs	r2, #16
   11cf4:	0018      	movs	r0, r3
   11cf6:	f013 fcfa 	bl	256ee <memcpy>

    ret = wc_InitSha256_ex(&sha, HEAP_HINT, devId);
   11cfa:	4b98      	ldr	r3, [pc, #608]	; (11f5c <sha256_test+0x3e0>)
   11cfc:	681a      	ldr	r2, [r3, #0]
   11cfe:	23a2      	movs	r3, #162	; 0xa2
   11d00:	00db      	lsls	r3, r3, #3
   11d02:	18fb      	adds	r3, r7, r3
   11d04:	2100      	movs	r1, #0
   11d06:	0018      	movs	r0, r3
   11d08:	f7fa feb8 	bl	ca7c <wc_InitSha256_ex>
   11d0c:	0003      	movs	r3, r0
   11d0e:	4a87      	ldr	r2, [pc, #540]	; (11f2c <sha256_test+0x3b0>)
   11d10:	18ba      	adds	r2, r7, r2
   11d12:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   11d14:	4b85      	ldr	r3, [pc, #532]	; (11f2c <sha256_test+0x3b0>)
   11d16:	18fb      	adds	r3, r7, r3
   11d18:	681b      	ldr	r3, [r3, #0]
   11d1a:	2b00      	cmp	r3, #0
   11d1c:	d001      	beq.n	11d22 <sha256_test+0x1a6>
        return -2200;
   11d1e:	4b90      	ldr	r3, [pc, #576]	; (11f60 <sha256_test+0x3e4>)
   11d20:	e1bd      	b.n	1209e <sha256_test+0x522>
    ret = wc_InitSha256_ex(&shaCopy, HEAP_HINT, devId);
   11d22:	4b8e      	ldr	r3, [pc, #568]	; (11f5c <sha256_test+0x3e0>)
   11d24:	681a      	ldr	r2, [r3, #0]
   11d26:	2394      	movs	r3, #148	; 0x94
   11d28:	00db      	lsls	r3, r3, #3
   11d2a:	18fb      	adds	r3, r7, r3
   11d2c:	2100      	movs	r1, #0
   11d2e:	0018      	movs	r0, r3
   11d30:	f7fa fea4 	bl	ca7c <wc_InitSha256_ex>
   11d34:	0003      	movs	r3, r0
   11d36:	4a7d      	ldr	r2, [pc, #500]	; (11f2c <sha256_test+0x3b0>)
   11d38:	18ba      	adds	r2, r7, r2
   11d3a:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   11d3c:	4b7b      	ldr	r3, [pc, #492]	; (11f2c <sha256_test+0x3b0>)
   11d3e:	18fb      	adds	r3, r7, r3
   11d40:	681b      	ldr	r3, [r3, #0]
   11d42:	2b00      	cmp	r3, #0
   11d44:	d007      	beq.n	11d56 <sha256_test+0x1da>
        wc_Sha256Free(&sha);
   11d46:	23a2      	movs	r3, #162	; 0xa2
   11d48:	00db      	lsls	r3, r3, #3
   11d4a:	18fb      	adds	r3, r7, r3
   11d4c:	0018      	movs	r0, r3
   11d4e:	f7fb fd09 	bl	d764 <wc_Sha256Free>
        return -2201;
   11d52:	4b84      	ldr	r3, [pc, #528]	; (11f64 <sha256_test+0x3e8>)
   11d54:	e1a3      	b.n	1209e <sha256_test+0x522>
    }

    for (i = 0; i < times; ++i) {
   11d56:	2300      	movs	r3, #0
   11d58:	22b1      	movs	r2, #177	; 0xb1
   11d5a:	00d2      	lsls	r2, r2, #3
   11d5c:	18ba      	adds	r2, r7, r2
   11d5e:	6013      	str	r3, [r2, #0]
   11d60:	e0cd      	b.n	11efe <sha256_test+0x382>
        ret = wc_Sha256Update(&sha, (byte*)test_sha[i].input,
   11d62:	4b7d      	ldr	r3, [pc, #500]	; (11f58 <sha256_test+0x3dc>)
   11d64:	22b2      	movs	r2, #178	; 0xb2
   11d66:	00d2      	lsls	r2, r2, #3
   11d68:	4694      	mov	ip, r2
   11d6a:	44bc      	add	ip, r7
   11d6c:	4463      	add	r3, ip
   11d6e:	22b1      	movs	r2, #177	; 0xb1
   11d70:	00d2      	lsls	r2, r2, #3
   11d72:	18ba      	adds	r2, r7, r2
   11d74:	6812      	ldr	r2, [r2, #0]
   11d76:	0112      	lsls	r2, r2, #4
   11d78:	58d1      	ldr	r1, [r2, r3]
            (word32)test_sha[i].inLen);
   11d7a:	4b77      	ldr	r3, [pc, #476]	; (11f58 <sha256_test+0x3dc>)
   11d7c:	22b2      	movs	r2, #178	; 0xb2
   11d7e:	00d2      	lsls	r2, r2, #3
   11d80:	18ba      	adds	r2, r7, r2
   11d82:	18d2      	adds	r2, r2, r3
   11d84:	23b1      	movs	r3, #177	; 0xb1
   11d86:	00db      	lsls	r3, r3, #3
   11d88:	18fb      	adds	r3, r7, r3
   11d8a:	681b      	ldr	r3, [r3, #0]
   11d8c:	011b      	lsls	r3, r3, #4
   11d8e:	18d3      	adds	r3, r2, r3
   11d90:	3308      	adds	r3, #8
   11d92:	681a      	ldr	r2, [r3, #0]
        wc_Sha256Free(&sha);
        return -2201;
    }

    for (i = 0; i < times; ++i) {
        ret = wc_Sha256Update(&sha, (byte*)test_sha[i].input,
   11d94:	23a2      	movs	r3, #162	; 0xa2
   11d96:	00db      	lsls	r3, r3, #3
   11d98:	18fb      	adds	r3, r7, r3
   11d9a:	0018      	movs	r0, r3
   11d9c:	f7fb fc00 	bl	d5a0 <wc_Sha256Update>
   11da0:	0003      	movs	r3, r0
   11da2:	4a62      	ldr	r2, [pc, #392]	; (11f2c <sha256_test+0x3b0>)
   11da4:	18ba      	adds	r2, r7, r2
   11da6:	6013      	str	r3, [r2, #0]
            (word32)test_sha[i].inLen);
        if (ret != 0) {
   11da8:	4b60      	ldr	r3, [pc, #384]	; (11f2c <sha256_test+0x3b0>)
   11daa:	18fb      	adds	r3, r7, r3
   11dac:	681b      	ldr	r3, [r3, #0]
   11dae:	2b00      	cmp	r3, #0
   11db0:	d009      	beq.n	11dc6 <sha256_test+0x24a>
            ERROR_OUT(-2202 - i, exit);
   11db2:	23b1      	movs	r3, #177	; 0xb1
   11db4:	00db      	lsls	r3, r3, #3
   11db6:	18fb      	adds	r3, r7, r3
   11db8:	681b      	ldr	r3, [r3, #0]
   11dba:	4a6b      	ldr	r2, [pc, #428]	; (11f68 <sha256_test+0x3ec>)
   11dbc:	1ad3      	subs	r3, r2, r3
   11dbe:	4a5b      	ldr	r2, [pc, #364]	; (11f2c <sha256_test+0x3b0>)
   11dc0:	18ba      	adds	r2, r7, r2
   11dc2:	6013      	str	r3, [r2, #0]
   11dc4:	e15c      	b.n	12080 <sha256_test+0x504>
	}
        ret = wc_Sha256GetHash(&sha, hashcopy);
   11dc6:	238c      	movs	r3, #140	; 0x8c
   11dc8:	00db      	lsls	r3, r3, #3
   11dca:	18fa      	adds	r2, r7, r3
   11dcc:	23a2      	movs	r3, #162	; 0xa2
   11dce:	00db      	lsls	r3, r3, #3
   11dd0:	18fb      	adds	r3, r7, r3
   11dd2:	0011      	movs	r1, r2
   11dd4:	0018      	movs	r0, r3
   11dd6:	f7fb fccd 	bl	d774 <wc_Sha256GetHash>
   11dda:	0003      	movs	r3, r0
   11ddc:	4a53      	ldr	r2, [pc, #332]	; (11f2c <sha256_test+0x3b0>)
   11dde:	18ba      	adds	r2, r7, r2
   11de0:	6013      	str	r3, [r2, #0]
        if (ret != 0)
   11de2:	4b52      	ldr	r3, [pc, #328]	; (11f2c <sha256_test+0x3b0>)
   11de4:	18fb      	adds	r3, r7, r3
   11de6:	681b      	ldr	r3, [r3, #0]
   11de8:	2b00      	cmp	r3, #0
   11dea:	d009      	beq.n	11e00 <sha256_test+0x284>
            ERROR_OUT(-2203 - i, exit);
   11dec:	23b1      	movs	r3, #177	; 0xb1
   11dee:	00db      	lsls	r3, r3, #3
   11df0:	18fb      	adds	r3, r7, r3
   11df2:	681b      	ldr	r3, [r3, #0]
   11df4:	4a5d      	ldr	r2, [pc, #372]	; (11f6c <sha256_test+0x3f0>)
   11df6:	1ad3      	subs	r3, r2, r3
   11df8:	4a4c      	ldr	r2, [pc, #304]	; (11f2c <sha256_test+0x3b0>)
   11dfa:	18ba      	adds	r2, r7, r2
   11dfc:	6013      	str	r3, [r2, #0]
   11dfe:	e13f      	b.n	12080 <sha256_test+0x504>
        ret = wc_Sha256Copy(&sha, &shaCopy);
   11e00:	2394      	movs	r3, #148	; 0x94
   11e02:	00db      	lsls	r3, r3, #3
   11e04:	18fa      	adds	r2, r7, r3
   11e06:	23a2      	movs	r3, #162	; 0xa2
   11e08:	00db      	lsls	r3, r3, #3
   11e0a:	18fb      	adds	r3, r7, r3
   11e0c:	0011      	movs	r1, r2
   11e0e:	0018      	movs	r0, r3
   11e10:	f7fb fcde 	bl	d7d0 <wc_Sha256Copy>
   11e14:	0003      	movs	r3, r0
   11e16:	4a45      	ldr	r2, [pc, #276]	; (11f2c <sha256_test+0x3b0>)
   11e18:	18ba      	adds	r2, r7, r2
   11e1a:	6013      	str	r3, [r2, #0]
        if (ret != 0)
   11e1c:	4b43      	ldr	r3, [pc, #268]	; (11f2c <sha256_test+0x3b0>)
   11e1e:	18fb      	adds	r3, r7, r3
   11e20:	681b      	ldr	r3, [r3, #0]
   11e22:	2b00      	cmp	r3, #0
   11e24:	d009      	beq.n	11e3a <sha256_test+0x2be>
            ERROR_OUT(-2204 - i, exit);
   11e26:	23b1      	movs	r3, #177	; 0xb1
   11e28:	00db      	lsls	r3, r3, #3
   11e2a:	18fb      	adds	r3, r7, r3
   11e2c:	681b      	ldr	r3, [r3, #0]
   11e2e:	4a50      	ldr	r2, [pc, #320]	; (11f70 <sha256_test+0x3f4>)
   11e30:	1ad3      	subs	r3, r2, r3
   11e32:	4a3e      	ldr	r2, [pc, #248]	; (11f2c <sha256_test+0x3b0>)
   11e34:	18ba      	adds	r2, r7, r2
   11e36:	6013      	str	r3, [r2, #0]
   11e38:	e122      	b.n	12080 <sha256_test+0x504>
        ret = wc_Sha256Final(&sha, hash);
   11e3a:	2390      	movs	r3, #144	; 0x90
   11e3c:	00db      	lsls	r3, r3, #3
   11e3e:	18fa      	adds	r2, r7, r3
   11e40:	23a2      	movs	r3, #162	; 0xa2
   11e42:	00db      	lsls	r3, r3, #3
   11e44:	18fb      	adds	r3, r7, r3
   11e46:	0011      	movs	r1, r2
   11e48:	0018      	movs	r0, r3
   11e4a:	f7fb fc4d 	bl	d6e8 <wc_Sha256Final>
   11e4e:	0003      	movs	r3, r0
   11e50:	4a36      	ldr	r2, [pc, #216]	; (11f2c <sha256_test+0x3b0>)
   11e52:	18ba      	adds	r2, r7, r2
   11e54:	6013      	str	r3, [r2, #0]
        if (ret != 0)
   11e56:	4b35      	ldr	r3, [pc, #212]	; (11f2c <sha256_test+0x3b0>)
   11e58:	18fb      	adds	r3, r7, r3
   11e5a:	681b      	ldr	r3, [r3, #0]
   11e5c:	2b00      	cmp	r3, #0
   11e5e:	d009      	beq.n	11e74 <sha256_test+0x2f8>
            ERROR_OUT(-2205 - i, exit);
   11e60:	23b1      	movs	r3, #177	; 0xb1
   11e62:	00db      	lsls	r3, r3, #3
   11e64:	18fb      	adds	r3, r7, r3
   11e66:	681b      	ldr	r3, [r3, #0]
   11e68:	4a42      	ldr	r2, [pc, #264]	; (11f74 <sha256_test+0x3f8>)
   11e6a:	1ad3      	subs	r3, r2, r3
   11e6c:	4a2f      	ldr	r2, [pc, #188]	; (11f2c <sha256_test+0x3b0>)
   11e6e:	18ba      	adds	r2, r7, r2
   11e70:	6013      	str	r3, [r2, #0]
   11e72:	e105      	b.n	12080 <sha256_test+0x504>
        wc_Sha256Free(&shaCopy);
   11e74:	2394      	movs	r3, #148	; 0x94
   11e76:	00db      	lsls	r3, r3, #3
   11e78:	18fb      	adds	r3, r7, r3
   11e7a:	0018      	movs	r0, r3
   11e7c:	f7fb fc72 	bl	d764 <wc_Sha256Free>

        if (XMEMCMP(hash, test_sha[i].output, WC_SHA256_DIGEST_SIZE) != 0)
   11e80:	4b35      	ldr	r3, [pc, #212]	; (11f58 <sha256_test+0x3dc>)
   11e82:	22b2      	movs	r2, #178	; 0xb2
   11e84:	00d2      	lsls	r2, r2, #3
   11e86:	18ba      	adds	r2, r7, r2
   11e88:	18d2      	adds	r2, r2, r3
   11e8a:	23b1      	movs	r3, #177	; 0xb1
   11e8c:	00db      	lsls	r3, r3, #3
   11e8e:	18fb      	adds	r3, r7, r3
   11e90:	681b      	ldr	r3, [r3, #0]
   11e92:	011b      	lsls	r3, r3, #4
   11e94:	18d3      	adds	r3, r2, r3
   11e96:	3304      	adds	r3, #4
   11e98:	6819      	ldr	r1, [r3, #0]
   11e9a:	2390      	movs	r3, #144	; 0x90
   11e9c:	00db      	lsls	r3, r3, #3
   11e9e:	18fb      	adds	r3, r7, r3
   11ea0:	2220      	movs	r2, #32
   11ea2:	0018      	movs	r0, r3
   11ea4:	f013 fc14 	bl	256d0 <memcmp>
   11ea8:	1e03      	subs	r3, r0, #0
   11eaa:	d009      	beq.n	11ec0 <sha256_test+0x344>
            ERROR_OUT(-2206 - i, exit);
   11eac:	23b1      	movs	r3, #177	; 0xb1
   11eae:	00db      	lsls	r3, r3, #3
   11eb0:	18fb      	adds	r3, r7, r3
   11eb2:	681b      	ldr	r3, [r3, #0]
   11eb4:	4a30      	ldr	r2, [pc, #192]	; (11f78 <sha256_test+0x3fc>)
   11eb6:	1ad3      	subs	r3, r2, r3
   11eb8:	4a1c      	ldr	r2, [pc, #112]	; (11f2c <sha256_test+0x3b0>)
   11eba:	18ba      	adds	r2, r7, r2
   11ebc:	6013      	str	r3, [r2, #0]
   11ebe:	e0df      	b.n	12080 <sha256_test+0x504>
        if (XMEMCMP(hash, hashcopy, WC_SHA256_DIGEST_SIZE) != 0)
   11ec0:	238c      	movs	r3, #140	; 0x8c
   11ec2:	00db      	lsls	r3, r3, #3
   11ec4:	18f9      	adds	r1, r7, r3
   11ec6:	2390      	movs	r3, #144	; 0x90
   11ec8:	00db      	lsls	r3, r3, #3
   11eca:	18fb      	adds	r3, r7, r3
   11ecc:	2220      	movs	r2, #32
   11ece:	0018      	movs	r0, r3
   11ed0:	f013 fbfe 	bl	256d0 <memcmp>
   11ed4:	1e03      	subs	r3, r0, #0
   11ed6:	d009      	beq.n	11eec <sha256_test+0x370>
            ERROR_OUT(-2207 - i, exit);
   11ed8:	23b1      	movs	r3, #177	; 0xb1
   11eda:	00db      	lsls	r3, r3, #3
   11edc:	18fb      	adds	r3, r7, r3
   11ede:	681b      	ldr	r3, [r3, #0]
   11ee0:	4a26      	ldr	r2, [pc, #152]	; (11f7c <sha256_test+0x400>)
   11ee2:	1ad3      	subs	r3, r2, r3
   11ee4:	4a11      	ldr	r2, [pc, #68]	; (11f2c <sha256_test+0x3b0>)
   11ee6:	18ba      	adds	r2, r7, r2
   11ee8:	6013      	str	r3, [r2, #0]
   11eea:	e0c9      	b.n	12080 <sha256_test+0x504>
    if (ret != 0) {
        wc_Sha256Free(&sha);
        return -2201;
    }

    for (i = 0; i < times; ++i) {
   11eec:	23b1      	movs	r3, #177	; 0xb1
   11eee:	00db      	lsls	r3, r3, #3
   11ef0:	18fb      	adds	r3, r7, r3
   11ef2:	681b      	ldr	r3, [r3, #0]
   11ef4:	3301      	adds	r3, #1
   11ef6:	22b1      	movs	r2, #177	; 0xb1
   11ef8:	00d2      	lsls	r2, r2, #3
   11efa:	18ba      	adds	r2, r7, r2
   11efc:	6013      	str	r3, [r2, #0]
   11efe:	23b1      	movs	r3, #177	; 0xb1
   11f00:	00db      	lsls	r3, r3, #3
   11f02:	18fb      	adds	r3, r7, r3
   11f04:	681a      	ldr	r2, [r3, #0]
   11f06:	4b0a      	ldr	r3, [pc, #40]	; (11f30 <sha256_test+0x3b4>)
   11f08:	18fb      	adds	r3, r7, r3
   11f0a:	681b      	ldr	r3, [r3, #0]
   11f0c:	429a      	cmp	r2, r3
   11f0e:	da00      	bge.n	11f12 <sha256_test+0x396>
   11f10:	e727      	b.n	11d62 <sha256_test+0x1e6>
            ERROR_OUT(-2207 - i, exit);
    }

    /* BEGIN LARGE HASH TEST */ {
    byte large_input[1024];
    const char* large_digest =
   11f12:	4b1b      	ldr	r3, [pc, #108]	; (11f80 <sha256_test+0x404>)
   11f14:	22b0      	movs	r2, #176	; 0xb0
   11f16:	00d2      	lsls	r2, r2, #3
   11f18:	18ba      	adds	r2, r7, r2
   11f1a:	6013      	str	r3, [r2, #0]
        "\x27\x78\x3e\x87\x96\x3a\x4e\xfb\x68\x29\xb5\x31\xc9\xba\x57\xb4"
        "\x4f\x45\x79\x7f\x67\x70\xbd\x63\x7f\xbf\x0d\x80\x7c\xbd\xba\xe0";

    for (i = 0; i < (int)sizeof(large_input); i++) {
   11f1c:	2300      	movs	r3, #0
   11f1e:	22b1      	movs	r2, #177	; 0xb1
   11f20:	00d2      	lsls	r2, r2, #3
   11f22:	18ba      	adds	r2, r7, r2
   11f24:	6013      	str	r3, [r2, #0]
   11f26:	e047      	b.n	11fb8 <sha256_test+0x43c>
   11f28:	fffffa70 	.word	0xfffffa70
   11f2c:	0000058c 	.word	0x0000058c
   11f30:	00000584 	.word	0x00000584
   11f34:	fffffec0 	.word	0xfffffec0
   11f38:	0002ce74 	.word	0x0002ce74
   11f3c:	0002d010 	.word	0x0002d010
   11f40:	fffffeb0 	.word	0xfffffeb0
   11f44:	0002ce90 	.word	0x0002ce90
   11f48:	0002d034 	.word	0x0002d034
   11f4c:	fffffea0 	.word	0xfffffea0
   11f50:	0002ceac 	.word	0x0002ceac
   11f54:	0002d058 	.word	0x0002d058
   11f58:	fffffe70 	.word	0xfffffe70
   11f5c:	20000010 	.word	0x20000010
   11f60:	fffff768 	.word	0xfffff768
   11f64:	fffff767 	.word	0xfffff767
   11f68:	fffff766 	.word	0xfffff766
   11f6c:	fffff765 	.word	0xfffff765
   11f70:	fffff764 	.word	0xfffff764
   11f74:	fffff763 	.word	0xfffff763
   11f78:	fffff762 	.word	0xfffff762
   11f7c:	fffff761 	.word	0xfffff761
   11f80:	0002d07c 	.word	0x0002d07c
        large_input[i] = (byte)(i & 0xFF);
   11f84:	23b1      	movs	r3, #177	; 0xb1
   11f86:	00db      	lsls	r3, r3, #3
   11f88:	18fb      	adds	r3, r7, r3
   11f8a:	681b      	ldr	r3, [r3, #0]
   11f8c:	b2d9      	uxtb	r1, r3
   11f8e:	4b47      	ldr	r3, [pc, #284]	; (120ac <sha256_test+0x530>)
   11f90:	22b2      	movs	r2, #178	; 0xb2
   11f92:	00d2      	lsls	r2, r2, #3
   11f94:	18ba      	adds	r2, r7, r2
   11f96:	18d2      	adds	r2, r2, r3
   11f98:	23b1      	movs	r3, #177	; 0xb1
   11f9a:	00db      	lsls	r3, r3, #3
   11f9c:	18fb      	adds	r3, r7, r3
   11f9e:	681b      	ldr	r3, [r3, #0]
   11fa0:	18d3      	adds	r3, r2, r3
   11fa2:	1c0a      	adds	r2, r1, #0
   11fa4:	701a      	strb	r2, [r3, #0]
    byte large_input[1024];
    const char* large_digest =
        "\x27\x78\x3e\x87\x96\x3a\x4e\xfb\x68\x29\xb5\x31\xc9\xba\x57\xb4"
        "\x4f\x45\x79\x7f\x67\x70\xbd\x63\x7f\xbf\x0d\x80\x7c\xbd\xba\xe0";

    for (i = 0; i < (int)sizeof(large_input); i++) {
   11fa6:	23b1      	movs	r3, #177	; 0xb1
   11fa8:	00db      	lsls	r3, r3, #3
   11faa:	18fb      	adds	r3, r7, r3
   11fac:	681b      	ldr	r3, [r3, #0]
   11fae:	3301      	adds	r3, #1
   11fb0:	22b1      	movs	r2, #177	; 0xb1
   11fb2:	00d2      	lsls	r2, r2, #3
   11fb4:	18ba      	adds	r2, r7, r2
   11fb6:	6013      	str	r3, [r2, #0]
   11fb8:	23b1      	movs	r3, #177	; 0xb1
   11fba:	00db      	lsls	r3, r3, #3
   11fbc:	18fb      	adds	r3, r7, r3
   11fbe:	681b      	ldr	r3, [r3, #0]
   11fc0:	4a3b      	ldr	r2, [pc, #236]	; (120b0 <sha256_test+0x534>)
   11fc2:	4293      	cmp	r3, r2
   11fc4:	ddde      	ble.n	11f84 <sha256_test+0x408>
        large_input[i] = (byte)(i & 0xFF);
    }
    times = 100;
   11fc6:	2364      	movs	r3, #100	; 0x64
   11fc8:	4a3a      	ldr	r2, [pc, #232]	; (120b4 <sha256_test+0x538>)
   11fca:	18ba      	adds	r2, r7, r2
   11fcc:	6013      	str	r3, [r2, #0]
#ifdef WOLFSSL_PIC32MZ_HASH
    wc_Sha256SizeSet(&sha, times * sizeof(large_input));
#endif
    for (i = 0; i < times; ++i) {
   11fce:	2300      	movs	r3, #0
   11fd0:	22b1      	movs	r2, #177	; 0xb1
   11fd2:	00d2      	lsls	r2, r2, #3
   11fd4:	18ba      	adds	r2, r7, r2
   11fd6:	6013      	str	r3, [r2, #0]
   11fd8:	e01f      	b.n	1201a <sha256_test+0x49e>
        ret = wc_Sha256Update(&sha, (byte*)large_input,
   11fda:	2380      	movs	r3, #128	; 0x80
   11fdc:	00da      	lsls	r2, r3, #3
   11fde:	0039      	movs	r1, r7
   11fe0:	23a2      	movs	r3, #162	; 0xa2
   11fe2:	00db      	lsls	r3, r3, #3
   11fe4:	18fb      	adds	r3, r7, r3
   11fe6:	0018      	movs	r0, r3
   11fe8:	f7fb fada 	bl	d5a0 <wc_Sha256Update>
   11fec:	0003      	movs	r3, r0
   11fee:	4a32      	ldr	r2, [pc, #200]	; (120b8 <sha256_test+0x53c>)
   11ff0:	18ba      	adds	r2, r7, r2
   11ff2:	6013      	str	r3, [r2, #0]
            (word32)sizeof(large_input));
        if (ret != 0)
   11ff4:	4b30      	ldr	r3, [pc, #192]	; (120b8 <sha256_test+0x53c>)
   11ff6:	18fb      	adds	r3, r7, r3
   11ff8:	681b      	ldr	r3, [r3, #0]
   11ffa:	2b00      	cmp	r3, #0
   11ffc:	d004      	beq.n	12008 <sha256_test+0x48c>
            ERROR_OUT(-2208, exit);
   11ffe:	4b2f      	ldr	r3, [pc, #188]	; (120bc <sha256_test+0x540>)
   12000:	4a2d      	ldr	r2, [pc, #180]	; (120b8 <sha256_test+0x53c>)
   12002:	18ba      	adds	r2, r7, r2
   12004:	6013      	str	r3, [r2, #0]
   12006:	e03b      	b.n	12080 <sha256_test+0x504>
    }
    times = 100;
#ifdef WOLFSSL_PIC32MZ_HASH
    wc_Sha256SizeSet(&sha, times * sizeof(large_input));
#endif
    for (i = 0; i < times; ++i) {
   12008:	23b1      	movs	r3, #177	; 0xb1
   1200a:	00db      	lsls	r3, r3, #3
   1200c:	18fb      	adds	r3, r7, r3
   1200e:	681b      	ldr	r3, [r3, #0]
   12010:	3301      	adds	r3, #1
   12012:	22b1      	movs	r2, #177	; 0xb1
   12014:	00d2      	lsls	r2, r2, #3
   12016:	18ba      	adds	r2, r7, r2
   12018:	6013      	str	r3, [r2, #0]
   1201a:	23b1      	movs	r3, #177	; 0xb1
   1201c:	00db      	lsls	r3, r3, #3
   1201e:	18fb      	adds	r3, r7, r3
   12020:	681a      	ldr	r2, [r3, #0]
   12022:	4b24      	ldr	r3, [pc, #144]	; (120b4 <sha256_test+0x538>)
   12024:	18fb      	adds	r3, r7, r3
   12026:	681b      	ldr	r3, [r3, #0]
   12028:	429a      	cmp	r2, r3
   1202a:	dbd6      	blt.n	11fda <sha256_test+0x45e>
        ret = wc_Sha256Update(&sha, (byte*)large_input,
            (word32)sizeof(large_input));
        if (ret != 0)
            ERROR_OUT(-2208, exit);
    }
    ret = wc_Sha256Final(&sha, hash);
   1202c:	2390      	movs	r3, #144	; 0x90
   1202e:	00db      	lsls	r3, r3, #3
   12030:	18fa      	adds	r2, r7, r3
   12032:	23a2      	movs	r3, #162	; 0xa2
   12034:	00db      	lsls	r3, r3, #3
   12036:	18fb      	adds	r3, r7, r3
   12038:	0011      	movs	r1, r2
   1203a:	0018      	movs	r0, r3
   1203c:	f7fb fb54 	bl	d6e8 <wc_Sha256Final>
   12040:	0003      	movs	r3, r0
   12042:	4a1d      	ldr	r2, [pc, #116]	; (120b8 <sha256_test+0x53c>)
   12044:	18ba      	adds	r2, r7, r2
   12046:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   12048:	4b1b      	ldr	r3, [pc, #108]	; (120b8 <sha256_test+0x53c>)
   1204a:	18fb      	adds	r3, r7, r3
   1204c:	681b      	ldr	r3, [r3, #0]
   1204e:	2b00      	cmp	r3, #0
   12050:	d004      	beq.n	1205c <sha256_test+0x4e0>
        ERROR_OUT(-2209, exit);
   12052:	4b1b      	ldr	r3, [pc, #108]	; (120c0 <sha256_test+0x544>)
   12054:	4a18      	ldr	r2, [pc, #96]	; (120b8 <sha256_test+0x53c>)
   12056:	18ba      	adds	r2, r7, r2
   12058:	6013      	str	r3, [r2, #0]
   1205a:	e011      	b.n	12080 <sha256_test+0x504>
    if (XMEMCMP(hash, large_digest, WC_SHA256_DIGEST_SIZE) != 0)
   1205c:	23b0      	movs	r3, #176	; 0xb0
   1205e:	00db      	lsls	r3, r3, #3
   12060:	18fb      	adds	r3, r7, r3
   12062:	6819      	ldr	r1, [r3, #0]
   12064:	2390      	movs	r3, #144	; 0x90
   12066:	00db      	lsls	r3, r3, #3
   12068:	18fb      	adds	r3, r7, r3
   1206a:	2220      	movs	r2, #32
   1206c:	0018      	movs	r0, r3
   1206e:	f013 fb2f 	bl	256d0 <memcmp>
   12072:	1e03      	subs	r3, r0, #0
   12074:	d004      	beq.n	12080 <sha256_test+0x504>
        ERROR_OUT(-2210, exit);
   12076:	4b13      	ldr	r3, [pc, #76]	; (120c4 <sha256_test+0x548>)
   12078:	4a0f      	ldr	r2, [pc, #60]	; (120b8 <sha256_test+0x53c>)
   1207a:	18ba      	adds	r2, r7, r2
   1207c:	6013      	str	r3, [r2, #0]
   1207e:	46c0      	nop			; (mov r8, r8)
    } /* END LARGE HASH TEST */

exit:

    wc_Sha256Free(&sha);
   12080:	23a2      	movs	r3, #162	; 0xa2
   12082:	00db      	lsls	r3, r3, #3
   12084:	18fb      	adds	r3, r7, r3
   12086:	0018      	movs	r0, r3
   12088:	f7fb fb6c 	bl	d764 <wc_Sha256Free>
    wc_Sha256Free(&shaCopy);
   1208c:	2394      	movs	r3, #148	; 0x94
   1208e:	00db      	lsls	r3, r3, #3
   12090:	18fb      	adds	r3, r7, r3
   12092:	0018      	movs	r0, r3
   12094:	f7fb fb66 	bl	d764 <wc_Sha256Free>

    return ret;
   12098:	4b07      	ldr	r3, [pc, #28]	; (120b8 <sha256_test+0x53c>)
   1209a:	18fb      	adds	r3, r7, r3
   1209c:	681b      	ldr	r3, [r3, #0]
}
   1209e:	0018      	movs	r0, r3
   120a0:	46bd      	mov	sp, r7
   120a2:	23b2      	movs	r3, #178	; 0xb2
   120a4:	00db      	lsls	r3, r3, #3
   120a6:	449d      	add	sp, r3
   120a8:	bd80      	pop	{r7, pc}
   120aa:	46c0      	nop			; (mov r8, r8)
   120ac:	fffffa70 	.word	0xfffffa70
   120b0:	000003ff 	.word	0x000003ff
   120b4:	00000584 	.word	0x00000584
   120b8:	0000058c 	.word	0x0000058c
   120bc:	fffff760 	.word	0xfffff760
   120c0:	fffff75f 	.word	0xfffff75f
   120c4:	fffff75e 	.word	0xfffff75e

000120c8 <hash_test>:
}
#endif


int hash_test(void)
{
   120c8:	b590      	push	{r4, r7, lr}
   120ca:	b0c7      	sub	sp, #284	; 0x11c
   120cc:	af02      	add	r7, sp, #8
    wc_HashAlg       hash;
    int              ret, exp_ret;
    int              i, j;
    int              digestSz;
    byte             data[] = "0123456789abcdef0123456789abcdef012345";
   120ce:	2360      	movs	r3, #96	; 0x60
   120d0:	18fb      	adds	r3, r7, r3
   120d2:	4ae4      	ldr	r2, [pc, #912]	; (12464 <hash_test+0x39c>)
   120d4:	ca13      	ldmia	r2!, {r0, r1, r4}
   120d6:	c313      	stmia	r3!, {r0, r1, r4}
   120d8:	ca13      	ldmia	r2!, {r0, r1, r4}
   120da:	c313      	stmia	r3!, {r0, r1, r4}
   120dc:	ca13      	ldmia	r2!, {r0, r1, r4}
   120de:	c313      	stmia	r3!, {r0, r1, r4}
   120e0:	8811      	ldrh	r1, [r2, #0]
   120e2:	8019      	strh	r1, [r3, #0]
   120e4:	7892      	ldrb	r2, [r2, #2]
   120e6:	709a      	strb	r2, [r3, #2]
    byte             out[WC_MAX_DIGEST_SIZE];
    byte             hashOut[WC_MAX_DIGEST_SIZE];
#if !defined(NO_ASN) || !defined(NO_DH) || defined(HAVE_ECC)
    enum wc_HashType hashType;
#endif
    enum wc_HashType typesGood[] = { WC_HASH_TYPE_MD5, WC_HASH_TYPE_SHA,
   120e8:	2318      	movs	r3, #24
   120ea:	18fa      	adds	r2, r7, r3
   120ec:	4bde      	ldr	r3, [pc, #888]	; (12468 <hash_test+0x3a0>)
   120ee:	0010      	movs	r0, r2
   120f0:	0019      	movs	r1, r3
   120f2:	2306      	movs	r3, #6
   120f4:	001a      	movs	r2, r3
   120f6:	f013 fafa 	bl	256ee <memcpy>
                                     WC_HASH_TYPE_SHA224, WC_HASH_TYPE_SHA256,
                                     WC_HASH_TYPE_SHA384, WC_HASH_TYPE_SHA512 };
    enum wc_HashType typesNoImpl[] = {
   120fa:	4bdc      	ldr	r3, [pc, #880]	; (1246c <hash_test+0x3a4>)
   120fc:	2288      	movs	r2, #136	; 0x88
   120fe:	0052      	lsls	r2, r2, #1
   12100:	18ba      	adds	r2, r7, r2
   12102:	18d2      	adds	r2, r2, r3
   12104:	4bda      	ldr	r3, [pc, #872]	; (12470 <hash_test+0x3a8>)
   12106:	0010      	movs	r0, r2
   12108:	0019      	movs	r1, r3
   1210a:	2305      	movs	r3, #5
   1210c:	001a      	movs	r2, r3
   1210e:	f013 faee 	bl	256ee <memcpy>
#ifndef WOLFSSL_SHA512
                                        WC_HASH_TYPE_SHA512,
#endif
                                        WC_HASH_TYPE_NONE
                                     };
    enum wc_HashType typesBad[]  = { WC_HASH_TYPE_NONE, WC_HASH_TYPE_MD5_SHA,
   12112:	4bd8      	ldr	r3, [pc, #864]	; (12474 <hash_test+0x3ac>)
   12114:	2288      	movs	r2, #136	; 0x88
   12116:	0052      	lsls	r2, r2, #1
   12118:	18ba      	adds	r2, r7, r2
   1211a:	18d2      	adds	r2, r2, r3
   1211c:	4bd6      	ldr	r3, [pc, #856]	; (12478 <hash_test+0x3b0>)
   1211e:	0010      	movs	r0, r2
   12120:	0019      	movs	r1, r3
   12122:	2304      	movs	r3, #4
   12124:	001a      	movs	r2, r3
   12126:	f013 fae2 	bl	256ee <memcpy>
                                     WC_HASH_TYPE_MD2, WC_HASH_TYPE_MD4 };
    enum wc_HashType typesSha3[] = { WC_HASH_TYPE_SHA3_224,
   1212a:	4bd4      	ldr	r3, [pc, #848]	; (1247c <hash_test+0x3b4>)
   1212c:	2288      	movs	r2, #136	; 0x88
   1212e:	0052      	lsls	r2, r2, #1
   12130:	18ba      	adds	r2, r7, r2
   12132:	18d2      	adds	r2, r2, r3
   12134:	4bd2      	ldr	r3, [pc, #840]	; (12480 <hash_test+0x3b8>)
   12136:	0010      	movs	r0, r2
   12138:	0019      	movs	r1, r3
   1213a:	2304      	movs	r3, #4
   1213c:	001a      	movs	r2, r3
   1213e:	f013 fad6 	bl	256ee <memcpy>
                                     WC_HASH_TYPE_SHA3_256,
                                     WC_HASH_TYPE_SHA3_384,
                                     WC_HASH_TYPE_SHA3_512 };
    enum wc_HashType typesHashBad[] = { WC_HASH_TYPE_MD2, WC_HASH_TYPE_MD4,
   12142:	4bd0      	ldr	r3, [pc, #832]	; (12484 <hash_test+0x3bc>)
   12144:	2288      	movs	r2, #136	; 0x88
   12146:	0052      	lsls	r2, r2, #1
   12148:	18ba      	adds	r2, r7, r2
   1214a:	18d2      	adds	r2, r2, r3
   1214c:	4bce      	ldr	r3, [pc, #824]	; (12488 <hash_test+0x3c0>)
   1214e:	0010      	movs	r0, r2
   12150:	0019      	movs	r1, r3
   12152:	2308      	movs	r3, #8
   12154:	001a      	movs	r2, r3
   12156:	f013 faca 	bl	256ee <memcpy>
                                        WC_HASH_TYPE_SHA3_512,
                                        WC_HASH_TYPE_BLAKE2B,
                                        WC_HASH_TYPE_NONE };

    /* Parameter Validation testing. */
    ret = wc_HashInit(NULL, WC_HASH_TYPE_SHA256);
   1215a:	2106      	movs	r1, #6
   1215c:	2000      	movs	r0, #0
   1215e:	f7f4 f8b3 	bl	62c8 <wc_HashInit>
   12162:	0003      	movs	r3, r0
   12164:	1c7a      	adds	r2, r7, #1
   12166:	32ff      	adds	r2, #255	; 0xff
   12168:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   1216a:	1c7b      	adds	r3, r7, #1
   1216c:	33ff      	adds	r3, #255	; 0xff
   1216e:	681b      	ldr	r3, [r3, #0]
   12170:	33ad      	adds	r3, #173	; 0xad
   12172:	d002      	beq.n	1217a <hash_test+0xb2>
        return -2900;
   12174:	4bc5      	ldr	r3, [pc, #788]	; (1248c <hash_test+0x3c4>)
   12176:	f000 fcca 	bl	12b0e <hash_test+0xa46>
    ret = wc_HashUpdate(NULL, WC_HASH_TYPE_SHA256, NULL, sizeof(data));
   1217a:	2327      	movs	r3, #39	; 0x27
   1217c:	2200      	movs	r2, #0
   1217e:	2106      	movs	r1, #6
   12180:	2000      	movs	r0, #0
   12182:	f7f4 f8d5 	bl	6330 <wc_HashUpdate>
   12186:	0003      	movs	r3, r0
   12188:	1c7a      	adds	r2, r7, #1
   1218a:	32ff      	adds	r2, #255	; 0xff
   1218c:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   1218e:	1c7b      	adds	r3, r7, #1
   12190:	33ff      	adds	r3, #255	; 0xff
   12192:	681b      	ldr	r3, [r3, #0]
   12194:	33ad      	adds	r3, #173	; 0xad
   12196:	d002      	beq.n	1219e <hash_test+0xd6>
        return -2901;
   12198:	4bbd      	ldr	r3, [pc, #756]	; (12490 <hash_test+0x3c8>)
   1219a:	f000 fcb8 	bl	12b0e <hash_test+0xa46>
    ret = wc_HashUpdate(&hash, WC_HASH_TYPE_SHA256, NULL, sizeof(data));
   1219e:	2388      	movs	r3, #136	; 0x88
   121a0:	18f8      	adds	r0, r7, r3
   121a2:	2327      	movs	r3, #39	; 0x27
   121a4:	2200      	movs	r2, #0
   121a6:	2106      	movs	r1, #6
   121a8:	f7f4 f8c2 	bl	6330 <wc_HashUpdate>
   121ac:	0003      	movs	r3, r0
   121ae:	1c7a      	adds	r2, r7, #1
   121b0:	32ff      	adds	r2, #255	; 0xff
   121b2:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   121b4:	1c7b      	adds	r3, r7, #1
   121b6:	33ff      	adds	r3, #255	; 0xff
   121b8:	681b      	ldr	r3, [r3, #0]
   121ba:	33ad      	adds	r3, #173	; 0xad
   121bc:	d002      	beq.n	121c4 <hash_test+0xfc>
        return -2902;
   121be:	4bb5      	ldr	r3, [pc, #724]	; (12494 <hash_test+0x3cc>)
   121c0:	f000 fca5 	bl	12b0e <hash_test+0xa46>
    ret = wc_HashUpdate(NULL, WC_HASH_TYPE_SHA256, data, sizeof(data));
   121c4:	2360      	movs	r3, #96	; 0x60
   121c6:	18fa      	adds	r2, r7, r3
   121c8:	2327      	movs	r3, #39	; 0x27
   121ca:	2106      	movs	r1, #6
   121cc:	2000      	movs	r0, #0
   121ce:	f7f4 f8af 	bl	6330 <wc_HashUpdate>
   121d2:	0003      	movs	r3, r0
   121d4:	1c7a      	adds	r2, r7, #1
   121d6:	32ff      	adds	r2, #255	; 0xff
   121d8:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   121da:	1c7b      	adds	r3, r7, #1
   121dc:	33ff      	adds	r3, #255	; 0xff
   121de:	681b      	ldr	r3, [r3, #0]
   121e0:	33ad      	adds	r3, #173	; 0xad
   121e2:	d002      	beq.n	121ea <hash_test+0x122>
        return -2903;
   121e4:	4bac      	ldr	r3, [pc, #688]	; (12498 <hash_test+0x3d0>)
   121e6:	f000 fc92 	bl	12b0e <hash_test+0xa46>
    ret = wc_HashFinal(NULL, WC_HASH_TYPE_SHA256, NULL);
   121ea:	2200      	movs	r2, #0
   121ec:	2106      	movs	r1, #6
   121ee:	2000      	movs	r0, #0
   121f0:	f7f4 f8de 	bl	63b0 <wc_HashFinal>
   121f4:	0003      	movs	r3, r0
   121f6:	1c7a      	adds	r2, r7, #1
   121f8:	32ff      	adds	r2, #255	; 0xff
   121fa:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   121fc:	1c7b      	adds	r3, r7, #1
   121fe:	33ff      	adds	r3, #255	; 0xff
   12200:	681b      	ldr	r3, [r3, #0]
   12202:	33ad      	adds	r3, #173	; 0xad
   12204:	d002      	beq.n	1220c <hash_test+0x144>
        return -2904;
   12206:	4ba5      	ldr	r3, [pc, #660]	; (1249c <hash_test+0x3d4>)
   12208:	f000 fc81 	bl	12b0e <hash_test+0xa46>
    ret = wc_HashFinal(&hash, WC_HASH_TYPE_SHA256, NULL);
   1220c:	2388      	movs	r3, #136	; 0x88
   1220e:	18fb      	adds	r3, r7, r3
   12210:	2200      	movs	r2, #0
   12212:	2106      	movs	r1, #6
   12214:	0018      	movs	r0, r3
   12216:	f7f4 f8cb 	bl	63b0 <wc_HashFinal>
   1221a:	0003      	movs	r3, r0
   1221c:	1c7a      	adds	r2, r7, #1
   1221e:	32ff      	adds	r2, #255	; 0xff
   12220:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   12222:	1c7b      	adds	r3, r7, #1
   12224:	33ff      	adds	r3, #255	; 0xff
   12226:	681b      	ldr	r3, [r3, #0]
   12228:	33ad      	adds	r3, #173	; 0xad
   1222a:	d002      	beq.n	12232 <hash_test+0x16a>
        return -2905;
   1222c:	4b9c      	ldr	r3, [pc, #624]	; (124a0 <hash_test+0x3d8>)
   1222e:	f000 fc6e 	bl	12b0e <hash_test+0xa46>
    ret = wc_HashFinal(NULL, WC_HASH_TYPE_SHA256, out);
   12232:	2340      	movs	r3, #64	; 0x40
   12234:	18fb      	adds	r3, r7, r3
   12236:	001a      	movs	r2, r3
   12238:	2106      	movs	r1, #6
   1223a:	2000      	movs	r0, #0
   1223c:	f7f4 f8b8 	bl	63b0 <wc_HashFinal>
   12240:	0003      	movs	r3, r0
   12242:	1c7a      	adds	r2, r7, #1
   12244:	32ff      	adds	r2, #255	; 0xff
   12246:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   12248:	1c7b      	adds	r3, r7, #1
   1224a:	33ff      	adds	r3, #255	; 0xff
   1224c:	681b      	ldr	r3, [r3, #0]
   1224e:	33ad      	adds	r3, #173	; 0xad
   12250:	d002      	beq.n	12258 <hash_test+0x190>
        return -2906;
   12252:	4b94      	ldr	r3, [pc, #592]	; (124a4 <hash_test+0x3dc>)
   12254:	f000 fc5b 	bl	12b0e <hash_test+0xa46>

    /* Try invalid hash algorithms. */
    for (i = 0; i < (int)(sizeof(typesBad)/sizeof(*typesBad)); i++) {
   12258:	2300      	movs	r3, #0
   1225a:	2284      	movs	r2, #132	; 0x84
   1225c:	0052      	lsls	r2, r2, #1
   1225e:	18ba      	adds	r2, r7, r2
   12260:	6013      	str	r3, [r2, #0]
   12262:	e081      	b.n	12368 <hash_test+0x2a0>
        ret = wc_HashInit(&hash, typesBad[i]);
   12264:	4b83      	ldr	r3, [pc, #524]	; (12474 <hash_test+0x3ac>)
   12266:	2288      	movs	r2, #136	; 0x88
   12268:	0052      	lsls	r2, r2, #1
   1226a:	18ba      	adds	r2, r7, r2
   1226c:	18d2      	adds	r2, r2, r3
   1226e:	2384      	movs	r3, #132	; 0x84
   12270:	005b      	lsls	r3, r3, #1
   12272:	18fb      	adds	r3, r7, r3
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	18d3      	adds	r3, r2, r3
   12278:	781a      	ldrb	r2, [r3, #0]
   1227a:	2388      	movs	r3, #136	; 0x88
   1227c:	18fb      	adds	r3, r7, r3
   1227e:	0011      	movs	r1, r2
   12280:	0018      	movs	r0, r3
   12282:	f7f4 f821 	bl	62c8 <wc_HashInit>
   12286:	0003      	movs	r3, r0
   12288:	1c7a      	adds	r2, r7, #1
   1228a:	32ff      	adds	r2, #255	; 0xff
   1228c:	6013      	str	r3, [r2, #0]
        if (ret != BAD_FUNC_ARG)
   1228e:	1c7b      	adds	r3, r7, #1
   12290:	33ff      	adds	r3, #255	; 0xff
   12292:	681b      	ldr	r3, [r3, #0]
   12294:	33ad      	adds	r3, #173	; 0xad
   12296:	d007      	beq.n	122a8 <hash_test+0x1e0>
            return -2907 - i;
   12298:	2384      	movs	r3, #132	; 0x84
   1229a:	005b      	lsls	r3, r3, #1
   1229c:	18fb      	adds	r3, r7, r3
   1229e:	681b      	ldr	r3, [r3, #0]
   122a0:	4a81      	ldr	r2, [pc, #516]	; (124a8 <hash_test+0x3e0>)
   122a2:	1ad3      	subs	r3, r2, r3
   122a4:	f000 fc33 	bl	12b0e <hash_test+0xa46>
        ret = wc_HashUpdate(&hash, typesBad[i], data, sizeof(data));
   122a8:	4b72      	ldr	r3, [pc, #456]	; (12474 <hash_test+0x3ac>)
   122aa:	2288      	movs	r2, #136	; 0x88
   122ac:	0052      	lsls	r2, r2, #1
   122ae:	18ba      	adds	r2, r7, r2
   122b0:	18d2      	adds	r2, r2, r3
   122b2:	2384      	movs	r3, #132	; 0x84
   122b4:	005b      	lsls	r3, r3, #1
   122b6:	18fb      	adds	r3, r7, r3
   122b8:	681b      	ldr	r3, [r3, #0]
   122ba:	18d3      	adds	r3, r2, r3
   122bc:	7819      	ldrb	r1, [r3, #0]
   122be:	2360      	movs	r3, #96	; 0x60
   122c0:	18fa      	adds	r2, r7, r3
   122c2:	2388      	movs	r3, #136	; 0x88
   122c4:	18f8      	adds	r0, r7, r3
   122c6:	2327      	movs	r3, #39	; 0x27
   122c8:	f7f4 f832 	bl	6330 <wc_HashUpdate>
   122cc:	0003      	movs	r3, r0
   122ce:	1c7a      	adds	r2, r7, #1
   122d0:	32ff      	adds	r2, #255	; 0xff
   122d2:	6013      	str	r3, [r2, #0]
        if (ret != BAD_FUNC_ARG)
   122d4:	1c7b      	adds	r3, r7, #1
   122d6:	33ff      	adds	r3, #255	; 0xff
   122d8:	681b      	ldr	r3, [r3, #0]
   122da:	33ad      	adds	r3, #173	; 0xad
   122dc:	d007      	beq.n	122ee <hash_test+0x226>
            return -2917 - i;
   122de:	2384      	movs	r3, #132	; 0x84
   122e0:	005b      	lsls	r3, r3, #1
   122e2:	18fb      	adds	r3, r7, r3
   122e4:	681b      	ldr	r3, [r3, #0]
   122e6:	4a71      	ldr	r2, [pc, #452]	; (124ac <hash_test+0x3e4>)
   122e8:	1ad3      	subs	r3, r2, r3
   122ea:	f000 fc10 	bl	12b0e <hash_test+0xa46>
        ret = wc_HashFinal(&hash, typesBad[i], out);
   122ee:	4b61      	ldr	r3, [pc, #388]	; (12474 <hash_test+0x3ac>)
   122f0:	2288      	movs	r2, #136	; 0x88
   122f2:	0052      	lsls	r2, r2, #1
   122f4:	18ba      	adds	r2, r7, r2
   122f6:	18d2      	adds	r2, r2, r3
   122f8:	2384      	movs	r3, #132	; 0x84
   122fa:	005b      	lsls	r3, r3, #1
   122fc:	18fb      	adds	r3, r7, r3
   122fe:	681b      	ldr	r3, [r3, #0]
   12300:	18d3      	adds	r3, r2, r3
   12302:	7819      	ldrb	r1, [r3, #0]
   12304:	2340      	movs	r3, #64	; 0x40
   12306:	18fa      	adds	r2, r7, r3
   12308:	2388      	movs	r3, #136	; 0x88
   1230a:	18fb      	adds	r3, r7, r3
   1230c:	0018      	movs	r0, r3
   1230e:	f7f4 f84f 	bl	63b0 <wc_HashFinal>
   12312:	0003      	movs	r3, r0
   12314:	1c7a      	adds	r2, r7, #1
   12316:	32ff      	adds	r2, #255	; 0xff
   12318:	6013      	str	r3, [r2, #0]
        if (ret != BAD_FUNC_ARG)
   1231a:	1c7b      	adds	r3, r7, #1
   1231c:	33ff      	adds	r3, #255	; 0xff
   1231e:	681b      	ldr	r3, [r3, #0]
   12320:	33ad      	adds	r3, #173	; 0xad
   12322:	d007      	beq.n	12334 <hash_test+0x26c>
            return -2927 - i;
   12324:	2384      	movs	r3, #132	; 0x84
   12326:	005b      	lsls	r3, r3, #1
   12328:	18fb      	adds	r3, r7, r3
   1232a:	681b      	ldr	r3, [r3, #0]
   1232c:	4a60      	ldr	r2, [pc, #384]	; (124b0 <hash_test+0x3e8>)
   1232e:	1ad3      	subs	r3, r2, r3
   12330:	f000 fbed 	bl	12b0e <hash_test+0xa46>
        wc_HashFree(&hash, typesBad[i]);
   12334:	4b4f      	ldr	r3, [pc, #316]	; (12474 <hash_test+0x3ac>)
   12336:	2288      	movs	r2, #136	; 0x88
   12338:	0052      	lsls	r2, r2, #1
   1233a:	18ba      	adds	r2, r7, r2
   1233c:	18d2      	adds	r2, r2, r3
   1233e:	2384      	movs	r3, #132	; 0x84
   12340:	005b      	lsls	r3, r3, #1
   12342:	18fb      	adds	r3, r7, r3
   12344:	681b      	ldr	r3, [r3, #0]
   12346:	18d3      	adds	r3, r2, r3
   12348:	781a      	ldrb	r2, [r3, #0]
   1234a:	2388      	movs	r3, #136	; 0x88
   1234c:	18fb      	adds	r3, r7, r3
   1234e:	0011      	movs	r1, r2
   12350:	0018      	movs	r0, r3
   12352:	f7f4 f86b 	bl	642c <wc_HashFree>
    ret = wc_HashFinal(NULL, WC_HASH_TYPE_SHA256, out);
    if (ret != BAD_FUNC_ARG)
        return -2906;

    /* Try invalid hash algorithms. */
    for (i = 0; i < (int)(sizeof(typesBad)/sizeof(*typesBad)); i++) {
   12356:	2384      	movs	r3, #132	; 0x84
   12358:	005b      	lsls	r3, r3, #1
   1235a:	18fb      	adds	r3, r7, r3
   1235c:	681b      	ldr	r3, [r3, #0]
   1235e:	3301      	adds	r3, #1
   12360:	2284      	movs	r2, #132	; 0x84
   12362:	0052      	lsls	r2, r2, #1
   12364:	18ba      	adds	r2, r7, r2
   12366:	6013      	str	r3, [r2, #0]
   12368:	2384      	movs	r3, #132	; 0x84
   1236a:	005b      	lsls	r3, r3, #1
   1236c:	18fb      	adds	r3, r7, r3
   1236e:	681b      	ldr	r3, [r3, #0]
   12370:	2b03      	cmp	r3, #3
   12372:	dc00      	bgt.n	12376 <hash_test+0x2ae>
   12374:	e776      	b.n	12264 <hash_test+0x19c>
            return -2927 - i;
        wc_HashFree(&hash, typesBad[i]);
    }

    /* Try valid hash algorithms. */
    for (i = 0, j = 0; i < (int)(sizeof(typesGood)/sizeof(*typesGood)); i++) {
   12376:	2300      	movs	r3, #0
   12378:	2284      	movs	r2, #132	; 0x84
   1237a:	0052      	lsls	r2, r2, #1
   1237c:	18ba      	adds	r2, r7, r2
   1237e:	6013      	str	r3, [r2, #0]
   12380:	2300      	movs	r3, #0
   12382:	1d7a      	adds	r2, r7, #5
   12384:	32ff      	adds	r2, #255	; 0xff
   12386:	6013      	str	r3, [r2, #0]
   12388:	e217      	b.n	127ba <hash_test+0x6f2>
        exp_ret = 0;
   1238a:	2300      	movs	r3, #0
   1238c:	2286      	movs	r2, #134	; 0x86
   1238e:	0052      	lsls	r2, r2, #1
   12390:	18ba      	adds	r2, r7, r2
   12392:	6013      	str	r3, [r2, #0]
        if (typesGood[i] == typesNoImpl[j]) {
   12394:	2318      	movs	r3, #24
   12396:	18fa      	adds	r2, r7, r3
   12398:	2384      	movs	r3, #132	; 0x84
   1239a:	005b      	lsls	r3, r3, #1
   1239c:	18fb      	adds	r3, r7, r3
   1239e:	681b      	ldr	r3, [r3, #0]
   123a0:	18d3      	adds	r3, r2, r3
   123a2:	781a      	ldrb	r2, [r3, #0]
   123a4:	4b31      	ldr	r3, [pc, #196]	; (1246c <hash_test+0x3a4>)
   123a6:	2188      	movs	r1, #136	; 0x88
   123a8:	0049      	lsls	r1, r1, #1
   123aa:	1879      	adds	r1, r7, r1
   123ac:	18c9      	adds	r1, r1, r3
   123ae:	1d7b      	adds	r3, r7, #5
   123b0:	33ff      	adds	r3, #255	; 0xff
   123b2:	681b      	ldr	r3, [r3, #0]
   123b4:	18cb      	adds	r3, r1, r3
   123b6:	781b      	ldrb	r3, [r3, #0]
   123b8:	429a      	cmp	r2, r3
   123ba:	d10c      	bne.n	123d6 <hash_test+0x30e>
            /* Recognized but no implementation compiled in. */
            exp_ret = HASH_TYPE_E;
   123bc:	23e8      	movs	r3, #232	; 0xe8
   123be:	425b      	negs	r3, r3
   123c0:	2286      	movs	r2, #134	; 0x86
   123c2:	0052      	lsls	r2, r2, #1
   123c4:	18ba      	adds	r2, r7, r2
   123c6:	6013      	str	r3, [r2, #0]
            j++;
   123c8:	1d7b      	adds	r3, r7, #5
   123ca:	33ff      	adds	r3, #255	; 0xff
   123cc:	681b      	ldr	r3, [r3, #0]
   123ce:	3301      	adds	r3, #1
   123d0:	1d7a      	adds	r2, r7, #5
   123d2:	32ff      	adds	r2, #255	; 0xff
   123d4:	6013      	str	r3, [r2, #0]
        }
        ret = wc_HashInit(&hash, typesGood[i]);
   123d6:	2318      	movs	r3, #24
   123d8:	18fa      	adds	r2, r7, r3
   123da:	2384      	movs	r3, #132	; 0x84
   123dc:	005b      	lsls	r3, r3, #1
   123de:	18fb      	adds	r3, r7, r3
   123e0:	681b      	ldr	r3, [r3, #0]
   123e2:	18d3      	adds	r3, r2, r3
   123e4:	781a      	ldrb	r2, [r3, #0]
   123e6:	2388      	movs	r3, #136	; 0x88
   123e8:	18fb      	adds	r3, r7, r3
   123ea:	0011      	movs	r1, r2
   123ec:	0018      	movs	r0, r3
   123ee:	f7f3 ff6b 	bl	62c8 <wc_HashInit>
   123f2:	0003      	movs	r3, r0
   123f4:	1c7a      	adds	r2, r7, #1
   123f6:	32ff      	adds	r2, #255	; 0xff
   123f8:	6013      	str	r3, [r2, #0]
        if (ret != exp_ret)
   123fa:	1c7b      	adds	r3, r7, #1
   123fc:	33ff      	adds	r3, #255	; 0xff
   123fe:	681a      	ldr	r2, [r3, #0]
   12400:	2386      	movs	r3, #134	; 0x86
   12402:	005b      	lsls	r3, r3, #1
   12404:	18fb      	adds	r3, r7, r3
   12406:	681b      	ldr	r3, [r3, #0]
   12408:	429a      	cmp	r2, r3
   1240a:	d007      	beq.n	1241c <hash_test+0x354>
            return -2937 - i;
   1240c:	2384      	movs	r3, #132	; 0x84
   1240e:	005b      	lsls	r3, r3, #1
   12410:	18fb      	adds	r3, r7, r3
   12412:	681b      	ldr	r3, [r3, #0]
   12414:	4a27      	ldr	r2, [pc, #156]	; (124b4 <hash_test+0x3ec>)
   12416:	1ad3      	subs	r3, r2, r3
   12418:	f000 fb79 	bl	12b0e <hash_test+0xa46>
        ret = wc_HashUpdate(&hash, typesGood[i], data, sizeof(data));
   1241c:	2318      	movs	r3, #24
   1241e:	18fa      	adds	r2, r7, r3
   12420:	2384      	movs	r3, #132	; 0x84
   12422:	005b      	lsls	r3, r3, #1
   12424:	18fb      	adds	r3, r7, r3
   12426:	681b      	ldr	r3, [r3, #0]
   12428:	18d3      	adds	r3, r2, r3
   1242a:	7819      	ldrb	r1, [r3, #0]
   1242c:	2360      	movs	r3, #96	; 0x60
   1242e:	18fa      	adds	r2, r7, r3
   12430:	2388      	movs	r3, #136	; 0x88
   12432:	18f8      	adds	r0, r7, r3
   12434:	2327      	movs	r3, #39	; 0x27
   12436:	f7f3 ff7b 	bl	6330 <wc_HashUpdate>
   1243a:	0003      	movs	r3, r0
   1243c:	1c7a      	adds	r2, r7, #1
   1243e:	32ff      	adds	r2, #255	; 0xff
   12440:	6013      	str	r3, [r2, #0]
        if (ret != exp_ret)
   12442:	1c7b      	adds	r3, r7, #1
   12444:	33ff      	adds	r3, #255	; 0xff
   12446:	681a      	ldr	r2, [r3, #0]
   12448:	2386      	movs	r3, #134	; 0x86
   1244a:	005b      	lsls	r3, r3, #1
   1244c:	18fb      	adds	r3, r7, r3
   1244e:	681b      	ldr	r3, [r3, #0]
   12450:	429a      	cmp	r2, r3
   12452:	d033      	beq.n	124bc <hash_test+0x3f4>
            return -2947 - i;
   12454:	2384      	movs	r3, #132	; 0x84
   12456:	005b      	lsls	r3, r3, #1
   12458:	18fb      	adds	r3, r7, r3
   1245a:	681b      	ldr	r3, [r3, #0]
   1245c:	4a16      	ldr	r2, [pc, #88]	; (124b8 <hash_test+0x3f0>)
   1245e:	1ad3      	subs	r3, r2, r3
   12460:	e355      	b.n	12b0e <hash_test+0xa46>
   12462:	46c0      	nop			; (mov r8, r8)
   12464:	0002d0a0 	.word	0x0002d0a0
   12468:	0002d0c8 	.word	0x0002d0c8
   1246c:	ffffff00 	.word	0xffffff00
   12470:	0002d0d0 	.word	0x0002d0d0
   12474:	fffffefc 	.word	0xfffffefc
   12478:	0002d0d8 	.word	0x0002d0d8
   1247c:	fffffef8 	.word	0xfffffef8
   12480:	0002d0dc 	.word	0x0002d0dc
   12484:	fffffef0 	.word	0xfffffef0
   12488:	0002d0e0 	.word	0x0002d0e0
   1248c:	fffff4ac 	.word	0xfffff4ac
   12490:	fffff4ab 	.word	0xfffff4ab
   12494:	fffff4aa 	.word	0xfffff4aa
   12498:	fffff4a9 	.word	0xfffff4a9
   1249c:	fffff4a8 	.word	0xfffff4a8
   124a0:	fffff4a7 	.word	0xfffff4a7
   124a4:	fffff4a6 	.word	0xfffff4a6
   124a8:	fffff4a5 	.word	0xfffff4a5
   124ac:	fffff49b 	.word	0xfffff49b
   124b0:	fffff491 	.word	0xfffff491
   124b4:	fffff487 	.word	0xfffff487
   124b8:	fffff47d 	.word	0xfffff47d
        ret = wc_HashFinal(&hash, typesGood[i], out);
   124bc:	2318      	movs	r3, #24
   124be:	18fa      	adds	r2, r7, r3
   124c0:	2384      	movs	r3, #132	; 0x84
   124c2:	005b      	lsls	r3, r3, #1
   124c4:	18fb      	adds	r3, r7, r3
   124c6:	681b      	ldr	r3, [r3, #0]
   124c8:	18d3      	adds	r3, r2, r3
   124ca:	7819      	ldrb	r1, [r3, #0]
   124cc:	2340      	movs	r3, #64	; 0x40
   124ce:	18fa      	adds	r2, r7, r3
   124d0:	2388      	movs	r3, #136	; 0x88
   124d2:	18fb      	adds	r3, r7, r3
   124d4:	0018      	movs	r0, r3
   124d6:	f7f3 ff6b 	bl	63b0 <wc_HashFinal>
   124da:	0003      	movs	r3, r0
   124dc:	1c7a      	adds	r2, r7, #1
   124de:	32ff      	adds	r2, #255	; 0xff
   124e0:	6013      	str	r3, [r2, #0]
        if (ret != exp_ret)
   124e2:	1c7b      	adds	r3, r7, #1
   124e4:	33ff      	adds	r3, #255	; 0xff
   124e6:	681a      	ldr	r2, [r3, #0]
   124e8:	2386      	movs	r3, #134	; 0x86
   124ea:	005b      	lsls	r3, r3, #1
   124ec:	18fb      	adds	r3, r7, r3
   124ee:	681b      	ldr	r3, [r3, #0]
   124f0:	429a      	cmp	r2, r3
   124f2:	d006      	beq.n	12502 <hash_test+0x43a>
            return -2957 - i;
   124f4:	2384      	movs	r3, #132	; 0x84
   124f6:	005b      	lsls	r3, r3, #1
   124f8:	18fb      	adds	r3, r7, r3
   124fa:	681b      	ldr	r3, [r3, #0]
   124fc:	4ad9      	ldr	r2, [pc, #868]	; (12864 <hash_test+0x79c>)
   124fe:	1ad3      	subs	r3, r2, r3
   12500:	e305      	b.n	12b0e <hash_test+0xa46>
        wc_HashFree(&hash, typesGood[i]);
   12502:	2318      	movs	r3, #24
   12504:	18fa      	adds	r2, r7, r3
   12506:	2384      	movs	r3, #132	; 0x84
   12508:	005b      	lsls	r3, r3, #1
   1250a:	18fb      	adds	r3, r7, r3
   1250c:	681b      	ldr	r3, [r3, #0]
   1250e:	18d3      	adds	r3, r2, r3
   12510:	781a      	ldrb	r2, [r3, #0]
   12512:	2388      	movs	r3, #136	; 0x88
   12514:	18fb      	adds	r3, r7, r3
   12516:	0011      	movs	r1, r2
   12518:	0018      	movs	r0, r3
   1251a:	f7f3 ff87 	bl	642c <wc_HashFree>

        digestSz = wc_HashGetDigestSize(typesGood[i]);
   1251e:	2318      	movs	r3, #24
   12520:	18fa      	adds	r2, r7, r3
   12522:	2384      	movs	r3, #132	; 0x84
   12524:	005b      	lsls	r3, r3, #1
   12526:	18fb      	adds	r3, r7, r3
   12528:	681b      	ldr	r3, [r3, #0]
   1252a:	18d3      	adds	r3, r2, r3
   1252c:	781b      	ldrb	r3, [r3, #0]
   1252e:	0018      	movs	r0, r3
   12530:	f7f3 fe3c 	bl	61ac <wc_HashGetDigestSize>
   12534:	0003      	movs	r3, r0
   12536:	22fc      	movs	r2, #252	; 0xfc
   12538:	18ba      	adds	r2, r7, r2
   1253a:	6013      	str	r3, [r2, #0]
        if (exp_ret < 0 && digestSz != exp_ret)
   1253c:	2386      	movs	r3, #134	; 0x86
   1253e:	005b      	lsls	r3, r3, #1
   12540:	18fb      	adds	r3, r7, r3
   12542:	681b      	ldr	r3, [r3, #0]
   12544:	2b00      	cmp	r3, #0
   12546:	da0f      	bge.n	12568 <hash_test+0x4a0>
   12548:	23fc      	movs	r3, #252	; 0xfc
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	681a      	ldr	r2, [r3, #0]
   1254e:	2386      	movs	r3, #134	; 0x86
   12550:	005b      	lsls	r3, r3, #1
   12552:	18fb      	adds	r3, r7, r3
   12554:	681b      	ldr	r3, [r3, #0]
   12556:	429a      	cmp	r2, r3
   12558:	d006      	beq.n	12568 <hash_test+0x4a0>
            return -2967 - i;
   1255a:	2384      	movs	r3, #132	; 0x84
   1255c:	005b      	lsls	r3, r3, #1
   1255e:	18fb      	adds	r3, r7, r3
   12560:	681b      	ldr	r3, [r3, #0]
   12562:	4ac1      	ldr	r2, [pc, #772]	; (12868 <hash_test+0x7a0>)
   12564:	1ad3      	subs	r3, r2, r3
   12566:	e2d2      	b.n	12b0e <hash_test+0xa46>
        if (exp_ret == 0 && digestSz < 0)
   12568:	2386      	movs	r3, #134	; 0x86
   1256a:	005b      	lsls	r3, r3, #1
   1256c:	18fb      	adds	r3, r7, r3
   1256e:	681b      	ldr	r3, [r3, #0]
   12570:	2b00      	cmp	r3, #0
   12572:	d10b      	bne.n	1258c <hash_test+0x4c4>
   12574:	23fc      	movs	r3, #252	; 0xfc
   12576:	18fb      	adds	r3, r7, r3
   12578:	681b      	ldr	r3, [r3, #0]
   1257a:	2b00      	cmp	r3, #0
   1257c:	da06      	bge.n	1258c <hash_test+0x4c4>
            return -2977 - i;
   1257e:	2384      	movs	r3, #132	; 0x84
   12580:	005b      	lsls	r3, r3, #1
   12582:	18fb      	adds	r3, r7, r3
   12584:	681b      	ldr	r3, [r3, #0]
   12586:	4ab9      	ldr	r2, [pc, #740]	; (1286c <hash_test+0x7a4>)
   12588:	1ad3      	subs	r3, r2, r3
   1258a:	e2c0      	b.n	12b0e <hash_test+0xa46>
        if (exp_ret == 0) {
   1258c:	2386      	movs	r3, #134	; 0x86
   1258e:	005b      	lsls	r3, r3, #1
   12590:	18fb      	adds	r3, r7, r3
   12592:	681b      	ldr	r3, [r3, #0]
   12594:	2b00      	cmp	r3, #0
   12596:	d124      	bne.n	125e2 <hash_test+0x51a>
            ret = wc_Hash(typesGood[i], data, sizeof(data), hashOut,
   12598:	2318      	movs	r3, #24
   1259a:	18fa      	adds	r2, r7, r3
   1259c:	2384      	movs	r3, #132	; 0x84
   1259e:	005b      	lsls	r3, r3, #1
   125a0:	18fb      	adds	r3, r7, r3
   125a2:	681b      	ldr	r3, [r3, #0]
   125a4:	18d3      	adds	r3, r2, r3
   125a6:	7818      	ldrb	r0, [r3, #0]
                                                                  digestSz - 1);
   125a8:	23fc      	movs	r3, #252	; 0xfc
   125aa:	18fb      	adds	r3, r7, r3
   125ac:	681b      	ldr	r3, [r3, #0]
   125ae:	3b01      	subs	r3, #1
        if (exp_ret < 0 && digestSz != exp_ret)
            return -2967 - i;
        if (exp_ret == 0 && digestSz < 0)
            return -2977 - i;
        if (exp_ret == 0) {
            ret = wc_Hash(typesGood[i], data, sizeof(data), hashOut,
   125b0:	001a      	movs	r2, r3
   125b2:	2320      	movs	r3, #32
   125b4:	18fb      	adds	r3, r7, r3
   125b6:	2160      	movs	r1, #96	; 0x60
   125b8:	1879      	adds	r1, r7, r1
   125ba:	9200      	str	r2, [sp, #0]
   125bc:	2227      	movs	r2, #39	; 0x27
   125be:	f7f3 fe3d 	bl	623c <wc_Hash>
   125c2:	0003      	movs	r3, r0
   125c4:	1c7a      	adds	r2, r7, #1
   125c6:	32ff      	adds	r2, #255	; 0xff
   125c8:	6013      	str	r3, [r2, #0]
                                                                  digestSz - 1);
            if (ret != BUFFER_E)
   125ca:	1c7b      	adds	r3, r7, #1
   125cc:	33ff      	adds	r3, #255	; 0xff
   125ce:	681b      	ldr	r3, [r3, #0]
   125d0:	3384      	adds	r3, #132	; 0x84
   125d2:	d006      	beq.n	125e2 <hash_test+0x51a>
                return -2987 - i;
   125d4:	2384      	movs	r3, #132	; 0x84
   125d6:	005b      	lsls	r3, r3, #1
   125d8:	18fb      	adds	r3, r7, r3
   125da:	681b      	ldr	r3, [r3, #0]
   125dc:	4aa4      	ldr	r2, [pc, #656]	; (12870 <hash_test+0x7a8>)
   125de:	1ad3      	subs	r3, r2, r3
   125e0:	e295      	b.n	12b0e <hash_test+0xa46>
        }
        ret = wc_Hash(typesGood[i], data, sizeof(data), hashOut, digestSz);
   125e2:	2318      	movs	r3, #24
   125e4:	18fa      	adds	r2, r7, r3
   125e6:	2384      	movs	r3, #132	; 0x84
   125e8:	005b      	lsls	r3, r3, #1
   125ea:	18fb      	adds	r3, r7, r3
   125ec:	681b      	ldr	r3, [r3, #0]
   125ee:	18d3      	adds	r3, r2, r3
   125f0:	7818      	ldrb	r0, [r3, #0]
   125f2:	23fc      	movs	r3, #252	; 0xfc
   125f4:	18fb      	adds	r3, r7, r3
   125f6:	681b      	ldr	r3, [r3, #0]
   125f8:	2220      	movs	r2, #32
   125fa:	18ba      	adds	r2, r7, r2
   125fc:	2160      	movs	r1, #96	; 0x60
   125fe:	1879      	adds	r1, r7, r1
   12600:	9300      	str	r3, [sp, #0]
   12602:	0013      	movs	r3, r2
   12604:	2227      	movs	r2, #39	; 0x27
   12606:	f7f3 fe19 	bl	623c <wc_Hash>
   1260a:	0003      	movs	r3, r0
   1260c:	1c7a      	adds	r2, r7, #1
   1260e:	32ff      	adds	r2, #255	; 0xff
   12610:	6013      	str	r3, [r2, #0]
        if (ret != exp_ret)
   12612:	1c7b      	adds	r3, r7, #1
   12614:	33ff      	adds	r3, #255	; 0xff
   12616:	681a      	ldr	r2, [r3, #0]
   12618:	2386      	movs	r3, #134	; 0x86
   1261a:	005b      	lsls	r3, r3, #1
   1261c:	18fb      	adds	r3, r7, r3
   1261e:	681b      	ldr	r3, [r3, #0]
   12620:	429a      	cmp	r2, r3
   12622:	d006      	beq.n	12632 <hash_test+0x56a>
            return -2997 - i;
   12624:	2384      	movs	r3, #132	; 0x84
   12626:	005b      	lsls	r3, r3, #1
   12628:	18fb      	adds	r3, r7, r3
   1262a:	681b      	ldr	r3, [r3, #0]
   1262c:	4a91      	ldr	r2, [pc, #580]	; (12874 <hash_test+0x7ac>)
   1262e:	1ad3      	subs	r3, r2, r3
   12630:	e26d      	b.n	12b0e <hash_test+0xa46>
        if (exp_ret == 0 && XMEMCMP(out, hashOut, digestSz) != 0)
   12632:	2386      	movs	r3, #134	; 0x86
   12634:	005b      	lsls	r3, r3, #1
   12636:	18fb      	adds	r3, r7, r3
   12638:	681b      	ldr	r3, [r3, #0]
   1263a:	2b00      	cmp	r3, #0
   1263c:	d112      	bne.n	12664 <hash_test+0x59c>
   1263e:	23fc      	movs	r3, #252	; 0xfc
   12640:	18fb      	adds	r3, r7, r3
   12642:	681a      	ldr	r2, [r3, #0]
   12644:	2320      	movs	r3, #32
   12646:	18f9      	adds	r1, r7, r3
   12648:	2340      	movs	r3, #64	; 0x40
   1264a:	18fb      	adds	r3, r7, r3
   1264c:	0018      	movs	r0, r3
   1264e:	f013 f83f 	bl	256d0 <memcmp>
   12652:	1e03      	subs	r3, r0, #0
   12654:	d006      	beq.n	12664 <hash_test+0x59c>
            return -3007 -i;
   12656:	2384      	movs	r3, #132	; 0x84
   12658:	005b      	lsls	r3, r3, #1
   1265a:	18fb      	adds	r3, r7, r3
   1265c:	681b      	ldr	r3, [r3, #0]
   1265e:	4a86      	ldr	r2, [pc, #536]	; (12878 <hash_test+0x7b0>)
   12660:	1ad3      	subs	r3, r2, r3
   12662:	e254      	b.n	12b0e <hash_test+0xa46>

        ret = wc_HashGetBlockSize(typesGood[i]);
   12664:	2318      	movs	r3, #24
   12666:	18fa      	adds	r2, r7, r3
   12668:	2384      	movs	r3, #132	; 0x84
   1266a:	005b      	lsls	r3, r3, #1
   1266c:	18fb      	adds	r3, r7, r3
   1266e:	681b      	ldr	r3, [r3, #0]
   12670:	18d3      	adds	r3, r2, r3
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	0018      	movs	r0, r3
   12676:	f7f3 fdbd 	bl	61f4 <wc_HashGetBlockSize>
   1267a:	0003      	movs	r3, r0
   1267c:	1c7a      	adds	r2, r7, #1
   1267e:	32ff      	adds	r2, #255	; 0xff
   12680:	6013      	str	r3, [r2, #0]
        if (exp_ret < 0 && ret != exp_ret)
   12682:	2386      	movs	r3, #134	; 0x86
   12684:	005b      	lsls	r3, r3, #1
   12686:	18fb      	adds	r3, r7, r3
   12688:	681b      	ldr	r3, [r3, #0]
   1268a:	2b00      	cmp	r3, #0
   1268c:	da0f      	bge.n	126ae <hash_test+0x5e6>
   1268e:	1c7b      	adds	r3, r7, #1
   12690:	33ff      	adds	r3, #255	; 0xff
   12692:	681a      	ldr	r2, [r3, #0]
   12694:	2386      	movs	r3, #134	; 0x86
   12696:	005b      	lsls	r3, r3, #1
   12698:	18fb      	adds	r3, r7, r3
   1269a:	681b      	ldr	r3, [r3, #0]
   1269c:	429a      	cmp	r2, r3
   1269e:	d006      	beq.n	126ae <hash_test+0x5e6>
            return -3008 - i;
   126a0:	2384      	movs	r3, #132	; 0x84
   126a2:	005b      	lsls	r3, r3, #1
   126a4:	18fb      	adds	r3, r7, r3
   126a6:	681b      	ldr	r3, [r3, #0]
   126a8:	4a74      	ldr	r2, [pc, #464]	; (1287c <hash_test+0x7b4>)
   126aa:	1ad3      	subs	r3, r2, r3
   126ac:	e22f      	b.n	12b0e <hash_test+0xa46>
        if (exp_ret == 0 && ret < 0)
   126ae:	2386      	movs	r3, #134	; 0x86
   126b0:	005b      	lsls	r3, r3, #1
   126b2:	18fb      	adds	r3, r7, r3
   126b4:	681b      	ldr	r3, [r3, #0]
   126b6:	2b00      	cmp	r3, #0
   126b8:	d10b      	bne.n	126d2 <hash_test+0x60a>
   126ba:	1c7b      	adds	r3, r7, #1
   126bc:	33ff      	adds	r3, #255	; 0xff
   126be:	681b      	ldr	r3, [r3, #0]
   126c0:	2b00      	cmp	r3, #0
   126c2:	da06      	bge.n	126d2 <hash_test+0x60a>
            return -3018 - i;
   126c4:	2384      	movs	r3, #132	; 0x84
   126c6:	005b      	lsls	r3, r3, #1
   126c8:	18fb      	adds	r3, r7, r3
   126ca:	681b      	ldr	r3, [r3, #0]
   126cc:	4a6c      	ldr	r2, [pc, #432]	; (12880 <hash_test+0x7b8>)
   126ce:	1ad3      	subs	r3, r2, r3
   126d0:	e21d      	b.n	12b0e <hash_test+0xa46>

#if !defined(NO_ASN) || !defined(NO_DH) || defined(HAVE_ECC)
        ret = wc_HashGetOID(typesGood[i]);
   126d2:	2318      	movs	r3, #24
   126d4:	18fa      	adds	r2, r7, r3
   126d6:	2384      	movs	r3, #132	; 0x84
   126d8:	005b      	lsls	r3, r3, #1
   126da:	18fb      	adds	r3, r7, r3
   126dc:	681b      	ldr	r3, [r3, #0]
   126de:	18d3      	adds	r3, r2, r3
   126e0:	781b      	ldrb	r3, [r3, #0]
   126e2:	0018      	movs	r0, r3
   126e4:	f7f3 fcfe 	bl	60e4 <wc_HashGetOID>
   126e8:	0003      	movs	r3, r0
   126ea:	1c7a      	adds	r2, r7, #1
   126ec:	32ff      	adds	r2, #255	; 0xff
   126ee:	6013      	str	r3, [r2, #0]
        if (ret == BAD_FUNC_ARG ||
   126f0:	1c7b      	adds	r3, r7, #1
   126f2:	33ff      	adds	r3, #255	; 0xff
   126f4:	681b      	ldr	r3, [r3, #0]
   126f6:	33ad      	adds	r3, #173	; 0xad
   126f8:	d015      	beq.n	12726 <hash_test+0x65e>
   126fa:	2386      	movs	r3, #134	; 0x86
   126fc:	005b      	lsls	r3, r3, #1
   126fe:	18fb      	adds	r3, r7, r3
   12700:	681b      	ldr	r3, [r3, #0]
   12702:	2b00      	cmp	r3, #0
   12704:	d104      	bne.n	12710 <hash_test+0x648>
                (exp_ret == 0 && ret == HASH_TYPE_E) ||
   12706:	1c7b      	adds	r3, r7, #1
   12708:	33ff      	adds	r3, #255	; 0xff
   1270a:	681b      	ldr	r3, [r3, #0]
   1270c:	33e8      	adds	r3, #232	; 0xe8
   1270e:	d00a      	beq.n	12726 <hash_test+0x65e>
   12710:	2386      	movs	r3, #134	; 0x86
   12712:	005b      	lsls	r3, r3, #1
   12714:	18fb      	adds	r3, r7, r3
   12716:	681b      	ldr	r3, [r3, #0]
   12718:	2b00      	cmp	r3, #0
   1271a:	d00b      	beq.n	12734 <hash_test+0x66c>
                (exp_ret != 0 && ret != HASH_TYPE_E)) {
   1271c:	1c7b      	adds	r3, r7, #1
   1271e:	33ff      	adds	r3, #255	; 0xff
   12720:	681b      	ldr	r3, [r3, #0]
   12722:	33e8      	adds	r3, #232	; 0xe8
   12724:	d006      	beq.n	12734 <hash_test+0x66c>
            return -3028 - i;
   12726:	2384      	movs	r3, #132	; 0x84
   12728:	005b      	lsls	r3, r3, #1
   1272a:	18fb      	adds	r3, r7, r3
   1272c:	681b      	ldr	r3, [r3, #0]
   1272e:	4a55      	ldr	r2, [pc, #340]	; (12884 <hash_test+0x7bc>)
   12730:	1ad3      	subs	r3, r2, r3
   12732:	e1ec      	b.n	12b0e <hash_test+0xa46>
        }

        hashType = wc_OidGetHash(ret);
   12734:	23fb      	movs	r3, #251	; 0xfb
   12736:	18fc      	adds	r4, r7, r3
   12738:	1c7b      	adds	r3, r7, #1
   1273a:	33ff      	adds	r3, #255	; 0xff
   1273c:	681b      	ldr	r3, [r3, #0]
   1273e:	0018      	movs	r0, r3
   12740:	f7f3 fcf6 	bl	6130 <wc_OidGetHash>
   12744:	0003      	movs	r3, r0
   12746:	7023      	strb	r3, [r4, #0]
        if (exp_ret < 0 && ret != exp_ret)
   12748:	2386      	movs	r3, #134	; 0x86
   1274a:	005b      	lsls	r3, r3, #1
   1274c:	18fb      	adds	r3, r7, r3
   1274e:	681b      	ldr	r3, [r3, #0]
   12750:	2b00      	cmp	r3, #0
   12752:	da0f      	bge.n	12774 <hash_test+0x6ac>
   12754:	1c7b      	adds	r3, r7, #1
   12756:	33ff      	adds	r3, #255	; 0xff
   12758:	681a      	ldr	r2, [r3, #0]
   1275a:	2386      	movs	r3, #134	; 0x86
   1275c:	005b      	lsls	r3, r3, #1
   1275e:	18fb      	adds	r3, r7, r3
   12760:	681b      	ldr	r3, [r3, #0]
   12762:	429a      	cmp	r2, r3
   12764:	d006      	beq.n	12774 <hash_test+0x6ac>
            return -3038 - i;
   12766:	2384      	movs	r3, #132	; 0x84
   12768:	005b      	lsls	r3, r3, #1
   1276a:	18fb      	adds	r3, r7, r3
   1276c:	681b      	ldr	r3, [r3, #0]
   1276e:	4a46      	ldr	r2, [pc, #280]	; (12888 <hash_test+0x7c0>)
   12770:	1ad3      	subs	r3, r2, r3
   12772:	e1cc      	b.n	12b0e <hash_test+0xa46>
        if (exp_ret == 0 && hashType != typesGood[i])
   12774:	2386      	movs	r3, #134	; 0x86
   12776:	005b      	lsls	r3, r3, #1
   12778:	18fb      	adds	r3, r7, r3
   1277a:	681b      	ldr	r3, [r3, #0]
   1277c:	2b00      	cmp	r3, #0
   1277e:	d113      	bne.n	127a8 <hash_test+0x6e0>
   12780:	2318      	movs	r3, #24
   12782:	18fa      	adds	r2, r7, r3
   12784:	2384      	movs	r3, #132	; 0x84
   12786:	005b      	lsls	r3, r3, #1
   12788:	18fb      	adds	r3, r7, r3
   1278a:	681b      	ldr	r3, [r3, #0]
   1278c:	18d3      	adds	r3, r2, r3
   1278e:	781b      	ldrb	r3, [r3, #0]
   12790:	22fb      	movs	r2, #251	; 0xfb
   12792:	18ba      	adds	r2, r7, r2
   12794:	7812      	ldrb	r2, [r2, #0]
   12796:	429a      	cmp	r2, r3
   12798:	d006      	beq.n	127a8 <hash_test+0x6e0>
            return -3048 - i;
   1279a:	2384      	movs	r3, #132	; 0x84
   1279c:	005b      	lsls	r3, r3, #1
   1279e:	18fb      	adds	r3, r7, r3
   127a0:	681b      	ldr	r3, [r3, #0]
   127a2:	4a3a      	ldr	r2, [pc, #232]	; (1288c <hash_test+0x7c4>)
   127a4:	1ad3      	subs	r3, r2, r3
   127a6:	e1b2      	b.n	12b0e <hash_test+0xa46>
            return -2927 - i;
        wc_HashFree(&hash, typesBad[i]);
    }

    /* Try valid hash algorithms. */
    for (i = 0, j = 0; i < (int)(sizeof(typesGood)/sizeof(*typesGood)); i++) {
   127a8:	2384      	movs	r3, #132	; 0x84
   127aa:	005b      	lsls	r3, r3, #1
   127ac:	18fb      	adds	r3, r7, r3
   127ae:	681b      	ldr	r3, [r3, #0]
   127b0:	3301      	adds	r3, #1
   127b2:	2284      	movs	r2, #132	; 0x84
   127b4:	0052      	lsls	r2, r2, #1
   127b6:	18ba      	adds	r2, r7, r2
   127b8:	6013      	str	r3, [r2, #0]
   127ba:	2384      	movs	r3, #132	; 0x84
   127bc:	005b      	lsls	r3, r3, #1
   127be:	18fb      	adds	r3, r7, r3
   127c0:	681b      	ldr	r3, [r3, #0]
   127c2:	2b05      	cmp	r3, #5
   127c4:	dc00      	bgt.n	127c8 <hash_test+0x700>
   127c6:	e5e0      	b.n	1238a <hash_test+0x2c2>
        if (exp_ret == 0 && hashType != typesGood[i])
            return -3048 - i;
#endif /* !defined(NO_ASN) || !defined(NO_DH) || defined(HAVE_ECC) */
    }

    for (i = 0; i < (int)(sizeof(typesHashBad)/sizeof(*typesHashBad)); i++) {
   127c8:	2300      	movs	r3, #0
   127ca:	2284      	movs	r2, #132	; 0x84
   127cc:	0052      	lsls	r2, r2, #1
   127ce:	18ba      	adds	r2, r7, r2
   127d0:	6013      	str	r3, [r2, #0]
   127d2:	e032      	b.n	1283a <hash_test+0x772>
        ret = wc_Hash(typesHashBad[i], data, sizeof(data), out, sizeof(out));
   127d4:	4b2e      	ldr	r3, [pc, #184]	; (12890 <hash_test+0x7c8>)
   127d6:	2288      	movs	r2, #136	; 0x88
   127d8:	0052      	lsls	r2, r2, #1
   127da:	18ba      	adds	r2, r7, r2
   127dc:	18d2      	adds	r2, r2, r3
   127de:	2384      	movs	r3, #132	; 0x84
   127e0:	005b      	lsls	r3, r3, #1
   127e2:	18fb      	adds	r3, r7, r3
   127e4:	681b      	ldr	r3, [r3, #0]
   127e6:	18d3      	adds	r3, r2, r3
   127e8:	7818      	ldrb	r0, [r3, #0]
   127ea:	2340      	movs	r3, #64	; 0x40
   127ec:	18fa      	adds	r2, r7, r3
   127ee:	2360      	movs	r3, #96	; 0x60
   127f0:	18f9      	adds	r1, r7, r3
   127f2:	2320      	movs	r3, #32
   127f4:	9300      	str	r3, [sp, #0]
   127f6:	0013      	movs	r3, r2
   127f8:	2227      	movs	r2, #39	; 0x27
   127fa:	f7f3 fd1f 	bl	623c <wc_Hash>
   127fe:	0003      	movs	r3, r0
   12800:	1c7a      	adds	r2, r7, #1
   12802:	32ff      	adds	r2, #255	; 0xff
   12804:	6013      	str	r3, [r2, #0]
        if (ret != BAD_FUNC_ARG && ret != BUFFER_E)
   12806:	1c7b      	adds	r3, r7, #1
   12808:	33ff      	adds	r3, #255	; 0xff
   1280a:	681b      	ldr	r3, [r3, #0]
   1280c:	33ad      	adds	r3, #173	; 0xad
   1280e:	d00b      	beq.n	12828 <hash_test+0x760>
   12810:	1c7b      	adds	r3, r7, #1
   12812:	33ff      	adds	r3, #255	; 0xff
   12814:	681b      	ldr	r3, [r3, #0]
   12816:	3384      	adds	r3, #132	; 0x84
   12818:	d006      	beq.n	12828 <hash_test+0x760>
            return -3058 - i;
   1281a:	2384      	movs	r3, #132	; 0x84
   1281c:	005b      	lsls	r3, r3, #1
   1281e:	18fb      	adds	r3, r7, r3
   12820:	681b      	ldr	r3, [r3, #0]
   12822:	4a1c      	ldr	r2, [pc, #112]	; (12894 <hash_test+0x7cc>)
   12824:	1ad3      	subs	r3, r2, r3
   12826:	e172      	b.n	12b0e <hash_test+0xa46>
        if (exp_ret == 0 && hashType != typesGood[i])
            return -3048 - i;
#endif /* !defined(NO_ASN) || !defined(NO_DH) || defined(HAVE_ECC) */
    }

    for (i = 0; i < (int)(sizeof(typesHashBad)/sizeof(*typesHashBad)); i++) {
   12828:	2384      	movs	r3, #132	; 0x84
   1282a:	005b      	lsls	r3, r3, #1
   1282c:	18fb      	adds	r3, r7, r3
   1282e:	681b      	ldr	r3, [r3, #0]
   12830:	3301      	adds	r3, #1
   12832:	2284      	movs	r2, #132	; 0x84
   12834:	0052      	lsls	r2, r2, #1
   12836:	18ba      	adds	r2, r7, r2
   12838:	6013      	str	r3, [r2, #0]
   1283a:	2384      	movs	r3, #132	; 0x84
   1283c:	005b      	lsls	r3, r3, #1
   1283e:	18fb      	adds	r3, r7, r3
   12840:	681b      	ldr	r3, [r3, #0]
   12842:	2b07      	cmp	r3, #7
   12844:	ddc6      	ble.n	127d4 <hash_test+0x70c>
        if (ret != BAD_FUNC_ARG && ret != BUFFER_E)
            return -3058 - i;
    }

#if !defined(NO_ASN) || !defined(NO_DH) || defined(HAVE_ECC)
    ret = wc_HashGetOID(WC_HASH_TYPE_MD2);
   12846:	2001      	movs	r0, #1
   12848:	f7f3 fc4c 	bl	60e4 <wc_HashGetOID>
   1284c:	0003      	movs	r3, r0
   1284e:	1c7a      	adds	r2, r7, #1
   12850:	32ff      	adds	r2, #255	; 0xff
   12852:	6013      	str	r3, [r2, #0]
#ifdef WOLFSSL_MD2
    if (ret == HASH_TYPE_E || ret == BAD_FUNC_ARG)
        return -3068;
#else
    if (ret != HASH_TYPE_E)
   12854:	1c7b      	adds	r3, r7, #1
   12856:	33ff      	adds	r3, #255	; 0xff
   12858:	681b      	ldr	r3, [r3, #0]
   1285a:	33e8      	adds	r3, #232	; 0xe8
   1285c:	d01e      	beq.n	1289c <hash_test+0x7d4>
        return -3069;
   1285e:	4b0e      	ldr	r3, [pc, #56]	; (12898 <hash_test+0x7d0>)
   12860:	e155      	b.n	12b0e <hash_test+0xa46>
   12862:	46c0      	nop			; (mov r8, r8)
   12864:	fffff473 	.word	0xfffff473
   12868:	fffff469 	.word	0xfffff469
   1286c:	fffff45f 	.word	0xfffff45f
   12870:	fffff455 	.word	0xfffff455
   12874:	fffff44b 	.word	0xfffff44b
   12878:	fffff441 	.word	0xfffff441
   1287c:	fffff440 	.word	0xfffff440
   12880:	fffff436 	.word	0xfffff436
   12884:	fffff42c 	.word	0xfffff42c
   12888:	fffff422 	.word	0xfffff422
   1288c:	fffff418 	.word	0xfffff418
   12890:	fffffef0 	.word	0xfffffef0
   12894:	fffff40e 	.word	0xfffff40e
   12898:	fffff403 	.word	0xfffff403
#endif
    hashType = wc_OidGetHash(646); /* Md2h */
   1289c:	23fb      	movs	r3, #251	; 0xfb
   1289e:	18fc      	adds	r4, r7, r3
   128a0:	4b9d      	ldr	r3, [pc, #628]	; (12b18 <hash_test+0xa50>)
   128a2:	0018      	movs	r0, r3
   128a4:	f7f3 fc44 	bl	6130 <wc_OidGetHash>
   128a8:	0003      	movs	r3, r0
   128aa:	7023      	strb	r3, [r4, #0]
#ifdef WOLFSSL_MD2
    if (hashType != WC_HASH_TYPE_MD2)
        return -3070;
#else
    if (hashType != WC_HASH_TYPE_NONE)
   128ac:	23fb      	movs	r3, #251	; 0xfb
   128ae:	18fb      	adds	r3, r7, r3
   128b0:	781b      	ldrb	r3, [r3, #0]
   128b2:	2b00      	cmp	r3, #0
   128b4:	d001      	beq.n	128ba <hash_test+0x7f2>
        return -3071;
   128b6:	4b99      	ldr	r3, [pc, #612]	; (12b1c <hash_test+0xa54>)
   128b8:	e129      	b.n	12b0e <hash_test+0xa46>
#endif

    ret = wc_HashGetOID(WC_HASH_TYPE_MD5_SHA);
   128ba:	2009      	movs	r0, #9
   128bc:	f7f3 fc12 	bl	60e4 <wc_HashGetOID>
   128c0:	0003      	movs	r3, r0
   128c2:	1c7a      	adds	r2, r7, #1
   128c4:	32ff      	adds	r2, #255	; 0xff
   128c6:	6013      	str	r3, [r2, #0]
#ifndef NO_MD5
    if (ret == HASH_TYPE_E || ret == BAD_FUNC_ARG)
        return -3072;
#else
    if (ret != HASH_TYPE_E)
   128c8:	1c7b      	adds	r3, r7, #1
   128ca:	33ff      	adds	r3, #255	; 0xff
   128cc:	681b      	ldr	r3, [r3, #0]
   128ce:	33e8      	adds	r3, #232	; 0xe8
   128d0:	d001      	beq.n	128d6 <hash_test+0x80e>
        return -3073;
   128d2:	4b93      	ldr	r3, [pc, #588]	; (12b20 <hash_test+0xa58>)
   128d4:	e11b      	b.n	12b0e <hash_test+0xa46>
#endif
    ret = wc_HashGetOID(WC_HASH_TYPE_MD4);
   128d6:	2002      	movs	r0, #2
   128d8:	f7f3 fc04 	bl	60e4 <wc_HashGetOID>
   128dc:	0003      	movs	r3, r0
   128de:	1c7a      	adds	r2, r7, #1
   128e0:	32ff      	adds	r2, #255	; 0xff
   128e2:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   128e4:	1c7b      	adds	r3, r7, #1
   128e6:	33ff      	adds	r3, #255	; 0xff
   128e8:	681b      	ldr	r3, [r3, #0]
   128ea:	33ad      	adds	r3, #173	; 0xad
   128ec:	d001      	beq.n	128f2 <hash_test+0x82a>
        return -3074;
   128ee:	4b8d      	ldr	r3, [pc, #564]	; (12b24 <hash_test+0xa5c>)
   128f0:	e10d      	b.n	12b0e <hash_test+0xa46>
    ret = wc_HashGetOID(WC_HASH_TYPE_NONE);
   128f2:	2000      	movs	r0, #0
   128f4:	f7f3 fbf6 	bl	60e4 <wc_HashGetOID>
   128f8:	0003      	movs	r3, r0
   128fa:	1c7a      	adds	r2, r7, #1
   128fc:	32ff      	adds	r2, #255	; 0xff
   128fe:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   12900:	1c7b      	adds	r3, r7, #1
   12902:	33ff      	adds	r3, #255	; 0xff
   12904:	681b      	ldr	r3, [r3, #0]
   12906:	33ad      	adds	r3, #173	; 0xad
   12908:	d001      	beq.n	1290e <hash_test+0x846>
        return -3075;
   1290a:	4b87      	ldr	r3, [pc, #540]	; (12b28 <hash_test+0xa60>)
   1290c:	e0ff      	b.n	12b0e <hash_test+0xa46>

    hashType = wc_OidGetHash(0);
   1290e:	23fb      	movs	r3, #251	; 0xfb
   12910:	18fc      	adds	r4, r7, r3
   12912:	2000      	movs	r0, #0
   12914:	f7f3 fc0c 	bl	6130 <wc_OidGetHash>
   12918:	0003      	movs	r3, r0
   1291a:	7023      	strb	r3, [r4, #0]
    if (hashType != WC_HASH_TYPE_NONE)
   1291c:	23fb      	movs	r3, #251	; 0xfb
   1291e:	18fb      	adds	r3, r7, r3
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b00      	cmp	r3, #0
   12924:	d001      	beq.n	1292a <hash_test+0x862>
        return -3076;
   12926:	4b81      	ldr	r3, [pc, #516]	; (12b2c <hash_test+0xa64>)
   12928:	e0f1      	b.n	12b0e <hash_test+0xa46>
#endif /* !defined(NO_ASN) || !defined(NO_DH) || defined(HAVE_ECC) */

    ret = wc_HashGetBlockSize(WC_HASH_TYPE_MD2);
   1292a:	2001      	movs	r0, #1
   1292c:	f7f3 fc62 	bl	61f4 <wc_HashGetBlockSize>
   12930:	0003      	movs	r3, r0
   12932:	1c7a      	adds	r2, r7, #1
   12934:	32ff      	adds	r2, #255	; 0xff
   12936:	6013      	str	r3, [r2, #0]
#ifdef WOLFSSL_MD2
    if (ret == HASH_TYPE_E || ret == BAD_FUNC_ARG)
        return -3077;
#else
    if (ret != HASH_TYPE_E)
   12938:	1c7b      	adds	r3, r7, #1
   1293a:	33ff      	adds	r3, #255	; 0xff
   1293c:	681b      	ldr	r3, [r3, #0]
   1293e:	33e8      	adds	r3, #232	; 0xe8
   12940:	d001      	beq.n	12946 <hash_test+0x87e>
        return -3078;
   12942:	4b7b      	ldr	r3, [pc, #492]	; (12b30 <hash_test+0xa68>)
   12944:	e0e3      	b.n	12b0e <hash_test+0xa46>
#endif
    ret = wc_HashGetDigestSize(WC_HASH_TYPE_MD2);
   12946:	2001      	movs	r0, #1
   12948:	f7f3 fc30 	bl	61ac <wc_HashGetDigestSize>
   1294c:	0003      	movs	r3, r0
   1294e:	1c7a      	adds	r2, r7, #1
   12950:	32ff      	adds	r2, #255	; 0xff
   12952:	6013      	str	r3, [r2, #0]
#ifdef WOLFSSL_MD2
    if (ret == HASH_TYPE_E || ret == BAD_FUNC_ARG)
        return -3079;
#else
    if (ret != HASH_TYPE_E)
   12954:	1c7b      	adds	r3, r7, #1
   12956:	33ff      	adds	r3, #255	; 0xff
   12958:	681b      	ldr	r3, [r3, #0]
   1295a:	33e8      	adds	r3, #232	; 0xe8
   1295c:	d001      	beq.n	12962 <hash_test+0x89a>
        return -3080;
   1295e:	4b75      	ldr	r3, [pc, #468]	; (12b34 <hash_test+0xa6c>)
   12960:	e0d5      	b.n	12b0e <hash_test+0xa46>
#endif

    ret = wc_HashGetBlockSize(WC_HASH_TYPE_MD4);
   12962:	2002      	movs	r0, #2
   12964:	f7f3 fc46 	bl	61f4 <wc_HashGetBlockSize>
   12968:	0003      	movs	r3, r0
   1296a:	1c7a      	adds	r2, r7, #1
   1296c:	32ff      	adds	r2, #255	; 0xff
   1296e:	6013      	str	r3, [r2, #0]
#ifndef NO_MD4
    if (ret == HASH_TYPE_E || ret == BAD_FUNC_ARG)
        return -3081;
#else
    if (ret != HASH_TYPE_E)
   12970:	1c7b      	adds	r3, r7, #1
   12972:	33ff      	adds	r3, #255	; 0xff
   12974:	681b      	ldr	r3, [r3, #0]
   12976:	33e8      	adds	r3, #232	; 0xe8
   12978:	d001      	beq.n	1297e <hash_test+0x8b6>
        return -3082;
   1297a:	4b6f      	ldr	r3, [pc, #444]	; (12b38 <hash_test+0xa70>)
   1297c:	e0c7      	b.n	12b0e <hash_test+0xa46>
#endif
    ret = wc_HashGetDigestSize(WC_HASH_TYPE_MD4);
   1297e:	2002      	movs	r0, #2
   12980:	f7f3 fc14 	bl	61ac <wc_HashGetDigestSize>
   12984:	0003      	movs	r3, r0
   12986:	1c7a      	adds	r2, r7, #1
   12988:	32ff      	adds	r2, #255	; 0xff
   1298a:	6013      	str	r3, [r2, #0]
#ifndef NO_MD4
    if (ret == HASH_TYPE_E || ret == BAD_FUNC_ARG)
        return -3083;
#else
    if (ret != HASH_TYPE_E)
   1298c:	1c7b      	adds	r3, r7, #1
   1298e:	33ff      	adds	r3, #255	; 0xff
   12990:	681b      	ldr	r3, [r3, #0]
   12992:	33e8      	adds	r3, #232	; 0xe8
   12994:	d001      	beq.n	1299a <hash_test+0x8d2>
        return -3084;
   12996:	4b69      	ldr	r3, [pc, #420]	; (12b3c <hash_test+0xa74>)
   12998:	e0b9      	b.n	12b0e <hash_test+0xa46>
#endif
    ret = wc_HashGetBlockSize(WC_HASH_TYPE_MD5_SHA);
   1299a:	2009      	movs	r0, #9
   1299c:	f7f3 fc2a 	bl	61f4 <wc_HashGetBlockSize>
   129a0:	0003      	movs	r3, r0
   129a2:	1c7a      	adds	r2, r7, #1
   129a4:	32ff      	adds	r2, #255	; 0xff
   129a6:	6013      	str	r3, [r2, #0]
#if !defined(NO_MD5) && !defined(NO_SHA)
    if (ret == HASH_TYPE_E || ret == BAD_FUNC_ARG)
        return -3085;
#else
    if (ret != HASH_TYPE_E)
   129a8:	1c7b      	adds	r3, r7, #1
   129aa:	33ff      	adds	r3, #255	; 0xff
   129ac:	681b      	ldr	r3, [r3, #0]
   129ae:	33e8      	adds	r3, #232	; 0xe8
   129b0:	d001      	beq.n	129b6 <hash_test+0x8ee>
        return -3086;
   129b2:	4b63      	ldr	r3, [pc, #396]	; (12b40 <hash_test+0xa78>)
   129b4:	e0ab      	b.n	12b0e <hash_test+0xa46>
#endif

    for (i = 0; i < (int)(sizeof(typesSha3)/sizeof(*typesSha3)); i++) {
   129b6:	2300      	movs	r3, #0
   129b8:	2284      	movs	r2, #132	; 0x84
   129ba:	0052      	lsls	r2, r2, #1
   129bc:	18ba      	adds	r2, r7, r2
   129be:	6013      	str	r3, [r2, #0]
   129c0:	e03a      	b.n	12a38 <hash_test+0x970>
        ret = wc_HashGetBlockSize(typesSha3[i]);
   129c2:	4b60      	ldr	r3, [pc, #384]	; (12b44 <hash_test+0xa7c>)
   129c4:	2288      	movs	r2, #136	; 0x88
   129c6:	0052      	lsls	r2, r2, #1
   129c8:	18ba      	adds	r2, r7, r2
   129ca:	18d2      	adds	r2, r2, r3
   129cc:	2384      	movs	r3, #132	; 0x84
   129ce:	005b      	lsls	r3, r3, #1
   129d0:	18fb      	adds	r3, r7, r3
   129d2:	681b      	ldr	r3, [r3, #0]
   129d4:	18d3      	adds	r3, r2, r3
   129d6:	781b      	ldrb	r3, [r3, #0]
   129d8:	0018      	movs	r0, r3
   129da:	f7f3 fc0b 	bl	61f4 <wc_HashGetBlockSize>
   129de:	0003      	movs	r3, r0
   129e0:	1c7a      	adds	r2, r7, #1
   129e2:	32ff      	adds	r2, #255	; 0xff
   129e4:	6013      	str	r3, [r2, #0]
    #ifdef WOLFSSL_SHA3
        if (ret == HASH_TYPE_E || ret == BAD_FUNC_ARG)
            return -3087;
    #else
        if (ret != HASH_TYPE_E)
   129e6:	1c7b      	adds	r3, r7, #1
   129e8:	33ff      	adds	r3, #255	; 0xff
   129ea:	681b      	ldr	r3, [r3, #0]
   129ec:	33e8      	adds	r3, #232	; 0xe8
   129ee:	d001      	beq.n	129f4 <hash_test+0x92c>
            return -3088;
   129f0:	4b55      	ldr	r3, [pc, #340]	; (12b48 <hash_test+0xa80>)
   129f2:	e08c      	b.n	12b0e <hash_test+0xa46>
    #endif
        ret = wc_HashGetDigestSize(typesSha3[i]);
   129f4:	4b53      	ldr	r3, [pc, #332]	; (12b44 <hash_test+0xa7c>)
   129f6:	2288      	movs	r2, #136	; 0x88
   129f8:	0052      	lsls	r2, r2, #1
   129fa:	18ba      	adds	r2, r7, r2
   129fc:	18d2      	adds	r2, r2, r3
   129fe:	2384      	movs	r3, #132	; 0x84
   12a00:	005b      	lsls	r3, r3, #1
   12a02:	18fb      	adds	r3, r7, r3
   12a04:	681b      	ldr	r3, [r3, #0]
   12a06:	18d3      	adds	r3, r2, r3
   12a08:	781b      	ldrb	r3, [r3, #0]
   12a0a:	0018      	movs	r0, r3
   12a0c:	f7f3 fbce 	bl	61ac <wc_HashGetDigestSize>
   12a10:	0003      	movs	r3, r0
   12a12:	1c7a      	adds	r2, r7, #1
   12a14:	32ff      	adds	r2, #255	; 0xff
   12a16:	6013      	str	r3, [r2, #0]
    #ifdef WOLFSSL_SHA3
        if (ret == HASH_TYPE_E || ret == BAD_FUNC_ARG)
            return -3089;
    #else
        if (ret != HASH_TYPE_E)
   12a18:	1c7b      	adds	r3, r7, #1
   12a1a:	33ff      	adds	r3, #255	; 0xff
   12a1c:	681b      	ldr	r3, [r3, #0]
   12a1e:	33e8      	adds	r3, #232	; 0xe8
   12a20:	d001      	beq.n	12a26 <hash_test+0x95e>
            return -3090;
   12a22:	4b4a      	ldr	r3, [pc, #296]	; (12b4c <hash_test+0xa84>)
   12a24:	e073      	b.n	12b0e <hash_test+0xa46>
#else
    if (ret != HASH_TYPE_E)
        return -3086;
#endif

    for (i = 0; i < (int)(sizeof(typesSha3)/sizeof(*typesSha3)); i++) {
   12a26:	2384      	movs	r3, #132	; 0x84
   12a28:	005b      	lsls	r3, r3, #1
   12a2a:	18fb      	adds	r3, r7, r3
   12a2c:	681b      	ldr	r3, [r3, #0]
   12a2e:	3301      	adds	r3, #1
   12a30:	2284      	movs	r2, #132	; 0x84
   12a32:	0052      	lsls	r2, r2, #1
   12a34:	18ba      	adds	r2, r7, r2
   12a36:	6013      	str	r3, [r2, #0]
   12a38:	2384      	movs	r3, #132	; 0x84
   12a3a:	005b      	lsls	r3, r3, #1
   12a3c:	18fb      	adds	r3, r7, r3
   12a3e:	681b      	ldr	r3, [r3, #0]
   12a40:	2b03      	cmp	r3, #3
   12a42:	ddbe      	ble.n	129c2 <hash_test+0x8fa>
        if (ret != HASH_TYPE_E)
            return -3090;
    #endif
    }

    ret = wc_HashGetBlockSize(WC_HASH_TYPE_BLAKE2B);
   12a44:	200e      	movs	r0, #14
   12a46:	f7f3 fbd5 	bl	61f4 <wc_HashGetBlockSize>
   12a4a:	0003      	movs	r3, r0
   12a4c:	1c7a      	adds	r2, r7, #1
   12a4e:	32ff      	adds	r2, #255	; 0xff
   12a50:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   12a52:	1c7b      	adds	r3, r7, #1
   12a54:	33ff      	adds	r3, #255	; 0xff
   12a56:	681b      	ldr	r3, [r3, #0]
   12a58:	33ad      	adds	r3, #173	; 0xad
   12a5a:	d001      	beq.n	12a60 <hash_test+0x998>
        return -3091;
   12a5c:	4b3c      	ldr	r3, [pc, #240]	; (12b50 <hash_test+0xa88>)
   12a5e:	e056      	b.n	12b0e <hash_test+0xa46>
    ret = wc_HashGetDigestSize(WC_HASH_TYPE_BLAKE2B);
   12a60:	200e      	movs	r0, #14
   12a62:	f7f3 fba3 	bl	61ac <wc_HashGetDigestSize>
   12a66:	0003      	movs	r3, r0
   12a68:	1c7a      	adds	r2, r7, #1
   12a6a:	32ff      	adds	r2, #255	; 0xff
   12a6c:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   12a6e:	1c7b      	adds	r3, r7, #1
   12a70:	33ff      	adds	r3, #255	; 0xff
   12a72:	681b      	ldr	r3, [r3, #0]
   12a74:	33ad      	adds	r3, #173	; 0xad
   12a76:	d001      	beq.n	12a7c <hash_test+0x9b4>
        return -3092;
   12a78:	4b36      	ldr	r3, [pc, #216]	; (12b54 <hash_test+0xa8c>)
   12a7a:	e048      	b.n	12b0e <hash_test+0xa46>

    ret = wc_HashGetBlockSize(WC_HASH_TYPE_NONE);
   12a7c:	2000      	movs	r0, #0
   12a7e:	f7f3 fbb9 	bl	61f4 <wc_HashGetBlockSize>
   12a82:	0003      	movs	r3, r0
   12a84:	1c7a      	adds	r2, r7, #1
   12a86:	32ff      	adds	r2, #255	; 0xff
   12a88:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   12a8a:	1c7b      	adds	r3, r7, #1
   12a8c:	33ff      	adds	r3, #255	; 0xff
   12a8e:	681b      	ldr	r3, [r3, #0]
   12a90:	33ad      	adds	r3, #173	; 0xad
   12a92:	d001      	beq.n	12a98 <hash_test+0x9d0>
        return -3093;
   12a94:	4b30      	ldr	r3, [pc, #192]	; (12b58 <hash_test+0xa90>)
   12a96:	e03a      	b.n	12b0e <hash_test+0xa46>
    ret = wc_HashGetDigestSize(WC_HASH_TYPE_NONE);
   12a98:	2000      	movs	r0, #0
   12a9a:	f7f3 fb87 	bl	61ac <wc_HashGetDigestSize>
   12a9e:	0003      	movs	r3, r0
   12aa0:	1c7a      	adds	r2, r7, #1
   12aa2:	32ff      	adds	r2, #255	; 0xff
   12aa4:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   12aa6:	1c7b      	adds	r3, r7, #1
   12aa8:	33ff      	adds	r3, #255	; 0xff
   12aaa:	681b      	ldr	r3, [r3, #0]
   12aac:	33ad      	adds	r3, #173	; 0xad
   12aae:	d001      	beq.n	12ab4 <hash_test+0x9ec>
        return -3094;
   12ab0:	4b2a      	ldr	r3, [pc, #168]	; (12b5c <hash_test+0xa94>)
   12ab2:	e02c      	b.n	12b0e <hash_test+0xa46>
    ret = wc_GetCTC_HashOID(WC_MD5);
    if (ret == 0)
        return -3096;
#endif
#ifndef NO_SHA
    ret = wc_GetCTC_HashOID(WC_SHA);
   12ab4:	2004      	movs	r0, #4
   12ab6:	f7f4 fd19 	bl	74ec <wc_GetCTC_HashOID>
   12aba:	0003      	movs	r3, r0
   12abc:	1c7a      	adds	r2, r7, #1
   12abe:	32ff      	adds	r2, #255	; 0xff
   12ac0:	6013      	str	r3, [r2, #0]
    if (ret == 0)
   12ac2:	1c7b      	adds	r3, r7, #1
   12ac4:	33ff      	adds	r3, #255	; 0xff
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	2b00      	cmp	r3, #0
   12aca:	d101      	bne.n	12ad0 <hash_test+0xa08>
        return -3097;
   12acc:	4b24      	ldr	r3, [pc, #144]	; (12b60 <hash_test+0xa98>)
   12ace:	e01e      	b.n	12b0e <hash_test+0xa46>
    ret = wc_GetCTC_HashOID(WC_SHA224);
    if (ret == 0)
        return -3098;
#endif
#ifndef NO_SHA256
    ret = wc_GetCTC_HashOID(WC_SHA256);
   12ad0:	2006      	movs	r0, #6
   12ad2:	f7f4 fd0b 	bl	74ec <wc_GetCTC_HashOID>
   12ad6:	0003      	movs	r3, r0
   12ad8:	1c7a      	adds	r2, r7, #1
   12ada:	32ff      	adds	r2, #255	; 0xff
   12adc:	6013      	str	r3, [r2, #0]
    if (ret == 0)
   12ade:	1c7b      	adds	r3, r7, #1
   12ae0:	33ff      	adds	r3, #255	; 0xff
   12ae2:	681b      	ldr	r3, [r3, #0]
   12ae4:	2b00      	cmp	r3, #0
   12ae6:	d101      	bne.n	12aec <hash_test+0xa24>
        return -3099;
   12ae8:	4b1e      	ldr	r3, [pc, #120]	; (12b64 <hash_test+0xa9c>)
   12aea:	e010      	b.n	12b0e <hash_test+0xa46>
#ifdef WOLFSSL_SHA512
    ret = wc_GetCTC_HashOID(WC_SHA512);
    if (ret == 0)
        return -3101;
#endif
    ret = wc_GetCTC_HashOID(-1);
   12aec:	2301      	movs	r3, #1
   12aee:	425b      	negs	r3, r3
   12af0:	0018      	movs	r0, r3
   12af2:	f7f4 fcfb 	bl	74ec <wc_GetCTC_HashOID>
   12af6:	0003      	movs	r3, r0
   12af8:	1c7a      	adds	r2, r7, #1
   12afa:	32ff      	adds	r2, #255	; 0xff
   12afc:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   12afe:	1c7b      	adds	r3, r7, #1
   12b00:	33ff      	adds	r3, #255	; 0xff
   12b02:	681b      	ldr	r3, [r3, #0]
   12b04:	2b00      	cmp	r3, #0
   12b06:	d001      	beq.n	12b0c <hash_test+0xa44>
        return -3102;
   12b08:	4b17      	ldr	r3, [pc, #92]	; (12b68 <hash_test+0xaa0>)
   12b0a:	e000      	b.n	12b0e <hash_test+0xa46>
#endif

    return 0;
   12b0c:	2300      	movs	r3, #0
}
   12b0e:	0018      	movs	r0, r3
   12b10:	46bd      	mov	sp, r7
   12b12:	b045      	add	sp, #276	; 0x114
   12b14:	bd90      	pop	{r4, r7, pc}
   12b16:	46c0      	nop			; (mov r8, r8)
   12b18:	00000286 	.word	0x00000286
   12b1c:	fffff401 	.word	0xfffff401
   12b20:	fffff3ff 	.word	0xfffff3ff
   12b24:	fffff3fe 	.word	0xfffff3fe
   12b28:	fffff3fd 	.word	0xfffff3fd
   12b2c:	fffff3fc 	.word	0xfffff3fc
   12b30:	fffff3fa 	.word	0xfffff3fa
   12b34:	fffff3f8 	.word	0xfffff3f8
   12b38:	fffff3f6 	.word	0xfffff3f6
   12b3c:	fffff3f4 	.word	0xfffff3f4
   12b40:	fffff3f2 	.word	0xfffff3f2
   12b44:	fffffef8 	.word	0xfffffef8
   12b48:	fffff3f0 	.word	0xfffff3f0
   12b4c:	fffff3ee 	.word	0xfffff3ee
   12b50:	fffff3ed 	.word	0xfffff3ed
   12b54:	fffff3ec 	.word	0xfffff3ec
   12b58:	fffff3eb 	.word	0xfffff3eb
   12b5c:	fffff3ea 	.word	0xfffff3ea
   12b60:	fffff3e7 	.word	0xfffff3e7
   12b64:	fffff3e5 	.word	0xfffff3e5
   12b68:	fffff3e2 	.word	0xfffff3e2

00012b6c <hmac_sha_test>:
}
#endif /* NO_HMAC && NO_MD5 */

#if !defined(NO_HMAC) && !defined(NO_SHA)
int hmac_sha_test(void)
{
   12b6c:	b590      	push	{r4, r7, lr}
   12b6e:	b0eb      	sub	sp, #428	; 0x1ac
   12b70:	af00      	add	r7, sp, #0
    Hmac hmac;
    byte hash[WC_SHA_DIGEST_SIZE];

    const char* keys[]=
   12b72:	4bc0      	ldr	r3, [pc, #768]	; (12e74 <hmac_sha_test+0x308>)
   12b74:	22d4      	movs	r2, #212	; 0xd4
   12b76:	0052      	lsls	r2, r2, #1
   12b78:	4694      	mov	ip, r2
   12b7a:	44bc      	add	ip, r7
   12b7c:	4463      	add	r3, ip
   12b7e:	4abe      	ldr	r2, [pc, #760]	; (12e78 <hmac_sha_test+0x30c>)
   12b80:	ca13      	ldmia	r2!, {r0, r1, r4}
   12b82:	c313      	stmia	r3!, {r0, r1, r4}

    testVector a, b, c;
    testVector test_hmac[3];

    int ret;
    int times = sizeof(test_hmac) / sizeof(testVector), i;
   12b84:	2303      	movs	r3, #3
   12b86:	22d0      	movs	r2, #208	; 0xd0
   12b88:	0052      	lsls	r2, r2, #1
   12b8a:	18ba      	adds	r2, r7, r2
   12b8c:	6013      	str	r3, [r2, #0]

    a.input  = "Hi There";
   12b8e:	4bbb      	ldr	r3, [pc, #748]	; (12e7c <hmac_sha_test+0x310>)
   12b90:	22d4      	movs	r2, #212	; 0xd4
   12b92:	0052      	lsls	r2, r2, #1
   12b94:	4694      	mov	ip, r2
   12b96:	44bc      	add	ip, r7
   12b98:	4463      	add	r3, ip
   12b9a:	4ab9      	ldr	r2, [pc, #740]	; (12e80 <hmac_sha_test+0x314>)
   12b9c:	601a      	str	r2, [r3, #0]
    a.output = "\xb6\x17\x31\x86\x55\x05\x72\x64\xe2\x8b\xc0\xb6\xfb\x37\x8c"
   12b9e:	4bb7      	ldr	r3, [pc, #732]	; (12e7c <hmac_sha_test+0x310>)
   12ba0:	22d4      	movs	r2, #212	; 0xd4
   12ba2:	0052      	lsls	r2, r2, #1
   12ba4:	4694      	mov	ip, r2
   12ba6:	44bc      	add	ip, r7
   12ba8:	4463      	add	r3, ip
   12baa:	4ab6      	ldr	r2, [pc, #728]	; (12e84 <hmac_sha_test+0x318>)
   12bac:	605a      	str	r2, [r3, #4]
               "\x8e\xf1\x46\xbe\x00";
    a.inLen  = XSTRLEN(a.input);
   12bae:	4bb3      	ldr	r3, [pc, #716]	; (12e7c <hmac_sha_test+0x310>)
   12bb0:	22d4      	movs	r2, #212	; 0xd4
   12bb2:	0052      	lsls	r2, r2, #1
   12bb4:	4694      	mov	ip, r2
   12bb6:	44bc      	add	ip, r7
   12bb8:	4463      	add	r3, ip
   12bba:	681b      	ldr	r3, [r3, #0]
   12bbc:	0018      	movs	r0, r3
   12bbe:	f013 fbf7 	bl	263b0 <strlen>
   12bc2:	0002      	movs	r2, r0
   12bc4:	4bad      	ldr	r3, [pc, #692]	; (12e7c <hmac_sha_test+0x310>)
   12bc6:	21d4      	movs	r1, #212	; 0xd4
   12bc8:	0049      	lsls	r1, r1, #1
   12bca:	468c      	mov	ip, r1
   12bcc:	44bc      	add	ip, r7
   12bce:	4463      	add	r3, ip
   12bd0:	609a      	str	r2, [r3, #8]
    a.outLen = WC_SHA_DIGEST_SIZE;
   12bd2:	4baa      	ldr	r3, [pc, #680]	; (12e7c <hmac_sha_test+0x310>)
   12bd4:	22d4      	movs	r2, #212	; 0xd4
   12bd6:	0052      	lsls	r2, r2, #1
   12bd8:	4694      	mov	ip, r2
   12bda:	44bc      	add	ip, r7
   12bdc:	4463      	add	r3, ip
   12bde:	2214      	movs	r2, #20
   12be0:	60da      	str	r2, [r3, #12]

    b.input  = "what do ya want for nothing?";
   12be2:	4ba9      	ldr	r3, [pc, #676]	; (12e88 <hmac_sha_test+0x31c>)
   12be4:	22d4      	movs	r2, #212	; 0xd4
   12be6:	0052      	lsls	r2, r2, #1
   12be8:	4694      	mov	ip, r2
   12bea:	44bc      	add	ip, r7
   12bec:	4463      	add	r3, ip
   12bee:	4aa7      	ldr	r2, [pc, #668]	; (12e8c <hmac_sha_test+0x320>)
   12bf0:	601a      	str	r2, [r3, #0]
    b.output = "\xef\xfc\xdf\x6a\xe5\xeb\x2f\xa2\xd2\x74\x16\xd5\xf1\x84\xdf"
   12bf2:	4ba5      	ldr	r3, [pc, #660]	; (12e88 <hmac_sha_test+0x31c>)
   12bf4:	22d4      	movs	r2, #212	; 0xd4
   12bf6:	0052      	lsls	r2, r2, #1
   12bf8:	4694      	mov	ip, r2
   12bfa:	44bc      	add	ip, r7
   12bfc:	4463      	add	r3, ip
   12bfe:	4aa4      	ldr	r2, [pc, #656]	; (12e90 <hmac_sha_test+0x324>)
   12c00:	605a      	str	r2, [r3, #4]
               "\x9c\x25\x9a\x7c\x79";
    b.inLen  = XSTRLEN(b.input);
   12c02:	4ba1      	ldr	r3, [pc, #644]	; (12e88 <hmac_sha_test+0x31c>)
   12c04:	22d4      	movs	r2, #212	; 0xd4
   12c06:	0052      	lsls	r2, r2, #1
   12c08:	4694      	mov	ip, r2
   12c0a:	44bc      	add	ip, r7
   12c0c:	4463      	add	r3, ip
   12c0e:	681b      	ldr	r3, [r3, #0]
   12c10:	0018      	movs	r0, r3
   12c12:	f013 fbcd 	bl	263b0 <strlen>
   12c16:	0002      	movs	r2, r0
   12c18:	4b9b      	ldr	r3, [pc, #620]	; (12e88 <hmac_sha_test+0x31c>)
   12c1a:	21d4      	movs	r1, #212	; 0xd4
   12c1c:	0049      	lsls	r1, r1, #1
   12c1e:	468c      	mov	ip, r1
   12c20:	44bc      	add	ip, r7
   12c22:	4463      	add	r3, ip
   12c24:	609a      	str	r2, [r3, #8]
    b.outLen = WC_SHA_DIGEST_SIZE;
   12c26:	4b98      	ldr	r3, [pc, #608]	; (12e88 <hmac_sha_test+0x31c>)
   12c28:	22d4      	movs	r2, #212	; 0xd4
   12c2a:	0052      	lsls	r2, r2, #1
   12c2c:	4694      	mov	ip, r2
   12c2e:	44bc      	add	ip, r7
   12c30:	4463      	add	r3, ip
   12c32:	2214      	movs	r2, #20
   12c34:	60da      	str	r2, [r3, #12]

    c.input  = "\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
   12c36:	4b97      	ldr	r3, [pc, #604]	; (12e94 <hmac_sha_test+0x328>)
   12c38:	22d4      	movs	r2, #212	; 0xd4
   12c3a:	0052      	lsls	r2, r2, #1
   12c3c:	4694      	mov	ip, r2
   12c3e:	44bc      	add	ip, r7
   12c40:	4463      	add	r3, ip
   12c42:	4a95      	ldr	r2, [pc, #596]	; (12e98 <hmac_sha_test+0x32c>)
   12c44:	601a      	str	r2, [r3, #0]
               "\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
               "\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
               "\xDD\xDD\xDD\xDD\xDD\xDD";
    c.output = "\x12\x5d\x73\x42\xb9\xac\x11\xcd\x91\xa3\x9a\xf4\x8a\xa1\x7b"
   12c46:	4b93      	ldr	r3, [pc, #588]	; (12e94 <hmac_sha_test+0x328>)
   12c48:	22d4      	movs	r2, #212	; 0xd4
   12c4a:	0052      	lsls	r2, r2, #1
   12c4c:	4694      	mov	ip, r2
   12c4e:	44bc      	add	ip, r7
   12c50:	4463      	add	r3, ip
   12c52:	4a92      	ldr	r2, [pc, #584]	; (12e9c <hmac_sha_test+0x330>)
   12c54:	605a      	str	r2, [r3, #4]
               "\x4f\x63\xf1\x75\xd3";
    c.inLen  = XSTRLEN(c.input);
   12c56:	4b8f      	ldr	r3, [pc, #572]	; (12e94 <hmac_sha_test+0x328>)
   12c58:	22d4      	movs	r2, #212	; 0xd4
   12c5a:	0052      	lsls	r2, r2, #1
   12c5c:	4694      	mov	ip, r2
   12c5e:	44bc      	add	ip, r7
   12c60:	4463      	add	r3, ip
   12c62:	681b      	ldr	r3, [r3, #0]
   12c64:	0018      	movs	r0, r3
   12c66:	f013 fba3 	bl	263b0 <strlen>
   12c6a:	0002      	movs	r2, r0
   12c6c:	4b89      	ldr	r3, [pc, #548]	; (12e94 <hmac_sha_test+0x328>)
   12c6e:	21d4      	movs	r1, #212	; 0xd4
   12c70:	0049      	lsls	r1, r1, #1
   12c72:	468c      	mov	ip, r1
   12c74:	44bc      	add	ip, r7
   12c76:	4463      	add	r3, ip
   12c78:	609a      	str	r2, [r3, #8]
    c.outLen = WC_SHA_DIGEST_SIZE;
   12c7a:	4b86      	ldr	r3, [pc, #536]	; (12e94 <hmac_sha_test+0x328>)
   12c7c:	22d4      	movs	r2, #212	; 0xd4
   12c7e:	0052      	lsls	r2, r2, #1
   12c80:	4694      	mov	ip, r2
   12c82:	44bc      	add	ip, r7
   12c84:	4463      	add	r3, ip
   12c86:	2214      	movs	r2, #20
   12c88:	60da      	str	r2, [r3, #12]

    test_hmac[0] = a;
   12c8a:	4b85      	ldr	r3, [pc, #532]	; (12ea0 <hmac_sha_test+0x334>)
   12c8c:	22d4      	movs	r2, #212	; 0xd4
   12c8e:	0052      	lsls	r2, r2, #1
   12c90:	18ba      	adds	r2, r7, r2
   12c92:	18d1      	adds	r1, r2, r3
   12c94:	4b79      	ldr	r3, [pc, #484]	; (12e7c <hmac_sha_test+0x310>)
   12c96:	22d4      	movs	r2, #212	; 0xd4
   12c98:	0052      	lsls	r2, r2, #1
   12c9a:	18ba      	adds	r2, r7, r2
   12c9c:	18d2      	adds	r2, r2, r3
   12c9e:	000b      	movs	r3, r1
   12ca0:	ca13      	ldmia	r2!, {r0, r1, r4}
   12ca2:	c313      	stmia	r3!, {r0, r1, r4}
   12ca4:	6812      	ldr	r2, [r2, #0]
   12ca6:	601a      	str	r2, [r3, #0]
    test_hmac[1] = b;
   12ca8:	4b7d      	ldr	r3, [pc, #500]	; (12ea0 <hmac_sha_test+0x334>)
   12caa:	22d4      	movs	r2, #212	; 0xd4
   12cac:	0052      	lsls	r2, r2, #1
   12cae:	4694      	mov	ip, r2
   12cb0:	44bc      	add	ip, r7
   12cb2:	4463      	add	r3, ip
   12cb4:	4a74      	ldr	r2, [pc, #464]	; (12e88 <hmac_sha_test+0x31c>)
   12cb6:	21d4      	movs	r1, #212	; 0xd4
   12cb8:	0049      	lsls	r1, r1, #1
   12cba:	468c      	mov	ip, r1
   12cbc:	44bc      	add	ip, r7
   12cbe:	4462      	add	r2, ip
   12cc0:	3310      	adds	r3, #16
   12cc2:	ca13      	ldmia	r2!, {r0, r1, r4}
   12cc4:	c313      	stmia	r3!, {r0, r1, r4}
   12cc6:	6812      	ldr	r2, [r2, #0]
   12cc8:	601a      	str	r2, [r3, #0]
    test_hmac[2] = c;
   12cca:	4b75      	ldr	r3, [pc, #468]	; (12ea0 <hmac_sha_test+0x334>)
   12ccc:	22d4      	movs	r2, #212	; 0xd4
   12cce:	0052      	lsls	r2, r2, #1
   12cd0:	4694      	mov	ip, r2
   12cd2:	44bc      	add	ip, r7
   12cd4:	4463      	add	r3, ip
   12cd6:	4a6f      	ldr	r2, [pc, #444]	; (12e94 <hmac_sha_test+0x328>)
   12cd8:	21d4      	movs	r1, #212	; 0xd4
   12cda:	0049      	lsls	r1, r1, #1
   12cdc:	468c      	mov	ip, r1
   12cde:	44bc      	add	ip, r7
   12ce0:	4462      	add	r2, ip
   12ce2:	3320      	adds	r3, #32
   12ce4:	ca13      	ldmia	r2!, {r0, r1, r4}
   12ce6:	c313      	stmia	r3!, {r0, r1, r4}
   12ce8:	6812      	ldr	r2, [r2, #0]
   12cea:	601a      	str	r2, [r3, #0]

    for (i = 0; i < times; ++i) {
   12cec:	2300      	movs	r3, #0
   12cee:	22d2      	movs	r2, #210	; 0xd2
   12cf0:	0052      	lsls	r2, r2, #1
   12cf2:	18ba      	adds	r2, r7, r2
   12cf4:	6013      	str	r3, [r2, #0]
   12cf6:	e0a4      	b.n	12e42 <hmac_sha_test+0x2d6>
#if defined(HAVE_FIPS) || defined(HAVE_CAVIUM)
        if (i == 1)
            continue; /* cavium can't handle short keys, fips not allowed */
#endif

        if (wc_HmacInit(&hmac, HEAP_HINT, devId) != 0)
   12cf8:	4b6a      	ldr	r3, [pc, #424]	; (12ea4 <hmac_sha_test+0x338>)
   12cfa:	681a      	ldr	r2, [r3, #0]
   12cfc:	2384      	movs	r3, #132	; 0x84
   12cfe:	18fb      	adds	r3, r7, r3
   12d00:	2100      	movs	r1, #0
   12d02:	0018      	movs	r0, r3
   12d04:	f7f7 fb56 	bl	a3b4 <wc_HmacInit>
   12d08:	1e03      	subs	r3, r0, #0
   12d0a:	d001      	beq.n	12d10 <hmac_sha_test+0x1a4>
            return -3300;
   12d0c:	4b66      	ldr	r3, [pc, #408]	; (12ea8 <hmac_sha_test+0x33c>)
   12d0e:	e0ac      	b.n	12e6a <hmac_sha_test+0x2fe>

        ret = wc_HmacSetKey(&hmac, WC_SHA, (byte*)keys[i],
   12d10:	4b58      	ldr	r3, [pc, #352]	; (12e74 <hmac_sha_test+0x308>)
   12d12:	22d4      	movs	r2, #212	; 0xd4
   12d14:	0052      	lsls	r2, r2, #1
   12d16:	4694      	mov	ip, r2
   12d18:	44bc      	add	ip, r7
   12d1a:	4463      	add	r3, ip
   12d1c:	22d2      	movs	r2, #210	; 0xd2
   12d1e:	0052      	lsls	r2, r2, #1
   12d20:	18ba      	adds	r2, r7, r2
   12d22:	6812      	ldr	r2, [r2, #0]
   12d24:	0092      	lsls	r2, r2, #2
   12d26:	58d4      	ldr	r4, [r2, r3]
            (word32)XSTRLEN(keys[i]));
   12d28:	4b52      	ldr	r3, [pc, #328]	; (12e74 <hmac_sha_test+0x308>)
   12d2a:	22d4      	movs	r2, #212	; 0xd4
   12d2c:	0052      	lsls	r2, r2, #1
   12d2e:	4694      	mov	ip, r2
   12d30:	44bc      	add	ip, r7
   12d32:	4463      	add	r3, ip
   12d34:	22d2      	movs	r2, #210	; 0xd2
   12d36:	0052      	lsls	r2, r2, #1
   12d38:	18ba      	adds	r2, r7, r2
   12d3a:	6812      	ldr	r2, [r2, #0]
   12d3c:	0092      	lsls	r2, r2, #2
   12d3e:	58d3      	ldr	r3, [r2, r3]
   12d40:	0018      	movs	r0, r3
   12d42:	f013 fb35 	bl	263b0 <strlen>
   12d46:	0003      	movs	r3, r0
#endif

        if (wc_HmacInit(&hmac, HEAP_HINT, devId) != 0)
            return -3300;

        ret = wc_HmacSetKey(&hmac, WC_SHA, (byte*)keys[i],
   12d48:	2284      	movs	r2, #132	; 0x84
   12d4a:	18b8      	adds	r0, r7, r2
   12d4c:	0022      	movs	r2, r4
   12d4e:	2104      	movs	r1, #4
   12d50:	f7f7 f91c 	bl	9f8c <wc_HmacSetKey>
   12d54:	0003      	movs	r3, r0
   12d56:	22ce      	movs	r2, #206	; 0xce
   12d58:	0052      	lsls	r2, r2, #1
   12d5a:	18ba      	adds	r2, r7, r2
   12d5c:	6013      	str	r3, [r2, #0]
            (word32)XSTRLEN(keys[i]));
        if (ret != 0)
   12d5e:	23ce      	movs	r3, #206	; 0xce
   12d60:	005b      	lsls	r3, r3, #1
   12d62:	18fb      	adds	r3, r7, r3
   12d64:	681b      	ldr	r3, [r3, #0]
   12d66:	2b00      	cmp	r3, #0
   12d68:	d001      	beq.n	12d6e <hmac_sha_test+0x202>
            return -3301;
   12d6a:	4b50      	ldr	r3, [pc, #320]	; (12eac <hmac_sha_test+0x340>)
   12d6c:	e07d      	b.n	12e6a <hmac_sha_test+0x2fe>
        ret = wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
   12d6e:	4b4c      	ldr	r3, [pc, #304]	; (12ea0 <hmac_sha_test+0x334>)
   12d70:	22d4      	movs	r2, #212	; 0xd4
   12d72:	0052      	lsls	r2, r2, #1
   12d74:	4694      	mov	ip, r2
   12d76:	44bc      	add	ip, r7
   12d78:	4463      	add	r3, ip
   12d7a:	22d2      	movs	r2, #210	; 0xd2
   12d7c:	0052      	lsls	r2, r2, #1
   12d7e:	18ba      	adds	r2, r7, r2
   12d80:	6812      	ldr	r2, [r2, #0]
   12d82:	0112      	lsls	r2, r2, #4
   12d84:	58d1      	ldr	r1, [r2, r3]
                   (word32)test_hmac[i].inLen);
   12d86:	4b46      	ldr	r3, [pc, #280]	; (12ea0 <hmac_sha_test+0x334>)
   12d88:	22d4      	movs	r2, #212	; 0xd4
   12d8a:	0052      	lsls	r2, r2, #1
   12d8c:	18ba      	adds	r2, r7, r2
   12d8e:	18d2      	adds	r2, r2, r3
   12d90:	23d2      	movs	r3, #210	; 0xd2
   12d92:	005b      	lsls	r3, r3, #1
   12d94:	18fb      	adds	r3, r7, r3
   12d96:	681b      	ldr	r3, [r3, #0]
   12d98:	011b      	lsls	r3, r3, #4
   12d9a:	18d3      	adds	r3, r2, r3
   12d9c:	3308      	adds	r3, #8
   12d9e:	681a      	ldr	r2, [r3, #0]

        ret = wc_HmacSetKey(&hmac, WC_SHA, (byte*)keys[i],
            (word32)XSTRLEN(keys[i]));
        if (ret != 0)
            return -3301;
        ret = wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
   12da0:	2384      	movs	r3, #132	; 0x84
   12da2:	18fb      	adds	r3, r7, r3
   12da4:	0018      	movs	r0, r3
   12da6:	f7f7 fa21 	bl	a1ec <wc_HmacUpdate>
   12daa:	0003      	movs	r3, r0
   12dac:	22ce      	movs	r2, #206	; 0xce
   12dae:	0052      	lsls	r2, r2, #1
   12db0:	18ba      	adds	r2, r7, r2
   12db2:	6013      	str	r3, [r2, #0]
                   (word32)test_hmac[i].inLen);
        if (ret != 0)
   12db4:	23ce      	movs	r3, #206	; 0xce
   12db6:	005b      	lsls	r3, r3, #1
   12db8:	18fb      	adds	r3, r7, r3
   12dba:	681b      	ldr	r3, [r3, #0]
   12dbc:	2b00      	cmp	r3, #0
   12dbe:	d001      	beq.n	12dc4 <hmac_sha_test+0x258>
            return -3302;
   12dc0:	4b3b      	ldr	r3, [pc, #236]	; (12eb0 <hmac_sha_test+0x344>)
   12dc2:	e052      	b.n	12e6a <hmac_sha_test+0x2fe>
        ret = wc_HmacFinal(&hmac, hash);
   12dc4:	2370      	movs	r3, #112	; 0x70
   12dc6:	18fa      	adds	r2, r7, r3
   12dc8:	2384      	movs	r3, #132	; 0x84
   12dca:	18fb      	adds	r3, r7, r3
   12dcc:	0011      	movs	r1, r2
   12dce:	0018      	movs	r0, r3
   12dd0:	f7f7 fa52 	bl	a278 <wc_HmacFinal>
   12dd4:	0003      	movs	r3, r0
   12dd6:	22ce      	movs	r2, #206	; 0xce
   12dd8:	0052      	lsls	r2, r2, #1
   12dda:	18ba      	adds	r2, r7, r2
   12ddc:	6013      	str	r3, [r2, #0]
        if (ret != 0)
   12dde:	23ce      	movs	r3, #206	; 0xce
   12de0:	005b      	lsls	r3, r3, #1
   12de2:	18fb      	adds	r3, r7, r3
   12de4:	681b      	ldr	r3, [r3, #0]
   12de6:	2b00      	cmp	r3, #0
   12de8:	d001      	beq.n	12dee <hmac_sha_test+0x282>
            return -3303;
   12dea:	4b32      	ldr	r3, [pc, #200]	; (12eb4 <hmac_sha_test+0x348>)
   12dec:	e03d      	b.n	12e6a <hmac_sha_test+0x2fe>

        if (XMEMCMP(hash, test_hmac[i].output, WC_SHA_DIGEST_SIZE) != 0)
   12dee:	4b2c      	ldr	r3, [pc, #176]	; (12ea0 <hmac_sha_test+0x334>)
   12df0:	22d4      	movs	r2, #212	; 0xd4
   12df2:	0052      	lsls	r2, r2, #1
   12df4:	18ba      	adds	r2, r7, r2
   12df6:	18d2      	adds	r2, r2, r3
   12df8:	23d2      	movs	r3, #210	; 0xd2
   12dfa:	005b      	lsls	r3, r3, #1
   12dfc:	18fb      	adds	r3, r7, r3
   12dfe:	681b      	ldr	r3, [r3, #0]
   12e00:	011b      	lsls	r3, r3, #4
   12e02:	18d3      	adds	r3, r2, r3
   12e04:	3304      	adds	r3, #4
   12e06:	6819      	ldr	r1, [r3, #0]
   12e08:	2370      	movs	r3, #112	; 0x70
   12e0a:	18fb      	adds	r3, r7, r3
   12e0c:	2214      	movs	r2, #20
   12e0e:	0018      	movs	r0, r3
   12e10:	f012 fc5e 	bl	256d0 <memcmp>
   12e14:	1e03      	subs	r3, r0, #0
   12e16:	d006      	beq.n	12e26 <hmac_sha_test+0x2ba>
            return -3304 - i;
   12e18:	23d2      	movs	r3, #210	; 0xd2
   12e1a:	005b      	lsls	r3, r3, #1
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	681b      	ldr	r3, [r3, #0]
   12e20:	4a25      	ldr	r2, [pc, #148]	; (12eb8 <hmac_sha_test+0x34c>)
   12e22:	1ad3      	subs	r3, r2, r3
   12e24:	e021      	b.n	12e6a <hmac_sha_test+0x2fe>

        wc_HmacFree(&hmac);
   12e26:	2384      	movs	r3, #132	; 0x84
   12e28:	18fb      	adds	r3, r7, r3
   12e2a:	0018      	movs	r0, r3
   12e2c:	f7f7 fae2 	bl	a3f4 <wc_HmacFree>

    test_hmac[0] = a;
    test_hmac[1] = b;
    test_hmac[2] = c;

    for (i = 0; i < times; ++i) {
   12e30:	23d2      	movs	r3, #210	; 0xd2
   12e32:	005b      	lsls	r3, r3, #1
   12e34:	18fb      	adds	r3, r7, r3
   12e36:	681b      	ldr	r3, [r3, #0]
   12e38:	3301      	adds	r3, #1
   12e3a:	22d2      	movs	r2, #210	; 0xd2
   12e3c:	0052      	lsls	r2, r2, #1
   12e3e:	18ba      	adds	r2, r7, r2
   12e40:	6013      	str	r3, [r2, #0]
   12e42:	23d2      	movs	r3, #210	; 0xd2
   12e44:	005b      	lsls	r3, r3, #1
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	681a      	ldr	r2, [r3, #0]
   12e4a:	23d0      	movs	r3, #208	; 0xd0
   12e4c:	005b      	lsls	r3, r3, #1
   12e4e:	18fb      	adds	r3, r7, r3
   12e50:	681b      	ldr	r3, [r3, #0]
   12e52:	429a      	cmp	r2, r3
   12e54:	da00      	bge.n	12e58 <hmac_sha_test+0x2ec>
   12e56:	e74f      	b.n	12cf8 <hmac_sha_test+0x18c>

        wc_HmacFree(&hmac);
    }

#ifndef HAVE_FIPS
    if (wc_HmacSizeByType(WC_SHA) != WC_SHA_DIGEST_SIZE)
   12e58:	2004      	movs	r0, #4
   12e5a:	f7f7 f82f 	bl	9ebc <wc_HmacSizeByType>
   12e5e:	0003      	movs	r3, r0
   12e60:	2b14      	cmp	r3, #20
   12e62:	d001      	beq.n	12e68 <hmac_sha_test+0x2fc>
        return -3314;
   12e64:	4b15      	ldr	r3, [pc, #84]	; (12ebc <hmac_sha_test+0x350>)
   12e66:	e000      	b.n	12e6a <hmac_sha_test+0x2fe>
#endif

    return 0;
   12e68:	2300      	movs	r3, #0
}
   12e6a:	0018      	movs	r0, r3
   12e6c:	46bd      	mov	sp, r7
   12e6e:	b06b      	add	sp, #428	; 0x1ac
   12e70:	bd90      	pop	{r4, r7, pc}
   12e72:	46c0      	nop			; (mov r8, r8)
   12e74:	fffffebc 	.word	0xfffffebc
   12e78:	0002d1c8 	.word	0x0002d1c8
   12e7c:	fffffeac 	.word	0xfffffeac
   12e80:	0002d0e8 	.word	0x0002d0e8
   12e84:	0002d0f4 	.word	0x0002d0f4
   12e88:	fffffe9c 	.word	0xfffffe9c
   12e8c:	0002d10c 	.word	0x0002d10c
   12e90:	0002d12c 	.word	0x0002d12c
   12e94:	fffffe8c 	.word	0xfffffe8c
   12e98:	0002d144 	.word	0x0002d144
   12e9c:	0002d178 	.word	0x0002d178
   12ea0:	fffffe5c 	.word	0xfffffe5c
   12ea4:	20000010 	.word	0x20000010
   12ea8:	fffff31c 	.word	0xfffff31c
   12eac:	fffff31b 	.word	0xfffff31b
   12eb0:	fffff31a 	.word	0xfffff31a
   12eb4:	fffff319 	.word	0xfffff319
   12eb8:	fffff318 	.word	0xfffff318
   12ebc:	fffff30e 	.word	0xfffff30e

00012ec0 <hmac_sha256_test>:
#endif


#if !defined(NO_HMAC) && !defined(NO_SHA256)
int hmac_sha256_test(void)
{
   12ec0:	b590      	push	{r4, r7, lr}
   12ec2:	b0f7      	sub	sp, #476	; 0x1dc
   12ec4:	af00      	add	r7, sp, #0
    Hmac hmac;
    byte hash[WC_SHA256_DIGEST_SIZE];

    const char* keys[]=
   12ec6:	4bec      	ldr	r3, [pc, #944]	; (13278 <hmac_sha256_test+0x3b8>)
   12ec8:	22ec      	movs	r2, #236	; 0xec
   12eca:	0052      	lsls	r2, r2, #1
   12ecc:	4694      	mov	ip, r2
   12ece:	44bc      	add	ip, r7
   12ed0:	4463      	add	r3, ip
   12ed2:	4aea      	ldr	r2, [pc, #936]	; (1327c <hmac_sha256_test+0x3bc>)
   12ed4:	ca13      	ldmia	r2!, {r0, r1, r4}
   12ed6:	c313      	stmia	r3!, {r0, r1, r4}
   12ed8:	6812      	ldr	r2, [r2, #0]
   12eda:	601a      	str	r2, [r3, #0]

    testVector a, b, c, d;
    testVector test_hmac[4];

    int ret;
    int times = sizeof(test_hmac) / sizeof(testVector), i;
   12edc:	2304      	movs	r3, #4
   12ede:	22e8      	movs	r2, #232	; 0xe8
   12ee0:	0052      	lsls	r2, r2, #1
   12ee2:	18ba      	adds	r2, r7, r2
   12ee4:	6013      	str	r3, [r2, #0]

    a.input  = "Hi There";
   12ee6:	4be6      	ldr	r3, [pc, #920]	; (13280 <hmac_sha256_test+0x3c0>)
   12ee8:	22ec      	movs	r2, #236	; 0xec
   12eea:	0052      	lsls	r2, r2, #1
   12eec:	4694      	mov	ip, r2
   12eee:	44bc      	add	ip, r7
   12ef0:	4463      	add	r3, ip
   12ef2:	4ae4      	ldr	r2, [pc, #912]	; (13284 <hmac_sha256_test+0x3c4>)
   12ef4:	601a      	str	r2, [r3, #0]
    a.output = "\xb0\x34\x4c\x61\xd8\xdb\x38\x53\x5c\xa8\xaf\xce\xaf\x0b\xf1"
   12ef6:	4be2      	ldr	r3, [pc, #904]	; (13280 <hmac_sha256_test+0x3c0>)
   12ef8:	22ec      	movs	r2, #236	; 0xec
   12efa:	0052      	lsls	r2, r2, #1
   12efc:	4694      	mov	ip, r2
   12efe:	44bc      	add	ip, r7
   12f00:	4463      	add	r3, ip
   12f02:	4ae1      	ldr	r2, [pc, #900]	; (13288 <hmac_sha256_test+0x3c8>)
   12f04:	605a      	str	r2, [r3, #4]
               "\x2b\x88\x1d\xc2\x00\xc9\x83\x3d\xa7\x26\xe9\x37\x6c\x2e\x32"
               "\xcf\xf7";
    a.inLen  = XSTRLEN(a.input);
   12f06:	4bde      	ldr	r3, [pc, #888]	; (13280 <hmac_sha256_test+0x3c0>)
   12f08:	22ec      	movs	r2, #236	; 0xec
   12f0a:	0052      	lsls	r2, r2, #1
   12f0c:	4694      	mov	ip, r2
   12f0e:	44bc      	add	ip, r7
   12f10:	4463      	add	r3, ip
   12f12:	681b      	ldr	r3, [r3, #0]
   12f14:	0018      	movs	r0, r3
   12f16:	f013 fa4b 	bl	263b0 <strlen>
   12f1a:	0002      	movs	r2, r0
   12f1c:	4bd8      	ldr	r3, [pc, #864]	; (13280 <hmac_sha256_test+0x3c0>)
   12f1e:	21ec      	movs	r1, #236	; 0xec
   12f20:	0049      	lsls	r1, r1, #1
   12f22:	468c      	mov	ip, r1
   12f24:	44bc      	add	ip, r7
   12f26:	4463      	add	r3, ip
   12f28:	609a      	str	r2, [r3, #8]
    a.outLen = WC_SHA256_DIGEST_SIZE;
   12f2a:	4bd5      	ldr	r3, [pc, #852]	; (13280 <hmac_sha256_test+0x3c0>)
   12f2c:	22ec      	movs	r2, #236	; 0xec
   12f2e:	0052      	lsls	r2, r2, #1
   12f30:	4694      	mov	ip, r2
   12f32:	44bc      	add	ip, r7
   12f34:	4463      	add	r3, ip
   12f36:	2220      	movs	r2, #32
   12f38:	60da      	str	r2, [r3, #12]

    b.input  = "what do ya want for nothing?";
   12f3a:	4bd4      	ldr	r3, [pc, #848]	; (1328c <hmac_sha256_test+0x3cc>)
   12f3c:	22ec      	movs	r2, #236	; 0xec
   12f3e:	0052      	lsls	r2, r2, #1
   12f40:	4694      	mov	ip, r2
   12f42:	44bc      	add	ip, r7
   12f44:	4463      	add	r3, ip
   12f46:	4ad2      	ldr	r2, [pc, #840]	; (13290 <hmac_sha256_test+0x3d0>)
   12f48:	601a      	str	r2, [r3, #0]
    b.output = "\x5b\xdc\xc1\x46\xbf\x60\x75\x4e\x6a\x04\x24\x26\x08\x95\x75"
   12f4a:	4bd0      	ldr	r3, [pc, #832]	; (1328c <hmac_sha256_test+0x3cc>)
   12f4c:	22ec      	movs	r2, #236	; 0xec
   12f4e:	0052      	lsls	r2, r2, #1
   12f50:	4694      	mov	ip, r2
   12f52:	44bc      	add	ip, r7
   12f54:	4463      	add	r3, ip
   12f56:	4acf      	ldr	r2, [pc, #828]	; (13294 <hmac_sha256_test+0x3d4>)
   12f58:	605a      	str	r2, [r3, #4]
               "\xc7\x5a\x00\x3f\x08\x9d\x27\x39\x83\x9d\xec\x58\xb9\x64\xec"
               "\x38\x43";
    b.inLen  = XSTRLEN(b.input);
   12f5a:	4bcc      	ldr	r3, [pc, #816]	; (1328c <hmac_sha256_test+0x3cc>)
   12f5c:	22ec      	movs	r2, #236	; 0xec
   12f5e:	0052      	lsls	r2, r2, #1
   12f60:	4694      	mov	ip, r2
   12f62:	44bc      	add	ip, r7
   12f64:	4463      	add	r3, ip
   12f66:	681b      	ldr	r3, [r3, #0]
   12f68:	0018      	movs	r0, r3
   12f6a:	f013 fa21 	bl	263b0 <strlen>
   12f6e:	0002      	movs	r2, r0
   12f70:	4bc6      	ldr	r3, [pc, #792]	; (1328c <hmac_sha256_test+0x3cc>)
   12f72:	21ec      	movs	r1, #236	; 0xec
   12f74:	0049      	lsls	r1, r1, #1
   12f76:	468c      	mov	ip, r1
   12f78:	44bc      	add	ip, r7
   12f7a:	4463      	add	r3, ip
   12f7c:	609a      	str	r2, [r3, #8]
    b.outLen = WC_SHA256_DIGEST_SIZE;
   12f7e:	4bc3      	ldr	r3, [pc, #780]	; (1328c <hmac_sha256_test+0x3cc>)
   12f80:	22ec      	movs	r2, #236	; 0xec
   12f82:	0052      	lsls	r2, r2, #1
   12f84:	4694      	mov	ip, r2
   12f86:	44bc      	add	ip, r7
   12f88:	4463      	add	r3, ip
   12f8a:	2220      	movs	r2, #32
   12f8c:	60da      	str	r2, [r3, #12]

    c.input  = "\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
   12f8e:	4bc2      	ldr	r3, [pc, #776]	; (13298 <hmac_sha256_test+0x3d8>)
   12f90:	22ec      	movs	r2, #236	; 0xec
   12f92:	0052      	lsls	r2, r2, #1
   12f94:	4694      	mov	ip, r2
   12f96:	44bc      	add	ip, r7
   12f98:	4463      	add	r3, ip
   12f9a:	4ac0      	ldr	r2, [pc, #768]	; (1329c <hmac_sha256_test+0x3dc>)
   12f9c:	601a      	str	r2, [r3, #0]
               "\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
               "\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD\xDD"
               "\xDD\xDD\xDD\xDD\xDD\xDD";
    c.output = "\x77\x3e\xa9\x1e\x36\x80\x0e\x46\x85\x4d\xb8\xeb\xd0\x91\x81"
   12f9e:	4bbe      	ldr	r3, [pc, #760]	; (13298 <hmac_sha256_test+0x3d8>)
   12fa0:	22ec      	movs	r2, #236	; 0xec
   12fa2:	0052      	lsls	r2, r2, #1
   12fa4:	4694      	mov	ip, r2
   12fa6:	44bc      	add	ip, r7
   12fa8:	4463      	add	r3, ip
   12faa:	4abd      	ldr	r2, [pc, #756]	; (132a0 <hmac_sha256_test+0x3e0>)
   12fac:	605a      	str	r2, [r3, #4]
               "\xa7\x29\x59\x09\x8b\x3e\xf8\xc1\x22\xd9\x63\x55\x14\xce\xd5"
               "\x65\xfe";
    c.inLen  = XSTRLEN(c.input);
   12fae:	4bba      	ldr	r3, [pc, #744]	; (13298 <hmac_sha256_test+0x3d8>)
   12fb0:	22ec      	movs	r2, #236	; 0xec
   12fb2:	0052      	lsls	r2, r2, #1
   12fb4:	4694      	mov	ip, r2
   12fb6:	44bc      	add	ip, r7
   12fb8:	4463      	add	r3, ip
   12fba:	681b      	ldr	r3, [r3, #0]
   12fbc:	0018      	movs	r0, r3
   12fbe:	f013 f9f7 	bl	263b0 <strlen>
   12fc2:	0002      	movs	r2, r0
   12fc4:	4bb4      	ldr	r3, [pc, #720]	; (13298 <hmac_sha256_test+0x3d8>)
   12fc6:	21ec      	movs	r1, #236	; 0xec
   12fc8:	0049      	lsls	r1, r1, #1
   12fca:	468c      	mov	ip, r1
   12fcc:	44bc      	add	ip, r7
   12fce:	4463      	add	r3, ip
   12fd0:	609a      	str	r2, [r3, #8]
    c.outLen = WC_SHA256_DIGEST_SIZE;
   12fd2:	4bb1      	ldr	r3, [pc, #708]	; (13298 <hmac_sha256_test+0x3d8>)
   12fd4:	22ec      	movs	r2, #236	; 0xec
   12fd6:	0052      	lsls	r2, r2, #1
   12fd8:	4694      	mov	ip, r2
   12fda:	44bc      	add	ip, r7
   12fdc:	4463      	add	r3, ip
   12fde:	2220      	movs	r2, #32
   12fe0:	60da      	str	r2, [r3, #12]

    d.input  = 0;
   12fe2:	4bb0      	ldr	r3, [pc, #704]	; (132a4 <hmac_sha256_test+0x3e4>)
   12fe4:	22ec      	movs	r2, #236	; 0xec
   12fe6:	0052      	lsls	r2, r2, #1
   12fe8:	4694      	mov	ip, r2
   12fea:	44bc      	add	ip, r7
   12fec:	4463      	add	r3, ip
   12fee:	2200      	movs	r2, #0
   12ff0:	601a      	str	r2, [r3, #0]
    d.output = "\x86\xe5\x4f\xd4\x48\x72\x5d\x7e\x5d\xcf\xe2\x23\x53\xc8\x28"
   12ff2:	4bac      	ldr	r3, [pc, #688]	; (132a4 <hmac_sha256_test+0x3e4>)
   12ff4:	22ec      	movs	r2, #236	; 0xec
   12ff6:	0052      	lsls	r2, r2, #1
   12ff8:	4694      	mov	ip, r2
   12ffa:	44bc      	add	ip, r7
   12ffc:	4463      	add	r3, ip
   12ffe:	4aaa      	ldr	r2, [pc, #680]	; (132a8 <hmac_sha256_test+0x3e8>)
   13000:	605a      	str	r2, [r3, #4]
               "\xaf\x48\x78\x1e\xb4\x8c\xae\x81\x06\xa7\xe1\xd4\x98\x94\x9f"
               "\x3e\x46";
    d.inLen  = 0;
   13002:	4ba8      	ldr	r3, [pc, #672]	; (132a4 <hmac_sha256_test+0x3e4>)
   13004:	22ec      	movs	r2, #236	; 0xec
   13006:	0052      	lsls	r2, r2, #1
   13008:	4694      	mov	ip, r2
   1300a:	44bc      	add	ip, r7
   1300c:	4463      	add	r3, ip
   1300e:	2200      	movs	r2, #0
   13010:	609a      	str	r2, [r3, #8]
    d.outLen = WC_SHA256_DIGEST_SIZE;
   13012:	4ba4      	ldr	r3, [pc, #656]	; (132a4 <hmac_sha256_test+0x3e4>)
   13014:	22ec      	movs	r2, #236	; 0xec
   13016:	0052      	lsls	r2, r2, #1
   13018:	4694      	mov	ip, r2
   1301a:	44bc      	add	ip, r7
   1301c:	4463      	add	r3, ip
   1301e:	2220      	movs	r2, #32
   13020:	60da      	str	r2, [r3, #12]

    test_hmac[0] = a;
   13022:	4ba2      	ldr	r3, [pc, #648]	; (132ac <hmac_sha256_test+0x3ec>)
   13024:	22ec      	movs	r2, #236	; 0xec
   13026:	0052      	lsls	r2, r2, #1
   13028:	18ba      	adds	r2, r7, r2
   1302a:	18d1      	adds	r1, r2, r3
   1302c:	4b94      	ldr	r3, [pc, #592]	; (13280 <hmac_sha256_test+0x3c0>)
   1302e:	22ec      	movs	r2, #236	; 0xec
   13030:	0052      	lsls	r2, r2, #1
   13032:	18ba      	adds	r2, r7, r2
   13034:	18d2      	adds	r2, r2, r3
   13036:	000b      	movs	r3, r1
   13038:	ca13      	ldmia	r2!, {r0, r1, r4}
   1303a:	c313      	stmia	r3!, {r0, r1, r4}
   1303c:	6812      	ldr	r2, [r2, #0]
   1303e:	601a      	str	r2, [r3, #0]
    test_hmac[1] = b;
   13040:	4b9a      	ldr	r3, [pc, #616]	; (132ac <hmac_sha256_test+0x3ec>)
   13042:	22ec      	movs	r2, #236	; 0xec
   13044:	0052      	lsls	r2, r2, #1
   13046:	4694      	mov	ip, r2
   13048:	44bc      	add	ip, r7
   1304a:	4463      	add	r3, ip
   1304c:	4a8f      	ldr	r2, [pc, #572]	; (1328c <hmac_sha256_test+0x3cc>)
   1304e:	21ec      	movs	r1, #236	; 0xec
   13050:	0049      	lsls	r1, r1, #1
   13052:	468c      	mov	ip, r1
   13054:	44bc      	add	ip, r7
   13056:	4462      	add	r2, ip
   13058:	3310      	adds	r3, #16
   1305a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1305c:	c313      	stmia	r3!, {r0, r1, r4}
   1305e:	6812      	ldr	r2, [r2, #0]
   13060:	601a      	str	r2, [r3, #0]
    test_hmac[2] = c;
   13062:	4b92      	ldr	r3, [pc, #584]	; (132ac <hmac_sha256_test+0x3ec>)
   13064:	22ec      	movs	r2, #236	; 0xec
   13066:	0052      	lsls	r2, r2, #1
   13068:	4694      	mov	ip, r2
   1306a:	44bc      	add	ip, r7
   1306c:	4463      	add	r3, ip
   1306e:	4a8a      	ldr	r2, [pc, #552]	; (13298 <hmac_sha256_test+0x3d8>)
   13070:	21ec      	movs	r1, #236	; 0xec
   13072:	0049      	lsls	r1, r1, #1
   13074:	468c      	mov	ip, r1
   13076:	44bc      	add	ip, r7
   13078:	4462      	add	r2, ip
   1307a:	3320      	adds	r3, #32
   1307c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1307e:	c313      	stmia	r3!, {r0, r1, r4}
   13080:	6812      	ldr	r2, [r2, #0]
   13082:	601a      	str	r2, [r3, #0]
    test_hmac[3] = d;
   13084:	4b89      	ldr	r3, [pc, #548]	; (132ac <hmac_sha256_test+0x3ec>)
   13086:	22ec      	movs	r2, #236	; 0xec
   13088:	0052      	lsls	r2, r2, #1
   1308a:	4694      	mov	ip, r2
   1308c:	44bc      	add	ip, r7
   1308e:	4463      	add	r3, ip
   13090:	4a84      	ldr	r2, [pc, #528]	; (132a4 <hmac_sha256_test+0x3e4>)
   13092:	21ec      	movs	r1, #236	; 0xec
   13094:	0049      	lsls	r1, r1, #1
   13096:	468c      	mov	ip, r1
   13098:	44bc      	add	ip, r7
   1309a:	4462      	add	r2, ip
   1309c:	3330      	adds	r3, #48	; 0x30
   1309e:	ca13      	ldmia	r2!, {r0, r1, r4}
   130a0:	c313      	stmia	r3!, {r0, r1, r4}
   130a2:	6812      	ldr	r2, [r2, #0]
   130a4:	601a      	str	r2, [r3, #0]

    for (i = 0; i < times; ++i) {
   130a6:	2300      	movs	r3, #0
   130a8:	22ea      	movs	r2, #234	; 0xea
   130aa:	0052      	lsls	r2, r2, #1
   130ac:	18ba      	adds	r2, r7, r2
   130ae:	6013      	str	r3, [r2, #0]
   130b0:	e0c6      	b.n	13240 <hmac_sha256_test+0x380>
#if defined(HAVE_INTEL_QA) || defined(HAVE_CAVIUM)
        if (i == 3)
            continue; /* QuickAssist can't handle empty HMAC */
#endif

        if (wc_HmacInit(&hmac, HEAP_HINT, devId) != 0)
   130b2:	4b7f      	ldr	r3, [pc, #508]	; (132b0 <hmac_sha256_test+0x3f0>)
   130b4:	681a      	ldr	r2, [r3, #0]
   130b6:	23b4      	movs	r3, #180	; 0xb4
   130b8:	18fb      	adds	r3, r7, r3
   130ba:	2100      	movs	r1, #0
   130bc:	0018      	movs	r0, r3
   130be:	f7f7 f979 	bl	a3b4 <wc_HmacInit>
   130c2:	1e03      	subs	r3, r0, #0
   130c4:	d006      	beq.n	130d4 <hmac_sha256_test+0x214>
            return -3500 - i;
   130c6:	23ea      	movs	r3, #234	; 0xea
   130c8:	005b      	lsls	r3, r3, #1
   130ca:	18fb      	adds	r3, r7, r3
   130cc:	681b      	ldr	r3, [r3, #0]
   130ce:	4a79      	ldr	r2, [pc, #484]	; (132b4 <hmac_sha256_test+0x3f4>)
   130d0:	1ad3      	subs	r3, r2, r3
   130d2:	e105      	b.n	132e0 <hmac_sha256_test+0x420>

        ret = wc_HmacSetKey(&hmac, WC_SHA256, (byte*)keys[i],
   130d4:	4b68      	ldr	r3, [pc, #416]	; (13278 <hmac_sha256_test+0x3b8>)
   130d6:	22ec      	movs	r2, #236	; 0xec
   130d8:	0052      	lsls	r2, r2, #1
   130da:	4694      	mov	ip, r2
   130dc:	44bc      	add	ip, r7
   130de:	4463      	add	r3, ip
   130e0:	22ea      	movs	r2, #234	; 0xea
   130e2:	0052      	lsls	r2, r2, #1
   130e4:	18ba      	adds	r2, r7, r2
   130e6:	6812      	ldr	r2, [r2, #0]
   130e8:	0092      	lsls	r2, r2, #2
   130ea:	58d4      	ldr	r4, [r2, r3]
            (word32)XSTRLEN(keys[i]));
   130ec:	4b62      	ldr	r3, [pc, #392]	; (13278 <hmac_sha256_test+0x3b8>)
   130ee:	22ec      	movs	r2, #236	; 0xec
   130f0:	0052      	lsls	r2, r2, #1
   130f2:	4694      	mov	ip, r2
   130f4:	44bc      	add	ip, r7
   130f6:	4463      	add	r3, ip
   130f8:	22ea      	movs	r2, #234	; 0xea
   130fa:	0052      	lsls	r2, r2, #1
   130fc:	18ba      	adds	r2, r7, r2
   130fe:	6812      	ldr	r2, [r2, #0]
   13100:	0092      	lsls	r2, r2, #2
   13102:	58d3      	ldr	r3, [r2, r3]
   13104:	0018      	movs	r0, r3
   13106:	f013 f953 	bl	263b0 <strlen>
   1310a:	0003      	movs	r3, r0
#endif

        if (wc_HmacInit(&hmac, HEAP_HINT, devId) != 0)
            return -3500 - i;

        ret = wc_HmacSetKey(&hmac, WC_SHA256, (byte*)keys[i],
   1310c:	22b4      	movs	r2, #180	; 0xb4
   1310e:	18b8      	adds	r0, r7, r2
   13110:	0022      	movs	r2, r4
   13112:	2106      	movs	r1, #6
   13114:	f7f6 ff3a 	bl	9f8c <wc_HmacSetKey>
   13118:	0003      	movs	r3, r0
   1311a:	22e6      	movs	r2, #230	; 0xe6
   1311c:	0052      	lsls	r2, r2, #1
   1311e:	18ba      	adds	r2, r7, r2
   13120:	6013      	str	r3, [r2, #0]
            (word32)XSTRLEN(keys[i]));
        if (ret != 0)
   13122:	23e6      	movs	r3, #230	; 0xe6
   13124:	005b      	lsls	r3, r3, #1
   13126:	18fb      	adds	r3, r7, r3
   13128:	681b      	ldr	r3, [r3, #0]
   1312a:	2b00      	cmp	r3, #0
   1312c:	d006      	beq.n	1313c <hmac_sha256_test+0x27c>
            return -3510 - i;
   1312e:	23ea      	movs	r3, #234	; 0xea
   13130:	005b      	lsls	r3, r3, #1
   13132:	18fb      	adds	r3, r7, r3
   13134:	681b      	ldr	r3, [r3, #0]
   13136:	4a60      	ldr	r2, [pc, #384]	; (132b8 <hmac_sha256_test+0x3f8>)
   13138:	1ad3      	subs	r3, r2, r3
   1313a:	e0d1      	b.n	132e0 <hmac_sha256_test+0x420>
        if (test_hmac[i].input != NULL) {
   1313c:	4b5b      	ldr	r3, [pc, #364]	; (132ac <hmac_sha256_test+0x3ec>)
   1313e:	22ec      	movs	r2, #236	; 0xec
   13140:	0052      	lsls	r2, r2, #1
   13142:	4694      	mov	ip, r2
   13144:	44bc      	add	ip, r7
   13146:	4463      	add	r3, ip
   13148:	22ea      	movs	r2, #234	; 0xea
   1314a:	0052      	lsls	r2, r2, #1
   1314c:	18ba      	adds	r2, r7, r2
   1314e:	6812      	ldr	r2, [r2, #0]
   13150:	0112      	lsls	r2, r2, #4
   13152:	58d3      	ldr	r3, [r2, r3]
   13154:	2b00      	cmp	r3, #0
   13156:	d02f      	beq.n	131b8 <hmac_sha256_test+0x2f8>
            ret = wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
   13158:	4b54      	ldr	r3, [pc, #336]	; (132ac <hmac_sha256_test+0x3ec>)
   1315a:	22ec      	movs	r2, #236	; 0xec
   1315c:	0052      	lsls	r2, r2, #1
   1315e:	4694      	mov	ip, r2
   13160:	44bc      	add	ip, r7
   13162:	4463      	add	r3, ip
   13164:	22ea      	movs	r2, #234	; 0xea
   13166:	0052      	lsls	r2, r2, #1
   13168:	18ba      	adds	r2, r7, r2
   1316a:	6812      	ldr	r2, [r2, #0]
   1316c:	0112      	lsls	r2, r2, #4
   1316e:	58d1      	ldr	r1, [r2, r3]
                       (word32)test_hmac[i].inLen);
   13170:	4b4e      	ldr	r3, [pc, #312]	; (132ac <hmac_sha256_test+0x3ec>)
   13172:	22ec      	movs	r2, #236	; 0xec
   13174:	0052      	lsls	r2, r2, #1
   13176:	18ba      	adds	r2, r7, r2
   13178:	18d2      	adds	r2, r2, r3
   1317a:	23ea      	movs	r3, #234	; 0xea
   1317c:	005b      	lsls	r3, r3, #1
   1317e:	18fb      	adds	r3, r7, r3
   13180:	681b      	ldr	r3, [r3, #0]
   13182:	011b      	lsls	r3, r3, #4
   13184:	18d3      	adds	r3, r2, r3
   13186:	3308      	adds	r3, #8
   13188:	681a      	ldr	r2, [r3, #0]
        ret = wc_HmacSetKey(&hmac, WC_SHA256, (byte*)keys[i],
            (word32)XSTRLEN(keys[i]));
        if (ret != 0)
            return -3510 - i;
        if (test_hmac[i].input != NULL) {
            ret = wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
   1318a:	23b4      	movs	r3, #180	; 0xb4
   1318c:	18fb      	adds	r3, r7, r3
   1318e:	0018      	movs	r0, r3
   13190:	f7f7 f82c 	bl	a1ec <wc_HmacUpdate>
   13194:	0003      	movs	r3, r0
   13196:	22e6      	movs	r2, #230	; 0xe6
   13198:	0052      	lsls	r2, r2, #1
   1319a:	18ba      	adds	r2, r7, r2
   1319c:	6013      	str	r3, [r2, #0]
                       (word32)test_hmac[i].inLen);
            if (ret != 0)
   1319e:	23e6      	movs	r3, #230	; 0xe6
   131a0:	005b      	lsls	r3, r3, #1
   131a2:	18fb      	adds	r3, r7, r3
   131a4:	681b      	ldr	r3, [r3, #0]
   131a6:	2b00      	cmp	r3, #0
   131a8:	d006      	beq.n	131b8 <hmac_sha256_test+0x2f8>
                return -3520 - i;
   131aa:	23ea      	movs	r3, #234	; 0xea
   131ac:	005b      	lsls	r3, r3, #1
   131ae:	18fb      	adds	r3, r7, r3
   131b0:	681b      	ldr	r3, [r3, #0]
   131b2:	4a42      	ldr	r2, [pc, #264]	; (132bc <hmac_sha256_test+0x3fc>)
   131b4:	1ad3      	subs	r3, r2, r3
   131b6:	e093      	b.n	132e0 <hmac_sha256_test+0x420>
        }
        ret = wc_HmacFinal(&hmac, hash);
   131b8:	2394      	movs	r3, #148	; 0x94
   131ba:	18fa      	adds	r2, r7, r3
   131bc:	23b4      	movs	r3, #180	; 0xb4
   131be:	18fb      	adds	r3, r7, r3
   131c0:	0011      	movs	r1, r2
   131c2:	0018      	movs	r0, r3
   131c4:	f7f7 f858 	bl	a278 <wc_HmacFinal>
   131c8:	0003      	movs	r3, r0
   131ca:	22e6      	movs	r2, #230	; 0xe6
   131cc:	0052      	lsls	r2, r2, #1
   131ce:	18ba      	adds	r2, r7, r2
   131d0:	6013      	str	r3, [r2, #0]
        if (ret != 0)
   131d2:	23e6      	movs	r3, #230	; 0xe6
   131d4:	005b      	lsls	r3, r3, #1
   131d6:	18fb      	adds	r3, r7, r3
   131d8:	681b      	ldr	r3, [r3, #0]
   131da:	2b00      	cmp	r3, #0
   131dc:	d006      	beq.n	131ec <hmac_sha256_test+0x32c>
            return -3530 - i;
   131de:	23ea      	movs	r3, #234	; 0xea
   131e0:	005b      	lsls	r3, r3, #1
   131e2:	18fb      	adds	r3, r7, r3
   131e4:	681b      	ldr	r3, [r3, #0]
   131e6:	4a36      	ldr	r2, [pc, #216]	; (132c0 <hmac_sha256_test+0x400>)
   131e8:	1ad3      	subs	r3, r2, r3
   131ea:	e079      	b.n	132e0 <hmac_sha256_test+0x420>

        if (XMEMCMP(hash, test_hmac[i].output, WC_SHA256_DIGEST_SIZE) != 0)
   131ec:	4b2f      	ldr	r3, [pc, #188]	; (132ac <hmac_sha256_test+0x3ec>)
   131ee:	22ec      	movs	r2, #236	; 0xec
   131f0:	0052      	lsls	r2, r2, #1
   131f2:	18ba      	adds	r2, r7, r2
   131f4:	18d2      	adds	r2, r2, r3
   131f6:	23ea      	movs	r3, #234	; 0xea
   131f8:	005b      	lsls	r3, r3, #1
   131fa:	18fb      	adds	r3, r7, r3
   131fc:	681b      	ldr	r3, [r3, #0]
   131fe:	011b      	lsls	r3, r3, #4
   13200:	18d3      	adds	r3, r2, r3
   13202:	3304      	adds	r3, #4
   13204:	6819      	ldr	r1, [r3, #0]
   13206:	2394      	movs	r3, #148	; 0x94
   13208:	18fb      	adds	r3, r7, r3
   1320a:	2220      	movs	r2, #32
   1320c:	0018      	movs	r0, r3
   1320e:	f012 fa5f 	bl	256d0 <memcmp>
   13212:	1e03      	subs	r3, r0, #0
   13214:	d006      	beq.n	13224 <hmac_sha256_test+0x364>
            return -3540 - i;
   13216:	23ea      	movs	r3, #234	; 0xea
   13218:	005b      	lsls	r3, r3, #1
   1321a:	18fb      	adds	r3, r7, r3
   1321c:	681b      	ldr	r3, [r3, #0]
   1321e:	4a29      	ldr	r2, [pc, #164]	; (132c4 <hmac_sha256_test+0x404>)
   13220:	1ad3      	subs	r3, r2, r3
   13222:	e05d      	b.n	132e0 <hmac_sha256_test+0x420>

        wc_HmacFree(&hmac);
   13224:	23b4      	movs	r3, #180	; 0xb4
   13226:	18fb      	adds	r3, r7, r3
   13228:	0018      	movs	r0, r3
   1322a:	f7f7 f8e3 	bl	a3f4 <wc_HmacFree>
    test_hmac[0] = a;
    test_hmac[1] = b;
    test_hmac[2] = c;
    test_hmac[3] = d;

    for (i = 0; i < times; ++i) {
   1322e:	23ea      	movs	r3, #234	; 0xea
   13230:	005b      	lsls	r3, r3, #1
   13232:	18fb      	adds	r3, r7, r3
   13234:	681b      	ldr	r3, [r3, #0]
   13236:	3301      	adds	r3, #1
   13238:	22ea      	movs	r2, #234	; 0xea
   1323a:	0052      	lsls	r2, r2, #1
   1323c:	18ba      	adds	r2, r7, r2
   1323e:	6013      	str	r3, [r2, #0]
   13240:	23ea      	movs	r3, #234	; 0xea
   13242:	005b      	lsls	r3, r3, #1
   13244:	18fb      	adds	r3, r7, r3
   13246:	681a      	ldr	r2, [r3, #0]
   13248:	23e8      	movs	r3, #232	; 0xe8
   1324a:	005b      	lsls	r3, r3, #1
   1324c:	18fb      	adds	r3, r7, r3
   1324e:	681b      	ldr	r3, [r3, #0]
   13250:	429a      	cmp	r2, r3
   13252:	da00      	bge.n	13256 <hmac_sha256_test+0x396>
   13254:	e72d      	b.n	130b2 <hmac_sha256_test+0x1f2>

        wc_HmacFree(&hmac);
    }

#ifndef HAVE_FIPS
    if (wc_HmacSizeByType(WC_SHA256) != WC_SHA256_DIGEST_SIZE)
   13256:	2006      	movs	r0, #6
   13258:	f7f6 fe30 	bl	9ebc <wc_HmacSizeByType>
   1325c:	0003      	movs	r3, r0
   1325e:	2b20      	cmp	r3, #32
   13260:	d001      	beq.n	13266 <hmac_sha256_test+0x3a6>
        return -3550;
   13262:	4b19      	ldr	r3, [pc, #100]	; (132c8 <hmac_sha256_test+0x408>)
   13264:	e03c      	b.n	132e0 <hmac_sha256_test+0x420>
    if (wc_HmacSizeByType(20) != BAD_FUNC_ARG)
   13266:	2014      	movs	r0, #20
   13268:	f7f6 fe28 	bl	9ebc <wc_HmacSizeByType>
   1326c:	0003      	movs	r3, r0
   1326e:	33ad      	adds	r3, #173	; 0xad
   13270:	d02e      	beq.n	132d0 <hmac_sha256_test+0x410>
        return -3551;
   13272:	4b16      	ldr	r3, [pc, #88]	; (132cc <hmac_sha256_test+0x40c>)
   13274:	e034      	b.n	132e0 <hmac_sha256_test+0x420>
   13276:	46c0      	nop			; (mov r8, r8)
   13278:	fffffeac 	.word	0xfffffeac
   1327c:	0002d264 	.word	0x0002d264
   13280:	fffffe9c 	.word	0xfffffe9c
   13284:	0002d0e8 	.word	0x0002d0e8
   13288:	0002d1d4 	.word	0x0002d1d4
   1328c:	fffffe8c 	.word	0xfffffe8c
   13290:	0002d10c 	.word	0x0002d10c
   13294:	0002d1f8 	.word	0x0002d1f8
   13298:	fffffe7c 	.word	0xfffffe7c
   1329c:	0002d144 	.word	0x0002d144
   132a0:	0002d21c 	.word	0x0002d21c
   132a4:	fffffe6c 	.word	0xfffffe6c
   132a8:	0002d240 	.word	0x0002d240
   132ac:	fffffe2c 	.word	0xfffffe2c
   132b0:	20000010 	.word	0x20000010
   132b4:	fffff254 	.word	0xfffff254
   132b8:	fffff24a 	.word	0xfffff24a
   132bc:	fffff240 	.word	0xfffff240
   132c0:	fffff236 	.word	0xfffff236
   132c4:	fffff22c 	.word	0xfffff22c
   132c8:	fffff222 	.word	0xfffff222
   132cc:	fffff221 	.word	0xfffff221
#endif
    if (wolfSSL_GetHmacMaxSize() != WC_MAX_DIGEST_SIZE)
   132d0:	f7f7 f8c2 	bl	a458 <wolfSSL_GetHmacMaxSize>
   132d4:	0003      	movs	r3, r0
   132d6:	2b20      	cmp	r3, #32
   132d8:	d001      	beq.n	132de <hmac_sha256_test+0x41e>
        return -3552;
   132da:	4b03      	ldr	r3, [pc, #12]	; (132e8 <hmac_sha256_test+0x428>)
   132dc:	e000      	b.n	132e0 <hmac_sha256_test+0x420>

    return 0;
   132de:	2300      	movs	r3, #0
}
   132e0:	0018      	movs	r0, r3
   132e2:	46bd      	mov	sp, r7
   132e4:	b077      	add	sp, #476	; 0x1dc
   132e6:	bd90      	pop	{r4, r7, pc}
   132e8:	fffff220 	.word	0xfffff220

000132ec <aes_key_size_test>:
        return ret;
    }
#endif /* WOLFSSL_AES_CFB */

static int aes_key_size_test(void)
{
   132ec:	b590      	push	{r4, r7, lr}
   132ee:	b0eb      	sub	sp, #428	; 0x1ac
   132f0:	af02      	add	r7, sp, #8
    int    ret;
    Aes    aes;
    byte   key16[] = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
   132f2:	4bc5      	ldr	r3, [pc, #788]	; (13608 <aes_key_size_test+0x31c>)
   132f4:	22d0      	movs	r2, #208	; 0xd0
   132f6:	0052      	lsls	r2, r2, #1
   132f8:	18ba      	adds	r2, r7, r2
   132fa:	18d2      	adds	r2, r2, r3
   132fc:	4bc3      	ldr	r3, [pc, #780]	; (1360c <aes_key_size_test+0x320>)
   132fe:	0010      	movs	r0, r2
   13300:	0019      	movs	r1, r3
   13302:	2310      	movs	r3, #16
   13304:	001a      	movs	r2, r3
   13306:	f012 f9f2 	bl	256ee <memcpy>
                       0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66 };
    byte   key24[] = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
   1330a:	4bc1      	ldr	r3, [pc, #772]	; (13610 <aes_key_size_test+0x324>)
   1330c:	22d0      	movs	r2, #208	; 0xd0
   1330e:	0052      	lsls	r2, r2, #1
   13310:	18ba      	adds	r2, r7, r2
   13312:	18d2      	adds	r2, r2, r3
   13314:	4bbf      	ldr	r3, [pc, #764]	; (13614 <aes_key_size_test+0x328>)
   13316:	0010      	movs	r0, r2
   13318:	0019      	movs	r1, r3
   1331a:	2318      	movs	r3, #24
   1331c:	001a      	movs	r2, r3
   1331e:	f012 f9e6 	bl	256ee <memcpy>
                       0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,
                       0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37 };
    byte   key32[] = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
   13322:	4bbd      	ldr	r3, [pc, #756]	; (13618 <aes_key_size_test+0x32c>)
   13324:	22d0      	movs	r2, #208	; 0xd0
   13326:	0052      	lsls	r2, r2, #1
   13328:	18ba      	adds	r2, r7, r2
   1332a:	18d2      	adds	r2, r2, r3
   1332c:	4bbb      	ldr	r3, [pc, #748]	; (1361c <aes_key_size_test+0x330>)
   1332e:	0010      	movs	r0, r2
   13330:	0019      	movs	r1, r3
   13332:	2320      	movs	r3, #32
   13334:	001a      	movs	r2, r3
   13336:	f012 f9da 	bl	256ee <memcpy>
                       0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,
                       0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                       0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66 };
    byte   iv[]    = "1234567890abcdef";
   1333a:	4bb9      	ldr	r3, [pc, #740]	; (13620 <aes_key_size_test+0x334>)
   1333c:	22d0      	movs	r2, #208	; 0xd0
   1333e:	0052      	lsls	r2, r2, #1
   13340:	4694      	mov	ip, r2
   13342:	44bc      	add	ip, r7
   13344:	4463      	add	r3, ip
   13346:	4ab7      	ldr	r2, [pc, #732]	; (13624 <aes_key_size_test+0x338>)
   13348:	ca13      	ldmia	r2!, {r0, r1, r4}
   1334a:	c313      	stmia	r3!, {r0, r1, r4}
   1334c:	6811      	ldr	r1, [r2, #0]
   1334e:	6019      	str	r1, [r3, #0]
   13350:	7912      	ldrb	r2, [r2, #4]
   13352:	711a      	strb	r2, [r3, #4]
#ifndef HAVE_FIPS
    word32 keySize;
#endif

    ret = wc_AesInit(NULL, HEAP_HINT, devId);
   13354:	4bb4      	ldr	r3, [pc, #720]	; (13628 <aes_key_size_test+0x33c>)
   13356:	681b      	ldr	r3, [r3, #0]
   13358:	001a      	movs	r2, r3
   1335a:	2100      	movs	r1, #0
   1335c:	2000      	movs	r0, #0
   1335e:	f7f6 fd5d 	bl	9e1c <wc_AesInit>
   13362:	0003      	movs	r3, r0
   13364:	22ce      	movs	r2, #206	; 0xce
   13366:	0052      	lsls	r2, r2, #1
   13368:	18ba      	adds	r2, r7, r2
   1336a:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   1336c:	23ce      	movs	r3, #206	; 0xce
   1336e:	005b      	lsls	r3, r3, #1
   13370:	18fb      	adds	r3, r7, r3
   13372:	681b      	ldr	r3, [r3, #0]
   13374:	33ad      	adds	r3, #173	; 0xad
   13376:	d001      	beq.n	1337c <aes_key_size_test+0x90>
        return -4800;
   13378:	4bac      	ldr	r3, [pc, #688]	; (1362c <aes_key_size_test+0x340>)
   1337a:	e140      	b.n	135fe <aes_key_size_test+0x312>
    ret = wc_AesInit(&aes, HEAP_HINT, devId);
   1337c:	4baa      	ldr	r3, [pc, #680]	; (13628 <aes_key_size_test+0x33c>)
   1337e:	681a      	ldr	r2, [r3, #0]
   13380:	2364      	movs	r3, #100	; 0x64
   13382:	18fb      	adds	r3, r7, r3
   13384:	2100      	movs	r1, #0
   13386:	0018      	movs	r0, r3
   13388:	f7f6 fd48 	bl	9e1c <wc_AesInit>
   1338c:	0003      	movs	r3, r0
   1338e:	22ce      	movs	r2, #206	; 0xce
   13390:	0052      	lsls	r2, r2, #1
   13392:	18ba      	adds	r2, r7, r2
   13394:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   13396:	23ce      	movs	r3, #206	; 0xce
   13398:	005b      	lsls	r3, r3, #1
   1339a:	18fb      	adds	r3, r7, r3
   1339c:	681b      	ldr	r3, [r3, #0]
   1339e:	2b00      	cmp	r3, #0
   133a0:	d001      	beq.n	133a6 <aes_key_size_test+0xba>
        return -4801;
   133a2:	4ba3      	ldr	r3, [pc, #652]	; (13630 <aes_key_size_test+0x344>)
   133a4:	e12b      	b.n	135fe <aes_key_size_test+0x312>

#ifndef HAVE_FIPS
    /* Parameter Validation testing. */
    ret = wc_AesGetKeySize(NULL, NULL);
   133a6:	2100      	movs	r1, #0
   133a8:	2000      	movs	r0, #0
   133aa:	f7f6 fd57 	bl	9e5c <wc_AesGetKeySize>
   133ae:	0003      	movs	r3, r0
   133b0:	22ce      	movs	r2, #206	; 0xce
   133b2:	0052      	lsls	r2, r2, #1
   133b4:	18ba      	adds	r2, r7, r2
   133b6:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   133b8:	23ce      	movs	r3, #206	; 0xce
   133ba:	005b      	lsls	r3, r3, #1
   133bc:	18fb      	adds	r3, r7, r3
   133be:	681b      	ldr	r3, [r3, #0]
   133c0:	33ad      	adds	r3, #173	; 0xad
   133c2:	d001      	beq.n	133c8 <aes_key_size_test+0xdc>
        return -4802;
   133c4:	4b9b      	ldr	r3, [pc, #620]	; (13634 <aes_key_size_test+0x348>)
   133c6:	e11a      	b.n	135fe <aes_key_size_test+0x312>
    ret = wc_AesGetKeySize(&aes, NULL);
   133c8:	2364      	movs	r3, #100	; 0x64
   133ca:	18fb      	adds	r3, r7, r3
   133cc:	2100      	movs	r1, #0
   133ce:	0018      	movs	r0, r3
   133d0:	f7f6 fd44 	bl	9e5c <wc_AesGetKeySize>
   133d4:	0003      	movs	r3, r0
   133d6:	22ce      	movs	r2, #206	; 0xce
   133d8:	0052      	lsls	r2, r2, #1
   133da:	18ba      	adds	r2, r7, r2
   133dc:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   133de:	23ce      	movs	r3, #206	; 0xce
   133e0:	005b      	lsls	r3, r3, #1
   133e2:	18fb      	adds	r3, r7, r3
   133e4:	681b      	ldr	r3, [r3, #0]
   133e6:	33ad      	adds	r3, #173	; 0xad
   133e8:	d001      	beq.n	133ee <aes_key_size_test+0x102>
        return -4803;
   133ea:	4b93      	ldr	r3, [pc, #588]	; (13638 <aes_key_size_test+0x34c>)
   133ec:	e107      	b.n	135fe <aes_key_size_test+0x312>
    ret = wc_AesGetKeySize(NULL, &keySize);
   133ee:	1d3b      	adds	r3, r7, #4
   133f0:	0019      	movs	r1, r3
   133f2:	2000      	movs	r0, #0
   133f4:	f7f6 fd32 	bl	9e5c <wc_AesGetKeySize>
   133f8:	0003      	movs	r3, r0
   133fa:	22ce      	movs	r2, #206	; 0xce
   133fc:	0052      	lsls	r2, r2, #1
   133fe:	18ba      	adds	r2, r7, r2
   13400:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   13402:	23ce      	movs	r3, #206	; 0xce
   13404:	005b      	lsls	r3, r3, #1
   13406:	18fb      	adds	r3, r7, r3
   13408:	681b      	ldr	r3, [r3, #0]
   1340a:	33ad      	adds	r3, #173	; 0xad
   1340c:	d001      	beq.n	13412 <aes_key_size_test+0x126>
        return -4804;
   1340e:	4b8b      	ldr	r3, [pc, #556]	; (1363c <aes_key_size_test+0x350>)
   13410:	e0f5      	b.n	135fe <aes_key_size_test+0x312>
    /* Crashes in FIPS */
    ret = wc_AesSetKey(NULL, key16, sizeof(key16), iv, AES_ENCRYPTION);
   13412:	2308      	movs	r3, #8
   13414:	18fa      	adds	r2, r7, r3
   13416:	2354      	movs	r3, #84	; 0x54
   13418:	18f9      	adds	r1, r7, r3
   1341a:	2300      	movs	r3, #0
   1341c:	9300      	str	r3, [sp, #0]
   1341e:	0013      	movs	r3, r2
   13420:	2210      	movs	r2, #16
   13422:	2000      	movs	r0, #0
   13424:	f7f5 fde0 	bl	8fe8 <wc_AesSetKey>
   13428:	0003      	movs	r3, r0
   1342a:	22ce      	movs	r2, #206	; 0xce
   1342c:	0052      	lsls	r2, r2, #1
   1342e:	18ba      	adds	r2, r7, r2
   13430:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   13432:	23ce      	movs	r3, #206	; 0xce
   13434:	005b      	lsls	r3, r3, #1
   13436:	18fb      	adds	r3, r7, r3
   13438:	681b      	ldr	r3, [r3, #0]
   1343a:	33ad      	adds	r3, #173	; 0xad
   1343c:	d001      	beq.n	13442 <aes_key_size_test+0x156>
        return -4805;
   1343e:	4b80      	ldr	r3, [pc, #512]	; (13640 <aes_key_size_test+0x354>)
   13440:	e0dd      	b.n	135fe <aes_key_size_test+0x312>
#endif
    /* NULL IV indicates to use all zeros IV. */
    ret = wc_AesSetKey(&aes, key16, sizeof(key16), NULL, AES_ENCRYPTION);
   13442:	2354      	movs	r3, #84	; 0x54
   13444:	18f9      	adds	r1, r7, r3
   13446:	2364      	movs	r3, #100	; 0x64
   13448:	18f8      	adds	r0, r7, r3
   1344a:	2300      	movs	r3, #0
   1344c:	9300      	str	r3, [sp, #0]
   1344e:	2300      	movs	r3, #0
   13450:	2210      	movs	r2, #16
   13452:	f7f5 fdc9 	bl	8fe8 <wc_AesSetKey>
   13456:	0003      	movs	r3, r0
   13458:	22ce      	movs	r2, #206	; 0xce
   1345a:	0052      	lsls	r2, r2, #1
   1345c:	18ba      	adds	r2, r7, r2
   1345e:	6013      	str	r3, [r2, #0]
#ifdef WOLFSSL_AES_128
    if (ret != 0)
   13460:	23ce      	movs	r3, #206	; 0xce
   13462:	005b      	lsls	r3, r3, #1
   13464:	18fb      	adds	r3, r7, r3
   13466:	681b      	ldr	r3, [r3, #0]
   13468:	2b00      	cmp	r3, #0
   1346a:	d001      	beq.n	13470 <aes_key_size_test+0x184>
#else
    if (ret != BAD_FUNC_ARG)
#endif
        return -4806;
   1346c:	4b75      	ldr	r3, [pc, #468]	; (13644 <aes_key_size_test+0x358>)
   1346e:	e0c6      	b.n	135fe <aes_key_size_test+0x312>
    ret = wc_AesSetKey(&aes, key32, sizeof(key32) - 1, iv, AES_ENCRYPTION);
   13470:	2308      	movs	r3, #8
   13472:	18fa      	adds	r2, r7, r3
   13474:	231c      	movs	r3, #28
   13476:	18f9      	adds	r1, r7, r3
   13478:	2364      	movs	r3, #100	; 0x64
   1347a:	18f8      	adds	r0, r7, r3
   1347c:	2300      	movs	r3, #0
   1347e:	9300      	str	r3, [sp, #0]
   13480:	0013      	movs	r3, r2
   13482:	221f      	movs	r2, #31
   13484:	f7f5 fdb0 	bl	8fe8 <wc_AesSetKey>
   13488:	0003      	movs	r3, r0
   1348a:	22ce      	movs	r2, #206	; 0xce
   1348c:	0052      	lsls	r2, r2, #1
   1348e:	18ba      	adds	r2, r7, r2
   13490:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   13492:	23ce      	movs	r3, #206	; 0xce
   13494:	005b      	lsls	r3, r3, #1
   13496:	18fb      	adds	r3, r7, r3
   13498:	681b      	ldr	r3, [r3, #0]
   1349a:	33ad      	adds	r3, #173	; 0xad
   1349c:	d001      	beq.n	134a2 <aes_key_size_test+0x1b6>
        return -4807;
   1349e:	4b6a      	ldr	r3, [pc, #424]	; (13648 <aes_key_size_test+0x35c>)
   134a0:	e0ad      	b.n	135fe <aes_key_size_test+0x312>
#ifndef HAVE_FIPS
    /* Force invalid rounds */
    aes.rounds = 16;
   134a2:	4b6a      	ldr	r3, [pc, #424]	; (1364c <aes_key_size_test+0x360>)
   134a4:	22d0      	movs	r2, #208	; 0xd0
   134a6:	0052      	lsls	r2, r2, #1
   134a8:	4694      	mov	ip, r2
   134aa:	44bc      	add	ip, r7
   134ac:	4463      	add	r3, ip
   134ae:	22f0      	movs	r2, #240	; 0xf0
   134b0:	2110      	movs	r1, #16
   134b2:	5099      	str	r1, [r3, r2]
    ret = wc_AesGetKeySize(&aes, &keySize);
   134b4:	1d3a      	adds	r2, r7, #4
   134b6:	2364      	movs	r3, #100	; 0x64
   134b8:	18fb      	adds	r3, r7, r3
   134ba:	0011      	movs	r1, r2
   134bc:	0018      	movs	r0, r3
   134be:	f7f6 fccd 	bl	9e5c <wc_AesGetKeySize>
   134c2:	0003      	movs	r3, r0
   134c4:	22ce      	movs	r2, #206	; 0xce
   134c6:	0052      	lsls	r2, r2, #1
   134c8:	18ba      	adds	r2, r7, r2
   134ca:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG)
   134cc:	23ce      	movs	r3, #206	; 0xce
   134ce:	005b      	lsls	r3, r3, #1
   134d0:	18fb      	adds	r3, r7, r3
   134d2:	681b      	ldr	r3, [r3, #0]
   134d4:	33ad      	adds	r3, #173	; 0xad
   134d6:	d001      	beq.n	134dc <aes_key_size_test+0x1f0>
        return -4808;
   134d8:	4b5d      	ldr	r3, [pc, #372]	; (13650 <aes_key_size_test+0x364>)
   134da:	e090      	b.n	135fe <aes_key_size_test+0x312>
#endif

    ret = wc_AesSetKey(&aes, key16, sizeof(key16), iv, AES_ENCRYPTION);
   134dc:	2308      	movs	r3, #8
   134de:	18fa      	adds	r2, r7, r3
   134e0:	2354      	movs	r3, #84	; 0x54
   134e2:	18f9      	adds	r1, r7, r3
   134e4:	2364      	movs	r3, #100	; 0x64
   134e6:	18f8      	adds	r0, r7, r3
   134e8:	2300      	movs	r3, #0
   134ea:	9300      	str	r3, [sp, #0]
   134ec:	0013      	movs	r3, r2
   134ee:	2210      	movs	r2, #16
   134f0:	f7f5 fd7a 	bl	8fe8 <wc_AesSetKey>
   134f4:	0003      	movs	r3, r0
   134f6:	22ce      	movs	r2, #206	; 0xce
   134f8:	0052      	lsls	r2, r2, #1
   134fa:	18ba      	adds	r2, r7, r2
   134fc:	6013      	str	r3, [r2, #0]
#ifdef WOLFSSL_AES_128
    if (ret != 0)
   134fe:	23ce      	movs	r3, #206	; 0xce
   13500:	005b      	lsls	r3, r3, #1
   13502:	18fb      	adds	r3, r7, r3
   13504:	681b      	ldr	r3, [r3, #0]
   13506:	2b00      	cmp	r3, #0
   13508:	d001      	beq.n	1350e <aes_key_size_test+0x222>
#else
    if (ret != BAD_FUNC_ARG)
#endif
        return -4809;
   1350a:	4b52      	ldr	r3, [pc, #328]	; (13654 <aes_key_size_test+0x368>)
   1350c:	e077      	b.n	135fe <aes_key_size_test+0x312>
#if !defined(HAVE_FIPS) && defined(WOLFSSL_AES_128)
    ret = wc_AesGetKeySize(&aes, &keySize);
   1350e:	1d3a      	adds	r2, r7, #4
   13510:	2364      	movs	r3, #100	; 0x64
   13512:	18fb      	adds	r3, r7, r3
   13514:	0011      	movs	r1, r2
   13516:	0018      	movs	r0, r3
   13518:	f7f6 fca0 	bl	9e5c <wc_AesGetKeySize>
   1351c:	0003      	movs	r3, r0
   1351e:	22ce      	movs	r2, #206	; 0xce
   13520:	0052      	lsls	r2, r2, #1
   13522:	18ba      	adds	r2, r7, r2
   13524:	6013      	str	r3, [r2, #0]
    if (ret != 0 || keySize != sizeof(key16))
   13526:	23ce      	movs	r3, #206	; 0xce
   13528:	005b      	lsls	r3, r3, #1
   1352a:	18fb      	adds	r3, r7, r3
   1352c:	681b      	ldr	r3, [r3, #0]
   1352e:	2b00      	cmp	r3, #0
   13530:	d102      	bne.n	13538 <aes_key_size_test+0x24c>
   13532:	687b      	ldr	r3, [r7, #4]
   13534:	2b10      	cmp	r3, #16
   13536:	d001      	beq.n	1353c <aes_key_size_test+0x250>
        return -4810;
   13538:	4b47      	ldr	r3, [pc, #284]	; (13658 <aes_key_size_test+0x36c>)
   1353a:	e060      	b.n	135fe <aes_key_size_test+0x312>
#endif

    ret = wc_AesSetKey(&aes, key24, sizeof(key24), iv, AES_ENCRYPTION);
   1353c:	2308      	movs	r3, #8
   1353e:	18fa      	adds	r2, r7, r3
   13540:	233c      	movs	r3, #60	; 0x3c
   13542:	18f9      	adds	r1, r7, r3
   13544:	2364      	movs	r3, #100	; 0x64
   13546:	18f8      	adds	r0, r7, r3
   13548:	2300      	movs	r3, #0
   1354a:	9300      	str	r3, [sp, #0]
   1354c:	0013      	movs	r3, r2
   1354e:	2218      	movs	r2, #24
   13550:	f7f5 fd4a 	bl	8fe8 <wc_AesSetKey>
   13554:	0003      	movs	r3, r0
   13556:	22ce      	movs	r2, #206	; 0xce
   13558:	0052      	lsls	r2, r2, #1
   1355a:	18ba      	adds	r2, r7, r2
   1355c:	6013      	str	r3, [r2, #0]
#ifdef WOLFSSL_AES_192
    if (ret != 0)
   1355e:	23ce      	movs	r3, #206	; 0xce
   13560:	005b      	lsls	r3, r3, #1
   13562:	18fb      	adds	r3, r7, r3
   13564:	681b      	ldr	r3, [r3, #0]
   13566:	2b00      	cmp	r3, #0
   13568:	d001      	beq.n	1356e <aes_key_size_test+0x282>
#else
    if (ret != BAD_FUNC_ARG)
#endif
        return -4811;
   1356a:	4b3c      	ldr	r3, [pc, #240]	; (1365c <aes_key_size_test+0x370>)
   1356c:	e047      	b.n	135fe <aes_key_size_test+0x312>
#if !defined(HAVE_FIPS) && defined(WOLFSSL_AES_192)
    ret = wc_AesGetKeySize(&aes, &keySize);
   1356e:	1d3a      	adds	r2, r7, #4
   13570:	2364      	movs	r3, #100	; 0x64
   13572:	18fb      	adds	r3, r7, r3
   13574:	0011      	movs	r1, r2
   13576:	0018      	movs	r0, r3
   13578:	f7f6 fc70 	bl	9e5c <wc_AesGetKeySize>
   1357c:	0003      	movs	r3, r0
   1357e:	22ce      	movs	r2, #206	; 0xce
   13580:	0052      	lsls	r2, r2, #1
   13582:	18ba      	adds	r2, r7, r2
   13584:	6013      	str	r3, [r2, #0]
    if (ret != 0 || keySize != sizeof(key24))
   13586:	23ce      	movs	r3, #206	; 0xce
   13588:	005b      	lsls	r3, r3, #1
   1358a:	18fb      	adds	r3, r7, r3
   1358c:	681b      	ldr	r3, [r3, #0]
   1358e:	2b00      	cmp	r3, #0
   13590:	d102      	bne.n	13598 <aes_key_size_test+0x2ac>
   13592:	687b      	ldr	r3, [r7, #4]
   13594:	2b18      	cmp	r3, #24
   13596:	d001      	beq.n	1359c <aes_key_size_test+0x2b0>
        return -4812;
   13598:	4b31      	ldr	r3, [pc, #196]	; (13660 <aes_key_size_test+0x374>)
   1359a:	e030      	b.n	135fe <aes_key_size_test+0x312>
#endif

    ret = wc_AesSetKey(&aes, key32, sizeof(key32), iv, AES_ENCRYPTION);
   1359c:	2308      	movs	r3, #8
   1359e:	18fa      	adds	r2, r7, r3
   135a0:	231c      	movs	r3, #28
   135a2:	18f9      	adds	r1, r7, r3
   135a4:	2364      	movs	r3, #100	; 0x64
   135a6:	18f8      	adds	r0, r7, r3
   135a8:	2300      	movs	r3, #0
   135aa:	9300      	str	r3, [sp, #0]
   135ac:	0013      	movs	r3, r2
   135ae:	2220      	movs	r2, #32
   135b0:	f7f5 fd1a 	bl	8fe8 <wc_AesSetKey>
   135b4:	0003      	movs	r3, r0
   135b6:	22ce      	movs	r2, #206	; 0xce
   135b8:	0052      	lsls	r2, r2, #1
   135ba:	18ba      	adds	r2, r7, r2
   135bc:	6013      	str	r3, [r2, #0]
#ifdef WOLFSSL_AES_256
    if (ret != 0)
   135be:	23ce      	movs	r3, #206	; 0xce
   135c0:	005b      	lsls	r3, r3, #1
   135c2:	18fb      	adds	r3, r7, r3
   135c4:	681b      	ldr	r3, [r3, #0]
   135c6:	2b00      	cmp	r3, #0
   135c8:	d001      	beq.n	135ce <aes_key_size_test+0x2e2>
#else
    if (ret != BAD_FUNC_ARG)
#endif
        return -4813;
   135ca:	4b26      	ldr	r3, [pc, #152]	; (13664 <aes_key_size_test+0x378>)
   135cc:	e017      	b.n	135fe <aes_key_size_test+0x312>
#if !defined(HAVE_FIPS) && defined(WOLFSSL_AES_256)
    ret = wc_AesGetKeySize(&aes, &keySize);
   135ce:	1d3a      	adds	r2, r7, #4
   135d0:	2364      	movs	r3, #100	; 0x64
   135d2:	18fb      	adds	r3, r7, r3
   135d4:	0011      	movs	r1, r2
   135d6:	0018      	movs	r0, r3
   135d8:	f7f6 fc40 	bl	9e5c <wc_AesGetKeySize>
   135dc:	0003      	movs	r3, r0
   135de:	22ce      	movs	r2, #206	; 0xce
   135e0:	0052      	lsls	r2, r2, #1
   135e2:	18ba      	adds	r2, r7, r2
   135e4:	6013      	str	r3, [r2, #0]
    if (ret != 0 || keySize != sizeof(key32))
   135e6:	23ce      	movs	r3, #206	; 0xce
   135e8:	005b      	lsls	r3, r3, #1
   135ea:	18fb      	adds	r3, r7, r3
   135ec:	681b      	ldr	r3, [r3, #0]
   135ee:	2b00      	cmp	r3, #0
   135f0:	d102      	bne.n	135f8 <aes_key_size_test+0x30c>
   135f2:	687b      	ldr	r3, [r7, #4]
   135f4:	2b20      	cmp	r3, #32
   135f6:	d001      	beq.n	135fc <aes_key_size_test+0x310>
        return -4814;
   135f8:	4b1b      	ldr	r3, [pc, #108]	; (13668 <aes_key_size_test+0x37c>)
   135fa:	e000      	b.n	135fe <aes_key_size_test+0x312>
#endif

    return 0;
   135fc:	2300      	movs	r3, #0
}
   135fe:	0018      	movs	r0, r3
   13600:	46bd      	mov	sp, r7
   13602:	b069      	add	sp, #420	; 0x1a4
   13604:	bd90      	pop	{r4, r7, pc}
   13606:	46c0      	nop			; (mov r8, r8)
   13608:	fffffeb4 	.word	0xfffffeb4
   1360c:	0002d274 	.word	0x0002d274
   13610:	fffffe9c 	.word	0xfffffe9c
   13614:	0002d284 	.word	0x0002d284
   13618:	fffffe7c 	.word	0xfffffe7c
   1361c:	0002d29c 	.word	0x0002d29c
   13620:	fffffe68 	.word	0xfffffe68
   13624:	0002d2bc 	.word	0x0002d2bc
   13628:	20000010 	.word	0x20000010
   1362c:	ffffed40 	.word	0xffffed40
   13630:	ffffed3f 	.word	0xffffed3f
   13634:	ffffed3e 	.word	0xffffed3e
   13638:	ffffed3d 	.word	0xffffed3d
   1363c:	ffffed3c 	.word	0xffffed3c
   13640:	ffffed3b 	.word	0xffffed3b
   13644:	ffffed3a 	.word	0xffffed3a
   13648:	ffffed39 	.word	0xffffed39
   1364c:	fffffec4 	.word	0xfffffec4
   13650:	ffffed38 	.word	0xffffed38
   13654:	ffffed37 	.word	0xffffed37
   13658:	ffffed36 	.word	0xffffed36
   1365c:	ffffed35 	.word	0xffffed35
   13660:	ffffed34 	.word	0xffffed34
   13664:	ffffed33 	.word	0xffffed33
   13668:	ffffed32 	.word	0xffffed32

0001366c <aes_cbc_test>:
#endif /* WOLFSSL_AES_128 */
#endif /* WOLFSSL_AES_XTS */

#if defined(HAVE_AES_CBC) && defined(WOLFSSL_AES_128)
static int aes_cbc_test(void)
{
   1366c:	b590      	push	{r4, r7, lr}
   1366e:	b09d      	sub	sp, #116	; 0x74
   13670:	af02      	add	r7, sp, #8
    byte cipher[AES_BLOCK_SIZE];
    byte plain[AES_BLOCK_SIZE];
    int  ret;
    const byte msg[] = { /* "Now is the time for all " w/o trailing 0 */
   13672:	232c      	movs	r3, #44	; 0x2c
   13674:	18fa      	adds	r2, r7, r3
   13676:	4b43      	ldr	r3, [pc, #268]	; (13784 <aes_cbc_test+0x118>)
   13678:	0010      	movs	r0, r2
   1367a:	0019      	movs	r1, r3
   1367c:	2318      	movs	r3, #24
   1367e:	001a      	movs	r2, r3
   13680:	f012 f835 	bl	256ee <memcpy>
        0x6e,0x6f,0x77,0x20,0x69,0x73,0x20,0x74,
        0x68,0x65,0x20,0x74,0x69,0x6d,0x65,0x20,
        0x66,0x6f,0x72,0x20,0x61,0x6c,0x6c,0x20
    };
    byte key[] = "0123456789abcdef   ";  /* align */
   13684:	2318      	movs	r3, #24
   13686:	18fb      	adds	r3, r7, r3
   13688:	4a3f      	ldr	r2, [pc, #252]	; (13788 <aes_cbc_test+0x11c>)
   1368a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1368c:	c313      	stmia	r3!, {r0, r1, r4}
   1368e:	ca03      	ldmia	r2!, {r0, r1}
   13690:	c303      	stmia	r3!, {r0, r1}
    byte iv[]  = "1234567890abcdef   ";  /* align */
   13692:	1d3b      	adds	r3, r7, #4
   13694:	4a3d      	ldr	r2, [pc, #244]	; (1378c <aes_cbc_test+0x120>)
   13696:	ca13      	ldmia	r2!, {r0, r1, r4}
   13698:	c313      	stmia	r3!, {r0, r1, r4}
   1369a:	ca03      	ldmia	r2!, {r0, r1}
   1369c:	c303      	stmia	r3!, {r0, r1}

    XMEMSET(cipher, 0, AES_BLOCK_SIZE);
   1369e:	2354      	movs	r3, #84	; 0x54
   136a0:	18fb      	adds	r3, r7, r3
   136a2:	2210      	movs	r2, #16
   136a4:	2100      	movs	r1, #0
   136a6:	0018      	movs	r0, r3
   136a8:	f012 f83f 	bl	2572a <memset>
    XMEMSET(plain, 0, AES_BLOCK_SIZE);
   136ac:	2344      	movs	r3, #68	; 0x44
   136ae:	18fb      	adds	r3, r7, r3
   136b0:	2210      	movs	r2, #16
   136b2:	2100      	movs	r1, #0
   136b4:	0018      	movs	r0, r3
   136b6:	f012 f838 	bl	2572a <memset>

    /* Parameter Validation testing. */
    ret = wc_AesCbcEncryptWithKey(cipher, msg, AES_BLOCK_SIZE, key, 17, NULL);
   136ba:	2318      	movs	r3, #24
   136bc:	18fa      	adds	r2, r7, r3
   136be:	232c      	movs	r3, #44	; 0x2c
   136c0:	18f9      	adds	r1, r7, r3
   136c2:	2354      	movs	r3, #84	; 0x54
   136c4:	18f8      	adds	r0, r7, r3
   136c6:	2300      	movs	r3, #0
   136c8:	9301      	str	r3, [sp, #4]
   136ca:	2311      	movs	r3, #17
   136cc:	9300      	str	r3, [sp, #0]
   136ce:	0013      	movs	r3, r2
   136d0:	2210      	movs	r2, #16
   136d2:	f7f1 ff69 	bl	55a8 <wc_AesCbcEncryptWithKey>
   136d6:	0003      	movs	r3, r0
   136d8:	667b      	str	r3, [r7, #100]	; 0x64
    if (ret != BAD_FUNC_ARG)
   136da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   136dc:	33ad      	adds	r3, #173	; 0xad
   136de:	d001      	beq.n	136e4 <aes_cbc_test+0x78>
        return -5300;
   136e0:	4b2b      	ldr	r3, [pc, #172]	; (13790 <aes_cbc_test+0x124>)
   136e2:	e04b      	b.n	1377c <aes_cbc_test+0x110>
#ifdef HAVE_AES_DECRYPT
    ret = wc_AesCbcDecryptWithKey(plain, cipher, AES_BLOCK_SIZE, key, 17, NULL);
   136e4:	2318      	movs	r3, #24
   136e6:	18fa      	adds	r2, r7, r3
   136e8:	2354      	movs	r3, #84	; 0x54
   136ea:	18f9      	adds	r1, r7, r3
   136ec:	2344      	movs	r3, #68	; 0x44
   136ee:	18f8      	adds	r0, r7, r3
   136f0:	2300      	movs	r3, #0
   136f2:	9301      	str	r3, [sp, #4]
   136f4:	2311      	movs	r3, #17
   136f6:	9300      	str	r3, [sp, #0]
   136f8:	0013      	movs	r3, r2
   136fa:	2210      	movs	r2, #16
   136fc:	f7f1 fef8 	bl	54f0 <wc_AesCbcDecryptWithKey>
   13700:	0003      	movs	r3, r0
   13702:	667b      	str	r3, [r7, #100]	; 0x64
    if (ret != BAD_FUNC_ARG)
   13704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   13706:	33ad      	adds	r3, #173	; 0xad
   13708:	d001      	beq.n	1370e <aes_cbc_test+0xa2>
        return -5301;
   1370a:	4b22      	ldr	r3, [pc, #136]	; (13794 <aes_cbc_test+0x128>)
   1370c:	e036      	b.n	1377c <aes_cbc_test+0x110>
#endif

    ret = wc_AesCbcEncryptWithKey(cipher, msg, AES_BLOCK_SIZE, key,
   1370e:	2318      	movs	r3, #24
   13710:	18fa      	adds	r2, r7, r3
   13712:	232c      	movs	r3, #44	; 0x2c
   13714:	18f9      	adds	r1, r7, r3
   13716:	2354      	movs	r3, #84	; 0x54
   13718:	18f8      	adds	r0, r7, r3
   1371a:	1d3b      	adds	r3, r7, #4
   1371c:	9301      	str	r3, [sp, #4]
   1371e:	2310      	movs	r3, #16
   13720:	9300      	str	r3, [sp, #0]
   13722:	0013      	movs	r3, r2
   13724:	2210      	movs	r2, #16
   13726:	f7f1 ff3f 	bl	55a8 <wc_AesCbcEncryptWithKey>
   1372a:	0003      	movs	r3, r0
   1372c:	667b      	str	r3, [r7, #100]	; 0x64
                                  AES_BLOCK_SIZE, iv);
    if (ret != 0)
   1372e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   13730:	2b00      	cmp	r3, #0
   13732:	d001      	beq.n	13738 <aes_cbc_test+0xcc>
        return -5302;
   13734:	4b18      	ldr	r3, [pc, #96]	; (13798 <aes_cbc_test+0x12c>)
   13736:	e021      	b.n	1377c <aes_cbc_test+0x110>
#ifdef HAVE_AES_DECRYPT
    ret = wc_AesCbcDecryptWithKey(plain, cipher, AES_BLOCK_SIZE, key,
   13738:	2318      	movs	r3, #24
   1373a:	18fa      	adds	r2, r7, r3
   1373c:	2354      	movs	r3, #84	; 0x54
   1373e:	18f9      	adds	r1, r7, r3
   13740:	2344      	movs	r3, #68	; 0x44
   13742:	18f8      	adds	r0, r7, r3
   13744:	1d3b      	adds	r3, r7, #4
   13746:	9301      	str	r3, [sp, #4]
   13748:	2310      	movs	r3, #16
   1374a:	9300      	str	r3, [sp, #0]
   1374c:	0013      	movs	r3, r2
   1374e:	2210      	movs	r2, #16
   13750:	f7f1 fece 	bl	54f0 <wc_AesCbcDecryptWithKey>
   13754:	0003      	movs	r3, r0
   13756:	667b      	str	r3, [r7, #100]	; 0x64
                                  AES_BLOCK_SIZE, iv);
    if (ret != 0)
   13758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1375a:	2b00      	cmp	r3, #0
   1375c:	d001      	beq.n	13762 <aes_cbc_test+0xf6>
        return -5303;
   1375e:	4b0f      	ldr	r3, [pc, #60]	; (1379c <aes_cbc_test+0x130>)
   13760:	e00c      	b.n	1377c <aes_cbc_test+0x110>
    if (XMEMCMP(plain, msg, AES_BLOCK_SIZE) != 0)
   13762:	232c      	movs	r3, #44	; 0x2c
   13764:	18f9      	adds	r1, r7, r3
   13766:	2344      	movs	r3, #68	; 0x44
   13768:	18fb      	adds	r3, r7, r3
   1376a:	2210      	movs	r2, #16
   1376c:	0018      	movs	r0, r3
   1376e:	f011 ffaf 	bl	256d0 <memcmp>
   13772:	1e03      	subs	r3, r0, #0
   13774:	d001      	beq.n	1377a <aes_cbc_test+0x10e>
        return -5304;
   13776:	4b0a      	ldr	r3, [pc, #40]	; (137a0 <aes_cbc_test+0x134>)
   13778:	e000      	b.n	1377c <aes_cbc_test+0x110>
#endif /* HAVE_AES_DECRYPT */

    (void)plain;
    return 0;
   1377a:	2300      	movs	r3, #0
}
   1377c:	0018      	movs	r0, r3
   1377e:	46bd      	mov	sp, r7
   13780:	b01b      	add	sp, #108	; 0x6c
   13782:	bd90      	pop	{r4, r7, pc}
   13784:	0002d2d0 	.word	0x0002d2d0
   13788:	0002d2e8 	.word	0x0002d2e8
   1378c:	0002d2fc 	.word	0x0002d2fc
   13790:	ffffeb4c 	.word	0xffffeb4c
   13794:	ffffeb4b 	.word	0xffffeb4b
   13798:	ffffeb4a 	.word	0xffffeb4a
   1379c:	ffffeb49 	.word	0xffffeb49
   137a0:	ffffeb48 	.word	0xffffeb48

000137a4 <aes_test>:
#endif

int aes_test(void)
{
   137a4:	b590      	push	{r4, r7, lr}
   137a6:	4cdc      	ldr	r4, [pc, #880]	; (13b18 <aes_test+0x374>)
   137a8:	44a5      	add	sp, r4
   137aa:	af02      	add	r7, sp, #8
#if defined(HAVE_AES_DECRYPT) || defined(WOLFSSL_AES_COUNTER)
    Aes dec;
    byte plain [AES_BLOCK_SIZE * 4];
#endif
#endif /* HAVE_AES_CBC || WOLFSSL_AES_COUNTER */
    int  ret = 0;
   137ac:	2300      	movs	r3, #0
   137ae:	22e9      	movs	r2, #233	; 0xe9
   137b0:	0092      	lsls	r2, r2, #2
   137b2:	18ba      	adds	r2, r7, r2
   137b4:	6013      	str	r3, [r2, #0]

#ifdef HAVE_AES_CBC
#ifdef WOLFSSL_AES_128
    const byte msg[] = { /* "Now is the time for all " w/o trailing 0 */
   137b6:	4bd9      	ldr	r3, [pc, #868]	; (13b1c <aes_test+0x378>)
   137b8:	22ea      	movs	r2, #234	; 0xea
   137ba:	0092      	lsls	r2, r2, #2
   137bc:	18ba      	adds	r2, r7, r2
   137be:	18d2      	adds	r2, r2, r3
   137c0:	4bd7      	ldr	r3, [pc, #860]	; (13b20 <aes_test+0x37c>)
   137c2:	0010      	movs	r0, r2
   137c4:	0019      	movs	r1, r3
   137c6:	2318      	movs	r3, #24
   137c8:	001a      	movs	r2, r3
   137ca:	f011 ff90 	bl	256ee <memcpy>
        0x6e,0x6f,0x77,0x20,0x69,0x73,0x20,0x74,
        0x68,0x65,0x20,0x74,0x69,0x6d,0x65,0x20,
        0x66,0x6f,0x72,0x20,0x61,0x6c,0x6c,0x20
    };

    const byte verify[] =
   137ce:	4bd5      	ldr	r3, [pc, #852]	; (13b24 <aes_test+0x380>)
   137d0:	22ea      	movs	r2, #234	; 0xea
   137d2:	0092      	lsls	r2, r2, #2
   137d4:	18ba      	adds	r2, r7, r2
   137d6:	18d2      	adds	r2, r2, r3
   137d8:	4bd3      	ldr	r3, [pc, #844]	; (13b28 <aes_test+0x384>)
   137da:	0010      	movs	r0, r2
   137dc:	0019      	movs	r1, r3
   137de:	2310      	movs	r3, #16
   137e0:	001a      	movs	r2, r3
   137e2:	f011 ff84 	bl	256ee <memcpy>
    {
        0x95,0x94,0x92,0x57,0x5f,0x42,0x81,0x53,
        0x2c,0xcc,0x9d,0x46,0x77,0xa2,0x33,0xcb
    };

    byte key[] = "0123456789abcdef   ";  /* align */
   137e6:	4bd1      	ldr	r3, [pc, #836]	; (13b2c <aes_test+0x388>)
   137e8:	22ea      	movs	r2, #234	; 0xea
   137ea:	0092      	lsls	r2, r2, #2
   137ec:	4694      	mov	ip, r2
   137ee:	44bc      	add	ip, r7
   137f0:	4463      	add	r3, ip
   137f2:	4acf      	ldr	r2, [pc, #828]	; (13b30 <aes_test+0x38c>)
   137f4:	ca13      	ldmia	r2!, {r0, r1, r4}
   137f6:	c313      	stmia	r3!, {r0, r1, r4}
   137f8:	ca03      	ldmia	r2!, {r0, r1}
   137fa:	c303      	stmia	r3!, {r0, r1}
    byte iv[]  = "1234567890abcdef   ";  /* align */
   137fc:	4bcd      	ldr	r3, [pc, #820]	; (13b34 <aes_test+0x390>)
   137fe:	22ea      	movs	r2, #234	; 0xea
   13800:	0092      	lsls	r2, r2, #2
   13802:	4694      	mov	ip, r2
   13804:	44bc      	add	ip, r7
   13806:	4463      	add	r3, ip
   13808:	4acb      	ldr	r2, [pc, #812]	; (13b38 <aes_test+0x394>)
   1380a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1380c:	c313      	stmia	r3!, {r0, r1, r4}
   1380e:	ca03      	ldmia	r2!, {r0, r1}
   13810:	c303      	stmia	r3!, {r0, r1}

    if (wc_AesInit(&enc, HEAP_HINT, devId) != 0)
   13812:	4bca      	ldr	r3, [pc, #808]	; (13b3c <aes_test+0x398>)
   13814:	681a      	ldr	r2, [r3, #0]
   13816:	239b      	movs	r3, #155	; 0x9b
   13818:	009b      	lsls	r3, r3, #2
   1381a:	18fb      	adds	r3, r7, r3
   1381c:	2100      	movs	r1, #0
   1381e:	0018      	movs	r0, r3
   13820:	f7f6 fafc 	bl	9e1c <wc_AesInit>
   13824:	1e03      	subs	r3, r0, #0
   13826:	d001      	beq.n	1382c <aes_test+0x88>
        return -5400;
   13828:	4bc5      	ldr	r3, [pc, #788]	; (13b40 <aes_test+0x39c>)
   1382a:	e211      	b.n	13c50 <aes_test+0x4ac>
#if defined(HAVE_AES_DECRYPT) || defined(WOLFSSL_AES_COUNTER)
    if (wc_AesInit(&dec, HEAP_HINT, devId) != 0)
   1382c:	4bc3      	ldr	r3, [pc, #780]	; (13b3c <aes_test+0x398>)
   1382e:	681a      	ldr	r2, [r3, #0]
   13830:	23f4      	movs	r3, #244	; 0xf4
   13832:	18fb      	adds	r3, r7, r3
   13834:	2100      	movs	r1, #0
   13836:	0018      	movs	r0, r3
   13838:	f7f6 faf0 	bl	9e1c <wc_AesInit>
   1383c:	1e03      	subs	r3, r0, #0
   1383e:	d001      	beq.n	13844 <aes_test+0xa0>
        return -5401;
   13840:	4bc0      	ldr	r3, [pc, #768]	; (13b44 <aes_test+0x3a0>)
   13842:	e205      	b.n	13c50 <aes_test+0x4ac>
#endif
    ret = wc_AesSetKey(&enc, key, AES_BLOCK_SIZE, iv, AES_ENCRYPTION);
   13844:	2364      	movs	r3, #100	; 0x64
   13846:	18fa      	adds	r2, r7, r3
   13848:	2378      	movs	r3, #120	; 0x78
   1384a:	18f9      	adds	r1, r7, r3
   1384c:	239b      	movs	r3, #155	; 0x9b
   1384e:	009b      	lsls	r3, r3, #2
   13850:	18f8      	adds	r0, r7, r3
   13852:	2300      	movs	r3, #0
   13854:	9300      	str	r3, [sp, #0]
   13856:	0013      	movs	r3, r2
   13858:	2210      	movs	r2, #16
   1385a:	f7f5 fbc5 	bl	8fe8 <wc_AesSetKey>
   1385e:	0003      	movs	r3, r0
   13860:	22e9      	movs	r2, #233	; 0xe9
   13862:	0092      	lsls	r2, r2, #2
   13864:	18ba      	adds	r2, r7, r2
   13866:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   13868:	23e9      	movs	r3, #233	; 0xe9
   1386a:	009b      	lsls	r3, r3, #2
   1386c:	18fb      	adds	r3, r7, r3
   1386e:	681b      	ldr	r3, [r3, #0]
   13870:	2b00      	cmp	r3, #0
   13872:	d001      	beq.n	13878 <aes_test+0xd4>
        return -5402;
   13874:	4bb4      	ldr	r3, [pc, #720]	; (13b48 <aes_test+0x3a4>)
   13876:	e1eb      	b.n	13c50 <aes_test+0x4ac>
#if defined(HAVE_AES_DECRYPT) || defined(WOLFSSL_AES_COUNTER)
    ret = wc_AesSetKey(&dec, key, AES_BLOCK_SIZE, iv, AES_DECRYPTION);
   13878:	2364      	movs	r3, #100	; 0x64
   1387a:	18fa      	adds	r2, r7, r3
   1387c:	2378      	movs	r3, #120	; 0x78
   1387e:	18f9      	adds	r1, r7, r3
   13880:	23f4      	movs	r3, #244	; 0xf4
   13882:	18f8      	adds	r0, r7, r3
   13884:	2301      	movs	r3, #1
   13886:	9300      	str	r3, [sp, #0]
   13888:	0013      	movs	r3, r2
   1388a:	2210      	movs	r2, #16
   1388c:	f7f5 fbac 	bl	8fe8 <wc_AesSetKey>
   13890:	0003      	movs	r3, r0
   13892:	22e9      	movs	r2, #233	; 0xe9
   13894:	0092      	lsls	r2, r2, #2
   13896:	18ba      	adds	r2, r7, r2
   13898:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   1389a:	23e9      	movs	r3, #233	; 0xe9
   1389c:	009b      	lsls	r3, r3, #2
   1389e:	18fb      	adds	r3, r7, r3
   138a0:	681b      	ldr	r3, [r3, #0]
   138a2:	2b00      	cmp	r3, #0
   138a4:	d001      	beq.n	138aa <aes_test+0x106>
        return -5403;
   138a6:	4ba9      	ldr	r3, [pc, #676]	; (13b4c <aes_test+0x3a8>)
   138a8:	e1d2      	b.n	13c50 <aes_test+0x4ac>
#endif

    XMEMSET(cipher, 0, AES_BLOCK_SIZE * 4);
   138aa:	238b      	movs	r3, #139	; 0x8b
   138ac:	009b      	lsls	r3, r3, #2
   138ae:	18fb      	adds	r3, r7, r3
   138b0:	2240      	movs	r2, #64	; 0x40
   138b2:	2100      	movs	r1, #0
   138b4:	0018      	movs	r0, r3
   138b6:	f011 ff38 	bl	2572a <memset>
    ret = wc_AesCbcEncrypt(&enc, cipher, msg, AES_BLOCK_SIZE);
   138ba:	239c      	movs	r3, #156	; 0x9c
   138bc:	18fa      	adds	r2, r7, r3
   138be:	238b      	movs	r3, #139	; 0x8b
   138c0:	009b      	lsls	r3, r3, #2
   138c2:	18f9      	adds	r1, r7, r3
   138c4:	239b      	movs	r3, #155	; 0x9b
   138c6:	009b      	lsls	r3, r3, #2
   138c8:	18f8      	adds	r0, r7, r3
   138ca:	2310      	movs	r3, #16
   138cc:	f7f5 fbe8 	bl	90a0 <wc_AesCbcEncrypt>
   138d0:	0003      	movs	r3, r0
   138d2:	22e9      	movs	r2, #233	; 0xe9
   138d4:	0092      	lsls	r2, r2, #2
   138d6:	18ba      	adds	r2, r7, r2
   138d8:	6013      	str	r3, [r2, #0]
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0)
   138da:	23e9      	movs	r3, #233	; 0xe9
   138dc:	009b      	lsls	r3, r3, #2
   138de:	18fb      	adds	r3, r7, r3
   138e0:	681b      	ldr	r3, [r3, #0]
   138e2:	2b00      	cmp	r3, #0
   138e4:	d001      	beq.n	138ea <aes_test+0x146>
        return -5404;
   138e6:	4b9a      	ldr	r3, [pc, #616]	; (13b50 <aes_test+0x3ac>)
   138e8:	e1b2      	b.n	13c50 <aes_test+0x4ac>
#ifdef HAVE_AES_DECRYPT
    XMEMSET(plain, 0, AES_BLOCK_SIZE * 4);
   138ea:	23b4      	movs	r3, #180	; 0xb4
   138ec:	18fb      	adds	r3, r7, r3
   138ee:	2240      	movs	r2, #64	; 0x40
   138f0:	2100      	movs	r1, #0
   138f2:	0018      	movs	r0, r3
   138f4:	f011 ff19 	bl	2572a <memset>
    ret = wc_AesCbcDecrypt(&dec, plain, cipher, AES_BLOCK_SIZE);
   138f8:	238b      	movs	r3, #139	; 0x8b
   138fa:	009b      	lsls	r3, r3, #2
   138fc:	18fa      	adds	r2, r7, r3
   138fe:	23b4      	movs	r3, #180	; 0xb4
   13900:	18f9      	adds	r1, r7, r3
   13902:	23f4      	movs	r3, #244	; 0xf4
   13904:	18f8      	adds	r0, r7, r3
   13906:	2310      	movs	r3, #16
   13908:	f7f5 fc0a 	bl	9120 <wc_AesCbcDecrypt>
   1390c:	0003      	movs	r3, r0
   1390e:	22e9      	movs	r2, #233	; 0xe9
   13910:	0092      	lsls	r2, r2, #2
   13912:	18ba      	adds	r2, r7, r2
   13914:	6013      	str	r3, [r2, #0]
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &dec.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0)
   13916:	23e9      	movs	r3, #233	; 0xe9
   13918:	009b      	lsls	r3, r3, #2
   1391a:	18fb      	adds	r3, r7, r3
   1391c:	681b      	ldr	r3, [r3, #0]
   1391e:	2b00      	cmp	r3, #0
   13920:	d001      	beq.n	13926 <aes_test+0x182>
        return -5405;
   13922:	4b8c      	ldr	r3, [pc, #560]	; (13b54 <aes_test+0x3b0>)
   13924:	e194      	b.n	13c50 <aes_test+0x4ac>

    if (XMEMCMP(plain, msg, AES_BLOCK_SIZE))
   13926:	239c      	movs	r3, #156	; 0x9c
   13928:	18f9      	adds	r1, r7, r3
   1392a:	23b4      	movs	r3, #180	; 0xb4
   1392c:	18fb      	adds	r3, r7, r3
   1392e:	2210      	movs	r2, #16
   13930:	0018      	movs	r0, r3
   13932:	f011 fecd 	bl	256d0 <memcmp>
   13936:	1e03      	subs	r3, r0, #0
   13938:	d001      	beq.n	1393e <aes_test+0x19a>
        return -5406;
   1393a:	4b87      	ldr	r3, [pc, #540]	; (13b58 <aes_test+0x3b4>)
   1393c:	e188      	b.n	13c50 <aes_test+0x4ac>
#endif /* HAVE_AES_DECRYPT */
    if (XMEMCMP(cipher, verify, AES_BLOCK_SIZE))
   1393e:	238c      	movs	r3, #140	; 0x8c
   13940:	18f9      	adds	r1, r7, r3
   13942:	238b      	movs	r3, #139	; 0x8b
   13944:	009b      	lsls	r3, r3, #2
   13946:	18fb      	adds	r3, r7, r3
   13948:	2210      	movs	r2, #16
   1394a:	0018      	movs	r0, r3
   1394c:	f011 fec0 	bl	256d0 <memcmp>
   13950:	1e03      	subs	r3, r0, #0
   13952:	d001      	beq.n	13958 <aes_test+0x1b4>
        return -5407;
   13954:	4b81      	ldr	r3, [pc, #516]	; (13b5c <aes_test+0x3b8>)
   13956:	e17b      	b.n	13c50 <aes_test+0x4ac>
#ifdef WOLFSSL_AES_128
    {
        /* Test Vector from "NIST Special Publication 800-38A, 2001 Edition"
         * https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-38a.pdf
         */
        const byte msg2[] =
   13958:	4b81      	ldr	r3, [pc, #516]	; (13b60 <aes_test+0x3bc>)
   1395a:	22ea      	movs	r2, #234	; 0xea
   1395c:	0092      	lsls	r2, r2, #2
   1395e:	18ba      	adds	r2, r7, r2
   13960:	18d2      	adds	r2, r2, r3
   13962:	4b80      	ldr	r3, [pc, #512]	; (13b64 <aes_test+0x3c0>)
   13964:	0010      	movs	r0, r2
   13966:	0019      	movs	r1, r3
   13968:	2320      	movs	r3, #32
   1396a:	001a      	movs	r2, r3
   1396c:	f011 febf 	bl	256ee <memcpy>
            0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
            0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
            0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51
        };

        const byte verify2[] =
   13970:	4b7d      	ldr	r3, [pc, #500]	; (13b68 <aes_test+0x3c4>)
   13972:	22ea      	movs	r2, #234	; 0xea
   13974:	0092      	lsls	r2, r2, #2
   13976:	18ba      	adds	r2, r7, r2
   13978:	18d2      	adds	r2, r2, r3
   1397a:	4b7c      	ldr	r3, [pc, #496]	; (13b6c <aes_test+0x3c8>)
   1397c:	0010      	movs	r0, r2
   1397e:	0019      	movs	r1, r3
   13980:	2320      	movs	r3, #32
   13982:	001a      	movs	r2, r3
   13984:	f011 feb3 	bl	256ee <memcpy>
            0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46,
            0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
            0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee,
            0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2
        };
        byte key2[] = {
   13988:	4b79      	ldr	r3, [pc, #484]	; (13b70 <aes_test+0x3cc>)
   1398a:	22ea      	movs	r2, #234	; 0xea
   1398c:	0092      	lsls	r2, r2, #2
   1398e:	18ba      	adds	r2, r7, r2
   13990:	18d2      	adds	r2, r2, r3
   13992:	4b78      	ldr	r3, [pc, #480]	; (13b74 <aes_test+0x3d0>)
   13994:	0010      	movs	r0, r2
   13996:	0019      	movs	r1, r3
   13998:	2310      	movs	r3, #16
   1399a:	001a      	movs	r2, r3
   1399c:	f011 fea7 	bl	256ee <memcpy>
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
            0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
        };
        byte iv2[]  = {
   139a0:	4b75      	ldr	r3, [pc, #468]	; (13b78 <aes_test+0x3d4>)
   139a2:	22ea      	movs	r2, #234	; 0xea
   139a4:	0092      	lsls	r2, r2, #2
   139a6:	18ba      	adds	r2, r7, r2
   139a8:	18d2      	adds	r2, r2, r3
   139aa:	4b74      	ldr	r3, [pc, #464]	; (13b7c <aes_test+0x3d8>)
   139ac:	0010      	movs	r0, r2
   139ae:	0019      	movs	r1, r3
   139b0:	2310      	movs	r3, #16
   139b2:	001a      	movs	r2, r3
   139b4:	f011 fe9b 	bl	256ee <memcpy>
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
        };


        ret = wc_AesSetKey(&enc, key2, sizeof(key2), iv2, AES_ENCRYPTION);
   139b8:	2344      	movs	r3, #68	; 0x44
   139ba:	18fa      	adds	r2, r7, r3
   139bc:	2354      	movs	r3, #84	; 0x54
   139be:	18f9      	adds	r1, r7, r3
   139c0:	239b      	movs	r3, #155	; 0x9b
   139c2:	009b      	lsls	r3, r3, #2
   139c4:	18f8      	adds	r0, r7, r3
   139c6:	2300      	movs	r3, #0
   139c8:	9300      	str	r3, [sp, #0]
   139ca:	0013      	movs	r3, r2
   139cc:	2210      	movs	r2, #16
   139ce:	f7f5 fb0b 	bl	8fe8 <wc_AesSetKey>
   139d2:	0003      	movs	r3, r0
   139d4:	22e9      	movs	r2, #233	; 0xe9
   139d6:	0092      	lsls	r2, r2, #2
   139d8:	18ba      	adds	r2, r7, r2
   139da:	6013      	str	r3, [r2, #0]
        if (ret != 0)
   139dc:	23e9      	movs	r3, #233	; 0xe9
   139de:	009b      	lsls	r3, r3, #2
   139e0:	18fb      	adds	r3, r7, r3
   139e2:	681b      	ldr	r3, [r3, #0]
   139e4:	2b00      	cmp	r3, #0
   139e6:	d001      	beq.n	139ec <aes_test+0x248>
            return -5413;
   139e8:	4b65      	ldr	r3, [pc, #404]	; (13b80 <aes_test+0x3dc>)
   139ea:	e131      	b.n	13c50 <aes_test+0x4ac>
        XMEMSET(cipher, 0, AES_BLOCK_SIZE * 2);
   139ec:	238b      	movs	r3, #139	; 0x8b
   139ee:	009b      	lsls	r3, r3, #2
   139f0:	18fb      	adds	r3, r7, r3
   139f2:	2220      	movs	r2, #32
   139f4:	2100      	movs	r1, #0
   139f6:	0018      	movs	r0, r3
   139f8:	f011 fe97 	bl	2572a <memset>
        ret = wc_AesCbcEncrypt(&enc, cipher, msg2, AES_BLOCK_SIZE);
   139fc:	1d3a      	adds	r2, r7, #4
   139fe:	238b      	movs	r3, #139	; 0x8b
   13a00:	009b      	lsls	r3, r3, #2
   13a02:	18f9      	adds	r1, r7, r3
   13a04:	239b      	movs	r3, #155	; 0x9b
   13a06:	009b      	lsls	r3, r3, #2
   13a08:	18f8      	adds	r0, r7, r3
   13a0a:	2310      	movs	r3, #16
   13a0c:	f7f5 fb48 	bl	90a0 <wc_AesCbcEncrypt>
   13a10:	0003      	movs	r3, r0
   13a12:	22e9      	movs	r2, #233	; 0xe9
   13a14:	0092      	lsls	r2, r2, #2
   13a16:	18ba      	adds	r2, r7, r2
   13a18:	6013      	str	r3, [r2, #0]
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
    #endif
        if (ret != 0)
   13a1a:	23e9      	movs	r3, #233	; 0xe9
   13a1c:	009b      	lsls	r3, r3, #2
   13a1e:	18fb      	adds	r3, r7, r3
   13a20:	681b      	ldr	r3, [r3, #0]
   13a22:	2b00      	cmp	r3, #0
   13a24:	d001      	beq.n	13a2a <aes_test+0x286>
            return -5414;
   13a26:	4b57      	ldr	r3, [pc, #348]	; (13b84 <aes_test+0x3e0>)
   13a28:	e112      	b.n	13c50 <aes_test+0x4ac>
        if (XMEMCMP(cipher, verify2, AES_BLOCK_SIZE))
   13a2a:	2324      	movs	r3, #36	; 0x24
   13a2c:	18f9      	adds	r1, r7, r3
   13a2e:	238b      	movs	r3, #139	; 0x8b
   13a30:	009b      	lsls	r3, r3, #2
   13a32:	18fb      	adds	r3, r7, r3
   13a34:	2210      	movs	r2, #16
   13a36:	0018      	movs	r0, r3
   13a38:	f011 fe4a 	bl	256d0 <memcmp>
   13a3c:	1e03      	subs	r3, r0, #0
   13a3e:	d001      	beq.n	13a44 <aes_test+0x2a0>
            return -5415;
   13a40:	4b51      	ldr	r3, [pc, #324]	; (13b88 <aes_test+0x3e4>)
   13a42:	e105      	b.n	13c50 <aes_test+0x4ac>

        ret = wc_AesCbcEncrypt(&enc, cipher + AES_BLOCK_SIZE,
   13a44:	238b      	movs	r3, #139	; 0x8b
   13a46:	009b      	lsls	r3, r3, #2
   13a48:	18f9      	adds	r1, r7, r3
   13a4a:	3110      	adds	r1, #16
   13a4c:	1d3a      	adds	r2, r7, #4
   13a4e:	3210      	adds	r2, #16
   13a50:	239b      	movs	r3, #155	; 0x9b
   13a52:	009b      	lsls	r3, r3, #2
   13a54:	18f8      	adds	r0, r7, r3
   13a56:	2310      	movs	r3, #16
   13a58:	f7f5 fb22 	bl	90a0 <wc_AesCbcEncrypt>
   13a5c:	0003      	movs	r3, r0
   13a5e:	22e9      	movs	r2, #233	; 0xe9
   13a60:	0092      	lsls	r2, r2, #2
   13a62:	18ba      	adds	r2, r7, r2
   13a64:	6013      	str	r3, [r2, #0]
                msg2 + AES_BLOCK_SIZE, AES_BLOCK_SIZE);
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
    #endif
        if (ret != 0)
   13a66:	23e9      	movs	r3, #233	; 0xe9
   13a68:	009b      	lsls	r3, r3, #2
   13a6a:	18fb      	adds	r3, r7, r3
   13a6c:	681b      	ldr	r3, [r3, #0]
   13a6e:	2b00      	cmp	r3, #0
   13a70:	d001      	beq.n	13a76 <aes_test+0x2d2>
            return -5416;
   13a72:	4b46      	ldr	r3, [pc, #280]	; (13b8c <aes_test+0x3e8>)
   13a74:	e0ec      	b.n	13c50 <aes_test+0x4ac>
        if (XMEMCMP(cipher + AES_BLOCK_SIZE, verify2 + AES_BLOCK_SIZE,
   13a76:	238b      	movs	r3, #139	; 0x8b
   13a78:	009b      	lsls	r3, r3, #2
   13a7a:	18fb      	adds	r3, r7, r3
   13a7c:	3310      	adds	r3, #16
   13a7e:	2224      	movs	r2, #36	; 0x24
   13a80:	18b9      	adds	r1, r7, r2
   13a82:	3110      	adds	r1, #16
   13a84:	2210      	movs	r2, #16
   13a86:	0018      	movs	r0, r3
   13a88:	f011 fe22 	bl	256d0 <memcmp>
   13a8c:	1e03      	subs	r3, r0, #0
   13a8e:	d001      	beq.n	13a94 <aes_test+0x2f0>
                    AES_BLOCK_SIZE))
            return -5417;
   13a90:	4b3f      	ldr	r3, [pc, #252]	; (13b90 <aes_test+0x3ec>)
   13a92:	e0dd      	b.n	13c50 <aes_test+0x4ac>

        #if defined(HAVE_AES_DECRYPT)
        ret = wc_AesSetKey(&dec, key2, sizeof(key2), iv2, AES_DECRYPTION);
   13a94:	2344      	movs	r3, #68	; 0x44
   13a96:	18fa      	adds	r2, r7, r3
   13a98:	2354      	movs	r3, #84	; 0x54
   13a9a:	18f9      	adds	r1, r7, r3
   13a9c:	23f4      	movs	r3, #244	; 0xf4
   13a9e:	18f8      	adds	r0, r7, r3
   13aa0:	2301      	movs	r3, #1
   13aa2:	9300      	str	r3, [sp, #0]
   13aa4:	0013      	movs	r3, r2
   13aa6:	2210      	movs	r2, #16
   13aa8:	f7f5 fa9e 	bl	8fe8 <wc_AesSetKey>
   13aac:	0003      	movs	r3, r0
   13aae:	22e9      	movs	r2, #233	; 0xe9
   13ab0:	0092      	lsls	r2, r2, #2
   13ab2:	18ba      	adds	r2, r7, r2
   13ab4:	6013      	str	r3, [r2, #0]
        if (ret != 0)
   13ab6:	23e9      	movs	r3, #233	; 0xe9
   13ab8:	009b      	lsls	r3, r3, #2
   13aba:	18fb      	adds	r3, r7, r3
   13abc:	681b      	ldr	r3, [r3, #0]
   13abe:	2b00      	cmp	r3, #0
   13ac0:	d001      	beq.n	13ac6 <aes_test+0x322>
            return -5418;
   13ac2:	4b34      	ldr	r3, [pc, #208]	; (13b94 <aes_test+0x3f0>)
   13ac4:	e0c4      	b.n	13c50 <aes_test+0x4ac>
        XMEMSET(plain, 0, AES_BLOCK_SIZE * 2);
   13ac6:	23b4      	movs	r3, #180	; 0xb4
   13ac8:	18fb      	adds	r3, r7, r3
   13aca:	2220      	movs	r2, #32
   13acc:	2100      	movs	r1, #0
   13ace:	0018      	movs	r0, r3
   13ad0:	f011 fe2b 	bl	2572a <memset>
        ret = wc_AesCbcDecrypt(&dec, plain, verify2, AES_BLOCK_SIZE);
   13ad4:	2324      	movs	r3, #36	; 0x24
   13ad6:	18fa      	adds	r2, r7, r3
   13ad8:	23b4      	movs	r3, #180	; 0xb4
   13ada:	18f9      	adds	r1, r7, r3
   13adc:	23f4      	movs	r3, #244	; 0xf4
   13ade:	18f8      	adds	r0, r7, r3
   13ae0:	2310      	movs	r3, #16
   13ae2:	f7f5 fb1d 	bl	9120 <wc_AesCbcDecrypt>
   13ae6:	0003      	movs	r3, r0
   13ae8:	22e9      	movs	r2, #233	; 0xe9
   13aea:	0092      	lsls	r2, r2, #2
   13aec:	18ba      	adds	r2, r7, r2
   13aee:	6013      	str	r3, [r2, #0]
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &dec.asyncDev, WC_ASYNC_FLAG_NONE);
    #endif
        if (ret != 0)
   13af0:	23e9      	movs	r3, #233	; 0xe9
   13af2:	009b      	lsls	r3, r3, #2
   13af4:	18fb      	adds	r3, r7, r3
   13af6:	681b      	ldr	r3, [r3, #0]
   13af8:	2b00      	cmp	r3, #0
   13afa:	d001      	beq.n	13b00 <aes_test+0x35c>
            return -5419;
   13afc:	4b26      	ldr	r3, [pc, #152]	; (13b98 <aes_test+0x3f4>)
   13afe:	e0a7      	b.n	13c50 <aes_test+0x4ac>
        if (XMEMCMP(plain, msg2, AES_BLOCK_SIZE))
   13b00:	1d39      	adds	r1, r7, #4
   13b02:	23b4      	movs	r3, #180	; 0xb4
   13b04:	18fb      	adds	r3, r7, r3
   13b06:	2210      	movs	r2, #16
   13b08:	0018      	movs	r0, r3
   13b0a:	f011 fde1 	bl	256d0 <memcmp>
   13b0e:	1e03      	subs	r3, r0, #0
   13b10:	d046      	beq.n	13ba0 <aes_test+0x3fc>
            return -5420;
   13b12:	4b22      	ldr	r3, [pc, #136]	; (13b9c <aes_test+0x3f8>)
   13b14:	e09c      	b.n	13c50 <aes_test+0x4ac>
   13b16:	46c0      	nop			; (mov r8, r8)
   13b18:	fffffc4c 	.word	0xfffffc4c
   13b1c:	fffffcf4 	.word	0xfffffcf4
   13b20:	0002d2d0 	.word	0x0002d2d0
   13b24:	fffffce4 	.word	0xfffffce4
   13b28:	0002d310 	.word	0x0002d310
   13b2c:	fffffcd0 	.word	0xfffffcd0
   13b30:	0002d2e8 	.word	0x0002d2e8
   13b34:	fffffcbc 	.word	0xfffffcbc
   13b38:	0002d2fc 	.word	0x0002d2fc
   13b3c:	20000010 	.word	0x20000010
   13b40:	ffffeae8 	.word	0xffffeae8
   13b44:	ffffeae7 	.word	0xffffeae7
   13b48:	ffffeae6 	.word	0xffffeae6
   13b4c:	ffffeae5 	.word	0xffffeae5
   13b50:	ffffeae4 	.word	0xffffeae4
   13b54:	ffffeae3 	.word	0xffffeae3
   13b58:	ffffeae2 	.word	0xffffeae2
   13b5c:	ffffeae1 	.word	0xffffeae1
   13b60:	fffffc5c 	.word	0xfffffc5c
   13b64:	0002d320 	.word	0x0002d320
   13b68:	fffffc7c 	.word	0xfffffc7c
   13b6c:	0002d340 	.word	0x0002d340
   13b70:	fffffcac 	.word	0xfffffcac
   13b74:	0002d360 	.word	0x0002d360
   13b78:	fffffc9c 	.word	0xfffffc9c
   13b7c:	0002d370 	.word	0x0002d370
   13b80:	ffffeadb 	.word	0xffffeadb
   13b84:	ffffeada 	.word	0xffffeada
   13b88:	ffffead9 	.word	0xffffead9
   13b8c:	ffffead8 	.word	0xffffead8
   13b90:	ffffead7 	.word	0xffffead7
   13b94:	ffffead6 	.word	0xffffead6
   13b98:	ffffead5 	.word	0xffffead5
   13b9c:	ffffead4 	.word	0xffffead4

        ret = wc_AesCbcDecrypt(&dec, plain + AES_BLOCK_SIZE,
   13ba0:	23b4      	movs	r3, #180	; 0xb4
   13ba2:	18f9      	adds	r1, r7, r3
   13ba4:	3110      	adds	r1, #16
   13ba6:	2324      	movs	r3, #36	; 0x24
   13ba8:	18fa      	adds	r2, r7, r3
   13baa:	3210      	adds	r2, #16
   13bac:	23f4      	movs	r3, #244	; 0xf4
   13bae:	18f8      	adds	r0, r7, r3
   13bb0:	2310      	movs	r3, #16
   13bb2:	f7f5 fab5 	bl	9120 <wc_AesCbcDecrypt>
   13bb6:	0003      	movs	r3, r0
   13bb8:	22e9      	movs	r2, #233	; 0xe9
   13bba:	0092      	lsls	r2, r2, #2
   13bbc:	18ba      	adds	r2, r7, r2
   13bbe:	6013      	str	r3, [r2, #0]
                verify2 + AES_BLOCK_SIZE, AES_BLOCK_SIZE);
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &dec.asyncDev, WC_ASYNC_FLAG_NONE);
    #endif
        if (ret != 0)
   13bc0:	23e9      	movs	r3, #233	; 0xe9
   13bc2:	009b      	lsls	r3, r3, #2
   13bc4:	18fb      	adds	r3, r7, r3
   13bc6:	681b      	ldr	r3, [r3, #0]
   13bc8:	2b00      	cmp	r3, #0
   13bca:	d001      	beq.n	13bd0 <aes_test+0x42c>
            return -5421;
   13bcc:	4b23      	ldr	r3, [pc, #140]	; (13c5c <aes_test+0x4b8>)
   13bce:	e03f      	b.n	13c50 <aes_test+0x4ac>
        if (XMEMCMP(plain + AES_BLOCK_SIZE, msg2 + AES_BLOCK_SIZE,
   13bd0:	23b4      	movs	r3, #180	; 0xb4
   13bd2:	18fb      	adds	r3, r7, r3
   13bd4:	3310      	adds	r3, #16
   13bd6:	1d39      	adds	r1, r7, #4
   13bd8:	3110      	adds	r1, #16
   13bda:	2210      	movs	r2, #16
   13bdc:	0018      	movs	r0, r3
   13bde:	f011 fd77 	bl	256d0 <memcmp>
   13be2:	1e03      	subs	r3, r0, #0
   13be4:	d001      	beq.n	13bea <aes_test+0x446>
                    AES_BLOCK_SIZE))
            return -5422;
   13be6:	4b1e      	ldr	r3, [pc, #120]	; (13c60 <aes_test+0x4bc>)
   13be8:	e032      	b.n	13c50 <aes_test+0x4ac>
        if (XMEMCMP(plain, niPlain, AES_BLOCK_SIZE) != 0)
            return -5446;
    }
#endif /* WOLFSSL_AES_DIRECT && WOLFSSL_AES_256 */

    ret = aes_key_size_test();
   13bea:	f7ff fb7f 	bl	132ec <aes_key_size_test>
   13bee:	0003      	movs	r3, r0
   13bf0:	22e9      	movs	r2, #233	; 0xe9
   13bf2:	0092      	lsls	r2, r2, #2
   13bf4:	18ba      	adds	r2, r7, r2
   13bf6:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   13bf8:	23e9      	movs	r3, #233	; 0xe9
   13bfa:	009b      	lsls	r3, r3, #2
   13bfc:	18fb      	adds	r3, r7, r3
   13bfe:	681b      	ldr	r3, [r3, #0]
   13c00:	2b00      	cmp	r3, #0
   13c02:	d004      	beq.n	13c0e <aes_test+0x46a>
        return ret;
   13c04:	23e9      	movs	r3, #233	; 0xe9
   13c06:	009b      	lsls	r3, r3, #2
   13c08:	18fb      	adds	r3, r7, r3
   13c0a:	681b      	ldr	r3, [r3, #0]
   13c0c:	e020      	b.n	13c50 <aes_test+0x4ac>

#if defined(HAVE_AES_CBC) && defined(WOLFSSL_AES_128)
    ret = aes_cbc_test();
   13c0e:	f7ff fd2d 	bl	1366c <aes_cbc_test>
   13c12:	0003      	movs	r3, r0
   13c14:	22e9      	movs	r2, #233	; 0xe9
   13c16:	0092      	lsls	r2, r2, #2
   13c18:	18ba      	adds	r2, r7, r2
   13c1a:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   13c1c:	23e9      	movs	r3, #233	; 0xe9
   13c1e:	009b      	lsls	r3, r3, #2
   13c20:	18fb      	adds	r3, r7, r3
   13c22:	681b      	ldr	r3, [r3, #0]
   13c24:	2b00      	cmp	r3, #0
   13c26:	d004      	beq.n	13c32 <aes_test+0x48e>
        return ret;
   13c28:	23e9      	movs	r3, #233	; 0xe9
   13c2a:	009b      	lsls	r3, r3, #2
   13c2c:	18fb      	adds	r3, r7, r3
   13c2e:	681b      	ldr	r3, [r3, #0]
   13c30:	e00e      	b.n	13c50 <aes_test+0x4ac>
        return ret;
#endif


#if defined(HAVE_AES_CBC) || defined(WOLFSSL_AES_COUNTER)
    wc_AesFree(&enc);
   13c32:	239b      	movs	r3, #155	; 0x9b
   13c34:	009b      	lsls	r3, r3, #2
   13c36:	18fb      	adds	r3, r7, r3
   13c38:	0018      	movs	r0, r3
   13c3a:	f7f6 f907 	bl	9e4c <wc_AesFree>
    (void)cipher;
#if defined(HAVE_AES_DECRYPT) || defined(WOLFSSL_AES_COUNTER)
    wc_AesFree(&dec);
   13c3e:	23f4      	movs	r3, #244	; 0xf4
   13c40:	18fb      	adds	r3, r7, r3
   13c42:	0018      	movs	r0, r3
   13c44:	f7f6 f902 	bl	9e4c <wc_AesFree>
    (void)plain;
#endif
#endif

    return ret;
   13c48:	23e9      	movs	r3, #233	; 0xe9
   13c4a:	009b      	lsls	r3, r3, #2
   13c4c:	18fb      	adds	r3, r7, r3
   13c4e:	681b      	ldr	r3, [r3, #0]
}
   13c50:	0018      	movs	r0, r3
   13c52:	46bd      	mov	sp, r7
   13c54:	23eb      	movs	r3, #235	; 0xeb
   13c56:	009b      	lsls	r3, r3, #2
   13c58:	449d      	add	sp, r3
   13c5a:	bd90      	pop	{r4, r7, pc}
   13c5c:	ffffead3 	.word	0xffffead3
   13c60:	ffffead2 	.word	0xffffead2

00013c64 <aes192_test>:

#ifdef WOLFSSL_AES_192
int aes192_test(void)
{
   13c64:	b580      	push	{r7, lr}
   13c66:	4f77      	ldr	r7, [pc, #476]	; (13e44 <aes192_test+0x1e0>)
   13c68:	44bd      	add	sp, r7
   13c6a:	af02      	add	r7, sp, #8
#ifdef HAVE_AES_DECRYPT
    Aes dec;
    byte plain[AES_BLOCK_SIZE];
#endif
#endif /* HAVE_AES_CBC */
    int  ret = 0;
   13c6c:	2300      	movs	r3, #0
   13c6e:	22b7      	movs	r2, #183	; 0xb7
   13c70:	0092      	lsls	r2, r2, #2
   13c72:	18ba      	adds	r2, r7, r2
   13c74:	6013      	str	r3, [r2, #0]

#ifdef HAVE_AES_CBC
    /* Test vectors from NIST Special Publication 800-38A, 2001 Edition
     * Appendix F.2.3  */

    const byte msg[] = {
   13c76:	4b74      	ldr	r3, [pc, #464]	; (13e48 <aes192_test+0x1e4>)
   13c78:	22b8      	movs	r2, #184	; 0xb8
   13c7a:	0092      	lsls	r2, r2, #2
   13c7c:	18ba      	adds	r2, r7, r2
   13c7e:	18d2      	adds	r2, r2, r3
   13c80:	4b72      	ldr	r3, [pc, #456]	; (13e4c <aes192_test+0x1e8>)
   13c82:	0010      	movs	r0, r2
   13c84:	0019      	movs	r1, r3
   13c86:	2310      	movs	r3, #16
   13c88:	001a      	movs	r2, r3
   13c8a:	f011 fd30 	bl	256ee <memcpy>
        0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,
        0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a
    };

    const byte verify[] =
   13c8e:	4b70      	ldr	r3, [pc, #448]	; (13e50 <aes192_test+0x1ec>)
   13c90:	22b8      	movs	r2, #184	; 0xb8
   13c92:	0092      	lsls	r2, r2, #2
   13c94:	18ba      	adds	r2, r7, r2
   13c96:	18d2      	adds	r2, r2, r3
   13c98:	4b6e      	ldr	r3, [pc, #440]	; (13e54 <aes192_test+0x1f0>)
   13c9a:	0010      	movs	r0, r2
   13c9c:	0019      	movs	r1, r3
   13c9e:	2310      	movs	r3, #16
   13ca0:	001a      	movs	r2, r3
   13ca2:	f011 fd24 	bl	256ee <memcpy>
    {
        0x4f,0x02,0x1d,0xb2,0x43,0xbc,0x63,0x3d,
        0x71,0x78,0x18,0x3a,0x9f,0xa0,0x71,0xe8
    };

    byte key[] = {
   13ca6:	4b6c      	ldr	r3, [pc, #432]	; (13e58 <aes192_test+0x1f4>)
   13ca8:	22b8      	movs	r2, #184	; 0xb8
   13caa:	0092      	lsls	r2, r2, #2
   13cac:	18ba      	adds	r2, r7, r2
   13cae:	18d2      	adds	r2, r2, r3
   13cb0:	4b6a      	ldr	r3, [pc, #424]	; (13e5c <aes192_test+0x1f8>)
   13cb2:	0010      	movs	r0, r2
   13cb4:	0019      	movs	r1, r3
   13cb6:	2318      	movs	r3, #24
   13cb8:	001a      	movs	r2, r3
   13cba:	f011 fd18 	bl	256ee <memcpy>
        0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,
        0xc8,0x10,0xf3,0x2b,0x80,0x90,0x79,0xe5,
        0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
    };
    byte iv[]  = {
   13cbe:	4b68      	ldr	r3, [pc, #416]	; (13e60 <aes192_test+0x1fc>)
   13cc0:	22b8      	movs	r2, #184	; 0xb8
   13cc2:	0092      	lsls	r2, r2, #2
   13cc4:	18ba      	adds	r2, r7, r2
   13cc6:	18d2      	adds	r2, r2, r3
   13cc8:	4b66      	ldr	r3, [pc, #408]	; (13e64 <aes192_test+0x200>)
   13cca:	0010      	movs	r0, r2
   13ccc:	0019      	movs	r1, r3
   13cce:	2310      	movs	r3, #16
   13cd0:	001a      	movs	r2, r3
   13cd2:	f011 fd0c 	bl	256ee <memcpy>
        0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
        0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F
    };


    if (wc_AesInit(&enc, HEAP_HINT, devId) != 0)
   13cd6:	4b64      	ldr	r3, [pc, #400]	; (13e68 <aes192_test+0x204>)
   13cd8:	681a      	ldr	r2, [r3, #0]
   13cda:	23d2      	movs	r3, #210	; 0xd2
   13cdc:	005b      	lsls	r3, r3, #1
   13cde:	18fb      	adds	r3, r7, r3
   13ce0:	2100      	movs	r1, #0
   13ce2:	0018      	movs	r0, r3
   13ce4:	f7f6 f89a 	bl	9e1c <wc_AesInit>
   13ce8:	1e03      	subs	r3, r0, #0
   13cea:	d001      	beq.n	13cf0 <aes192_test+0x8c>
        return -5500;
   13cec:	4b5f      	ldr	r3, [pc, #380]	; (13e6c <aes192_test+0x208>)
   13cee:	e0a2      	b.n	13e36 <aes192_test+0x1d2>
#ifdef HAVE_AES_DECRYPT
    if (wc_AesInit(&dec, HEAP_HINT, devId) != 0)
   13cf0:	4b5d      	ldr	r3, [pc, #372]	; (13e68 <aes192_test+0x204>)
   13cf2:	681a      	ldr	r2, [r3, #0]
   13cf4:	235c      	movs	r3, #92	; 0x5c
   13cf6:	18fb      	adds	r3, r7, r3
   13cf8:	2100      	movs	r1, #0
   13cfa:	0018      	movs	r0, r3
   13cfc:	f7f6 f88e 	bl	9e1c <wc_AesInit>
   13d00:	1e03      	subs	r3, r0, #0
   13d02:	d001      	beq.n	13d08 <aes192_test+0xa4>
        return -5501;
   13d04:	4b5a      	ldr	r3, [pc, #360]	; (13e70 <aes192_test+0x20c>)
   13d06:	e096      	b.n	13e36 <aes192_test+0x1d2>
#endif

    ret = wc_AesSetKey(&enc, key, (int) sizeof(key), iv, AES_ENCRYPTION);
   13d08:	1d3a      	adds	r2, r7, #4
   13d0a:	2314      	movs	r3, #20
   13d0c:	18f9      	adds	r1, r7, r3
   13d0e:	23d2      	movs	r3, #210	; 0xd2
   13d10:	005b      	lsls	r3, r3, #1
   13d12:	18f8      	adds	r0, r7, r3
   13d14:	2300      	movs	r3, #0
   13d16:	9300      	str	r3, [sp, #0]
   13d18:	0013      	movs	r3, r2
   13d1a:	2218      	movs	r2, #24
   13d1c:	f7f5 f964 	bl	8fe8 <wc_AesSetKey>
   13d20:	0003      	movs	r3, r0
   13d22:	22b7      	movs	r2, #183	; 0xb7
   13d24:	0092      	lsls	r2, r2, #2
   13d26:	18ba      	adds	r2, r7, r2
   13d28:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   13d2a:	23b7      	movs	r3, #183	; 0xb7
   13d2c:	009b      	lsls	r3, r3, #2
   13d2e:	18fb      	adds	r3, r7, r3
   13d30:	681b      	ldr	r3, [r3, #0]
   13d32:	2b00      	cmp	r3, #0
   13d34:	d001      	beq.n	13d3a <aes192_test+0xd6>
        return -5502;
   13d36:	4b4f      	ldr	r3, [pc, #316]	; (13e74 <aes192_test+0x210>)
   13d38:	e07d      	b.n	13e36 <aes192_test+0x1d2>
#ifdef HAVE_AES_DECRYPT
    ret = wc_AesSetKey(&dec, key, (int) sizeof(key), iv, AES_DECRYPTION);
   13d3a:	1d3a      	adds	r2, r7, #4
   13d3c:	2314      	movs	r3, #20
   13d3e:	18f9      	adds	r1, r7, r3
   13d40:	235c      	movs	r3, #92	; 0x5c
   13d42:	18f8      	adds	r0, r7, r3
   13d44:	2301      	movs	r3, #1
   13d46:	9300      	str	r3, [sp, #0]
   13d48:	0013      	movs	r3, r2
   13d4a:	2218      	movs	r2, #24
   13d4c:	f7f5 f94c 	bl	8fe8 <wc_AesSetKey>
   13d50:	0003      	movs	r3, r0
   13d52:	22b7      	movs	r2, #183	; 0xb7
   13d54:	0092      	lsls	r2, r2, #2
   13d56:	18ba      	adds	r2, r7, r2
   13d58:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   13d5a:	23b7      	movs	r3, #183	; 0xb7
   13d5c:	009b      	lsls	r3, r3, #2
   13d5e:	18fb      	adds	r3, r7, r3
   13d60:	681b      	ldr	r3, [r3, #0]
   13d62:	2b00      	cmp	r3, #0
   13d64:	d001      	beq.n	13d6a <aes192_test+0x106>
        return -5503;
   13d66:	4b44      	ldr	r3, [pc, #272]	; (13e78 <aes192_test+0x214>)
   13d68:	e065      	b.n	13e36 <aes192_test+0x1d2>
#endif

    XMEMSET(cipher, 0, AES_BLOCK_SIZE);
   13d6a:	23ca      	movs	r3, #202	; 0xca
   13d6c:	005b      	lsls	r3, r3, #1
   13d6e:	18fb      	adds	r3, r7, r3
   13d70:	2210      	movs	r2, #16
   13d72:	2100      	movs	r1, #0
   13d74:	0018      	movs	r0, r3
   13d76:	f011 fcd8 	bl	2572a <memset>
    ret = wc_AesCbcEncrypt(&enc, cipher, msg, (int) sizeof(msg));
   13d7a:	233c      	movs	r3, #60	; 0x3c
   13d7c:	18fa      	adds	r2, r7, r3
   13d7e:	23ca      	movs	r3, #202	; 0xca
   13d80:	005b      	lsls	r3, r3, #1
   13d82:	18f9      	adds	r1, r7, r3
   13d84:	23d2      	movs	r3, #210	; 0xd2
   13d86:	005b      	lsls	r3, r3, #1
   13d88:	18f8      	adds	r0, r7, r3
   13d8a:	2310      	movs	r3, #16
   13d8c:	f7f5 f988 	bl	90a0 <wc_AesCbcEncrypt>
   13d90:	0003      	movs	r3, r0
   13d92:	22b7      	movs	r2, #183	; 0xb7
   13d94:	0092      	lsls	r2, r2, #2
   13d96:	18ba      	adds	r2, r7, r2
   13d98:	6013      	str	r3, [r2, #0]
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0)
   13d9a:	23b7      	movs	r3, #183	; 0xb7
   13d9c:	009b      	lsls	r3, r3, #2
   13d9e:	18fb      	adds	r3, r7, r3
   13da0:	681b      	ldr	r3, [r3, #0]
   13da2:	2b00      	cmp	r3, #0
   13da4:	d001      	beq.n	13daa <aes192_test+0x146>
        return -5504;
   13da6:	4b35      	ldr	r3, [pc, #212]	; (13e7c <aes192_test+0x218>)
   13da8:	e045      	b.n	13e36 <aes192_test+0x1d2>
#ifdef HAVE_AES_DECRYPT
    XMEMSET(plain, 0, AES_BLOCK_SIZE);
   13daa:	234c      	movs	r3, #76	; 0x4c
   13dac:	18fb      	adds	r3, r7, r3
   13dae:	2210      	movs	r2, #16
   13db0:	2100      	movs	r1, #0
   13db2:	0018      	movs	r0, r3
   13db4:	f011 fcb9 	bl	2572a <memset>
    ret = wc_AesCbcDecrypt(&dec, plain, cipher, (int) sizeof(cipher));
   13db8:	23ca      	movs	r3, #202	; 0xca
   13dba:	005b      	lsls	r3, r3, #1
   13dbc:	18fa      	adds	r2, r7, r3
   13dbe:	234c      	movs	r3, #76	; 0x4c
   13dc0:	18f9      	adds	r1, r7, r3
   13dc2:	235c      	movs	r3, #92	; 0x5c
   13dc4:	18f8      	adds	r0, r7, r3
   13dc6:	2310      	movs	r3, #16
   13dc8:	f7f5 f9aa 	bl	9120 <wc_AesCbcDecrypt>
   13dcc:	0003      	movs	r3, r0
   13dce:	22b7      	movs	r2, #183	; 0xb7
   13dd0:	0092      	lsls	r2, r2, #2
   13dd2:	18ba      	adds	r2, r7, r2
   13dd4:	6013      	str	r3, [r2, #0]
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &dec.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0)
   13dd6:	23b7      	movs	r3, #183	; 0xb7
   13dd8:	009b      	lsls	r3, r3, #2
   13dda:	18fb      	adds	r3, r7, r3
   13ddc:	681b      	ldr	r3, [r3, #0]
   13dde:	2b00      	cmp	r3, #0
   13de0:	d001      	beq.n	13de6 <aes192_test+0x182>
        return -5505;
   13de2:	4b27      	ldr	r3, [pc, #156]	; (13e80 <aes192_test+0x21c>)
   13de4:	e027      	b.n	13e36 <aes192_test+0x1d2>
    if (XMEMCMP(plain, msg, (int) sizeof(plain))) {
   13de6:	233c      	movs	r3, #60	; 0x3c
   13de8:	18f9      	adds	r1, r7, r3
   13dea:	234c      	movs	r3, #76	; 0x4c
   13dec:	18fb      	adds	r3, r7, r3
   13dee:	2210      	movs	r2, #16
   13df0:	0018      	movs	r0, r3
   13df2:	f011 fc6d 	bl	256d0 <memcmp>
   13df6:	1e03      	subs	r3, r0, #0
   13df8:	d001      	beq.n	13dfe <aes192_test+0x19a>
        return -5506;
   13dfa:	4b22      	ldr	r3, [pc, #136]	; (13e84 <aes192_test+0x220>)
   13dfc:	e01b      	b.n	13e36 <aes192_test+0x1d2>
    }
#endif

    if (XMEMCMP(cipher, verify, (int) sizeof(cipher)))
   13dfe:	232c      	movs	r3, #44	; 0x2c
   13e00:	18f9      	adds	r1, r7, r3
   13e02:	23ca      	movs	r3, #202	; 0xca
   13e04:	005b      	lsls	r3, r3, #1
   13e06:	18fb      	adds	r3, r7, r3
   13e08:	2210      	movs	r2, #16
   13e0a:	0018      	movs	r0, r3
   13e0c:	f011 fc60 	bl	256d0 <memcmp>
   13e10:	1e03      	subs	r3, r0, #0
   13e12:	d001      	beq.n	13e18 <aes192_test+0x1b4>
        return -5507;
   13e14:	4b1c      	ldr	r3, [pc, #112]	; (13e88 <aes192_test+0x224>)
   13e16:	e00e      	b.n	13e36 <aes192_test+0x1d2>

    wc_AesFree(&enc);
   13e18:	23d2      	movs	r3, #210	; 0xd2
   13e1a:	005b      	lsls	r3, r3, #1
   13e1c:	18fb      	adds	r3, r7, r3
   13e1e:	0018      	movs	r0, r3
   13e20:	f7f6 f814 	bl	9e4c <wc_AesFree>
#ifdef HAVE_AES_DECRYPT
    wc_AesFree(&dec);
   13e24:	235c      	movs	r3, #92	; 0x5c
   13e26:	18fb      	adds	r3, r7, r3
   13e28:	0018      	movs	r0, r3
   13e2a:	f7f6 f80f 	bl	9e4c <wc_AesFree>
#endif

#endif /* HAVE_AES_CBC */

    return ret;
   13e2e:	23b7      	movs	r3, #183	; 0xb7
   13e30:	009b      	lsls	r3, r3, #2
   13e32:	18fb      	adds	r3, r7, r3
   13e34:	681b      	ldr	r3, [r3, #0]
}
   13e36:	0018      	movs	r0, r3
   13e38:	46bd      	mov	sp, r7
   13e3a:	23b8      	movs	r3, #184	; 0xb8
   13e3c:	009b      	lsls	r3, r3, #2
   13e3e:	449d      	add	sp, r3
   13e40:	bd80      	pop	{r7, pc}
   13e42:	46c0      	nop			; (mov r8, r8)
   13e44:	fffffd18 	.word	0xfffffd18
   13e48:	fffffd5c 	.word	0xfffffd5c
   13e4c:	0002d380 	.word	0x0002d380
   13e50:	fffffd4c 	.word	0xfffffd4c
   13e54:	0002d390 	.word	0x0002d390
   13e58:	fffffd34 	.word	0xfffffd34
   13e5c:	0002d3a0 	.word	0x0002d3a0
   13e60:	fffffd24 	.word	0xfffffd24
   13e64:	0002d370 	.word	0x0002d370
   13e68:	20000010 	.word	0x20000010
   13e6c:	ffffea84 	.word	0xffffea84
   13e70:	ffffea83 	.word	0xffffea83
   13e74:	ffffea82 	.word	0xffffea82
   13e78:	ffffea81 	.word	0xffffea81
   13e7c:	ffffea80 	.word	0xffffea80
   13e80:	ffffea7f 	.word	0xffffea7f
   13e84:	ffffea7e 	.word	0xffffea7e
   13e88:	ffffea7d 	.word	0xffffea7d

00013e8c <aes256_test>:
#endif /* WOLFSSL_AES_192 */

#ifdef WOLFSSL_AES_256
int aes256_test(void)
{
   13e8c:	b580      	push	{r7, lr}
   13e8e:	4f77      	ldr	r7, [pc, #476]	; (1406c <aes256_test+0x1e0>)
   13e90:	44bd      	add	sp, r7
   13e92:	af02      	add	r7, sp, #8
#ifdef HAVE_AES_DECRYPT
    Aes dec;
    byte plain[AES_BLOCK_SIZE];
#endif
#endif /* HAVE_AES_CBC */
    int  ret = 0;
   13e94:	2300      	movs	r3, #0
   13e96:	22b9      	movs	r2, #185	; 0xb9
   13e98:	0092      	lsls	r2, r2, #2
   13e9a:	18ba      	adds	r2, r7, r2
   13e9c:	6013      	str	r3, [r2, #0]

#ifdef HAVE_AES_CBC
    /* Test vectors from NIST Special Publication 800-38A, 2001 Edition,
     * Appendix F.2.5  */
    const byte msg[] = {
   13e9e:	4b74      	ldr	r3, [pc, #464]	; (14070 <aes256_test+0x1e4>)
   13ea0:	22ba      	movs	r2, #186	; 0xba
   13ea2:	0092      	lsls	r2, r2, #2
   13ea4:	18ba      	adds	r2, r7, r2
   13ea6:	18d2      	adds	r2, r2, r3
   13ea8:	4b72      	ldr	r3, [pc, #456]	; (14074 <aes256_test+0x1e8>)
   13eaa:	0010      	movs	r0, r2
   13eac:	0019      	movs	r1, r3
   13eae:	2310      	movs	r3, #16
   13eb0:	001a      	movs	r2, r3
   13eb2:	f011 fc1c 	bl	256ee <memcpy>
        0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,
        0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a
    };

    const byte verify[] =
   13eb6:	4b70      	ldr	r3, [pc, #448]	; (14078 <aes256_test+0x1ec>)
   13eb8:	22ba      	movs	r2, #186	; 0xba
   13eba:	0092      	lsls	r2, r2, #2
   13ebc:	18ba      	adds	r2, r7, r2
   13ebe:	18d2      	adds	r2, r2, r3
   13ec0:	4b6e      	ldr	r3, [pc, #440]	; (1407c <aes256_test+0x1f0>)
   13ec2:	0010      	movs	r0, r2
   13ec4:	0019      	movs	r1, r3
   13ec6:	2310      	movs	r3, #16
   13ec8:	001a      	movs	r2, r3
   13eca:	f011 fc10 	bl	256ee <memcpy>
    {
        0xf5,0x8c,0x4c,0x04,0xd6,0xe5,0xf1,0xba,
        0x77,0x9e,0xab,0xfb,0x5f,0x7b,0xfb,0xd6
    };

    byte key[] = {
   13ece:	4b6c      	ldr	r3, [pc, #432]	; (14080 <aes256_test+0x1f4>)
   13ed0:	22ba      	movs	r2, #186	; 0xba
   13ed2:	0092      	lsls	r2, r2, #2
   13ed4:	18ba      	adds	r2, r7, r2
   13ed6:	18d2      	adds	r2, r2, r3
   13ed8:	4b6a      	ldr	r3, [pc, #424]	; (14084 <aes256_test+0x1f8>)
   13eda:	0010      	movs	r0, r2
   13edc:	0019      	movs	r1, r3
   13ede:	2320      	movs	r3, #32
   13ee0:	001a      	movs	r2, r3
   13ee2:	f011 fc04 	bl	256ee <memcpy>
        0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,
        0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,
        0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,
        0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
    };
    byte iv[]  = {
   13ee6:	4b68      	ldr	r3, [pc, #416]	; (14088 <aes256_test+0x1fc>)
   13ee8:	22ba      	movs	r2, #186	; 0xba
   13eea:	0092      	lsls	r2, r2, #2
   13eec:	18ba      	adds	r2, r7, r2
   13eee:	18d2      	adds	r2, r2, r3
   13ef0:	4b66      	ldr	r3, [pc, #408]	; (1408c <aes256_test+0x200>)
   13ef2:	0010      	movs	r0, r2
   13ef4:	0019      	movs	r1, r3
   13ef6:	2310      	movs	r3, #16
   13ef8:	001a      	movs	r2, r3
   13efa:	f011 fbf8 	bl	256ee <memcpy>
        0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
        0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F
    };


    if (wc_AesInit(&enc, HEAP_HINT, devId) != 0)
   13efe:	4b64      	ldr	r3, [pc, #400]	; (14090 <aes256_test+0x204>)
   13f00:	681a      	ldr	r2, [r3, #0]
   13f02:	23d6      	movs	r3, #214	; 0xd6
   13f04:	005b      	lsls	r3, r3, #1
   13f06:	18fb      	adds	r3, r7, r3
   13f08:	2100      	movs	r1, #0
   13f0a:	0018      	movs	r0, r3
   13f0c:	f7f5 ff86 	bl	9e1c <wc_AesInit>
   13f10:	1e03      	subs	r3, r0, #0
   13f12:	d001      	beq.n	13f18 <aes256_test+0x8c>
        return -5600;
   13f14:	4b5f      	ldr	r3, [pc, #380]	; (14094 <aes256_test+0x208>)
   13f16:	e0a2      	b.n	1405e <aes256_test+0x1d2>
#ifdef HAVE_AES_DECRYPT
    if (wc_AesInit(&dec, HEAP_HINT, devId) != 0)
   13f18:	4b5d      	ldr	r3, [pc, #372]	; (14090 <aes256_test+0x204>)
   13f1a:	681a      	ldr	r2, [r3, #0]
   13f1c:	2364      	movs	r3, #100	; 0x64
   13f1e:	18fb      	adds	r3, r7, r3
   13f20:	2100      	movs	r1, #0
   13f22:	0018      	movs	r0, r3
   13f24:	f7f5 ff7a 	bl	9e1c <wc_AesInit>
   13f28:	1e03      	subs	r3, r0, #0
   13f2a:	d001      	beq.n	13f30 <aes256_test+0xa4>
        return -5601;
   13f2c:	4b5a      	ldr	r3, [pc, #360]	; (14098 <aes256_test+0x20c>)
   13f2e:	e096      	b.n	1405e <aes256_test+0x1d2>
#endif

    ret = wc_AesSetKey(&enc, key, (int) sizeof(key), iv, AES_ENCRYPTION);
   13f30:	1d3a      	adds	r2, r7, #4
   13f32:	2314      	movs	r3, #20
   13f34:	18f9      	adds	r1, r7, r3
   13f36:	23d6      	movs	r3, #214	; 0xd6
   13f38:	005b      	lsls	r3, r3, #1
   13f3a:	18f8      	adds	r0, r7, r3
   13f3c:	2300      	movs	r3, #0
   13f3e:	9300      	str	r3, [sp, #0]
   13f40:	0013      	movs	r3, r2
   13f42:	2220      	movs	r2, #32
   13f44:	f7f5 f850 	bl	8fe8 <wc_AesSetKey>
   13f48:	0003      	movs	r3, r0
   13f4a:	22b9      	movs	r2, #185	; 0xb9
   13f4c:	0092      	lsls	r2, r2, #2
   13f4e:	18ba      	adds	r2, r7, r2
   13f50:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   13f52:	23b9      	movs	r3, #185	; 0xb9
   13f54:	009b      	lsls	r3, r3, #2
   13f56:	18fb      	adds	r3, r7, r3
   13f58:	681b      	ldr	r3, [r3, #0]
   13f5a:	2b00      	cmp	r3, #0
   13f5c:	d001      	beq.n	13f62 <aes256_test+0xd6>
        return -5602;
   13f5e:	4b4f      	ldr	r3, [pc, #316]	; (1409c <aes256_test+0x210>)
   13f60:	e07d      	b.n	1405e <aes256_test+0x1d2>
#ifdef HAVE_AES_DECRYPT
    ret = wc_AesSetKey(&dec, key, (int) sizeof(key), iv, AES_DECRYPTION);
   13f62:	1d3a      	adds	r2, r7, #4
   13f64:	2314      	movs	r3, #20
   13f66:	18f9      	adds	r1, r7, r3
   13f68:	2364      	movs	r3, #100	; 0x64
   13f6a:	18f8      	adds	r0, r7, r3
   13f6c:	2301      	movs	r3, #1
   13f6e:	9300      	str	r3, [sp, #0]
   13f70:	0013      	movs	r3, r2
   13f72:	2220      	movs	r2, #32
   13f74:	f7f5 f838 	bl	8fe8 <wc_AesSetKey>
   13f78:	0003      	movs	r3, r0
   13f7a:	22b9      	movs	r2, #185	; 0xb9
   13f7c:	0092      	lsls	r2, r2, #2
   13f7e:	18ba      	adds	r2, r7, r2
   13f80:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   13f82:	23b9      	movs	r3, #185	; 0xb9
   13f84:	009b      	lsls	r3, r3, #2
   13f86:	18fb      	adds	r3, r7, r3
   13f88:	681b      	ldr	r3, [r3, #0]
   13f8a:	2b00      	cmp	r3, #0
   13f8c:	d001      	beq.n	13f92 <aes256_test+0x106>
        return -5603;
   13f8e:	4b44      	ldr	r3, [pc, #272]	; (140a0 <aes256_test+0x214>)
   13f90:	e065      	b.n	1405e <aes256_test+0x1d2>
#endif

    XMEMSET(cipher, 0, AES_BLOCK_SIZE);
   13f92:	23ce      	movs	r3, #206	; 0xce
   13f94:	005b      	lsls	r3, r3, #1
   13f96:	18fb      	adds	r3, r7, r3
   13f98:	2210      	movs	r2, #16
   13f9a:	2100      	movs	r1, #0
   13f9c:	0018      	movs	r0, r3
   13f9e:	f011 fbc4 	bl	2572a <memset>
    ret = wc_AesCbcEncrypt(&enc, cipher, msg, (int) sizeof(msg));
   13fa2:	2344      	movs	r3, #68	; 0x44
   13fa4:	18fa      	adds	r2, r7, r3
   13fa6:	23ce      	movs	r3, #206	; 0xce
   13fa8:	005b      	lsls	r3, r3, #1
   13faa:	18f9      	adds	r1, r7, r3
   13fac:	23d6      	movs	r3, #214	; 0xd6
   13fae:	005b      	lsls	r3, r3, #1
   13fb0:	18f8      	adds	r0, r7, r3
   13fb2:	2310      	movs	r3, #16
   13fb4:	f7f5 f874 	bl	90a0 <wc_AesCbcEncrypt>
   13fb8:	0003      	movs	r3, r0
   13fba:	22b9      	movs	r2, #185	; 0xb9
   13fbc:	0092      	lsls	r2, r2, #2
   13fbe:	18ba      	adds	r2, r7, r2
   13fc0:	6013      	str	r3, [r2, #0]
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0)
   13fc2:	23b9      	movs	r3, #185	; 0xb9
   13fc4:	009b      	lsls	r3, r3, #2
   13fc6:	18fb      	adds	r3, r7, r3
   13fc8:	681b      	ldr	r3, [r3, #0]
   13fca:	2b00      	cmp	r3, #0
   13fcc:	d001      	beq.n	13fd2 <aes256_test+0x146>
        return -5604;
   13fce:	4b35      	ldr	r3, [pc, #212]	; (140a4 <aes256_test+0x218>)
   13fd0:	e045      	b.n	1405e <aes256_test+0x1d2>
#ifdef HAVE_AES_DECRYPT
    XMEMSET(plain, 0, AES_BLOCK_SIZE);
   13fd2:	2354      	movs	r3, #84	; 0x54
   13fd4:	18fb      	adds	r3, r7, r3
   13fd6:	2210      	movs	r2, #16
   13fd8:	2100      	movs	r1, #0
   13fda:	0018      	movs	r0, r3
   13fdc:	f011 fba5 	bl	2572a <memset>
    ret = wc_AesCbcDecrypt(&dec, plain, cipher, (int) sizeof(cipher));
   13fe0:	23ce      	movs	r3, #206	; 0xce
   13fe2:	005b      	lsls	r3, r3, #1
   13fe4:	18fa      	adds	r2, r7, r3
   13fe6:	2354      	movs	r3, #84	; 0x54
   13fe8:	18f9      	adds	r1, r7, r3
   13fea:	2364      	movs	r3, #100	; 0x64
   13fec:	18f8      	adds	r0, r7, r3
   13fee:	2310      	movs	r3, #16
   13ff0:	f7f5 f896 	bl	9120 <wc_AesCbcDecrypt>
   13ff4:	0003      	movs	r3, r0
   13ff6:	22b9      	movs	r2, #185	; 0xb9
   13ff8:	0092      	lsls	r2, r2, #2
   13ffa:	18ba      	adds	r2, r7, r2
   13ffc:	6013      	str	r3, [r2, #0]
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &dec.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0)
   13ffe:	23b9      	movs	r3, #185	; 0xb9
   14000:	009b      	lsls	r3, r3, #2
   14002:	18fb      	adds	r3, r7, r3
   14004:	681b      	ldr	r3, [r3, #0]
   14006:	2b00      	cmp	r3, #0
   14008:	d001      	beq.n	1400e <aes256_test+0x182>
        return -5605;
   1400a:	4b27      	ldr	r3, [pc, #156]	; (140a8 <aes256_test+0x21c>)
   1400c:	e027      	b.n	1405e <aes256_test+0x1d2>
    if (XMEMCMP(plain, msg, (int) sizeof(plain))) {
   1400e:	2344      	movs	r3, #68	; 0x44
   14010:	18f9      	adds	r1, r7, r3
   14012:	2354      	movs	r3, #84	; 0x54
   14014:	18fb      	adds	r3, r7, r3
   14016:	2210      	movs	r2, #16
   14018:	0018      	movs	r0, r3
   1401a:	f011 fb59 	bl	256d0 <memcmp>
   1401e:	1e03      	subs	r3, r0, #0
   14020:	d001      	beq.n	14026 <aes256_test+0x19a>
        return -5606;
   14022:	4b22      	ldr	r3, [pc, #136]	; (140ac <aes256_test+0x220>)
   14024:	e01b      	b.n	1405e <aes256_test+0x1d2>
    }
#endif

    if (XMEMCMP(cipher, verify, (int) sizeof(cipher)))
   14026:	2334      	movs	r3, #52	; 0x34
   14028:	18f9      	adds	r1, r7, r3
   1402a:	23ce      	movs	r3, #206	; 0xce
   1402c:	005b      	lsls	r3, r3, #1
   1402e:	18fb      	adds	r3, r7, r3
   14030:	2210      	movs	r2, #16
   14032:	0018      	movs	r0, r3
   14034:	f011 fb4c 	bl	256d0 <memcmp>
   14038:	1e03      	subs	r3, r0, #0
   1403a:	d001      	beq.n	14040 <aes256_test+0x1b4>
        return -5607;
   1403c:	4b1c      	ldr	r3, [pc, #112]	; (140b0 <aes256_test+0x224>)
   1403e:	e00e      	b.n	1405e <aes256_test+0x1d2>

    wc_AesFree(&enc);
   14040:	23d6      	movs	r3, #214	; 0xd6
   14042:	005b      	lsls	r3, r3, #1
   14044:	18fb      	adds	r3, r7, r3
   14046:	0018      	movs	r0, r3
   14048:	f7f5 ff00 	bl	9e4c <wc_AesFree>
#ifdef HAVE_AES_DECRYPT
    wc_AesFree(&dec);
   1404c:	2364      	movs	r3, #100	; 0x64
   1404e:	18fb      	adds	r3, r7, r3
   14050:	0018      	movs	r0, r3
   14052:	f7f5 fefb 	bl	9e4c <wc_AesFree>
#endif

#endif /* HAVE_AES_CBC */

    return ret;
   14056:	23b9      	movs	r3, #185	; 0xb9
   14058:	009b      	lsls	r3, r3, #2
   1405a:	18fb      	adds	r3, r7, r3
   1405c:	681b      	ldr	r3, [r3, #0]
}
   1405e:	0018      	movs	r0, r3
   14060:	46bd      	mov	sp, r7
   14062:	23ba      	movs	r3, #186	; 0xba
   14064:	009b      	lsls	r3, r3, #2
   14066:	449d      	add	sp, r3
   14068:	bd80      	pop	{r7, pc}
   1406a:	46c0      	nop			; (mov r8, r8)
   1406c:	fffffd10 	.word	0xfffffd10
   14070:	fffffd5c 	.word	0xfffffd5c
   14074:	0002d380 	.word	0x0002d380
   14078:	fffffd4c 	.word	0xfffffd4c
   1407c:	0002d3b8 	.word	0x0002d3b8
   14080:	fffffd2c 	.word	0xfffffd2c
   14084:	0002d3c8 	.word	0x0002d3c8
   14088:	fffffd1c 	.word	0xfffffd1c
   1408c:	0002d370 	.word	0x0002d370
   14090:	20000010 	.word	0x20000010
   14094:	ffffea20 	.word	0xffffea20
   14098:	ffffea1f 	.word	0xffffea1f
   1409c:	ffffea1e 	.word	0xffffea1e
   140a0:	ffffea1d 	.word	0xffffea1d
   140a4:	ffffea1c 	.word	0xffffea1c
   140a8:	ffffea1b 	.word	0xffffea1b
   140ac:	ffffea1a 	.word	0xffffea1a
   140b0:	ffffea19 	.word	0xffffea19

000140b4 <aesgcm_default_test_helper>:
#ifdef HAVE_AESGCM

static int aesgcm_default_test_helper(byte* key, int keySz, byte* iv, int ivSz,
		byte* plain, int plainSz, byte* cipher, int cipherSz,
		byte* aad, int aadSz, byte* tag, int tagSz)
{
   140b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   140b6:	4c8b      	ldr	r4, [pc, #556]	; (142e4 <aesgcm_default_test_helper+0x230>)
   140b8:	44a5      	add	sp, r4
   140ba:	af06      	add	r7, sp, #24
   140bc:	60f8      	str	r0, [r7, #12]
   140be:	60b9      	str	r1, [r7, #8]
   140c0:	607a      	str	r2, [r7, #4]
   140c2:	603b      	str	r3, [r7, #0]
    byte resultT[AES_BLOCK_SIZE];
    byte resultP[AES_BLOCK_SIZE * 3];
    byte resultC[AES_BLOCK_SIZE * 3];
    int  result;

    XMEMSET(resultT, 0, sizeof(resultT));
   140c4:	2374      	movs	r3, #116	; 0x74
   140c6:	18fb      	adds	r3, r7, r3
   140c8:	2210      	movs	r2, #16
   140ca:	2100      	movs	r1, #0
   140cc:	0018      	movs	r0, r3
   140ce:	f011 fb2c 	bl	2572a <memset>
    XMEMSET(resultC, 0, sizeof(resultC));
   140d2:	2314      	movs	r3, #20
   140d4:	18fb      	adds	r3, r7, r3
   140d6:	2230      	movs	r2, #48	; 0x30
   140d8:	2100      	movs	r1, #0
   140da:	0018      	movs	r0, r3
   140dc:	f011 fb25 	bl	2572a <memset>
    XMEMSET(resultP, 0, sizeof(resultP));
   140e0:	2344      	movs	r3, #68	; 0x44
   140e2:	18fb      	adds	r3, r7, r3
   140e4:	2230      	movs	r2, #48	; 0x30
   140e6:	2100      	movs	r1, #0
   140e8:	0018      	movs	r0, r3
   140ea:	f011 fb1e 	bl	2572a <memset>

    if (wc_AesInit(&enc, HEAP_HINT, devId) != 0) {
   140ee:	4b7e      	ldr	r3, [pc, #504]	; (142e8 <aesgcm_default_test_helper+0x234>)
   140f0:	681a      	ldr	r2, [r3, #0]
   140f2:	23de      	movs	r3, #222	; 0xde
   140f4:	005b      	lsls	r3, r3, #1
   140f6:	18fb      	adds	r3, r7, r3
   140f8:	2100      	movs	r1, #0
   140fa:	0018      	movs	r0, r3
   140fc:	f7f5 fe8e 	bl	9e1c <wc_AesInit>
   14100:	1e03      	subs	r3, r0, #0
   14102:	d001      	beq.n	14108 <aesgcm_default_test_helper+0x54>
        return -4700;
   14104:	4b79      	ldr	r3, [pc, #484]	; (142ec <aesgcm_default_test_helper+0x238>)
   14106:	e0e6      	b.n	142d6 <aesgcm_default_test_helper+0x222>
    }
    if (wc_AesInit(&dec, HEAP_HINT, devId) != 0) {
   14108:	4b77      	ldr	r3, [pc, #476]	; (142e8 <aesgcm_default_test_helper+0x234>)
   1410a:	681a      	ldr	r2, [r3, #0]
   1410c:	2384      	movs	r3, #132	; 0x84
   1410e:	18fb      	adds	r3, r7, r3
   14110:	2100      	movs	r1, #0
   14112:	0018      	movs	r0, r3
   14114:	f7f5 fe82 	bl	9e1c <wc_AesInit>
   14118:	1e03      	subs	r3, r0, #0
   1411a:	d001      	beq.n	14120 <aesgcm_default_test_helper+0x6c>
        return -4700;
   1411c:	4b73      	ldr	r3, [pc, #460]	; (142ec <aesgcm_default_test_helper+0x238>)
   1411e:	e0da      	b.n	142d6 <aesgcm_default_test_helper+0x222>
    }

    result = wc_AesGcmSetKey(&enc, key, keySz);
   14120:	68ba      	ldr	r2, [r7, #8]
   14122:	68f9      	ldr	r1, [r7, #12]
   14124:	23de      	movs	r3, #222	; 0xde
   14126:	005b      	lsls	r3, r3, #1
   14128:	18fb      	adds	r3, r7, r3
   1412a:	0018      	movs	r0, r3
   1412c:	f7f5 f904 	bl	9338 <wc_AesGcmSetKey>
   14130:	0003      	movs	r3, r0
   14132:	22bd      	movs	r2, #189	; 0xbd
   14134:	0092      	lsls	r2, r2, #2
   14136:	18ba      	adds	r2, r7, r2
   14138:	6013      	str	r3, [r2, #0]
    if (result != 0)
   1413a:	23bd      	movs	r3, #189	; 0xbd
   1413c:	009b      	lsls	r3, r3, #2
   1413e:	18fb      	adds	r3, r7, r3
   14140:	681b      	ldr	r3, [r3, #0]
   14142:	2b00      	cmp	r3, #0
   14144:	d001      	beq.n	1414a <aesgcm_default_test_helper+0x96>
        return -4701;
   14146:	4b6a      	ldr	r3, [pc, #424]	; (142f0 <aesgcm_default_test_helper+0x23c>)
   14148:	e0c5      	b.n	142d6 <aesgcm_default_test_helper+0x222>

    /* AES-GCM encrypt and decrypt both use AES encrypt internally */
    result = wc_AesGcmEncrypt(&enc, resultC, plain, plainSz, iv, ivSz,
   1414a:	23c5      	movs	r3, #197	; 0xc5
   1414c:	009b      	lsls	r3, r3, #2
   1414e:	18fb      	adds	r3, r7, r3
   14150:	681e      	ldr	r6, [r3, #0]
   14152:	683b      	ldr	r3, [r7, #0]
   14154:	22cb      	movs	r2, #203	; 0xcb
   14156:	0092      	lsls	r2, r2, #2
   14158:	18ba      	adds	r2, r7, r2
   1415a:	6812      	ldr	r2, [r2, #0]
   1415c:	21c9      	movs	r1, #201	; 0xc9
   1415e:	0089      	lsls	r1, r1, #2
   14160:	1879      	adds	r1, r7, r1
   14162:	6809      	ldr	r1, [r1, #0]
   14164:	20c4      	movs	r0, #196	; 0xc4
   14166:	0080      	lsls	r0, r0, #2
   14168:	1838      	adds	r0, r7, r0
   1416a:	6805      	ldr	r5, [r0, #0]
   1416c:	2014      	movs	r0, #20
   1416e:	183c      	adds	r4, r7, r0
   14170:	20de      	movs	r0, #222	; 0xde
   14172:	0040      	lsls	r0, r0, #1
   14174:	1838      	adds	r0, r7, r0
   14176:	9105      	str	r1, [sp, #20]
   14178:	21c8      	movs	r1, #200	; 0xc8
   1417a:	0089      	lsls	r1, r1, #2
   1417c:	1879      	adds	r1, r7, r1
   1417e:	6809      	ldr	r1, [r1, #0]
   14180:	9104      	str	r1, [sp, #16]
   14182:	9203      	str	r2, [sp, #12]
   14184:	2274      	movs	r2, #116	; 0x74
   14186:	18ba      	adds	r2, r7, r2
   14188:	9202      	str	r2, [sp, #8]
   1418a:	9301      	str	r3, [sp, #4]
   1418c:	687b      	ldr	r3, [r7, #4]
   1418e:	9300      	str	r3, [sp, #0]
   14190:	0033      	movs	r3, r6
   14192:	002a      	movs	r2, r5
   14194:	0021      	movs	r1, r4
   14196:	f7f5 facd 	bl	9734 <wc_AesGcmEncrypt>
   1419a:	0003      	movs	r3, r0
   1419c:	22bd      	movs	r2, #189	; 0xbd
   1419e:	0092      	lsls	r2, r2, #2
   141a0:	18ba      	adds	r2, r7, r2
   141a2:	6013      	str	r3, [r2, #0]
                                        resultT, tagSz, aad, aadSz);

#if defined(WOLFSSL_ASYNC_CRYPT)
    result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (result != 0)
   141a4:	23bd      	movs	r3, #189	; 0xbd
   141a6:	009b      	lsls	r3, r3, #2
   141a8:	18fb      	adds	r3, r7, r3
   141aa:	681b      	ldr	r3, [r3, #0]
   141ac:	2b00      	cmp	r3, #0
   141ae:	d001      	beq.n	141b4 <aesgcm_default_test_helper+0x100>
        return -4702;
   141b0:	4b50      	ldr	r3, [pc, #320]	; (142f4 <aesgcm_default_test_helper+0x240>)
   141b2:	e090      	b.n	142d6 <aesgcm_default_test_helper+0x222>
    if (cipher != NULL) {
   141b4:	23c6      	movs	r3, #198	; 0xc6
   141b6:	009b      	lsls	r3, r3, #2
   141b8:	18fb      	adds	r3, r7, r3
   141ba:	681b      	ldr	r3, [r3, #0]
   141bc:	2b00      	cmp	r3, #0
   141be:	d010      	beq.n	141e2 <aesgcm_default_test_helper+0x12e>
        if (XMEMCMP(cipher, resultC, cipherSz))
   141c0:	23c7      	movs	r3, #199	; 0xc7
   141c2:	009b      	lsls	r3, r3, #2
   141c4:	18fb      	adds	r3, r7, r3
   141c6:	681a      	ldr	r2, [r3, #0]
   141c8:	2314      	movs	r3, #20
   141ca:	18f9      	adds	r1, r7, r3
   141cc:	23c6      	movs	r3, #198	; 0xc6
   141ce:	009b      	lsls	r3, r3, #2
   141d0:	18fb      	adds	r3, r7, r3
   141d2:	681b      	ldr	r3, [r3, #0]
   141d4:	0018      	movs	r0, r3
   141d6:	f011 fa7b 	bl	256d0 <memcmp>
   141da:	1e03      	subs	r3, r0, #0
   141dc:	d001      	beq.n	141e2 <aesgcm_default_test_helper+0x12e>
            return -4703;
   141de:	4b46      	ldr	r3, [pc, #280]	; (142f8 <aesgcm_default_test_helper+0x244>)
   141e0:	e079      	b.n	142d6 <aesgcm_default_test_helper+0x222>
    }
    if (XMEMCMP(tag, resultT, tagSz))
   141e2:	23cb      	movs	r3, #203	; 0xcb
   141e4:	009b      	lsls	r3, r3, #2
   141e6:	18fb      	adds	r3, r7, r3
   141e8:	681a      	ldr	r2, [r3, #0]
   141ea:	2374      	movs	r3, #116	; 0x74
   141ec:	18f9      	adds	r1, r7, r3
   141ee:	23ca      	movs	r3, #202	; 0xca
   141f0:	009b      	lsls	r3, r3, #2
   141f2:	18fb      	adds	r3, r7, r3
   141f4:	681b      	ldr	r3, [r3, #0]
   141f6:	0018      	movs	r0, r3
   141f8:	f011 fa6a 	bl	256d0 <memcmp>
   141fc:	1e03      	subs	r3, r0, #0
   141fe:	d001      	beq.n	14204 <aesgcm_default_test_helper+0x150>
        return -4704;
   14200:	4b3e      	ldr	r3, [pc, #248]	; (142fc <aesgcm_default_test_helper+0x248>)
   14202:	e068      	b.n	142d6 <aesgcm_default_test_helper+0x222>

    wc_AesFree(&enc);
   14204:	23de      	movs	r3, #222	; 0xde
   14206:	005b      	lsls	r3, r3, #1
   14208:	18fb      	adds	r3, r7, r3
   1420a:	0018      	movs	r0, r3
   1420c:	f7f5 fe1e 	bl	9e4c <wc_AesFree>

#ifdef HAVE_AES_DECRYPT
    result = wc_AesGcmSetKey(&dec, key, keySz);
   14210:	68ba      	ldr	r2, [r7, #8]
   14212:	68f9      	ldr	r1, [r7, #12]
   14214:	2384      	movs	r3, #132	; 0x84
   14216:	18fb      	adds	r3, r7, r3
   14218:	0018      	movs	r0, r3
   1421a:	f7f5 f88d 	bl	9338 <wc_AesGcmSetKey>
   1421e:	0003      	movs	r3, r0
   14220:	22bd      	movs	r2, #189	; 0xbd
   14222:	0092      	lsls	r2, r2, #2
   14224:	18ba      	adds	r2, r7, r2
   14226:	6013      	str	r3, [r2, #0]
    if (result != 0)
   14228:	23bd      	movs	r3, #189	; 0xbd
   1422a:	009b      	lsls	r3, r3, #2
   1422c:	18fb      	adds	r3, r7, r3
   1422e:	681b      	ldr	r3, [r3, #0]
   14230:	2b00      	cmp	r3, #0
   14232:	d001      	beq.n	14238 <aesgcm_default_test_helper+0x184>
        return -4705;
   14234:	4b32      	ldr	r3, [pc, #200]	; (14300 <aesgcm_default_test_helper+0x24c>)
   14236:	e04e      	b.n	142d6 <aesgcm_default_test_helper+0x222>

    result = wc_AesGcmDecrypt(&dec, resultP, resultC, cipherSz,
   14238:	23c7      	movs	r3, #199	; 0xc7
   1423a:	009b      	lsls	r3, r3, #2
   1423c:	18fb      	adds	r3, r7, r3
   1423e:	681e      	ldr	r6, [r3, #0]
   14240:	683b      	ldr	r3, [r7, #0]
   14242:	22cb      	movs	r2, #203	; 0xcb
   14244:	0092      	lsls	r2, r2, #2
   14246:	18ba      	adds	r2, r7, r2
   14248:	6812      	ldr	r2, [r2, #0]
   1424a:	21c9      	movs	r1, #201	; 0xc9
   1424c:	0089      	lsls	r1, r1, #2
   1424e:	1879      	adds	r1, r7, r1
   14250:	6809      	ldr	r1, [r1, #0]
   14252:	2014      	movs	r0, #20
   14254:	183d      	adds	r5, r7, r0
   14256:	2044      	movs	r0, #68	; 0x44
   14258:	183c      	adds	r4, r7, r0
   1425a:	2084      	movs	r0, #132	; 0x84
   1425c:	1838      	adds	r0, r7, r0
   1425e:	9105      	str	r1, [sp, #20]
   14260:	21c8      	movs	r1, #200	; 0xc8
   14262:	0089      	lsls	r1, r1, #2
   14264:	1879      	adds	r1, r7, r1
   14266:	6809      	ldr	r1, [r1, #0]
   14268:	9104      	str	r1, [sp, #16]
   1426a:	9203      	str	r2, [sp, #12]
   1426c:	2274      	movs	r2, #116	; 0x74
   1426e:	18ba      	adds	r2, r7, r2
   14270:	9202      	str	r2, [sp, #8]
   14272:	9301      	str	r3, [sp, #4]
   14274:	687b      	ldr	r3, [r7, #4]
   14276:	9300      	str	r3, [sp, #0]
   14278:	0033      	movs	r3, r6
   1427a:	002a      	movs	r2, r5
   1427c:	0021      	movs	r1, r4
   1427e:	f7f5 fb4d 	bl	991c <wc_AesGcmDecrypt>
   14282:	0003      	movs	r3, r0
   14284:	22bd      	movs	r2, #189	; 0xbd
   14286:	0092      	lsls	r2, r2, #2
   14288:	18ba      	adds	r2, r7, r2
   1428a:	6013      	str	r3, [r2, #0]
                      iv, ivSz, resultT, tagSz, aad, aadSz);
#if defined(WOLFSSL_ASYNC_CRYPT)
    result = wc_AsyncWait(result, &dec.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (result != 0)
   1428c:	23bd      	movs	r3, #189	; 0xbd
   1428e:	009b      	lsls	r3, r3, #2
   14290:	18fb      	adds	r3, r7, r3
   14292:	681b      	ldr	r3, [r3, #0]
   14294:	2b00      	cmp	r3, #0
   14296:	d001      	beq.n	1429c <aesgcm_default_test_helper+0x1e8>
        return -4706;
   14298:	4b1a      	ldr	r3, [pc, #104]	; (14304 <aesgcm_default_test_helper+0x250>)
   1429a:	e01c      	b.n	142d6 <aesgcm_default_test_helper+0x222>
    if (plain != NULL) {
   1429c:	23c4      	movs	r3, #196	; 0xc4
   1429e:	009b      	lsls	r3, r3, #2
   142a0:	18fb      	adds	r3, r7, r3
   142a2:	681b      	ldr	r3, [r3, #0]
   142a4:	2b00      	cmp	r3, #0
   142a6:	d010      	beq.n	142ca <aesgcm_default_test_helper+0x216>
        if (XMEMCMP(plain, resultP, plainSz))
   142a8:	23c5      	movs	r3, #197	; 0xc5
   142aa:	009b      	lsls	r3, r3, #2
   142ac:	18fb      	adds	r3, r7, r3
   142ae:	681a      	ldr	r2, [r3, #0]
   142b0:	2344      	movs	r3, #68	; 0x44
   142b2:	18f9      	adds	r1, r7, r3
   142b4:	23c4      	movs	r3, #196	; 0xc4
   142b6:	009b      	lsls	r3, r3, #2
   142b8:	18fb      	adds	r3, r7, r3
   142ba:	681b      	ldr	r3, [r3, #0]
   142bc:	0018      	movs	r0, r3
   142be:	f011 fa07 	bl	256d0 <memcmp>
   142c2:	1e03      	subs	r3, r0, #0
   142c4:	d001      	beq.n	142ca <aesgcm_default_test_helper+0x216>
            return -4707;
   142c6:	4b10      	ldr	r3, [pc, #64]	; (14308 <aesgcm_default_test_helper+0x254>)
   142c8:	e005      	b.n	142d6 <aesgcm_default_test_helper+0x222>
    }

    wc_AesFree(&dec);
   142ca:	2384      	movs	r3, #132	; 0x84
   142cc:	18fb      	adds	r3, r7, r3
   142ce:	0018      	movs	r0, r3
   142d0:	f7f5 fdbc 	bl	9e4c <wc_AesFree>
#endif /* HAVE_AES_DECRYPT */

    return 0;
   142d4:	2300      	movs	r3, #0
}
   142d6:	0018      	movs	r0, r3
   142d8:	46bd      	mov	sp, r7
   142da:	23bf      	movs	r3, #191	; 0xbf
   142dc:	009b      	lsls	r3, r3, #2
   142de:	449d      	add	sp, r3
   142e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142e2:	46c0      	nop			; (mov r8, r8)
   142e4:	fffffcec 	.word	0xfffffcec
   142e8:	20000010 	.word	0x20000010
   142ec:	ffffeda4 	.word	0xffffeda4
   142f0:	ffffeda3 	.word	0xffffeda3
   142f4:	ffffeda2 	.word	0xffffeda2
   142f8:	ffffeda1 	.word	0xffffeda1
   142fc:	ffffeda0 	.word	0xffffeda0
   14300:	ffffed9f 	.word	0xffffed9f
   14304:	ffffed9e 	.word	0xffffed9e
   14308:	ffffed9d 	.word	0xffffed9d

0001430c <aesgcm_default_test>:

/* tests that only use 12 byte IV and 16 or less byte AAD
 * test vectors are from NIST SP 800-38D
 * https://csrc.nist.gov/Projects/Cryptographic-Algorithm-Validation-Program/CAVP-TESTING-BLOCK-CIPHER-MODES*/
int aesgcm_default_test(void)
{
   1430c:	b580      	push	{r7, lr}
   1430e:	b0c6      	sub	sp, #280	; 0x118
   14310:	af08      	add	r7, sp, #32
    byte key1[] = {
   14312:	23e4      	movs	r3, #228	; 0xe4
   14314:	18fa      	adds	r2, r7, r3
   14316:	4b7b      	ldr	r3, [pc, #492]	; (14504 <aesgcm_default_test+0x1f8>)
   14318:	0010      	movs	r0, r2
   1431a:	0019      	movs	r1, r3
   1431c:	2310      	movs	r3, #16
   1431e:	001a      	movs	r2, r3
   14320:	f011 f9e5 	bl	256ee <memcpy>
        0x29, 0x8e, 0xfa, 0x1c, 0xcf, 0x29, 0xcf, 0x62,
        0xae, 0x68, 0x24, 0xbf, 0xc1, 0x95, 0x57, 0xfc
    };

    byte iv1[] = {
   14324:	23d8      	movs	r3, #216	; 0xd8
   14326:	18fa      	adds	r2, r7, r3
   14328:	4b77      	ldr	r3, [pc, #476]	; (14508 <aesgcm_default_test+0x1fc>)
   1432a:	0010      	movs	r0, r2
   1432c:	0019      	movs	r1, r3
   1432e:	230c      	movs	r3, #12
   14330:	001a      	movs	r2, r3
   14332:	f011 f9dc 	bl	256ee <memcpy>
        0x6f, 0x58, 0xa9, 0x3f, 0xe1, 0xd2, 0x07, 0xfa,
        0xe4, 0xed, 0x2f, 0x6d
    };

    ALIGN64 byte plain1[] = {
   14336:	23b8      	movs	r3, #184	; 0xb8
   14338:	18fa      	adds	r2, r7, r3
   1433a:	4b74      	ldr	r3, [pc, #464]	; (1450c <aesgcm_default_test+0x200>)
   1433c:	0010      	movs	r0, r2
   1433e:	0019      	movs	r1, r3
   14340:	2320      	movs	r3, #32
   14342:	001a      	movs	r2, r3
   14344:	f011 f9d3 	bl	256ee <memcpy>
        0x91, 0x9b, 0x13, 0x95, 0xf5, 0xd6, 0x38, 0x01,
        0xf9, 0x9f, 0x80, 0x68, 0xd6, 0x5c, 0xa5, 0xac,
        0x63, 0x87, 0x2d, 0xaf, 0x16, 0xb9, 0x39, 0x01
    };

    byte aad1[] = {
   14348:	23a8      	movs	r3, #168	; 0xa8
   1434a:	18fa      	adds	r2, r7, r3
   1434c:	4b70      	ldr	r3, [pc, #448]	; (14510 <aesgcm_default_test+0x204>)
   1434e:	0010      	movs	r0, r2
   14350:	0019      	movs	r1, r3
   14352:	2310      	movs	r3, #16
   14354:	001a      	movs	r2, r3
   14356:	f011 f9ca 	bl	256ee <memcpy>
        0x02, 0x1f, 0xaf, 0xd2, 0x38, 0x46, 0x39, 0x73,
        0xff, 0xe8, 0x02, 0x56, 0xe5, 0xb1, 0xc6, 0xb1
    };

    ALIGN64 byte cipher1[] = {
   1435a:	2388      	movs	r3, #136	; 0x88
   1435c:	18fa      	adds	r2, r7, r3
   1435e:	4b6d      	ldr	r3, [pc, #436]	; (14514 <aesgcm_default_test+0x208>)
   14360:	0010      	movs	r0, r2
   14362:	0019      	movs	r1, r3
   14364:	2320      	movs	r3, #32
   14366:	001a      	movs	r2, r3
   14368:	f011 f9c1 	bl	256ee <memcpy>
        0x7f, 0xe4, 0xe6, 0x33, 0x51, 0xd9, 0xe7, 0x9d,
        0x3d, 0xfd, 0x39, 0x1e, 0x32, 0x67, 0x10, 0x46,
        0x58, 0x21, 0x2d, 0xa9, 0x65, 0x21, 0xb7, 0xdb
    };

    byte tag1[] = {
   1436c:	2378      	movs	r3, #120	; 0x78
   1436e:	18fa      	adds	r2, r7, r3
   14370:	4b69      	ldr	r3, [pc, #420]	; (14518 <aesgcm_default_test+0x20c>)
   14372:	0010      	movs	r0, r2
   14374:	0019      	movs	r1, r3
   14376:	2310      	movs	r3, #16
   14378:	001a      	movs	r2, r3
   1437a:	f011 f9b8 	bl	256ee <memcpy>
        0x54, 0x24, 0x65, 0xef, 0x59, 0x93, 0x16, 0xf7,
        0x3a, 0x7a, 0x56, 0x05, 0x09, 0xa2, 0xd9, 0xf2
    };


    byte key2[] = {
   1437e:	2368      	movs	r3, #104	; 0x68
   14380:	18fa      	adds	r2, r7, r3
   14382:	4b66      	ldr	r3, [pc, #408]	; (1451c <aesgcm_default_test+0x210>)
   14384:	0010      	movs	r0, r2
   14386:	0019      	movs	r1, r3
   14388:	2310      	movs	r3, #16
   1438a:	001a      	movs	r2, r3
   1438c:	f011 f9af 	bl	256ee <memcpy>
        0x01, 0x6d, 0xbb, 0x38, 0xda, 0xa7, 0x6d, 0xfe,
        0x7d, 0xa3, 0x84, 0xeb, 0xf1, 0x24, 0x03, 0x64
    };

    byte iv2[] = {
   14390:	235c      	movs	r3, #92	; 0x5c
   14392:	18fa      	adds	r2, r7, r3
   14394:	4b62      	ldr	r3, [pc, #392]	; (14520 <aesgcm_default_test+0x214>)
   14396:	0010      	movs	r0, r2
   14398:	0019      	movs	r1, r3
   1439a:	230c      	movs	r3, #12
   1439c:	001a      	movs	r2, r3
   1439e:	f011 f9a6 	bl	256ee <memcpy>
        0x07, 0x93, 0xef, 0x3a, 0xda, 0x78, 0x2f, 0x78,
        0xc9, 0x8a, 0xff, 0xe3
    };

    ALIGN64 byte plain2[] = {
   143a2:	234c      	movs	r3, #76	; 0x4c
   143a4:	18fa      	adds	r2, r7, r3
   143a6:	4b5f      	ldr	r3, [pc, #380]	; (14524 <aesgcm_default_test+0x218>)
   143a8:	0010      	movs	r0, r2
   143aa:	0019      	movs	r1, r3
   143ac:	2310      	movs	r3, #16
   143ae:	001a      	movs	r2, r3
   143b0:	f011 f99d 	bl	256ee <memcpy>
        0x4b, 0x34, 0xa9, 0xec, 0x57, 0x63, 0x52, 0x4b,
        0x19, 0x1d, 0x56, 0x16, 0xc5, 0x47, 0xf6, 0xb7
    };

    ALIGN64 byte cipher2[] = {
   143b4:	233c      	movs	r3, #60	; 0x3c
   143b6:	18fa      	adds	r2, r7, r3
   143b8:	4b5b      	ldr	r3, [pc, #364]	; (14528 <aesgcm_default_test+0x21c>)
   143ba:	0010      	movs	r0, r2
   143bc:	0019      	movs	r1, r3
   143be:	2310      	movs	r3, #16
   143c0:	001a      	movs	r2, r3
   143c2:	f011 f994 	bl	256ee <memcpy>
        0x60, 0x9a, 0xa3, 0xf4, 0x54, 0x1b, 0xc0, 0xfe,
        0x99, 0x31, 0xda, 0xad, 0x2e, 0xe1, 0x5d, 0x0c
    };

    byte tag2[] = {
   143c6:	232c      	movs	r3, #44	; 0x2c
   143c8:	18fa      	adds	r2, r7, r3
   143ca:	4b58      	ldr	r3, [pc, #352]	; (1452c <aesgcm_default_test+0x220>)
   143cc:	0010      	movs	r0, r2
   143ce:	0019      	movs	r1, r3
   143d0:	2310      	movs	r3, #16
   143d2:	001a      	movs	r2, r3
   143d4:	f011 f98b 	bl	256ee <memcpy>
        0x33, 0xaf, 0xec, 0x59, 0xc4, 0x5b, 0xaf, 0x68,
        0x9a, 0x5e, 0x1b, 0x13, 0xae, 0x42, 0x36, 0x19
    };

    byte key3[] = {
   143d8:	231c      	movs	r3, #28
   143da:	18fa      	adds	r2, r7, r3
   143dc:	4b54      	ldr	r3, [pc, #336]	; (14530 <aesgcm_default_test+0x224>)
   143de:	0010      	movs	r0, r2
   143e0:	0019      	movs	r1, r3
   143e2:	2310      	movs	r3, #16
   143e4:	001a      	movs	r2, r3
   143e6:	f011 f982 	bl	256ee <memcpy>
        0xb0, 0x1e, 0x45, 0xcc, 0x30, 0x88, 0xaa, 0xba,
        0x9f, 0xa4, 0x3d, 0x81, 0xd4, 0x81, 0x82, 0x3f
    };

    byte iv3[] = {
   143ea:	2310      	movs	r3, #16
   143ec:	18fa      	adds	r2, r7, r3
   143ee:	4b51      	ldr	r3, [pc, #324]	; (14534 <aesgcm_default_test+0x228>)
   143f0:	0010      	movs	r0, r2
   143f2:	0019      	movs	r1, r3
   143f4:	230c      	movs	r3, #12
   143f6:	001a      	movs	r2, r3
   143f8:	f011 f979 	bl	256ee <memcpy>
        0x5a, 0x2c, 0x4a, 0x66, 0x46, 0x87, 0x13, 0x45,
        0x6a, 0x4b, 0xd5, 0xe1
    };

    byte tag3[] = {
   143fc:	1d3a      	adds	r2, r7, #4
   143fe:	4b4e      	ldr	r3, [pc, #312]	; (14538 <aesgcm_default_test+0x22c>)
   14400:	0010      	movs	r0, r2
   14402:	0019      	movs	r1, r3
   14404:	230c      	movs	r3, #12
   14406:	001a      	movs	r2, r3
   14408:	f011 f971 	bl	256ee <memcpy>
        0x01, 0x42, 0x80, 0xf9, 0x44, 0xf5, 0x3c, 0x68,
        0x11, 0x64, 0xb2, 0xff
    };

    int ret;
	ret = aesgcm_default_test_helper(key1, sizeof(key1), iv1, sizeof(iv1),
   1440c:	23d8      	movs	r3, #216	; 0xd8
   1440e:	18fa      	adds	r2, r7, r3
   14410:	23e4      	movs	r3, #228	; 0xe4
   14412:	18f8      	adds	r0, r7, r3
   14414:	2310      	movs	r3, #16
   14416:	9307      	str	r3, [sp, #28]
   14418:	2378      	movs	r3, #120	; 0x78
   1441a:	18fb      	adds	r3, r7, r3
   1441c:	9306      	str	r3, [sp, #24]
   1441e:	2310      	movs	r3, #16
   14420:	9305      	str	r3, [sp, #20]
   14422:	23a8      	movs	r3, #168	; 0xa8
   14424:	18fb      	adds	r3, r7, r3
   14426:	9304      	str	r3, [sp, #16]
   14428:	2320      	movs	r3, #32
   1442a:	9303      	str	r3, [sp, #12]
   1442c:	2388      	movs	r3, #136	; 0x88
   1442e:	18fb      	adds	r3, r7, r3
   14430:	9302      	str	r3, [sp, #8]
   14432:	2320      	movs	r3, #32
   14434:	9301      	str	r3, [sp, #4]
   14436:	23b8      	movs	r3, #184	; 0xb8
   14438:	18fb      	adds	r3, r7, r3
   1443a:	9300      	str	r3, [sp, #0]
   1443c:	230c      	movs	r3, #12
   1443e:	2110      	movs	r1, #16
   14440:	f7ff fe38 	bl	140b4 <aesgcm_default_test_helper>
   14444:	0003      	movs	r3, r0
   14446:	22f4      	movs	r2, #244	; 0xf4
   14448:	18ba      	adds	r2, r7, r2
   1444a:	6013      	str	r3, [r2, #0]
		plain1, sizeof(plain1), cipher1, sizeof(cipher1),
		aad1, sizeof(aad1), tag1, sizeof(tag1));
	if (ret != 0) {
   1444c:	23f4      	movs	r3, #244	; 0xf4
   1444e:	18fb      	adds	r3, r7, r3
   14450:	681b      	ldr	r3, [r3, #0]
   14452:	2b00      	cmp	r3, #0
   14454:	d003      	beq.n	1445e <aesgcm_default_test+0x152>
		return ret;
   14456:	23f4      	movs	r3, #244	; 0xf4
   14458:	18fb      	adds	r3, r7, r3
   1445a:	681b      	ldr	r3, [r3, #0]
   1445c:	e04d      	b.n	144fa <aesgcm_default_test+0x1ee>
	}

	ret = aesgcm_default_test_helper(key2, sizeof(key2), iv2, sizeof(iv2),
   1445e:	235c      	movs	r3, #92	; 0x5c
   14460:	18fa      	adds	r2, r7, r3
   14462:	2368      	movs	r3, #104	; 0x68
   14464:	18f8      	adds	r0, r7, r3
   14466:	2310      	movs	r3, #16
   14468:	9307      	str	r3, [sp, #28]
   1446a:	232c      	movs	r3, #44	; 0x2c
   1446c:	18fb      	adds	r3, r7, r3
   1446e:	9306      	str	r3, [sp, #24]
   14470:	2300      	movs	r3, #0
   14472:	9305      	str	r3, [sp, #20]
   14474:	2300      	movs	r3, #0
   14476:	9304      	str	r3, [sp, #16]
   14478:	2310      	movs	r3, #16
   1447a:	9303      	str	r3, [sp, #12]
   1447c:	233c      	movs	r3, #60	; 0x3c
   1447e:	18fb      	adds	r3, r7, r3
   14480:	9302      	str	r3, [sp, #8]
   14482:	2310      	movs	r3, #16
   14484:	9301      	str	r3, [sp, #4]
   14486:	234c      	movs	r3, #76	; 0x4c
   14488:	18fb      	adds	r3, r7, r3
   1448a:	9300      	str	r3, [sp, #0]
   1448c:	230c      	movs	r3, #12
   1448e:	2110      	movs	r1, #16
   14490:	f7ff fe10 	bl	140b4 <aesgcm_default_test_helper>
   14494:	0003      	movs	r3, r0
   14496:	22f4      	movs	r2, #244	; 0xf4
   14498:	18ba      	adds	r2, r7, r2
   1449a:	6013      	str	r3, [r2, #0]
		plain2, sizeof(plain2), cipher2, sizeof(cipher2),
		NULL, 0, tag2, sizeof(tag2));
	if (ret != 0) {
   1449c:	23f4      	movs	r3, #244	; 0xf4
   1449e:	18fb      	adds	r3, r7, r3
   144a0:	681b      	ldr	r3, [r3, #0]
   144a2:	2b00      	cmp	r3, #0
   144a4:	d003      	beq.n	144ae <aesgcm_default_test+0x1a2>
		return ret;
   144a6:	23f4      	movs	r3, #244	; 0xf4
   144a8:	18fb      	adds	r3, r7, r3
   144aa:	681b      	ldr	r3, [r3, #0]
   144ac:	e025      	b.n	144fa <aesgcm_default_test+0x1ee>
	}
	ret = aesgcm_default_test_helper(key3, sizeof(key3), iv3, sizeof(iv3),
   144ae:	2310      	movs	r3, #16
   144b0:	18fa      	adds	r2, r7, r3
   144b2:	231c      	movs	r3, #28
   144b4:	18f8      	adds	r0, r7, r3
   144b6:	230c      	movs	r3, #12
   144b8:	9307      	str	r3, [sp, #28]
   144ba:	1d3b      	adds	r3, r7, #4
   144bc:	9306      	str	r3, [sp, #24]
   144be:	2300      	movs	r3, #0
   144c0:	9305      	str	r3, [sp, #20]
   144c2:	2300      	movs	r3, #0
   144c4:	9304      	str	r3, [sp, #16]
   144c6:	2300      	movs	r3, #0
   144c8:	9303      	str	r3, [sp, #12]
   144ca:	2300      	movs	r3, #0
   144cc:	9302      	str	r3, [sp, #8]
   144ce:	2300      	movs	r3, #0
   144d0:	9301      	str	r3, [sp, #4]
   144d2:	2300      	movs	r3, #0
   144d4:	9300      	str	r3, [sp, #0]
   144d6:	230c      	movs	r3, #12
   144d8:	2110      	movs	r1, #16
   144da:	f7ff fdeb 	bl	140b4 <aesgcm_default_test_helper>
   144de:	0003      	movs	r3, r0
   144e0:	22f4      	movs	r2, #244	; 0xf4
   144e2:	18ba      	adds	r2, r7, r2
   144e4:	6013      	str	r3, [r2, #0]
		NULL, 0, NULL, 0,
		NULL, 0, tag3, sizeof(tag3));
	if (ret != 0) {
   144e6:	23f4      	movs	r3, #244	; 0xf4
   144e8:	18fb      	adds	r3, r7, r3
   144ea:	681b      	ldr	r3, [r3, #0]
   144ec:	2b00      	cmp	r3, #0
   144ee:	d003      	beq.n	144f8 <aesgcm_default_test+0x1ec>
		return ret;
   144f0:	23f4      	movs	r3, #244	; 0xf4
   144f2:	18fb      	adds	r3, r7, r3
   144f4:	681b      	ldr	r3, [r3, #0]
   144f6:	e000      	b.n	144fa <aesgcm_default_test+0x1ee>
	}

	return 0;
   144f8:	2300      	movs	r3, #0
}
   144fa:	0018      	movs	r0, r3
   144fc:	46bd      	mov	sp, r7
   144fe:	b03e      	add	sp, #248	; 0xf8
   14500:	bd80      	pop	{r7, pc}
   14502:	46c0      	nop			; (mov r8, r8)
   14504:	0002d3e8 	.word	0x0002d3e8
   14508:	0002d3f8 	.word	0x0002d3f8
   1450c:	0002d404 	.word	0x0002d404
   14510:	0002d424 	.word	0x0002d424
   14514:	0002d434 	.word	0x0002d434
   14518:	0002d454 	.word	0x0002d454
   1451c:	0002d464 	.word	0x0002d464
   14520:	0002d474 	.word	0x0002d474
   14524:	0002d480 	.word	0x0002d480
   14528:	0002d490 	.word	0x0002d490
   1452c:	0002d4a0 	.word	0x0002d4a0
   14530:	0002d4b0 	.word	0x0002d4b0
   14534:	0002d4c0 	.word	0x0002d4c0
   14538:	0002d4cc 	.word	0x0002d4cc

0001453c <aesgcm_test>:

int aesgcm_test(void)
{
   1453c:	b590      	push	{r4, r7, lr}
   1453e:	4ce7      	ldr	r4, [pc, #924]	; (148dc <aesgcm_test+0x3a0>)
   14540:	44a5      	add	sp, r4
   14542:	af06      	add	r7, sp, #24
    /*
     * This is Test Case 16 from the document Galois/
     * Counter Mode of Operation (GCM) by McGrew and
     * Viega.
     */
    const byte p[] =
   14544:	4be6      	ldr	r3, [pc, #920]	; (148e0 <aesgcm_test+0x3a4>)
   14546:	22a0      	movs	r2, #160	; 0xa0
   14548:	00d2      	lsls	r2, r2, #3
   1454a:	18ba      	adds	r2, r7, r2
   1454c:	18d2      	adds	r2, r2, r3
   1454e:	4be5      	ldr	r3, [pc, #916]	; (148e4 <aesgcm_test+0x3a8>)
   14550:	0010      	movs	r0, r2
   14552:	0019      	movs	r1, r3
   14554:	233c      	movs	r3, #60	; 0x3c
   14556:	001a      	movs	r2, r3
   14558:	f011 f8c9 	bl	256ee <memcpy>
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };

    const byte a[] =
   1455c:	4be2      	ldr	r3, [pc, #904]	; (148e8 <aesgcm_test+0x3ac>)
   1455e:	22a0      	movs	r2, #160	; 0xa0
   14560:	00d2      	lsls	r2, r2, #3
   14562:	18ba      	adds	r2, r7, r2
   14564:	18d2      	adds	r2, r2, r3
   14566:	4be1      	ldr	r3, [pc, #900]	; (148ec <aesgcm_test+0x3b0>)
   14568:	0010      	movs	r0, r2
   1456a:	0019      	movs	r1, r3
   1456c:	2314      	movs	r3, #20
   1456e:	001a      	movs	r2, r3
   14570:	f011 f8bd 	bl	256ee <memcpy>
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };

#ifdef WOLFSSL_AES_256
    const byte k1[] =
   14574:	4bde      	ldr	r3, [pc, #888]	; (148f0 <aesgcm_test+0x3b4>)
   14576:	22a0      	movs	r2, #160	; 0xa0
   14578:	00d2      	lsls	r2, r2, #3
   1457a:	18ba      	adds	r2, r7, r2
   1457c:	18d2      	adds	r2, r2, r3
   1457e:	4bdd      	ldr	r3, [pc, #884]	; (148f4 <aesgcm_test+0x3b8>)
   14580:	0010      	movs	r0, r2
   14582:	0019      	movs	r1, r3
   14584:	2320      	movs	r3, #32
   14586:	001a      	movs	r2, r3
   14588:	f011 f8b1 	bl	256ee <memcpy>
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };

    const byte iv1[] =
   1458c:	4bda      	ldr	r3, [pc, #872]	; (148f8 <aesgcm_test+0x3bc>)
   1458e:	22a0      	movs	r2, #160	; 0xa0
   14590:	00d2      	lsls	r2, r2, #3
   14592:	18ba      	adds	r2, r7, r2
   14594:	18d2      	adds	r2, r2, r3
   14596:	4bd9      	ldr	r3, [pc, #868]	; (148fc <aesgcm_test+0x3c0>)
   14598:	0010      	movs	r0, r2
   1459a:	0019      	movs	r1, r3
   1459c:	230c      	movs	r3, #12
   1459e:	001a      	movs	r2, r3
   145a0:	f011 f8a5 	bl	256ee <memcpy>
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88
    };

    const byte c1[] =
   145a4:	4bd6      	ldr	r3, [pc, #856]	; (14900 <aesgcm_test+0x3c4>)
   145a6:	22a0      	movs	r2, #160	; 0xa0
   145a8:	00d2      	lsls	r2, r2, #3
   145aa:	18ba      	adds	r2, r7, r2
   145ac:	18d2      	adds	r2, r2, r3
   145ae:	4bd5      	ldr	r3, [pc, #852]	; (14904 <aesgcm_test+0x3c8>)
   145b0:	0010      	movs	r0, r2
   145b2:	0019      	movs	r1, r3
   145b4:	233c      	movs	r3, #60	; 0x3c
   145b6:	001a      	movs	r2, r3
   145b8:	f011 f899 	bl	256ee <memcpy>
        0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
        0xbc, 0xc9, 0xf6, 0x62
    };
#endif /* WOLFSSL_AES_256 */

    const byte t1[] =
   145bc:	4bd2      	ldr	r3, [pc, #840]	; (14908 <aesgcm_test+0x3cc>)
   145be:	22a0      	movs	r2, #160	; 0xa0
   145c0:	00d2      	lsls	r2, r2, #3
   145c2:	18ba      	adds	r2, r7, r2
   145c4:	18d2      	adds	r2, r2, r3
   145c6:	4bd1      	ldr	r3, [pc, #836]	; (1490c <aesgcm_test+0x3d0>)
   145c8:	0010      	movs	r0, r2
   145ca:	0019      	movs	r1, r3
   145cc:	2310      	movs	r3, #16
   145ce:	001a      	movs	r2, r3
   145d0:	f011 f88d 	bl	256ee <memcpy>
        !defined(WOLFSSL_XILINX_CRYPT) && !defined(WOLFSSL_AFALG_XILINX_AES)

    #define ENABLE_NON_12BYTE_IV_TEST
#ifdef WOLFSSL_AES_192
    /* Test Case 12, uses same plaintext and AAD data. */
    const byte k2[] =
   145d4:	4bce      	ldr	r3, [pc, #824]	; (14910 <aesgcm_test+0x3d4>)
   145d6:	22a0      	movs	r2, #160	; 0xa0
   145d8:	00d2      	lsls	r2, r2, #3
   145da:	18ba      	adds	r2, r7, r2
   145dc:	18d2      	adds	r2, r2, r3
   145de:	4bcd      	ldr	r3, [pc, #820]	; (14914 <aesgcm_test+0x3d8>)
   145e0:	0010      	movs	r0, r2
   145e2:	0019      	movs	r1, r3
   145e4:	2318      	movs	r3, #24
   145e6:	001a      	movs	r2, r3
   145e8:	f011 f881 	bl	256ee <memcpy>
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c
    };

    const byte iv2[] =
   145ec:	4bca      	ldr	r3, [pc, #808]	; (14918 <aesgcm_test+0x3dc>)
   145ee:	22a0      	movs	r2, #160	; 0xa0
   145f0:	00d2      	lsls	r2, r2, #3
   145f2:	18ba      	adds	r2, r7, r2
   145f4:	18d2      	adds	r2, r2, r3
   145f6:	4bc9      	ldr	r3, [pc, #804]	; (1491c <aesgcm_test+0x3e0>)
   145f8:	0010      	movs	r0, r2
   145fa:	0019      	movs	r1, r3
   145fc:	233c      	movs	r3, #60	; 0x3c
   145fe:	001a      	movs	r2, r3
   14600:	f011 f875 	bl	256ee <memcpy>
        0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
        0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
        0xa6, 0x37, 0xb3, 0x9b
    };

    const byte c2[] =
   14604:	4bc6      	ldr	r3, [pc, #792]	; (14920 <aesgcm_test+0x3e4>)
   14606:	22a0      	movs	r2, #160	; 0xa0
   14608:	00d2      	lsls	r2, r2, #3
   1460a:	18ba      	adds	r2, r7, r2
   1460c:	18d2      	adds	r2, r2, r3
   1460e:	4bc5      	ldr	r3, [pc, #788]	; (14924 <aesgcm_test+0x3e8>)
   14610:	0010      	movs	r0, r2
   14612:	0019      	movs	r1, r3
   14614:	233c      	movs	r3, #60	; 0x3c
   14616:	001a      	movs	r2, r3
   14618:	f011 f869 	bl	256ee <memcpy>
        0xe2, 0xf0, 0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3,
        0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7,
        0xe9, 0xb7, 0x37, 0x3b
    };

    const byte t2[] =
   1461c:	4bc2      	ldr	r3, [pc, #776]	; (14928 <aesgcm_test+0x3ec>)
   1461e:	22a0      	movs	r2, #160	; 0xa0
   14620:	00d2      	lsls	r2, r2, #3
   14622:	18ba      	adds	r2, r7, r2
   14624:	18d2      	adds	r2, r2, r3
   14626:	4bc1      	ldr	r3, [pc, #772]	; (1492c <aesgcm_test+0x3f0>)
   14628:	0010      	movs	r0, r2
   1462a:	0019      	movs	r1, r3
   1462c:	2310      	movs	r3, #16
   1462e:	001a      	movs	r2, r3
   14630:	f011 f85d 	bl	256ee <memcpy>
    };
#endif /* WOLFSSL_AES_192 */
#ifdef WOLFSSL_AES_128
    /* The following is an interesting test case from the example
     * FIPS test vectors for AES-GCM. IVlen = 1 byte */
    const byte p3[] =
   14634:	4bbe      	ldr	r3, [pc, #760]	; (14930 <aesgcm_test+0x3f4>)
   14636:	22a0      	movs	r2, #160	; 0xa0
   14638:	00d2      	lsls	r2, r2, #3
   1463a:	18ba      	adds	r2, r7, r2
   1463c:	18d2      	adds	r2, r2, r3
   1463e:	4bbd      	ldr	r3, [pc, #756]	; (14934 <aesgcm_test+0x3f8>)
   14640:	0010      	movs	r0, r2
   14642:	0019      	movs	r1, r3
   14644:	2310      	movs	r3, #16
   14646:	001a      	movs	r2, r3
   14648:	f011 f851 	bl	256ee <memcpy>
    {
        0x57, 0xce, 0x45, 0x1f, 0xa5, 0xe2, 0x35, 0xa5,
        0x8e, 0x1a, 0xa2, 0x3b, 0x77, 0xcb, 0xaf, 0xe2
    };

    const byte k3[] =
   1464c:	4bba      	ldr	r3, [pc, #744]	; (14938 <aesgcm_test+0x3fc>)
   1464e:	22a0      	movs	r2, #160	; 0xa0
   14650:	00d2      	lsls	r2, r2, #3
   14652:	18ba      	adds	r2, r7, r2
   14654:	18d2      	adds	r2, r2, r3
   14656:	4bb9      	ldr	r3, [pc, #740]	; (1493c <aesgcm_test+0x400>)
   14658:	0010      	movs	r0, r2
   1465a:	0019      	movs	r1, r3
   1465c:	2310      	movs	r3, #16
   1465e:	001a      	movs	r2, r3
   14660:	f011 f845 	bl	256ee <memcpy>
    {
        0xbb, 0x01, 0xd7, 0x03, 0x81, 0x1c, 0x10, 0x1a,
        0x35, 0xe0, 0xff, 0xd2, 0x91, 0xba, 0xf2, 0x4b
    };

    const byte iv3[] =
   14664:	4bb6      	ldr	r3, [pc, #728]	; (14940 <aesgcm_test+0x404>)
   14666:	22a0      	movs	r2, #160	; 0xa0
   14668:	00d2      	lsls	r2, r2, #3
   1466a:	4694      	mov	ip, r2
   1466c:	44bc      	add	ip, r7
   1466e:	4463      	add	r3, ip
   14670:	22ca      	movs	r2, #202	; 0xca
   14672:	701a      	strb	r2, [r3, #0]
    {
        0xca
    };

    const byte c3[] =
   14674:	4bb3      	ldr	r3, [pc, #716]	; (14944 <aesgcm_test+0x408>)
   14676:	22a0      	movs	r2, #160	; 0xa0
   14678:	00d2      	lsls	r2, r2, #3
   1467a:	18ba      	adds	r2, r7, r2
   1467c:	18d2      	adds	r2, r2, r3
   1467e:	4bb2      	ldr	r3, [pc, #712]	; (14948 <aesgcm_test+0x40c>)
   14680:	0010      	movs	r0, r2
   14682:	0019      	movs	r1, r3
   14684:	2310      	movs	r3, #16
   14686:	001a      	movs	r2, r3
   14688:	f011 f831 	bl	256ee <memcpy>
    {
        0x6b, 0x5f, 0xb3, 0x9d, 0xc1, 0xc5, 0x7a, 0x4f,
        0xf3, 0x51, 0x4d, 0xc2, 0xd5, 0xf0, 0xd0, 0x07
    };

    const byte a3[] =
   1468c:	4baf      	ldr	r3, [pc, #700]	; (1494c <aesgcm_test+0x410>)
   1468e:	22a0      	movs	r2, #160	; 0xa0
   14690:	00d2      	lsls	r2, r2, #3
   14692:	18ba      	adds	r2, r7, r2
   14694:	18d2      	adds	r2, r2, r3
   14696:	4bae      	ldr	r3, [pc, #696]	; (14950 <aesgcm_test+0x414>)
   14698:	0010      	movs	r0, r2
   1469a:	0019      	movs	r1, r3
   1469c:	2310      	movs	r3, #16
   1469e:	001a      	movs	r2, r3
   146a0:	f011 f825 	bl	256ee <memcpy>
    {
        0x40, 0xfc, 0xdc, 0xd7, 0x4a, 0xd7, 0x8b, 0xf1,
        0x3e, 0x7c, 0x60, 0x55, 0x50, 0x51, 0xdd, 0x54
    };

    const byte t3[] =
   146a4:	4bab      	ldr	r3, [pc, #684]	; (14954 <aesgcm_test+0x418>)
   146a6:	22a0      	movs	r2, #160	; 0xa0
   146a8:	00d2      	lsls	r2, r2, #3
   146aa:	18ba      	adds	r2, r7, r2
   146ac:	18d2      	adds	r2, r2, r3
   146ae:	4baa      	ldr	r3, [pc, #680]	; (14958 <aesgcm_test+0x41c>)
   146b0:	0010      	movs	r0, r2
   146b2:	0019      	movs	r1, r3
   146b4:	2310      	movs	r3, #16
   146b6:	001a      	movs	r2, r3
   146b8:	f011 f819 	bl	256ee <memcpy>
    XMEMSET(large_input, 0, sizeof(large_input));
    XMEMSET(large_output, 0, sizeof(large_output));
    XMEMSET(large_outdec, 0, sizeof(large_outdec));
#endif

    XMEMSET(resultT, 0, sizeof(resultT));
   146bc:	23ac      	movs	r3, #172	; 0xac
   146be:	18fb      	adds	r3, r7, r3
   146c0:	2210      	movs	r2, #16
   146c2:	2100      	movs	r1, #0
   146c4:	0018      	movs	r0, r3
   146c6:	f011 f830 	bl	2572a <memset>
    XMEMSET(resultC, 0, sizeof(resultC));
   146ca:	2314      	movs	r3, #20
   146cc:	18fb      	adds	r3, r7, r3
   146ce:	224c      	movs	r2, #76	; 0x4c
   146d0:	2100      	movs	r1, #0
   146d2:	0018      	movs	r0, r3
   146d4:	f011 f829 	bl	2572a <memset>
    XMEMSET(resultP, 0, sizeof(resultP));
   146d8:	2360      	movs	r3, #96	; 0x60
   146da:	18fb      	adds	r3, r7, r3
   146dc:	224c      	movs	r2, #76	; 0x4c
   146de:	2100      	movs	r1, #0
   146e0:	0018      	movs	r0, r3
   146e2:	f011 f822 	bl	2572a <memset>

    if (wc_AesInit(&enc, HEAP_HINT, devId) != 0) {
   146e6:	4b9d      	ldr	r3, [pc, #628]	; (1495c <aesgcm_test+0x420>)
   146e8:	681a      	ldr	r2, [r3, #0]
   146ea:	23ec      	movs	r3, #236	; 0xec
   146ec:	009b      	lsls	r3, r3, #2
   146ee:	18fb      	adds	r3, r7, r3
   146f0:	2100      	movs	r1, #0
   146f2:	0018      	movs	r0, r3
   146f4:	f7f5 fb92 	bl	9e1c <wc_AesInit>
   146f8:	1e03      	subs	r3, r0, #0
   146fa:	d002      	beq.n	14702 <aesgcm_test+0x1c6>
        return -5700;
   146fc:	4b98      	ldr	r3, [pc, #608]	; (14960 <aesgcm_test+0x424>)
   146fe:	f000 fd5a 	bl	151b6 <aesgcm_test+0xc7a>
    }
    if (wc_AesInit(&dec, HEAP_HINT, devId) != 0) {
   14702:	4b96      	ldr	r3, [pc, #600]	; (1495c <aesgcm_test+0x420>)
   14704:	681a      	ldr	r2, [r3, #0]
   14706:	239e      	movs	r3, #158	; 0x9e
   14708:	009b      	lsls	r3, r3, #2
   1470a:	18fb      	adds	r3, r7, r3
   1470c:	2100      	movs	r1, #0
   1470e:	0018      	movs	r0, r3
   14710:	f7f5 fb84 	bl	9e1c <wc_AesInit>
   14714:	1e03      	subs	r3, r0, #0
   14716:	d002      	beq.n	1471e <aesgcm_test+0x1e2>
        return -5700;
   14718:	4b91      	ldr	r3, [pc, #580]	; (14960 <aesgcm_test+0x424>)
   1471a:	f000 fd4c 	bl	151b6 <aesgcm_test+0xc7a>
    }

#ifdef WOLFSSL_AES_256
    result = wc_AesGcmSetKey(&enc, k1, sizeof(k1));
   1471e:	2382      	movs	r3, #130	; 0x82
   14720:	009b      	lsls	r3, r3, #2
   14722:	18f9      	adds	r1, r7, r3
   14724:	23ec      	movs	r3, #236	; 0xec
   14726:	009b      	lsls	r3, r3, #2
   14728:	18fb      	adds	r3, r7, r3
   1472a:	2220      	movs	r2, #32
   1472c:	0018      	movs	r0, r3
   1472e:	f7f4 fe03 	bl	9338 <wc_AesGcmSetKey>
   14732:	0003      	movs	r3, r0
   14734:	229d      	movs	r2, #157	; 0x9d
   14736:	00d2      	lsls	r2, r2, #3
   14738:	18ba      	adds	r2, r7, r2
   1473a:	6013      	str	r3, [r2, #0]
    if (result != 0)
   1473c:	239d      	movs	r3, #157	; 0x9d
   1473e:	00db      	lsls	r3, r3, #3
   14740:	18fb      	adds	r3, r7, r3
   14742:	681b      	ldr	r3, [r3, #0]
   14744:	2b00      	cmp	r3, #0
   14746:	d002      	beq.n	1474e <aesgcm_test+0x212>
        return -5701;
   14748:	4b86      	ldr	r3, [pc, #536]	; (14964 <aesgcm_test+0x428>)
   1474a:	f000 fd34 	bl	151b6 <aesgcm_test+0xc7a>

    /* AES-GCM encrypt and decrypt both use AES encrypt internally */
    result = wc_AesGcmEncrypt(&enc, resultC, p, sizeof(p), iv1, sizeof(iv1),
   1474e:	238f      	movs	r3, #143	; 0x8f
   14750:	009b      	lsls	r3, r3, #2
   14752:	18fa      	adds	r2, r7, r3
   14754:	2314      	movs	r3, #20
   14756:	18f9      	adds	r1, r7, r3
   14758:	23ec      	movs	r3, #236	; 0xec
   1475a:	009b      	lsls	r3, r3, #2
   1475c:	18f8      	adds	r0, r7, r3
   1475e:	2314      	movs	r3, #20
   14760:	9305      	str	r3, [sp, #20]
   14762:	238a      	movs	r3, #138	; 0x8a
   14764:	009b      	lsls	r3, r3, #2
   14766:	18fb      	adds	r3, r7, r3
   14768:	9304      	str	r3, [sp, #16]
   1476a:	2310      	movs	r3, #16
   1476c:	9303      	str	r3, [sp, #12]
   1476e:	23ac      	movs	r3, #172	; 0xac
   14770:	18fb      	adds	r3, r7, r3
   14772:	9302      	str	r3, [sp, #8]
   14774:	230c      	movs	r3, #12
   14776:	9301      	str	r3, [sp, #4]
   14778:	23fe      	movs	r3, #254	; 0xfe
   1477a:	005b      	lsls	r3, r3, #1
   1477c:	18fb      	adds	r3, r7, r3
   1477e:	9300      	str	r3, [sp, #0]
   14780:	233c      	movs	r3, #60	; 0x3c
   14782:	f7f4 ffd7 	bl	9734 <wc_AesGcmEncrypt>
   14786:	0003      	movs	r3, r0
   14788:	229d      	movs	r2, #157	; 0x9d
   1478a:	00d2      	lsls	r2, r2, #3
   1478c:	18ba      	adds	r2, r7, r2
   1478e:	6013      	str	r3, [r2, #0]
                                        resultT, sizeof(resultT), a, sizeof(a));
#if defined(WOLFSSL_ASYNC_CRYPT)
    result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (result != 0)
   14790:	239d      	movs	r3, #157	; 0x9d
   14792:	00db      	lsls	r3, r3, #3
   14794:	18fb      	adds	r3, r7, r3
   14796:	681b      	ldr	r3, [r3, #0]
   14798:	2b00      	cmp	r3, #0
   1479a:	d002      	beq.n	147a2 <aesgcm_test+0x266>
        return -5702;
   1479c:	4b72      	ldr	r3, [pc, #456]	; (14968 <aesgcm_test+0x42c>)
   1479e:	f000 fd0a 	bl	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(c1, resultC, sizeof(c1)))
   147a2:	2314      	movs	r3, #20
   147a4:	18f9      	adds	r1, r7, r3
   147a6:	23e0      	movs	r3, #224	; 0xe0
   147a8:	005b      	lsls	r3, r3, #1
   147aa:	18fb      	adds	r3, r7, r3
   147ac:	223c      	movs	r2, #60	; 0x3c
   147ae:	0018      	movs	r0, r3
   147b0:	f010 ff8e 	bl	256d0 <memcmp>
   147b4:	1e03      	subs	r3, r0, #0
   147b6:	d002      	beq.n	147be <aesgcm_test+0x282>
        return -5703;
   147b8:	4b6c      	ldr	r3, [pc, #432]	; (1496c <aesgcm_test+0x430>)
   147ba:	f000 fcfc 	bl	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(t1, resultT, sizeof(resultT)))
   147be:	23ac      	movs	r3, #172	; 0xac
   147c0:	18f9      	adds	r1, r7, r3
   147c2:	23d8      	movs	r3, #216	; 0xd8
   147c4:	005b      	lsls	r3, r3, #1
   147c6:	18fb      	adds	r3, r7, r3
   147c8:	2210      	movs	r2, #16
   147ca:	0018      	movs	r0, r3
   147cc:	f010 ff80 	bl	256d0 <memcmp>
   147d0:	1e03      	subs	r3, r0, #0
   147d2:	d002      	beq.n	147da <aesgcm_test+0x29e>
        return -5704;
   147d4:	4b66      	ldr	r3, [pc, #408]	; (14970 <aesgcm_test+0x434>)
   147d6:	f000 fcee 	bl	151b6 <aesgcm_test+0xc7a>

#ifdef HAVE_AES_DECRYPT
    result = wc_AesGcmSetKey(&dec, k1, sizeof(k1));
   147da:	2382      	movs	r3, #130	; 0x82
   147dc:	009b      	lsls	r3, r3, #2
   147de:	18f9      	adds	r1, r7, r3
   147e0:	239e      	movs	r3, #158	; 0x9e
   147e2:	009b      	lsls	r3, r3, #2
   147e4:	18fb      	adds	r3, r7, r3
   147e6:	2220      	movs	r2, #32
   147e8:	0018      	movs	r0, r3
   147ea:	f7f4 fda5 	bl	9338 <wc_AesGcmSetKey>
   147ee:	0003      	movs	r3, r0
   147f0:	229d      	movs	r2, #157	; 0x9d
   147f2:	00d2      	lsls	r2, r2, #3
   147f4:	18ba      	adds	r2, r7, r2
   147f6:	6013      	str	r3, [r2, #0]
    if (result != 0)
   147f8:	239d      	movs	r3, #157	; 0x9d
   147fa:	00db      	lsls	r3, r3, #3
   147fc:	18fb      	adds	r3, r7, r3
   147fe:	681b      	ldr	r3, [r3, #0]
   14800:	2b00      	cmp	r3, #0
   14802:	d002      	beq.n	1480a <aesgcm_test+0x2ce>
        return -5701;
   14804:	4b57      	ldr	r3, [pc, #348]	; (14964 <aesgcm_test+0x428>)
   14806:	f000 fcd6 	bl	151b6 <aesgcm_test+0xc7a>

    result = wc_AesGcmDecrypt(&dec, resultP, resultC, sizeof(c1),
   1480a:	2314      	movs	r3, #20
   1480c:	18fa      	adds	r2, r7, r3
   1480e:	2360      	movs	r3, #96	; 0x60
   14810:	18f9      	adds	r1, r7, r3
   14812:	239e      	movs	r3, #158	; 0x9e
   14814:	009b      	lsls	r3, r3, #2
   14816:	18f8      	adds	r0, r7, r3
   14818:	2314      	movs	r3, #20
   1481a:	9305      	str	r3, [sp, #20]
   1481c:	238a      	movs	r3, #138	; 0x8a
   1481e:	009b      	lsls	r3, r3, #2
   14820:	18fb      	adds	r3, r7, r3
   14822:	9304      	str	r3, [sp, #16]
   14824:	2310      	movs	r3, #16
   14826:	9303      	str	r3, [sp, #12]
   14828:	23ac      	movs	r3, #172	; 0xac
   1482a:	18fb      	adds	r3, r7, r3
   1482c:	9302      	str	r3, [sp, #8]
   1482e:	230c      	movs	r3, #12
   14830:	9301      	str	r3, [sp, #4]
   14832:	23fe      	movs	r3, #254	; 0xfe
   14834:	005b      	lsls	r3, r3, #1
   14836:	18fb      	adds	r3, r7, r3
   14838:	9300      	str	r3, [sp, #0]
   1483a:	233c      	movs	r3, #60	; 0x3c
   1483c:	f7f5 f86e 	bl	991c <wc_AesGcmDecrypt>
   14840:	0003      	movs	r3, r0
   14842:	229d      	movs	r2, #157	; 0x9d
   14844:	00d2      	lsls	r2, r2, #3
   14846:	18ba      	adds	r2, r7, r2
   14848:	6013      	str	r3, [r2, #0]
                      iv1, sizeof(iv1), resultT, sizeof(resultT), a, sizeof(a));
#if defined(WOLFSSL_ASYNC_CRYPT)
    result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (result != 0)
   1484a:	239d      	movs	r3, #157	; 0x9d
   1484c:	00db      	lsls	r3, r3, #3
   1484e:	18fb      	adds	r3, r7, r3
   14850:	681b      	ldr	r3, [r3, #0]
   14852:	2b00      	cmp	r3, #0
   14854:	d002      	beq.n	1485c <aesgcm_test+0x320>
        return -5705;
   14856:	4b47      	ldr	r3, [pc, #284]	; (14974 <aesgcm_test+0x438>)
   14858:	f000 fcad 	bl	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(p, resultP, sizeof(p)))
   1485c:	2360      	movs	r3, #96	; 0x60
   1485e:	18f9      	adds	r1, r7, r3
   14860:	238f      	movs	r3, #143	; 0x8f
   14862:	009b      	lsls	r3, r3, #2
   14864:	18fb      	adds	r3, r7, r3
   14866:	223c      	movs	r2, #60	; 0x3c
   14868:	0018      	movs	r0, r3
   1486a:	f010 ff31 	bl	256d0 <memcmp>
   1486e:	1e03      	subs	r3, r0, #0
   14870:	d002      	beq.n	14878 <aesgcm_test+0x33c>
        return -5706;
   14872:	4b41      	ldr	r3, [pc, #260]	; (14978 <aesgcm_test+0x43c>)
   14874:	f000 fc9f 	bl	151b6 <aesgcm_test+0xc7a>
        return -5709;
#endif /* HAVE_AES_DECRYPT */
#endif /* BENCH_AESGCM_LARGE */
#if defined(ENABLE_NON_12BYTE_IV_TEST) && defined(WOLFSSL_AES_256)
    /* Variable IV length test */
    for (ivlen=0; ivlen<(int)sizeof(k1); ivlen++) {
   14878:	2300      	movs	r3, #0
   1487a:	4a40      	ldr	r2, [pc, #256]	; (1497c <aesgcm_test+0x440>)
   1487c:	18ba      	adds	r2, r7, r2
   1487e:	6013      	str	r3, [r2, #0]
   14880:	e0b3      	b.n	149ea <aesgcm_test+0x4ae>
         /* AES-GCM encrypt and decrypt both use AES encrypt internally */
         result = wc_AesGcmEncrypt(&enc, resultC, p, sizeof(p), k1,
   14882:	4b3e      	ldr	r3, [pc, #248]	; (1497c <aesgcm_test+0x440>)
   14884:	18fb      	adds	r3, r7, r3
   14886:	681b      	ldr	r3, [r3, #0]
   14888:	228f      	movs	r2, #143	; 0x8f
   1488a:	0092      	lsls	r2, r2, #2
   1488c:	18bc      	adds	r4, r7, r2
   1488e:	2214      	movs	r2, #20
   14890:	18b9      	adds	r1, r7, r2
   14892:	22ec      	movs	r2, #236	; 0xec
   14894:	0092      	lsls	r2, r2, #2
   14896:	18b8      	adds	r0, r7, r2
   14898:	2214      	movs	r2, #20
   1489a:	9205      	str	r2, [sp, #20]
   1489c:	228a      	movs	r2, #138	; 0x8a
   1489e:	0092      	lsls	r2, r2, #2
   148a0:	18ba      	adds	r2, r7, r2
   148a2:	9204      	str	r2, [sp, #16]
   148a4:	2210      	movs	r2, #16
   148a6:	9203      	str	r2, [sp, #12]
   148a8:	22ac      	movs	r2, #172	; 0xac
   148aa:	18ba      	adds	r2, r7, r2
   148ac:	9202      	str	r2, [sp, #8]
   148ae:	9301      	str	r3, [sp, #4]
   148b0:	2382      	movs	r3, #130	; 0x82
   148b2:	009b      	lsls	r3, r3, #2
   148b4:	18fb      	adds	r3, r7, r3
   148b6:	9300      	str	r3, [sp, #0]
   148b8:	233c      	movs	r3, #60	; 0x3c
   148ba:	0022      	movs	r2, r4
   148bc:	f7f4 ff3a 	bl	9734 <wc_AesGcmEncrypt>
   148c0:	0003      	movs	r3, r0
   148c2:	229d      	movs	r2, #157	; 0x9d
   148c4:	00d2      	lsls	r2, r2, #3
   148c6:	18ba      	adds	r2, r7, r2
   148c8:	6013      	str	r3, [r2, #0]
                         (word32)ivlen, resultT, sizeof(resultT), a, sizeof(a));
#if defined(WOLFSSL_ASYNC_CRYPT)
        result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
        if (result != 0)
   148ca:	239d      	movs	r3, #157	; 0x9d
   148cc:	00db      	lsls	r3, r3, #3
   148ce:	18fb      	adds	r3, r7, r3
   148d0:	681b      	ldr	r3, [r3, #0]
   148d2:	2b00      	cmp	r3, #0
   148d4:	d056      	beq.n	14984 <aesgcm_test+0x448>
            return -5710;
   148d6:	4b2a      	ldr	r3, [pc, #168]	; (14980 <aesgcm_test+0x444>)
   148d8:	f000 fc6d 	bl	151b6 <aesgcm_test+0xc7a>
   148dc:	fffffae4 	.word	0xfffffae4
   148e0:	fffffd3c 	.word	0xfffffd3c
   148e4:	0002d4d8 	.word	0x0002d4d8
   148e8:	fffffd28 	.word	0xfffffd28
   148ec:	0002d514 	.word	0x0002d514
   148f0:	fffffd08 	.word	0xfffffd08
   148f4:	0002d528 	.word	0x0002d528
   148f8:	fffffcfc 	.word	0xfffffcfc
   148fc:	0002d548 	.word	0x0002d548
   14900:	fffffcc0 	.word	0xfffffcc0
   14904:	0002d554 	.word	0x0002d554
   14908:	fffffcb0 	.word	0xfffffcb0
   1490c:	0002d590 	.word	0x0002d590
   14910:	fffffc98 	.word	0xfffffc98
   14914:	0002d5a0 	.word	0x0002d5a0
   14918:	fffffc5c 	.word	0xfffffc5c
   1491c:	0002d5b8 	.word	0x0002d5b8
   14920:	fffffc20 	.word	0xfffffc20
   14924:	0002d5f4 	.word	0x0002d5f4
   14928:	fffffc10 	.word	0xfffffc10
   1492c:	0002d630 	.word	0x0002d630
   14930:	fffffc00 	.word	0xfffffc00
   14934:	0002d640 	.word	0x0002d640
   14938:	fffffbf0 	.word	0xfffffbf0
   1493c:	0002d650 	.word	0x0002d650
   14940:	fffffbec 	.word	0xfffffbec
   14944:	fffffbdc 	.word	0xfffffbdc
   14948:	0002d660 	.word	0x0002d660
   1494c:	fffffbcc 	.word	0xfffffbcc
   14950:	0002d670 	.word	0x0002d670
   14954:	fffffbbc 	.word	0xfffffbbc
   14958:	0002d680 	.word	0x0002d680
   1495c:	20000010 	.word	0x20000010
   14960:	ffffe9bc 	.word	0xffffe9bc
   14964:	ffffe9bb 	.word	0xffffe9bb
   14968:	ffffe9ba 	.word	0xffffe9ba
   1496c:	ffffe9b9 	.word	0xffffe9b9
   14970:	ffffe9b8 	.word	0xffffe9b8
   14974:	ffffe9b7 	.word	0xffffe9b7
   14978:	ffffe9b6 	.word	0xffffe9b6
   1497c:	000004fc 	.word	0x000004fc
   14980:	ffffe9b2 	.word	0xffffe9b2
#ifdef HAVE_AES_DECRYPT
        result = wc_AesGcmDecrypt(&dec, resultP, resultC, sizeof(c1), k1,
   14984:	4bd2      	ldr	r3, [pc, #840]	; (14cd0 <aesgcm_test+0x794>)
   14986:	18fb      	adds	r3, r7, r3
   14988:	681b      	ldr	r3, [r3, #0]
   1498a:	2214      	movs	r2, #20
   1498c:	18bc      	adds	r4, r7, r2
   1498e:	2260      	movs	r2, #96	; 0x60
   14990:	18b9      	adds	r1, r7, r2
   14992:	229e      	movs	r2, #158	; 0x9e
   14994:	0092      	lsls	r2, r2, #2
   14996:	18b8      	adds	r0, r7, r2
   14998:	2214      	movs	r2, #20
   1499a:	9205      	str	r2, [sp, #20]
   1499c:	228a      	movs	r2, #138	; 0x8a
   1499e:	0092      	lsls	r2, r2, #2
   149a0:	18ba      	adds	r2, r7, r2
   149a2:	9204      	str	r2, [sp, #16]
   149a4:	2210      	movs	r2, #16
   149a6:	9203      	str	r2, [sp, #12]
   149a8:	22ac      	movs	r2, #172	; 0xac
   149aa:	18ba      	adds	r2, r7, r2
   149ac:	9202      	str	r2, [sp, #8]
   149ae:	9301      	str	r3, [sp, #4]
   149b0:	2382      	movs	r3, #130	; 0x82
   149b2:	009b      	lsls	r3, r3, #2
   149b4:	18fb      	adds	r3, r7, r3
   149b6:	9300      	str	r3, [sp, #0]
   149b8:	233c      	movs	r3, #60	; 0x3c
   149ba:	0022      	movs	r2, r4
   149bc:	f7f4 ffae 	bl	991c <wc_AesGcmDecrypt>
   149c0:	0003      	movs	r3, r0
   149c2:	229d      	movs	r2, #157	; 0x9d
   149c4:	00d2      	lsls	r2, r2, #3
   149c6:	18ba      	adds	r2, r7, r2
   149c8:	6013      	str	r3, [r2, #0]
                         (word32)ivlen, resultT, sizeof(resultT), a, sizeof(a));
#if defined(WOLFSSL_ASYNC_CRYPT)
        result = wc_AsyncWait(result, &dec.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
        if (result != 0)
   149ca:	239d      	movs	r3, #157	; 0x9d
   149cc:	00db      	lsls	r3, r3, #3
   149ce:	18fb      	adds	r3, r7, r3
   149d0:	681b      	ldr	r3, [r3, #0]
   149d2:	2b00      	cmp	r3, #0
   149d4:	d002      	beq.n	149dc <aesgcm_test+0x4a0>
            return -5711;
   149d6:	4bbf      	ldr	r3, [pc, #764]	; (14cd4 <aesgcm_test+0x798>)
   149d8:	f000 fbed 	bl	151b6 <aesgcm_test+0xc7a>
        return -5709;
#endif /* HAVE_AES_DECRYPT */
#endif /* BENCH_AESGCM_LARGE */
#if defined(ENABLE_NON_12BYTE_IV_TEST) && defined(WOLFSSL_AES_256)
    /* Variable IV length test */
    for (ivlen=0; ivlen<(int)sizeof(k1); ivlen++) {
   149dc:	4bbc      	ldr	r3, [pc, #752]	; (14cd0 <aesgcm_test+0x794>)
   149de:	18fb      	adds	r3, r7, r3
   149e0:	681b      	ldr	r3, [r3, #0]
   149e2:	3301      	adds	r3, #1
   149e4:	4aba      	ldr	r2, [pc, #744]	; (14cd0 <aesgcm_test+0x794>)
   149e6:	18ba      	adds	r2, r7, r2
   149e8:	6013      	str	r3, [r2, #0]
   149ea:	4bb9      	ldr	r3, [pc, #740]	; (14cd0 <aesgcm_test+0x794>)
   149ec:	18fb      	adds	r3, r7, r3
   149ee:	681b      	ldr	r3, [r3, #0]
   149f0:	2b1f      	cmp	r3, #31
   149f2:	dc00      	bgt.n	149f6 <aesgcm_test+0x4ba>
   149f4:	e745      	b.n	14882 <aesgcm_test+0x346>
#endif /* HAVE_AES_DECRYPT */
    }
#endif

    /* Variable authenticated data length test */
    for (alen=0; alen<(int)sizeof(p); alen++) {
   149f6:	2300      	movs	r3, #0
   149f8:	229f      	movs	r2, #159	; 0x9f
   149fa:	00d2      	lsls	r2, r2, #3
   149fc:	18ba      	adds	r2, r7, r2
   149fe:	6013      	str	r3, [r2, #0]
   14a00:	e060      	b.n	14ac4 <aesgcm_test+0x588>
         /* AES-GCM encrypt and decrypt both use AES encrypt internally */
         result = wc_AesGcmEncrypt(&enc, resultC, p, sizeof(p), iv1,
   14a02:	239f      	movs	r3, #159	; 0x9f
   14a04:	00db      	lsls	r3, r3, #3
   14a06:	18fb      	adds	r3, r7, r3
   14a08:	681b      	ldr	r3, [r3, #0]
   14a0a:	228f      	movs	r2, #143	; 0x8f
   14a0c:	0092      	lsls	r2, r2, #2
   14a0e:	18ba      	adds	r2, r7, r2
   14a10:	2114      	movs	r1, #20
   14a12:	1879      	adds	r1, r7, r1
   14a14:	20ec      	movs	r0, #236	; 0xec
   14a16:	0080      	lsls	r0, r0, #2
   14a18:	1838      	adds	r0, r7, r0
   14a1a:	9305      	str	r3, [sp, #20]
   14a1c:	238f      	movs	r3, #143	; 0x8f
   14a1e:	009b      	lsls	r3, r3, #2
   14a20:	18fb      	adds	r3, r7, r3
   14a22:	9304      	str	r3, [sp, #16]
   14a24:	2310      	movs	r3, #16
   14a26:	9303      	str	r3, [sp, #12]
   14a28:	23ac      	movs	r3, #172	; 0xac
   14a2a:	18fb      	adds	r3, r7, r3
   14a2c:	9302      	str	r3, [sp, #8]
   14a2e:	230c      	movs	r3, #12
   14a30:	9301      	str	r3, [sp, #4]
   14a32:	23fe      	movs	r3, #254	; 0xfe
   14a34:	005b      	lsls	r3, r3, #1
   14a36:	18fb      	adds	r3, r7, r3
   14a38:	9300      	str	r3, [sp, #0]
   14a3a:	233c      	movs	r3, #60	; 0x3c
   14a3c:	f7f4 fe7a 	bl	9734 <wc_AesGcmEncrypt>
   14a40:	0003      	movs	r3, r0
   14a42:	229d      	movs	r2, #157	; 0x9d
   14a44:	00d2      	lsls	r2, r2, #3
   14a46:	18ba      	adds	r2, r7, r2
   14a48:	6013      	str	r3, [r2, #0]
                        sizeof(iv1), resultT, sizeof(resultT), p, (word32)alen);
#if defined(WOLFSSL_ASYNC_CRYPT)
        result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
        if (result != 0)
   14a4a:	239d      	movs	r3, #157	; 0x9d
   14a4c:	00db      	lsls	r3, r3, #3
   14a4e:	18fb      	adds	r3, r7, r3
   14a50:	681b      	ldr	r3, [r3, #0]
   14a52:	2b00      	cmp	r3, #0
   14a54:	d002      	beq.n	14a5c <aesgcm_test+0x520>
            return -5712;
   14a56:	4ba0      	ldr	r3, [pc, #640]	; (14cd8 <aesgcm_test+0x79c>)
   14a58:	f000 fbad 	bl	151b6 <aesgcm_test+0xc7a>
#ifdef HAVE_AES_DECRYPT
        result = wc_AesGcmDecrypt(&dec, resultP, resultC, sizeof(c1), iv1,
   14a5c:	239f      	movs	r3, #159	; 0x9f
   14a5e:	00db      	lsls	r3, r3, #3
   14a60:	18fb      	adds	r3, r7, r3
   14a62:	681b      	ldr	r3, [r3, #0]
   14a64:	2214      	movs	r2, #20
   14a66:	18ba      	adds	r2, r7, r2
   14a68:	2160      	movs	r1, #96	; 0x60
   14a6a:	1879      	adds	r1, r7, r1
   14a6c:	209e      	movs	r0, #158	; 0x9e
   14a6e:	0080      	lsls	r0, r0, #2
   14a70:	1838      	adds	r0, r7, r0
   14a72:	9305      	str	r3, [sp, #20]
   14a74:	238f      	movs	r3, #143	; 0x8f
   14a76:	009b      	lsls	r3, r3, #2
   14a78:	18fb      	adds	r3, r7, r3
   14a7a:	9304      	str	r3, [sp, #16]
   14a7c:	2310      	movs	r3, #16
   14a7e:	9303      	str	r3, [sp, #12]
   14a80:	23ac      	movs	r3, #172	; 0xac
   14a82:	18fb      	adds	r3, r7, r3
   14a84:	9302      	str	r3, [sp, #8]
   14a86:	230c      	movs	r3, #12
   14a88:	9301      	str	r3, [sp, #4]
   14a8a:	23fe      	movs	r3, #254	; 0xfe
   14a8c:	005b      	lsls	r3, r3, #1
   14a8e:	18fb      	adds	r3, r7, r3
   14a90:	9300      	str	r3, [sp, #0]
   14a92:	233c      	movs	r3, #60	; 0x3c
   14a94:	f7f4 ff42 	bl	991c <wc_AesGcmDecrypt>
   14a98:	0003      	movs	r3, r0
   14a9a:	229d      	movs	r2, #157	; 0x9d
   14a9c:	00d2      	lsls	r2, r2, #3
   14a9e:	18ba      	adds	r2, r7, r2
   14aa0:	6013      	str	r3, [r2, #0]
                        sizeof(iv1), resultT, sizeof(resultT), p, (word32)alen);
#if defined(WOLFSSL_ASYNC_CRYPT)
        result = wc_AsyncWait(result, &dec.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
        if (result != 0)
   14aa2:	239d      	movs	r3, #157	; 0x9d
   14aa4:	00db      	lsls	r3, r3, #3
   14aa6:	18fb      	adds	r3, r7, r3
   14aa8:	681b      	ldr	r3, [r3, #0]
   14aaa:	2b00      	cmp	r3, #0
   14aac:	d001      	beq.n	14ab2 <aesgcm_test+0x576>
            return -5713;
   14aae:	4b8b      	ldr	r3, [pc, #556]	; (14cdc <aesgcm_test+0x7a0>)
   14ab0:	e381      	b.n	151b6 <aesgcm_test+0xc7a>
#endif /* HAVE_AES_DECRYPT */
    }
#endif

    /* Variable authenticated data length test */
    for (alen=0; alen<(int)sizeof(p); alen++) {
   14ab2:	239f      	movs	r3, #159	; 0x9f
   14ab4:	00db      	lsls	r3, r3, #3
   14ab6:	18fb      	adds	r3, r7, r3
   14ab8:	681b      	ldr	r3, [r3, #0]
   14aba:	3301      	adds	r3, #1
   14abc:	229f      	movs	r2, #159	; 0x9f
   14abe:	00d2      	lsls	r2, r2, #3
   14ac0:	18ba      	adds	r2, r7, r2
   14ac2:	6013      	str	r3, [r2, #0]
   14ac4:	239f      	movs	r3, #159	; 0x9f
   14ac6:	00db      	lsls	r3, r3, #3
   14ac8:	18fb      	adds	r3, r7, r3
   14aca:	681b      	ldr	r3, [r3, #0]
   14acc:	2b3b      	cmp	r3, #59	; 0x3b
   14ace:	dd98      	ble.n	14a02 <aesgcm_test+0x4c6>
            return -5715;
#endif /* HAVE_AES_DECRYPT */
    }
#else
    /* Variable plain text length test */
    for (plen=1; plen<(int)sizeof(p); plen++) {
   14ad0:	2301      	movs	r3, #1
   14ad2:	4a83      	ldr	r2, [pc, #524]	; (14ce0 <aesgcm_test+0x7a4>)
   14ad4:	18ba      	adds	r2, r7, r2
   14ad6:	6013      	str	r3, [r2, #0]
   14ad8:	e05d      	b.n	14b96 <aesgcm_test+0x65a>
         /* AES-GCM encrypt and decrypt both use AES encrypt internally */
         result = wc_AesGcmEncrypt(&enc, resultC, p, (word32)plen, iv1,
   14ada:	4b81      	ldr	r3, [pc, #516]	; (14ce0 <aesgcm_test+0x7a4>)
   14adc:	18fb      	adds	r3, r7, r3
   14ade:	681c      	ldr	r4, [r3, #0]
   14ae0:	238f      	movs	r3, #143	; 0x8f
   14ae2:	009b      	lsls	r3, r3, #2
   14ae4:	18fa      	adds	r2, r7, r3
   14ae6:	2314      	movs	r3, #20
   14ae8:	18f9      	adds	r1, r7, r3
   14aea:	23ec      	movs	r3, #236	; 0xec
   14aec:	009b      	lsls	r3, r3, #2
   14aee:	18f8      	adds	r0, r7, r3
   14af0:	2314      	movs	r3, #20
   14af2:	9305      	str	r3, [sp, #20]
   14af4:	238a      	movs	r3, #138	; 0x8a
   14af6:	009b      	lsls	r3, r3, #2
   14af8:	18fb      	adds	r3, r7, r3
   14afa:	9304      	str	r3, [sp, #16]
   14afc:	2310      	movs	r3, #16
   14afe:	9303      	str	r3, [sp, #12]
   14b00:	23ac      	movs	r3, #172	; 0xac
   14b02:	18fb      	adds	r3, r7, r3
   14b04:	9302      	str	r3, [sp, #8]
   14b06:	230c      	movs	r3, #12
   14b08:	9301      	str	r3, [sp, #4]
   14b0a:	23fe      	movs	r3, #254	; 0xfe
   14b0c:	005b      	lsls	r3, r3, #1
   14b0e:	18fb      	adds	r3, r7, r3
   14b10:	9300      	str	r3, [sp, #0]
   14b12:	0023      	movs	r3, r4
   14b14:	f7f4 fe0e 	bl	9734 <wc_AesGcmEncrypt>
   14b18:	0003      	movs	r3, r0
   14b1a:	229d      	movs	r2, #157	; 0x9d
   14b1c:	00d2      	lsls	r2, r2, #3
   14b1e:	18ba      	adds	r2, r7, r2
   14b20:	6013      	str	r3, [r2, #0]
                           sizeof(iv1), resultT, sizeof(resultT), a, sizeof(a));
#if defined(WOLFSSL_ASYNC_CRYPT)
        result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
        if (result != 0)
   14b22:	239d      	movs	r3, #157	; 0x9d
   14b24:	00db      	lsls	r3, r3, #3
   14b26:	18fb      	adds	r3, r7, r3
   14b28:	681b      	ldr	r3, [r3, #0]
   14b2a:	2b00      	cmp	r3, #0
   14b2c:	d001      	beq.n	14b32 <aesgcm_test+0x5f6>
            return -5716;
   14b2e:	4b6d      	ldr	r3, [pc, #436]	; (14ce4 <aesgcm_test+0x7a8>)
   14b30:	e341      	b.n	151b6 <aesgcm_test+0xc7a>
#ifdef HAVE_AES_DECRYPT
        result = wc_AesGcmDecrypt(&dec, resultP, resultC, (word32)plen, iv1,
   14b32:	4b6b      	ldr	r3, [pc, #428]	; (14ce0 <aesgcm_test+0x7a4>)
   14b34:	18fb      	adds	r3, r7, r3
   14b36:	681c      	ldr	r4, [r3, #0]
   14b38:	2314      	movs	r3, #20
   14b3a:	18fa      	adds	r2, r7, r3
   14b3c:	2360      	movs	r3, #96	; 0x60
   14b3e:	18f9      	adds	r1, r7, r3
   14b40:	239e      	movs	r3, #158	; 0x9e
   14b42:	009b      	lsls	r3, r3, #2
   14b44:	18f8      	adds	r0, r7, r3
   14b46:	2314      	movs	r3, #20
   14b48:	9305      	str	r3, [sp, #20]
   14b4a:	238a      	movs	r3, #138	; 0x8a
   14b4c:	009b      	lsls	r3, r3, #2
   14b4e:	18fb      	adds	r3, r7, r3
   14b50:	9304      	str	r3, [sp, #16]
   14b52:	2310      	movs	r3, #16
   14b54:	9303      	str	r3, [sp, #12]
   14b56:	23ac      	movs	r3, #172	; 0xac
   14b58:	18fb      	adds	r3, r7, r3
   14b5a:	9302      	str	r3, [sp, #8]
   14b5c:	230c      	movs	r3, #12
   14b5e:	9301      	str	r3, [sp, #4]
   14b60:	23fe      	movs	r3, #254	; 0xfe
   14b62:	005b      	lsls	r3, r3, #1
   14b64:	18fb      	adds	r3, r7, r3
   14b66:	9300      	str	r3, [sp, #0]
   14b68:	0023      	movs	r3, r4
   14b6a:	f7f4 fed7 	bl	991c <wc_AesGcmDecrypt>
   14b6e:	0003      	movs	r3, r0
   14b70:	229d      	movs	r2, #157	; 0x9d
   14b72:	00d2      	lsls	r2, r2, #3
   14b74:	18ba      	adds	r2, r7, r2
   14b76:	6013      	str	r3, [r2, #0]
                           sizeof(iv1), resultT, sizeof(resultT), a, sizeof(a));
#if defined(WOLFSSL_ASYNC_CRYPT)
        result = wc_AsyncWait(result, &dec.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
        if (result != 0)
   14b78:	239d      	movs	r3, #157	; 0x9d
   14b7a:	00db      	lsls	r3, r3, #3
   14b7c:	18fb      	adds	r3, r7, r3
   14b7e:	681b      	ldr	r3, [r3, #0]
   14b80:	2b00      	cmp	r3, #0
   14b82:	d001      	beq.n	14b88 <aesgcm_test+0x64c>
            return -5717;
   14b84:	4b58      	ldr	r3, [pc, #352]	; (14ce8 <aesgcm_test+0x7ac>)
   14b86:	e316      	b.n	151b6 <aesgcm_test+0xc7a>
            return -5715;
#endif /* HAVE_AES_DECRYPT */
    }
#else
    /* Variable plain text length test */
    for (plen=1; plen<(int)sizeof(p); plen++) {
   14b88:	4b55      	ldr	r3, [pc, #340]	; (14ce0 <aesgcm_test+0x7a4>)
   14b8a:	18fb      	adds	r3, r7, r3
   14b8c:	681b      	ldr	r3, [r3, #0]
   14b8e:	3301      	adds	r3, #1
   14b90:	4a53      	ldr	r2, [pc, #332]	; (14ce0 <aesgcm_test+0x7a4>)
   14b92:	18ba      	adds	r2, r7, r2
   14b94:	6013      	str	r3, [r2, #0]
   14b96:	4b52      	ldr	r3, [pc, #328]	; (14ce0 <aesgcm_test+0x7a4>)
   14b98:	18fb      	adds	r3, r7, r3
   14b9a:	681b      	ldr	r3, [r3, #0]
   14b9c:	2b3b      	cmp	r3, #59	; 0x3b
   14b9e:	dd9c      	ble.n	14ada <aesgcm_test+0x59e>
#endif
#endif /* WOLFSSL_AES_256 */

    /* test with IV != 12 bytes */
#ifdef ENABLE_NON_12BYTE_IV_TEST
    XMEMSET(resultT, 0, sizeof(resultT));
   14ba0:	23ac      	movs	r3, #172	; 0xac
   14ba2:	18fb      	adds	r3, r7, r3
   14ba4:	2210      	movs	r2, #16
   14ba6:	2100      	movs	r1, #0
   14ba8:	0018      	movs	r0, r3
   14baa:	f010 fdbe 	bl	2572a <memset>
    XMEMSET(resultC, 0, sizeof(resultC));
   14bae:	2314      	movs	r3, #20
   14bb0:	18fb      	adds	r3, r7, r3
   14bb2:	224c      	movs	r2, #76	; 0x4c
   14bb4:	2100      	movs	r1, #0
   14bb6:	0018      	movs	r0, r3
   14bb8:	f010 fdb7 	bl	2572a <memset>
    XMEMSET(resultP, 0, sizeof(resultP));
   14bbc:	2360      	movs	r3, #96	; 0x60
   14bbe:	18fb      	adds	r3, r7, r3
   14bc0:	224c      	movs	r2, #76	; 0x4c
   14bc2:	2100      	movs	r1, #0
   14bc4:	0018      	movs	r0, r3
   14bc6:	f010 fdb0 	bl	2572a <memset>

#ifdef WOLFSSL_AES_192
    wc_AesGcmSetKey(&enc, k2, sizeof(k2));
   14bca:	23cc      	movs	r3, #204	; 0xcc
   14bcc:	005b      	lsls	r3, r3, #1
   14bce:	18f9      	adds	r1, r7, r3
   14bd0:	23ec      	movs	r3, #236	; 0xec
   14bd2:	009b      	lsls	r3, r3, #2
   14bd4:	18fb      	adds	r3, r7, r3
   14bd6:	2218      	movs	r2, #24
   14bd8:	0018      	movs	r0, r3
   14bda:	f7f4 fbad 	bl	9338 <wc_AesGcmSetKey>
    /* AES-GCM encrypt and decrypt both use AES encrypt internally */
    result = wc_AesGcmEncrypt(&enc, resultC, p, sizeof(p), iv2, sizeof(iv2),
   14bde:	238f      	movs	r3, #143	; 0x8f
   14be0:	009b      	lsls	r3, r3, #2
   14be2:	18fa      	adds	r2, r7, r3
   14be4:	2314      	movs	r3, #20
   14be6:	18f9      	adds	r1, r7, r3
   14be8:	23ec      	movs	r3, #236	; 0xec
   14bea:	009b      	lsls	r3, r3, #2
   14bec:	18f8      	adds	r0, r7, r3
   14bee:	2314      	movs	r3, #20
   14bf0:	9305      	str	r3, [sp, #20]
   14bf2:	238a      	movs	r3, #138	; 0x8a
   14bf4:	009b      	lsls	r3, r3, #2
   14bf6:	18fb      	adds	r3, r7, r3
   14bf8:	9304      	str	r3, [sp, #16]
   14bfa:	2310      	movs	r3, #16
   14bfc:	9303      	str	r3, [sp, #12]
   14bfe:	23ac      	movs	r3, #172	; 0xac
   14c00:	18fb      	adds	r3, r7, r3
   14c02:	9302      	str	r3, [sp, #8]
   14c04:	233c      	movs	r3, #60	; 0x3c
   14c06:	9301      	str	r3, [sp, #4]
   14c08:	23ae      	movs	r3, #174	; 0xae
   14c0a:	005b      	lsls	r3, r3, #1
   14c0c:	18fb      	adds	r3, r7, r3
   14c0e:	9300      	str	r3, [sp, #0]
   14c10:	233c      	movs	r3, #60	; 0x3c
   14c12:	f7f4 fd8f 	bl	9734 <wc_AesGcmEncrypt>
   14c16:	0003      	movs	r3, r0
   14c18:	229d      	movs	r2, #157	; 0x9d
   14c1a:	00d2      	lsls	r2, r2, #3
   14c1c:	18ba      	adds	r2, r7, r2
   14c1e:	6013      	str	r3, [r2, #0]
                                        resultT, sizeof(resultT), a, sizeof(a));
#if defined(WOLFSSL_ASYNC_CRYPT)
    result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (result != 0)
   14c20:	239d      	movs	r3, #157	; 0x9d
   14c22:	00db      	lsls	r3, r3, #3
   14c24:	18fb      	adds	r3, r7, r3
   14c26:	681b      	ldr	r3, [r3, #0]
   14c28:	2b00      	cmp	r3, #0
   14c2a:	d001      	beq.n	14c30 <aesgcm_test+0x6f4>
        return -5718;
   14c2c:	4b2f      	ldr	r3, [pc, #188]	; (14cec <aesgcm_test+0x7b0>)
   14c2e:	e2c2      	b.n	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(c2, resultC, sizeof(c2)))
   14c30:	2314      	movs	r3, #20
   14c32:	18f9      	adds	r1, r7, r3
   14c34:	2390      	movs	r3, #144	; 0x90
   14c36:	005b      	lsls	r3, r3, #1
   14c38:	18fb      	adds	r3, r7, r3
   14c3a:	223c      	movs	r2, #60	; 0x3c
   14c3c:	0018      	movs	r0, r3
   14c3e:	f010 fd47 	bl	256d0 <memcmp>
   14c42:	1e03      	subs	r3, r0, #0
   14c44:	d001      	beq.n	14c4a <aesgcm_test+0x70e>
        return -5719;
   14c46:	4b2a      	ldr	r3, [pc, #168]	; (14cf0 <aesgcm_test+0x7b4>)
   14c48:	e2b5      	b.n	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(t2, resultT, sizeof(resultT)))
   14c4a:	23ac      	movs	r3, #172	; 0xac
   14c4c:	18f9      	adds	r1, r7, r3
   14c4e:	2388      	movs	r3, #136	; 0x88
   14c50:	005b      	lsls	r3, r3, #1
   14c52:	18fb      	adds	r3, r7, r3
   14c54:	2210      	movs	r2, #16
   14c56:	0018      	movs	r0, r3
   14c58:	f010 fd3a 	bl	256d0 <memcmp>
   14c5c:	1e03      	subs	r3, r0, #0
   14c5e:	d001      	beq.n	14c64 <aesgcm_test+0x728>
        return -5720;
   14c60:	4b24      	ldr	r3, [pc, #144]	; (14cf4 <aesgcm_test+0x7b8>)
   14c62:	e2a8      	b.n	151b6 <aesgcm_test+0xc7a>

#ifdef HAVE_AES_DECRYPT
    result = wc_AesGcmDecrypt(&enc, resultP, resultC, sizeof(c1),
   14c64:	2314      	movs	r3, #20
   14c66:	18fa      	adds	r2, r7, r3
   14c68:	2360      	movs	r3, #96	; 0x60
   14c6a:	18f9      	adds	r1, r7, r3
   14c6c:	23ec      	movs	r3, #236	; 0xec
   14c6e:	009b      	lsls	r3, r3, #2
   14c70:	18f8      	adds	r0, r7, r3
   14c72:	2314      	movs	r3, #20
   14c74:	9305      	str	r3, [sp, #20]
   14c76:	238a      	movs	r3, #138	; 0x8a
   14c78:	009b      	lsls	r3, r3, #2
   14c7a:	18fb      	adds	r3, r7, r3
   14c7c:	9304      	str	r3, [sp, #16]
   14c7e:	2310      	movs	r3, #16
   14c80:	9303      	str	r3, [sp, #12]
   14c82:	23ac      	movs	r3, #172	; 0xac
   14c84:	18fb      	adds	r3, r7, r3
   14c86:	9302      	str	r3, [sp, #8]
   14c88:	233c      	movs	r3, #60	; 0x3c
   14c8a:	9301      	str	r3, [sp, #4]
   14c8c:	23ae      	movs	r3, #174	; 0xae
   14c8e:	005b      	lsls	r3, r3, #1
   14c90:	18fb      	adds	r3, r7, r3
   14c92:	9300      	str	r3, [sp, #0]
   14c94:	233c      	movs	r3, #60	; 0x3c
   14c96:	f7f4 fe41 	bl	991c <wc_AesGcmDecrypt>
   14c9a:	0003      	movs	r3, r0
   14c9c:	229d      	movs	r2, #157	; 0x9d
   14c9e:	00d2      	lsls	r2, r2, #3
   14ca0:	18ba      	adds	r2, r7, r2
   14ca2:	6013      	str	r3, [r2, #0]
                      iv2, sizeof(iv2), resultT, sizeof(resultT), a, sizeof(a));
#if defined(WOLFSSL_ASYNC_CRYPT)
    result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (result != 0)
   14ca4:	239d      	movs	r3, #157	; 0x9d
   14ca6:	00db      	lsls	r3, r3, #3
   14ca8:	18fb      	adds	r3, r7, r3
   14caa:	681b      	ldr	r3, [r3, #0]
   14cac:	2b00      	cmp	r3, #0
   14cae:	d001      	beq.n	14cb4 <aesgcm_test+0x778>
        return -5721;
   14cb0:	4b11      	ldr	r3, [pc, #68]	; (14cf8 <aesgcm_test+0x7bc>)
   14cb2:	e280      	b.n	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(p, resultP, sizeof(p)))
   14cb4:	2360      	movs	r3, #96	; 0x60
   14cb6:	18f9      	adds	r1, r7, r3
   14cb8:	238f      	movs	r3, #143	; 0x8f
   14cba:	009b      	lsls	r3, r3, #2
   14cbc:	18fb      	adds	r3, r7, r3
   14cbe:	223c      	movs	r2, #60	; 0x3c
   14cc0:	0018      	movs	r0, r3
   14cc2:	f010 fd05 	bl	256d0 <memcmp>
   14cc6:	1e03      	subs	r3, r0, #0
   14cc8:	d01a      	beq.n	14d00 <aesgcm_test+0x7c4>
        return -5722;
   14cca:	4b0c      	ldr	r3, [pc, #48]	; (14cfc <aesgcm_test+0x7c0>)
   14ccc:	e273      	b.n	151b6 <aesgcm_test+0xc7a>
   14cce:	46c0      	nop			; (mov r8, r8)
   14cd0:	000004fc 	.word	0x000004fc
   14cd4:	ffffe9b1 	.word	0xffffe9b1
   14cd8:	ffffe9b0 	.word	0xffffe9b0
   14cdc:	ffffe9af 	.word	0xffffe9af
   14ce0:	000004f4 	.word	0x000004f4
   14ce4:	ffffe9ac 	.word	0xffffe9ac
   14ce8:	ffffe9ab 	.word	0xffffe9ab
   14cec:	ffffe9aa 	.word	0xffffe9aa
   14cf0:	ffffe9a9 	.word	0xffffe9a9
   14cf4:	ffffe9a8 	.word	0xffffe9a8
   14cf8:	ffffe9a7 	.word	0xffffe9a7
   14cfc:	ffffe9a6 	.word	0xffffe9a6
#endif /* HAVE_AES_DECRYPT */

    XMEMSET(resultT, 0, sizeof(resultT));
   14d00:	23ac      	movs	r3, #172	; 0xac
   14d02:	18fb      	adds	r3, r7, r3
   14d04:	2210      	movs	r2, #16
   14d06:	2100      	movs	r1, #0
   14d08:	0018      	movs	r0, r3
   14d0a:	f010 fd0e 	bl	2572a <memset>
    XMEMSET(resultC, 0, sizeof(resultC));
   14d0e:	2314      	movs	r3, #20
   14d10:	18fb      	adds	r3, r7, r3
   14d12:	224c      	movs	r2, #76	; 0x4c
   14d14:	2100      	movs	r1, #0
   14d16:	0018      	movs	r0, r3
   14d18:	f010 fd07 	bl	2572a <memset>
    XMEMSET(resultP, 0, sizeof(resultP));
   14d1c:	2360      	movs	r3, #96	; 0x60
   14d1e:	18fb      	adds	r3, r7, r3
   14d20:	224c      	movs	r2, #76	; 0x4c
   14d22:	2100      	movs	r1, #0
   14d24:	0018      	movs	r0, r3
   14d26:	f010 fd00 	bl	2572a <memset>
#endif /* WOLFSSL_AES_192 */
#ifdef WOLFSSL_AES_128
    wc_AesGcmSetKey(&enc, k3, sizeof(k3));
   14d2a:	23f0      	movs	r3, #240	; 0xf0
   14d2c:	18f9      	adds	r1, r7, r3
   14d2e:	23ec      	movs	r3, #236	; 0xec
   14d30:	009b      	lsls	r3, r3, #2
   14d32:	18fb      	adds	r3, r7, r3
   14d34:	2210      	movs	r2, #16
   14d36:	0018      	movs	r0, r3
   14d38:	f7f4 fafe 	bl	9338 <wc_AesGcmSetKey>
    /* AES-GCM encrypt and decrypt both use AES encrypt internally */
    result = wc_AesGcmEncrypt(&enc, resultC, p3, sizeof(p3), iv3, sizeof(iv3),
   14d3c:	1c7a      	adds	r2, r7, #1
   14d3e:	32ff      	adds	r2, #255	; 0xff
   14d40:	2314      	movs	r3, #20
   14d42:	18f9      	adds	r1, r7, r3
   14d44:	23ec      	movs	r3, #236	; 0xec
   14d46:	009b      	lsls	r3, r3, #2
   14d48:	18f8      	adds	r0, r7, r3
   14d4a:	2310      	movs	r3, #16
   14d4c:	9305      	str	r3, [sp, #20]
   14d4e:	23cc      	movs	r3, #204	; 0xcc
   14d50:	18fb      	adds	r3, r7, r3
   14d52:	9304      	str	r3, [sp, #16]
   14d54:	2310      	movs	r3, #16
   14d56:	9303      	str	r3, [sp, #12]
   14d58:	23ac      	movs	r3, #172	; 0xac
   14d5a:	18fb      	adds	r3, r7, r3
   14d5c:	9302      	str	r3, [sp, #8]
   14d5e:	2301      	movs	r3, #1
   14d60:	9301      	str	r3, [sp, #4]
   14d62:	23ec      	movs	r3, #236	; 0xec
   14d64:	18fb      	adds	r3, r7, r3
   14d66:	9300      	str	r3, [sp, #0]
   14d68:	2310      	movs	r3, #16
   14d6a:	f7f4 fce3 	bl	9734 <wc_AesGcmEncrypt>
   14d6e:	0003      	movs	r3, r0
   14d70:	229d      	movs	r2, #157	; 0x9d
   14d72:	00d2      	lsls	r2, r2, #3
   14d74:	18ba      	adds	r2, r7, r2
   14d76:	6013      	str	r3, [r2, #0]
                                        resultT, sizeof(t3), a3, sizeof(a3));
#if defined(WOLFSSL_ASYNC_CRYPT)
    result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (result != 0)
   14d78:	239d      	movs	r3, #157	; 0x9d
   14d7a:	00db      	lsls	r3, r3, #3
   14d7c:	18fb      	adds	r3, r7, r3
   14d7e:	681b      	ldr	r3, [r3, #0]
   14d80:	2b00      	cmp	r3, #0
   14d82:	d001      	beq.n	14d88 <aesgcm_test+0x84c>
        return -5723;
   14d84:	4bd9      	ldr	r3, [pc, #868]	; (150ec <aesgcm_test+0xbb0>)
   14d86:	e216      	b.n	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(c3, resultC, sizeof(c3)))
   14d88:	2314      	movs	r3, #20
   14d8a:	18f9      	adds	r1, r7, r3
   14d8c:	23dc      	movs	r3, #220	; 0xdc
   14d8e:	18fb      	adds	r3, r7, r3
   14d90:	2210      	movs	r2, #16
   14d92:	0018      	movs	r0, r3
   14d94:	f010 fc9c 	bl	256d0 <memcmp>
   14d98:	1e03      	subs	r3, r0, #0
   14d9a:	d001      	beq.n	14da0 <aesgcm_test+0x864>
        return -5724;
   14d9c:	4bd4      	ldr	r3, [pc, #848]	; (150f0 <aesgcm_test+0xbb4>)
   14d9e:	e20a      	b.n	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(t3, resultT, sizeof(t3)))
   14da0:	23ac      	movs	r3, #172	; 0xac
   14da2:	18f9      	adds	r1, r7, r3
   14da4:	23bc      	movs	r3, #188	; 0xbc
   14da6:	18fb      	adds	r3, r7, r3
   14da8:	2210      	movs	r2, #16
   14daa:	0018      	movs	r0, r3
   14dac:	f010 fc90 	bl	256d0 <memcmp>
   14db0:	1e03      	subs	r3, r0, #0
   14db2:	d001      	beq.n	14db8 <aesgcm_test+0x87c>
        return -5725;
   14db4:	4bcf      	ldr	r3, [pc, #828]	; (150f4 <aesgcm_test+0xbb8>)
   14db6:	e1fe      	b.n	151b6 <aesgcm_test+0xc7a>

#ifdef HAVE_AES_DECRYPT
    result = wc_AesGcmDecrypt(&enc, resultP, resultC, sizeof(c3),
   14db8:	2314      	movs	r3, #20
   14dba:	18fa      	adds	r2, r7, r3
   14dbc:	2360      	movs	r3, #96	; 0x60
   14dbe:	18f9      	adds	r1, r7, r3
   14dc0:	23ec      	movs	r3, #236	; 0xec
   14dc2:	009b      	lsls	r3, r3, #2
   14dc4:	18f8      	adds	r0, r7, r3
   14dc6:	2310      	movs	r3, #16
   14dc8:	9305      	str	r3, [sp, #20]
   14dca:	23cc      	movs	r3, #204	; 0xcc
   14dcc:	18fb      	adds	r3, r7, r3
   14dce:	9304      	str	r3, [sp, #16]
   14dd0:	2310      	movs	r3, #16
   14dd2:	9303      	str	r3, [sp, #12]
   14dd4:	23ac      	movs	r3, #172	; 0xac
   14dd6:	18fb      	adds	r3, r7, r3
   14dd8:	9302      	str	r3, [sp, #8]
   14dda:	2301      	movs	r3, #1
   14ddc:	9301      	str	r3, [sp, #4]
   14dde:	23ec      	movs	r3, #236	; 0xec
   14de0:	18fb      	adds	r3, r7, r3
   14de2:	9300      	str	r3, [sp, #0]
   14de4:	2310      	movs	r3, #16
   14de6:	f7f4 fd99 	bl	991c <wc_AesGcmDecrypt>
   14dea:	0003      	movs	r3, r0
   14dec:	229d      	movs	r2, #157	; 0x9d
   14dee:	00d2      	lsls	r2, r2, #3
   14df0:	18ba      	adds	r2, r7, r2
   14df2:	6013      	str	r3, [r2, #0]
                      iv3, sizeof(iv3), resultT, sizeof(t3), a3, sizeof(a3));
#if defined(WOLFSSL_ASYNC_CRYPT)
    result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (result != 0)
   14df4:	239d      	movs	r3, #157	; 0x9d
   14df6:	00db      	lsls	r3, r3, #3
   14df8:	18fb      	adds	r3, r7, r3
   14dfa:	681b      	ldr	r3, [r3, #0]
   14dfc:	2b00      	cmp	r3, #0
   14dfe:	d001      	beq.n	14e04 <aesgcm_test+0x8c8>
        return -5726;
   14e00:	4bbd      	ldr	r3, [pc, #756]	; (150f8 <aesgcm_test+0xbbc>)
   14e02:	e1d8      	b.n	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(p3, resultP, sizeof(p3)))
   14e04:	2360      	movs	r3, #96	; 0x60
   14e06:	18f9      	adds	r1, r7, r3
   14e08:	1c7b      	adds	r3, r7, #1
   14e0a:	33ff      	adds	r3, #255	; 0xff
   14e0c:	2210      	movs	r2, #16
   14e0e:	0018      	movs	r0, r3
   14e10:	f010 fc5e 	bl	256d0 <memcmp>
   14e14:	1e03      	subs	r3, r0, #0
   14e16:	d001      	beq.n	14e1c <aesgcm_test+0x8e0>
        return -5727;
   14e18:	4bb8      	ldr	r3, [pc, #736]	; (150fc <aesgcm_test+0xbc0>)
   14e1a:	e1cc      	b.n	151b6 <aesgcm_test+0xc7a>
#endif /* HAVE_AES_DECRYPT */
#endif /* WOLFSSL_AES_128 */
#endif /* ENABLE_NON_12BYTE_IV_TEST */

#if defined(WOLFSSL_AES_256) && !defined(WOLFSSL_AFALG_XILINX_AES)
    XMEMSET(resultT, 0, sizeof(resultT));
   14e1c:	23ac      	movs	r3, #172	; 0xac
   14e1e:	18fb      	adds	r3, r7, r3
   14e20:	2210      	movs	r2, #16
   14e22:	2100      	movs	r1, #0
   14e24:	0018      	movs	r0, r3
   14e26:	f010 fc80 	bl	2572a <memset>
    XMEMSET(resultC, 0, sizeof(resultC));
   14e2a:	2314      	movs	r3, #20
   14e2c:	18fb      	adds	r3, r7, r3
   14e2e:	224c      	movs	r2, #76	; 0x4c
   14e30:	2100      	movs	r1, #0
   14e32:	0018      	movs	r0, r3
   14e34:	f010 fc79 	bl	2572a <memset>
    XMEMSET(resultP, 0, sizeof(resultP));
   14e38:	2360      	movs	r3, #96	; 0x60
   14e3a:	18fb      	adds	r3, r7, r3
   14e3c:	224c      	movs	r2, #76	; 0x4c
   14e3e:	2100      	movs	r1, #0
   14e40:	0018      	movs	r0, r3
   14e42:	f010 fc72 	bl	2572a <memset>

    wc_AesGcmSetKey(&enc, k1, sizeof(k1));
   14e46:	2382      	movs	r3, #130	; 0x82
   14e48:	009b      	lsls	r3, r3, #2
   14e4a:	18f9      	adds	r1, r7, r3
   14e4c:	23ec      	movs	r3, #236	; 0xec
   14e4e:	009b      	lsls	r3, r3, #2
   14e50:	18fb      	adds	r3, r7, r3
   14e52:	2220      	movs	r2, #32
   14e54:	0018      	movs	r0, r3
   14e56:	f7f4 fa6f 	bl	9338 <wc_AesGcmSetKey>
    /* AES-GCM encrypt and decrypt both use AES encrypt internally */
    result = wc_AesGcmEncrypt(&enc, resultC, p, sizeof(p), iv1, sizeof(iv1),
   14e5a:	23ac      	movs	r3, #172	; 0xac
   14e5c:	18fb      	adds	r3, r7, r3
   14e5e:	3301      	adds	r3, #1
   14e60:	228f      	movs	r2, #143	; 0x8f
   14e62:	0092      	lsls	r2, r2, #2
   14e64:	18bc      	adds	r4, r7, r2
   14e66:	2214      	movs	r2, #20
   14e68:	18b9      	adds	r1, r7, r2
   14e6a:	22ec      	movs	r2, #236	; 0xec
   14e6c:	0092      	lsls	r2, r2, #2
   14e6e:	18b8      	adds	r0, r7, r2
   14e70:	2214      	movs	r2, #20
   14e72:	9205      	str	r2, [sp, #20]
   14e74:	228a      	movs	r2, #138	; 0x8a
   14e76:	0092      	lsls	r2, r2, #2
   14e78:	18ba      	adds	r2, r7, r2
   14e7a:	9204      	str	r2, [sp, #16]
   14e7c:	220f      	movs	r2, #15
   14e7e:	9203      	str	r2, [sp, #12]
   14e80:	9302      	str	r3, [sp, #8]
   14e82:	230c      	movs	r3, #12
   14e84:	9301      	str	r3, [sp, #4]
   14e86:	23fe      	movs	r3, #254	; 0xfe
   14e88:	005b      	lsls	r3, r3, #1
   14e8a:	18fb      	adds	r3, r7, r3
   14e8c:	9300      	str	r3, [sp, #0]
   14e8e:	233c      	movs	r3, #60	; 0x3c
   14e90:	0022      	movs	r2, r4
   14e92:	f7f4 fc4f 	bl	9734 <wc_AesGcmEncrypt>
   14e96:	0003      	movs	r3, r0
   14e98:	229d      	movs	r2, #157	; 0x9d
   14e9a:	00d2      	lsls	r2, r2, #3
   14e9c:	18ba      	adds	r2, r7, r2
   14e9e:	6013      	str	r3, [r2, #0]
                                resultT + 1, sizeof(resultT) - 1, a, sizeof(a));
#if defined(WOLFSSL_ASYNC_CRYPT)
    result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (result != 0)
   14ea0:	239d      	movs	r3, #157	; 0x9d
   14ea2:	00db      	lsls	r3, r3, #3
   14ea4:	18fb      	adds	r3, r7, r3
   14ea6:	681b      	ldr	r3, [r3, #0]
   14ea8:	2b00      	cmp	r3, #0
   14eaa:	d001      	beq.n	14eb0 <aesgcm_test+0x974>
        return -5728;
   14eac:	4b94      	ldr	r3, [pc, #592]	; (15100 <aesgcm_test+0xbc4>)
   14eae:	e182      	b.n	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(c1, resultC, sizeof(c1)))
   14eb0:	2314      	movs	r3, #20
   14eb2:	18f9      	adds	r1, r7, r3
   14eb4:	23e0      	movs	r3, #224	; 0xe0
   14eb6:	005b      	lsls	r3, r3, #1
   14eb8:	18fb      	adds	r3, r7, r3
   14eba:	223c      	movs	r2, #60	; 0x3c
   14ebc:	0018      	movs	r0, r3
   14ebe:	f010 fc07 	bl	256d0 <memcmp>
   14ec2:	1e03      	subs	r3, r0, #0
   14ec4:	d001      	beq.n	14eca <aesgcm_test+0x98e>
        return -5729;
   14ec6:	4b8f      	ldr	r3, [pc, #572]	; (15104 <aesgcm_test+0xbc8>)
   14ec8:	e175      	b.n	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(t1, resultT + 1, sizeof(resultT) - 1))
   14eca:	23ac      	movs	r3, #172	; 0xac
   14ecc:	18fb      	adds	r3, r7, r3
   14ece:	3301      	adds	r3, #1
   14ed0:	22d8      	movs	r2, #216	; 0xd8
   14ed2:	0052      	lsls	r2, r2, #1
   14ed4:	18b8      	adds	r0, r7, r2
   14ed6:	220f      	movs	r2, #15
   14ed8:	0019      	movs	r1, r3
   14eda:	f010 fbf9 	bl	256d0 <memcmp>
   14ede:	1e03      	subs	r3, r0, #0
   14ee0:	d001      	beq.n	14ee6 <aesgcm_test+0x9aa>
        return -5730;
   14ee2:	4b89      	ldr	r3, [pc, #548]	; (15108 <aesgcm_test+0xbcc>)
   14ee4:	e167      	b.n	151b6 <aesgcm_test+0xc7a>

#ifdef HAVE_AES_DECRYPT
    result = wc_AesGcmDecrypt(&enc, resultP, resultC, sizeof(p),
   14ee6:	23ac      	movs	r3, #172	; 0xac
   14ee8:	18fb      	adds	r3, r7, r3
   14eea:	3301      	adds	r3, #1
   14eec:	2214      	movs	r2, #20
   14eee:	18bc      	adds	r4, r7, r2
   14ef0:	2260      	movs	r2, #96	; 0x60
   14ef2:	18b9      	adds	r1, r7, r2
   14ef4:	22ec      	movs	r2, #236	; 0xec
   14ef6:	0092      	lsls	r2, r2, #2
   14ef8:	18b8      	adds	r0, r7, r2
   14efa:	2214      	movs	r2, #20
   14efc:	9205      	str	r2, [sp, #20]
   14efe:	228a      	movs	r2, #138	; 0x8a
   14f00:	0092      	lsls	r2, r2, #2
   14f02:	18ba      	adds	r2, r7, r2
   14f04:	9204      	str	r2, [sp, #16]
   14f06:	220f      	movs	r2, #15
   14f08:	9203      	str	r2, [sp, #12]
   14f0a:	9302      	str	r3, [sp, #8]
   14f0c:	230c      	movs	r3, #12
   14f0e:	9301      	str	r3, [sp, #4]
   14f10:	23fe      	movs	r3, #254	; 0xfe
   14f12:	005b      	lsls	r3, r3, #1
   14f14:	18fb      	adds	r3, r7, r3
   14f16:	9300      	str	r3, [sp, #0]
   14f18:	233c      	movs	r3, #60	; 0x3c
   14f1a:	0022      	movs	r2, r4
   14f1c:	f7f4 fcfe 	bl	991c <wc_AesGcmDecrypt>
   14f20:	0003      	movs	r3, r0
   14f22:	229d      	movs	r2, #157	; 0x9d
   14f24:	00d2      	lsls	r2, r2, #3
   14f26:	18ba      	adds	r2, r7, r2
   14f28:	6013      	str	r3, [r2, #0]
              iv1, sizeof(iv1), resultT + 1, sizeof(resultT) - 1, a, sizeof(a));
#if defined(WOLFSSL_ASYNC_CRYPT)
    result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (result != 0)
   14f2a:	239d      	movs	r3, #157	; 0x9d
   14f2c:	00db      	lsls	r3, r3, #3
   14f2e:	18fb      	adds	r3, r7, r3
   14f30:	681b      	ldr	r3, [r3, #0]
   14f32:	2b00      	cmp	r3, #0
   14f34:	d001      	beq.n	14f3a <aesgcm_test+0x9fe>
        return -5731;
   14f36:	4b75      	ldr	r3, [pc, #468]	; (1510c <aesgcm_test+0xbd0>)
   14f38:	e13d      	b.n	151b6 <aesgcm_test+0xc7a>
    if (XMEMCMP(p, resultP, sizeof(p)))
   14f3a:	2360      	movs	r3, #96	; 0x60
   14f3c:	18f9      	adds	r1, r7, r3
   14f3e:	238f      	movs	r3, #143	; 0x8f
   14f40:	009b      	lsls	r3, r3, #2
   14f42:	18fb      	adds	r3, r7, r3
   14f44:	223c      	movs	r2, #60	; 0x3c
   14f46:	0018      	movs	r0, r3
   14f48:	f010 fbc2 	bl	256d0 <memcmp>
   14f4c:	1e03      	subs	r3, r0, #0
   14f4e:	d001      	beq.n	14f54 <aesgcm_test+0xa18>
        return -5732;
   14f50:	4b6f      	ldr	r3, [pc, #444]	; (15110 <aesgcm_test+0xbd4>)
   14f52:	e130      	b.n	151b6 <aesgcm_test+0xc7a>
#if defined(WOLFSSL_AES_256) && !(defined(WC_NO_RNG) || defined(HAVE_SELFTEST))
    {
        WC_RNG rng;
        byte randIV[12];

        result = wc_InitRng(&rng);
   14f54:	230c      	movs	r3, #12
   14f56:	18fb      	adds	r3, r7, r3
   14f58:	0018      	movs	r0, r3
   14f5a:	f7f0 fa47 	bl	53ec <wc_InitRng>
   14f5e:	0003      	movs	r3, r0
   14f60:	229d      	movs	r2, #157	; 0x9d
   14f62:	00d2      	lsls	r2, r2, #3
   14f64:	18ba      	adds	r2, r7, r2
   14f66:	6013      	str	r3, [r2, #0]
        if (result != 0)
   14f68:	239d      	movs	r3, #157	; 0x9d
   14f6a:	00db      	lsls	r3, r3, #3
   14f6c:	18fb      	adds	r3, r7, r3
   14f6e:	681b      	ldr	r3, [r3, #0]
   14f70:	2b00      	cmp	r3, #0
   14f72:	d001      	beq.n	14f78 <aesgcm_test+0xa3c>
            return -8208;
   14f74:	4b67      	ldr	r3, [pc, #412]	; (15114 <aesgcm_test+0xbd8>)
   14f76:	e11e      	b.n	151b6 <aesgcm_test+0xc7a>

        XMEMSET(randIV, 0, sizeof(randIV));
   14f78:	003b      	movs	r3, r7
   14f7a:	220c      	movs	r2, #12
   14f7c:	2100      	movs	r1, #0
   14f7e:	0018      	movs	r0, r3
   14f80:	f010 fbd3 	bl	2572a <memset>
        XMEMSET(resultT, 0, sizeof(resultT));
   14f84:	23ac      	movs	r3, #172	; 0xac
   14f86:	18fb      	adds	r3, r7, r3
   14f88:	2210      	movs	r2, #16
   14f8a:	2100      	movs	r1, #0
   14f8c:	0018      	movs	r0, r3
   14f8e:	f010 fbcc 	bl	2572a <memset>
        XMEMSET(resultC, 0, sizeof(resultC));
   14f92:	2314      	movs	r3, #20
   14f94:	18fb      	adds	r3, r7, r3
   14f96:	224c      	movs	r2, #76	; 0x4c
   14f98:	2100      	movs	r1, #0
   14f9a:	0018      	movs	r0, r3
   14f9c:	f010 fbc5 	bl	2572a <memset>
        XMEMSET(resultP, 0, sizeof(resultP));
   14fa0:	2360      	movs	r3, #96	; 0x60
   14fa2:	18fb      	adds	r3, r7, r3
   14fa4:	224c      	movs	r2, #76	; 0x4c
   14fa6:	2100      	movs	r1, #0
   14fa8:	0018      	movs	r0, r3
   14faa:	f010 fbbe 	bl	2572a <memset>

        wc_AesGcmSetKey(&enc, k1, sizeof(k1));
   14fae:	2382      	movs	r3, #130	; 0x82
   14fb0:	009b      	lsls	r3, r3, #2
   14fb2:	18f9      	adds	r1, r7, r3
   14fb4:	23ec      	movs	r3, #236	; 0xec
   14fb6:	009b      	lsls	r3, r3, #2
   14fb8:	18fb      	adds	r3, r7, r3
   14fba:	2220      	movs	r2, #32
   14fbc:	0018      	movs	r0, r3
   14fbe:	f7f4 f9bb 	bl	9338 <wc_AesGcmSetKey>
        result = wc_AesGcmSetIV(&enc, sizeof(randIV), NULL, 0, &rng);
   14fc2:	23ec      	movs	r3, #236	; 0xec
   14fc4:	009b      	lsls	r3, r3, #2
   14fc6:	18f8      	adds	r0, r7, r3
   14fc8:	230c      	movs	r3, #12
   14fca:	18fb      	adds	r3, r7, r3
   14fcc:	9300      	str	r3, [sp, #0]
   14fce:	2300      	movs	r3, #0
   14fd0:	2200      	movs	r2, #0
   14fd2:	210c      	movs	r1, #12
   14fd4:	f7f4 fcdc 	bl	9990 <wc_AesGcmSetIV>
   14fd8:	0003      	movs	r3, r0
   14fda:	229d      	movs	r2, #157	; 0x9d
   14fdc:	00d2      	lsls	r2, r2, #3
   14fde:	18ba      	adds	r2, r7, r2
   14fe0:	6013      	str	r3, [r2, #0]
        if (result != 0)
   14fe2:	239d      	movs	r3, #157	; 0x9d
   14fe4:	00db      	lsls	r3, r3, #3
   14fe6:	18fb      	adds	r3, r7, r3
   14fe8:	681b      	ldr	r3, [r3, #0]
   14fea:	2b00      	cmp	r3, #0
   14fec:	d001      	beq.n	14ff2 <aesgcm_test+0xab6>
            return -8213;
   14fee:	4b4a      	ldr	r3, [pc, #296]	; (15118 <aesgcm_test+0xbdc>)
   14ff0:	e0e1      	b.n	151b6 <aesgcm_test+0xc7a>

        result = wc_AesGcmEncrypt_ex(&enc,
   14ff2:	238f      	movs	r3, #143	; 0x8f
   14ff4:	009b      	lsls	r3, r3, #2
   14ff6:	18fa      	adds	r2, r7, r3
   14ff8:	2314      	movs	r3, #20
   14ffa:	18f9      	adds	r1, r7, r3
   14ffc:	23ec      	movs	r3, #236	; 0xec
   14ffe:	009b      	lsls	r3, r3, #2
   15000:	18f8      	adds	r0, r7, r3
   15002:	2314      	movs	r3, #20
   15004:	9305      	str	r3, [sp, #20]
   15006:	238a      	movs	r3, #138	; 0x8a
   15008:	009b      	lsls	r3, r3, #2
   1500a:	18fb      	adds	r3, r7, r3
   1500c:	9304      	str	r3, [sp, #16]
   1500e:	2310      	movs	r3, #16
   15010:	9303      	str	r3, [sp, #12]
   15012:	23ac      	movs	r3, #172	; 0xac
   15014:	18fb      	adds	r3, r7, r3
   15016:	9302      	str	r3, [sp, #8]
   15018:	230c      	movs	r3, #12
   1501a:	9301      	str	r3, [sp, #4]
   1501c:	003b      	movs	r3, r7
   1501e:	9300      	str	r3, [sp, #0]
   15020:	233c      	movs	r3, #60	; 0x3c
   15022:	f7f4 fd15 	bl	9a50 <wc_AesGcmEncrypt_ex>
   15026:	0003      	movs	r3, r0
   15028:	229d      	movs	r2, #157	; 0x9d
   1502a:	00d2      	lsls	r2, r2, #3
   1502c:	18ba      	adds	r2, r7, r2
   1502e:	6013      	str	r3, [r2, #0]
                        resultT, sizeof(resultT),
                        a, sizeof(a));
    #if defined(WOLFSSL_ASYNC_CRYPT)
        result = wc_AsyncWait(result, &enc.asyncDev, WC_ASYNC_FLAG_NONE);
    #endif
        if (result != 0)
   15030:	239d      	movs	r3, #157	; 0x9d
   15032:	00db      	lsls	r3, r3, #3
   15034:	18fb      	adds	r3, r7, r3
   15036:	681b      	ldr	r3, [r3, #0]
   15038:	2b00      	cmp	r3, #0
   1503a:	d001      	beq.n	15040 <aesgcm_test+0xb04>
            return -8209;
   1503c:	4b37      	ldr	r3, [pc, #220]	; (1511c <aesgcm_test+0xbe0>)
   1503e:	e0ba      	b.n	151b6 <aesgcm_test+0xc7a>

        /* Check the IV has been set. */
        {
            word32 i, ivSum = 0;
   15040:	2300      	movs	r3, #0
   15042:	4a37      	ldr	r2, [pc, #220]	; (15120 <aesgcm_test+0xbe4>)
   15044:	18ba      	adds	r2, r7, r2
   15046:	6013      	str	r3, [r2, #0]

            for (i = 0; i < sizeof(randIV); i++)
   15048:	2300      	movs	r3, #0
   1504a:	229e      	movs	r2, #158	; 0x9e
   1504c:	00d2      	lsls	r2, r2, #3
   1504e:	18ba      	adds	r2, r7, r2
   15050:	6013      	str	r3, [r2, #0]
   15052:	e01b      	b.n	1508c <aesgcm_test+0xb50>
                ivSum += randIV[i];
   15054:	4b33      	ldr	r3, [pc, #204]	; (15124 <aesgcm_test+0xbe8>)
   15056:	22a0      	movs	r2, #160	; 0xa0
   15058:	00d2      	lsls	r2, r2, #3
   1505a:	18ba      	adds	r2, r7, r2
   1505c:	18d2      	adds	r2, r2, r3
   1505e:	239e      	movs	r3, #158	; 0x9e
   15060:	00db      	lsls	r3, r3, #3
   15062:	18fb      	adds	r3, r7, r3
   15064:	681b      	ldr	r3, [r3, #0]
   15066:	18d3      	adds	r3, r2, r3
   15068:	781b      	ldrb	r3, [r3, #0]
   1506a:	001a      	movs	r2, r3
   1506c:	4b2c      	ldr	r3, [pc, #176]	; (15120 <aesgcm_test+0xbe4>)
   1506e:	18fb      	adds	r3, r7, r3
   15070:	681b      	ldr	r3, [r3, #0]
   15072:	189b      	adds	r3, r3, r2
   15074:	4a2a      	ldr	r2, [pc, #168]	; (15120 <aesgcm_test+0xbe4>)
   15076:	18ba      	adds	r2, r7, r2
   15078:	6013      	str	r3, [r2, #0]

        /* Check the IV has been set. */
        {
            word32 i, ivSum = 0;

            for (i = 0; i < sizeof(randIV); i++)
   1507a:	239e      	movs	r3, #158	; 0x9e
   1507c:	00db      	lsls	r3, r3, #3
   1507e:	18fb      	adds	r3, r7, r3
   15080:	681b      	ldr	r3, [r3, #0]
   15082:	3301      	adds	r3, #1
   15084:	229e      	movs	r2, #158	; 0x9e
   15086:	00d2      	lsls	r2, r2, #3
   15088:	18ba      	adds	r2, r7, r2
   1508a:	6013      	str	r3, [r2, #0]
   1508c:	239e      	movs	r3, #158	; 0x9e
   1508e:	00db      	lsls	r3, r3, #3
   15090:	18fb      	adds	r3, r7, r3
   15092:	681b      	ldr	r3, [r3, #0]
   15094:	2b0b      	cmp	r3, #11
   15096:	d9dd      	bls.n	15054 <aesgcm_test+0xb18>
                ivSum += randIV[i];
            if (ivSum == 0)
   15098:	4b21      	ldr	r3, [pc, #132]	; (15120 <aesgcm_test+0xbe4>)
   1509a:	18fb      	adds	r3, r7, r3
   1509c:	681b      	ldr	r3, [r3, #0]
   1509e:	2b00      	cmp	r3, #0
   150a0:	d101      	bne.n	150a6 <aesgcm_test+0xb6a>
                return -8210;
   150a2:	4b21      	ldr	r3, [pc, #132]	; (15128 <aesgcm_test+0xbec>)
   150a4:	e087      	b.n	151b6 <aesgcm_test+0xc7a>
        }

#ifdef HAVE_AES_DECRYPT
        wc_AesGcmSetKey(&dec, k1, sizeof(k1));
   150a6:	2382      	movs	r3, #130	; 0x82
   150a8:	009b      	lsls	r3, r3, #2
   150aa:	18f9      	adds	r1, r7, r3
   150ac:	239e      	movs	r3, #158	; 0x9e
   150ae:	009b      	lsls	r3, r3, #2
   150b0:	18fb      	adds	r3, r7, r3
   150b2:	2220      	movs	r2, #32
   150b4:	0018      	movs	r0, r3
   150b6:	f7f4 f93f 	bl	9338 <wc_AesGcmSetKey>
        result = wc_AesGcmSetIV(&dec, sizeof(randIV), NULL, 0, &rng);
   150ba:	239e      	movs	r3, #158	; 0x9e
   150bc:	009b      	lsls	r3, r3, #2
   150be:	18f8      	adds	r0, r7, r3
   150c0:	230c      	movs	r3, #12
   150c2:	18fb      	adds	r3, r7, r3
   150c4:	9300      	str	r3, [sp, #0]
   150c6:	2300      	movs	r3, #0
   150c8:	2200      	movs	r2, #0
   150ca:	210c      	movs	r1, #12
   150cc:	f7f4 fc60 	bl	9990 <wc_AesGcmSetIV>
   150d0:	0003      	movs	r3, r0
   150d2:	229d      	movs	r2, #157	; 0x9d
   150d4:	00d2      	lsls	r2, r2, #3
   150d6:	18ba      	adds	r2, r7, r2
   150d8:	6013      	str	r3, [r2, #0]
        if (result != 0)
   150da:	239d      	movs	r3, #157	; 0x9d
   150dc:	00db      	lsls	r3, r3, #3
   150de:	18fb      	adds	r3, r7, r3
   150e0:	681b      	ldr	r3, [r3, #0]
   150e2:	2b00      	cmp	r3, #0
   150e4:	d022      	beq.n	1512c <aesgcm_test+0xbf0>
            return -8213;
   150e6:	4b0c      	ldr	r3, [pc, #48]	; (15118 <aesgcm_test+0xbdc>)
   150e8:	e065      	b.n	151b6 <aesgcm_test+0xc7a>
   150ea:	46c0      	nop			; (mov r8, r8)
   150ec:	ffffe9a5 	.word	0xffffe9a5
   150f0:	ffffe9a4 	.word	0xffffe9a4
   150f4:	ffffe9a3 	.word	0xffffe9a3
   150f8:	ffffe9a2 	.word	0xffffe9a2
   150fc:	ffffe9a1 	.word	0xffffe9a1
   15100:	ffffe9a0 	.word	0xffffe9a0
   15104:	ffffe99f 	.word	0xffffe99f
   15108:	ffffe99e 	.word	0xffffe99e
   1510c:	ffffe99d 	.word	0xffffe99d
   15110:	ffffe99c 	.word	0xffffe99c
   15114:	ffffdff0 	.word	0xffffdff0
   15118:	ffffdfeb 	.word	0xffffdfeb
   1511c:	ffffdfef 	.word	0xffffdfef
   15120:	000004ec 	.word	0x000004ec
   15124:	fffffb00 	.word	0xfffffb00
   15128:	ffffdfee 	.word	0xffffdfee

        result = wc_AesGcmDecrypt(&dec,
   1512c:	2314      	movs	r3, #20
   1512e:	18fa      	adds	r2, r7, r3
   15130:	2360      	movs	r3, #96	; 0x60
   15132:	18f9      	adds	r1, r7, r3
   15134:	239e      	movs	r3, #158	; 0x9e
   15136:	009b      	lsls	r3, r3, #2
   15138:	18f8      	adds	r0, r7, r3
   1513a:	2314      	movs	r3, #20
   1513c:	9305      	str	r3, [sp, #20]
   1513e:	238a      	movs	r3, #138	; 0x8a
   15140:	009b      	lsls	r3, r3, #2
   15142:	18fb      	adds	r3, r7, r3
   15144:	9304      	str	r3, [sp, #16]
   15146:	2310      	movs	r3, #16
   15148:	9303      	str	r3, [sp, #12]
   1514a:	23ac      	movs	r3, #172	; 0xac
   1514c:	18fb      	adds	r3, r7, r3
   1514e:	9302      	str	r3, [sp, #8]
   15150:	230c      	movs	r3, #12
   15152:	9301      	str	r3, [sp, #4]
   15154:	003b      	movs	r3, r7
   15156:	9300      	str	r3, [sp, #0]
   15158:	233c      	movs	r3, #60	; 0x3c
   1515a:	f7f4 fbdf 	bl	991c <wc_AesGcmDecrypt>
   1515e:	0003      	movs	r3, r0
   15160:	229d      	movs	r2, #157	; 0x9d
   15162:	00d2      	lsls	r2, r2, #3
   15164:	18ba      	adds	r2, r7, r2
   15166:	6013      	str	r3, [r2, #0]
                          resultT, sizeof(resultT),
                          a, sizeof(a));
#if defined(WOLFSSL_ASYNC_CRYPT)
        result = wc_AsyncWait(result, &dec.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
        if (result != 0)
   15168:	239d      	movs	r3, #157	; 0x9d
   1516a:	00db      	lsls	r3, r3, #3
   1516c:	18fb      	adds	r3, r7, r3
   1516e:	681b      	ldr	r3, [r3, #0]
   15170:	2b00      	cmp	r3, #0
   15172:	d001      	beq.n	15178 <aesgcm_test+0xc3c>
            return -8211;
   15174:	4b12      	ldr	r3, [pc, #72]	; (151c0 <aesgcm_test+0xc84>)
   15176:	e01e      	b.n	151b6 <aesgcm_test+0xc7a>
        if (XMEMCMP(p, resultP, sizeof(p)))
   15178:	2360      	movs	r3, #96	; 0x60
   1517a:	18f9      	adds	r1, r7, r3
   1517c:	238f      	movs	r3, #143	; 0x8f
   1517e:	009b      	lsls	r3, r3, #2
   15180:	18fb      	adds	r3, r7, r3
   15182:	223c      	movs	r2, #60	; 0x3c
   15184:	0018      	movs	r0, r3
   15186:	f010 faa3 	bl	256d0 <memcmp>
   1518a:	1e03      	subs	r3, r0, #0
   1518c:	d001      	beq.n	15192 <aesgcm_test+0xc56>
            return -8212;
   1518e:	4b0d      	ldr	r3, [pc, #52]	; (151c4 <aesgcm_test+0xc88>)
   15190:	e011      	b.n	151b6 <aesgcm_test+0xc7a>
#endif /* HAVE_AES_DECRYPT */

        wc_FreeRng(&rng);
   15192:	230c      	movs	r3, #12
   15194:	18fb      	adds	r3, r7, r3
   15196:	0018      	movs	r0, r3
   15198:	f7f0 f980 	bl	549c <wc_FreeRng>
    }
#endif /* WOLFSSL_AES_256 && !(WC_NO_RNG || HAVE_SELFTEST) */
#endif /* HAVE_FIPS_VERSION >= 2 */

    wc_AesFree(&enc);
   1519c:	23ec      	movs	r3, #236	; 0xec
   1519e:	009b      	lsls	r3, r3, #2
   151a0:	18fb      	adds	r3, r7, r3
   151a2:	0018      	movs	r0, r3
   151a4:	f7f4 fe52 	bl	9e4c <wc_AesFree>
    wc_AesFree(&dec);
   151a8:	239e      	movs	r3, #158	; 0x9e
   151aa:	009b      	lsls	r3, r3, #2
   151ac:	18fb      	adds	r3, r7, r3
   151ae:	0018      	movs	r0, r3
   151b0:	f7f4 fe4c 	bl	9e4c <wc_AesFree>

    return 0;
   151b4:	2300      	movs	r3, #0
}
   151b6:	0018      	movs	r0, r3
   151b8:	46bd      	mov	sp, r7
   151ba:	4b03      	ldr	r3, [pc, #12]	; (151c8 <aesgcm_test+0xc8c>)
   151bc:	449d      	add	sp, r3
   151be:	bd90      	pop	{r4, r7, pc}
   151c0:	ffffdfed 	.word	0xffffdfed
   151c4:	ffffdfec 	.word	0xffffdfec
   151c8:	00000504 	.word	0x00000504

000151cc <gmac_test>:

#ifdef WOLFSSL_AES_128
int gmac_test(void)
{
   151cc:	b581      	push	{r0, r7, lr}
   151ce:	b0ff      	sub	sp, #508	; 0x1fc
   151d0:	af06      	add	r7, sp, #24
    Gmac gmac;

    const byte k1[] =
   151d2:	4baf      	ldr	r3, [pc, #700]	; (15490 <gmac_test+0x2c4>)
   151d4:	22f4      	movs	r2, #244	; 0xf4
   151d6:	0052      	lsls	r2, r2, #1
   151d8:	18ba      	adds	r2, r7, r2
   151da:	18d2      	adds	r2, r2, r3
   151dc:	4bad      	ldr	r3, [pc, #692]	; (15494 <gmac_test+0x2c8>)
   151de:	0010      	movs	r0, r2
   151e0:	0019      	movs	r1, r3
   151e2:	2310      	movs	r3, #16
   151e4:	001a      	movs	r2, r3
   151e6:	f010 fa82 	bl	256ee <memcpy>
    {
        0x89, 0xc9, 0x49, 0xe9, 0xc8, 0x04, 0xaf, 0x01,
        0x4d, 0x56, 0x04, 0xb3, 0x94, 0x59, 0xf2, 0xc8
    };
    const byte iv1[] =
   151ea:	4bab      	ldr	r3, [pc, #684]	; (15498 <gmac_test+0x2cc>)
   151ec:	22f4      	movs	r2, #244	; 0xf4
   151ee:	0052      	lsls	r2, r2, #1
   151f0:	18ba      	adds	r2, r7, r2
   151f2:	18d2      	adds	r2, r2, r3
   151f4:	4ba9      	ldr	r3, [pc, #676]	; (1549c <gmac_test+0x2d0>)
   151f6:	0010      	movs	r0, r2
   151f8:	0019      	movs	r1, r3
   151fa:	230c      	movs	r3, #12
   151fc:	001a      	movs	r2, r3
   151fe:	f010 fa76 	bl	256ee <memcpy>
    {
        0xd1, 0xb1, 0x04, 0xc8, 0x15, 0xbf, 0x1e, 0x94,
        0xe2, 0x8c, 0x8f, 0x16
    };
    const byte a1[] =
   15202:	4ba7      	ldr	r3, [pc, #668]	; (154a0 <gmac_test+0x2d4>)
   15204:	22f4      	movs	r2, #244	; 0xf4
   15206:	0052      	lsls	r2, r2, #1
   15208:	18ba      	adds	r2, r7, r2
   1520a:	18d2      	adds	r2, r2, r3
   1520c:	4ba5      	ldr	r3, [pc, #660]	; (154a4 <gmac_test+0x2d8>)
   1520e:	0010      	movs	r0, r2
   15210:	0019      	movs	r1, r3
   15212:	2310      	movs	r3, #16
   15214:	001a      	movs	r2, r3
   15216:	f010 fa6a 	bl	256ee <memcpy>
    {
       0x82, 0xad, 0xcd, 0x63, 0x8d, 0x3f, 0xa9, 0xd9,
       0xf3, 0xe8, 0x41, 0x00, 0xd6, 0x1e, 0x07, 0x77
    };
    const byte t1[] =
   1521a:	4ba3      	ldr	r3, [pc, #652]	; (154a8 <gmac_test+0x2dc>)
   1521c:	22f4      	movs	r2, #244	; 0xf4
   1521e:	0052      	lsls	r2, r2, #1
   15220:	18ba      	adds	r2, r7, r2
   15222:	18d2      	adds	r2, r2, r3
   15224:	4ba1      	ldr	r3, [pc, #644]	; (154ac <gmac_test+0x2e0>)
   15226:	0010      	movs	r0, r2
   15228:	0019      	movs	r1, r3
   1522a:	2310      	movs	r3, #16
   1522c:	001a      	movs	r2, r3
   1522e:	f010 fa5e 	bl	256ee <memcpy>

#if !defined(HAVE_FIPS) || \
    (defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2))
	/* FIPS builds only allow 16-byte auth tags. */
	/* This sample uses a 15-byte auth tag. */
    const byte k2[] =
   15232:	4b9f      	ldr	r3, [pc, #636]	; (154b0 <gmac_test+0x2e4>)
   15234:	22f4      	movs	r2, #244	; 0xf4
   15236:	0052      	lsls	r2, r2, #1
   15238:	18ba      	adds	r2, r7, r2
   1523a:	18d2      	adds	r2, r2, r3
   1523c:	4b9d      	ldr	r3, [pc, #628]	; (154b4 <gmac_test+0x2e8>)
   1523e:	0010      	movs	r0, r2
   15240:	0019      	movs	r1, r3
   15242:	2310      	movs	r3, #16
   15244:	001a      	movs	r2, r3
   15246:	f010 fa52 	bl	256ee <memcpy>
    {
        0x40, 0xf7, 0xec, 0xb2, 0x52, 0x6d, 0xaa, 0xd4,
        0x74, 0x25, 0x1d, 0xf4, 0x88, 0x9e, 0xf6, 0x5b
    };
    const byte iv2[] =
   1524a:	4b9b      	ldr	r3, [pc, #620]	; (154b8 <gmac_test+0x2ec>)
   1524c:	22f4      	movs	r2, #244	; 0xf4
   1524e:	0052      	lsls	r2, r2, #1
   15250:	18ba      	adds	r2, r7, r2
   15252:	18d2      	adds	r2, r2, r3
   15254:	4b99      	ldr	r3, [pc, #612]	; (154bc <gmac_test+0x2f0>)
   15256:	0010      	movs	r0, r2
   15258:	0019      	movs	r1, r3
   1525a:	230c      	movs	r3, #12
   1525c:	001a      	movs	r2, r3
   1525e:	f010 fa46 	bl	256ee <memcpy>
    {
        0xee, 0x9c, 0x6e, 0x06, 0x15, 0x45, 0x45, 0x03,
        0x1a, 0x60, 0x24, 0xa7
    };
    const byte a2[] =
   15262:	4b97      	ldr	r3, [pc, #604]	; (154c0 <gmac_test+0x2f4>)
   15264:	22f4      	movs	r2, #244	; 0xf4
   15266:	0052      	lsls	r2, r2, #1
   15268:	18ba      	adds	r2, r7, r2
   1526a:	18d2      	adds	r2, r2, r3
   1526c:	4b95      	ldr	r3, [pc, #596]	; (154c4 <gmac_test+0x2f8>)
   1526e:	0010      	movs	r0, r2
   15270:	0019      	movs	r1, r3
   15272:	2310      	movs	r3, #16
   15274:	001a      	movs	r2, r3
   15276:	f010 fa3a 	bl	256ee <memcpy>
    {
        0x94, 0x81, 0x2c, 0x87, 0x07, 0x4e, 0x15, 0x18,
        0x34, 0xb8, 0x35, 0xaf, 0x1c, 0xa5, 0x7e, 0x56
    };
    const byte t2[] =
   1527a:	4b93      	ldr	r3, [pc, #588]	; (154c8 <gmac_test+0x2fc>)
   1527c:	22f4      	movs	r2, #244	; 0xf4
   1527e:	0052      	lsls	r2, r2, #1
   15280:	18ba      	adds	r2, r7, r2
   15282:	18d2      	adds	r2, r2, r3
   15284:	4b91      	ldr	r3, [pc, #580]	; (154cc <gmac_test+0x300>)
   15286:	0010      	movs	r0, r2
   15288:	0019      	movs	r1, r3
   1528a:	230f      	movs	r3, #15
   1528c:	001a      	movs	r2, r3
   1528e:	f010 fa2e 	bl	256ee <memcpy>
    };
#endif

    byte tag[16];

    XMEMSET(&gmac, 0, sizeof(Gmac)); /* clear context */
   15292:	239c      	movs	r3, #156	; 0x9c
   15294:	005a      	lsls	r2, r3, #1
   15296:	23b0      	movs	r3, #176	; 0xb0
   15298:	18fb      	adds	r3, r7, r3
   1529a:	2100      	movs	r1, #0
   1529c:	0018      	movs	r0, r3
   1529e:	f010 fa44 	bl	2572a <memset>
    XMEMSET(tag, 0, sizeof(tag));
   152a2:	2328      	movs	r3, #40	; 0x28
   152a4:	18fb      	adds	r3, r7, r3
   152a6:	2210      	movs	r2, #16
   152a8:	2100      	movs	r1, #0
   152aa:	0018      	movs	r0, r3
   152ac:	f010 fa3d 	bl	2572a <memset>
    wc_GmacSetKey(&gmac, k1, sizeof(k1));
   152b0:	23a0      	movs	r3, #160	; 0xa0
   152b2:	18f9      	adds	r1, r7, r3
   152b4:	23b0      	movs	r3, #176	; 0xb0
   152b6:	18fb      	adds	r3, r7, r3
   152b8:	2210      	movs	r2, #16
   152ba:	0018      	movs	r0, r3
   152bc:	f7f4 fd76 	bl	9dac <wc_GmacSetKey>
    wc_GmacUpdate(&gmac, iv1, sizeof(iv1), a1, sizeof(a1), tag, sizeof(t1));
   152c0:	2384      	movs	r3, #132	; 0x84
   152c2:	18fa      	adds	r2, r7, r3
   152c4:	2394      	movs	r3, #148	; 0x94
   152c6:	18f9      	adds	r1, r7, r3
   152c8:	23b0      	movs	r3, #176	; 0xb0
   152ca:	18f8      	adds	r0, r7, r3
   152cc:	2310      	movs	r3, #16
   152ce:	9302      	str	r3, [sp, #8]
   152d0:	2328      	movs	r3, #40	; 0x28
   152d2:	18fb      	adds	r3, r7, r3
   152d4:	9301      	str	r3, [sp, #4]
   152d6:	2310      	movs	r3, #16
   152d8:	9300      	str	r3, [sp, #0]
   152da:	0013      	movs	r3, r2
   152dc:	220c      	movs	r2, #12
   152de:	f7f4 fd7f 	bl	9de0 <wc_GmacUpdate>
    if (XMEMCMP(t1, tag, sizeof(t1)) != 0)
   152e2:	2328      	movs	r3, #40	; 0x28
   152e4:	18f9      	adds	r1, r7, r3
   152e6:	2374      	movs	r3, #116	; 0x74
   152e8:	18fb      	adds	r3, r7, r3
   152ea:	2210      	movs	r2, #16
   152ec:	0018      	movs	r0, r3
   152ee:	f010 f9ef 	bl	256d0 <memcmp>
   152f2:	1e03      	subs	r3, r0, #0
   152f4:	d001      	beq.n	152fa <gmac_test+0x12e>
        return -5800;
   152f6:	4b76      	ldr	r3, [pc, #472]	; (154d0 <gmac_test+0x304>)
   152f8:	e0c6      	b.n	15488 <gmac_test+0x2bc>

#if !defined(HAVE_FIPS) || \
    (defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2))
    XMEMSET(tag, 0, sizeof(tag));
   152fa:	2328      	movs	r3, #40	; 0x28
   152fc:	18fb      	adds	r3, r7, r3
   152fe:	2210      	movs	r2, #16
   15300:	2100      	movs	r1, #0
   15302:	0018      	movs	r0, r3
   15304:	f010 fa11 	bl	2572a <memset>
    wc_GmacSetKey(&gmac, k2, sizeof(k2));
   15308:	2364      	movs	r3, #100	; 0x64
   1530a:	18f9      	adds	r1, r7, r3
   1530c:	23b0      	movs	r3, #176	; 0xb0
   1530e:	18fb      	adds	r3, r7, r3
   15310:	2210      	movs	r2, #16
   15312:	0018      	movs	r0, r3
   15314:	f7f4 fd4a 	bl	9dac <wc_GmacSetKey>
    wc_GmacUpdate(&gmac, iv2, sizeof(iv2), a2, sizeof(a2), tag, sizeof(t2));
   15318:	2348      	movs	r3, #72	; 0x48
   1531a:	18fa      	adds	r2, r7, r3
   1531c:	2358      	movs	r3, #88	; 0x58
   1531e:	18f9      	adds	r1, r7, r3
   15320:	23b0      	movs	r3, #176	; 0xb0
   15322:	18f8      	adds	r0, r7, r3
   15324:	230f      	movs	r3, #15
   15326:	9302      	str	r3, [sp, #8]
   15328:	2328      	movs	r3, #40	; 0x28
   1532a:	18fb      	adds	r3, r7, r3
   1532c:	9301      	str	r3, [sp, #4]
   1532e:	2310      	movs	r3, #16
   15330:	9300      	str	r3, [sp, #0]
   15332:	0013      	movs	r3, r2
   15334:	220c      	movs	r2, #12
   15336:	f7f4 fd53 	bl	9de0 <wc_GmacUpdate>
    if (XMEMCMP(t2, tag, sizeof(t2)) != 0)
   1533a:	2328      	movs	r3, #40	; 0x28
   1533c:	18f9      	adds	r1, r7, r3
   1533e:	2338      	movs	r3, #56	; 0x38
   15340:	18fb      	adds	r3, r7, r3
   15342:	220f      	movs	r2, #15
   15344:	0018      	movs	r0, r3
   15346:	f010 f9c3 	bl	256d0 <memcmp>
   1534a:	1e03      	subs	r3, r0, #0
   1534c:	d001      	beq.n	15352 <gmac_test+0x186>
        return -5801;
   1534e:	4b61      	ldr	r3, [pc, #388]	; (154d4 <gmac_test+0x308>)
   15350:	e09a      	b.n	15488 <gmac_test+0x2bc>

#if !(defined(WC_NO_RNG) || defined(HAVE_SELFTEST))
    {
        const byte badT[] =
   15352:	4b61      	ldr	r3, [pc, #388]	; (154d8 <gmac_test+0x30c>)
   15354:	22f4      	movs	r2, #244	; 0xf4
   15356:	0052      	lsls	r2, r2, #1
   15358:	18ba      	adds	r2, r7, r2
   1535a:	18d2      	adds	r2, r2, r3
   1535c:	4b5f      	ldr	r3, [pc, #380]	; (154dc <gmac_test+0x310>)
   1535e:	0010      	movs	r0, r2
   15360:	0019      	movs	r1, r3
   15362:	2310      	movs	r3, #16
   15364:	001a      	movs	r2, r3
   15366:	f010 f9c2 	bl	256ee <memcpy>

        WC_RNG rng;
        byte iv[12];

        #ifndef HAVE_FIPS
            if (wc_InitRng_ex(&rng, HEAP_HINT, devId) != 0)
   1536a:	4b5d      	ldr	r3, [pc, #372]	; (154e0 <gmac_test+0x314>)
   1536c:	681a      	ldr	r2, [r3, #0]
   1536e:	2310      	movs	r3, #16
   15370:	18fb      	adds	r3, r7, r3
   15372:	2100      	movs	r1, #0
   15374:	0018      	movs	r0, r3
   15376:	f7f0 f84b 	bl	5410 <wc_InitRng_ex>
   1537a:	1e03      	subs	r3, r0, #0
   1537c:	d001      	beq.n	15382 <gmac_test+0x1b6>
                return -8214;
   1537e:	4b59      	ldr	r3, [pc, #356]	; (154e4 <gmac_test+0x318>)
   15380:	e082      	b.n	15488 <gmac_test+0x2bc>
        #else
            if (wc_InitRng(&rng) != 0)
                return -8214;
        #endif

        if (wc_GmacVerify(k1, sizeof(k1), iv1, sizeof(iv1), a1, sizeof(a1),
   15382:	2394      	movs	r3, #148	; 0x94
   15384:	18fa      	adds	r2, r7, r3
   15386:	23a0      	movs	r3, #160	; 0xa0
   15388:	18f8      	adds	r0, r7, r3
   1538a:	2310      	movs	r3, #16
   1538c:	9303      	str	r3, [sp, #12]
   1538e:	2374      	movs	r3, #116	; 0x74
   15390:	18fb      	adds	r3, r7, r3
   15392:	9302      	str	r3, [sp, #8]
   15394:	2310      	movs	r3, #16
   15396:	9301      	str	r3, [sp, #4]
   15398:	2384      	movs	r3, #132	; 0x84
   1539a:	18fb      	adds	r3, r7, r3
   1539c:	9300      	str	r3, [sp, #0]
   1539e:	230c      	movs	r3, #12
   153a0:	2110      	movs	r1, #16
   153a2:	f7f4 fc77 	bl	9c94 <wc_GmacVerify>
   153a6:	1e03      	subs	r3, r0, #0
   153a8:	d001      	beq.n	153ae <gmac_test+0x1e2>
                    t1, sizeof(t1)) != 0)
            return -8215;
   153aa:	4b4f      	ldr	r3, [pc, #316]	; (154e8 <gmac_test+0x31c>)
   153ac:	e06c      	b.n	15488 <gmac_test+0x2bc>
        if (wc_GmacVerify(k1, sizeof(k1), iv1, sizeof(iv1), a1, sizeof(a1),
   153ae:	2394      	movs	r3, #148	; 0x94
   153b0:	18fa      	adds	r2, r7, r3
   153b2:	23a0      	movs	r3, #160	; 0xa0
   153b4:	18f8      	adds	r0, r7, r3
   153b6:	2310      	movs	r3, #16
   153b8:	9303      	str	r3, [sp, #12]
   153ba:	2318      	movs	r3, #24
   153bc:	18fb      	adds	r3, r7, r3
   153be:	9302      	str	r3, [sp, #8]
   153c0:	2310      	movs	r3, #16
   153c2:	9301      	str	r3, [sp, #4]
   153c4:	2384      	movs	r3, #132	; 0x84
   153c6:	18fb      	adds	r3, r7, r3
   153c8:	9300      	str	r3, [sp, #0]
   153ca:	230c      	movs	r3, #12
   153cc:	2110      	movs	r1, #16
   153ce:	f7f4 fc61 	bl	9c94 <wc_GmacVerify>
   153d2:	0003      	movs	r3, r0
   153d4:	33b4      	adds	r3, #180	; 0xb4
   153d6:	d001      	beq.n	153dc <gmac_test+0x210>
                    badT, sizeof(badT)) != AES_GCM_AUTH_E)
            return -8216;
   153d8:	4b44      	ldr	r3, [pc, #272]	; (154ec <gmac_test+0x320>)
   153da:	e055      	b.n	15488 <gmac_test+0x2bc>
        if (wc_GmacVerify(k2, sizeof(k2), iv2, sizeof(iv2), a2, sizeof(a2),
   153dc:	2358      	movs	r3, #88	; 0x58
   153de:	18fa      	adds	r2, r7, r3
   153e0:	2364      	movs	r3, #100	; 0x64
   153e2:	18f8      	adds	r0, r7, r3
   153e4:	230f      	movs	r3, #15
   153e6:	9303      	str	r3, [sp, #12]
   153e8:	2338      	movs	r3, #56	; 0x38
   153ea:	18fb      	adds	r3, r7, r3
   153ec:	9302      	str	r3, [sp, #8]
   153ee:	2310      	movs	r3, #16
   153f0:	9301      	str	r3, [sp, #4]
   153f2:	2348      	movs	r3, #72	; 0x48
   153f4:	18fb      	adds	r3, r7, r3
   153f6:	9300      	str	r3, [sp, #0]
   153f8:	230c      	movs	r3, #12
   153fa:	2110      	movs	r1, #16
   153fc:	f7f4 fc4a 	bl	9c94 <wc_GmacVerify>
   15400:	1e03      	subs	r3, r0, #0
   15402:	d001      	beq.n	15408 <gmac_test+0x23c>
                    t2, sizeof(t2)) != 0)
            return -8217;
   15404:	4b3a      	ldr	r3, [pc, #232]	; (154f0 <gmac_test+0x324>)
   15406:	e03f      	b.n	15488 <gmac_test+0x2bc>

        XMEMSET(tag, 0, sizeof(tag));
   15408:	2328      	movs	r3, #40	; 0x28
   1540a:	18fb      	adds	r3, r7, r3
   1540c:	2210      	movs	r2, #16
   1540e:	2100      	movs	r1, #0
   15410:	0018      	movs	r0, r3
   15412:	f010 f98a 	bl	2572a <memset>
        XMEMSET(iv, 0, sizeof(iv));
   15416:	1d3b      	adds	r3, r7, #4
   15418:	220c      	movs	r2, #12
   1541a:	2100      	movs	r1, #0
   1541c:	0018      	movs	r0, r3
   1541e:	f010 f984 	bl	2572a <memset>
        if (wc_Gmac(k1, sizeof(k1), iv, sizeof(iv), a1, sizeof(a1),
   15422:	1d3a      	adds	r2, r7, #4
   15424:	23a0      	movs	r3, #160	; 0xa0
   15426:	18f8      	adds	r0, r7, r3
   15428:	2310      	movs	r3, #16
   1542a:	18fb      	adds	r3, r7, r3
   1542c:	9304      	str	r3, [sp, #16]
   1542e:	2310      	movs	r3, #16
   15430:	9303      	str	r3, [sp, #12]
   15432:	2328      	movs	r3, #40	; 0x28
   15434:	18fb      	adds	r3, r7, r3
   15436:	9302      	str	r3, [sp, #8]
   15438:	2310      	movs	r3, #16
   1543a:	9301      	str	r3, [sp, #4]
   1543c:	2384      	movs	r3, #132	; 0x84
   1543e:	18fb      	adds	r3, r7, r3
   15440:	9300      	str	r3, [sp, #0]
   15442:	230c      	movs	r3, #12
   15444:	2110      	movs	r1, #16
   15446:	f7f4 fb81 	bl	9b4c <wc_Gmac>
   1544a:	1e03      	subs	r3, r0, #0
   1544c:	d001      	beq.n	15452 <gmac_test+0x286>
                    tag, sizeof(tag), &rng) != 0)
            return -8218;
   1544e:	4b29      	ldr	r3, [pc, #164]	; (154f4 <gmac_test+0x328>)
   15450:	e01a      	b.n	15488 <gmac_test+0x2bc>
        if (wc_GmacVerify(k1, sizeof(k1), iv, sizeof(iv), a1, sizeof(a1),
   15452:	1d3a      	adds	r2, r7, #4
   15454:	23a0      	movs	r3, #160	; 0xa0
   15456:	18f8      	adds	r0, r7, r3
   15458:	2310      	movs	r3, #16
   1545a:	9303      	str	r3, [sp, #12]
   1545c:	2328      	movs	r3, #40	; 0x28
   1545e:	18fb      	adds	r3, r7, r3
   15460:	9302      	str	r3, [sp, #8]
   15462:	2310      	movs	r3, #16
   15464:	9301      	str	r3, [sp, #4]
   15466:	2384      	movs	r3, #132	; 0x84
   15468:	18fb      	adds	r3, r7, r3
   1546a:	9300      	str	r3, [sp, #0]
   1546c:	230c      	movs	r3, #12
   1546e:	2110      	movs	r1, #16
   15470:	f7f4 fc10 	bl	9c94 <wc_GmacVerify>
   15474:	1e03      	subs	r3, r0, #0
   15476:	d001      	beq.n	1547c <gmac_test+0x2b0>
                    tag, sizeof(tag)) != 0)
            return -8219;
   15478:	4b1f      	ldr	r3, [pc, #124]	; (154f8 <gmac_test+0x32c>)
   1547a:	e005      	b.n	15488 <gmac_test+0x2bc>
        wc_FreeRng(&rng);
   1547c:	2310      	movs	r3, #16
   1547e:	18fb      	adds	r3, r7, r3
   15480:	0018      	movs	r0, r3
   15482:	f7f0 f80b 	bl	549c <wc_FreeRng>
    }
#endif /* WC_NO_RNG HAVE_SELFTEST */
#endif /* HAVE_FIPS */

    return 0;
   15486:	2300      	movs	r3, #0
}
   15488:	0018      	movs	r0, r3
   1548a:	46bd      	mov	sp, r7
   1548c:	b07a      	add	sp, #488	; 0x1e8
   1548e:	bd80      	pop	{r7, pc}
   15490:	fffffeb8 	.word	0xfffffeb8
   15494:	0002d690 	.word	0x0002d690
   15498:	fffffeac 	.word	0xfffffeac
   1549c:	0002d6a0 	.word	0x0002d6a0
   154a0:	fffffe9c 	.word	0xfffffe9c
   154a4:	0002d6ac 	.word	0x0002d6ac
   154a8:	fffffe8c 	.word	0xfffffe8c
   154ac:	0002d6bc 	.word	0x0002d6bc
   154b0:	fffffe7c 	.word	0xfffffe7c
   154b4:	0002d6cc 	.word	0x0002d6cc
   154b8:	fffffe70 	.word	0xfffffe70
   154bc:	0002d6dc 	.word	0x0002d6dc
   154c0:	fffffe60 	.word	0xfffffe60
   154c4:	0002d6e8 	.word	0x0002d6e8
   154c8:	fffffe50 	.word	0xfffffe50
   154cc:	0002d6f8 	.word	0x0002d6f8
   154d0:	ffffe958 	.word	0xffffe958
   154d4:	ffffe957 	.word	0xffffe957
   154d8:	fffffe30 	.word	0xfffffe30
   154dc:	0002d708 	.word	0x0002d708
   154e0:	20000010 	.word	0x20000010
   154e4:	ffffdfea 	.word	0xffffdfea
   154e8:	ffffdfe9 	.word	0xffffdfe9
   154ec:	ffffdfe8 	.word	0xffffdfe8
   154f0:	ffffdfe7 	.word	0xffffdfe7
   154f4:	ffffdfe6 	.word	0xffffdfe6
   154f8:	ffffdfe5 	.word	0xffffdfe5

000154fc <random_rng_test>:
#endif /* HAVE_IDEA */


#ifndef WC_NO_RNG
static int random_rng_test(void)
{
   154fc:	b580      	push	{r7, lr}
   154fe:	b08c      	sub	sp, #48	; 0x30
   15500:	af00      	add	r7, sp, #0
    WC_RNG rng;
    byte block[32];
    int ret, i;

#ifndef HAVE_FIPS
    ret = wc_InitRng_ex(&rng, HEAP_HINT, devId);
   15502:	4b47      	ldr	r3, [pc, #284]	; (15620 <random_rng_test+0x124>)
   15504:	681a      	ldr	r2, [r3, #0]
   15506:	2320      	movs	r3, #32
   15508:	18fb      	adds	r3, r7, r3
   1550a:	2100      	movs	r1, #0
   1550c:	0018      	movs	r0, r3
   1550e:	f7ef ff7f 	bl	5410 <wc_InitRng_ex>
   15512:	0003      	movs	r3, r0
   15514:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    ret = wc_InitRng(&rng);
#endif
    if (ret != 0) return -6300;
   15516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15518:	2b00      	cmp	r3, #0
   1551a:	d001      	beq.n	15520 <random_rng_test+0x24>
   1551c:	4b41      	ldr	r3, [pc, #260]	; (15624 <random_rng_test+0x128>)
   1551e:	e07b      	b.n	15618 <random_rng_test+0x11c>

    XMEMSET(block, 0, sizeof(block));
   15520:	003b      	movs	r3, r7
   15522:	2220      	movs	r2, #32
   15524:	2100      	movs	r1, #0
   15526:	0018      	movs	r0, r3
   15528:	f010 f8ff 	bl	2572a <memset>

    ret = wc_RNG_GenerateBlock(&rng, block, sizeof(block));
   1552c:	0039      	movs	r1, r7
   1552e:	2320      	movs	r3, #32
   15530:	18fb      	adds	r3, r7, r3
   15532:	2220      	movs	r2, #32
   15534:	0018      	movs	r0, r3
   15536:	f7ef ff7f 	bl	5438 <wc_RNG_GenerateBlock>
   1553a:	0003      	movs	r3, r0
   1553c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != 0) {
   1553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15540:	2b00      	cmp	r3, #0
   15542:	d002      	beq.n	1554a <random_rng_test+0x4e>
        ret = -6301;
   15544:	4b38      	ldr	r3, [pc, #224]	; (15628 <random_rng_test+0x12c>)
   15546:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exit;
   15548:	e060      	b.n	1560c <random_rng_test+0x110>
    }

    /* Check for 0's */
    for (i=0; i<(int)sizeof(block); i++) {
   1554a:	2300      	movs	r3, #0
   1554c:	62bb      	str	r3, [r7, #40]	; 0x28
   1554e:	e00b      	b.n	15568 <random_rng_test+0x6c>
        if (block[i] == 0) {
   15550:	003a      	movs	r2, r7
   15552:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15554:	18d3      	adds	r3, r2, r3
   15556:	781b      	ldrb	r3, [r3, #0]
   15558:	2b00      	cmp	r3, #0
   1555a:	d102      	bne.n	15562 <random_rng_test+0x66>
            ret++;
   1555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1555e:	3301      	adds	r3, #1
   15560:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = -6301;
        goto exit;
    }

    /* Check for 0's */
    for (i=0; i<(int)sizeof(block); i++) {
   15562:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15564:	3301      	adds	r3, #1
   15566:	62bb      	str	r3, [r7, #40]	; 0x28
   15568:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1556a:	2b1f      	cmp	r3, #31
   1556c:	ddf0      	ble.n	15550 <random_rng_test+0x54>
        if (block[i] == 0) {
            ret++;
        }
    }
    /* All zeros count check */
    if (ret >= (int)sizeof(block)) {
   1556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15570:	2b1f      	cmp	r3, #31
   15572:	dd02      	ble.n	1557a <random_rng_test+0x7e>
        ret = -6302;
   15574:	4b2d      	ldr	r3, [pc, #180]	; (1562c <random_rng_test+0x130>)
   15576:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exit;
   15578:	e048      	b.n	1560c <random_rng_test+0x110>
    }

    ret = wc_RNG_GenerateByte(&rng, block);
   1557a:	003a      	movs	r2, r7
   1557c:	2320      	movs	r3, #32
   1557e:	18fb      	adds	r3, r7, r3
   15580:	0011      	movs	r1, r2
   15582:	0018      	movs	r0, r3
   15584:	f7ef ff7a 	bl	547c <wc_RNG_GenerateByte>
   15588:	0003      	movs	r3, r0
   1558a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != 0) {
   1558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1558e:	2b00      	cmp	r3, #0
   15590:	d002      	beq.n	15598 <random_rng_test+0x9c>
        ret = -6303;
   15592:	4b27      	ldr	r3, [pc, #156]	; (15630 <random_rng_test+0x134>)
   15594:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exit;
   15596:	e039      	b.n	1560c <random_rng_test+0x110>
    }

    /* Parameter validation testing. */
    ret = wc_RNG_GenerateBlock(NULL, block, sizeof(block));
   15598:	003b      	movs	r3, r7
   1559a:	2220      	movs	r2, #32
   1559c:	0019      	movs	r1, r3
   1559e:	2000      	movs	r0, #0
   155a0:	f7ef ff4a 	bl	5438 <wc_RNG_GenerateBlock>
   155a4:	0003      	movs	r3, r0
   155a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != BAD_FUNC_ARG) {
   155a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   155aa:	33ad      	adds	r3, #173	; 0xad
   155ac:	d002      	beq.n	155b4 <random_rng_test+0xb8>
        ret = -6304;
   155ae:	4b21      	ldr	r3, [pc, #132]	; (15634 <random_rng_test+0x138>)
   155b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exit;
   155b2:	e02b      	b.n	1560c <random_rng_test+0x110>
    }
    ret = wc_RNG_GenerateBlock(&rng, NULL, sizeof(block));
   155b4:	2320      	movs	r3, #32
   155b6:	18fb      	adds	r3, r7, r3
   155b8:	2220      	movs	r2, #32
   155ba:	2100      	movs	r1, #0
   155bc:	0018      	movs	r0, r3
   155be:	f7ef ff3b 	bl	5438 <wc_RNG_GenerateBlock>
   155c2:	0003      	movs	r3, r0
   155c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != BAD_FUNC_ARG) {
   155c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   155c8:	33ad      	adds	r3, #173	; 0xad
   155ca:	d002      	beq.n	155d2 <random_rng_test+0xd6>
        ret = -6305;
   155cc:	4b1a      	ldr	r3, [pc, #104]	; (15638 <random_rng_test+0x13c>)
   155ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exit;
   155d0:	e01c      	b.n	1560c <random_rng_test+0x110>
    }

    ret = wc_RNG_GenerateByte(NULL, block);
   155d2:	003b      	movs	r3, r7
   155d4:	0019      	movs	r1, r3
   155d6:	2000      	movs	r0, #0
   155d8:	f7ef ff50 	bl	547c <wc_RNG_GenerateByte>
   155dc:	0003      	movs	r3, r0
   155de:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != BAD_FUNC_ARG) {
   155e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   155e2:	33ad      	adds	r3, #173	; 0xad
   155e4:	d002      	beq.n	155ec <random_rng_test+0xf0>
        ret = -6306;
   155e6:	4b15      	ldr	r3, [pc, #84]	; (1563c <random_rng_test+0x140>)
   155e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exit;
   155ea:	e00f      	b.n	1560c <random_rng_test+0x110>
    }
    ret = wc_RNG_GenerateByte(&rng, NULL);
   155ec:	2320      	movs	r3, #32
   155ee:	18fb      	adds	r3, r7, r3
   155f0:	2100      	movs	r1, #0
   155f2:	0018      	movs	r0, r3
   155f4:	f7ef ff42 	bl	547c <wc_RNG_GenerateByte>
   155f8:	0003      	movs	r3, r0
   155fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != BAD_FUNC_ARG) {
   155fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   155fe:	33ad      	adds	r3, #173	; 0xad
   15600:	d002      	beq.n	15608 <random_rng_test+0x10c>
        ret = -6307;
   15602:	4b0f      	ldr	r3, [pc, #60]	; (15640 <random_rng_test+0x144>)
   15604:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exit;
   15606:	e001      	b.n	1560c <random_rng_test+0x110>
    }

    ret = 0;
   15608:	2300      	movs	r3, #0
   1560a:	62fb      	str	r3, [r7, #44]	; 0x2c
exit:
    /* Make sure and free RNG */
    wc_FreeRng(&rng);
   1560c:	2320      	movs	r3, #32
   1560e:	18fb      	adds	r3, r7, r3
   15610:	0018      	movs	r0, r3
   15612:	f7ef ff43 	bl	549c <wc_FreeRng>

    return ret;
   15616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   15618:	0018      	movs	r0, r3
   1561a:	46bd      	mov	sp, r7
   1561c:	b00c      	add	sp, #48	; 0x30
   1561e:	bd80      	pop	{r7, pc}
   15620:	20000010 	.word	0x20000010
   15624:	ffffe764 	.word	0xffffe764
   15628:	ffffe763 	.word	0xffffe763
   1562c:	ffffe762 	.word	0xffffe762
   15630:	ffffe761 	.word	0xffffe761
   15634:	ffffe760 	.word	0xffffe760
   15638:	ffffe75f 	.word	0xffffe75f
   1563c:	ffffe75e 	.word	0xffffe75e
   15640:	ffffe75d 	.word	0xffffe75d

00015644 <random_test>:
}

#else

int random_test(void)
{
   15644:	b580      	push	{r7, lr}
   15646:	af00      	add	r7, sp, #0
    /* Basic RNG generate block test */
    return random_rng_test();
   15648:	f7ff ff58 	bl	154fc <random_rng_test>
   1564c:	0003      	movs	r3, r0
}
   1564e:	0018      	movs	r0, r3
   15650:	46bd      	mov	sp, r7
   15652:	bd80      	pop	{r7, pc}

00015654 <ecc_test_vector_item>:
    word32      sSz;
#endif
} eccVector;

static int ecc_test_vector_item(const eccVector* vector)
{
   15654:	b590      	push	{r4, r7, lr}
   15656:	4c6b      	ldr	r4, [pc, #428]	; (15804 <ecc_test_vector_item+0x1b0>)
   15658:	44a5      	add	sp, r4
   1565a:	af02      	add	r7, sp, #8
   1565c:	6078      	str	r0, [r7, #4]
    int ret = 0, verify = 0;
   1565e:	2300      	movs	r3, #0
   15660:	4a69      	ldr	r2, [pc, #420]	; (15808 <ecc_test_vector_item+0x1b4>)
   15662:	18ba      	adds	r2, r7, r2
   15664:	6013      	str	r3, [r2, #0]
   15666:	2300      	movs	r3, #0
   15668:	2284      	movs	r2, #132	; 0x84
   1566a:	00d2      	lsls	r2, r2, #3
   1566c:	18ba      	adds	r2, r7, r2
   1566e:	6013      	str	r3, [r2, #0]
#if !defined(NO_ASN) && !defined(HAVE_SELFTEST)
    word32  sigRawSz;
    DECLARE_VAR(sigRaw, byte, ECC_SIG_SIZE, HEAP_HINT);
#endif

    ret = wc_ecc_init_ex(&userA, HEAP_HINT, devId);
   15670:	4b66      	ldr	r3, [pc, #408]	; (1580c <ecc_test_vector_item+0x1b8>)
   15672:	681a      	ldr	r2, [r3, #0]
   15674:	23a4      	movs	r3, #164	; 0xa4
   15676:	18fb      	adds	r3, r7, r3
   15678:	2100      	movs	r1, #0
   1567a:	0018      	movs	r0, r3
   1567c:	f7f8 fc7a 	bl	df74 <wc_ecc_init_ex>
   15680:	0003      	movs	r3, r0
   15682:	4a61      	ldr	r2, [pc, #388]	; (15808 <ecc_test_vector_item+0x1b4>)
   15684:	18ba      	adds	r2, r7, r2
   15686:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   15688:	4b5f      	ldr	r3, [pc, #380]	; (15808 <ecc_test_vector_item+0x1b4>)
   1568a:	18fb      	adds	r3, r7, r3
   1568c:	681b      	ldr	r3, [r3, #0]
   1568e:	2b00      	cmp	r3, #0
   15690:	d003      	beq.n	1569a <ecc_test_vector_item+0x46>
        FREE_VAR(sig, HEAP_HINT);
        return ret;
   15692:	4b5d      	ldr	r3, [pc, #372]	; (15808 <ecc_test_vector_item+0x1b4>)
   15694:	18fb      	adds	r3, r7, r3
   15696:	681b      	ldr	r3, [r3, #0]
   15698:	e0af      	b.n	157fa <ecc_test_vector_item+0x1a6>
    }

    ret = wc_ecc_import_raw(&userA, vector->Qx, vector->Qy,
   1569a:	687b      	ldr	r3, [r7, #4]
   1569c:	6859      	ldr	r1, [r3, #4]
   1569e:	687b      	ldr	r3, [r7, #4]
   156a0:	689a      	ldr	r2, [r3, #8]
   156a2:	687b      	ldr	r3, [r7, #4]
   156a4:	68dc      	ldr	r4, [r3, #12]
   156a6:	687b      	ldr	r3, [r7, #4]
   156a8:	699b      	ldr	r3, [r3, #24]
   156aa:	20a4      	movs	r0, #164	; 0xa4
   156ac:	1838      	adds	r0, r7, r0
   156ae:	9300      	str	r3, [sp, #0]
   156b0:	0023      	movs	r3, r4
   156b2:	f7f9 fdc3 	bl	f23c <wc_ecc_import_raw>
   156b6:	0003      	movs	r3, r0
   156b8:	4a53      	ldr	r2, [pc, #332]	; (15808 <ecc_test_vector_item+0x1b4>)
   156ba:	18ba      	adds	r2, r7, r2
   156bc:	6013      	str	r3, [r2, #0]
                                                  vector->d, vector->curveName);
    if (ret != 0)
   156be:	4b52      	ldr	r3, [pc, #328]	; (15808 <ecc_test_vector_item+0x1b4>)
   156c0:	18fb      	adds	r3, r7, r3
   156c2:	681b      	ldr	r3, [r3, #0]
   156c4:	2b00      	cmp	r3, #0
   156c6:	d000      	beq.n	156ca <ecc_test_vector_item+0x76>
   156c8:	e088      	b.n	157dc <ecc_test_vector_item+0x188>
        goto done;

    XMEMSET(sig, 0, ECC_SIG_SIZE);
   156ca:	2358      	movs	r3, #88	; 0x58
   156cc:	18fb      	adds	r3, r7, r3
   156ce:	224a      	movs	r2, #74	; 0x4a
   156d0:	2100      	movs	r1, #0
   156d2:	0018      	movs	r0, r3
   156d4:	f010 f829 	bl	2572a <memset>
    sigSz = ECC_SIG_SIZE;
   156d8:	234a      	movs	r3, #74	; 0x4a
   156da:	4a4d      	ldr	r2, [pc, #308]	; (15810 <ecc_test_vector_item+0x1bc>)
   156dc:	18ba      	adds	r2, r7, r2
   156de:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_rs_to_sig(vector->R, vector->S, sig, &sigSz);
   156e0:	687b      	ldr	r3, [r7, #4]
   156e2:	6918      	ldr	r0, [r3, #16]
   156e4:	687b      	ldr	r3, [r7, #4]
   156e6:	6959      	ldr	r1, [r3, #20]
   156e8:	4b49      	ldr	r3, [pc, #292]	; (15810 <ecc_test_vector_item+0x1bc>)
   156ea:	18fb      	adds	r3, r7, r3
   156ec:	2258      	movs	r2, #88	; 0x58
   156ee:	18ba      	adds	r2, r7, r2
   156f0:	f7f9 fb22 	bl	ed38 <wc_ecc_rs_to_sig>
   156f4:	0003      	movs	r3, r0
   156f6:	4a44      	ldr	r2, [pc, #272]	; (15808 <ecc_test_vector_item+0x1b4>)
   156f8:	18ba      	adds	r2, r7, r2
   156fa:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   156fc:	4b42      	ldr	r3, [pc, #264]	; (15808 <ecc_test_vector_item+0x1b4>)
   156fe:	18fb      	adds	r3, r7, r3
   15700:	681b      	ldr	r3, [r3, #0]
   15702:	2b00      	cmp	r3, #0
   15704:	d16c      	bne.n	157e0 <ecc_test_vector_item+0x18c>
        goto done;

#if !defined(NO_ASN) && !defined(HAVE_SELFTEST)
    XMEMSET(sigRaw, 0, ECC_SIG_SIZE);
   15706:	2308      	movs	r3, #8
   15708:	18fb      	adds	r3, r7, r3
   1570a:	224a      	movs	r2, #74	; 0x4a
   1570c:	2100      	movs	r1, #0
   1570e:	0018      	movs	r0, r3
   15710:	f010 f80b 	bl	2572a <memset>
    sigRawSz = ECC_SIG_SIZE;
   15714:	234a      	movs	r3, #74	; 0x4a
   15716:	657b      	str	r3, [r7, #84]	; 0x54
    ret = wc_ecc_rs_raw_to_sig(vector->r, vector->rSz, vector->s, vector->sSz,
   15718:	687b      	ldr	r3, [r7, #4]
   1571a:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1571c:	687b      	ldr	r3, [r7, #4]
   1571e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   15720:	687b      	ldr	r3, [r7, #4]
   15722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15724:	687b      	ldr	r3, [r7, #4]
   15726:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   15728:	2354      	movs	r3, #84	; 0x54
   1572a:	18fb      	adds	r3, r7, r3
   1572c:	9301      	str	r3, [sp, #4]
   1572e:	2308      	movs	r3, #8
   15730:	18fb      	adds	r3, r7, r3
   15732:	9300      	str	r3, [sp, #0]
   15734:	0023      	movs	r3, r4
   15736:	f7f9 fbb1 	bl	ee9c <wc_ecc_rs_raw_to_sig>
   1573a:	0003      	movs	r3, r0
   1573c:	4a32      	ldr	r2, [pc, #200]	; (15808 <ecc_test_vector_item+0x1b4>)
   1573e:	18ba      	adds	r2, r7, r2
   15740:	6013      	str	r3, [r2, #0]
                                                             sigRaw, &sigRawSz);
    if (ret != 0)
   15742:	4b31      	ldr	r3, [pc, #196]	; (15808 <ecc_test_vector_item+0x1b4>)
   15744:	18fb      	adds	r3, r7, r3
   15746:	681b      	ldr	r3, [r3, #0]
   15748:	2b00      	cmp	r3, #0
   1574a:	d14b      	bne.n	157e4 <ecc_test_vector_item+0x190>
        goto done;

    if (sigSz != sigRawSz || XMEMCMP(sig, sigRaw, sigSz) != 0) {
   1574c:	4b30      	ldr	r3, [pc, #192]	; (15810 <ecc_test_vector_item+0x1bc>)
   1574e:	18fb      	adds	r3, r7, r3
   15750:	681a      	ldr	r2, [r3, #0]
   15752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15754:	429a      	cmp	r2, r3
   15756:	d10b      	bne.n	15770 <ecc_test_vector_item+0x11c>
   15758:	4b2d      	ldr	r3, [pc, #180]	; (15810 <ecc_test_vector_item+0x1bc>)
   1575a:	18fb      	adds	r3, r7, r3
   1575c:	681a      	ldr	r2, [r3, #0]
   1575e:	2308      	movs	r3, #8
   15760:	18f9      	adds	r1, r7, r3
   15762:	2358      	movs	r3, #88	; 0x58
   15764:	18fb      	adds	r3, r7, r3
   15766:	0018      	movs	r0, r3
   15768:	f00f ffb2 	bl	256d0 <memcmp>
   1576c:	1e03      	subs	r3, r0, #0
   1576e:	d004      	beq.n	1577a <ecc_test_vector_item+0x126>
        ret = -8308;
   15770:	4b28      	ldr	r3, [pc, #160]	; (15814 <ecc_test_vector_item+0x1c0>)
   15772:	4a25      	ldr	r2, [pc, #148]	; (15808 <ecc_test_vector_item+0x1b4>)
   15774:	18ba      	adds	r2, r7, r2
   15776:	6013      	str	r3, [r2, #0]
        goto done;
   15778:	e037      	b.n	157ea <ecc_test_vector_item+0x196>

    do {
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &userA.asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
    #endif
        if (ret == 0)
   1577a:	4b23      	ldr	r3, [pc, #140]	; (15808 <ecc_test_vector_item+0x1b4>)
   1577c:	18fb      	adds	r3, r7, r3
   1577e:	681b      	ldr	r3, [r3, #0]
   15780:	2b00      	cmp	r3, #0
   15782:	d116      	bne.n	157b2 <ecc_test_vector_item+0x15e>
            ret = wc_ecc_verify_hash(sig, sigSz, (byte*)vector->msg,
   15784:	4b22      	ldr	r3, [pc, #136]	; (15810 <ecc_test_vector_item+0x1bc>)
   15786:	18fb      	adds	r3, r7, r3
   15788:	6819      	ldr	r1, [r3, #0]
   1578a:	687b      	ldr	r3, [r7, #4]
   1578c:	681a      	ldr	r2, [r3, #0]
   1578e:	687b      	ldr	r3, [r7, #4]
   15790:	69dc      	ldr	r4, [r3, #28]
   15792:	2358      	movs	r3, #88	; 0x58
   15794:	18f8      	adds	r0, r7, r3
   15796:	23a4      	movs	r3, #164	; 0xa4
   15798:	18fb      	adds	r3, r7, r3
   1579a:	9301      	str	r3, [sp, #4]
   1579c:	2384      	movs	r3, #132	; 0x84
   1579e:	00db      	lsls	r3, r3, #3
   157a0:	18fb      	adds	r3, r7, r3
   157a2:	9300      	str	r3, [sp, #0]
   157a4:	0023      	movs	r3, r4
   157a6:	f7f8 fdc9 	bl	e33c <wc_ecc_verify_hash>
   157aa:	0003      	movs	r3, r0
   157ac:	4a16      	ldr	r2, [pc, #88]	; (15808 <ecc_test_vector_item+0x1b4>)
   157ae:	18ba      	adds	r2, r7, r2
   157b0:	6013      	str	r3, [r2, #0]
                                               vector->msgLen, &verify, &userA);
    } while (ret == WC_PENDING_E);
   157b2:	4b15      	ldr	r3, [pc, #84]	; (15808 <ecc_test_vector_item+0x1b4>)
   157b4:	18fb      	adds	r3, r7, r3
   157b6:	681b      	ldr	r3, [r3, #0]
   157b8:	336c      	adds	r3, #108	; 0x6c
   157ba:	d0de      	beq.n	1577a <ecc_test_vector_item+0x126>
    if (ret != 0)
   157bc:	4b12      	ldr	r3, [pc, #72]	; (15808 <ecc_test_vector_item+0x1b4>)
   157be:	18fb      	adds	r3, r7, r3
   157c0:	681b      	ldr	r3, [r3, #0]
   157c2:	2b00      	cmp	r3, #0
   157c4:	d110      	bne.n	157e8 <ecc_test_vector_item+0x194>
        goto done;

    if (verify != 1)
   157c6:	2384      	movs	r3, #132	; 0x84
   157c8:	00db      	lsls	r3, r3, #3
   157ca:	18fb      	adds	r3, r7, r3
   157cc:	681b      	ldr	r3, [r3, #0]
   157ce:	2b01      	cmp	r3, #1
   157d0:	d00b      	beq.n	157ea <ecc_test_vector_item+0x196>
        ret = -8309;
   157d2:	4b11      	ldr	r3, [pc, #68]	; (15818 <ecc_test_vector_item+0x1c4>)
   157d4:	4a0c      	ldr	r2, [pc, #48]	; (15808 <ecc_test_vector_item+0x1b4>)
   157d6:	18ba      	adds	r2, r7, r2
   157d8:	6013      	str	r3, [r2, #0]
   157da:	e006      	b.n	157ea <ecc_test_vector_item+0x196>
    }

    ret = wc_ecc_import_raw(&userA, vector->Qx, vector->Qy,
                                                  vector->d, vector->curveName);
    if (ret != 0)
        goto done;
   157dc:	46c0      	nop			; (mov r8, r8)
   157de:	e004      	b.n	157ea <ecc_test_vector_item+0x196>

    XMEMSET(sig, 0, ECC_SIG_SIZE);
    sigSz = ECC_SIG_SIZE;
    ret = wc_ecc_rs_to_sig(vector->R, vector->S, sig, &sigSz);
    if (ret != 0)
        goto done;
   157e0:	46c0      	nop			; (mov r8, r8)
   157e2:	e002      	b.n	157ea <ecc_test_vector_item+0x196>
    XMEMSET(sigRaw, 0, ECC_SIG_SIZE);
    sigRawSz = ECC_SIG_SIZE;
    ret = wc_ecc_rs_raw_to_sig(vector->r, vector->rSz, vector->s, vector->sSz,
                                                             sigRaw, &sigRawSz);
    if (ret != 0)
        goto done;
   157e4:	46c0      	nop			; (mov r8, r8)
   157e6:	e000      	b.n	157ea <ecc_test_vector_item+0x196>
        if (ret == 0)
            ret = wc_ecc_verify_hash(sig, sigSz, (byte*)vector->msg,
                                               vector->msgLen, &verify, &userA);
    } while (ret == WC_PENDING_E);
    if (ret != 0)
        goto done;
   157e8:	46c0      	nop			; (mov r8, r8)

    if (verify != 1)
        ret = -8309;

done:
    wc_ecc_free(&userA);
   157ea:	23a4      	movs	r3, #164	; 0xa4
   157ec:	18fb      	adds	r3, r7, r3
   157ee:	0018      	movs	r0, r3
   157f0:	f7f8 fd8a 	bl	e308 <wc_ecc_free>
#if !defined(NO_ASN) && !defined(HAVE_SELFTEST)
    FREE_VAR(sigRaw, HEAP_HINT);
#endif
    FREE_VAR(sig, HEAP_HINT);

    return ret;
   157f4:	4b04      	ldr	r3, [pc, #16]	; (15808 <ecc_test_vector_item+0x1b4>)
   157f6:	18fb      	adds	r3, r7, r3
   157f8:	681b      	ldr	r3, [r3, #0]
}
   157fa:	0018      	movs	r0, r3
   157fc:	46bd      	mov	sp, r7
   157fe:	4b07      	ldr	r3, [pc, #28]	; (1581c <ecc_test_vector_item+0x1c8>)
   15800:	449d      	add	sp, r3
   15802:	bd90      	pop	{r4, r7, pc}
   15804:	fffffbcc 	.word	0xfffffbcc
   15808:	00000424 	.word	0x00000424
   1580c:	20000010 	.word	0x20000010
   15810:	0000041c 	.word	0x0000041c
   15814:	ffffdf8c 	.word	0xffffdf8c
   15818:	ffffdf8b 	.word	0xffffdf8b
   1581c:	0000042c 	.word	0x0000042c

00015820 <ecc_test_vector>:

static int ecc_test_vector(int keySize)
{
   15820:	b580      	push	{r7, lr}
   15822:	b090      	sub	sp, #64	; 0x40
   15824:	af00      	add	r7, sp, #0
   15826:	6078      	str	r0, [r7, #4]
    int     ret;
    eccVector vec;

    XMEMSET(&vec, 0, sizeof(vec));
   15828:	2308      	movs	r3, #8
   1582a:	18fb      	adds	r3, r7, r3
   1582c:	2234      	movs	r2, #52	; 0x34
   1582e:	2100      	movs	r1, #0
   15830:	0018      	movs	r0, r3
   15832:	f00f ff7a 	bl	2572a <memset>
    vec.keySize = (word32)keySize;
   15836:	687a      	ldr	r2, [r7, #4]
   15838:	2308      	movs	r3, #8
   1583a:	18fb      	adds	r3, r7, r3
   1583c:	621a      	str	r2, [r3, #32]

    switch(keySize) {
   1583e:	687b      	ldr	r3, [r7, #4]
   15840:	2b20      	cmp	r3, #32
   15842:	d13b      	bne.n	158bc <ecc_test_vector+0x9c>

#if !defined(NO_ECC256) || defined(HAVE_ALL_CURVES)
    case 32:
        /* first [P-256,SHA-1] vector from FIPS 186-3 NIST vectors */
        #if 1
            vec.msg = "\xa3\xf9\x1a\xe2\x1b\xa6\xb3\x03\x98\x64\x47\x2f\x18\x41\x44\xc6\xaf\x62\xcd\x0e";
   15844:	2308      	movs	r3, #8
   15846:	18fb      	adds	r3, r7, r3
   15848:	4a21      	ldr	r2, [pc, #132]	; (158d0 <ecc_test_vector+0xb0>)
   1584a:	601a      	str	r2, [r3, #0]
            vec.msgLen = 20;
   1584c:	2308      	movs	r3, #8
   1584e:	18fb      	adds	r3, r7, r3
   15850:	2214      	movs	r2, #20
   15852:	61da      	str	r2, [r3, #28]
                "\x5f\xff\xc0\xee\x15\x03\x94\xd6\x1f\x3d\xfe\xcb\xcd\xbf\x6f\x5a"
                "\x73\x38\xd0\xbe\x3f\x2a\x77\x34\x51\x98\x3e\xba\xeb\x48\xf6\x73"
                "\x8f\xc8\x95\xdf\x35\x7e\x1a\x48\xa6\x53\xbb\x35\x5a\x31\xa1\xb4"
            vec.msgLen = 128;
        #endif
        vec.Qx  = "fa2737fb93488d19caef11ae7faf6b7f4bcd67b286e3fc54e8a65c2b74aeccb0";
   15854:	2308      	movs	r3, #8
   15856:	18fb      	adds	r3, r7, r3
   15858:	4a1e      	ldr	r2, [pc, #120]	; (158d4 <ecc_test_vector+0xb4>)
   1585a:	605a      	str	r2, [r3, #4]
        vec.Qy  = "d4ccd6dae698208aa8c3a6f39e45510d03be09b2f124bfc067856c324f9b4d09";
   1585c:	2308      	movs	r3, #8
   1585e:	18fb      	adds	r3, r7, r3
   15860:	4a1d      	ldr	r2, [pc, #116]	; (158d8 <ecc_test_vector+0xb8>)
   15862:	609a      	str	r2, [r3, #8]
        vec.d   = "be34baa8d040a3b991f9075b56ba292f755b90e4b6dc10dad36715c33cfdac25";
   15864:	2308      	movs	r3, #8
   15866:	18fb      	adds	r3, r7, r3
   15868:	4a1c      	ldr	r2, [pc, #112]	; (158dc <ecc_test_vector+0xbc>)
   1586a:	60da      	str	r2, [r3, #12]
        vec.R   = "2b826f5d44e2d0b6de531ad96b51e8f0c56fdfead3c236892e4d84eacfc3b75c";
   1586c:	2308      	movs	r3, #8
   1586e:	18fb      	adds	r3, r7, r3
   15870:	4a1b      	ldr	r2, [pc, #108]	; (158e0 <ecc_test_vector+0xc0>)
   15872:	611a      	str	r2, [r3, #16]
        vec.S   = "a2248b62c03db35a7cd63e8a120a3521a89d3d2f61ff99035a2148ae32e3a248";
   15874:	2308      	movs	r3, #8
   15876:	18fb      	adds	r3, r7, r3
   15878:	4a1a      	ldr	r2, [pc, #104]	; (158e4 <ecc_test_vector+0xc4>)
   1587a:	615a      	str	r2, [r3, #20]
    #ifndef NO_ASN
        vec.r   = (byte*)"\x2b\x82\x6f\x5d\x44\xe2\xd0\xb6\xde\x53\x1a\xd9"
   1587c:	2308      	movs	r3, #8
   1587e:	18fb      	adds	r3, r7, r3
   15880:	4a19      	ldr	r2, [pc, #100]	; (158e8 <ecc_test_vector+0xc8>)
   15882:	625a      	str	r2, [r3, #36]	; 0x24
                         "\x6b\x51\xe8\xf0\xc5\x6f\xdf\xea\xd3\xc2\x36\x89"
                         "\x2e\x4d\x84\xea\xcf\xc3\xb7\x5c";
        vec.rSz = 32;
   15884:	2308      	movs	r3, #8
   15886:	18fb      	adds	r3, r7, r3
   15888:	2220      	movs	r2, #32
   1588a:	629a      	str	r2, [r3, #40]	; 0x28
        vec.s   = (byte*)"\xa2\x24\x8b\x62\xc0\x3d\xb3\x5a\x7c\xd6\x3e\x8a"
   1588c:	2308      	movs	r3, #8
   1588e:	18fb      	adds	r3, r7, r3
   15890:	4a16      	ldr	r2, [pc, #88]	; (158ec <ecc_test_vector+0xcc>)
   15892:	62da      	str	r2, [r3, #44]	; 0x2c
                         "\x12\x0a\x35\x21\xa8\x9d\x3d\x2f\x61\xff\x99\x03"
                         "\x5a\x21\x48\xae\x32\xe3\xa2\x48";
        vec.sSz = 32;
   15894:	2308      	movs	r3, #8
   15896:	18fb      	adds	r3, r7, r3
   15898:	2220      	movs	r2, #32
   1589a:	631a      	str	r2, [r3, #48]	; 0x30
    #endif
        vec.curveName = "SECP256R1";
   1589c:	2308      	movs	r3, #8
   1589e:	18fb      	adds	r3, r7, r3
   158a0:	4a13      	ldr	r2, [pc, #76]	; (158f0 <ecc_test_vector+0xd0>)
   158a2:	619a      	str	r2, [r3, #24]
        break;
   158a4:	46c0      	nop			; (mov r8, r8)
#endif /* HAVE_ECC521 */
    default:
        return NOT_COMPILED_IN; /* Invalid key size / Not supported */
    }; /* Switch */

    ret = ecc_test_vector_item(&vec);
   158a6:	2308      	movs	r3, #8
   158a8:	18fb      	adds	r3, r7, r3
   158aa:	0018      	movs	r0, r3
   158ac:	f7ff fed2 	bl	15654 <ecc_test_vector_item>
   158b0:	0003      	movs	r3, r0
   158b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (ret < 0) {
   158b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   158b6:	2b00      	cmp	r3, #0
   158b8:	da05      	bge.n	158c6 <ecc_test_vector+0xa6>
   158ba:	e002      	b.n	158c2 <ecc_test_vector+0xa2>
        vec.sSz = 66;
    #endif
        break;
#endif /* HAVE_ECC521 */
    default:
        return NOT_COMPILED_IN; /* Invalid key size / Not supported */
   158bc:	23ae      	movs	r3, #174	; 0xae
   158be:	425b      	negs	r3, r3
   158c0:	e002      	b.n	158c8 <ecc_test_vector+0xa8>
    }; /* Switch */

    ret = ecc_test_vector_item(&vec);
    if (ret < 0) {
        return ret;
   158c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   158c4:	e000      	b.n	158c8 <ecc_test_vector+0xa8>
    }

    return 0;
   158c6:	2300      	movs	r3, #0
}
   158c8:	0018      	movs	r0, r3
   158ca:	46bd      	mov	sp, r7
   158cc:	b010      	add	sp, #64	; 0x40
   158ce:	bd80      	pop	{r7, pc}
   158d0:	0002d718 	.word	0x0002d718
   158d4:	0002d730 	.word	0x0002d730
   158d8:	0002d774 	.word	0x0002d774
   158dc:	0002d7b8 	.word	0x0002d7b8
   158e0:	0002d7fc 	.word	0x0002d7fc
   158e4:	0002d840 	.word	0x0002d840
   158e8:	0002d884 	.word	0x0002d884
   158ec:	0002d8a8 	.word	0x0002d8a8
   158f0:	0002d8cc 	.word	0x0002d8cc

000158f4 <ecc_test_make_pub>:
#endif /* HAVE_ECC_VECTOR_TEST */

#ifdef HAVE_ECC_KEY_IMPORT
/* returns 0 on success */
static int ecc_test_make_pub(WC_RNG* rng)
{
   158f4:	b590      	push	{r4, r7, lr}
   158f6:	4ce5      	ldr	r4, [pc, #916]	; (15c8c <ecc_test_make_pub+0x398>)
   158f8:	44a5      	add	sp, r4
   158fa:	af02      	add	r7, sp, #8
   158fc:	6078      	str	r0, [r7, #4]
    ecc_key key;
    unsigned char* exportBuf = NULL;
   158fe:	2300      	movs	r3, #0
   15900:	4ae3      	ldr	r2, [pc, #908]	; (15c90 <ecc_test_make_pub+0x39c>)
   15902:	18ba      	adds	r2, r7, r2
   15904:	6013      	str	r3, [r2, #0]
    unsigned char* tmp = NULL;
   15906:	2300      	movs	r3, #0
   15908:	22e6      	movs	r2, #230	; 0xe6
   1590a:	00d2      	lsls	r2, r2, #3
   1590c:	18ba      	adds	r2, r7, r2
   1590e:	6013      	str	r3, [r2, #0]
    unsigned char msg[] = "test wolfSSL ECC public gen";
   15910:	4be0      	ldr	r3, [pc, #896]	; (15c94 <ecc_test_make_pub+0x3a0>)
   15912:	22e8      	movs	r2, #232	; 0xe8
   15914:	00d2      	lsls	r2, r2, #3
   15916:	4694      	mov	ip, r2
   15918:	44bc      	add	ip, r7
   1591a:	4463      	add	r3, ip
   1591c:	4ade      	ldr	r2, [pc, #888]	; (15c98 <ecc_test_make_pub+0x3a4>)
   1591e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15920:	c313      	stmia	r3!, {r0, r1, r4}
   15922:	ca13      	ldmia	r2!, {r0, r1, r4}
   15924:	c313      	stmia	r3!, {r0, r1, r4}
   15926:	6812      	ldr	r2, [r2, #0]
   15928:	601a      	str	r2, [r3, #0]
    word32 x, tmpSz;
    int ret = 0;
   1592a:	2300      	movs	r3, #0
   1592c:	4adb      	ldr	r2, [pc, #876]	; (15c9c <ecc_test_make_pub+0x3a8>)
   1592e:	18ba      	adds	r2, r7, r2
   15930:	6013      	str	r3, [r2, #0]
    ecc_point* pubPoint = NULL;
   15932:	2300      	movs	r3, #0
   15934:	22e7      	movs	r2, #231	; 0xe7
   15936:	00d2      	lsls	r2, r2, #3
   15938:	18ba      	adds	r2, r7, r2
   1593a:	6013      	str	r3, [r2, #0]
#if defined(HAVE_ECC_DHE) && defined(HAVE_ECC_KEY_EXPORT)
    ecc_key pub;
#endif
#ifdef HAVE_ECC_VERIFY
    int verify = 0;
   1593c:	2300      	movs	r3, #0
   1593e:	60fb      	str	r3, [r7, #12]
#endif
#ifndef USE_CERT_BUFFERS_256
    XFILE file;
#endif

    wc_ecc_init_ex(&key, HEAP_HINT, devId);
   15940:	4bd7      	ldr	r3, [pc, #860]	; (15ca0 <ecc_test_make_pub+0x3ac>)
   15942:	681a      	ldr	r2, [r3, #0]
   15944:	23eb      	movs	r3, #235	; 0xeb
   15946:	009b      	lsls	r3, r3, #2
   15948:	18fb      	adds	r3, r7, r3
   1594a:	2100      	movs	r1, #0
   1594c:	0018      	movs	r0, r3
   1594e:	f7f8 fb11 	bl	df74 <wc_ecc_init_ex>

    tmp = (byte*)XMALLOC(FOURK_BUF, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
   15952:	2380      	movs	r3, #128	; 0x80
   15954:	015b      	lsls	r3, r3, #5
   15956:	0018      	movs	r0, r3
   15958:	f00f fe94 	bl	25684 <malloc>
   1595c:	0003      	movs	r3, r0
   1595e:	22e6      	movs	r2, #230	; 0xe6
   15960:	00d2      	lsls	r2, r2, #3
   15962:	18ba      	adds	r2, r7, r2
   15964:	6013      	str	r3, [r2, #0]
    if (tmp == NULL) {
   15966:	23e6      	movs	r3, #230	; 0xe6
   15968:	00db      	lsls	r3, r3, #3
   1596a:	18fb      	adds	r3, r7, r3
   1596c:	681b      	ldr	r3, [r3, #0]
   1596e:	2b00      	cmp	r3, #0
   15970:	d101      	bne.n	15976 <ecc_test_make_pub+0x82>
        return -8311;
   15972:	4bcc      	ldr	r3, [pc, #816]	; (15ca4 <ecc_test_make_pub+0x3b0>)
   15974:	e301      	b.n	15f7a <ecc_test_make_pub+0x686>
    }
    exportBuf = (byte*)XMALLOC(FOURK_BUF, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
   15976:	2380      	movs	r3, #128	; 0x80
   15978:	015b      	lsls	r3, r3, #5
   1597a:	0018      	movs	r0, r3
   1597c:	f00f fe82 	bl	25684 <malloc>
   15980:	0003      	movs	r3, r0
   15982:	4ac3      	ldr	r2, [pc, #780]	; (15c90 <ecc_test_make_pub+0x39c>)
   15984:	18ba      	adds	r2, r7, r2
   15986:	6013      	str	r3, [r2, #0]
    if (exportBuf == NULL) {
   15988:	4bc1      	ldr	r3, [pc, #772]	; (15c90 <ecc_test_make_pub+0x39c>)
   1598a:	18fb      	adds	r3, r7, r3
   1598c:	681b      	ldr	r3, [r3, #0]
   1598e:	2b00      	cmp	r3, #0
   15990:	d113      	bne.n	159ba <ecc_test_make_pub+0xc6>
        XFREE(tmp, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
   15992:	23e6      	movs	r3, #230	; 0xe6
   15994:	00db      	lsls	r3, r3, #3
   15996:	18fb      	adds	r3, r7, r3
   15998:	681b      	ldr	r3, [r3, #0]
   1599a:	4ac3      	ldr	r2, [pc, #780]	; (15ca8 <ecc_test_make_pub+0x3b4>)
   1599c:	18ba      	adds	r2, r7, r2
   1599e:	6013      	str	r3, [r2, #0]
   159a0:	4bc1      	ldr	r3, [pc, #772]	; (15ca8 <ecc_test_make_pub+0x3b4>)
   159a2:	18fb      	adds	r3, r7, r3
   159a4:	681b      	ldr	r3, [r3, #0]
   159a6:	2b00      	cmp	r3, #0
   159a8:	d005      	beq.n	159b6 <ecc_test_make_pub+0xc2>
   159aa:	4bbf      	ldr	r3, [pc, #764]	; (15ca8 <ecc_test_make_pub+0x3b4>)
   159ac:	18fb      	adds	r3, r7, r3
   159ae:	681b      	ldr	r3, [r3, #0]
   159b0:	0018      	movs	r0, r3
   159b2:	f00f fe71 	bl	25698 <free>
        return -8312;
   159b6:	4bbd      	ldr	r3, [pc, #756]	; (15cac <ecc_test_make_pub+0x3b8>)
   159b8:	e2df      	b.n	15f7a <ecc_test_make_pub+0x686>
    }

#ifdef USE_CERT_BUFFERS_256
    XMEMCPY(tmp, ecc_key_der_256, (size_t)sizeof_ecc_key_der_256);
   159ba:	2379      	movs	r3, #121	; 0x79
   159bc:	001a      	movs	r2, r3
   159be:	49bc      	ldr	r1, [pc, #752]	; (15cb0 <ecc_test_make_pub+0x3bc>)
   159c0:	23e6      	movs	r3, #230	; 0xe6
   159c2:	00db      	lsls	r3, r3, #3
   159c4:	18fb      	adds	r3, r7, r3
   159c6:	681b      	ldr	r3, [r3, #0]
   159c8:	0018      	movs	r0, r3
   159ca:	f00f fe90 	bl	256ee <memcpy>
    tmpSz = (size_t)sizeof_ecc_key_der_256;
   159ce:	2379      	movs	r3, #121	; 0x79
   159d0:	22e2      	movs	r2, #226	; 0xe2
   159d2:	0092      	lsls	r2, r2, #2
   159d4:	18ba      	adds	r2, r7, r2
   159d6:	6013      	str	r3, [r2, #0]
    tmpSz = (word32)XFREAD(tmp, 1, FOURK_BUF, file);
    XFCLOSE(file);
#endif /* USE_CERT_BUFFERS_256 */

    /* import private only then test with */
    ret = wc_ecc_import_private_key(tmp, tmpSz, NULL, 0, NULL);
   159d8:	23e2      	movs	r3, #226	; 0xe2
   159da:	009b      	lsls	r3, r3, #2
   159dc:	18fb      	adds	r3, r7, r3
   159de:	6819      	ldr	r1, [r3, #0]
   159e0:	23e6      	movs	r3, #230	; 0xe6
   159e2:	00db      	lsls	r3, r3, #3
   159e4:	18fb      	adds	r3, r7, r3
   159e6:	6818      	ldr	r0, [r3, #0]
   159e8:	2300      	movs	r3, #0
   159ea:	9300      	str	r3, [sp, #0]
   159ec:	2300      	movs	r3, #0
   159ee:	2200      	movs	r2, #0
   159f0:	f7f9 f98a 	bl	ed08 <wc_ecc_import_private_key>
   159f4:	0003      	movs	r3, r0
   159f6:	4aa9      	ldr	r2, [pc, #676]	; (15c9c <ecc_test_make_pub+0x3a8>)
   159f8:	18ba      	adds	r2, r7, r2
   159fa:	6013      	str	r3, [r2, #0]
    if (ret == 0) {
   159fc:	4ba7      	ldr	r3, [pc, #668]	; (15c9c <ecc_test_make_pub+0x3a8>)
   159fe:	18fb      	adds	r3, r7, r3
   15a00:	681b      	ldr	r3, [r3, #0]
   15a02:	2b00      	cmp	r3, #0
   15a04:	d104      	bne.n	15a10 <ecc_test_make_pub+0x11c>
        ERROR_OUT(-8314, done);
   15a06:	4bab      	ldr	r3, [pc, #684]	; (15cb4 <ecc_test_make_pub+0x3c0>)
   15a08:	4aa4      	ldr	r2, [pc, #656]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15a0a:	18ba      	adds	r2, r7, r2
   15a0c:	6013      	str	r3, [r2, #0]
   15a0e:	e27d      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

    ret = wc_ecc_import_private_key(NULL, tmpSz, NULL, 0, &key);
   15a10:	23e2      	movs	r3, #226	; 0xe2
   15a12:	009b      	lsls	r3, r3, #2
   15a14:	18fb      	adds	r3, r7, r3
   15a16:	6819      	ldr	r1, [r3, #0]
   15a18:	23eb      	movs	r3, #235	; 0xeb
   15a1a:	009b      	lsls	r3, r3, #2
   15a1c:	18fb      	adds	r3, r7, r3
   15a1e:	9300      	str	r3, [sp, #0]
   15a20:	2300      	movs	r3, #0
   15a22:	2200      	movs	r2, #0
   15a24:	2000      	movs	r0, #0
   15a26:	f7f9 f96f 	bl	ed08 <wc_ecc_import_private_key>
   15a2a:	0003      	movs	r3, r0
   15a2c:	4a9b      	ldr	r2, [pc, #620]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15a2e:	18ba      	adds	r2, r7, r2
   15a30:	6013      	str	r3, [r2, #0]
    if (ret == 0) {
   15a32:	4b9a      	ldr	r3, [pc, #616]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15a34:	18fb      	adds	r3, r7, r3
   15a36:	681b      	ldr	r3, [r3, #0]
   15a38:	2b00      	cmp	r3, #0
   15a3a:	d104      	bne.n	15a46 <ecc_test_make_pub+0x152>
        ERROR_OUT(-8315, done);
   15a3c:	4b9e      	ldr	r3, [pc, #632]	; (15cb8 <ecc_test_make_pub+0x3c4>)
   15a3e:	4a97      	ldr	r2, [pc, #604]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15a40:	18ba      	adds	r2, r7, r2
   15a42:	6013      	str	r3, [r2, #0]
   15a44:	e262      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

    x = 0;
   15a46:	2300      	movs	r3, #0
   15a48:	22e3      	movs	r2, #227	; 0xe3
   15a4a:	0092      	lsls	r2, r2, #2
   15a4c:	18ba      	adds	r2, r7, r2
   15a4e:	6013      	str	r3, [r2, #0]
    ret = wc_EccPrivateKeyDecode(tmp, &x, &key, tmpSz);
   15a50:	23e2      	movs	r3, #226	; 0xe2
   15a52:	009b      	lsls	r3, r3, #2
   15a54:	18fb      	adds	r3, r7, r3
   15a56:	681b      	ldr	r3, [r3, #0]
   15a58:	22eb      	movs	r2, #235	; 0xeb
   15a5a:	0092      	lsls	r2, r2, #2
   15a5c:	18ba      	adds	r2, r7, r2
   15a5e:	21e3      	movs	r1, #227	; 0xe3
   15a60:	0089      	lsls	r1, r1, #2
   15a62:	1879      	adds	r1, r7, r1
   15a64:	20e6      	movs	r0, #230	; 0xe6
   15a66:	00c0      	lsls	r0, r0, #3
   15a68:	1838      	adds	r0, r7, r0
   15a6a:	6800      	ldr	r0, [r0, #0]
   15a6c:	f7f1 fe10 	bl	7690 <wc_EccPrivateKeyDecode>
   15a70:	0003      	movs	r3, r0
   15a72:	4a8a      	ldr	r2, [pc, #552]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15a74:	18ba      	adds	r2, r7, r2
   15a76:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   15a78:	4b88      	ldr	r3, [pc, #544]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15a7a:	18fb      	adds	r3, r7, r3
   15a7c:	681b      	ldr	r3, [r3, #0]
   15a7e:	2b00      	cmp	r3, #0
   15a80:	d004      	beq.n	15a8c <ecc_test_make_pub+0x198>
        ERROR_OUT(-8316, done);
   15a82:	4b8e      	ldr	r3, [pc, #568]	; (15cbc <ecc_test_make_pub+0x3c8>)
   15a84:	4a85      	ldr	r2, [pc, #532]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15a86:	18ba      	adds	r2, r7, r2
   15a88:	6013      	str	r3, [r2, #0]
   15a8a:	e23f      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

#ifdef HAVE_ECC_KEY_EXPORT
    x = FOURK_BUF;
   15a8c:	2380      	movs	r3, #128	; 0x80
   15a8e:	015b      	lsls	r3, r3, #5
   15a90:	22e3      	movs	r2, #227	; 0xe3
   15a92:	0092      	lsls	r2, r2, #2
   15a94:	18ba      	adds	r2, r7, r2
   15a96:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_private_only(&key, exportBuf, &x);
   15a98:	23e3      	movs	r3, #227	; 0xe3
   15a9a:	009b      	lsls	r3, r3, #2
   15a9c:	18fa      	adds	r2, r7, r3
   15a9e:	4b7c      	ldr	r3, [pc, #496]	; (15c90 <ecc_test_make_pub+0x39c>)
   15aa0:	18fb      	adds	r3, r7, r3
   15aa2:	6819      	ldr	r1, [r3, #0]
   15aa4:	23eb      	movs	r3, #235	; 0xeb
   15aa6:	009b      	lsls	r3, r3, #2
   15aa8:	18fb      	adds	r3, r7, r3
   15aaa:	0018      	movs	r0, r3
   15aac:	f7f9 f87c 	bl	eba8 <wc_ecc_export_private_only>
   15ab0:	0003      	movs	r3, r0
   15ab2:	4a7a      	ldr	r2, [pc, #488]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15ab4:	18ba      	adds	r2, r7, r2
   15ab6:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   15ab8:	4b78      	ldr	r3, [pc, #480]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15aba:	18fb      	adds	r3, r7, r3
   15abc:	681b      	ldr	r3, [r3, #0]
   15abe:	2b00      	cmp	r3, #0
   15ac0:	d004      	beq.n	15acc <ecc_test_make_pub+0x1d8>
        ERROR_OUT(-8317, done);
   15ac2:	4b7f      	ldr	r3, [pc, #508]	; (15cc0 <ecc_test_make_pub+0x3cc>)
   15ac4:	4a75      	ldr	r2, [pc, #468]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15ac6:	18ba      	adds	r2, r7, r2
   15ac8:	6013      	str	r3, [r2, #0]
   15aca:	e21f      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

    /* make private only key */
    wc_ecc_free(&key);
   15acc:	23eb      	movs	r3, #235	; 0xeb
   15ace:	009b      	lsls	r3, r3, #2
   15ad0:	18fb      	adds	r3, r7, r3
   15ad2:	0018      	movs	r0, r3
   15ad4:	f7f8 fc18 	bl	e308 <wc_ecc_free>
    wc_ecc_init_ex(&key, HEAP_HINT, devId);
   15ad8:	4b71      	ldr	r3, [pc, #452]	; (15ca0 <ecc_test_make_pub+0x3ac>)
   15ada:	681a      	ldr	r2, [r3, #0]
   15adc:	23eb      	movs	r3, #235	; 0xeb
   15ade:	009b      	lsls	r3, r3, #2
   15ae0:	18fb      	adds	r3, r7, r3
   15ae2:	2100      	movs	r1, #0
   15ae4:	0018      	movs	r0, r3
   15ae6:	f7f8 fa45 	bl	df74 <wc_ecc_init_ex>
    ret = wc_ecc_import_private_key(exportBuf, x, NULL, 0, &key);
   15aea:	23e3      	movs	r3, #227	; 0xe3
   15aec:	009b      	lsls	r3, r3, #2
   15aee:	18fb      	adds	r3, r7, r3
   15af0:	6819      	ldr	r1, [r3, #0]
   15af2:	4b67      	ldr	r3, [pc, #412]	; (15c90 <ecc_test_make_pub+0x39c>)
   15af4:	18fb      	adds	r3, r7, r3
   15af6:	6818      	ldr	r0, [r3, #0]
   15af8:	23eb      	movs	r3, #235	; 0xeb
   15afa:	009b      	lsls	r3, r3, #2
   15afc:	18fb      	adds	r3, r7, r3
   15afe:	9300      	str	r3, [sp, #0]
   15b00:	2300      	movs	r3, #0
   15b02:	2200      	movs	r2, #0
   15b04:	f7f9 f900 	bl	ed08 <wc_ecc_import_private_key>
   15b08:	0003      	movs	r3, r0
   15b0a:	4a64      	ldr	r2, [pc, #400]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15b0c:	18ba      	adds	r2, r7, r2
   15b0e:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   15b10:	4b62      	ldr	r3, [pc, #392]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15b12:	18fb      	adds	r3, r7, r3
   15b14:	681b      	ldr	r3, [r3, #0]
   15b16:	2b00      	cmp	r3, #0
   15b18:	d004      	beq.n	15b24 <ecc_test_make_pub+0x230>
        ERROR_OUT(-8318, done);
   15b1a:	4b6a      	ldr	r3, [pc, #424]	; (15cc4 <ecc_test_make_pub+0x3d0>)
   15b1c:	4a5f      	ldr	r2, [pc, #380]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15b1e:	18ba      	adds	r2, r7, r2
   15b20:	6013      	str	r3, [r2, #0]
   15b22:	e1f3      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

    x = FOURK_BUF;
   15b24:	2380      	movs	r3, #128	; 0x80
   15b26:	015b      	lsls	r3, r3, #5
   15b28:	22e3      	movs	r2, #227	; 0xe3
   15b2a:	0092      	lsls	r2, r2, #2
   15b2c:	18ba      	adds	r2, r7, r2
   15b2e:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_x963_ex(&key, exportBuf, &x, 0);
   15b30:	23e3      	movs	r3, #227	; 0xe3
   15b32:	009b      	lsls	r3, r3, #2
   15b34:	18fa      	adds	r2, r7, r3
   15b36:	4b56      	ldr	r3, [pc, #344]	; (15c90 <ecc_test_make_pub+0x39c>)
   15b38:	18fb      	adds	r3, r7, r3
   15b3a:	6819      	ldr	r1, [r3, #0]
   15b3c:	23eb      	movs	r3, #235	; 0xeb
   15b3e:	009b      	lsls	r3, r3, #2
   15b40:	18f8      	adds	r0, r7, r3
   15b42:	2300      	movs	r3, #0
   15b44:	f7f8 feb4 	bl	e8b0 <wc_ecc_export_x963_ex>
   15b48:	0003      	movs	r3, r0
   15b4a:	4a54      	ldr	r2, [pc, #336]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15b4c:	18ba      	adds	r2, r7, r2
   15b4e:	6013      	str	r3, [r2, #0]
    if (ret == 0) {
   15b50:	4b52      	ldr	r3, [pc, #328]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15b52:	18fb      	adds	r3, r7, r3
   15b54:	681b      	ldr	r3, [r3, #0]
   15b56:	2b00      	cmp	r3, #0
   15b58:	d104      	bne.n	15b64 <ecc_test_make_pub+0x270>
        ERROR_OUT(-8319, done);
   15b5a:	4b5b      	ldr	r3, [pc, #364]	; (15cc8 <ecc_test_make_pub+0x3d4>)
   15b5c:	4a4f      	ldr	r2, [pc, #316]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15b5e:	18ba      	adds	r2, r7, r2
   15b60:	6013      	str	r3, [r2, #0]
   15b62:	e1d3      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

#endif /* HAVE_ECC_KEY_EXPORT */

    ret = wc_ecc_make_pub(NULL, NULL);
   15b64:	2100      	movs	r1, #0
   15b66:	2000      	movs	r0, #0
   15b68:	f7f8 f970 	bl	de4c <wc_ecc_make_pub>
   15b6c:	0003      	movs	r3, r0
   15b6e:	4a4b      	ldr	r2, [pc, #300]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15b70:	18ba      	adds	r2, r7, r2
   15b72:	6013      	str	r3, [r2, #0]
    if (ret == 0) {
   15b74:	4b49      	ldr	r3, [pc, #292]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15b76:	18fb      	adds	r3, r7, r3
   15b78:	681b      	ldr	r3, [r3, #0]
   15b7a:	2b00      	cmp	r3, #0
   15b7c:	d104      	bne.n	15b88 <ecc_test_make_pub+0x294>
        ERROR_OUT(-8320, done);
   15b7e:	4b53      	ldr	r3, [pc, #332]	; (15ccc <ecc_test_make_pub+0x3d8>)
   15b80:	4a46      	ldr	r2, [pc, #280]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15b82:	18ba      	adds	r2, r7, r2
   15b84:	6013      	str	r3, [r2, #0]
   15b86:	e1c1      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

    pubPoint = wc_ecc_new_point_h(HEAP_HINT);
   15b88:	2000      	movs	r0, #0
   15b8a:	f7f7 fff1 	bl	db70 <wc_ecc_new_point_h>
   15b8e:	0003      	movs	r3, r0
   15b90:	22e7      	movs	r2, #231	; 0xe7
   15b92:	00d2      	lsls	r2, r2, #3
   15b94:	18ba      	adds	r2, r7, r2
   15b96:	6013      	str	r3, [r2, #0]
    if (pubPoint == NULL) {
   15b98:	23e7      	movs	r3, #231	; 0xe7
   15b9a:	00db      	lsls	r3, r3, #3
   15b9c:	18fb      	adds	r3, r7, r3
   15b9e:	681b      	ldr	r3, [r3, #0]
   15ba0:	2b00      	cmp	r3, #0
   15ba2:	d104      	bne.n	15bae <ecc_test_make_pub+0x2ba>
        ERROR_OUT(-8321, done);
   15ba4:	4b4a      	ldr	r3, [pc, #296]	; (15cd0 <ecc_test_make_pub+0x3dc>)
   15ba6:	4a3d      	ldr	r2, [pc, #244]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15ba8:	18ba      	adds	r2, r7, r2
   15baa:	6013      	str	r3, [r2, #0]
   15bac:	e1ae      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

    ret = wc_ecc_make_pub(&key, pubPoint);
   15bae:	23e7      	movs	r3, #231	; 0xe7
   15bb0:	00db      	lsls	r3, r3, #3
   15bb2:	18fb      	adds	r3, r7, r3
   15bb4:	681a      	ldr	r2, [r3, #0]
   15bb6:	23eb      	movs	r3, #235	; 0xeb
   15bb8:	009b      	lsls	r3, r3, #2
   15bba:	18fb      	adds	r3, r7, r3
   15bbc:	0011      	movs	r1, r2
   15bbe:	0018      	movs	r0, r3
   15bc0:	f7f8 f944 	bl	de4c <wc_ecc_make_pub>
   15bc4:	0003      	movs	r3, r0
   15bc6:	4a35      	ldr	r2, [pc, #212]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15bc8:	18ba      	adds	r2, r7, r2
   15bca:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   15bcc:	4b33      	ldr	r3, [pc, #204]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15bce:	18fb      	adds	r3, r7, r3
   15bd0:	681b      	ldr	r3, [r3, #0]
   15bd2:	2b00      	cmp	r3, #0
   15bd4:	d004      	beq.n	15be0 <ecc_test_make_pub+0x2ec>
        ERROR_OUT(-8322, done);
   15bd6:	4b3f      	ldr	r3, [pc, #252]	; (15cd4 <ecc_test_make_pub+0x3e0>)
   15bd8:	4a30      	ldr	r2, [pc, #192]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15bda:	18ba      	adds	r2, r7, r2
   15bdc:	6013      	str	r3, [r2, #0]
   15bde:	e195      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

#ifdef HAVE_ECC_KEY_EXPORT
    /* export should still fail, is private only key */
    x = FOURK_BUF;
   15be0:	2380      	movs	r3, #128	; 0x80
   15be2:	015b      	lsls	r3, r3, #5
   15be4:	22e3      	movs	r2, #227	; 0xe3
   15be6:	0092      	lsls	r2, r2, #2
   15be8:	18ba      	adds	r2, r7, r2
   15bea:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_x963_ex(&key, exportBuf, &x, 0);
   15bec:	23e3      	movs	r3, #227	; 0xe3
   15bee:	009b      	lsls	r3, r3, #2
   15bf0:	18fa      	adds	r2, r7, r3
   15bf2:	4b27      	ldr	r3, [pc, #156]	; (15c90 <ecc_test_make_pub+0x39c>)
   15bf4:	18fb      	adds	r3, r7, r3
   15bf6:	6819      	ldr	r1, [r3, #0]
   15bf8:	23eb      	movs	r3, #235	; 0xeb
   15bfa:	009b      	lsls	r3, r3, #2
   15bfc:	18f8      	adds	r0, r7, r3
   15bfe:	2300      	movs	r3, #0
   15c00:	f7f8 fe56 	bl	e8b0 <wc_ecc_export_x963_ex>
   15c04:	0003      	movs	r3, r0
   15c06:	4a25      	ldr	r2, [pc, #148]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15c08:	18ba      	adds	r2, r7, r2
   15c0a:	6013      	str	r3, [r2, #0]
    if (ret == 0) {
   15c0c:	4b23      	ldr	r3, [pc, #140]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15c0e:	18fb      	adds	r3, r7, r3
   15c10:	681b      	ldr	r3, [r3, #0]
   15c12:	2b00      	cmp	r3, #0
   15c14:	d104      	bne.n	15c20 <ecc_test_make_pub+0x32c>
        ERROR_OUT(-8323, done);
   15c16:	4b30      	ldr	r3, [pc, #192]	; (15cd8 <ecc_test_make_pub+0x3e4>)
   15c18:	4a20      	ldr	r2, [pc, #128]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15c1a:	18ba      	adds	r2, r7, r2
   15c1c:	6013      	str	r3, [r2, #0]
   15c1e:	e175      	b.n	15f0c <ecc_test_make_pub+0x618>
    }
#endif /* HAVE_ECC_KEY_EXPORT */

#ifdef HAVE_ECC_SIGN
    tmpSz = FOURK_BUF;
   15c20:	2380      	movs	r3, #128	; 0x80
   15c22:	015b      	lsls	r3, r3, #5
   15c24:	22e2      	movs	r2, #226	; 0xe2
   15c26:	0092      	lsls	r2, r2, #2
   15c28:	18ba      	adds	r2, r7, r2
   15c2a:	6013      	str	r3, [r2, #0]
    ret = 0;
   15c2c:	2300      	movs	r3, #0
   15c2e:	4a1b      	ldr	r2, [pc, #108]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15c30:	18ba      	adds	r2, r7, r2
   15c32:	6013      	str	r3, [r2, #0]
    do {
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &key.asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
    #endif
        if (ret == 0)
   15c34:	4b19      	ldr	r3, [pc, #100]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15c36:	18fb      	adds	r3, r7, r3
   15c38:	681b      	ldr	r3, [r3, #0]
   15c3a:	2b00      	cmp	r3, #0
   15c3c:	d117      	bne.n	15c6e <ecc_test_make_pub+0x37a>
            ret = wc_ecc_sign_hash(msg, sizeof(msg), tmp, &tmpSz, rng, &key);
   15c3e:	23e2      	movs	r3, #226	; 0xe2
   15c40:	009b      	lsls	r3, r3, #2
   15c42:	18f9      	adds	r1, r7, r3
   15c44:	23e6      	movs	r3, #230	; 0xe6
   15c46:	00db      	lsls	r3, r3, #3
   15c48:	18fb      	adds	r3, r7, r3
   15c4a:	681a      	ldr	r2, [r3, #0]
   15c4c:	23e4      	movs	r3, #228	; 0xe4
   15c4e:	009b      	lsls	r3, r3, #2
   15c50:	18f8      	adds	r0, r7, r3
   15c52:	23eb      	movs	r3, #235	; 0xeb
   15c54:	009b      	lsls	r3, r3, #2
   15c56:	18fb      	adds	r3, r7, r3
   15c58:	9301      	str	r3, [sp, #4]
   15c5a:	687b      	ldr	r3, [r7, #4]
   15c5c:	9300      	str	r3, [sp, #0]
   15c5e:	000b      	movs	r3, r1
   15c60:	211c      	movs	r1, #28
   15c62:	f7f8 fa7b 	bl	e15c <wc_ecc_sign_hash>
   15c66:	0003      	movs	r3, r0
   15c68:	4a0c      	ldr	r2, [pc, #48]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15c6a:	18ba      	adds	r2, r7, r2
   15c6c:	6013      	str	r3, [r2, #0]
    } while (ret == WC_PENDING_E);
   15c6e:	4b0b      	ldr	r3, [pc, #44]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15c70:	18fb      	adds	r3, r7, r3
   15c72:	681b      	ldr	r3, [r3, #0]
   15c74:	336c      	adds	r3, #108	; 0x6c
   15c76:	d0dd      	beq.n	15c34 <ecc_test_make_pub+0x340>
    if (ret != 0) {
   15c78:	4b08      	ldr	r3, [pc, #32]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15c7a:	18fb      	adds	r3, r7, r3
   15c7c:	681b      	ldr	r3, [r3, #0]
   15c7e:	2b00      	cmp	r3, #0
   15c80:	d02e      	beq.n	15ce0 <ecc_test_make_pub+0x3ec>
        ERROR_OUT(-8324, done);
   15c82:	4b16      	ldr	r3, [pc, #88]	; (15cdc <ecc_test_make_pub+0x3e8>)
   15c84:	4a05      	ldr	r2, [pc, #20]	; (15c9c <ecc_test_make_pub+0x3a8>)
   15c86:	18ba      	adds	r2, r7, r2
   15c88:	6013      	str	r3, [r2, #0]
   15c8a:	e13f      	b.n	15f0c <ecc_test_make_pub+0x618>
   15c8c:	fffff8b4 	.word	0xfffff8b4
   15c90:	00000734 	.word	0x00000734
   15c94:	fffffc50 	.word	0xfffffc50
   15c98:	0002d8d8 	.word	0x0002d8d8
   15c9c:	0000073c 	.word	0x0000073c
   15ca0:	20000010 	.word	0x20000010
   15ca4:	ffffdf89 	.word	0xffffdf89
   15ca8:	0000072c 	.word	0x0000072c
   15cac:	ffffdf88 	.word	0xffffdf88
   15cb0:	0002c984 	.word	0x0002c984
   15cb4:	ffffdf86 	.word	0xffffdf86
   15cb8:	ffffdf85 	.word	0xffffdf85
   15cbc:	ffffdf84 	.word	0xffffdf84
   15cc0:	ffffdf83 	.word	0xffffdf83
   15cc4:	ffffdf82 	.word	0xffffdf82
   15cc8:	ffffdf81 	.word	0xffffdf81
   15ccc:	ffffdf80 	.word	0xffffdf80
   15cd0:	ffffdf7f 	.word	0xffffdf7f
   15cd4:	ffffdf7e 	.word	0xffffdf7e
   15cd8:	ffffdf7d 	.word	0xffffdf7d
   15cdc:	ffffdf7c 	.word	0xffffdf7c
    }

#ifdef HAVE_ECC_VERIFY
    /* try verify with private only key */
    ret = 0;
   15ce0:	2300      	movs	r3, #0
   15ce2:	4aa8      	ldr	r2, [pc, #672]	; (15f84 <ecc_test_make_pub+0x690>)
   15ce4:	18ba      	adds	r2, r7, r2
   15ce6:	6013      	str	r3, [r2, #0]
    do {
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &key.asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
    #endif
        if (ret == 0)
   15ce8:	4ba6      	ldr	r3, [pc, #664]	; (15f84 <ecc_test_make_pub+0x690>)
   15cea:	18fb      	adds	r3, r7, r3
   15cec:	681b      	ldr	r3, [r3, #0]
   15cee:	2b00      	cmp	r3, #0
   15cf0:	d118      	bne.n	15d24 <ecc_test_make_pub+0x430>
            ret = wc_ecc_verify_hash(tmp, tmpSz, msg, sizeof(msg), &verify, &key);
   15cf2:	23e2      	movs	r3, #226	; 0xe2
   15cf4:	009b      	lsls	r3, r3, #2
   15cf6:	18fb      	adds	r3, r7, r3
   15cf8:	6819      	ldr	r1, [r3, #0]
   15cfa:	23e4      	movs	r3, #228	; 0xe4
   15cfc:	009b      	lsls	r3, r3, #2
   15cfe:	18fa      	adds	r2, r7, r3
   15d00:	23e6      	movs	r3, #230	; 0xe6
   15d02:	00db      	lsls	r3, r3, #3
   15d04:	18fb      	adds	r3, r7, r3
   15d06:	6818      	ldr	r0, [r3, #0]
   15d08:	23eb      	movs	r3, #235	; 0xeb
   15d0a:	009b      	lsls	r3, r3, #2
   15d0c:	18fb      	adds	r3, r7, r3
   15d0e:	9301      	str	r3, [sp, #4]
   15d10:	230c      	movs	r3, #12
   15d12:	18fb      	adds	r3, r7, r3
   15d14:	9300      	str	r3, [sp, #0]
   15d16:	231c      	movs	r3, #28
   15d18:	f7f8 fb10 	bl	e33c <wc_ecc_verify_hash>
   15d1c:	0003      	movs	r3, r0
   15d1e:	4a99      	ldr	r2, [pc, #612]	; (15f84 <ecc_test_make_pub+0x690>)
   15d20:	18ba      	adds	r2, r7, r2
   15d22:	6013      	str	r3, [r2, #0]
    } while (ret == WC_PENDING_E);
   15d24:	4b97      	ldr	r3, [pc, #604]	; (15f84 <ecc_test_make_pub+0x690>)
   15d26:	18fb      	adds	r3, r7, r3
   15d28:	681b      	ldr	r3, [r3, #0]
   15d2a:	336c      	adds	r3, #108	; 0x6c
   15d2c:	d0dc      	beq.n	15ce8 <ecc_test_make_pub+0x3f4>
    if (ret != 0) {
   15d2e:	4b95      	ldr	r3, [pc, #596]	; (15f84 <ecc_test_make_pub+0x690>)
   15d30:	18fb      	adds	r3, r7, r3
   15d32:	681b      	ldr	r3, [r3, #0]
   15d34:	2b00      	cmp	r3, #0
   15d36:	d004      	beq.n	15d42 <ecc_test_make_pub+0x44e>
        ERROR_OUT(-8325, done);
   15d38:	4b93      	ldr	r3, [pc, #588]	; (15f88 <ecc_test_make_pub+0x694>)
   15d3a:	4a92      	ldr	r2, [pc, #584]	; (15f84 <ecc_test_make_pub+0x690>)
   15d3c:	18ba      	adds	r2, r7, r2
   15d3e:	6013      	str	r3, [r2, #0]
   15d40:	e0e4      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

    if (verify != 1) {
   15d42:	68fb      	ldr	r3, [r7, #12]
   15d44:	2b01      	cmp	r3, #1
   15d46:	d004      	beq.n	15d52 <ecc_test_make_pub+0x45e>
        ERROR_OUT(-8326, done);
   15d48:	4b90      	ldr	r3, [pc, #576]	; (15f8c <ecc_test_make_pub+0x698>)
   15d4a:	4a8e      	ldr	r2, [pc, #568]	; (15f84 <ecc_test_make_pub+0x690>)
   15d4c:	18ba      	adds	r2, r7, r2
   15d4e:	6013      	str	r3, [r2, #0]
   15d50:	e0dc      	b.n	15f0c <ecc_test_make_pub+0x618>
    }
#ifdef HAVE_ECC_KEY_EXPORT
    /* exporting the public part should now work */
    x = FOURK_BUF;
   15d52:	2380      	movs	r3, #128	; 0x80
   15d54:	015b      	lsls	r3, r3, #5
   15d56:	22e3      	movs	r2, #227	; 0xe3
   15d58:	0092      	lsls	r2, r2, #2
   15d5a:	18ba      	adds	r2, r7, r2
   15d5c:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_x963_ex(&key, exportBuf, &x, 0);
   15d5e:	23e3      	movs	r3, #227	; 0xe3
   15d60:	009b      	lsls	r3, r3, #2
   15d62:	18fa      	adds	r2, r7, r3
   15d64:	4b8a      	ldr	r3, [pc, #552]	; (15f90 <ecc_test_make_pub+0x69c>)
   15d66:	18fb      	adds	r3, r7, r3
   15d68:	6819      	ldr	r1, [r3, #0]
   15d6a:	23eb      	movs	r3, #235	; 0xeb
   15d6c:	009b      	lsls	r3, r3, #2
   15d6e:	18f8      	adds	r0, r7, r3
   15d70:	2300      	movs	r3, #0
   15d72:	f7f8 fd9d 	bl	e8b0 <wc_ecc_export_x963_ex>
   15d76:	0003      	movs	r3, r0
   15d78:	4a82      	ldr	r2, [pc, #520]	; (15f84 <ecc_test_make_pub+0x690>)
   15d7a:	18ba      	adds	r2, r7, r2
   15d7c:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   15d7e:	4b81      	ldr	r3, [pc, #516]	; (15f84 <ecc_test_make_pub+0x690>)
   15d80:	18fb      	adds	r3, r7, r3
   15d82:	681b      	ldr	r3, [r3, #0]
   15d84:	2b00      	cmp	r3, #0
   15d86:	d004      	beq.n	15d92 <ecc_test_make_pub+0x49e>
        ERROR_OUT(-8327, done);
   15d88:	4b82      	ldr	r3, [pc, #520]	; (15f94 <ecc_test_make_pub+0x6a0>)
   15d8a:	4a7e      	ldr	r2, [pc, #504]	; (15f84 <ecc_test_make_pub+0x690>)
   15d8c:	18ba      	adds	r2, r7, r2
   15d8e:	6013      	str	r3, [r2, #0]
   15d90:	e0bc      	b.n	15f0c <ecc_test_make_pub+0x618>

#endif /* HAVE_ECC_SIGN */

#if defined(HAVE_ECC_DHE) && defined(HAVE_ECC_KEY_EXPORT)
    /* now test private only key with creating a shared secret */
    x = FOURK_BUF;
   15d92:	2380      	movs	r3, #128	; 0x80
   15d94:	015b      	lsls	r3, r3, #5
   15d96:	22e3      	movs	r2, #227	; 0xe3
   15d98:	0092      	lsls	r2, r2, #2
   15d9a:	18ba      	adds	r2, r7, r2
   15d9c:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_private_only(&key, exportBuf, &x);
   15d9e:	23e3      	movs	r3, #227	; 0xe3
   15da0:	009b      	lsls	r3, r3, #2
   15da2:	18fa      	adds	r2, r7, r3
   15da4:	4b7a      	ldr	r3, [pc, #488]	; (15f90 <ecc_test_make_pub+0x69c>)
   15da6:	18fb      	adds	r3, r7, r3
   15da8:	6819      	ldr	r1, [r3, #0]
   15daa:	23eb      	movs	r3, #235	; 0xeb
   15dac:	009b      	lsls	r3, r3, #2
   15dae:	18fb      	adds	r3, r7, r3
   15db0:	0018      	movs	r0, r3
   15db2:	f7f8 fef9 	bl	eba8 <wc_ecc_export_private_only>
   15db6:	0003      	movs	r3, r0
   15db8:	4a72      	ldr	r2, [pc, #456]	; (15f84 <ecc_test_make_pub+0x690>)
   15dba:	18ba      	adds	r2, r7, r2
   15dbc:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   15dbe:	4b71      	ldr	r3, [pc, #452]	; (15f84 <ecc_test_make_pub+0x690>)
   15dc0:	18fb      	adds	r3, r7, r3
   15dc2:	681b      	ldr	r3, [r3, #0]
   15dc4:	2b00      	cmp	r3, #0
   15dc6:	d004      	beq.n	15dd2 <ecc_test_make_pub+0x4de>
        ERROR_OUT(-8328, done);
   15dc8:	4b73      	ldr	r3, [pc, #460]	; (15f98 <ecc_test_make_pub+0x6a4>)
   15dca:	4a6e      	ldr	r2, [pc, #440]	; (15f84 <ecc_test_make_pub+0x690>)
   15dcc:	18ba      	adds	r2, r7, r2
   15dce:	6013      	str	r3, [r2, #0]
   15dd0:	e09c      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

    /* make private only key */
    wc_ecc_free(&key);
   15dd2:	23eb      	movs	r3, #235	; 0xeb
   15dd4:	009b      	lsls	r3, r3, #2
   15dd6:	18fb      	adds	r3, r7, r3
   15dd8:	0018      	movs	r0, r3
   15dda:	f7f8 fa95 	bl	e308 <wc_ecc_free>
    wc_ecc_init_ex(&key, HEAP_HINT, devId);
   15dde:	4b6f      	ldr	r3, [pc, #444]	; (15f9c <ecc_test_make_pub+0x6a8>)
   15de0:	681a      	ldr	r2, [r3, #0]
   15de2:	23eb      	movs	r3, #235	; 0xeb
   15de4:	009b      	lsls	r3, r3, #2
   15de6:	18fb      	adds	r3, r7, r3
   15de8:	2100      	movs	r1, #0
   15dea:	0018      	movs	r0, r3
   15dec:	f7f8 f8c2 	bl	df74 <wc_ecc_init_ex>
    ret = wc_ecc_import_private_key(exportBuf, x, NULL, 0, &key);
   15df0:	23e3      	movs	r3, #227	; 0xe3
   15df2:	009b      	lsls	r3, r3, #2
   15df4:	18fb      	adds	r3, r7, r3
   15df6:	6819      	ldr	r1, [r3, #0]
   15df8:	4b65      	ldr	r3, [pc, #404]	; (15f90 <ecc_test_make_pub+0x69c>)
   15dfa:	18fb      	adds	r3, r7, r3
   15dfc:	6818      	ldr	r0, [r3, #0]
   15dfe:	23eb      	movs	r3, #235	; 0xeb
   15e00:	009b      	lsls	r3, r3, #2
   15e02:	18fb      	adds	r3, r7, r3
   15e04:	9300      	str	r3, [sp, #0]
   15e06:	2300      	movs	r3, #0
   15e08:	2200      	movs	r2, #0
   15e0a:	f7f8 ff7d 	bl	ed08 <wc_ecc_import_private_key>
   15e0e:	0003      	movs	r3, r0
   15e10:	4a5c      	ldr	r2, [pc, #368]	; (15f84 <ecc_test_make_pub+0x690>)
   15e12:	18ba      	adds	r2, r7, r2
   15e14:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   15e16:	4b5b      	ldr	r3, [pc, #364]	; (15f84 <ecc_test_make_pub+0x690>)
   15e18:	18fb      	adds	r3, r7, r3
   15e1a:	681b      	ldr	r3, [r3, #0]
   15e1c:	2b00      	cmp	r3, #0
   15e1e:	d004      	beq.n	15e2a <ecc_test_make_pub+0x536>
        ERROR_OUT(-8329, done);
   15e20:	4b5f      	ldr	r3, [pc, #380]	; (15fa0 <ecc_test_make_pub+0x6ac>)
   15e22:	4a58      	ldr	r2, [pc, #352]	; (15f84 <ecc_test_make_pub+0x690>)
   15e24:	18ba      	adds	r2, r7, r2
   15e26:	6013      	str	r3, [r2, #0]
   15e28:	e070      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

    /* check that public export fails with private only key */
    x = FOURK_BUF;
   15e2a:	2380      	movs	r3, #128	; 0x80
   15e2c:	015b      	lsls	r3, r3, #5
   15e2e:	22e3      	movs	r2, #227	; 0xe3
   15e30:	0092      	lsls	r2, r2, #2
   15e32:	18ba      	adds	r2, r7, r2
   15e34:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_x963_ex(&key, exportBuf, &x, 0);
   15e36:	23e3      	movs	r3, #227	; 0xe3
   15e38:	009b      	lsls	r3, r3, #2
   15e3a:	18fa      	adds	r2, r7, r3
   15e3c:	4b54      	ldr	r3, [pc, #336]	; (15f90 <ecc_test_make_pub+0x69c>)
   15e3e:	18fb      	adds	r3, r7, r3
   15e40:	6819      	ldr	r1, [r3, #0]
   15e42:	23eb      	movs	r3, #235	; 0xeb
   15e44:	009b      	lsls	r3, r3, #2
   15e46:	18f8      	adds	r0, r7, r3
   15e48:	2300      	movs	r3, #0
   15e4a:	f7f8 fd31 	bl	e8b0 <wc_ecc_export_x963_ex>
   15e4e:	0003      	movs	r3, r0
   15e50:	4a4c      	ldr	r2, [pc, #304]	; (15f84 <ecc_test_make_pub+0x690>)
   15e52:	18ba      	adds	r2, r7, r2
   15e54:	6013      	str	r3, [r2, #0]
    if (ret == 0) {
   15e56:	4b4b      	ldr	r3, [pc, #300]	; (15f84 <ecc_test_make_pub+0x690>)
   15e58:	18fb      	adds	r3, r7, r3
   15e5a:	681b      	ldr	r3, [r3, #0]
   15e5c:	2b00      	cmp	r3, #0
   15e5e:	d104      	bne.n	15e6a <ecc_test_make_pub+0x576>
        ERROR_OUT(-8330, done);
   15e60:	4b50      	ldr	r3, [pc, #320]	; (15fa4 <ecc_test_make_pub+0x6b0>)
   15e62:	4a48      	ldr	r2, [pc, #288]	; (15f84 <ecc_test_make_pub+0x690>)
   15e64:	18ba      	adds	r2, r7, r2
   15e66:	6013      	str	r3, [r2, #0]
   15e68:	e050      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

    /* make public key for shared secret */
    wc_ecc_init_ex(&pub, HEAP_HINT, devId);
   15e6a:	4b4c      	ldr	r3, [pc, #304]	; (15f9c <ecc_test_make_pub+0x6a8>)
   15e6c:	681a      	ldr	r2, [r3, #0]
   15e6e:	2310      	movs	r3, #16
   15e70:	18fb      	adds	r3, r7, r3
   15e72:	2100      	movs	r1, #0
   15e74:	0018      	movs	r0, r3
   15e76:	f7f8 f87d 	bl	df74 <wc_ecc_init_ex>
    ret = wc_ecc_make_key(rng, 32, &pub);
   15e7a:	2310      	movs	r3, #16
   15e7c:	18fa      	adds	r2, r7, r3
   15e7e:	687b      	ldr	r3, [r7, #4]
   15e80:	2120      	movs	r1, #32
   15e82:	0018      	movs	r0, r3
   15e84:	f7f8 f864 	bl	df50 <wc_ecc_make_key>
   15e88:	0003      	movs	r3, r0
   15e8a:	4a3e      	ldr	r2, [pc, #248]	; (15f84 <ecc_test_make_pub+0x690>)
   15e8c:	18ba      	adds	r2, r7, r2
   15e8e:	6013      	str	r3, [r2, #0]
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &pub.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0) {
   15e90:	4b3c      	ldr	r3, [pc, #240]	; (15f84 <ecc_test_make_pub+0x690>)
   15e92:	18fb      	adds	r3, r7, r3
   15e94:	681b      	ldr	r3, [r3, #0]
   15e96:	2b00      	cmp	r3, #0
   15e98:	d004      	beq.n	15ea4 <ecc_test_make_pub+0x5b0>
        ERROR_OUT(-8331, done);
   15e9a:	4b43      	ldr	r3, [pc, #268]	; (15fa8 <ecc_test_make_pub+0x6b4>)
   15e9c:	4a39      	ldr	r2, [pc, #228]	; (15f84 <ecc_test_make_pub+0x690>)
   15e9e:	18ba      	adds	r2, r7, r2
   15ea0:	6013      	str	r3, [r2, #0]
   15ea2:	e033      	b.n	15f0c <ecc_test_make_pub+0x618>
    }

    x = FOURK_BUF;
   15ea4:	2380      	movs	r3, #128	; 0x80
   15ea6:	015b      	lsls	r3, r3, #5
   15ea8:	22e3      	movs	r2, #227	; 0xe3
   15eaa:	0092      	lsls	r2, r2, #2
   15eac:	18ba      	adds	r2, r7, r2
   15eae:	6013      	str	r3, [r2, #0]
    do {
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &key.asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
    #endif
        if (ret == 0) {
   15eb0:	4b34      	ldr	r3, [pc, #208]	; (15f84 <ecc_test_make_pub+0x690>)
   15eb2:	18fb      	adds	r3, r7, r3
   15eb4:	681b      	ldr	r3, [r3, #0]
   15eb6:	2b00      	cmp	r3, #0
   15eb8:	d110      	bne.n	15edc <ecc_test_make_pub+0x5e8>
            ret = wc_ecc_shared_secret(&key, &pub, exportBuf, &x);
   15eba:	23e3      	movs	r3, #227	; 0xe3
   15ebc:	009b      	lsls	r3, r3, #2
   15ebe:	18fb      	adds	r3, r7, r3
   15ec0:	4a33      	ldr	r2, [pc, #204]	; (15f90 <ecc_test_make_pub+0x69c>)
   15ec2:	18ba      	adds	r2, r7, r2
   15ec4:	6812      	ldr	r2, [r2, #0]
   15ec6:	2110      	movs	r1, #16
   15ec8:	1879      	adds	r1, r7, r1
   15eca:	20eb      	movs	r0, #235	; 0xeb
   15ecc:	0080      	lsls	r0, r0, #2
   15ece:	1838      	adds	r0, r7, r0
   15ed0:	f7f7 ff30 	bl	dd34 <wc_ecc_shared_secret>
   15ed4:	0003      	movs	r3, r0
   15ed6:	4a2b      	ldr	r2, [pc, #172]	; (15f84 <ecc_test_make_pub+0x690>)
   15ed8:	18ba      	adds	r2, r7, r2
   15eda:	6013      	str	r3, [r2, #0]
        }
    } while (ret == WC_PENDING_E);
   15edc:	4b29      	ldr	r3, [pc, #164]	; (15f84 <ecc_test_make_pub+0x690>)
   15ede:	18fb      	adds	r3, r7, r3
   15ee0:	681b      	ldr	r3, [r3, #0]
   15ee2:	336c      	adds	r3, #108	; 0x6c
   15ee4:	d0e4      	beq.n	15eb0 <ecc_test_make_pub+0x5bc>
    wc_ecc_free(&pub);
   15ee6:	2310      	movs	r3, #16
   15ee8:	18fb      	adds	r3, r7, r3
   15eea:	0018      	movs	r0, r3
   15eec:	f7f8 fa0c 	bl	e308 <wc_ecc_free>
    if (ret != 0) {
   15ef0:	4b24      	ldr	r3, [pc, #144]	; (15f84 <ecc_test_make_pub+0x690>)
   15ef2:	18fb      	adds	r3, r7, r3
   15ef4:	681b      	ldr	r3, [r3, #0]
   15ef6:	2b00      	cmp	r3, #0
   15ef8:	d004      	beq.n	15f04 <ecc_test_make_pub+0x610>
        ERROR_OUT(-8332, done);
   15efa:	4b2c      	ldr	r3, [pc, #176]	; (15fac <ecc_test_make_pub+0x6b8>)
   15efc:	4a21      	ldr	r2, [pc, #132]	; (15f84 <ecc_test_make_pub+0x690>)
   15efe:	18ba      	adds	r2, r7, r2
   15f00:	6013      	str	r3, [r2, #0]
   15f02:	e003      	b.n	15f0c <ecc_test_make_pub+0x618>
    }
#endif /* HAVE_ECC_DHE && HAVE_ECC_KEY_EXPORT */

    ret = 0;
   15f04:	2300      	movs	r3, #0
   15f06:	4a1f      	ldr	r2, [pc, #124]	; (15f84 <ecc_test_make_pub+0x690>)
   15f08:	18ba      	adds	r2, r7, r2
   15f0a:	6013      	str	r3, [r2, #0]

done:

    XFREE(tmp, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
   15f0c:	23e6      	movs	r3, #230	; 0xe6
   15f0e:	00db      	lsls	r3, r3, #3
   15f10:	18fb      	adds	r3, r7, r3
   15f12:	681b      	ldr	r3, [r3, #0]
   15f14:	22e5      	movs	r2, #229	; 0xe5
   15f16:	00d2      	lsls	r2, r2, #3
   15f18:	18ba      	adds	r2, r7, r2
   15f1a:	6013      	str	r3, [r2, #0]
   15f1c:	23e5      	movs	r3, #229	; 0xe5
   15f1e:	00db      	lsls	r3, r3, #3
   15f20:	18fb      	adds	r3, r7, r3
   15f22:	681b      	ldr	r3, [r3, #0]
   15f24:	2b00      	cmp	r3, #0
   15f26:	d006      	beq.n	15f36 <ecc_test_make_pub+0x642>
   15f28:	23e5      	movs	r3, #229	; 0xe5
   15f2a:	00db      	lsls	r3, r3, #3
   15f2c:	18fb      	adds	r3, r7, r3
   15f2e:	681b      	ldr	r3, [r3, #0]
   15f30:	0018      	movs	r0, r3
   15f32:	f00f fbb1 	bl	25698 <free>
    XFREE(exportBuf, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
   15f36:	4b16      	ldr	r3, [pc, #88]	; (15f90 <ecc_test_make_pub+0x69c>)
   15f38:	18fb      	adds	r3, r7, r3
   15f3a:	681b      	ldr	r3, [r3, #0]
   15f3c:	4a1c      	ldr	r2, [pc, #112]	; (15fb0 <ecc_test_make_pub+0x6bc>)
   15f3e:	18ba      	adds	r2, r7, r2
   15f40:	6013      	str	r3, [r2, #0]
   15f42:	4b1b      	ldr	r3, [pc, #108]	; (15fb0 <ecc_test_make_pub+0x6bc>)
   15f44:	18fb      	adds	r3, r7, r3
   15f46:	681b      	ldr	r3, [r3, #0]
   15f48:	2b00      	cmp	r3, #0
   15f4a:	d005      	beq.n	15f58 <ecc_test_make_pub+0x664>
   15f4c:	4b18      	ldr	r3, [pc, #96]	; (15fb0 <ecc_test_make_pub+0x6bc>)
   15f4e:	18fb      	adds	r3, r7, r3
   15f50:	681b      	ldr	r3, [r3, #0]
   15f52:	0018      	movs	r0, r3
   15f54:	f00f fba0 	bl	25698 <free>

    wc_ecc_del_point_h(pubPoint, HEAP_HINT);
   15f58:	23e7      	movs	r3, #231	; 0xe7
   15f5a:	00db      	lsls	r3, r3, #3
   15f5c:	18fb      	adds	r3, r7, r3
   15f5e:	681b      	ldr	r3, [r3, #0]
   15f60:	2100      	movs	r1, #0
   15f62:	0018      	movs	r0, r3
   15f64:	f7f7 fe3c 	bl	dbe0 <wc_ecc_del_point_h>
    wc_ecc_free(&key);
   15f68:	23eb      	movs	r3, #235	; 0xeb
   15f6a:	009b      	lsls	r3, r3, #2
   15f6c:	18fb      	adds	r3, r7, r3
   15f6e:	0018      	movs	r0, r3
   15f70:	f7f8 f9ca 	bl	e308 <wc_ecc_free>

    return ret;
   15f74:	4b03      	ldr	r3, [pc, #12]	; (15f84 <ecc_test_make_pub+0x690>)
   15f76:	18fb      	adds	r3, r7, r3
   15f78:	681b      	ldr	r3, [r3, #0]
}
   15f7a:	0018      	movs	r0, r3
   15f7c:	46bd      	mov	sp, r7
   15f7e:	4b0d      	ldr	r3, [pc, #52]	; (15fb4 <ecc_test_make_pub+0x6c0>)
   15f80:	449d      	add	sp, r3
   15f82:	bd90      	pop	{r4, r7, pc}
   15f84:	0000073c 	.word	0x0000073c
   15f88:	ffffdf7b 	.word	0xffffdf7b
   15f8c:	ffffdf7a 	.word	0xffffdf7a
   15f90:	00000734 	.word	0x00000734
   15f94:	ffffdf79 	.word	0xffffdf79
   15f98:	ffffdf78 	.word	0xffffdf78
   15f9c:	20000010 	.word	0x20000010
   15fa0:	ffffdf77 	.word	0xffffdf77
   15fa4:	ffffdf76 	.word	0xffffdf76
   15fa8:	ffffdf75 	.word	0xffffdf75
   15fac:	ffffdf74 	.word	0xffffdf74
   15fb0:	00000724 	.word	0x00000724
   15fb4:	00000744 	.word	0x00000744

00015fb8 <ecc_test_curve_size>:
}
#endif /* WOLFSSL_KEY_GEN */

static int ecc_test_curve_size(WC_RNG* rng, int keySize, int testVerifyCount,
    int curve_id, const ecc_set_type* dp)
{
   15fb8:	b580      	push	{r7, lr}
   15fba:	4fcb      	ldr	r7, [pc, #812]	; (162e8 <ecc_test_curve_size+0x330>)
   15fbc:	44bd      	add	sp, r7
   15fbe:	af02      	add	r7, sp, #8
   15fc0:	60f8      	str	r0, [r7, #12]
   15fc2:	60b9      	str	r1, [r7, #8]
   15fc4:	607a      	str	r2, [r7, #4]
   15fc6:	603b      	str	r3, [r7, #0]
    int     curveSize;

    (void)testVerifyCount;
    (void)dp;

    XMEMSET(&userA, 0, sizeof(ecc_key));
   15fc8:	23de      	movs	r3, #222	; 0xde
   15fca:	009a      	lsls	r2, r3, #2
   15fcc:	4bc7      	ldr	r3, [pc, #796]	; (162ec <ecc_test_curve_size+0x334>)
   15fce:	18fb      	adds	r3, r7, r3
   15fd0:	2100      	movs	r1, #0
   15fd2:	0018      	movs	r0, r3
   15fd4:	f00f fba9 	bl	2572a <memset>
    XMEMSET(&userB, 0, sizeof(ecc_key));
   15fd8:	23de      	movs	r3, #222	; 0xde
   15fda:	009a      	lsls	r2, r3, #2
   15fdc:	23e3      	movs	r3, #227	; 0xe3
   15fde:	009b      	lsls	r3, r3, #2
   15fe0:	18fb      	adds	r3, r7, r3
   15fe2:	2100      	movs	r1, #0
   15fe4:	0018      	movs	r0, r3
   15fe6:	f00f fba0 	bl	2572a <memset>
    XMEMSET(&pubKey, 0, sizeof(ecc_key));
   15fea:	23de      	movs	r3, #222	; 0xde
   15fec:	009a      	lsls	r2, r3, #2
   15fee:	2314      	movs	r3, #20
   15ff0:	18fb      	adds	r3, r7, r3
   15ff2:	2100      	movs	r1, #0
   15ff4:	0018      	movs	r0, r3
   15ff6:	f00f fb98 	bl	2572a <memset>

    ret = wc_ecc_init_ex(&userA, HEAP_HINT, devId);
   15ffa:	4bbd      	ldr	r3, [pc, #756]	; (162f0 <ecc_test_curve_size+0x338>)
   15ffc:	681a      	ldr	r2, [r3, #0]
   15ffe:	4bbb      	ldr	r3, [pc, #748]	; (162ec <ecc_test_curve_size+0x334>)
   16000:	18fb      	adds	r3, r7, r3
   16002:	2100      	movs	r1, #0
   16004:	0018      	movs	r0, r3
   16006:	f7f7 ffb5 	bl	df74 <wc_ecc_init_ex>
   1600a:	0003      	movs	r3, r0
   1600c:	4ab9      	ldr	r2, [pc, #740]	; (162f4 <ecc_test_curve_size+0x33c>)
   1600e:	18ba      	adds	r2, r7, r2
   16010:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   16012:	4bb8      	ldr	r3, [pc, #736]	; (162f4 <ecc_test_curve_size+0x33c>)
   16014:	18fb      	adds	r3, r7, r3
   16016:	681b      	ldr	r3, [r3, #0]
   16018:	2b00      	cmp	r3, #0
   1601a:	d000      	beq.n	1601e <ecc_test_curve_size+0x66>
   1601c:	e228      	b.n	16470 <ecc_test_curve_size+0x4b8>
        goto done;
    ret = wc_ecc_init_ex(&userB, HEAP_HINT, devId);
   1601e:	4bb4      	ldr	r3, [pc, #720]	; (162f0 <ecc_test_curve_size+0x338>)
   16020:	681a      	ldr	r2, [r3, #0]
   16022:	23e3      	movs	r3, #227	; 0xe3
   16024:	009b      	lsls	r3, r3, #2
   16026:	18fb      	adds	r3, r7, r3
   16028:	2100      	movs	r1, #0
   1602a:	0018      	movs	r0, r3
   1602c:	f7f7 ffa2 	bl	df74 <wc_ecc_init_ex>
   16030:	0003      	movs	r3, r0
   16032:	4ab0      	ldr	r2, [pc, #704]	; (162f4 <ecc_test_curve_size+0x33c>)
   16034:	18ba      	adds	r2, r7, r2
   16036:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   16038:	4bae      	ldr	r3, [pc, #696]	; (162f4 <ecc_test_curve_size+0x33c>)
   1603a:	18fb      	adds	r3, r7, r3
   1603c:	681b      	ldr	r3, [r3, #0]
   1603e:	2b00      	cmp	r3, #0
   16040:	d000      	beq.n	16044 <ecc_test_curve_size+0x8c>
   16042:	e217      	b.n	16474 <ecc_test_curve_size+0x4bc>
        goto done;
    ret = wc_ecc_init_ex(&pubKey, HEAP_HINT, devId);
   16044:	4baa      	ldr	r3, [pc, #680]	; (162f0 <ecc_test_curve_size+0x338>)
   16046:	681a      	ldr	r2, [r3, #0]
   16048:	2314      	movs	r3, #20
   1604a:	18fb      	adds	r3, r7, r3
   1604c:	2100      	movs	r1, #0
   1604e:	0018      	movs	r0, r3
   16050:	f7f7 ff90 	bl	df74 <wc_ecc_init_ex>
   16054:	0003      	movs	r3, r0
   16056:	4aa7      	ldr	r2, [pc, #668]	; (162f4 <ecc_test_curve_size+0x33c>)
   16058:	18ba      	adds	r2, r7, r2
   1605a:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   1605c:	4ba5      	ldr	r3, [pc, #660]	; (162f4 <ecc_test_curve_size+0x33c>)
   1605e:	18fb      	adds	r3, r7, r3
   16060:	681b      	ldr	r3, [r3, #0]
   16062:	2b00      	cmp	r3, #0
   16064:	d000      	beq.n	16068 <ecc_test_curve_size+0xb0>
   16066:	e207      	b.n	16478 <ecc_test_curve_size+0x4c0>
        if (ret != 0)
            goto done;
    }
#endif

    ret = wc_ecc_make_key_ex(rng, keySize, &userA, curve_id);
   16068:	683b      	ldr	r3, [r7, #0]
   1606a:	4aa0      	ldr	r2, [pc, #640]	; (162ec <ecc_test_curve_size+0x334>)
   1606c:	18ba      	adds	r2, r7, r2
   1606e:	68b9      	ldr	r1, [r7, #8]
   16070:	68f8      	ldr	r0, [r7, #12]
   16072:	f7f7 fefb 	bl	de6c <wc_ecc_make_key_ex>
   16076:	0003      	movs	r3, r0
   16078:	4a9e      	ldr	r2, [pc, #632]	; (162f4 <ecc_test_curve_size+0x33c>)
   1607a:	18ba      	adds	r2, r7, r2
   1607c:	6013      	str	r3, [r2, #0]
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &userA.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0)
   1607e:	4b9d      	ldr	r3, [pc, #628]	; (162f4 <ecc_test_curve_size+0x33c>)
   16080:	18fb      	adds	r3, r7, r3
   16082:	681b      	ldr	r3, [r3, #0]
   16084:	2b00      	cmp	r3, #0
   16086:	d000      	beq.n	1608a <ecc_test_curve_size+0xd2>
   16088:	e1f8      	b.n	1647c <ecc_test_curve_size+0x4c4>
        goto done;

    if (wc_ecc_get_curve_idx(curve_id) != -1) {
   1608a:	683b      	ldr	r3, [r7, #0]
   1608c:	0018      	movs	r0, r3
   1608e:	f7f7 fded 	bl	dc6c <wc_ecc_get_curve_idx>
   16092:	0003      	movs	r3, r0
   16094:	3301      	adds	r3, #1
   16096:	d020      	beq.n	160da <ecc_test_curve_size+0x122>
        curveSize = wc_ecc_get_curve_size_from_id(userA.dp->id);
   16098:	4b97      	ldr	r3, [pc, #604]	; (162f8 <ecc_test_curve_size+0x340>)
   1609a:	22c6      	movs	r2, #198	; 0xc6
   1609c:	0112      	lsls	r2, r2, #4
   1609e:	4694      	mov	ip, r2
   160a0:	44bc      	add	ip, r7
   160a2:	4463      	add	r3, ip
   160a4:	691b      	ldr	r3, [r3, #16]
   160a6:	685b      	ldr	r3, [r3, #4]
   160a8:	0018      	movs	r0, r3
   160aa:	f7f7 fe27 	bl	dcfc <wc_ecc_get_curve_size_from_id>
   160ae:	0003      	movs	r3, r0
   160b0:	4a92      	ldr	r2, [pc, #584]	; (162fc <ecc_test_curve_size+0x344>)
   160b2:	18ba      	adds	r2, r7, r2
   160b4:	6013      	str	r3, [r2, #0]
        if (curveSize != userA.dp->size) {
   160b6:	4b90      	ldr	r3, [pc, #576]	; (162f8 <ecc_test_curve_size+0x340>)
   160b8:	22c6      	movs	r2, #198	; 0xc6
   160ba:	0112      	lsls	r2, r2, #4
   160bc:	4694      	mov	ip, r2
   160be:	44bc      	add	ip, r7
   160c0:	4463      	add	r3, ip
   160c2:	691b      	ldr	r3, [r3, #16]
   160c4:	681a      	ldr	r2, [r3, #0]
   160c6:	4b8d      	ldr	r3, [pc, #564]	; (162fc <ecc_test_curve_size+0x344>)
   160c8:	18fb      	adds	r3, r7, r3
   160ca:	681b      	ldr	r3, [r3, #0]
   160cc:	429a      	cmp	r2, r3
   160ce:	d004      	beq.n	160da <ecc_test_curve_size+0x122>
            ret = -8337;
   160d0:	4b8b      	ldr	r3, [pc, #556]	; (16300 <ecc_test_curve_size+0x348>)
   160d2:	4a88      	ldr	r2, [pc, #544]	; (162f4 <ecc_test_curve_size+0x33c>)
   160d4:	18ba      	adds	r2, r7, r2
   160d6:	6013      	str	r3, [r2, #0]
            goto done;
   160d8:	e1e1      	b.n	1649e <ecc_test_curve_size+0x4e6>
        }
    }

    ret = wc_ecc_check_key(&userA);
   160da:	4b84      	ldr	r3, [pc, #528]	; (162ec <ecc_test_curve_size+0x334>)
   160dc:	18fb      	adds	r3, r7, r3
   160de:	0018      	movs	r0, r3
   160e0:	f7f8 fbfe 	bl	e8e0 <wc_ecc_check_key>
   160e4:	0003      	movs	r3, r0
   160e6:	4a83      	ldr	r2, [pc, #524]	; (162f4 <ecc_test_curve_size+0x33c>)
   160e8:	18ba      	adds	r2, r7, r2
   160ea:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   160ec:	4b81      	ldr	r3, [pc, #516]	; (162f4 <ecc_test_curve_size+0x33c>)
   160ee:	18fb      	adds	r3, r7, r3
   160f0:	681b      	ldr	r3, [r3, #0]
   160f2:	2b00      	cmp	r3, #0
   160f4:	d000      	beq.n	160f8 <ecc_test_curve_size+0x140>
   160f6:	e1c3      	b.n	16480 <ecc_test_curve_size+0x4c8>
        goto done;

    ret = wc_ecc_make_key_ex(rng, keySize, &userB, curve_id);
   160f8:	683b      	ldr	r3, [r7, #0]
   160fa:	22e3      	movs	r2, #227	; 0xe3
   160fc:	0092      	lsls	r2, r2, #2
   160fe:	18ba      	adds	r2, r7, r2
   16100:	68b9      	ldr	r1, [r7, #8]
   16102:	68f8      	ldr	r0, [r7, #12]
   16104:	f7f7 feb2 	bl	de6c <wc_ecc_make_key_ex>
   16108:	0003      	movs	r3, r0
   1610a:	4a7a      	ldr	r2, [pc, #488]	; (162f4 <ecc_test_curve_size+0x33c>)
   1610c:	18ba      	adds	r2, r7, r2
   1610e:	6013      	str	r3, [r2, #0]
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &userB.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0)
   16110:	4b78      	ldr	r3, [pc, #480]	; (162f4 <ecc_test_curve_size+0x33c>)
   16112:	18fb      	adds	r3, r7, r3
   16114:	681b      	ldr	r3, [r3, #0]
   16116:	2b00      	cmp	r3, #0
   16118:	d000      	beq.n	1611c <ecc_test_curve_size+0x164>
   1611a:	e1b3      	b.n	16484 <ecc_test_curve_size+0x4cc>
        goto done;

    /* only perform the below tests if the key size matches */
    if (dp == NULL && keySize > 0 && wc_ecc_size(&userA) != keySize) {
   1611c:	4b79      	ldr	r3, [pc, #484]	; (16304 <ecc_test_curve_size+0x34c>)
   1611e:	18fb      	adds	r3, r7, r3
   16120:	681b      	ldr	r3, [r3, #0]
   16122:	2b00      	cmp	r3, #0
   16124:	d111      	bne.n	1614a <ecc_test_curve_size+0x192>
   16126:	68bb      	ldr	r3, [r7, #8]
   16128:	2b00      	cmp	r3, #0
   1612a:	dd0e      	ble.n	1614a <ecc_test_curve_size+0x192>
   1612c:	4b6f      	ldr	r3, [pc, #444]	; (162ec <ecc_test_curve_size+0x334>)
   1612e:	18fb      	adds	r3, r7, r3
   16130:	0018      	movs	r0, r3
   16132:	f7f9 f8e1 	bl	f2f8 <wc_ecc_size>
   16136:	0002      	movs	r2, r0
   16138:	68bb      	ldr	r3, [r7, #8]
   1613a:	429a      	cmp	r2, r3
   1613c:	d005      	beq.n	1614a <ecc_test_curve_size+0x192>
        ret = ECC_CURVE_OID_E;
   1613e:	23ac      	movs	r3, #172	; 0xac
   16140:	425b      	negs	r3, r3
   16142:	4a6c      	ldr	r2, [pc, #432]	; (162f4 <ecc_test_curve_size+0x33c>)
   16144:	18ba      	adds	r2, r7, r2
   16146:	6013      	str	r3, [r2, #0]
        goto done;
   16148:	e1a9      	b.n	1649e <ecc_test_curve_size+0x4e6>
    }


#ifdef HAVE_ECC_DHE
    x = ECC_SHARED_SIZE;
   1614a:	2380      	movs	r3, #128	; 0x80
   1614c:	22af      	movs	r2, #175	; 0xaf
   1614e:	0112      	lsls	r2, r2, #4
   16150:	18ba      	adds	r2, r7, r2
   16152:	6013      	str	r3, [r2, #0]
    do {
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &userA.asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
    #endif
        if (ret == 0)
   16154:	4b67      	ldr	r3, [pc, #412]	; (162f4 <ecc_test_curve_size+0x33c>)
   16156:	18fb      	adds	r3, r7, r3
   16158:	681b      	ldr	r3, [r3, #0]
   1615a:	2b00      	cmp	r3, #0
   1615c:	d10f      	bne.n	1617e <ecc_test_curve_size+0x1c6>
            ret = wc_ecc_shared_secret(&userA, &userB, sharedA, &x);
   1615e:	23af      	movs	r3, #175	; 0xaf
   16160:	011b      	lsls	r3, r3, #4
   16162:	18fb      	adds	r3, r7, r3
   16164:	4a68      	ldr	r2, [pc, #416]	; (16308 <ecc_test_curve_size+0x350>)
   16166:	18ba      	adds	r2, r7, r2
   16168:	21e3      	movs	r1, #227	; 0xe3
   1616a:	0089      	lsls	r1, r1, #2
   1616c:	1879      	adds	r1, r7, r1
   1616e:	485f      	ldr	r0, [pc, #380]	; (162ec <ecc_test_curve_size+0x334>)
   16170:	1838      	adds	r0, r7, r0
   16172:	f7f7 fddf 	bl	dd34 <wc_ecc_shared_secret>
   16176:	0003      	movs	r3, r0
   16178:	4a5e      	ldr	r2, [pc, #376]	; (162f4 <ecc_test_curve_size+0x33c>)
   1617a:	18ba      	adds	r2, r7, r2
   1617c:	6013      	str	r3, [r2, #0]
    } while (ret == WC_PENDING_E);
   1617e:	4b5d      	ldr	r3, [pc, #372]	; (162f4 <ecc_test_curve_size+0x33c>)
   16180:	18fb      	adds	r3, r7, r3
   16182:	681b      	ldr	r3, [r3, #0]
   16184:	336c      	adds	r3, #108	; 0x6c
   16186:	d0e5      	beq.n	16154 <ecc_test_curve_size+0x19c>
    if (ret != 0) {
   16188:	4b5a      	ldr	r3, [pc, #360]	; (162f4 <ecc_test_curve_size+0x33c>)
   1618a:	18fb      	adds	r3, r7, r3
   1618c:	681b      	ldr	r3, [r3, #0]
   1618e:	2b00      	cmp	r3, #0
   16190:	d000      	beq.n	16194 <ecc_test_curve_size+0x1dc>
   16192:	e179      	b.n	16488 <ecc_test_curve_size+0x4d0>
        goto done;
    }

    y = ECC_SHARED_SIZE;
   16194:	2380      	movs	r3, #128	; 0x80
   16196:	4a5d      	ldr	r2, [pc, #372]	; (1630c <ecc_test_curve_size+0x354>)
   16198:	18ba      	adds	r2, r7, r2
   1619a:	6013      	str	r3, [r2, #0]
    do {
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &userB.asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
    #endif
        if (ret == 0)
   1619c:	4b55      	ldr	r3, [pc, #340]	; (162f4 <ecc_test_curve_size+0x33c>)
   1619e:	18fb      	adds	r3, r7, r3
   161a0:	681b      	ldr	r3, [r3, #0]
   161a2:	2b00      	cmp	r3, #0
   161a4:	d10e      	bne.n	161c4 <ecc_test_curve_size+0x20c>
            ret = wc_ecc_shared_secret(&userB, &userA, sharedB, &y);
   161a6:	4b59      	ldr	r3, [pc, #356]	; (1630c <ecc_test_curve_size+0x354>)
   161a8:	18fb      	adds	r3, r7, r3
   161aa:	4a59      	ldr	r2, [pc, #356]	; (16310 <ecc_test_curve_size+0x358>)
   161ac:	18ba      	adds	r2, r7, r2
   161ae:	494f      	ldr	r1, [pc, #316]	; (162ec <ecc_test_curve_size+0x334>)
   161b0:	1879      	adds	r1, r7, r1
   161b2:	20e3      	movs	r0, #227	; 0xe3
   161b4:	0080      	lsls	r0, r0, #2
   161b6:	1838      	adds	r0, r7, r0
   161b8:	f7f7 fdbc 	bl	dd34 <wc_ecc_shared_secret>
   161bc:	0003      	movs	r3, r0
   161be:	4a4d      	ldr	r2, [pc, #308]	; (162f4 <ecc_test_curve_size+0x33c>)
   161c0:	18ba      	adds	r2, r7, r2
   161c2:	6013      	str	r3, [r2, #0]
    } while (ret == WC_PENDING_E);
   161c4:	4b4b      	ldr	r3, [pc, #300]	; (162f4 <ecc_test_curve_size+0x33c>)
   161c6:	18fb      	adds	r3, r7, r3
   161c8:	681b      	ldr	r3, [r3, #0]
   161ca:	336c      	adds	r3, #108	; 0x6c
   161cc:	d0e6      	beq.n	1619c <ecc_test_curve_size+0x1e4>
    if (ret != 0)
   161ce:	4b49      	ldr	r3, [pc, #292]	; (162f4 <ecc_test_curve_size+0x33c>)
   161d0:	18fb      	adds	r3, r7, r3
   161d2:	681b      	ldr	r3, [r3, #0]
   161d4:	2b00      	cmp	r3, #0
   161d6:	d000      	beq.n	161da <ecc_test_curve_size+0x222>
   161d8:	e158      	b.n	1648c <ecc_test_curve_size+0x4d4>
        goto done;

    if (y != x)
   161da:	4b4c      	ldr	r3, [pc, #304]	; (1630c <ecc_test_curve_size+0x354>)
   161dc:	18fb      	adds	r3, r7, r3
   161de:	681a      	ldr	r2, [r3, #0]
   161e0:	23af      	movs	r3, #175	; 0xaf
   161e2:	011b      	lsls	r3, r3, #4
   161e4:	18fb      	adds	r3, r7, r3
   161e6:	681b      	ldr	r3, [r3, #0]
   161e8:	429a      	cmp	r2, r3
   161ea:	d004      	beq.n	161f6 <ecc_test_curve_size+0x23e>
        ERROR_OUT(-8338, done);
   161ec:	4b49      	ldr	r3, [pc, #292]	; (16314 <ecc_test_curve_size+0x35c>)
   161ee:	4a41      	ldr	r2, [pc, #260]	; (162f4 <ecc_test_curve_size+0x33c>)
   161f0:	18ba      	adds	r2, r7, r2
   161f2:	6013      	str	r3, [r2, #0]
   161f4:	e153      	b.n	1649e <ecc_test_curve_size+0x4e6>

    if (XMEMCMP(sharedA, sharedB, x))
   161f6:	23af      	movs	r3, #175	; 0xaf
   161f8:	011b      	lsls	r3, r3, #4
   161fa:	18fb      	adds	r3, r7, r3
   161fc:	681a      	ldr	r2, [r3, #0]
   161fe:	4b44      	ldr	r3, [pc, #272]	; (16310 <ecc_test_curve_size+0x358>)
   16200:	18f9      	adds	r1, r7, r3
   16202:	4b41      	ldr	r3, [pc, #260]	; (16308 <ecc_test_curve_size+0x350>)
   16204:	18fb      	adds	r3, r7, r3
   16206:	0018      	movs	r0, r3
   16208:	f00f fa62 	bl	256d0 <memcmp>
   1620c:	1e03      	subs	r3, r0, #0
   1620e:	d004      	beq.n	1621a <ecc_test_curve_size+0x262>
        ERROR_OUT(-8339, done);
   16210:	4b41      	ldr	r3, [pc, #260]	; (16318 <ecc_test_curve_size+0x360>)
   16212:	4a38      	ldr	r2, [pc, #224]	; (162f4 <ecc_test_curve_size+0x33c>)
   16214:	18ba      	adds	r2, r7, r2
   16216:	6013      	str	r3, [r2, #0]
   16218:	e141      	b.n	1649e <ecc_test_curve_size+0x4e6>
    wc_ecc_set_flags(&userA, 0);
    wc_ecc_set_flags(&userB, 0);
#endif /* HAVE_ECC_CDH */

#ifdef HAVE_ECC_KEY_EXPORT
    x = sizeof(exportBuf);
   1621a:	2360      	movs	r3, #96	; 0x60
   1621c:	22af      	movs	r2, #175	; 0xaf
   1621e:	0112      	lsls	r2, r2, #4
   16220:	18ba      	adds	r2, r7, r2
   16222:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_x963_ex(&userA, exportBuf, &x, 0);
   16224:	23af      	movs	r3, #175	; 0xaf
   16226:	011b      	lsls	r3, r3, #4
   16228:	18fa      	adds	r2, r7, r3
   1622a:	4b3c      	ldr	r3, [pc, #240]	; (1631c <ecc_test_curve_size+0x364>)
   1622c:	18f9      	adds	r1, r7, r3
   1622e:	4b2f      	ldr	r3, [pc, #188]	; (162ec <ecc_test_curve_size+0x334>)
   16230:	18f8      	adds	r0, r7, r3
   16232:	2300      	movs	r3, #0
   16234:	f7f8 fb3c 	bl	e8b0 <wc_ecc_export_x963_ex>
   16238:	0003      	movs	r3, r0
   1623a:	4a2e      	ldr	r2, [pc, #184]	; (162f4 <ecc_test_curve_size+0x33c>)
   1623c:	18ba      	adds	r2, r7, r2
   1623e:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   16240:	4b2c      	ldr	r3, [pc, #176]	; (162f4 <ecc_test_curve_size+0x33c>)
   16242:	18fb      	adds	r3, r7, r3
   16244:	681b      	ldr	r3, [r3, #0]
   16246:	2b00      	cmp	r3, #0
   16248:	d000      	beq.n	1624c <ecc_test_curve_size+0x294>
   1624a:	e121      	b.n	16490 <ecc_test_curve_size+0x4d8>
        if (dp != NULL) {
            ret = wc_ecc_set_custom_curve(&pubKey, dp);
            if (ret != 0) goto done;
        }
    #endif
    ret = wc_ecc_import_x963_ex(exportBuf, x, &pubKey, curve_id);
   1624c:	23af      	movs	r3, #175	; 0xaf
   1624e:	011b      	lsls	r3, r3, #4
   16250:	18fb      	adds	r3, r7, r3
   16252:	6819      	ldr	r1, [r3, #0]
   16254:	683b      	ldr	r3, [r7, #0]
   16256:	2214      	movs	r2, #20
   16258:	18ba      	adds	r2, r7, r2
   1625a:	4830      	ldr	r0, [pc, #192]	; (1631c <ecc_test_curve_size+0x364>)
   1625c:	1838      	adds	r0, r7, r0
   1625e:	f7f8 fb51 	bl	e904 <wc_ecc_import_x963_ex>
   16262:	0003      	movs	r3, r0
   16264:	4a23      	ldr	r2, [pc, #140]	; (162f4 <ecc_test_curve_size+0x33c>)
   16266:	18ba      	adds	r2, r7, r2
   16268:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   1626a:	4b22      	ldr	r3, [pc, #136]	; (162f4 <ecc_test_curve_size+0x33c>)
   1626c:	18fb      	adds	r3, r7, r3
   1626e:	681b      	ldr	r3, [r3, #0]
   16270:	2b00      	cmp	r3, #0
   16272:	d000      	beq.n	16276 <ecc_test_curve_size+0x2be>
   16274:	e10e      	b.n	16494 <ecc_test_curve_size+0x4dc>
        goto done;

#ifdef HAVE_ECC_DHE
    y = ECC_SHARED_SIZE;
   16276:	2380      	movs	r3, #128	; 0x80
   16278:	4a24      	ldr	r2, [pc, #144]	; (1630c <ecc_test_curve_size+0x354>)
   1627a:	18ba      	adds	r2, r7, r2
   1627c:	6013      	str	r3, [r2, #0]
    do {
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &userB.asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
    #endif
        if (ret == 0)
   1627e:	4b1d      	ldr	r3, [pc, #116]	; (162f4 <ecc_test_curve_size+0x33c>)
   16280:	18fb      	adds	r3, r7, r3
   16282:	681b      	ldr	r3, [r3, #0]
   16284:	2b00      	cmp	r3, #0
   16286:	d10e      	bne.n	162a6 <ecc_test_curve_size+0x2ee>
            ret = wc_ecc_shared_secret(&userB, &pubKey, sharedB, &y);
   16288:	4b20      	ldr	r3, [pc, #128]	; (1630c <ecc_test_curve_size+0x354>)
   1628a:	18fb      	adds	r3, r7, r3
   1628c:	4a20      	ldr	r2, [pc, #128]	; (16310 <ecc_test_curve_size+0x358>)
   1628e:	18ba      	adds	r2, r7, r2
   16290:	2114      	movs	r1, #20
   16292:	1879      	adds	r1, r7, r1
   16294:	20e3      	movs	r0, #227	; 0xe3
   16296:	0080      	lsls	r0, r0, #2
   16298:	1838      	adds	r0, r7, r0
   1629a:	f7f7 fd4b 	bl	dd34 <wc_ecc_shared_secret>
   1629e:	0003      	movs	r3, r0
   162a0:	4a14      	ldr	r2, [pc, #80]	; (162f4 <ecc_test_curve_size+0x33c>)
   162a2:	18ba      	adds	r2, r7, r2
   162a4:	6013      	str	r3, [r2, #0]
    } while (ret == WC_PENDING_E);
   162a6:	4b13      	ldr	r3, [pc, #76]	; (162f4 <ecc_test_curve_size+0x33c>)
   162a8:	18fb      	adds	r3, r7, r3
   162aa:	681b      	ldr	r3, [r3, #0]
   162ac:	336c      	adds	r3, #108	; 0x6c
   162ae:	d0e6      	beq.n	1627e <ecc_test_curve_size+0x2c6>
    if (ret != 0)
   162b0:	4b10      	ldr	r3, [pc, #64]	; (162f4 <ecc_test_curve_size+0x33c>)
   162b2:	18fb      	adds	r3, r7, r3
   162b4:	681b      	ldr	r3, [r3, #0]
   162b6:	2b00      	cmp	r3, #0
   162b8:	d000      	beq.n	162bc <ecc_test_curve_size+0x304>
   162ba:	e0ed      	b.n	16498 <ecc_test_curve_size+0x4e0>
        goto done;

    if (XMEMCMP(sharedA, sharedB, y))
   162bc:	4b13      	ldr	r3, [pc, #76]	; (1630c <ecc_test_curve_size+0x354>)
   162be:	18fb      	adds	r3, r7, r3
   162c0:	681a      	ldr	r2, [r3, #0]
   162c2:	4b13      	ldr	r3, [pc, #76]	; (16310 <ecc_test_curve_size+0x358>)
   162c4:	18f9      	adds	r1, r7, r3
   162c6:	4b10      	ldr	r3, [pc, #64]	; (16308 <ecc_test_curve_size+0x350>)
   162c8:	18fb      	adds	r3, r7, r3
   162ca:	0018      	movs	r0, r3
   162cc:	f00f fa00 	bl	256d0 <memcmp>
   162d0:	1e03      	subs	r3, r0, #0
   162d2:	d004      	beq.n	162de <ecc_test_curve_size+0x326>
        ERROR_OUT(-8342, done);
   162d4:	4b12      	ldr	r3, [pc, #72]	; (16320 <ecc_test_curve_size+0x368>)
   162d6:	4a07      	ldr	r2, [pc, #28]	; (162f4 <ecc_test_curve_size+0x33c>)
   162d8:	18ba      	adds	r2, r7, r2
   162da:	6013      	str	r3, [r2, #0]
   162dc:	e0df      	b.n	1649e <ecc_test_curve_size+0x4e6>
    }
#endif /* HAVE_ECC_VERIFY */
#endif /* ECC_SHAMIR && !WOLFSSL_ASYNC_CRYPT */

    /* test DSA sign hash with sequence (0,1,2,3,4,...) */
    for (i = 0; i < (int)ECC_DIGEST_SIZE; i++) {
   162de:	2300      	movs	r3, #0
   162e0:	4a10      	ldr	r2, [pc, #64]	; (16324 <ecc_test_curve_size+0x36c>)
   162e2:	18ba      	adds	r2, r7, r2
   162e4:	6013      	str	r3, [r2, #0]
   162e6:	e035      	b.n	16354 <ecc_test_curve_size+0x39c>
   162e8:	fffff398 	.word	0xfffff398
   162ec:	00000704 	.word	0x00000704
   162f0:	20000010 	.word	0x20000010
   162f4:	00000c58 	.word	0x00000c58
   162f8:	fffffaa4 	.word	0xfffffaa4
   162fc:	00000c54 	.word	0x00000c54
   16300:	ffffdf6f 	.word	0xffffdf6f
   16304:	00000c68 	.word	0x00000c68
   16308:	00000bd4 	.word	0x00000bd4
   1630c:	00000aec 	.word	0x00000aec
   16310:	00000b54 	.word	0x00000b54
   16314:	ffffdf6e 	.word	0xffffdf6e
   16318:	ffffdf6d 	.word	0xffffdf6d
   1631c:	00000af4 	.word	0x00000af4
   16320:	ffffdf6a 	.word	0xffffdf6a
   16324:	00000c5c 	.word	0x00000c5c
        digest[i] = (byte)i;
   16328:	4b69      	ldr	r3, [pc, #420]	; (164d0 <ecc_test_curve_size+0x518>)
   1632a:	18fb      	adds	r3, r7, r3
   1632c:	681b      	ldr	r3, [r3, #0]
   1632e:	b2d9      	uxtb	r1, r3
   16330:	4b68      	ldr	r3, [pc, #416]	; (164d4 <ecc_test_curve_size+0x51c>)
   16332:	22c6      	movs	r2, #198	; 0xc6
   16334:	0112      	lsls	r2, r2, #4
   16336:	18ba      	adds	r2, r7, r2
   16338:	18d2      	adds	r2, r2, r3
   1633a:	4b65      	ldr	r3, [pc, #404]	; (164d0 <ecc_test_curve_size+0x518>)
   1633c:	18fb      	adds	r3, r7, r3
   1633e:	681b      	ldr	r3, [r3, #0]
   16340:	18d3      	adds	r3, r2, r3
   16342:	1c0a      	adds	r2, r1, #0
   16344:	701a      	strb	r2, [r3, #0]
    }
#endif /* HAVE_ECC_VERIFY */
#endif /* ECC_SHAMIR && !WOLFSSL_ASYNC_CRYPT */

    /* test DSA sign hash with sequence (0,1,2,3,4,...) */
    for (i = 0; i < (int)ECC_DIGEST_SIZE; i++) {
   16346:	4b62      	ldr	r3, [pc, #392]	; (164d0 <ecc_test_curve_size+0x518>)
   16348:	18fb      	adds	r3, r7, r3
   1634a:	681b      	ldr	r3, [r3, #0]
   1634c:	3301      	adds	r3, #1
   1634e:	4a60      	ldr	r2, [pc, #384]	; (164d0 <ecc_test_curve_size+0x518>)
   16350:	18ba      	adds	r2, r7, r2
   16352:	6013      	str	r3, [r2, #0]
   16354:	4b5e      	ldr	r3, [pc, #376]	; (164d0 <ecc_test_curve_size+0x518>)
   16356:	18fb      	adds	r3, r7, r3
   16358:	681b      	ldr	r3, [r3, #0]
   1635a:	2b1f      	cmp	r3, #31
   1635c:	dde4      	ble.n	16328 <ecc_test_curve_size+0x370>
        digest[i] = (byte)i;
    }

    x = ECC_SIG_SIZE;
   1635e:	234a      	movs	r3, #74	; 0x4a
   16360:	22af      	movs	r2, #175	; 0xaf
   16362:	0112      	lsls	r2, r2, #4
   16364:	18ba      	adds	r2, r7, r2
   16366:	6013      	str	r3, [r2, #0]
    do {
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &userA.asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
    #endif
        if (ret == 0)
   16368:	4b5b      	ldr	r3, [pc, #364]	; (164d8 <ecc_test_curve_size+0x520>)
   1636a:	18fb      	adds	r3, r7, r3
   1636c:	681b      	ldr	r3, [r3, #0]
   1636e:	2b00      	cmp	r3, #0
   16370:	d115      	bne.n	1639e <ecc_test_curve_size+0x3e6>
            ret = wc_ecc_sign_hash(digest, ECC_DIGEST_SIZE, sig, &x, rng,
   16372:	23af      	movs	r3, #175	; 0xaf
   16374:	011b      	lsls	r3, r3, #4
   16376:	18f9      	adds	r1, r7, r3
   16378:	23aa      	movs	r3, #170	; 0xaa
   1637a:	011b      	lsls	r3, r3, #4
   1637c:	18fa      	adds	r2, r7, r3
   1637e:	23a8      	movs	r3, #168	; 0xa8
   16380:	011b      	lsls	r3, r3, #4
   16382:	18f8      	adds	r0, r7, r3
   16384:	4b55      	ldr	r3, [pc, #340]	; (164dc <ecc_test_curve_size+0x524>)
   16386:	18fb      	adds	r3, r7, r3
   16388:	9301      	str	r3, [sp, #4]
   1638a:	68fb      	ldr	r3, [r7, #12]
   1638c:	9300      	str	r3, [sp, #0]
   1638e:	000b      	movs	r3, r1
   16390:	2120      	movs	r1, #32
   16392:	f7f7 fee3 	bl	e15c <wc_ecc_sign_hash>
   16396:	0003      	movs	r3, r0
   16398:	4a4f      	ldr	r2, [pc, #316]	; (164d8 <ecc_test_curve_size+0x520>)
   1639a:	18ba      	adds	r2, r7, r2
   1639c:	6013      	str	r3, [r2, #0]
                                                                        &userA);
    } while (ret == WC_PENDING_E);
   1639e:	4b4e      	ldr	r3, [pc, #312]	; (164d8 <ecc_test_curve_size+0x520>)
   163a0:	18fb      	adds	r3, r7, r3
   163a2:	681b      	ldr	r3, [r3, #0]
   163a4:	336c      	adds	r3, #108	; 0x6c
   163a6:	d0df      	beq.n	16368 <ecc_test_curve_size+0x3b0>
    if (ret != 0)
   163a8:	4b4b      	ldr	r3, [pc, #300]	; (164d8 <ecc_test_curve_size+0x520>)
   163aa:	18fb      	adds	r3, r7, r3
   163ac:	681b      	ldr	r3, [r3, #0]
   163ae:	2b00      	cmp	r3, #0
   163b0:	d004      	beq.n	163bc <ecc_test_curve_size+0x404>
        ERROR_OUT(-8345, done);
   163b2:	4b4b      	ldr	r3, [pc, #300]	; (164e0 <ecc_test_curve_size+0x528>)
   163b4:	4a48      	ldr	r2, [pc, #288]	; (164d8 <ecc_test_curve_size+0x520>)
   163b6:	18ba      	adds	r2, r7, r2
   163b8:	6013      	str	r3, [r2, #0]
   163ba:	e070      	b.n	1649e <ecc_test_curve_size+0x4e6>

#ifdef HAVE_ECC_VERIFY
    for (i=0; i<testVerifyCount; i++) {
   163bc:	2300      	movs	r3, #0
   163be:	4a44      	ldr	r2, [pc, #272]	; (164d0 <ecc_test_curve_size+0x518>)
   163c0:	18ba      	adds	r2, r7, r2
   163c2:	6013      	str	r3, [r2, #0]
   163c4:	e03a      	b.n	1643c <ecc_test_curve_size+0x484>
        verify = 0;
   163c6:	2300      	movs	r3, #0
   163c8:	4a46      	ldr	r2, [pc, #280]	; (164e4 <ecc_test_curve_size+0x52c>)
   163ca:	18ba      	adds	r2, r7, r2
   163cc:	6013      	str	r3, [r2, #0]
        do {
        #if defined(WOLFSSL_ASYNC_CRYPT)
            ret = wc_AsyncWait(ret, &userA.asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
        #endif
            if (ret == 0)
   163ce:	4b42      	ldr	r3, [pc, #264]	; (164d8 <ecc_test_curve_size+0x520>)
   163d0:	18fb      	adds	r3, r7, r3
   163d2:	681b      	ldr	r3, [r3, #0]
   163d4:	2b00      	cmp	r3, #0
   163d6:	d116      	bne.n	16406 <ecc_test_curve_size+0x44e>
                ret = wc_ecc_verify_hash(sig, x, digest, ECC_DIGEST_SIZE,
   163d8:	23af      	movs	r3, #175	; 0xaf
   163da:	011b      	lsls	r3, r3, #4
   163dc:	18fb      	adds	r3, r7, r3
   163de:	6819      	ldr	r1, [r3, #0]
   163e0:	23a8      	movs	r3, #168	; 0xa8
   163e2:	011b      	lsls	r3, r3, #4
   163e4:	18fa      	adds	r2, r7, r3
   163e6:	23aa      	movs	r3, #170	; 0xaa
   163e8:	011b      	lsls	r3, r3, #4
   163ea:	18f8      	adds	r0, r7, r3
   163ec:	4b3b      	ldr	r3, [pc, #236]	; (164dc <ecc_test_curve_size+0x524>)
   163ee:	18fb      	adds	r3, r7, r3
   163f0:	9301      	str	r3, [sp, #4]
   163f2:	4b3c      	ldr	r3, [pc, #240]	; (164e4 <ecc_test_curve_size+0x52c>)
   163f4:	18fb      	adds	r3, r7, r3
   163f6:	9300      	str	r3, [sp, #0]
   163f8:	2320      	movs	r3, #32
   163fa:	f7f7 ff9f 	bl	e33c <wc_ecc_verify_hash>
   163fe:	0003      	movs	r3, r0
   16400:	4a35      	ldr	r2, [pc, #212]	; (164d8 <ecc_test_curve_size+0x520>)
   16402:	18ba      	adds	r2, r7, r2
   16404:	6013      	str	r3, [r2, #0]
                                                               &verify, &userA);
        } while (ret == WC_PENDING_E);
   16406:	4b34      	ldr	r3, [pc, #208]	; (164d8 <ecc_test_curve_size+0x520>)
   16408:	18fb      	adds	r3, r7, r3
   1640a:	681b      	ldr	r3, [r3, #0]
   1640c:	336c      	adds	r3, #108	; 0x6c
   1640e:	d0de      	beq.n	163ce <ecc_test_curve_size+0x416>
        if (ret != 0)
   16410:	4b31      	ldr	r3, [pc, #196]	; (164d8 <ecc_test_curve_size+0x520>)
   16412:	18fb      	adds	r3, r7, r3
   16414:	681b      	ldr	r3, [r3, #0]
   16416:	2b00      	cmp	r3, #0
   16418:	d140      	bne.n	1649c <ecc_test_curve_size+0x4e4>
            goto done;
        if (verify != 1)
   1641a:	4b32      	ldr	r3, [pc, #200]	; (164e4 <ecc_test_curve_size+0x52c>)
   1641c:	18fb      	adds	r3, r7, r3
   1641e:	681b      	ldr	r3, [r3, #0]
   16420:	2b01      	cmp	r3, #1
   16422:	d004      	beq.n	1642e <ecc_test_curve_size+0x476>
            ERROR_OUT(-8346, done);
   16424:	4b30      	ldr	r3, [pc, #192]	; (164e8 <ecc_test_curve_size+0x530>)
   16426:	4a2c      	ldr	r2, [pc, #176]	; (164d8 <ecc_test_curve_size+0x520>)
   16428:	18ba      	adds	r2, r7, r2
   1642a:	6013      	str	r3, [r2, #0]
   1642c:	e037      	b.n	1649e <ecc_test_curve_size+0x4e6>
    } while (ret == WC_PENDING_E);
    if (ret != 0)
        ERROR_OUT(-8345, done);

#ifdef HAVE_ECC_VERIFY
    for (i=0; i<testVerifyCount; i++) {
   1642e:	4b28      	ldr	r3, [pc, #160]	; (164d0 <ecc_test_curve_size+0x518>)
   16430:	18fb      	adds	r3, r7, r3
   16432:	681b      	ldr	r3, [r3, #0]
   16434:	3301      	adds	r3, #1
   16436:	4a26      	ldr	r2, [pc, #152]	; (164d0 <ecc_test_curve_size+0x518>)
   16438:	18ba      	adds	r2, r7, r2
   1643a:	6013      	str	r3, [r2, #0]
   1643c:	4b24      	ldr	r3, [pc, #144]	; (164d0 <ecc_test_curve_size+0x518>)
   1643e:	18fb      	adds	r3, r7, r3
   16440:	681a      	ldr	r2, [r3, #0]
   16442:	687b      	ldr	r3, [r7, #4]
   16444:	429a      	cmp	r2, r3
   16446:	dbbe      	blt.n	163c6 <ecc_test_curve_size+0x40e>
    }
#endif /* HAVE_ECC_VERIFY */
#endif /* HAVE_ECC_SIGN */

#ifdef HAVE_ECC_KEY_EXPORT
    x = sizeof(exportBuf);
   16448:	2360      	movs	r3, #96	; 0x60
   1644a:	22af      	movs	r2, #175	; 0xaf
   1644c:	0112      	lsls	r2, r2, #4
   1644e:	18ba      	adds	r2, r7, r2
   16450:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_private_only(&userA, exportBuf, &x);
   16452:	23af      	movs	r3, #175	; 0xaf
   16454:	011b      	lsls	r3, r3, #4
   16456:	18fa      	adds	r2, r7, r3
   16458:	4b24      	ldr	r3, [pc, #144]	; (164ec <ecc_test_curve_size+0x534>)
   1645a:	18f9      	adds	r1, r7, r3
   1645c:	4b1f      	ldr	r3, [pc, #124]	; (164dc <ecc_test_curve_size+0x524>)
   1645e:	18fb      	adds	r3, r7, r3
   16460:	0018      	movs	r0, r3
   16462:	f7f8 fba1 	bl	eba8 <wc_ecc_export_private_only>
   16466:	0003      	movs	r3, r0
   16468:	4a1b      	ldr	r2, [pc, #108]	; (164d8 <ecc_test_curve_size+0x520>)
   1646a:	18ba      	adds	r2, r7, r2
   1646c:	6013      	str	r3, [r2, #0]
   1646e:	e016      	b.n	1649e <ecc_test_curve_size+0x4e6>
    XMEMSET(&userB, 0, sizeof(ecc_key));
    XMEMSET(&pubKey, 0, sizeof(ecc_key));

    ret = wc_ecc_init_ex(&userA, HEAP_HINT, devId);
    if (ret != 0)
        goto done;
   16470:	46c0      	nop			; (mov r8, r8)
   16472:	e014      	b.n	1649e <ecc_test_curve_size+0x4e6>
    ret = wc_ecc_init_ex(&userB, HEAP_HINT, devId);
    if (ret != 0)
        goto done;
   16474:	46c0      	nop			; (mov r8, r8)
   16476:	e012      	b.n	1649e <ecc_test_curve_size+0x4e6>
    ret = wc_ecc_init_ex(&pubKey, HEAP_HINT, devId);
    if (ret != 0)
        goto done;
   16478:	46c0      	nop			; (mov r8, r8)
   1647a:	e010      	b.n	1649e <ecc_test_curve_size+0x4e6>
    ret = wc_ecc_make_key_ex(rng, keySize, &userA, curve_id);
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &userA.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0)
        goto done;
   1647c:	46c0      	nop			; (mov r8, r8)
   1647e:	e00e      	b.n	1649e <ecc_test_curve_size+0x4e6>
        }
    }

    ret = wc_ecc_check_key(&userA);
    if (ret != 0)
        goto done;
   16480:	46c0      	nop			; (mov r8, r8)
   16482:	e00c      	b.n	1649e <ecc_test_curve_size+0x4e6>
    ret = wc_ecc_make_key_ex(rng, keySize, &userB, curve_id);
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &userB.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0)
        goto done;
   16484:	46c0      	nop			; (mov r8, r8)
   16486:	e00a      	b.n	1649e <ecc_test_curve_size+0x4e6>
    #endif
        if (ret == 0)
            ret = wc_ecc_shared_secret(&userA, &userB, sharedA, &x);
    } while (ret == WC_PENDING_E);
    if (ret != 0) {
        goto done;
   16488:	46c0      	nop			; (mov r8, r8)
   1648a:	e008      	b.n	1649e <ecc_test_curve_size+0x4e6>
    #endif
        if (ret == 0)
            ret = wc_ecc_shared_secret(&userB, &userA, sharedB, &y);
    } while (ret == WC_PENDING_E);
    if (ret != 0)
        goto done;
   1648c:	46c0      	nop			; (mov r8, r8)
   1648e:	e006      	b.n	1649e <ecc_test_curve_size+0x4e6>

#ifdef HAVE_ECC_KEY_EXPORT
    x = sizeof(exportBuf);
    ret = wc_ecc_export_x963_ex(&userA, exportBuf, &x, 0);
    if (ret != 0)
        goto done;
   16490:	46c0      	nop			; (mov r8, r8)
   16492:	e004      	b.n	1649e <ecc_test_curve_size+0x4e6>
            if (ret != 0) goto done;
        }
    #endif
    ret = wc_ecc_import_x963_ex(exportBuf, x, &pubKey, curve_id);
    if (ret != 0)
        goto done;
   16494:	46c0      	nop			; (mov r8, r8)
   16496:	e002      	b.n	1649e <ecc_test_curve_size+0x4e6>
    #endif
        if (ret == 0)
            ret = wc_ecc_shared_secret(&userB, &pubKey, sharedB, &y);
    } while (ret == WC_PENDING_E);
    if (ret != 0)
        goto done;
   16498:	46c0      	nop			; (mov r8, r8)
   1649a:	e000      	b.n	1649e <ecc_test_curve_size+0x4e6>
            if (ret == 0)
                ret = wc_ecc_verify_hash(sig, x, digest, ECC_DIGEST_SIZE,
                                                               &verify, &userA);
        } while (ret == WC_PENDING_E);
        if (ret != 0)
            goto done;
   1649c:	46c0      	nop			; (mov r8, r8)
    if (ret != 0)
        goto done;
#endif /* HAVE_ECC_KEY_EXPORT */

done:
    wc_ecc_free(&pubKey);
   1649e:	2314      	movs	r3, #20
   164a0:	18fb      	adds	r3, r7, r3
   164a2:	0018      	movs	r0, r3
   164a4:	f7f7 ff30 	bl	e308 <wc_ecc_free>
    wc_ecc_free(&userB);
   164a8:	23e3      	movs	r3, #227	; 0xe3
   164aa:	009b      	lsls	r3, r3, #2
   164ac:	18fb      	adds	r3, r7, r3
   164ae:	0018      	movs	r0, r3
   164b0:	f7f7 ff2a 	bl	e308 <wc_ecc_free>
    wc_ecc_free(&userA);
   164b4:	4b09      	ldr	r3, [pc, #36]	; (164dc <ecc_test_curve_size+0x524>)
   164b6:	18fb      	adds	r3, r7, r3
   164b8:	0018      	movs	r0, r3
   164ba:	f7f7 ff25 	bl	e308 <wc_ecc_free>
#ifdef HAVE_ECC_SIGN
    FREE_VAR(sig, HEAP_HINT);
    FREE_VAR(digest, HEAP_HINT);
#endif

    return ret;
   164be:	4b06      	ldr	r3, [pc, #24]	; (164d8 <ecc_test_curve_size+0x520>)
   164c0:	18fb      	adds	r3, r7, r3
   164c2:	681b      	ldr	r3, [r3, #0]
}
   164c4:	0018      	movs	r0, r3
   164c6:	46bd      	mov	sp, r7
   164c8:	23c6      	movs	r3, #198	; 0xc6
   164ca:	011b      	lsls	r3, r3, #4
   164cc:	449d      	add	sp, r3
   164ce:	bd80      	pop	{r7, pc}
   164d0:	00000c5c 	.word	0x00000c5c
   164d4:	fffffe20 	.word	0xfffffe20
   164d8:	00000c58 	.word	0x00000c58
   164dc:	00000704 	.word	0x00000704
   164e0:	ffffdf67 	.word	0xffffdf67
   164e4:	00000a7c 	.word	0x00000a7c
   164e8:	ffffdf66 	.word	0xffffdf66
   164ec:	00000af4 	.word	0x00000af4

000164f0 <ecc_test_curve>:

#undef  ECC_TEST_VERIFY_COUNT
#define ECC_TEST_VERIFY_COUNT 2
static int ecc_test_curve(WC_RNG* rng, int keySize)
{
   164f0:	b580      	push	{r7, lr}
   164f2:	b086      	sub	sp, #24
   164f4:	af02      	add	r7, sp, #8
   164f6:	6078      	str	r0, [r7, #4]
   164f8:	6039      	str	r1, [r7, #0]
    int ret;

    ret = ecc_test_curve_size(rng, keySize, ECC_TEST_VERIFY_COUNT,
   164fa:	6839      	ldr	r1, [r7, #0]
   164fc:	6878      	ldr	r0, [r7, #4]
   164fe:	2300      	movs	r3, #0
   16500:	9300      	str	r3, [sp, #0]
   16502:	2300      	movs	r3, #0
   16504:	2202      	movs	r2, #2
   16506:	f7ff fd57 	bl	15fb8 <ecc_test_curve_size>
   1650a:	0003      	movs	r3, r0
   1650c:	60fb      	str	r3, [r7, #12]
        ECC_CURVE_DEF, NULL);
    if (ret < 0) {
   1650e:	68fb      	ldr	r3, [r7, #12]
   16510:	2b00      	cmp	r3, #0
   16512:	da0a      	bge.n	1652a <ecc_test_curve+0x3a>
        if (ret == ECC_CURVE_OID_E) {
   16514:	68fb      	ldr	r3, [r7, #12]
   16516:	33ac      	adds	r3, #172	; 0xac
   16518:	d007      	beq.n	1652a <ecc_test_curve+0x3a>
            /* some curve sizes are only available with:
                HAVE_ECC_SECPR2, HAVE_ECC_SECPR3, HAVE_ECC_BRAINPOOL
                and HAVE_ECC_KOBLITZ */
        }
        else {
            printf("ecc_test_curve_size %d failed!: %d\n", keySize, ret);
   1651a:	68fa      	ldr	r2, [r7, #12]
   1651c:	6839      	ldr	r1, [r7, #0]
   1651e:	4b0e      	ldr	r3, [pc, #56]	; (16558 <ecc_test_curve+0x68>)
   16520:	0018      	movs	r0, r3
   16522:	f00f fe2d 	bl	26180 <iprintf>
            return ret;
   16526:	68fb      	ldr	r3, [r7, #12]
   16528:	e011      	b.n	1654e <ecc_test_curve+0x5e>
        }
    }

#ifdef HAVE_ECC_VECTOR_TEST
    ret = ecc_test_vector(keySize);
   1652a:	683b      	ldr	r3, [r7, #0]
   1652c:	0018      	movs	r0, r3
   1652e:	f7ff f977 	bl	15820 <ecc_test_vector>
   16532:	0003      	movs	r3, r0
   16534:	60fb      	str	r3, [r7, #12]
    if (ret < 0) {
   16536:	68fb      	ldr	r3, [r7, #12]
   16538:	2b00      	cmp	r3, #0
   1653a:	da07      	bge.n	1654c <ecc_test_curve+0x5c>
        printf("ecc_test_vector %d failed!: %d\n", keySize, ret);
   1653c:	68fa      	ldr	r2, [r7, #12]
   1653e:	6839      	ldr	r1, [r7, #0]
   16540:	4b06      	ldr	r3, [pc, #24]	; (1655c <ecc_test_curve+0x6c>)
   16542:	0018      	movs	r0, r3
   16544:	f00f fe1c 	bl	26180 <iprintf>
        return ret;
   16548:	68fb      	ldr	r3, [r7, #12]
   1654a:	e000      	b.n	1654e <ecc_test_curve+0x5e>
            return ret;
        }
    }
#endif

    return 0;
   1654c:	2300      	movs	r3, #0
}
   1654e:	0018      	movs	r0, r3
   16550:	46bd      	mov	sp, r7
   16552:	b004      	add	sp, #16
   16554:	bd80      	pop	{r7, pc}
   16556:	46c0      	nop			; (mov r8, r8)
   16558:	0002d8f4 	.word	0x0002d8f4
   1655c:	0002d918 	.word	0x0002d918

00016560 <ecc_sig_test>:
}
#endif /* !WOLFSSL_ATECC508A && HAVE_ECC_KEY_IMPORT && HAVE_ECC_KEY_EXPORT */

#ifndef NO_SIG_WRAPPER
static int ecc_sig_test(WC_RNG* rng, ecc_key* key)
{
   16560:	b590      	push	{r4, r7, lr}
   16562:	b0af      	sub	sp, #188	; 0xbc
   16564:	af06      	add	r7, sp, #24
   16566:	6078      	str	r0, [r7, #4]
   16568:	6039      	str	r1, [r7, #0]
    int     ret;
    word32  sigSz;
    int     size;
    byte    out[ECC_MAX_SIG_SIZE];
    byte    in[] = "Everyone gets Friday off.";
   1656a:	2328      	movs	r3, #40	; 0x28
   1656c:	18fb      	adds	r3, r7, r3
   1656e:	4a63      	ldr	r2, [pc, #396]	; (166fc <ecc_sig_test+0x19c>)
   16570:	ca13      	ldmia	r2!, {r0, r1, r4}
   16572:	c313      	stmia	r3!, {r0, r1, r4}
   16574:	ca13      	ldmia	r2!, {r0, r1, r4}
   16576:	c313      	stmia	r3!, {r0, r1, r4}
   16578:	8812      	ldrh	r2, [r2, #0]
   1657a:	801a      	strh	r2, [r3, #0]
    const byte hash[] = {
   1657c:	2308      	movs	r3, #8
   1657e:	18fa      	adds	r2, r7, r3
   16580:	4b5f      	ldr	r3, [pc, #380]	; (16700 <ecc_sig_test+0x1a0>)
   16582:	0010      	movs	r0, r2
   16584:	0019      	movs	r1, r3
   16586:	2320      	movs	r3, #32
   16588:	001a      	movs	r2, r3
   1658a:	f00f f8b0 	bl	256ee <memcpy>
        0xf2, 0x02, 0x95, 0x65, 0xcb, 0xf6, 0x2a, 0x59,
        0x39, 0x2c, 0x05, 0xff, 0x0e, 0x29, 0xaf, 0xfe,
        0x47, 0x33, 0x8c, 0x99, 0x8d, 0x58, 0x64, 0x83,
        0xa6, 0x58, 0x0a, 0x33, 0x0b, 0x84, 0x5f, 0x5f
    };
    word32 inLen = (word32)XSTRLEN((char*)in);
   1658e:	2328      	movs	r3, #40	; 0x28
   16590:	18fb      	adds	r3, r7, r3
   16592:	0018      	movs	r0, r3
   16594:	f00f ff0c 	bl	263b0 <strlen>
   16598:	0003      	movs	r3, r0
   1659a:	229c      	movs	r2, #156	; 0x9c
   1659c:	18ba      	adds	r2, r7, r2
   1659e:	6013      	str	r3, [r2, #0]

    size = wc_ecc_sig_size(key);
   165a0:	683b      	ldr	r3, [r7, #0]
   165a2:	0018      	movs	r0, r3
   165a4:	f7f8 fec4 	bl	f330 <wc_ecc_sig_size>
   165a8:	0003      	movs	r3, r0
   165aa:	2298      	movs	r2, #152	; 0x98
   165ac:	18ba      	adds	r2, r7, r2
   165ae:	6013      	str	r3, [r2, #0]

    ret = wc_SignatureGetSize(WC_SIGNATURE_TYPE_ECC, key, sizeof(*key));
   165b0:	23de      	movs	r3, #222	; 0xde
   165b2:	009a      	lsls	r2, r3, #2
   165b4:	683b      	ldr	r3, [r7, #0]
   165b6:	0019      	movs	r1, r3
   165b8:	2001      	movs	r0, #1
   165ba:	f7ef fb41 	bl	5c40 <wc_SignatureGetSize>
   165be:	0003      	movs	r3, r0
   165c0:	2294      	movs	r2, #148	; 0x94
   165c2:	18ba      	adds	r2, r7, r2
   165c4:	6013      	str	r3, [r2, #0]
    if (ret != size)
   165c6:	2394      	movs	r3, #148	; 0x94
   165c8:	18fb      	adds	r3, r7, r3
   165ca:	681a      	ldr	r2, [r3, #0]
   165cc:	2398      	movs	r3, #152	; 0x98
   165ce:	18fb      	adds	r3, r7, r3
   165d0:	681b      	ldr	r3, [r3, #0]
   165d2:	429a      	cmp	r2, r3
   165d4:	d001      	beq.n	165da <ecc_sig_test+0x7a>
        return -8428;
   165d6:	4b4b      	ldr	r3, [pc, #300]	; (16704 <ecc_sig_test+0x1a4>)
   165d8:	e08c      	b.n	166f4 <ecc_sig_test+0x194>

    sigSz = (word32)ret;
   165da:	2394      	movs	r3, #148	; 0x94
   165dc:	18fb      	adds	r3, r7, r3
   165de:	681b      	ldr	r3, [r3, #0]
   165e0:	2290      	movs	r2, #144	; 0x90
   165e2:	18ba      	adds	r2, r7, r2
   165e4:	6013      	str	r3, [r2, #0]
    ret = wc_SignatureGenerate(WC_HASH_TYPE_SHA256, WC_SIGNATURE_TYPE_ECC, in,
   165e6:	239c      	movs	r3, #156	; 0x9c
   165e8:	18fb      	adds	r3, r7, r3
   165ea:	6819      	ldr	r1, [r3, #0]
   165ec:	2328      	movs	r3, #40	; 0x28
   165ee:	18fa      	adds	r2, r7, r3
   165f0:	687b      	ldr	r3, [r7, #4]
   165f2:	9304      	str	r3, [sp, #16]
   165f4:	23de      	movs	r3, #222	; 0xde
   165f6:	009b      	lsls	r3, r3, #2
   165f8:	9303      	str	r3, [sp, #12]
   165fa:	683b      	ldr	r3, [r7, #0]
   165fc:	9302      	str	r3, [sp, #8]
   165fe:	2390      	movs	r3, #144	; 0x90
   16600:	18fb      	adds	r3, r7, r3
   16602:	9301      	str	r3, [sp, #4]
   16604:	2344      	movs	r3, #68	; 0x44
   16606:	18fb      	adds	r3, r7, r3
   16608:	9300      	str	r3, [sp, #0]
   1660a:	000b      	movs	r3, r1
   1660c:	2101      	movs	r1, #1
   1660e:	2006      	movs	r0, #6
   16610:	f7ef fcba 	bl	5f88 <wc_SignatureGenerate>
   16614:	0003      	movs	r3, r0
   16616:	2294      	movs	r2, #148	; 0x94
   16618:	18ba      	adds	r2, r7, r2
   1661a:	6013      	str	r3, [r2, #0]
                               inLen, out, &sigSz, key, sizeof(*key), rng);
    if (ret != 0)
   1661c:	2394      	movs	r3, #148	; 0x94
   1661e:	18fb      	adds	r3, r7, r3
   16620:	681b      	ldr	r3, [r3, #0]
   16622:	2b00      	cmp	r3, #0
   16624:	d001      	beq.n	1662a <ecc_sig_test+0xca>
        return -8429;
   16626:	4b38      	ldr	r3, [pc, #224]	; (16708 <ecc_sig_test+0x1a8>)
   16628:	e064      	b.n	166f4 <ecc_sig_test+0x194>

    ret = wc_SignatureVerify(WC_HASH_TYPE_SHA256, WC_SIGNATURE_TYPE_ECC, in,
   1662a:	2390      	movs	r3, #144	; 0x90
   1662c:	18fb      	adds	r3, r7, r3
   1662e:	681b      	ldr	r3, [r3, #0]
   16630:	229c      	movs	r2, #156	; 0x9c
   16632:	18ba      	adds	r2, r7, r2
   16634:	6810      	ldr	r0, [r2, #0]
   16636:	2228      	movs	r2, #40	; 0x28
   16638:	18b9      	adds	r1, r7, r2
   1663a:	22de      	movs	r2, #222	; 0xde
   1663c:	0092      	lsls	r2, r2, #2
   1663e:	9203      	str	r2, [sp, #12]
   16640:	683a      	ldr	r2, [r7, #0]
   16642:	9202      	str	r2, [sp, #8]
   16644:	9301      	str	r3, [sp, #4]
   16646:	2344      	movs	r3, #68	; 0x44
   16648:	18fb      	adds	r3, r7, r3
   1664a:	9300      	str	r3, [sp, #0]
   1664c:	0003      	movs	r3, r0
   1664e:	000a      	movs	r2, r1
   16650:	2101      	movs	r1, #1
   16652:	2006      	movs	r0, #6
   16654:	f7ef fb9c 	bl	5d90 <wc_SignatureVerify>
   16658:	0003      	movs	r3, r0
   1665a:	2294      	movs	r2, #148	; 0x94
   1665c:	18ba      	adds	r2, r7, r2
   1665e:	6013      	str	r3, [r2, #0]
                             inLen, out, sigSz, key, sizeof(*key));
    if (ret != 0)
   16660:	2394      	movs	r3, #148	; 0x94
   16662:	18fb      	adds	r3, r7, r3
   16664:	681b      	ldr	r3, [r3, #0]
   16666:	2b00      	cmp	r3, #0
   16668:	d001      	beq.n	1666e <ecc_sig_test+0x10e>
        return -8430;
   1666a:	4b28      	ldr	r3, [pc, #160]	; (1670c <ecc_sig_test+0x1ac>)
   1666c:	e042      	b.n	166f4 <ecc_sig_test+0x194>

    sigSz = (word32)sizeof(out);
   1666e:	234a      	movs	r3, #74	; 0x4a
   16670:	2290      	movs	r2, #144	; 0x90
   16672:	18ba      	adds	r2, r7, r2
   16674:	6013      	str	r3, [r2, #0]
    ret = wc_SignatureGenerateHash(WC_HASH_TYPE_SHA256, WC_SIGNATURE_TYPE_ECC,
   16676:	2308      	movs	r3, #8
   16678:	18fa      	adds	r2, r7, r3
   1667a:	687b      	ldr	r3, [r7, #4]
   1667c:	9304      	str	r3, [sp, #16]
   1667e:	23de      	movs	r3, #222	; 0xde
   16680:	009b      	lsls	r3, r3, #2
   16682:	9303      	str	r3, [sp, #12]
   16684:	683b      	ldr	r3, [r7, #0]
   16686:	9302      	str	r3, [sp, #8]
   16688:	2390      	movs	r3, #144	; 0x90
   1668a:	18fb      	adds	r3, r7, r3
   1668c:	9301      	str	r3, [sp, #4]
   1668e:	2344      	movs	r3, #68	; 0x44
   16690:	18fb      	adds	r3, r7, r3
   16692:	9300      	str	r3, [sp, #0]
   16694:	2320      	movs	r3, #32
   16696:	2101      	movs	r1, #1
   16698:	2006      	movs	r0, #6
   1669a:	f7ef fc05 	bl	5ea8 <wc_SignatureGenerateHash>
   1669e:	0003      	movs	r3, r0
   166a0:	2294      	movs	r2, #148	; 0x94
   166a2:	18ba      	adds	r2, r7, r2
   166a4:	6013      	str	r3, [r2, #0]
        hash, (int)sizeof(hash), out, &sigSz, key, sizeof(*key), rng);
    if (ret != 0)
   166a6:	2394      	movs	r3, #148	; 0x94
   166a8:	18fb      	adds	r3, r7, r3
   166aa:	681b      	ldr	r3, [r3, #0]
   166ac:	2b00      	cmp	r3, #0
   166ae:	d001      	beq.n	166b4 <ecc_sig_test+0x154>
        return -8431;
   166b0:	4b17      	ldr	r3, [pc, #92]	; (16710 <ecc_sig_test+0x1b0>)
   166b2:	e01f      	b.n	166f4 <ecc_sig_test+0x194>

    ret = wc_SignatureVerifyHash(WC_HASH_TYPE_SHA256, WC_SIGNATURE_TYPE_ECC,
   166b4:	2390      	movs	r3, #144	; 0x90
   166b6:	18fb      	adds	r3, r7, r3
   166b8:	681b      	ldr	r3, [r3, #0]
   166ba:	2208      	movs	r2, #8
   166bc:	18b9      	adds	r1, r7, r2
   166be:	22de      	movs	r2, #222	; 0xde
   166c0:	0092      	lsls	r2, r2, #2
   166c2:	9203      	str	r2, [sp, #12]
   166c4:	683a      	ldr	r2, [r7, #0]
   166c6:	9202      	str	r2, [sp, #8]
   166c8:	9301      	str	r3, [sp, #4]
   166ca:	2344      	movs	r3, #68	; 0x44
   166cc:	18fb      	adds	r3, r7, r3
   166ce:	9300      	str	r3, [sp, #0]
   166d0:	2320      	movs	r3, #32
   166d2:	000a      	movs	r2, r1
   166d4:	2101      	movs	r1, #1
   166d6:	2006      	movs	r0, #6
   166d8:	f7ef fae2 	bl	5ca0 <wc_SignatureVerifyHash>
   166dc:	0003      	movs	r3, r0
   166de:	2294      	movs	r2, #148	; 0x94
   166e0:	18ba      	adds	r2, r7, r2
   166e2:	6013      	str	r3, [r2, #0]
        hash, (int)sizeof(hash), out, sigSz, key, sizeof(*key));
    if (ret != 0)
   166e4:	2394      	movs	r3, #148	; 0x94
   166e6:	18fb      	adds	r3, r7, r3
   166e8:	681b      	ldr	r3, [r3, #0]
   166ea:	2b00      	cmp	r3, #0
   166ec:	d001      	beq.n	166f2 <ecc_sig_test+0x192>
        return -8432;
   166ee:	4b09      	ldr	r3, [pc, #36]	; (16714 <ecc_sig_test+0x1b4>)
   166f0:	e000      	b.n	166f4 <ecc_sig_test+0x194>

    return 0;
   166f2:	2300      	movs	r3, #0
}
   166f4:	0018      	movs	r0, r3
   166f6:	46bd      	mov	sp, r7
   166f8:	b029      	add	sp, #164	; 0xa4
   166fa:	bd90      	pop	{r4, r7, pc}
   166fc:	0002d938 	.word	0x0002d938
   16700:	0002d954 	.word	0x0002d954
   16704:	ffffdf14 	.word	0xffffdf14
   16708:	ffffdf13 	.word	0xffffdf13
   1670c:	ffffdf12 	.word	0xffffdf12
   16710:	ffffdf11 	.word	0xffffdf11
   16714:	ffffdf10 	.word	0xffffdf10

00016718 <ecc_exp_imp_test>:
#endif

#if defined(HAVE_ECC_KEY_IMPORT) && defined(HAVE_ECC_KEY_EXPORT)
static int ecc_exp_imp_test(ecc_key* key)
{
   16718:	b590      	push	{r4, r7, lr}
   1671a:	4ce1      	ldr	r4, [pc, #900]	; (16aa0 <ecc_exp_imp_test+0x388>)
   1671c:	44a5      	add	sp, r4
   1671e:	af04      	add	r7, sp, #16
   16720:	6078      	str	r0, [r7, #4]
    ecc_key    keyImp;
    byte       priv[32];
    word32     privLen;
    byte       pub[65];
    word32     pubLen, pubLenX, pubLenY;
    const char qx[] = "7a4e287890a1a47ad3457e52f2f76a83"
   16722:	4be0      	ldr	r3, [pc, #896]	; (16aa4 <ecc_exp_imp_test+0x38c>)
   16724:	2299      	movs	r2, #153	; 0x99
   16726:	00d2      	lsls	r2, r2, #3
   16728:	18ba      	adds	r2, r7, r2
   1672a:	18d2      	adds	r2, r2, r3
   1672c:	4bde      	ldr	r3, [pc, #888]	; (16aa8 <ecc_exp_imp_test+0x390>)
   1672e:	0010      	movs	r0, r2
   16730:	0019      	movs	r1, r3
   16732:	2341      	movs	r3, #65	; 0x41
   16734:	001a      	movs	r2, r3
   16736:	f00e ffda 	bl	256ee <memcpy>
                      "ce46cbc947616d0cbaa82323818a793d";
    const char qy[] = "eec4084f5b29ebf29c44cce3b3059610"
   1673a:	4bdc      	ldr	r3, [pc, #880]	; (16aac <ecc_exp_imp_test+0x394>)
   1673c:	2299      	movs	r2, #153	; 0x99
   1673e:	00d2      	lsls	r2, r2, #3
   16740:	18ba      	adds	r2, r7, r2
   16742:	18d2      	adds	r2, r2, r3
   16744:	4bda      	ldr	r3, [pc, #872]	; (16ab0 <ecc_exp_imp_test+0x398>)
   16746:	0010      	movs	r0, r2
   16748:	0019      	movs	r1, r3
   1674a:	2341      	movs	r3, #65	; 0x41
   1674c:	001a      	movs	r2, r3
   1674e:	f00e ffce 	bl	256ee <memcpy>
                      "922f8b30ea6e8811742ac7238fe87308";
    const char d[]  = "8c14b793cb19137e323a6d2e2a870bca"
   16752:	4bd8      	ldr	r3, [pc, #864]	; (16ab4 <ecc_exp_imp_test+0x39c>)
   16754:	2299      	movs	r2, #153	; 0x99
   16756:	00d2      	lsls	r2, r2, #3
   16758:	18ba      	adds	r2, r7, r2
   1675a:	18d2      	adds	r2, r2, r3
   1675c:	4bd6      	ldr	r3, [pc, #856]	; (16ab8 <ecc_exp_imp_test+0x3a0>)
   1675e:	0010      	movs	r0, r2
   16760:	0019      	movs	r1, r3
   16762:	2341      	movs	r3, #65	; 0x41
   16764:	001a      	movs	r2, r3
   16766:	f00e ffc2 	bl	256ee <memcpy>
                      "2e7a493ec1153b3a95feb8a4873f8d08";

    wc_ecc_init_ex(&keyImp, HEAP_HINT, devId);
   1676a:	4bd4      	ldr	r3, [pc, #848]	; (16abc <ecc_exp_imp_test+0x3a4>)
   1676c:	681a      	ldr	r2, [r3, #0]
   1676e:	23a4      	movs	r3, #164	; 0xa4
   16770:	005b      	lsls	r3, r3, #1
   16772:	18fb      	adds	r3, r7, r3
   16774:	2100      	movs	r1, #0
   16776:	0018      	movs	r0, r3
   16778:	f7f7 fbfc 	bl	df74 <wc_ecc_init_ex>

    privLen = sizeof(priv);
   1677c:	2320      	movs	r3, #32
   1677e:	2292      	movs	r2, #146	; 0x92
   16780:	0052      	lsls	r2, r2, #1
   16782:	18ba      	adds	r2, r7, r2
   16784:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_private_only(key, priv, &privLen);
   16786:	2392      	movs	r3, #146	; 0x92
   16788:	005b      	lsls	r3, r3, #1
   1678a:	18fa      	adds	r2, r7, r3
   1678c:	2394      	movs	r3, #148	; 0x94
   1678e:	005b      	lsls	r3, r3, #1
   16790:	18f9      	adds	r1, r7, r3
   16792:	687b      	ldr	r3, [r7, #4]
   16794:	0018      	movs	r0, r3
   16796:	f7f8 fa07 	bl	eba8 <wc_ecc_export_private_only>
   1679a:	0003      	movs	r3, r0
   1679c:	4ac8      	ldr	r2, [pc, #800]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   1679e:	18ba      	adds	r2, r7, r2
   167a0:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   167a2:	4bc7      	ldr	r3, [pc, #796]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   167a4:	18fb      	adds	r3, r7, r3
   167a6:	681b      	ldr	r3, [r3, #0]
   167a8:	2b00      	cmp	r3, #0
   167aa:	d004      	beq.n	167b6 <ecc_exp_imp_test+0x9e>
        ret = -8433;
   167ac:	4bc5      	ldr	r3, [pc, #788]	; (16ac4 <ecc_exp_imp_test+0x3ac>)
   167ae:	4ac4      	ldr	r2, [pc, #784]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   167b0:	18ba      	adds	r2, r7, r2
   167b2:	6013      	str	r3, [r2, #0]
        goto done;
   167b4:	e165      	b.n	16a82 <ecc_exp_imp_test+0x36a>
    }
    pubLen = sizeof(pub);
   167b6:	2341      	movs	r3, #65	; 0x41
   167b8:	22dc      	movs	r2, #220	; 0xdc
   167ba:	18ba      	adds	r2, r7, r2
   167bc:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_point_der(key->idx, &key->pubkey, pub, &pubLen);
   167be:	687b      	ldr	r3, [r7, #4]
   167c0:	6858      	ldr	r0, [r3, #4]
   167c2:	687b      	ldr	r3, [r7, #4]
   167c4:	3318      	adds	r3, #24
   167c6:	0019      	movs	r1, r3
   167c8:	23dc      	movs	r3, #220	; 0xdc
   167ca:	18fb      	adds	r3, r7, r3
   167cc:	22e0      	movs	r2, #224	; 0xe0
   167ce:	18ba      	adds	r2, r7, r2
   167d0:	f7f7 fee4 	bl	e59c <wc_ecc_export_point_der>
   167d4:	0003      	movs	r3, r0
   167d6:	4aba      	ldr	r2, [pc, #744]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   167d8:	18ba      	adds	r2, r7, r2
   167da:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   167dc:	4bb8      	ldr	r3, [pc, #736]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   167de:	18fb      	adds	r3, r7, r3
   167e0:	681b      	ldr	r3, [r3, #0]
   167e2:	2b00      	cmp	r3, #0
   167e4:	d004      	beq.n	167f0 <ecc_exp_imp_test+0xd8>
        ret = -8434;
   167e6:	4bb8      	ldr	r3, [pc, #736]	; (16ac8 <ecc_exp_imp_test+0x3b0>)
   167e8:	4ab5      	ldr	r2, [pc, #724]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   167ea:	18ba      	adds	r2, r7, r2
   167ec:	6013      	str	r3, [r2, #0]
        goto done;
   167ee:	e148      	b.n	16a82 <ecc_exp_imp_test+0x36a>
    }

    ret = wc_ecc_import_private_key(priv, privLen, pub, pubLen, &keyImp);
   167f0:	2392      	movs	r3, #146	; 0x92
   167f2:	005b      	lsls	r3, r3, #1
   167f4:	18fb      	adds	r3, r7, r3
   167f6:	6819      	ldr	r1, [r3, #0]
   167f8:	23dc      	movs	r3, #220	; 0xdc
   167fa:	18fb      	adds	r3, r7, r3
   167fc:	681c      	ldr	r4, [r3, #0]
   167fe:	23e0      	movs	r3, #224	; 0xe0
   16800:	18fa      	adds	r2, r7, r3
   16802:	2394      	movs	r3, #148	; 0x94
   16804:	005b      	lsls	r3, r3, #1
   16806:	18f8      	adds	r0, r7, r3
   16808:	23a4      	movs	r3, #164	; 0xa4
   1680a:	005b      	lsls	r3, r3, #1
   1680c:	18fb      	adds	r3, r7, r3
   1680e:	9300      	str	r3, [sp, #0]
   16810:	0023      	movs	r3, r4
   16812:	f7f8 fa79 	bl	ed08 <wc_ecc_import_private_key>
   16816:	0003      	movs	r3, r0
   16818:	4aa9      	ldr	r2, [pc, #676]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   1681a:	18ba      	adds	r2, r7, r2
   1681c:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   1681e:	4ba8      	ldr	r3, [pc, #672]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16820:	18fb      	adds	r3, r7, r3
   16822:	681b      	ldr	r3, [r3, #0]
   16824:	2b00      	cmp	r3, #0
   16826:	d004      	beq.n	16832 <ecc_exp_imp_test+0x11a>
        ret = -8435;
   16828:	4ba8      	ldr	r3, [pc, #672]	; (16acc <ecc_exp_imp_test+0x3b4>)
   1682a:	4aa5      	ldr	r2, [pc, #660]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   1682c:	18ba      	adds	r2, r7, r2
   1682e:	6013      	str	r3, [r2, #0]
        goto done;
   16830:	e127      	b.n	16a82 <ecc_exp_imp_test+0x36a>
    }

    wc_ecc_free(&keyImp);
   16832:	23a4      	movs	r3, #164	; 0xa4
   16834:	005b      	lsls	r3, r3, #1
   16836:	18fb      	adds	r3, r7, r3
   16838:	0018      	movs	r0, r3
   1683a:	f7f7 fd65 	bl	e308 <wc_ecc_free>
    wc_ecc_init_ex(&keyImp, HEAP_HINT, devId);
   1683e:	4b9f      	ldr	r3, [pc, #636]	; (16abc <ecc_exp_imp_test+0x3a4>)
   16840:	681a      	ldr	r2, [r3, #0]
   16842:	23a4      	movs	r3, #164	; 0xa4
   16844:	005b      	lsls	r3, r3, #1
   16846:	18fb      	adds	r3, r7, r3
   16848:	2100      	movs	r1, #0
   1684a:	0018      	movs	r0, r3
   1684c:	f7f7 fb92 	bl	df74 <wc_ecc_init_ex>

    ret = wc_ecc_import_raw_ex(&keyImp, qx, qy, d, ECC_SECP256R1);
   16850:	2308      	movs	r3, #8
   16852:	18fc      	adds	r4, r7, r3
   16854:	234c      	movs	r3, #76	; 0x4c
   16856:	18fa      	adds	r2, r7, r3
   16858:	2390      	movs	r3, #144	; 0x90
   1685a:	18f9      	adds	r1, r7, r3
   1685c:	23a4      	movs	r3, #164	; 0xa4
   1685e:	005b      	lsls	r3, r3, #1
   16860:	18f8      	adds	r0, r7, r3
   16862:	2307      	movs	r3, #7
   16864:	9300      	str	r3, [sp, #0]
   16866:	0023      	movs	r3, r4
   16868:	f7f8 fcb8 	bl	f1dc <wc_ecc_import_raw_ex>
   1686c:	0003      	movs	r3, r0
   1686e:	4a94      	ldr	r2, [pc, #592]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16870:	18ba      	adds	r2, r7, r2
   16872:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   16874:	4b92      	ldr	r3, [pc, #584]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16876:	18fb      	adds	r3, r7, r3
   16878:	681b      	ldr	r3, [r3, #0]
   1687a:	2b00      	cmp	r3, #0
   1687c:	d004      	beq.n	16888 <ecc_exp_imp_test+0x170>
        ret = -8436;
   1687e:	4b94      	ldr	r3, [pc, #592]	; (16ad0 <ecc_exp_imp_test+0x3b8>)
   16880:	4a8f      	ldr	r2, [pc, #572]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16882:	18ba      	adds	r2, r7, r2
   16884:	6013      	str	r3, [r2, #0]
        goto done;
   16886:	e0fc      	b.n	16a82 <ecc_exp_imp_test+0x36a>
    }

    wc_ecc_free(&keyImp);
   16888:	23a4      	movs	r3, #164	; 0xa4
   1688a:	005b      	lsls	r3, r3, #1
   1688c:	18fb      	adds	r3, r7, r3
   1688e:	0018      	movs	r0, r3
   16890:	f7f7 fd3a 	bl	e308 <wc_ecc_free>
    wc_ecc_init_ex(&keyImp, HEAP_HINT, devId);
   16894:	4b89      	ldr	r3, [pc, #548]	; (16abc <ecc_exp_imp_test+0x3a4>)
   16896:	681a      	ldr	r2, [r3, #0]
   16898:	23a4      	movs	r3, #164	; 0xa4
   1689a:	005b      	lsls	r3, r3, #1
   1689c:	18fb      	adds	r3, r7, r3
   1689e:	2100      	movs	r1, #0
   168a0:	0018      	movs	r0, r3
   168a2:	f7f7 fb67 	bl	df74 <wc_ecc_init_ex>

    curve_id = wc_ecc_get_curve_id(key->idx);
   168a6:	687b      	ldr	r3, [r7, #4]
   168a8:	685b      	ldr	r3, [r3, #4]
   168aa:	0018      	movs	r0, r3
   168ac:	f7f7 fa0c 	bl	dcc8 <wc_ecc_get_curve_id>
   168b0:	0003      	movs	r3, r0
   168b2:	2298      	movs	r2, #152	; 0x98
   168b4:	00d2      	lsls	r2, r2, #3
   168b6:	18ba      	adds	r2, r7, r2
   168b8:	6013      	str	r3, [r2, #0]
    if (curve_id < 0) {
   168ba:	2398      	movs	r3, #152	; 0x98
   168bc:	00db      	lsls	r3, r3, #3
   168be:	18fb      	adds	r3, r7, r3
   168c0:	681b      	ldr	r3, [r3, #0]
   168c2:	2b00      	cmp	r3, #0
   168c4:	da04      	bge.n	168d0 <ecc_exp_imp_test+0x1b8>
        ret = -8437;
   168c6:	4b83      	ldr	r3, [pc, #524]	; (16ad4 <ecc_exp_imp_test+0x3bc>)
   168c8:	4a7d      	ldr	r2, [pc, #500]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   168ca:	18ba      	adds	r2, r7, r2
   168cc:	6013      	str	r3, [r2, #0]
        goto done;
   168ce:	e0d8      	b.n	16a82 <ecc_exp_imp_test+0x36a>
    }

    /* test import private only */
    ret = wc_ecc_import_private_key_ex(priv, privLen, NULL, 0, &keyImp,
   168d0:	2392      	movs	r3, #146	; 0x92
   168d2:	005b      	lsls	r3, r3, #1
   168d4:	18fb      	adds	r3, r7, r3
   168d6:	6819      	ldr	r1, [r3, #0]
   168d8:	2394      	movs	r3, #148	; 0x94
   168da:	005b      	lsls	r3, r3, #1
   168dc:	18f8      	adds	r0, r7, r3
   168de:	2398      	movs	r3, #152	; 0x98
   168e0:	00db      	lsls	r3, r3, #3
   168e2:	18fb      	adds	r3, r7, r3
   168e4:	681b      	ldr	r3, [r3, #0]
   168e6:	9301      	str	r3, [sp, #4]
   168e8:	23a4      	movs	r3, #164	; 0xa4
   168ea:	005b      	lsls	r3, r3, #1
   168ec:	18fb      	adds	r3, r7, r3
   168ee:	9300      	str	r3, [sp, #0]
   168f0:	2300      	movs	r3, #0
   168f2:	2200      	movs	r2, #0
   168f4:	f7f8 f9c0 	bl	ec78 <wc_ecc_import_private_key_ex>
   168f8:	0003      	movs	r3, r0
   168fa:	4a71      	ldr	r2, [pc, #452]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   168fc:	18ba      	adds	r2, r7, r2
   168fe:	6013      	str	r3, [r2, #0]
                                       curve_id);
    if (ret != 0) {
   16900:	4b6f      	ldr	r3, [pc, #444]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16902:	18fb      	adds	r3, r7, r3
   16904:	681b      	ldr	r3, [r3, #0]
   16906:	2b00      	cmp	r3, #0
   16908:	d004      	beq.n	16914 <ecc_exp_imp_test+0x1fc>
        ret = -8438;
   1690a:	4b73      	ldr	r3, [pc, #460]	; (16ad8 <ecc_exp_imp_test+0x3c0>)
   1690c:	4a6c      	ldr	r2, [pc, #432]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   1690e:	18ba      	adds	r2, r7, r2
   16910:	6013      	str	r3, [r2, #0]
        goto done;
   16912:	e0b6      	b.n	16a82 <ecc_exp_imp_test+0x36a>
    }

    wc_ecc_free(&keyImp);
   16914:	23a4      	movs	r3, #164	; 0xa4
   16916:	005b      	lsls	r3, r3, #1
   16918:	18fb      	adds	r3, r7, r3
   1691a:	0018      	movs	r0, r3
   1691c:	f7f7 fcf4 	bl	e308 <wc_ecc_free>
    wc_ecc_init_ex(&keyImp, HEAP_HINT, devId);
   16920:	4b66      	ldr	r3, [pc, #408]	; (16abc <ecc_exp_imp_test+0x3a4>)
   16922:	681a      	ldr	r2, [r3, #0]
   16924:	23a4      	movs	r3, #164	; 0xa4
   16926:	005b      	lsls	r3, r3, #1
   16928:	18fb      	adds	r3, r7, r3
   1692a:	2100      	movs	r1, #0
   1692c:	0018      	movs	r0, r3
   1692e:	f7f7 fb21 	bl	df74 <wc_ecc_init_ex>

    /* test export public raw */
    pubLenX = pubLenY = 32;
   16932:	2320      	movs	r3, #32
   16934:	22d4      	movs	r2, #212	; 0xd4
   16936:	18ba      	adds	r2, r7, r2
   16938:	6013      	str	r3, [r2, #0]
   1693a:	23d4      	movs	r3, #212	; 0xd4
   1693c:	18fb      	adds	r3, r7, r3
   1693e:	681b      	ldr	r3, [r3, #0]
   16940:	22d8      	movs	r2, #216	; 0xd8
   16942:	18ba      	adds	r2, r7, r2
   16944:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_public_raw(key, pub, &pubLenX, &pub[32], &pubLenY);
   16946:	23e0      	movs	r3, #224	; 0xe0
   16948:	18fb      	adds	r3, r7, r3
   1694a:	3320      	adds	r3, #32
   1694c:	001c      	movs	r4, r3
   1694e:	23d8      	movs	r3, #216	; 0xd8
   16950:	18fa      	adds	r2, r7, r3
   16952:	23e0      	movs	r3, #224	; 0xe0
   16954:	18f9      	adds	r1, r7, r3
   16956:	6878      	ldr	r0, [r7, #4]
   16958:	23d4      	movs	r3, #212	; 0xd4
   1695a:	18fb      	adds	r3, r7, r3
   1695c:	9300      	str	r3, [sp, #0]
   1695e:	0023      	movs	r3, r4
   16960:	f7f8 f944 	bl	ebec <wc_ecc_export_public_raw>
   16964:	0003      	movs	r3, r0
   16966:	4a56      	ldr	r2, [pc, #344]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16968:	18ba      	adds	r2, r7, r2
   1696a:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   1696c:	4b54      	ldr	r3, [pc, #336]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   1696e:	18fb      	adds	r3, r7, r3
   16970:	681b      	ldr	r3, [r3, #0]
   16972:	2b00      	cmp	r3, #0
   16974:	d004      	beq.n	16980 <ecc_exp_imp_test+0x268>
        ret = -8439;
   16976:	4b59      	ldr	r3, [pc, #356]	; (16adc <ecc_exp_imp_test+0x3c4>)
   16978:	4a51      	ldr	r2, [pc, #324]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   1697a:	18ba      	adds	r2, r7, r2
   1697c:	6013      	str	r3, [r2, #0]
        goto done;
   1697e:	e080      	b.n	16a82 <ecc_exp_imp_test+0x36a>
    }

#ifndef HAVE_SELFTEST
    /* test import of public */
    ret = wc_ecc_import_unsigned(&keyImp, pub, &pub[32], NULL, ECC_SECP256R1);
   16980:	23e0      	movs	r3, #224	; 0xe0
   16982:	18fb      	adds	r3, r7, r3
   16984:	3320      	adds	r3, #32
   16986:	001a      	movs	r2, r3
   16988:	23e0      	movs	r3, #224	; 0xe0
   1698a:	18f9      	adds	r1, r7, r3
   1698c:	23a4      	movs	r3, #164	; 0xa4
   1698e:	005b      	lsls	r3, r3, #1
   16990:	18f8      	adds	r0, r7, r3
   16992:	2307      	movs	r3, #7
   16994:	9300      	str	r3, [sp, #0]
   16996:	2300      	movs	r3, #0
   16998:	f7f8 fc38 	bl	f20c <wc_ecc_import_unsigned>
   1699c:	0003      	movs	r3, r0
   1699e:	4a48      	ldr	r2, [pc, #288]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   169a0:	18ba      	adds	r2, r7, r2
   169a2:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   169a4:	4b46      	ldr	r3, [pc, #280]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   169a6:	18fb      	adds	r3, r7, r3
   169a8:	681b      	ldr	r3, [r3, #0]
   169aa:	2b00      	cmp	r3, #0
   169ac:	d004      	beq.n	169b8 <ecc_exp_imp_test+0x2a0>
        ret = -8440;
   169ae:	4b4c      	ldr	r3, [pc, #304]	; (16ae0 <ecc_exp_imp_test+0x3c8>)
   169b0:	4a43      	ldr	r2, [pc, #268]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   169b2:	18ba      	adds	r2, r7, r2
   169b4:	6013      	str	r3, [r2, #0]
        goto done;
   169b6:	e064      	b.n	16a82 <ecc_exp_imp_test+0x36a>
    }
#endif

    wc_ecc_free(&keyImp);
   169b8:	23a4      	movs	r3, #164	; 0xa4
   169ba:	005b      	lsls	r3, r3, #1
   169bc:	18fb      	adds	r3, r7, r3
   169be:	0018      	movs	r0, r3
   169c0:	f7f7 fca2 	bl	e308 <wc_ecc_free>
    wc_ecc_init_ex(&keyImp, HEAP_HINT, devId);
   169c4:	4b3d      	ldr	r3, [pc, #244]	; (16abc <ecc_exp_imp_test+0x3a4>)
   169c6:	681a      	ldr	r2, [r3, #0]
   169c8:	23a4      	movs	r3, #164	; 0xa4
   169ca:	005b      	lsls	r3, r3, #1
   169cc:	18fb      	adds	r3, r7, r3
   169ce:	2100      	movs	r1, #0
   169d0:	0018      	movs	r0, r3
   169d2:	f7f7 facf 	bl	df74 <wc_ecc_init_ex>

    /* test export private and public raw */
    pubLenX = pubLenY = privLen = 32;
   169d6:	2320      	movs	r3, #32
   169d8:	2292      	movs	r2, #146	; 0x92
   169da:	0052      	lsls	r2, r2, #1
   169dc:	18ba      	adds	r2, r7, r2
   169de:	6013      	str	r3, [r2, #0]
   169e0:	2392      	movs	r3, #146	; 0x92
   169e2:	005b      	lsls	r3, r3, #1
   169e4:	18fb      	adds	r3, r7, r3
   169e6:	681b      	ldr	r3, [r3, #0]
   169e8:	22d4      	movs	r2, #212	; 0xd4
   169ea:	18ba      	adds	r2, r7, r2
   169ec:	6013      	str	r3, [r2, #0]
   169ee:	23d4      	movs	r3, #212	; 0xd4
   169f0:	18fb      	adds	r3, r7, r3
   169f2:	681b      	ldr	r3, [r3, #0]
   169f4:	22d8      	movs	r2, #216	; 0xd8
   169f6:	18ba      	adds	r2, r7, r2
   169f8:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_private_raw(key, pub, &pubLenX, &pub[32], &pubLenY,
   169fa:	23e0      	movs	r3, #224	; 0xe0
   169fc:	18fb      	adds	r3, r7, r3
   169fe:	3320      	adds	r3, #32
   16a00:	001c      	movs	r4, r3
   16a02:	23d8      	movs	r3, #216	; 0xd8
   16a04:	18fa      	adds	r2, r7, r3
   16a06:	23e0      	movs	r3, #224	; 0xe0
   16a08:	18f9      	adds	r1, r7, r3
   16a0a:	6878      	ldr	r0, [r7, #4]
   16a0c:	2392      	movs	r3, #146	; 0x92
   16a0e:	005b      	lsls	r3, r3, #1
   16a10:	18fb      	adds	r3, r7, r3
   16a12:	9302      	str	r3, [sp, #8]
   16a14:	2394      	movs	r3, #148	; 0x94
   16a16:	005b      	lsls	r3, r3, #1
   16a18:	18fb      	adds	r3, r7, r3
   16a1a:	9301      	str	r3, [sp, #4]
   16a1c:	23d4      	movs	r3, #212	; 0xd4
   16a1e:	18fb      	adds	r3, r7, r3
   16a20:	9300      	str	r3, [sp, #0]
   16a22:	0023      	movs	r3, r4
   16a24:	f7f8 f90c 	bl	ec40 <wc_ecc_export_private_raw>
   16a28:	0003      	movs	r3, r0
   16a2a:	4a25      	ldr	r2, [pc, #148]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16a2c:	18ba      	adds	r2, r7, r2
   16a2e:	6013      	str	r3, [r2, #0]
        priv, &privLen);
    if (ret != 0) {
   16a30:	4b23      	ldr	r3, [pc, #140]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16a32:	18fb      	adds	r3, r7, r3
   16a34:	681b      	ldr	r3, [r3, #0]
   16a36:	2b00      	cmp	r3, #0
   16a38:	d004      	beq.n	16a44 <ecc_exp_imp_test+0x32c>
        ret = -8441;
   16a3a:	4b2a      	ldr	r3, [pc, #168]	; (16ae4 <ecc_exp_imp_test+0x3cc>)
   16a3c:	4a20      	ldr	r2, [pc, #128]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16a3e:	18ba      	adds	r2, r7, r2
   16a40:	6013      	str	r3, [r2, #0]
        goto done;
   16a42:	e01e      	b.n	16a82 <ecc_exp_imp_test+0x36a>
    }

#ifndef HAVE_SELFTEST
    /* test import of private and public */
    ret = wc_ecc_import_unsigned(&keyImp, pub, &pub[32], priv, ECC_SECP256R1);
   16a44:	2394      	movs	r3, #148	; 0x94
   16a46:	005b      	lsls	r3, r3, #1
   16a48:	18fc      	adds	r4, r7, r3
   16a4a:	23e0      	movs	r3, #224	; 0xe0
   16a4c:	18fb      	adds	r3, r7, r3
   16a4e:	3320      	adds	r3, #32
   16a50:	001a      	movs	r2, r3
   16a52:	23e0      	movs	r3, #224	; 0xe0
   16a54:	18f9      	adds	r1, r7, r3
   16a56:	23a4      	movs	r3, #164	; 0xa4
   16a58:	005b      	lsls	r3, r3, #1
   16a5a:	18f8      	adds	r0, r7, r3
   16a5c:	2307      	movs	r3, #7
   16a5e:	9300      	str	r3, [sp, #0]
   16a60:	0023      	movs	r3, r4
   16a62:	f7f8 fbd3 	bl	f20c <wc_ecc_import_unsigned>
   16a66:	0003      	movs	r3, r0
   16a68:	4a15      	ldr	r2, [pc, #84]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16a6a:	18ba      	adds	r2, r7, r2
   16a6c:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   16a6e:	4b14      	ldr	r3, [pc, #80]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16a70:	18fb      	adds	r3, r7, r3
   16a72:	681b      	ldr	r3, [r3, #0]
   16a74:	2b00      	cmp	r3, #0
   16a76:	d004      	beq.n	16a82 <ecc_exp_imp_test+0x36a>
        ret = -8442;
   16a78:	4b1b      	ldr	r3, [pc, #108]	; (16ae8 <ecc_exp_imp_test+0x3d0>)
   16a7a:	4a11      	ldr	r2, [pc, #68]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16a7c:	18ba      	adds	r2, r7, r2
   16a7e:	6013      	str	r3, [r2, #0]
        goto done;
   16a80:	46c0      	nop			; (mov r8, r8)
    }
#endif

done:
    wc_ecc_free(&keyImp);
   16a82:	23a4      	movs	r3, #164	; 0xa4
   16a84:	005b      	lsls	r3, r3, #1
   16a86:	18fb      	adds	r3, r7, r3
   16a88:	0018      	movs	r0, r3
   16a8a:	f7f7 fc3d 	bl	e308 <wc_ecc_free>
    return ret;
   16a8e:	4b0c      	ldr	r3, [pc, #48]	; (16ac0 <ecc_exp_imp_test+0x3a8>)
   16a90:	18fb      	adds	r3, r7, r3
   16a92:	681b      	ldr	r3, [r3, #0]
}
   16a94:	0018      	movs	r0, r3
   16a96:	46bd      	mov	sp, r7
   16a98:	4b14      	ldr	r3, [pc, #80]	; (16aec <ecc_exp_imp_test+0x3d4>)
   16a9a:	449d      	add	sp, r3
   16a9c:	bd90      	pop	{r4, r7, pc}
   16a9e:	46c0      	nop			; (mov r8, r8)
   16aa0:	fffffb24 	.word	0xfffffb24
   16aa4:	fffffbc8 	.word	0xfffffbc8
   16aa8:	0002d974 	.word	0x0002d974
   16aac:	fffffb84 	.word	0xfffffb84
   16ab0:	0002d9b8 	.word	0x0002d9b8
   16ab4:	fffffb40 	.word	0xfffffb40
   16ab8:	0002d9fc 	.word	0x0002d9fc
   16abc:	20000010 	.word	0x20000010
   16ac0:	000004c4 	.word	0x000004c4
   16ac4:	ffffdf0f 	.word	0xffffdf0f
   16ac8:	ffffdf0e 	.word	0xffffdf0e
   16acc:	ffffdf0d 	.word	0xffffdf0d
   16ad0:	ffffdf0c 	.word	0xffffdf0c
   16ad4:	ffffdf0b 	.word	0xffffdf0b
   16ad8:	ffffdf0a 	.word	0xffffdf0a
   16adc:	ffffdf09 	.word	0xffffdf09
   16ae0:	ffffdf08 	.word	0xffffdf08
   16ae4:	ffffdf07 	.word	0xffffdf07
   16ae8:	ffffdf06 	.word	0xffffdf06
   16aec:	000004cc 	.word	0x000004cc

00016af0 <ecc_def_curve_test>:
    return 0;
}
#endif

static int ecc_def_curve_test(WC_RNG *rng)
{
   16af0:	b580      	push	{r7, lr}
   16af2:	4f3e      	ldr	r7, [pc, #248]	; (16bec <ecc_def_curve_test+0xfc>)
   16af4:	44bd      	add	sp, r7
   16af6:	af00      	add	r7, sp, #0
   16af8:	6078      	str	r0, [r7, #4]
    int     ret;
    ecc_key key;

    wc_ecc_init_ex(&key, HEAP_HINT, devId);
   16afa:	4b3d      	ldr	r3, [pc, #244]	; (16bf0 <ecc_def_curve_test+0x100>)
   16afc:	681a      	ldr	r2, [r3, #0]
   16afe:	230c      	movs	r3, #12
   16b00:	18fb      	adds	r3, r7, r3
   16b02:	2100      	movs	r1, #0
   16b04:	0018      	movs	r0, r3
   16b06:	f7f7 fa35 	bl	df74 <wc_ecc_init_ex>

    /* Use API */
    ret = wc_ecc_set_flags(NULL, 0);
   16b0a:	2100      	movs	r1, #0
   16b0c:	2000      	movs	r0, #0
   16b0e:	f7f7 fa57 	bl	dfc0 <wc_ecc_set_flags>
   16b12:	0003      	movs	r3, r0
   16b14:	22e1      	movs	r2, #225	; 0xe1
   16b16:	0092      	lsls	r2, r2, #2
   16b18:	18ba      	adds	r2, r7, r2
   16b1a:	6013      	str	r3, [r2, #0]
    if (ret != BAD_FUNC_ARG) {
   16b1c:	23e1      	movs	r3, #225	; 0xe1
   16b1e:	009b      	lsls	r3, r3, #2
   16b20:	18fb      	adds	r3, r7, r3
   16b22:	681b      	ldr	r3, [r3, #0]
   16b24:	33ad      	adds	r3, #173	; 0xad
   16b26:	d005      	beq.n	16b34 <ecc_def_curve_test+0x44>
        ret = -8449;
   16b28:	4b32      	ldr	r3, [pc, #200]	; (16bf4 <ecc_def_curve_test+0x104>)
   16b2a:	22e1      	movs	r2, #225	; 0xe1
   16b2c:	0092      	lsls	r2, r2, #2
   16b2e:	18ba      	adds	r2, r7, r2
   16b30:	6013      	str	r3, [r2, #0]
        goto done;
   16b32:	e04c      	b.n	16bce <ecc_def_curve_test+0xde>
    }
    ret = wc_ecc_set_flags(&key, 0);
   16b34:	230c      	movs	r3, #12
   16b36:	18fb      	adds	r3, r7, r3
   16b38:	2100      	movs	r1, #0
   16b3a:	0018      	movs	r0, r3
   16b3c:	f7f7 fa40 	bl	dfc0 <wc_ecc_set_flags>
   16b40:	0003      	movs	r3, r0
   16b42:	22e1      	movs	r2, #225	; 0xe1
   16b44:	0092      	lsls	r2, r2, #2
   16b46:	18ba      	adds	r2, r7, r2
   16b48:	6013      	str	r3, [r2, #0]
    if (ret != 0) {
   16b4a:	23e1      	movs	r3, #225	; 0xe1
   16b4c:	009b      	lsls	r3, r3, #2
   16b4e:	18fb      	adds	r3, r7, r3
   16b50:	681b      	ldr	r3, [r3, #0]
   16b52:	2b00      	cmp	r3, #0
   16b54:	d005      	beq.n	16b62 <ecc_def_curve_test+0x72>
        ret = -8450;
   16b56:	4b28      	ldr	r3, [pc, #160]	; (16bf8 <ecc_def_curve_test+0x108>)
   16b58:	22e1      	movs	r2, #225	; 0xe1
   16b5a:	0092      	lsls	r2, r2, #2
   16b5c:	18ba      	adds	r2, r7, r2
   16b5e:	6013      	str	r3, [r2, #0]
        goto done;
   16b60:	e035      	b.n	16bce <ecc_def_curve_test+0xde>
    }

    ret = wc_ecc_make_key(rng, 32, &key);
   16b62:	230c      	movs	r3, #12
   16b64:	18fa      	adds	r2, r7, r3
   16b66:	687b      	ldr	r3, [r7, #4]
   16b68:	2120      	movs	r1, #32
   16b6a:	0018      	movs	r0, r3
   16b6c:	f7f7 f9f0 	bl	df50 <wc_ecc_make_key>
   16b70:	0003      	movs	r3, r0
   16b72:	22e1      	movs	r2, #225	; 0xe1
   16b74:	0092      	lsls	r2, r2, #2
   16b76:	18ba      	adds	r2, r7, r2
   16b78:	6013      	str	r3, [r2, #0]
#if defined(WOLFSSL_ASYNC_CRYPT)
    ret = wc_AsyncWait(ret, &key.asyncDev, WC_ASYNC_FLAG_NONE);
#endif
    if (ret != 0) {
   16b7a:	23e1      	movs	r3, #225	; 0xe1
   16b7c:	009b      	lsls	r3, r3, #2
   16b7e:	18fb      	adds	r3, r7, r3
   16b80:	681b      	ldr	r3, [r3, #0]
   16b82:	2b00      	cmp	r3, #0
   16b84:	d005      	beq.n	16b92 <ecc_def_curve_test+0xa2>
        ret = -8451;
   16b86:	4b1d      	ldr	r3, [pc, #116]	; (16bfc <ecc_def_curve_test+0x10c>)
   16b88:	22e1      	movs	r2, #225	; 0xe1
   16b8a:	0092      	lsls	r2, r2, #2
   16b8c:	18ba      	adds	r2, r7, r2
   16b8e:	6013      	str	r3, [r2, #0]
        goto done;
   16b90:	e01d      	b.n	16bce <ecc_def_curve_test+0xde>
    }

#ifndef NO_SIG_WRAPPER
    ret = ecc_sig_test(rng, &key);
   16b92:	230c      	movs	r3, #12
   16b94:	18fa      	adds	r2, r7, r3
   16b96:	687b      	ldr	r3, [r7, #4]
   16b98:	0011      	movs	r1, r2
   16b9a:	0018      	movs	r0, r3
   16b9c:	f7ff fce0 	bl	16560 <ecc_sig_test>
   16ba0:	0003      	movs	r3, r0
   16ba2:	22e1      	movs	r2, #225	; 0xe1
   16ba4:	0092      	lsls	r2, r2, #2
   16ba6:	18ba      	adds	r2, r7, r2
   16ba8:	6013      	str	r3, [r2, #0]
    if (ret < 0)
   16baa:	23e1      	movs	r3, #225	; 0xe1
   16bac:	009b      	lsls	r3, r3, #2
   16bae:	18fb      	adds	r3, r7, r3
   16bb0:	681b      	ldr	r3, [r3, #0]
   16bb2:	2b00      	cmp	r3, #0
   16bb4:	db0a      	blt.n	16bcc <ecc_def_curve_test+0xdc>
        goto done;
#endif
#if defined(HAVE_ECC_KEY_IMPORT) && defined(HAVE_ECC_KEY_EXPORT)
    ret = ecc_exp_imp_test(&key);
   16bb6:	230c      	movs	r3, #12
   16bb8:	18fb      	adds	r3, r7, r3
   16bba:	0018      	movs	r0, r3
   16bbc:	f7ff fdac 	bl	16718 <ecc_exp_imp_test>
   16bc0:	0003      	movs	r3, r0
   16bc2:	22e1      	movs	r2, #225	; 0xe1
   16bc4:	0092      	lsls	r2, r2, #2
   16bc6:	18ba      	adds	r2, r7, r2
   16bc8:	6013      	str	r3, [r2, #0]
   16bca:	e000      	b.n	16bce <ecc_def_curve_test+0xde>
    }

#ifndef NO_SIG_WRAPPER
    ret = ecc_sig_test(rng, &key);
    if (ret < 0)
        goto done;
   16bcc:	46c0      	nop			; (mov r8, r8)
    ret = ecc_ssh_test(&key);
    if (ret < 0)
        goto done;
#endif /* WOLFSSL_ATECC508A */
done:
    wc_ecc_free(&key);
   16bce:	230c      	movs	r3, #12
   16bd0:	18fb      	adds	r3, r7, r3
   16bd2:	0018      	movs	r0, r3
   16bd4:	f7f7 fb98 	bl	e308 <wc_ecc_free>
    return ret;
   16bd8:	23e1      	movs	r3, #225	; 0xe1
   16bda:	009b      	lsls	r3, r3, #2
   16bdc:	18fb      	adds	r3, r7, r3
   16bde:	681b      	ldr	r3, [r3, #0]
}
   16be0:	0018      	movs	r0, r3
   16be2:	46bd      	mov	sp, r7
   16be4:	23e2      	movs	r3, #226	; 0xe2
   16be6:	009b      	lsls	r3, r3, #2
   16be8:	449d      	add	sp, r3
   16bea:	bd80      	pop	{r7, pc}
   16bec:	fffffc78 	.word	0xfffffc78
   16bf0:	20000010 	.word	0x20000010
   16bf4:	ffffdeff 	.word	0xffffdeff
   16bf8:	ffffdefe 	.word	0xffffdefe
   16bfc:	ffffdefd 	.word	0xffffdefd

00016c00 <ecc_test>:
    return ret;
}
#endif /* WOLFSSL_CERT_GEN */

int ecc_test(void)
{
   16c00:	b580      	push	{r7, lr}
   16c02:	b084      	sub	sp, #16
   16c04:	af00      	add	r7, sp, #0
    if (ret < 0)
        return ret;
#endif

#ifndef HAVE_FIPS
    ret = wc_InitRng_ex(&rng, HEAP_HINT, devId);
   16c06:	4b1e      	ldr	r3, [pc, #120]	; (16c80 <ecc_test+0x80>)
   16c08:	681a      	ldr	r2, [r3, #0]
   16c0a:	1d3b      	adds	r3, r7, #4
   16c0c:	2100      	movs	r1, #0
   16c0e:	0018      	movs	r0, r3
   16c10:	f7ee fbfe 	bl	5410 <wc_InitRng_ex>
   16c14:	0003      	movs	r3, r0
   16c16:	60fb      	str	r3, [r7, #12]
#else
    ret = wc_InitRng(&rng);
#endif
    if (ret != 0)
   16c18:	68fb      	ldr	r3, [r7, #12]
   16c1a:	2b00      	cmp	r3, #0
   16c1c:	d001      	beq.n	16c22 <ecc_test+0x22>
        return -8600;
   16c1e:	4b19      	ldr	r3, [pc, #100]	; (16c84 <ecc_test+0x84>)
   16c20:	e02a      	b.n	16c78 <ecc_test+0x78>
    if (ret < 0) {
        goto done;
    }
#endif /* HAVE_ECC239 */
#if !defined(NO_ECC256) || defined(HAVE_ALL_CURVES)
    ret = ecc_test_curve(&rng, 32);
   16c22:	1d3b      	adds	r3, r7, #4
   16c24:	2120      	movs	r1, #32
   16c26:	0018      	movs	r0, r3
   16c28:	f7ff fc62 	bl	164f0 <ecc_test_curve>
   16c2c:	0003      	movs	r3, r0
   16c2e:	60fb      	str	r3, [r7, #12]
    if (ret < 0) {
   16c30:	68fb      	ldr	r3, [r7, #12]
   16c32:	2b00      	cmp	r3, #0
   16c34:	db18      	blt.n	16c68 <ecc_test+0x68>
    ret = ecc_point_test();
    if (ret < 0) {
        goto done;
    }
#endif
    ret = ecc_def_curve_test(&rng);
   16c36:	1d3b      	adds	r3, r7, #4
   16c38:	0018      	movs	r0, r3
   16c3a:	f7ff ff59 	bl	16af0 <ecc_def_curve_test>
   16c3e:	0003      	movs	r3, r0
   16c40:	60fb      	str	r3, [r7, #12]
    if (ret < 0) {
   16c42:	68fb      	ldr	r3, [r7, #12]
   16c44:	2b00      	cmp	r3, #0
   16c46:	db11      	blt.n	16c6c <ecc_test+0x6c>
        printf("ecc_test_cdh_vectors failed! %d\n", ret);
        goto done;
    }
#endif

    ret = ecc_test_make_pub(&rng);
   16c48:	1d3b      	adds	r3, r7, #4
   16c4a:	0018      	movs	r0, r3
   16c4c:	f7fe fe52 	bl	158f4 <ecc_test_make_pub>
   16c50:	0003      	movs	r3, r0
   16c52:	60fb      	str	r3, [r7, #12]
    if (ret != 0) {
   16c54:	68fb      	ldr	r3, [r7, #12]
   16c56:	2b00      	cmp	r3, #0
   16c58:	d009      	beq.n	16c6e <ecc_test+0x6e>
        printf("ecc_test_make_pub failed!: %d\n", ret);
   16c5a:	68fa      	ldr	r2, [r7, #12]
   16c5c:	4b0a      	ldr	r3, [pc, #40]	; (16c88 <ecc_test+0x88>)
   16c5e:	0011      	movs	r1, r2
   16c60:	0018      	movs	r0, r3
   16c62:	f00f fa8d 	bl	26180 <iprintf>
        goto done;
   16c66:	e002      	b.n	16c6e <ecc_test+0x6e>
    }
#endif /* HAVE_ECC239 */
#if !defined(NO_ECC256) || defined(HAVE_ALL_CURVES)
    ret = ecc_test_curve(&rng, 32);
    if (ret < 0) {
        goto done;
   16c68:	46c0      	nop			; (mov r8, r8)
   16c6a:	e000      	b.n	16c6e <ecc_test+0x6e>
        goto done;
    }
#endif
    ret = ecc_def_curve_test(&rng);
    if (ret < 0) {
        goto done;
   16c6c:	46c0      	nop			; (mov r8, r8)
        goto done;
    }
#endif

done:
    wc_FreeRng(&rng);
   16c6e:	1d3b      	adds	r3, r7, #4
   16c70:	0018      	movs	r0, r3
   16c72:	f7ee fc13 	bl	549c <wc_FreeRng>

    return ret;
   16c76:	68fb      	ldr	r3, [r7, #12]
}
   16c78:	0018      	movs	r0, r3
   16c7a:	46bd      	mov	sp, r7
   16c7c:	b004      	add	sp, #16
   16c7e:	bd80      	pop	{r7, pc}
   16c80:	20000010 	.word	0x20000010
   16c84:	ffffde68 	.word	0xffffde68
   16c88:	0002da40 	.word	0x0002da40

00016c8c <ecc_test_buffers>:
}

#endif /* HAVE_ECC_ENCRYPT */

#ifdef USE_CERT_BUFFERS_256
int ecc_test_buffers(void) {
   16c8c:	b590      	push	{r4, r7, lr}
   16c8e:	4c8a      	ldr	r4, [pc, #552]	; (16eb8 <ecc_test_buffers+0x22c>)
   16c90:	44a5      	add	sp, r4
   16c92:	af02      	add	r7, sp, #8
    size_t bytes;
    ecc_key cliKey;
    ecc_key servKey;
    WC_RNG rng;
    word32 idx = 0;
   16c94:	2300      	movs	r3, #0
   16c96:	228a      	movs	r2, #138	; 0x8a
   16c98:	0092      	lsls	r2, r2, #2
   16c9a:	18ba      	adds	r2, r7, r2
   16c9c:	6013      	str	r3, [r2, #0]
    int    ret;
    /* pad our test message to 32 bytes so evenly divisible by AES_BLOCK_SZ */
    byte   in[] = "Everyone gets Friday off. ecc p";
   16c9e:	4b87      	ldr	r3, [pc, #540]	; (16ebc <ecc_test_buffers+0x230>)
   16ca0:	2293      	movs	r2, #147	; 0x93
   16ca2:	0112      	lsls	r2, r2, #4
   16ca4:	4694      	mov	ip, r2
   16ca6:	44bc      	add	ip, r7
   16ca8:	4463      	add	r3, ip
   16caa:	4a85      	ldr	r2, [pc, #532]	; (16ec0 <ecc_test_buffers+0x234>)
   16cac:	ca13      	ldmia	r2!, {r0, r1, r4}
   16cae:	c313      	stmia	r3!, {r0, r1, r4}
   16cb0:	ca13      	ldmia	r2!, {r0, r1, r4}
   16cb2:	c313      	stmia	r3!, {r0, r1, r4}
   16cb4:	ca03      	ldmia	r2!, {r0, r1}
   16cb6:	c303      	stmia	r3!, {r0, r1}
    word32 inLen = (word32)XSTRLEN((char*)in);
   16cb8:	2382      	movs	r3, #130	; 0x82
   16cba:	009b      	lsls	r3, r3, #2
   16cbc:	18fb      	adds	r3, r7, r3
   16cbe:	0018      	movs	r0, r3
   16cc0:	f00f fb76 	bl	263b0 <strlen>
   16cc4:	0003      	movs	r3, r0
   16cc6:	4a7f      	ldr	r2, [pc, #508]	; (16ec4 <ecc_test_buffers+0x238>)
   16cc8:	18ba      	adds	r2, r7, r2
   16cca:	6013      	str	r3, [r2, #0]
    byte   out[256];
    byte   plain[256];
    int verify = 0;
   16ccc:	2300      	movs	r3, #0
   16cce:	607b      	str	r3, [r7, #4]
    word32 x;

    ret = wc_ecc_init_ex(&cliKey, HEAP_HINT, devId);
   16cd0:	4b7d      	ldr	r3, [pc, #500]	; (16ec8 <ecc_test_buffers+0x23c>)
   16cd2:	681a      	ldr	r2, [r3, #0]
   16cd4:	4b7d      	ldr	r3, [pc, #500]	; (16ecc <ecc_test_buffers+0x240>)
   16cd6:	18fb      	adds	r3, r7, r3
   16cd8:	2100      	movs	r1, #0
   16cda:	0018      	movs	r0, r3
   16cdc:	f7f7 f94a 	bl	df74 <wc_ecc_init_ex>
   16ce0:	0003      	movs	r3, r0
   16ce2:	4a7b      	ldr	r2, [pc, #492]	; (16ed0 <ecc_test_buffers+0x244>)
   16ce4:	18ba      	adds	r2, r7, r2
   16ce6:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   16ce8:	4b79      	ldr	r3, [pc, #484]	; (16ed0 <ecc_test_buffers+0x244>)
   16cea:	18fb      	adds	r3, r7, r3
   16cec:	681b      	ldr	r3, [r3, #0]
   16cee:	2b00      	cmp	r3, #0
   16cf0:	d001      	beq.n	16cf6 <ecc_test_buffers+0x6a>
        return -8721;
   16cf2:	4b78      	ldr	r3, [pc, #480]	; (16ed4 <ecc_test_buffers+0x248>)
   16cf4:	e0db      	b.n	16eae <ecc_test_buffers+0x222>
    ret = wc_ecc_init_ex(&servKey, HEAP_HINT, devId);
   16cf6:	4b74      	ldr	r3, [pc, #464]	; (16ec8 <ecc_test_buffers+0x23c>)
   16cf8:	681a      	ldr	r2, [r3, #0]
   16cfa:	238d      	movs	r3, #141	; 0x8d
   16cfc:	009b      	lsls	r3, r3, #2
   16cfe:	18fb      	adds	r3, r7, r3
   16d00:	2100      	movs	r1, #0
   16d02:	0018      	movs	r0, r3
   16d04:	f7f7 f936 	bl	df74 <wc_ecc_init_ex>
   16d08:	0003      	movs	r3, r0
   16d0a:	4a71      	ldr	r2, [pc, #452]	; (16ed0 <ecc_test_buffers+0x244>)
   16d0c:	18ba      	adds	r2, r7, r2
   16d0e:	6013      	str	r3, [r2, #0]
    if (ret != 0)
   16d10:	4b6f      	ldr	r3, [pc, #444]	; (16ed0 <ecc_test_buffers+0x244>)
   16d12:	18fb      	adds	r3, r7, r3
   16d14:	681b      	ldr	r3, [r3, #0]
   16d16:	2b00      	cmp	r3, #0
   16d18:	d001      	beq.n	16d1e <ecc_test_buffers+0x92>
        return -8722;
   16d1a:	4b6f      	ldr	r3, [pc, #444]	; (16ed8 <ecc_test_buffers+0x24c>)
   16d1c:	e0c7      	b.n	16eae <ecc_test_buffers+0x222>

    bytes = (size_t)sizeof_ecc_clikey_der_256;
   16d1e:	2379      	movs	r3, #121	; 0x79
   16d20:	4a6e      	ldr	r2, [pc, #440]	; (16edc <ecc_test_buffers+0x250>)
   16d22:	18ba      	adds	r2, r7, r2
   16d24:	6013      	str	r3, [r2, #0]
    /* place client key into ecc_key struct cliKey */
    ret = wc_EccPrivateKeyDecode(ecc_clikey_der_256, &idx, &cliKey,
   16d26:	4b6d      	ldr	r3, [pc, #436]	; (16edc <ecc_test_buffers+0x250>)
   16d28:	18fb      	adds	r3, r7, r3
   16d2a:	681b      	ldr	r3, [r3, #0]
   16d2c:	4a67      	ldr	r2, [pc, #412]	; (16ecc <ecc_test_buffers+0x240>)
   16d2e:	18ba      	adds	r2, r7, r2
   16d30:	218a      	movs	r1, #138	; 0x8a
   16d32:	0089      	lsls	r1, r1, #2
   16d34:	1879      	adds	r1, r7, r1
   16d36:	486a      	ldr	r0, [pc, #424]	; (16ee0 <ecc_test_buffers+0x254>)
   16d38:	f7f0 fcaa 	bl	7690 <wc_EccPrivateKeyDecode>
   16d3c:	0003      	movs	r3, r0
   16d3e:	4a64      	ldr	r2, [pc, #400]	; (16ed0 <ecc_test_buffers+0x244>)
   16d40:	18ba      	adds	r2, r7, r2
   16d42:	6013      	str	r3, [r2, #0]
                                                                (word32)bytes);
    if (ret != 0)
   16d44:	4b62      	ldr	r3, [pc, #392]	; (16ed0 <ecc_test_buffers+0x244>)
   16d46:	18fb      	adds	r3, r7, r3
   16d48:	681b      	ldr	r3, [r3, #0]
   16d4a:	2b00      	cmp	r3, #0
   16d4c:	d001      	beq.n	16d52 <ecc_test_buffers+0xc6>
        return -8711;
   16d4e:	4b65      	ldr	r3, [pc, #404]	; (16ee4 <ecc_test_buffers+0x258>)
   16d50:	e0ad      	b.n	16eae <ecc_test_buffers+0x222>

    idx = 0;
   16d52:	2300      	movs	r3, #0
   16d54:	228a      	movs	r2, #138	; 0x8a
   16d56:	0092      	lsls	r2, r2, #2
   16d58:	18ba      	adds	r2, r7, r2
   16d5a:	6013      	str	r3, [r2, #0]
    bytes = (size_t)sizeof_ecc_key_der_256;
   16d5c:	2379      	movs	r3, #121	; 0x79
   16d5e:	4a5f      	ldr	r2, [pc, #380]	; (16edc <ecc_test_buffers+0x250>)
   16d60:	18ba      	adds	r2, r7, r2
   16d62:	6013      	str	r3, [r2, #0]

    /* place server key into ecc_key struct servKey */
    ret = wc_EccPrivateKeyDecode(ecc_key_der_256, &idx, &servKey,
   16d64:	4b5d      	ldr	r3, [pc, #372]	; (16edc <ecc_test_buffers+0x250>)
   16d66:	18fb      	adds	r3, r7, r3
   16d68:	681b      	ldr	r3, [r3, #0]
   16d6a:	228d      	movs	r2, #141	; 0x8d
   16d6c:	0092      	lsls	r2, r2, #2
   16d6e:	18ba      	adds	r2, r7, r2
   16d70:	218a      	movs	r1, #138	; 0x8a
   16d72:	0089      	lsls	r1, r1, #2
   16d74:	1879      	adds	r1, r7, r1
   16d76:	485c      	ldr	r0, [pc, #368]	; (16ee8 <ecc_test_buffers+0x25c>)
   16d78:	f7f0 fc8a 	bl	7690 <wc_EccPrivateKeyDecode>
   16d7c:	0003      	movs	r3, r0
   16d7e:	4a54      	ldr	r2, [pc, #336]	; (16ed0 <ecc_test_buffers+0x244>)
   16d80:	18ba      	adds	r2, r7, r2
   16d82:	6013      	str	r3, [r2, #0]
                                                                (word32)bytes);
    if (ret != 0)
   16d84:	4b52      	ldr	r3, [pc, #328]	; (16ed0 <ecc_test_buffers+0x244>)
   16d86:	18fb      	adds	r3, r7, r3
   16d88:	681b      	ldr	r3, [r3, #0]
   16d8a:	2b00      	cmp	r3, #0
   16d8c:	d001      	beq.n	16d92 <ecc_test_buffers+0x106>
        return -8712;
   16d8e:	4b57      	ldr	r3, [pc, #348]	; (16eec <ecc_test_buffers+0x260>)
   16d90:	e08d      	b.n	16eae <ecc_test_buffers+0x222>

#ifndef HAVE_FIPS
    ret = wc_InitRng_ex(&rng, HEAP_HINT, devId);
   16d92:	4b4d      	ldr	r3, [pc, #308]	; (16ec8 <ecc_test_buffers+0x23c>)
   16d94:	681a      	ldr	r2, [r3, #0]
   16d96:	238b      	movs	r3, #139	; 0x8b
   16d98:	009b      	lsls	r3, r3, #2
   16d9a:	18fb      	adds	r3, r7, r3
   16d9c:	2100      	movs	r1, #0
   16d9e:	0018      	movs	r0, r3
   16da0:	f7ee fb36 	bl	5410 <wc_InitRng_ex>
   16da4:	0003      	movs	r3, r0
   16da6:	4a4a      	ldr	r2, [pc, #296]	; (16ed0 <ecc_test_buffers+0x244>)
   16da8:	18ba      	adds	r2, r7, r2
   16daa:	6013      	str	r3, [r2, #0]
#else
    ret = wc_InitRng(&rng);
#endif
    if (ret != 0)
   16dac:	4b48      	ldr	r3, [pc, #288]	; (16ed0 <ecc_test_buffers+0x244>)
   16dae:	18fb      	adds	r3, r7, r3
   16db0:	681b      	ldr	r3, [r3, #0]
   16db2:	2b00      	cmp	r3, #0
   16db4:	d001      	beq.n	16dba <ecc_test_buffers+0x12e>
        return -8713;
   16db6:	4b4e      	ldr	r3, [pc, #312]	; (16ef0 <ecc_test_buffers+0x264>)
   16db8:	e079      	b.n	16eae <ecc_test_buffers+0x222>
            return -8716;
    }
#endif


    x = sizeof(out);
   16dba:	2380      	movs	r3, #128	; 0x80
   16dbc:	005b      	lsls	r3, r3, #1
   16dbe:	603b      	str	r3, [r7, #0]
    do {
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &cliKey.asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
    #endif
        if (ret == 0)
   16dc0:	4b43      	ldr	r3, [pc, #268]	; (16ed0 <ecc_test_buffers+0x244>)
   16dc2:	18fb      	adds	r3, r7, r3
   16dc4:	681b      	ldr	r3, [r3, #0]
   16dc6:	2b00      	cmp	r3, #0
   16dc8:	d117      	bne.n	16dfa <ecc_test_buffers+0x16e>
            ret = wc_ecc_sign_hash(in, inLen, out, &x, &rng, &cliKey);
   16dca:	003c      	movs	r4, r7
   16dcc:	2384      	movs	r3, #132	; 0x84
   16dce:	005b      	lsls	r3, r3, #1
   16dd0:	18fa      	adds	r2, r7, r3
   16dd2:	4b3c      	ldr	r3, [pc, #240]	; (16ec4 <ecc_test_buffers+0x238>)
   16dd4:	18fb      	adds	r3, r7, r3
   16dd6:	6819      	ldr	r1, [r3, #0]
   16dd8:	2382      	movs	r3, #130	; 0x82
   16dda:	009b      	lsls	r3, r3, #2
   16ddc:	18f8      	adds	r0, r7, r3
   16dde:	4b3b      	ldr	r3, [pc, #236]	; (16ecc <ecc_test_buffers+0x240>)
   16de0:	18fb      	adds	r3, r7, r3
   16de2:	9301      	str	r3, [sp, #4]
   16de4:	238b      	movs	r3, #139	; 0x8b
   16de6:	009b      	lsls	r3, r3, #2
   16de8:	18fb      	adds	r3, r7, r3
   16dea:	9300      	str	r3, [sp, #0]
   16dec:	0023      	movs	r3, r4
   16dee:	f7f7 f9b5 	bl	e15c <wc_ecc_sign_hash>
   16df2:	0003      	movs	r3, r0
   16df4:	4a36      	ldr	r2, [pc, #216]	; (16ed0 <ecc_test_buffers+0x244>)
   16df6:	18ba      	adds	r2, r7, r2
   16df8:	6013      	str	r3, [r2, #0]
    } while (ret == WC_PENDING_E);
   16dfa:	4b35      	ldr	r3, [pc, #212]	; (16ed0 <ecc_test_buffers+0x244>)
   16dfc:	18fb      	adds	r3, r7, r3
   16dfe:	681b      	ldr	r3, [r3, #0]
   16e00:	336c      	adds	r3, #108	; 0x6c
   16e02:	d0dd      	beq.n	16dc0 <ecc_test_buffers+0x134>
    if (ret < 0)
   16e04:	4b32      	ldr	r3, [pc, #200]	; (16ed0 <ecc_test_buffers+0x244>)
   16e06:	18fb      	adds	r3, r7, r3
   16e08:	681b      	ldr	r3, [r3, #0]
   16e0a:	2b00      	cmp	r3, #0
   16e0c:	da01      	bge.n	16e12 <ecc_test_buffers+0x186>
        return -8717;
   16e0e:	4b39      	ldr	r3, [pc, #228]	; (16ef4 <ecc_test_buffers+0x268>)
   16e10:	e04d      	b.n	16eae <ecc_test_buffers+0x222>

    XMEMSET(plain, 0, sizeof(plain));
   16e12:	2380      	movs	r3, #128	; 0x80
   16e14:	005a      	lsls	r2, r3, #1
   16e16:	2308      	movs	r3, #8
   16e18:	18fb      	adds	r3, r7, r3
   16e1a:	2100      	movs	r1, #0
   16e1c:	0018      	movs	r0, r3
   16e1e:	f00e fc84 	bl	2572a <memset>

    do {
    #if defined(WOLFSSL_ASYNC_CRYPT)
        ret = wc_AsyncWait(ret, &cliKey.asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
    #endif
        if (ret == 0)
   16e22:	4b2b      	ldr	r3, [pc, #172]	; (16ed0 <ecc_test_buffers+0x244>)
   16e24:	18fb      	adds	r3, r7, r3
   16e26:	681b      	ldr	r3, [r3, #0]
   16e28:	2b00      	cmp	r3, #0
   16e2a:	d113      	bne.n	16e54 <ecc_test_buffers+0x1c8>
            ret = wc_ecc_verify_hash(out, x, plain, sizeof(plain), &verify,
   16e2c:	6839      	ldr	r1, [r7, #0]
   16e2e:	2380      	movs	r3, #128	; 0x80
   16e30:	005c      	lsls	r4, r3, #1
   16e32:	2308      	movs	r3, #8
   16e34:	18fa      	adds	r2, r7, r3
   16e36:	2384      	movs	r3, #132	; 0x84
   16e38:	005b      	lsls	r3, r3, #1
   16e3a:	18f8      	adds	r0, r7, r3
   16e3c:	4b23      	ldr	r3, [pc, #140]	; (16ecc <ecc_test_buffers+0x240>)
   16e3e:	18fb      	adds	r3, r7, r3
   16e40:	9301      	str	r3, [sp, #4]
   16e42:	1d3b      	adds	r3, r7, #4
   16e44:	9300      	str	r3, [sp, #0]
   16e46:	0023      	movs	r3, r4
   16e48:	f7f7 fa78 	bl	e33c <wc_ecc_verify_hash>
   16e4c:	0003      	movs	r3, r0
   16e4e:	4a20      	ldr	r2, [pc, #128]	; (16ed0 <ecc_test_buffers+0x244>)
   16e50:	18ba      	adds	r2, r7, r2
   16e52:	6013      	str	r3, [r2, #0]
                &cliKey);
    } while (ret == WC_PENDING_E);
   16e54:	4b1e      	ldr	r3, [pc, #120]	; (16ed0 <ecc_test_buffers+0x244>)
   16e56:	18fb      	adds	r3, r7, r3
   16e58:	681b      	ldr	r3, [r3, #0]
   16e5a:	336c      	adds	r3, #108	; 0x6c
   16e5c:	d0e1      	beq.n	16e22 <ecc_test_buffers+0x196>
    if (ret < 0)
   16e5e:	4b1c      	ldr	r3, [pc, #112]	; (16ed0 <ecc_test_buffers+0x244>)
   16e60:	18fb      	adds	r3, r7, r3
   16e62:	681b      	ldr	r3, [r3, #0]
   16e64:	2b00      	cmp	r3, #0
   16e66:	da01      	bge.n	16e6c <ecc_test_buffers+0x1e0>
        return -8718;
   16e68:	4b23      	ldr	r3, [pc, #140]	; (16ef8 <ecc_test_buffers+0x26c>)
   16e6a:	e020      	b.n	16eae <ecc_test_buffers+0x222>

    if (XMEMCMP(plain, in, (word32)ret))
   16e6c:	4b18      	ldr	r3, [pc, #96]	; (16ed0 <ecc_test_buffers+0x244>)
   16e6e:	18fb      	adds	r3, r7, r3
   16e70:	681a      	ldr	r2, [r3, #0]
   16e72:	2382      	movs	r3, #130	; 0x82
   16e74:	009b      	lsls	r3, r3, #2
   16e76:	18f9      	adds	r1, r7, r3
   16e78:	2308      	movs	r3, #8
   16e7a:	18fb      	adds	r3, r7, r3
   16e7c:	0018      	movs	r0, r3
   16e7e:	f00e fc27 	bl	256d0 <memcmp>
   16e82:	1e03      	subs	r3, r0, #0
   16e84:	d001      	beq.n	16e8a <ecc_test_buffers+0x1fe>
        return -8719;
   16e86:	4b1d      	ldr	r3, [pc, #116]	; (16efc <ecc_test_buffers+0x270>)
   16e88:	e011      	b.n	16eae <ecc_test_buffers+0x222>
                                                               (word32) bytes);
    if (ret != 0)
        return -8720;
#endif

    wc_ecc_free(&cliKey);
   16e8a:	4b10      	ldr	r3, [pc, #64]	; (16ecc <ecc_test_buffers+0x240>)
   16e8c:	18fb      	adds	r3, r7, r3
   16e8e:	0018      	movs	r0, r3
   16e90:	f7f7 fa3a 	bl	e308 <wc_ecc_free>
    wc_ecc_free(&servKey);
   16e94:	238d      	movs	r3, #141	; 0x8d
   16e96:	009b      	lsls	r3, r3, #2
   16e98:	18fb      	adds	r3, r7, r3
   16e9a:	0018      	movs	r0, r3
   16e9c:	f7f7 fa34 	bl	e308 <wc_ecc_free>
    wc_FreeRng(&rng);
   16ea0:	238b      	movs	r3, #139	; 0x8b
   16ea2:	009b      	lsls	r3, r3, #2
   16ea4:	18fb      	adds	r3, r7, r3
   16ea6:	0018      	movs	r0, r3
   16ea8:	f7ee faf8 	bl	549c <wc_FreeRng>

    return 0;
   16eac:	2300      	movs	r3, #0
}
   16eae:	0018      	movs	r0, r3
   16eb0:	46bd      	mov	sp, r7
   16eb2:	4b13      	ldr	r3, [pc, #76]	; (16f00 <ecc_test_buffers+0x274>)
   16eb4:	449d      	add	sp, r3
   16eb6:	bd90      	pop	{r4, r7, pc}
   16eb8:	fffff6c4 	.word	0xfffff6c4
   16ebc:	fffff8d8 	.word	0xfffff8d8
   16ec0:	0002da60 	.word	0x0002da60
   16ec4:	00000928 	.word	0x00000928
   16ec8:	20000010 	.word	0x20000010
   16ecc:	000005ac 	.word	0x000005ac
   16ed0:	0000092c 	.word	0x0000092c
   16ed4:	ffffddef 	.word	0xffffddef
   16ed8:	ffffddee 	.word	0xffffddee
   16edc:	00000924 	.word	0x00000924
   16ee0:	0002c908 	.word	0x0002c908
   16ee4:	ffffddf9 	.word	0xffffddf9
   16ee8:	0002c984 	.word	0x0002c984
   16eec:	ffffddf8 	.word	0xffffddf8
   16ef0:	ffffddf7 	.word	0xffffddf7
   16ef4:	ffffddf3 	.word	0xffffddf3
   16ef8:	ffffddf2 	.word	0xffffddf2
   16efc:	ffffddf1 	.word	0xffffddf1
   16f00:	00000934 	.word	0x00000934

00016f04 <logging_test>:
    log_cnt++;
}
#endif /* DEBUG_WOLFSSL */

int logging_test(void)
{
   16f04:	b580      	push	{r7, lr}
   16f06:	af00      	add	r7, sp, #0
    /* suppress unused args */
    (void)a;
    (void)b;

#else
    if (wolfSSL_Debugging_ON() != NOT_COMPILED_IN)
   16f08:	f7ee fae4 	bl	54d4 <wolfSSL_Debugging_ON>
   16f0c:	0003      	movs	r3, r0
   16f0e:	33ae      	adds	r3, #174	; 0xae
   16f10:	d001      	beq.n	16f16 <logging_test+0x12>
        return -9803;
   16f12:	4b08      	ldr	r3, [pc, #32]	; (16f34 <logging_test+0x30>)
   16f14:	e00a      	b.n	16f2c <logging_test+0x28>
    wolfSSL_Debugging_OFF();
   16f16:	f7ee fae5 	bl	54e4 <wolfSSL_Debugging_OFF>
    if (wolfSSL_SetLoggingCb(NULL) != NOT_COMPILED_IN)
   16f1a:	2000      	movs	r0, #0
   16f1c:	f7ee fad0 	bl	54c0 <wolfSSL_SetLoggingCb>
   16f20:	0003      	movs	r3, r0
   16f22:	33ae      	adds	r3, #174	; 0xae
   16f24:	d001      	beq.n	16f2a <logging_test+0x26>
        return -9804;
   16f26:	4b04      	ldr	r3, [pc, #16]	; (16f38 <logging_test+0x34>)
   16f28:	e000      	b.n	16f2c <logging_test+0x28>
#endif /* DEBUG_WOLFSSL */
    return 0;
   16f2a:	2300      	movs	r3, #0
}
   16f2c:	0018      	movs	r0, r3
   16f2e:	46bd      	mov	sp, r7
   16f30:	bd80      	pop	{r7, pc}
   16f32:	46c0      	nop			; (mov r8, r8)
   16f34:	ffffd9b5 	.word	0xffffd9b5
   16f38:	ffffd9b4 	.word	0xffffd9b4

00016f3c <mutex_test>:


int mutex_test(void)
{
   16f3c:	b580      	push	{r7, lr}
   16f3e:	b082      	sub	sp, #8
   16f40:	af00      	add	r7, sp, #0
#ifdef WOLFSSL_PTHREADS
    wolfSSL_Mutex m;
#endif
    wolfSSL_Mutex *mm = wc_InitAndAllocMutex();
   16f42:	f7ee fbad 	bl	56a0 <wc_InitAndAllocMutex>
   16f46:	0003      	movs	r3, r0
   16f48:	607b      	str	r3, [r7, #4]
    if (mm == NULL)
   16f4a:	687b      	ldr	r3, [r7, #4]
   16f4c:	2b00      	cmp	r3, #0
   16f4e:	d101      	bne.n	16f54 <mutex_test+0x18>
        return -9900;
   16f50:	4b09      	ldr	r3, [pc, #36]	; (16f78 <mutex_test+0x3c>)
   16f52:	e00d      	b.n	16f70 <mutex_test+0x34>
    wc_FreeMutex(mm);
   16f54:	687b      	ldr	r3, [r7, #4]
   16f56:	0018      	movs	r0, r3
   16f58:	f7ee fbce 	bl	56f8 <wc_FreeMutex>
    XFREE(mm, NULL, DYNAMIC_TYPE_MUTEX);
   16f5c:	687b      	ldr	r3, [r7, #4]
   16f5e:	603b      	str	r3, [r7, #0]
   16f60:	683b      	ldr	r3, [r7, #0]
   16f62:	2b00      	cmp	r3, #0
   16f64:	d003      	beq.n	16f6e <mutex_test+0x32>
   16f66:	683b      	ldr	r3, [r7, #0]
   16f68:	0018      	movs	r0, r3
   16f6a:	f00e fb95 	bl	25698 <free>
        return -9906;
    if (wc_UnLockMutex(&m) != BAD_MUTEX_E)
        return -9907;
#endif

    return 0;
   16f6e:	2300      	movs	r3, #0
}
   16f70:	0018      	movs	r0, r3
   16f72:	46bd      	mov	sp, r7
   16f74:	b002      	add	sp, #8
   16f76:	bd80      	pop	{r7, pc}
   16f78:	ffffd954 	.word	0xffffd954

00016f7c <bench_async_check>:
    #define BENCH_ASYNC_GET_NAME(doAsync) ""
    #define BENCH_ASYNC_GET_DEV(obj)      NULL

    static WC_INLINE int bench_async_check(int* ret, void* asyncDev,
        int callAgain, int* times, int limit, int* pending)
    {
   16f7c:	b580      	push	{r7, lr}
   16f7e:	b084      	sub	sp, #16
   16f80:	af00      	add	r7, sp, #0
   16f82:	60f8      	str	r0, [r7, #12]
   16f84:	60b9      	str	r1, [r7, #8]
   16f86:	607a      	str	r2, [r7, #4]
   16f88:	603b      	str	r3, [r7, #0]
        (void)callAgain;
        (void)times;
        (void)limit;
        (void)pending;

        return 1;
   16f8a:	2301      	movs	r3, #1
    }
   16f8c:	0018      	movs	r0, r3
   16f8e:	46bd      	mov	sp, r7
   16f90:	b004      	add	sp, #16
   16f92:	bd80      	pop	{r7, pc}

00016f94 <bench_async_handle>:

    static WC_INLINE int bench_async_handle(int* ret, void* asyncDev,
        int callAgain, int* times, int* pending)
    {
   16f94:	b580      	push	{r7, lr}
   16f96:	b084      	sub	sp, #16
   16f98:	af00      	add	r7, sp, #0
   16f9a:	60f8      	str	r0, [r7, #12]
   16f9c:	60b9      	str	r1, [r7, #8]
   16f9e:	607a      	str	r2, [r7, #4]
   16fa0:	603b      	str	r3, [r7, #0]
        (void)asyncDev;
        (void)callAgain;
        (void)pending;

        if (*ret >= 0) {
   16fa2:	68fb      	ldr	r3, [r7, #12]
   16fa4:	681b      	ldr	r3, [r3, #0]
   16fa6:	2b00      	cmp	r3, #0
   16fa8:	db06      	blt.n	16fb8 <bench_async_handle+0x24>
            /* operation completed */
            (*times)++;
   16faa:	683b      	ldr	r3, [r7, #0]
   16fac:	681b      	ldr	r3, [r3, #0]
   16fae:	1c5a      	adds	r2, r3, #1
   16fb0:	683b      	ldr	r3, [r7, #0]
   16fb2:	601a      	str	r2, [r3, #0]
            return 1;
   16fb4:	2301      	movs	r3, #1
   16fb6:	e000      	b.n	16fba <bench_async_handle+0x26>
        }
        return 0;
   16fb8:	2300      	movs	r3, #0
    }
   16fba:	0018      	movs	r0, r3
   16fbc:	46bd      	mov	sp, r7
   16fbe:	b004      	add	sp, #16
   16fc0:	bd80      	pop	{r7, pc}
   16fc2:	46c0      	nop			; (mov r8, r8)

00016fc4 <bench_stats_init>:
        return bstat;
    }
#endif /* WOLFSSL_ASYNC_CRYPT && !WC_NO_ASYNC_THREADING */

static WC_INLINE void bench_stats_init(void)
{
   16fc4:	b580      	push	{r7, lr}
   16fc6:	af00      	add	r7, sp, #0
#if defined(WOLFSSL_ASYNC_CRYPT) && !defined(WC_NO_ASYNC_THREADING)
    bench_stats_head = NULL;
    bench_stats_tail = NULL;
#endif
    INIT_CYCLE_COUNTER
}
   16fc8:	46c0      	nop			; (mov r8, r8)
   16fca:	46bd      	mov	sp, r7
   16fcc:	bd80      	pop	{r7, pc}
   16fce:	46c0      	nop			; (mov r8, r8)

00016fd0 <bench_stats_start>:

static WC_INLINE void bench_stats_start(int* count, double* start)
{
   16fd0:	b590      	push	{r4, r7, lr}
   16fd2:	b083      	sub	sp, #12
   16fd4:	af00      	add	r7, sp, #0
   16fd6:	6078      	str	r0, [r7, #4]
   16fd8:	6039      	str	r1, [r7, #0]
    *count = 0;
   16fda:	687b      	ldr	r3, [r7, #4]
   16fdc:	2200      	movs	r2, #0
   16fde:	601a      	str	r2, [r3, #0]
    *start = current_time(1);
   16fe0:	2001      	movs	r0, #1
   16fe2:	f7e9 fe45 	bl	c70 <current_time>
   16fe6:	0003      	movs	r3, r0
   16fe8:	000c      	movs	r4, r1
   16fea:	683a      	ldr	r2, [r7, #0]
   16fec:	6013      	str	r3, [r2, #0]
   16fee:	6054      	str	r4, [r2, #4]
    BEGIN_INTEL_CYCLES
}
   16ff0:	46c0      	nop			; (mov r8, r8)
   16ff2:	46bd      	mov	sp, r7
   16ff4:	b003      	add	sp, #12
   16ff6:	bd90      	pop	{r4, r7, pc}

00016ff8 <bench_stats_sym_check>:

static WC_INLINE int bench_stats_sym_check(double start)
{
   16ff8:	b590      	push	{r4, r7, lr}
   16ffa:	b083      	sub	sp, #12
   16ffc:	af00      	add	r7, sp, #0
   16ffe:	6038      	str	r0, [r7, #0]
   17000:	6079      	str	r1, [r7, #4]
    return ((current_time(0) - start) < BENCH_MIN_RUNTIME_SEC);
   17002:	2000      	movs	r0, #0
   17004:	f7e9 fe34 	bl	c70 <current_time>
   17008:	683a      	ldr	r2, [r7, #0]
   1700a:	687b      	ldr	r3, [r7, #4]
   1700c:	f00d fed0 	bl	24db0 <__aeabi_dsub>
   17010:	0003      	movs	r3, r0
   17012:	000c      	movs	r4, r1
   17014:	0018      	movs	r0, r3
   17016:	0021      	movs	r1, r4
   17018:	2301      	movs	r3, #1
   1701a:	1c1c      	adds	r4, r3, #0
   1701c:	2200      	movs	r2, #0
   1701e:	4b06      	ldr	r3, [pc, #24]	; (17038 <bench_stats_sym_check+0x40>)
   17020:	f00c fbc8 	bl	237b4 <__aeabi_dcmplt>
   17024:	1e03      	subs	r3, r0, #0
   17026:	d101      	bne.n	1702c <bench_stats_sym_check+0x34>
   17028:	2300      	movs	r3, #0
   1702a:	1c1c      	adds	r4, r3, #0
   1702c:	b2e3      	uxtb	r3, r4
}
   1702e:	0018      	movs	r0, r3
   17030:	46bd      	mov	sp, r7
   17032:	b003      	add	sp, #12
   17034:	bd90      	pop	{r4, r7, pc}
   17036:	46c0      	nop			; (mov r8, r8)
   17038:	3ff00000 	.word	0x3ff00000

0001703c <bench_stats_sym_finish>:

/* countSz is number of bytes that 1 count represents. Normally bench_size,
 * except for AES direct that operates on AES_BLOCK_SIZE blocks */
static void bench_stats_sym_finish(const char* desc, int doAsync, int count,
                                   int countSz, double start, int ret)
{
   1703c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1703e:	b0bb      	sub	sp, #236	; 0xec
   17040:	af0e      	add	r7, sp, #56	; 0x38
   17042:	60f8      	str	r0, [r7, #12]
   17044:	60b9      	str	r1, [r7, #8]
   17046:	607a      	str	r2, [r7, #4]
   17048:	603b      	str	r3, [r7, #0]
    double total, persec = 0, blocks = count;
   1704a:	2300      	movs	r3, #0
   1704c:	2400      	movs	r4, #0
   1704e:	22a8      	movs	r2, #168	; 0xa8
   17050:	18ba      	adds	r2, r7, r2
   17052:	6013      	str	r3, [r2, #0]
   17054:	6054      	str	r4, [r2, #4]
   17056:	6878      	ldr	r0, [r7, #4]
   17058:	f00e fa34 	bl	254c4 <__aeabi_i2d>
   1705c:	0003      	movs	r3, r0
   1705e:	000c      	movs	r4, r1
   17060:	22a0      	movs	r2, #160	; 0xa0
   17062:	18ba      	adds	r2, r7, r2
   17064:	6013      	str	r3, [r2, #0]
   17066:	6054      	str	r4, [r2, #4]
    const char* blockType;
    char msg[128] = {0};
   17068:	2310      	movs	r3, #16
   1706a:	18fb      	adds	r3, r7, r3
   1706c:	0018      	movs	r0, r3
   1706e:	2380      	movs	r3, #128	; 0x80
   17070:	001a      	movs	r2, r3
   17072:	2100      	movs	r1, #0
   17074:	f00e fb59 	bl	2572a <memset>
    const char** word = bench_result_words1[lng_index];
   17078:	4b9d      	ldr	r3, [pc, #628]	; (172f0 <bench_stats_sym_finish+0x2b4>)
   1707a:	681b      	ldr	r3, [r3, #0]
   1707c:	011a      	lsls	r2, r3, #4
   1707e:	4b9d      	ldr	r3, [pc, #628]	; (172f4 <bench_stats_sym_finish+0x2b8>)
   17080:	18d3      	adds	r3, r2, r3
   17082:	2298      	movs	r2, #152	; 0x98
   17084:	18ba      	adds	r2, r7, r2
   17086:	6013      	str	r3, [r2, #0]

    END_INTEL_CYCLES
    total = current_time(0) - start;
   17088:	2000      	movs	r0, #0
   1708a:	f7e9 fdf1 	bl	c70 <current_time>
   1708e:	23c8      	movs	r3, #200	; 0xc8
   17090:	18fb      	adds	r3, r7, r3
   17092:	681a      	ldr	r2, [r3, #0]
   17094:	685b      	ldr	r3, [r3, #4]
   17096:	f00d fe8b 	bl	24db0 <__aeabi_dsub>
   1709a:	0003      	movs	r3, r0
   1709c:	000c      	movs	r4, r1
   1709e:	2290      	movs	r2, #144	; 0x90
   170a0:	18ba      	adds	r2, r7, r2
   170a2:	6013      	str	r3, [r2, #0]
   170a4:	6054      	str	r4, [r2, #4]

    /* calculate actual bytes */
    blocks *= countSz;
   170a6:	6838      	ldr	r0, [r7, #0]
   170a8:	f00e fa0c 	bl	254c4 <__aeabi_i2d>
   170ac:	0003      	movs	r3, r0
   170ae:	000c      	movs	r4, r1
   170b0:	001a      	movs	r2, r3
   170b2:	0023      	movs	r3, r4
   170b4:	21a0      	movs	r1, #160	; 0xa0
   170b6:	1879      	adds	r1, r7, r1
   170b8:	6808      	ldr	r0, [r1, #0]
   170ba:	6849      	ldr	r1, [r1, #4]
   170bc:	f00d fbfe 	bl	248bc <__aeabi_dmul>
   170c0:	0003      	movs	r3, r0
   170c2:	000c      	movs	r4, r1
   170c4:	22a0      	movs	r2, #160	; 0xa0
   170c6:	18ba      	adds	r2, r7, r2
   170c8:	6013      	str	r3, [r2, #0]
   170ca:	6054      	str	r4, [r2, #4]

    if (base2) {
   170cc:	4b8a      	ldr	r3, [pc, #552]	; (172f8 <bench_stats_sym_finish+0x2bc>)
   170ce:	681b      	ldr	r3, [r3, #0]
   170d0:	2b00      	cmp	r3, #0
   170d2:	d03e      	beq.n	17152 <bench_stats_sym_finish+0x116>
        /* determine if we should show as KB or MB */
        if (blocks > (1024ul * 1024ul)) {
   170d4:	2200      	movs	r2, #0
   170d6:	4b89      	ldr	r3, [pc, #548]	; (172fc <bench_stats_sym_finish+0x2c0>)
   170d8:	21a0      	movs	r1, #160	; 0xa0
   170da:	1879      	adds	r1, r7, r1
   170dc:	6808      	ldr	r0, [r1, #0]
   170de:	6849      	ldr	r1, [r1, #4]
   170e0:	f00c fb7c 	bl	237dc <__aeabi_dcmpgt>
   170e4:	1e03      	subs	r3, r0, #0
   170e6:	d012      	beq.n	1710e <bench_stats_sym_finish+0xd2>
            blocks /= (1024ul * 1024ul);
   170e8:	2200      	movs	r2, #0
   170ea:	4b84      	ldr	r3, [pc, #528]	; (172fc <bench_stats_sym_finish+0x2c0>)
   170ec:	21a0      	movs	r1, #160	; 0xa0
   170ee:	1879      	adds	r1, r7, r1
   170f0:	6808      	ldr	r0, [r1, #0]
   170f2:	6849      	ldr	r1, [r1, #4]
   170f4:	f00c ffbe 	bl	24074 <__aeabi_ddiv>
   170f8:	0003      	movs	r3, r0
   170fa:	000c      	movs	r4, r1
   170fc:	22a0      	movs	r2, #160	; 0xa0
   170fe:	18ba      	adds	r2, r7, r2
   17100:	6013      	str	r3, [r2, #0]
   17102:	6054      	str	r4, [r2, #4]
            blockType = "MB";
   17104:	4b7e      	ldr	r3, [pc, #504]	; (17300 <bench_stats_sym_finish+0x2c4>)
   17106:	229c      	movs	r2, #156	; 0x9c
   17108:	18ba      	adds	r2, r7, r2
   1710a:	6013      	str	r3, [r2, #0]
   1710c:	e05f      	b.n	171ce <bench_stats_sym_finish+0x192>
        }
        else if (blocks > 1024) {
   1710e:	2200      	movs	r2, #0
   17110:	4b7c      	ldr	r3, [pc, #496]	; (17304 <bench_stats_sym_finish+0x2c8>)
   17112:	21a0      	movs	r1, #160	; 0xa0
   17114:	1879      	adds	r1, r7, r1
   17116:	6808      	ldr	r0, [r1, #0]
   17118:	6849      	ldr	r1, [r1, #4]
   1711a:	f00c fb5f 	bl	237dc <__aeabi_dcmpgt>
   1711e:	1e03      	subs	r3, r0, #0
   17120:	d012      	beq.n	17148 <bench_stats_sym_finish+0x10c>
            blocks /= 1024; /* make KB */
   17122:	2200      	movs	r2, #0
   17124:	4b77      	ldr	r3, [pc, #476]	; (17304 <bench_stats_sym_finish+0x2c8>)
   17126:	21a0      	movs	r1, #160	; 0xa0
   17128:	1879      	adds	r1, r7, r1
   1712a:	6808      	ldr	r0, [r1, #0]
   1712c:	6849      	ldr	r1, [r1, #4]
   1712e:	f00c ffa1 	bl	24074 <__aeabi_ddiv>
   17132:	0003      	movs	r3, r0
   17134:	000c      	movs	r4, r1
   17136:	22a0      	movs	r2, #160	; 0xa0
   17138:	18ba      	adds	r2, r7, r2
   1713a:	6013      	str	r3, [r2, #0]
   1713c:	6054      	str	r4, [r2, #4]
            blockType = "KB";
   1713e:	4b72      	ldr	r3, [pc, #456]	; (17308 <bench_stats_sym_finish+0x2cc>)
   17140:	229c      	movs	r2, #156	; 0x9c
   17142:	18ba      	adds	r2, r7, r2
   17144:	6013      	str	r3, [r2, #0]
   17146:	e042      	b.n	171ce <bench_stats_sym_finish+0x192>
        }
        else {
            blockType = "bytes";
   17148:	4b70      	ldr	r3, [pc, #448]	; (1730c <bench_stats_sym_finish+0x2d0>)
   1714a:	229c      	movs	r2, #156	; 0x9c
   1714c:	18ba      	adds	r2, r7, r2
   1714e:	6013      	str	r3, [r2, #0]
   17150:	e03d      	b.n	171ce <bench_stats_sym_finish+0x192>
        }
    }
    else {
        /* determine if we should show as kB or mB */
        if (blocks > (1000ul * 1000ul)) {
   17152:	2200      	movs	r2, #0
   17154:	4b6e      	ldr	r3, [pc, #440]	; (17310 <bench_stats_sym_finish+0x2d4>)
   17156:	21a0      	movs	r1, #160	; 0xa0
   17158:	1879      	adds	r1, r7, r1
   1715a:	6808      	ldr	r0, [r1, #0]
   1715c:	6849      	ldr	r1, [r1, #4]
   1715e:	f00c fb3d 	bl	237dc <__aeabi_dcmpgt>
   17162:	1e03      	subs	r3, r0, #0
   17164:	d012      	beq.n	1718c <bench_stats_sym_finish+0x150>
            blocks /= (1000ul * 1000ul);
   17166:	2200      	movs	r2, #0
   17168:	4b69      	ldr	r3, [pc, #420]	; (17310 <bench_stats_sym_finish+0x2d4>)
   1716a:	21a0      	movs	r1, #160	; 0xa0
   1716c:	1879      	adds	r1, r7, r1
   1716e:	6808      	ldr	r0, [r1, #0]
   17170:	6849      	ldr	r1, [r1, #4]
   17172:	f00c ff7f 	bl	24074 <__aeabi_ddiv>
   17176:	0003      	movs	r3, r0
   17178:	000c      	movs	r4, r1
   1717a:	22a0      	movs	r2, #160	; 0xa0
   1717c:	18ba      	adds	r2, r7, r2
   1717e:	6013      	str	r3, [r2, #0]
   17180:	6054      	str	r4, [r2, #4]
            blockType = "mB";
   17182:	4b64      	ldr	r3, [pc, #400]	; (17314 <bench_stats_sym_finish+0x2d8>)
   17184:	229c      	movs	r2, #156	; 0x9c
   17186:	18ba      	adds	r2, r7, r2
   17188:	6013      	str	r3, [r2, #0]
   1718a:	e020      	b.n	171ce <bench_stats_sym_finish+0x192>
        }
        else if (blocks > 1000) {
   1718c:	2200      	movs	r2, #0
   1718e:	4b62      	ldr	r3, [pc, #392]	; (17318 <bench_stats_sym_finish+0x2dc>)
   17190:	21a0      	movs	r1, #160	; 0xa0
   17192:	1879      	adds	r1, r7, r1
   17194:	6808      	ldr	r0, [r1, #0]
   17196:	6849      	ldr	r1, [r1, #4]
   17198:	f00c fb20 	bl	237dc <__aeabi_dcmpgt>
   1719c:	1e03      	subs	r3, r0, #0
   1719e:	d012      	beq.n	171c6 <bench_stats_sym_finish+0x18a>
            blocks /= 1000; /* make kB */
   171a0:	2200      	movs	r2, #0
   171a2:	4b5d      	ldr	r3, [pc, #372]	; (17318 <bench_stats_sym_finish+0x2dc>)
   171a4:	21a0      	movs	r1, #160	; 0xa0
   171a6:	1879      	adds	r1, r7, r1
   171a8:	6808      	ldr	r0, [r1, #0]
   171aa:	6849      	ldr	r1, [r1, #4]
   171ac:	f00c ff62 	bl	24074 <__aeabi_ddiv>
   171b0:	0003      	movs	r3, r0
   171b2:	000c      	movs	r4, r1
   171b4:	22a0      	movs	r2, #160	; 0xa0
   171b6:	18ba      	adds	r2, r7, r2
   171b8:	6013      	str	r3, [r2, #0]
   171ba:	6054      	str	r4, [r2, #4]
            blockType = "kB";
   171bc:	4b57      	ldr	r3, [pc, #348]	; (1731c <bench_stats_sym_finish+0x2e0>)
   171be:	229c      	movs	r2, #156	; 0x9c
   171c0:	18ba      	adds	r2, r7, r2
   171c2:	6013      	str	r3, [r2, #0]
   171c4:	e003      	b.n	171ce <bench_stats_sym_finish+0x192>
        }
        else {
            blockType = "bytes";
   171c6:	4b51      	ldr	r3, [pc, #324]	; (1730c <bench_stats_sym_finish+0x2d0>)
   171c8:	229c      	movs	r2, #156	; 0x9c
   171ca:	18ba      	adds	r2, r7, r2
   171cc:	6013      	str	r3, [r2, #0]
        }
    }

    /* caclulcate blocks per second */
    if (total > 0) {
   171ce:	2200      	movs	r2, #0
   171d0:	2300      	movs	r3, #0
   171d2:	2190      	movs	r1, #144	; 0x90
   171d4:	1879      	adds	r1, r7, r1
   171d6:	6808      	ldr	r0, [r1, #0]
   171d8:	6849      	ldr	r1, [r1, #4]
   171da:	f00c faff 	bl	237dc <__aeabi_dcmpgt>
   171de:	1e03      	subs	r3, r0, #0
   171e0:	d017      	beq.n	17212 <bench_stats_sym_finish+0x1d6>
        persec = (1 / total) * blocks;
   171e2:	2390      	movs	r3, #144	; 0x90
   171e4:	18fb      	adds	r3, r7, r3
   171e6:	681a      	ldr	r2, [r3, #0]
   171e8:	685b      	ldr	r3, [r3, #4]
   171ea:	2000      	movs	r0, #0
   171ec:	494c      	ldr	r1, [pc, #304]	; (17320 <bench_stats_sym_finish+0x2e4>)
   171ee:	f00c ff41 	bl	24074 <__aeabi_ddiv>
   171f2:	0003      	movs	r3, r0
   171f4:	000c      	movs	r4, r1
   171f6:	0018      	movs	r0, r3
   171f8:	0021      	movs	r1, r4
   171fa:	23a0      	movs	r3, #160	; 0xa0
   171fc:	18fb      	adds	r3, r7, r3
   171fe:	681a      	ldr	r2, [r3, #0]
   17200:	685b      	ldr	r3, [r3, #4]
   17202:	f00d fb5b 	bl	248bc <__aeabi_dmul>
   17206:	0003      	movs	r3, r0
   17208:	000c      	movs	r4, r1
   1720a:	22a8      	movs	r2, #168	; 0xa8
   1720c:	18ba      	adds	r2, r7, r2
   1720e:	6013      	str	r3, [r2, #0]
   17210:	6054      	str	r4, [r2, #4]
    }

    /* format and print to terminal */
    if (csv_format == 1) {
   17212:	4b44      	ldr	r3, [pc, #272]	; (17324 <bench_stats_sym_finish+0x2e8>)
   17214:	681b      	ldr	r3, [r3, #0]
   17216:	2b01      	cmp	r3, #1
   17218:	d118      	bne.n	1724c <bench_stats_sym_finish+0x210>
        XSNPRINTF(msg, sizeof(msg), "%s,%.3f,", desc, persec);
   1721a:	68f9      	ldr	r1, [r7, #12]
   1721c:	4a42      	ldr	r2, [pc, #264]	; (17328 <bench_stats_sym_finish+0x2ec>)
   1721e:	2310      	movs	r3, #16
   17220:	18f8      	adds	r0, r7, r3
   17222:	23a8      	movs	r3, #168	; 0xa8
   17224:	18fb      	adds	r3, r7, r3
   17226:	685c      	ldr	r4, [r3, #4]
   17228:	681b      	ldr	r3, [r3, #0]
   1722a:	9300      	str	r3, [sp, #0]
   1722c:	9401      	str	r4, [sp, #4]
   1722e:	000b      	movs	r3, r1
   17230:	2180      	movs	r1, #128	; 0x80
   17232:	f00f f88b 	bl	2634c <sniprintf>
        SHOW_INTEL_CYCLES_CSV(msg, sizeof(msg), countSz);
   17236:	2310      	movs	r3, #16
   17238:	18fb      	adds	r3, r7, r3
   1723a:	0018      	movs	r0, r3
   1723c:	f00f f8b8 	bl	263b0 <strlen>
   17240:	0002      	movs	r2, r0
   17242:	2310      	movs	r3, #16
   17244:	18fb      	adds	r3, r7, r3
   17246:	210a      	movs	r1, #10
   17248:	5499      	strb	r1, [r3, r2]
   1724a:	e039      	b.n	172c0 <bench_stats_sym_finish+0x284>
    } else {
        XSNPRINTF(msg, sizeof(msg), "%-16s%s %5.0f %s %s %5.3f %s, %8.3f %s/s",
   1724c:	2398      	movs	r3, #152	; 0x98
   1724e:	18fb      	adds	r3, r7, r3
   17250:	681b      	ldr	r3, [r3, #0]
   17252:	681a      	ldr	r2, [r3, #0]
        desc, BENCH_ASYNC_GET_NAME(doAsync), blocks, blockType, word[0], total, word[1],
   17254:	2398      	movs	r3, #152	; 0x98
   17256:	18fb      	adds	r3, r7, r3
   17258:	681b      	ldr	r3, [r3, #0]
   1725a:	3304      	adds	r3, #4
    /* format and print to terminal */
    if (csv_format == 1) {
        XSNPRINTF(msg, sizeof(msg), "%s,%.3f,", desc, persec);
        SHOW_INTEL_CYCLES_CSV(msg, sizeof(msg), countSz);
    } else {
        XSNPRINTF(msg, sizeof(msg), "%-16s%s %5.0f %s %s %5.3f %s, %8.3f %s/s",
   1725c:	6819      	ldr	r1, [r3, #0]
   1725e:	68fe      	ldr	r6, [r7, #12]
   17260:	4d32      	ldr	r5, [pc, #200]	; (1732c <bench_stats_sym_finish+0x2f0>)
   17262:	2310      	movs	r3, #16
   17264:	18f8      	adds	r0, r7, r3
   17266:	239c      	movs	r3, #156	; 0x9c
   17268:	18fb      	adds	r3, r7, r3
   1726a:	681b      	ldr	r3, [r3, #0]
   1726c:	930c      	str	r3, [sp, #48]	; 0x30
   1726e:	23a8      	movs	r3, #168	; 0xa8
   17270:	18fb      	adds	r3, r7, r3
   17272:	685c      	ldr	r4, [r3, #4]
   17274:	681b      	ldr	r3, [r3, #0]
   17276:	930a      	str	r3, [sp, #40]	; 0x28
   17278:	940b      	str	r4, [sp, #44]	; 0x2c
   1727a:	9108      	str	r1, [sp, #32]
   1727c:	2390      	movs	r3, #144	; 0x90
   1727e:	18fb      	adds	r3, r7, r3
   17280:	685c      	ldr	r4, [r3, #4]
   17282:	681b      	ldr	r3, [r3, #0]
   17284:	9306      	str	r3, [sp, #24]
   17286:	9407      	str	r4, [sp, #28]
   17288:	9205      	str	r2, [sp, #20]
   1728a:	239c      	movs	r3, #156	; 0x9c
   1728c:	18fb      	adds	r3, r7, r3
   1728e:	681b      	ldr	r3, [r3, #0]
   17290:	9304      	str	r3, [sp, #16]
   17292:	23a0      	movs	r3, #160	; 0xa0
   17294:	18fb      	adds	r3, r7, r3
   17296:	685c      	ldr	r4, [r3, #4]
   17298:	681b      	ldr	r3, [r3, #0]
   1729a:	9302      	str	r3, [sp, #8]
   1729c:	9403      	str	r4, [sp, #12]
   1729e:	4b24      	ldr	r3, [pc, #144]	; (17330 <bench_stats_sym_finish+0x2f4>)
   172a0:	9300      	str	r3, [sp, #0]
   172a2:	0033      	movs	r3, r6
   172a4:	002a      	movs	r2, r5
   172a6:	2180      	movs	r1, #128	; 0x80
   172a8:	f00f f850 	bl	2634c <sniprintf>
        desc, BENCH_ASYNC_GET_NAME(doAsync), blocks, blockType, word[0], total, word[1],
        persec, blockType);
        SHOW_INTEL_CYCLES(msg, sizeof(msg), countSz);
   172ac:	2310      	movs	r3, #16
   172ae:	18fb      	adds	r3, r7, r3
   172b0:	0018      	movs	r0, r3
   172b2:	f00f f87d 	bl	263b0 <strlen>
   172b6:	0002      	movs	r2, r0
   172b8:	2310      	movs	r3, #16
   172ba:	18fb      	adds	r3, r7, r3
   172bc:	210a      	movs	r1, #10
   172be:	5499      	strb	r1, [r3, r2]
    }
    printf("%s", msg);
   172c0:	2310      	movs	r3, #16
   172c2:	18fa      	adds	r2, r7, r3
   172c4:	4b1b      	ldr	r3, [pc, #108]	; (17334 <bench_stats_sym_finish+0x2f8>)
   172c6:	0011      	movs	r1, r2
   172c8:	0018      	movs	r0, r3
   172ca:	f00e ff59 	bl	26180 <iprintf>

    /* show errors */
    if (ret < 0) {
   172ce:	23d0      	movs	r3, #208	; 0xd0
   172d0:	18fb      	adds	r3, r7, r3
   172d2:	681b      	ldr	r3, [r3, #0]
   172d4:	2b00      	cmp	r3, #0
   172d6:	da07      	bge.n	172e8 <bench_stats_sym_finish+0x2ac>
        printf("Benchmark %s failed: %d\n", desc, ret);
   172d8:	23d0      	movs	r3, #208	; 0xd0
   172da:	18fb      	adds	r3, r7, r3
   172dc:	681a      	ldr	r2, [r3, #0]
   172de:	68f9      	ldr	r1, [r7, #12]
   172e0:	4b15      	ldr	r3, [pc, #84]	; (17338 <bench_stats_sym_finish+0x2fc>)
   172e2:	0018      	movs	r0, r3
   172e4:	f00e ff4c 	bl	26180 <iprintf>
    bench_stats_add(BENCH_STAT_SYM, NULL, 0, desc, doAsync, persec, ret);
#endif

    (void)doAsync;
    (void)ret;
}
   172e8:	46c0      	nop			; (mov r8, r8)
   172ea:	46bd      	mov	sp, r7
   172ec:	b02d      	add	sp, #180	; 0xb4
   172ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   172f0:	2000038c 	.word	0x2000038c
   172f4:	20000018 	.word	0x20000018
   172f8:	200000b8 	.word	0x200000b8
   172fc:	41300000 	.word	0x41300000
   17300:	0002dbcc 	.word	0x0002dbcc
   17304:	40900000 	.word	0x40900000
   17308:	0002dbd0 	.word	0x0002dbd0
   1730c:	0002dbd4 	.word	0x0002dbd4
   17310:	412e8480 	.word	0x412e8480
   17314:	0002dbdc 	.word	0x0002dbdc
   17318:	408f4000 	.word	0x408f4000
   1731c:	0002dbe0 	.word	0x0002dbe0
   17320:	3ff00000 	.word	0x3ff00000
   17324:	20000398 	.word	0x20000398
   17328:	0002dbe4 	.word	0x0002dbe4
   1732c:	0002dbf0 	.word	0x0002dbf0
   17330:	0002dc1c 	.word	0x0002dc1c
   17334:	0002dc20 	.word	0x0002dc20
   17338:	0002dc24 	.word	0x0002dc24

0001733c <bench_stats_asym_finish>:

#ifdef BENCH_ASYM
static void bench_stats_asym_finish(const char* algo, int strength,
    const char* desc, int doAsync, int count, double start, int ret)
{
   1733c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1733e:	4647      	mov	r7, r8
   17340:	b480      	push	{r7}
   17342:	b09c      	sub	sp, #112	; 0x70
   17344:	af0e      	add	r7, sp, #56	; 0x38
   17346:	60f8      	str	r0, [r7, #12]
   17348:	60b9      	str	r1, [r7, #8]
   1734a:	607a      	str	r2, [r7, #4]
   1734c:	603b      	str	r3, [r7, #0]
    double total, each = 0, opsSec, milliEach;
   1734e:	2300      	movs	r3, #0
   17350:	2400      	movs	r4, #0
   17352:	633b      	str	r3, [r7, #48]	; 0x30
   17354:	637c      	str	r4, [r7, #52]	; 0x34
    const char **word = bench_result_words2[lng_index];
   17356:	4b4e      	ldr	r3, [pc, #312]	; (17490 <bench_stats_asym_finish+0x154>)
   17358:	681a      	ldr	r2, [r3, #0]
   1735a:	0013      	movs	r3, r2
   1735c:	009b      	lsls	r3, r3, #2
   1735e:	189b      	adds	r3, r3, r2
   17360:	009b      	lsls	r3, r3, #2
   17362:	4a4c      	ldr	r2, [pc, #304]	; (17494 <bench_stats_asym_finish+0x158>)
   17364:	189b      	adds	r3, r3, r2
   17366:	62fb      	str	r3, [r7, #44]	; 0x2c

    total = current_time(0) - start;
   17368:	2000      	movs	r0, #0
   1736a:	f7e9 fc81 	bl	c70 <current_time>
   1736e:	6dba      	ldr	r2, [r7, #88]	; 0x58
   17370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   17372:	f00d fd1d 	bl	24db0 <__aeabi_dsub>
   17376:	0003      	movs	r3, r0
   17378:	000c      	movs	r4, r1
   1737a:	623b      	str	r3, [r7, #32]
   1737c:	627c      	str	r4, [r7, #36]	; 0x24
    if (count > 0)
   1737e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17380:	2b00      	cmp	r3, #0
   17382:	dd0e      	ble.n	173a2 <bench_stats_asym_finish+0x66>
        each  = total / count; /* per second  */
   17384:	6d38      	ldr	r0, [r7, #80]	; 0x50
   17386:	f00e f89d 	bl	254c4 <__aeabi_i2d>
   1738a:	0003      	movs	r3, r0
   1738c:	000c      	movs	r4, r1
   1738e:	001a      	movs	r2, r3
   17390:	0023      	movs	r3, r4
   17392:	6a38      	ldr	r0, [r7, #32]
   17394:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17396:	f00c fe6d 	bl	24074 <__aeabi_ddiv>
   1739a:	0003      	movs	r3, r0
   1739c:	000c      	movs	r4, r1
   1739e:	633b      	str	r3, [r7, #48]	; 0x30
   173a0:	637c      	str	r4, [r7, #52]	; 0x34
    opsSec = count / total;    /* ops second */
   173a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
   173a4:	f00e f88e 	bl	254c4 <__aeabi_i2d>
   173a8:	6a3a      	ldr	r2, [r7, #32]
   173aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   173ac:	f00c fe62 	bl	24074 <__aeabi_ddiv>
   173b0:	0003      	movs	r3, r0
   173b2:	000c      	movs	r4, r1
   173b4:	61bb      	str	r3, [r7, #24]
   173b6:	61fc      	str	r4, [r7, #28]
    milliEach = each * 1000;   /* milliseconds */
   173b8:	2200      	movs	r2, #0
   173ba:	4b37      	ldr	r3, [pc, #220]	; (17498 <bench_stats_asym_finish+0x15c>)
   173bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
   173be:	6b79      	ldr	r1, [r7, #52]	; 0x34
   173c0:	f00d fa7c 	bl	248bc <__aeabi_dmul>
   173c4:	0003      	movs	r3, r0
   173c6:	000c      	movs	r4, r1
   173c8:	613b      	str	r3, [r7, #16]
   173ca:	617c      	str	r4, [r7, #20]

    /* format and print to terminal */
    if (csv_format == 1) {
   173cc:	4b33      	ldr	r3, [pc, #204]	; (1749c <bench_stats_asym_finish+0x160>)
   173ce:	681b      	ldr	r3, [r3, #0]
   173d0:	2b01      	cmp	r3, #1
   173d2:	d120      	bne.n	17416 <bench_stats_asym_finish+0xda>
        /* only print out header once */
        if (csv_header_count == 1) {
   173d4:	4b32      	ldr	r3, [pc, #200]	; (174a0 <bench_stats_asym_finish+0x164>)
   173d6:	681b      	ldr	r3, [r3, #0]
   173d8:	2b01      	cmp	r3, #1
   173da:	d10c      	bne.n	173f6 <bench_stats_asym_finish+0xba>
            printf("\nAsymmetric Ciphers:\n\n");
   173dc:	4b31      	ldr	r3, [pc, #196]	; (174a4 <bench_stats_asym_finish+0x168>)
   173de:	0018      	movs	r0, r3
   173e0:	f00e fece 	bl	26180 <iprintf>
            printf("Algorithm,avg ms,ops/sec,\n");
   173e4:	4b30      	ldr	r3, [pc, #192]	; (174a8 <bench_stats_asym_finish+0x16c>)
   173e6:	0018      	movs	r0, r3
   173e8:	f00e feca 	bl	26180 <iprintf>
            csv_header_count++;
   173ec:	4b2c      	ldr	r3, [pc, #176]	; (174a0 <bench_stats_asym_finish+0x164>)
   173ee:	681b      	ldr	r3, [r3, #0]
   173f0:	1c5a      	adds	r2, r3, #1
   173f2:	4b2b      	ldr	r3, [pc, #172]	; (174a0 <bench_stats_asym_finish+0x164>)
   173f4:	601a      	str	r2, [r3, #0]
        }
        printf("%s %d %s,%.3f,%.3f,\n", algo, strength, desc, milliEach, opsSec);
   173f6:	687d      	ldr	r5, [r7, #4]
   173f8:	68ba      	ldr	r2, [r7, #8]
   173fa:	68f9      	ldr	r1, [r7, #12]
   173fc:	482b      	ldr	r0, [pc, #172]	; (174ac <bench_stats_asym_finish+0x170>)
   173fe:	69bb      	ldr	r3, [r7, #24]
   17400:	69fc      	ldr	r4, [r7, #28]
   17402:	9302      	str	r3, [sp, #8]
   17404:	9403      	str	r4, [sp, #12]
   17406:	693b      	ldr	r3, [r7, #16]
   17408:	697c      	ldr	r4, [r7, #20]
   1740a:	9300      	str	r3, [sp, #0]
   1740c:	9401      	str	r4, [sp, #4]
   1740e:	002b      	movs	r3, r5
   17410:	f00e feb6 	bl	26180 <iprintf>
   17414:	e02a      	b.n	1746c <bench_stats_asym_finish+0x130>
    } else {
        printf("%-6s %5d %-9s %s %6d %s %5.3f %s, %s %5.3f ms,"
   17416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17418:	681a      	ldr	r2, [r3, #0]
        " %.3f %s\n", algo, strength, desc, BENCH_ASYNC_GET_NAME(doAsync),
        count, word[0], total, word[1], word[2], milliEach, opsSec, word[3]);
   1741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1741c:	3304      	adds	r3, #4
            printf("Algorithm,avg ms,ops/sec,\n");
            csv_header_count++;
        }
        printf("%s %d %s,%.3f,%.3f,\n", algo, strength, desc, milliEach, opsSec);
    } else {
        printf("%-6s %5d %-9s %s %6d %s %5.3f %s, %s %5.3f ms,"
   1741e:	6819      	ldr	r1, [r3, #0]
        " %.3f %s\n", algo, strength, desc, BENCH_ASYNC_GET_NAME(doAsync),
        count, word[0], total, word[1], word[2], milliEach, opsSec, word[3]);
   17420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17422:	3308      	adds	r3, #8
            printf("Algorithm,avg ms,ops/sec,\n");
            csv_header_count++;
        }
        printf("%s %d %s,%.3f,%.3f,\n", algo, strength, desc, milliEach, opsSec);
    } else {
        printf("%-6s %5d %-9s %s %6d %s %5.3f %s, %s %5.3f ms,"
   17424:	6818      	ldr	r0, [r3, #0]
        " %.3f %s\n", algo, strength, desc, BENCH_ASYNC_GET_NAME(doAsync),
        count, word[0], total, word[1], word[2], milliEach, opsSec, word[3]);
   17426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17428:	330c      	adds	r3, #12
            printf("Algorithm,avg ms,ops/sec,\n");
            csv_header_count++;
        }
        printf("%s %d %s,%.3f,%.3f,\n", algo, strength, desc, milliEach, opsSec);
    } else {
        printf("%-6s %5d %-9s %s %6d %s %5.3f %s, %s %5.3f ms,"
   1742a:	681b      	ldr	r3, [r3, #0]
   1742c:	687c      	ldr	r4, [r7, #4]
   1742e:	46a0      	mov	r8, r4
   17430:	68bc      	ldr	r4, [r7, #8]
   17432:	46a4      	mov	ip, r4
   17434:	68fe      	ldr	r6, [r7, #12]
   17436:	4d1e      	ldr	r5, [pc, #120]	; (174b0 <bench_stats_asym_finish+0x174>)
   17438:	930c      	str	r3, [sp, #48]	; 0x30
   1743a:	69bb      	ldr	r3, [r7, #24]
   1743c:	69fc      	ldr	r4, [r7, #28]
   1743e:	930a      	str	r3, [sp, #40]	; 0x28
   17440:	940b      	str	r4, [sp, #44]	; 0x2c
   17442:	693b      	ldr	r3, [r7, #16]
   17444:	697c      	ldr	r4, [r7, #20]
   17446:	9308      	str	r3, [sp, #32]
   17448:	9409      	str	r4, [sp, #36]	; 0x24
   1744a:	9007      	str	r0, [sp, #28]
   1744c:	9106      	str	r1, [sp, #24]
   1744e:	6a3b      	ldr	r3, [r7, #32]
   17450:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   17452:	9304      	str	r3, [sp, #16]
   17454:	9405      	str	r4, [sp, #20]
   17456:	9202      	str	r2, [sp, #8]
   17458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1745a:	9301      	str	r3, [sp, #4]
   1745c:	4b15      	ldr	r3, [pc, #84]	; (174b4 <bench_stats_asym_finish+0x178>)
   1745e:	9300      	str	r3, [sp, #0]
   17460:	4643      	mov	r3, r8
   17462:	4662      	mov	r2, ip
   17464:	0031      	movs	r1, r6
   17466:	0028      	movs	r0, r5
   17468:	f00e fe8a 	bl	26180 <iprintf>
        " %.3f %s\n", algo, strength, desc, BENCH_ASYNC_GET_NAME(doAsync),
        count, word[0], total, word[1], word[2], milliEach, opsSec, word[3]);
    }

    /* show errors */
    if (ret < 0) {
   1746c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1746e:	2b00      	cmp	r3, #0
   17470:	da08      	bge.n	17484 <bench_stats_asym_finish+0x148>
        printf("Benchmark %s %s %d failed: %d\n", algo, desc, strength, ret);
   17472:	68bc      	ldr	r4, [r7, #8]
   17474:	687a      	ldr	r2, [r7, #4]
   17476:	68f9      	ldr	r1, [r7, #12]
   17478:	480f      	ldr	r0, [pc, #60]	; (174b8 <bench_stats_asym_finish+0x17c>)
   1747a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1747c:	9300      	str	r3, [sp, #0]
   1747e:	0023      	movs	r3, r4
   17480:	f00e fe7e 	bl	26180 <iprintf>
    bench_stats_add(BENCH_STAT_ASYM, algo, strength, desc, doAsync, opsSec, ret);
#endif

    (void)doAsync;
    (void)ret;
}
   17484:	46c0      	nop			; (mov r8, r8)
   17486:	46bd      	mov	sp, r7
   17488:	b00e      	add	sp, #56	; 0x38
   1748a:	bc04      	pop	{r2}
   1748c:	4690      	mov	r8, r2
   1748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17490:	2000038c 	.word	0x2000038c
   17494:	20000080 	.word	0x20000080
   17498:	408f4000 	.word	0x408f4000
   1749c:	20000398 	.word	0x20000398
   174a0:	2000039c 	.word	0x2000039c
   174a4:	0002dc40 	.word	0x0002dc40
   174a8:	0002dc58 	.word	0x0002dc58
   174ac:	0002dc74 	.word	0x0002dc74
   174b0:	0002dc8c 	.word	0x0002dc8c
   174b4:	0002dc1c 	.word	0x0002dc1c
   174b8:	0002dcc4 	.word	0x0002dcc4

000174bc <bench_stats_free>:
#endif /* BENCH_ASYM */

static WC_INLINE void bench_stats_free(void)
{
   174bc:	b580      	push	{r7, lr}
   174be:	af00      	add	r7, sp, #0
        bstat = next;
    }
    bench_stats_head = NULL;
    bench_stats_tail = NULL;
#endif
}
   174c0:	46c0      	nop			; (mov r8, r8)
   174c2:	46bd      	mov	sp, r7
   174c4:	bd80      	pop	{r7, pc}
   174c6:	46c0      	nop			; (mov r8, r8)

000174c8 <benchmarks_do>:
/* End Stats Functions */
/******************************************************************************/


static void* benchmarks_do(void* args)
{
   174c8:	b580      	push	{r7, lr}
   174ca:	b088      	sub	sp, #32
   174cc:	af00      	add	r7, sp, #0
   174ce:	6078      	str	r0, [r7, #4]
#if defined(HAVE_LOCAL_RNG)
    {
        int rngRet;

#ifndef HAVE_FIPS
        rngRet = wc_InitRng_ex(&rng, HEAP_HINT, devId);
   174d0:	4b80      	ldr	r3, [pc, #512]	; (176d4 <benchmarks_do+0x20c>)
   174d2:	681a      	ldr	r2, [r3, #0]
   174d4:	4b80      	ldr	r3, [pc, #512]	; (176d8 <benchmarks_do+0x210>)
   174d6:	2100      	movs	r1, #0
   174d8:	0018      	movs	r0, r3
   174da:	f7ed ff99 	bl	5410 <wc_InitRng_ex>
   174de:	0003      	movs	r3, r0
   174e0:	61bb      	str	r3, [r7, #24]
#else
        rngRet = wc_InitRng(&rng);
#endif
        if (rngRet < 0) {
   174e2:	69bb      	ldr	r3, [r7, #24]
   174e4:	2b00      	cmp	r3, #0
   174e6:	da05      	bge.n	174f4 <benchmarks_do+0x2c>
            printf("InitRNG failed\n");
   174e8:	4b7c      	ldr	r3, [pc, #496]	; (176dc <benchmarks_do+0x214>)
   174ea:	0018      	movs	r0, r3
   174ec:	f00e fe48 	bl	26180 <iprintf>
            return NULL;
   174f0:	2300      	movs	r3, #0
   174f2:	e0ea      	b.n	176ca <benchmarks_do+0x202>
    }
#endif

    /* setup bench plain, cipher, key and iv globals */
    /* make sure bench buffer is multiple of 16 (AES block size) */
    bench_buf_size = (int)bench_size + BENCH_CIPHER_ADD;
   174f4:	4b7a      	ldr	r3, [pc, #488]	; (176e0 <benchmarks_do+0x218>)
   174f6:	681b      	ldr	r3, [r3, #0]
   174f8:	3310      	adds	r3, #16
   174fa:	61fb      	str	r3, [r7, #28]
    if (bench_buf_size % 16)
   174fc:	69fb      	ldr	r3, [r7, #28]
   174fe:	220f      	movs	r2, #15
   17500:	4013      	ands	r3, r2
   17502:	d00e      	beq.n	17522 <benchmarks_do+0x5a>
        bench_buf_size += 16 - (bench_buf_size % 16);
   17504:	69fb      	ldr	r3, [r7, #28]
   17506:	4a77      	ldr	r2, [pc, #476]	; (176e4 <benchmarks_do+0x21c>)
   17508:	4013      	ands	r3, r2
   1750a:	d504      	bpl.n	17516 <benchmarks_do+0x4e>
   1750c:	3b01      	subs	r3, #1
   1750e:	2210      	movs	r2, #16
   17510:	4252      	negs	r2, r2
   17512:	4313      	orrs	r3, r2
   17514:	3301      	adds	r3, #1
   17516:	001a      	movs	r2, r3
   17518:	2310      	movs	r3, #16
   1751a:	1a9b      	subs	r3, r3, r2
   1751c:	69fa      	ldr	r2, [r7, #28]
   1751e:	18d3      	adds	r3, r2, r3
   17520:	61fb      	str	r3, [r7, #28]

#ifdef WOLFSSL_AFALG_XILINX_AES
    bench_plain = (byte*)aligned_alloc(64, (size_t)bench_buf_size + 16);
    bench_cipher = (byte*)aligned_alloc(64, (size_t)bench_buf_size + 16);
#else
    bench_plain = (byte*)XMALLOC((size_t)bench_buf_size + 16, HEAP_HINT, DYNAMIC_TYPE_WOLF_BIGINT);
   17522:	69fb      	ldr	r3, [r7, #28]
   17524:	3310      	adds	r3, #16
   17526:	0018      	movs	r0, r3
   17528:	f00e f8ac 	bl	25684 <malloc>
   1752c:	0003      	movs	r3, r0
   1752e:	001a      	movs	r2, r3
   17530:	4b6d      	ldr	r3, [pc, #436]	; (176e8 <benchmarks_do+0x220>)
   17532:	601a      	str	r2, [r3, #0]
    bench_cipher = (byte*)XMALLOC((size_t)bench_buf_size + 16, HEAP_HINT, DYNAMIC_TYPE_WOLF_BIGINT);
   17534:	69fb      	ldr	r3, [r7, #28]
   17536:	3310      	adds	r3, #16
   17538:	0018      	movs	r0, r3
   1753a:	f00e f8a3 	bl	25684 <malloc>
   1753e:	0003      	movs	r3, r0
   17540:	001a      	movs	r2, r3
   17542:	4b6a      	ldr	r3, [pc, #424]	; (176ec <benchmarks_do+0x224>)
   17544:	601a      	str	r2, [r3, #0]
#endif
    if (bench_plain == NULL || bench_cipher == NULL) {
   17546:	4b68      	ldr	r3, [pc, #416]	; (176e8 <benchmarks_do+0x220>)
   17548:	681b      	ldr	r3, [r3, #0]
   1754a:	2b00      	cmp	r3, #0
   1754c:	d003      	beq.n	17556 <benchmarks_do+0x8e>
   1754e:	4b67      	ldr	r3, [pc, #412]	; (176ec <benchmarks_do+0x224>)
   17550:	681b      	ldr	r3, [r3, #0]
   17552:	2b00      	cmp	r3, #0
   17554:	d11f      	bne.n	17596 <benchmarks_do+0xce>
        XFREE(bench_plain, HEAP_HINT, DYNAMIC_TYPE_WOLF_BIGINT);
   17556:	4b64      	ldr	r3, [pc, #400]	; (176e8 <benchmarks_do+0x220>)
   17558:	681b      	ldr	r3, [r3, #0]
   1755a:	617b      	str	r3, [r7, #20]
   1755c:	697b      	ldr	r3, [r7, #20]
   1755e:	2b00      	cmp	r3, #0
   17560:	d003      	beq.n	1756a <benchmarks_do+0xa2>
   17562:	697b      	ldr	r3, [r7, #20]
   17564:	0018      	movs	r0, r3
   17566:	f00e f897 	bl	25698 <free>
        XFREE(bench_cipher, HEAP_HINT, DYNAMIC_TYPE_WOLF_BIGINT);
   1756a:	4b60      	ldr	r3, [pc, #384]	; (176ec <benchmarks_do+0x224>)
   1756c:	681b      	ldr	r3, [r3, #0]
   1756e:	613b      	str	r3, [r7, #16]
   17570:	693b      	ldr	r3, [r7, #16]
   17572:	2b00      	cmp	r3, #0
   17574:	d003      	beq.n	1757e <benchmarks_do+0xb6>
   17576:	693b      	ldr	r3, [r7, #16]
   17578:	0018      	movs	r0, r3
   1757a:	f00e f88d 	bl	25698 <free>
        bench_plain = bench_cipher = NULL;
   1757e:	4b5b      	ldr	r3, [pc, #364]	; (176ec <benchmarks_do+0x224>)
   17580:	2200      	movs	r2, #0
   17582:	601a      	str	r2, [r3, #0]
   17584:	4b59      	ldr	r3, [pc, #356]	; (176ec <benchmarks_do+0x224>)
   17586:	681a      	ldr	r2, [r3, #0]
   17588:	4b57      	ldr	r3, [pc, #348]	; (176e8 <benchmarks_do+0x220>)
   1758a:	601a      	str	r2, [r3, #0]

        printf("Benchmark block buffer alloc failed!\n");
   1758c:	4b58      	ldr	r3, [pc, #352]	; (176f0 <benchmarks_do+0x228>)
   1758e:	0018      	movs	r0, r3
   17590:	f00e fdf6 	bl	26180 <iprintf>
        goto exit;
   17594:	e080      	b.n	17698 <benchmarks_do+0x1d0>
    }
    XMEMSET(bench_plain, 0, (size_t)bench_buf_size);
   17596:	4b54      	ldr	r3, [pc, #336]	; (176e8 <benchmarks_do+0x220>)
   17598:	681b      	ldr	r3, [r3, #0]
   1759a:	69fa      	ldr	r2, [r7, #28]
   1759c:	2100      	movs	r1, #0
   1759e:	0018      	movs	r0, r3
   175a0:	f00e f8c3 	bl	2572a <memset>
    XMEMSET(bench_cipher, 0, (size_t)bench_buf_size);
   175a4:	4b51      	ldr	r3, [pc, #324]	; (176ec <benchmarks_do+0x224>)
   175a6:	681b      	ldr	r3, [r3, #0]
   175a8:	69fa      	ldr	r2, [r7, #28]
   175aa:	2100      	movs	r1, #0
   175ac:	0018      	movs	r0, r3
   175ae:	f00e f8bc 	bl	2572a <memset>
        goto exit;
    }
    XMEMCPY(bench_key, bench_key_buf, sizeof(bench_key_buf));
    XMEMCPY(bench_iv, bench_iv_buf, sizeof(bench_iv_buf));
#else
    bench_key = (byte*)bench_key_buf;
   175b2:	4b50      	ldr	r3, [pc, #320]	; (176f4 <benchmarks_do+0x22c>)
   175b4:	4a50      	ldr	r2, [pc, #320]	; (176f8 <benchmarks_do+0x230>)
   175b6:	601a      	str	r2, [r3, #0]
    bench_iv = (byte*)bench_iv_buf;
   175b8:	4b50      	ldr	r3, [pc, #320]	; (176fc <benchmarks_do+0x234>)
   175ba:	4a51      	ldr	r2, [pc, #324]	; (17700 <benchmarks_do+0x238>)
   175bc:	601a      	str	r2, [r3, #0]
#endif

#ifndef WC_NO_RNG
    if (bench_all || (bench_other_algs & BENCH_RNG))
   175be:	4b51      	ldr	r3, [pc, #324]	; (17704 <benchmarks_do+0x23c>)
   175c0:	681b      	ldr	r3, [r3, #0]
   175c2:	2b00      	cmp	r3, #0
   175c4:	d104      	bne.n	175d0 <benchmarks_do+0x108>
   175c6:	4b50      	ldr	r3, [pc, #320]	; (17708 <benchmarks_do+0x240>)
   175c8:	681b      	ldr	r3, [r3, #0]
   175ca:	2201      	movs	r2, #1
   175cc:	4013      	ands	r3, r2
   175ce:	d001      	beq.n	175d4 <benchmarks_do+0x10c>
        bench_rng();
   175d0:	f000 f942 	bl	17858 <bench_rng>
#endif /* WC_NO_RNG */
#ifndef NO_AES
#ifdef HAVE_AES_CBC
    if (bench_all || (bench_cipher_algs & BENCH_AES_CBC)) {
   175d4:	4b4b      	ldr	r3, [pc, #300]	; (17704 <benchmarks_do+0x23c>)
   175d6:	681b      	ldr	r3, [r3, #0]
   175d8:	2b00      	cmp	r3, #0
   175da:	d104      	bne.n	175e6 <benchmarks_do+0x11e>
   175dc:	4b4b      	ldr	r3, [pc, #300]	; (1770c <benchmarks_do+0x244>)
   175de:	681b      	ldr	r3, [r3, #0]
   175e0:	2201      	movs	r2, #1
   175e2:	4013      	ands	r3, r2
   175e4:	d002      	beq.n	175ec <benchmarks_do+0x124>
    #ifndef NO_SW_BENCH
        bench_aescbc(0);
   175e6:	2000      	movs	r0, #0
   175e8:	f000 fbf6 	bl	17dd8 <bench_aescbc>
        bench_aescbc(1);
    #endif
    }
#endif
#ifdef HAVE_AESGCM
    if (bench_all || (bench_cipher_algs & BENCH_AES_GCM)) {
   175ec:	4b45      	ldr	r3, [pc, #276]	; (17704 <benchmarks_do+0x23c>)
   175ee:	681b      	ldr	r3, [r3, #0]
   175f0:	2b00      	cmp	r3, #0
   175f2:	d104      	bne.n	175fe <benchmarks_do+0x136>
   175f4:	4b45      	ldr	r3, [pc, #276]	; (1770c <benchmarks_do+0x244>)
   175f6:	681b      	ldr	r3, [r3, #0]
   175f8:	2202      	movs	r2, #2
   175fa:	4013      	ands	r3, r2
   175fc:	d002      	beq.n	17604 <benchmarks_do+0x13c>
    #ifndef NO_SW_BENCH
        bench_aesgcm(0);
   175fe:	2000      	movs	r0, #0
   17600:	f000 ff0a 	bl	18418 <bench_aesgcm>
#ifdef HAVE_POLY1305
    if (bench_all || (bench_digest_algs & BENCH_POLY1305))
        bench_poly1305();
#endif
#ifndef NO_SHA
    if (bench_all || (bench_digest_algs & BENCH_SHA)) {
   17604:	4b3f      	ldr	r3, [pc, #252]	; (17704 <benchmarks_do+0x23c>)
   17606:	681b      	ldr	r3, [r3, #0]
   17608:	2b00      	cmp	r3, #0
   1760a:	d104      	bne.n	17616 <benchmarks_do+0x14e>
   1760c:	4b40      	ldr	r3, [pc, #256]	; (17710 <benchmarks_do+0x248>)
   1760e:	681b      	ldr	r3, [r3, #0]
   17610:	2204      	movs	r2, #4
   17612:	4013      	ands	r3, r2
   17614:	d002      	beq.n	1761c <benchmarks_do+0x154>
    #ifndef NO_SW_BENCH
        bench_sha(0);
   17616:	2000      	movs	r0, #0
   17618:	f000 ff44 	bl	184a4 <bench_sha>
        bench_sha224(1);
    #endif
    }
#endif
#ifndef NO_SHA256
    if (bench_all || (bench_digest_algs & BENCH_SHA256)) {
   1761c:	4b39      	ldr	r3, [pc, #228]	; (17704 <benchmarks_do+0x23c>)
   1761e:	681b      	ldr	r3, [r3, #0]
   17620:	2b00      	cmp	r3, #0
   17622:	d104      	bne.n	1762e <benchmarks_do+0x166>
   17624:	4b3a      	ldr	r3, [pc, #232]	; (17710 <benchmarks_do+0x248>)
   17626:	681b      	ldr	r3, [r3, #0]
   17628:	2220      	movs	r2, #32
   1762a:	4013      	ands	r3, r2
   1762c:	d002      	beq.n	17634 <benchmarks_do+0x16c>
    #ifndef NO_SW_BENCH
        bench_sha256(0);
   1762e:	2000      	movs	r0, #0
   17630:	f001 f8b8 	bl	187a4 <bench_sha256>
            bench_hmac_md5(1);
        #endif
        }
    #endif
    #ifndef NO_SHA
        if (bench_all || (bench_mac_algs & BENCH_HMAC_SHA)) {
   17634:	4b33      	ldr	r3, [pc, #204]	; (17704 <benchmarks_do+0x23c>)
   17636:	681b      	ldr	r3, [r3, #0]
   17638:	2b00      	cmp	r3, #0
   1763a:	d104      	bne.n	17646 <benchmarks_do+0x17e>
   1763c:	4b35      	ldr	r3, [pc, #212]	; (17714 <benchmarks_do+0x24c>)
   1763e:	681b      	ldr	r3, [r3, #0]
   17640:	2204      	movs	r2, #4
   17642:	4013      	ands	r3, r2
   17644:	d002      	beq.n	1764c <benchmarks_do+0x184>
        #ifndef NO_SW_BENCH
            bench_hmac_sha(0);
   17646:	2000      	movs	r0, #0
   17648:	f001 fb80 	bl	18d4c <bench_hmac_sha>
            bench_hmac_sha224(1);
        #endif
        }
    #endif
    #ifndef NO_SHA256
        if (bench_all || (bench_mac_algs & BENCH_HMAC_SHA256)) {
   1764c:	4b2d      	ldr	r3, [pc, #180]	; (17704 <benchmarks_do+0x23c>)
   1764e:	681b      	ldr	r3, [r3, #0]
   17650:	2b00      	cmp	r3, #0
   17652:	d104      	bne.n	1765e <benchmarks_do+0x196>
   17654:	4b2f      	ldr	r3, [pc, #188]	; (17714 <benchmarks_do+0x24c>)
   17656:	681b      	ldr	r3, [r3, #0]
   17658:	2220      	movs	r2, #32
   1765a:	4013      	ands	r3, r2
   1765c:	d002      	beq.n	17664 <benchmarks_do+0x19c>
        #ifndef NO_SW_BENCH
            bench_hmac_sha256(0);
   1765e:	2000      	movs	r0, #0
   17660:	f001 fb96 	bl	18d90 <bench_hmac_sha256>
    if (bench_all || (bench_asym_algs & BENCH_NTRU_KEYGEN))
        bench_ntruKeyGen();
#endif

#ifdef HAVE_ECC
    if (bench_all || (bench_asym_algs & BENCH_ECC_MAKEKEY)) {
   17664:	4b27      	ldr	r3, [pc, #156]	; (17704 <benchmarks_do+0x23c>)
   17666:	681b      	ldr	r3, [r3, #0]
   17668:	2b00      	cmp	r3, #0
   1766a:	d105      	bne.n	17678 <benchmarks_do+0x1b0>
   1766c:	4b2a      	ldr	r3, [pc, #168]	; (17718 <benchmarks_do+0x250>)
   1766e:	681a      	ldr	r2, [r3, #0]
   17670:	2380      	movs	r3, #128	; 0x80
   17672:	015b      	lsls	r3, r3, #5
   17674:	4013      	ands	r3, r2
   17676:	d002      	beq.n	1767e <benchmarks_do+0x1b6>
    #ifndef NO_SW_BENCH
        bench_eccMakeKey(0);
   17678:	2000      	movs	r0, #0
   1767a:	f001 fbab 	bl	18dd4 <bench_eccMakeKey>
    #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_ECC) && \
        !defined(NO_HW_BENCH)
        bench_eccMakeKey(1);
    #endif
    }
    if (bench_all || (bench_asym_algs & BENCH_ECC)) {
   1767e:	4b21      	ldr	r3, [pc, #132]	; (17704 <benchmarks_do+0x23c>)
   17680:	681b      	ldr	r3, [r3, #0]
   17682:	2b00      	cmp	r3, #0
   17684:	d105      	bne.n	17692 <benchmarks_do+0x1ca>
   17686:	4b24      	ldr	r3, [pc, #144]	; (17718 <benchmarks_do+0x250>)
   17688:	681a      	ldr	r2, [r3, #0]
   1768a:	2380      	movs	r3, #128	; 0x80
   1768c:	019b      	lsls	r3, r3, #6
   1768e:	4013      	ands	r3, r2
   17690:	d002      	beq.n	17698 <benchmarks_do+0x1d0>
    #ifndef NO_SW_BENCH
        bench_ecc(0);
   17692:	2000      	movs	r0, #0
   17694:	f001 fcd0 	bl	19038 <bench_ecc>
        bench_ed25519KeySign();
#endif

exit:
    /* free benchmark buffers */
    XFREE(bench_plain, HEAP_HINT, DYNAMIC_TYPE_WOLF_BIGINT);
   17698:	4b13      	ldr	r3, [pc, #76]	; (176e8 <benchmarks_do+0x220>)
   1769a:	681b      	ldr	r3, [r3, #0]
   1769c:	60fb      	str	r3, [r7, #12]
   1769e:	68fb      	ldr	r3, [r7, #12]
   176a0:	2b00      	cmp	r3, #0
   176a2:	d003      	beq.n	176ac <benchmarks_do+0x1e4>
   176a4:	68fb      	ldr	r3, [r7, #12]
   176a6:	0018      	movs	r0, r3
   176a8:	f00d fff6 	bl	25698 <free>
    XFREE(bench_cipher, HEAP_HINT, DYNAMIC_TYPE_WOLF_BIGINT);
   176ac:	4b0f      	ldr	r3, [pc, #60]	; (176ec <benchmarks_do+0x224>)
   176ae:	681b      	ldr	r3, [r3, #0]
   176b0:	60bb      	str	r3, [r7, #8]
   176b2:	68bb      	ldr	r3, [r7, #8]
   176b4:	2b00      	cmp	r3, #0
   176b6:	d003      	beq.n	176c0 <benchmarks_do+0x1f8>
   176b8:	68bb      	ldr	r3, [r7, #8]
   176ba:	0018      	movs	r0, r3
   176bc:	f00d ffec 	bl	25698 <free>
    /* free event queue */
    wolfEventQueue_Free(&eventQueue);
#endif

#if defined(HAVE_LOCAL_RNG)
    wc_FreeRng(&rng);
   176c0:	4b05      	ldr	r3, [pc, #20]	; (176d8 <benchmarks_do+0x210>)
   176c2:	0018      	movs	r0, r3
   176c4:	f7ed feea 	bl	549c <wc_FreeRng>
    (void)bench_digest_algs;
    (void)bench_mac_algs;
    (void)bench_asym_algs;
    (void)bench_other_algs;

    return NULL;
   176c8:	2300      	movs	r3, #0
}
   176ca:	0018      	movs	r0, r3
   176cc:	46bd      	mov	sp, r7
   176ce:	b008      	add	sp, #32
   176d0:	bd80      	pop	{r7, pc}
   176d2:	46c0      	nop			; (mov r8, r8)
   176d4:	200000a8 	.word	0x200000a8
   176d8:	20000390 	.word	0x20000390
   176dc:	0002dce4 	.word	0x0002dce4
   176e0:	200000b4 	.word	0x200000b4
   176e4:	8000000f 	.word	0x8000000f
   176e8:	200003a0 	.word	0x200003a0
   176ec:	200003a4 	.word	0x200003a4
   176f0:	0002dcf4 	.word	0x0002dcf4
   176f4:	200003a8 	.word	0x200003a8
   176f8:	0002e0dc 	.word	0x0002e0dc
   176fc:	200003ac 	.word	0x200003ac
   17700:	0002e0fc 	.word	0x0002e0fc
   17704:	20000014 	.word	0x20000014
   17708:	20000388 	.word	0x20000388
   1770c:	20000378 	.word	0x20000378
   17710:	2000037c 	.word	0x2000037c
   17714:	20000380 	.word	0x20000380
   17718:	20000384 	.word	0x20000384

0001771c <benchmark_init>:

int benchmark_init(void)
{
   1771c:	b590      	push	{r4, r7, lr}
   1771e:	b083      	sub	sp, #12
   17720:	af00      	add	r7, sp, #0
    int ret = 0;
   17722:	2300      	movs	r3, #0
   17724:	607b      	str	r3, [r7, #4]
    if (ret != 0) {
        printf("unable to load static memory %d\n", ret);
    }
#endif /* WOLFSSL_STATIC_MEMORY */

    if ((ret = wolfCrypt_Init()) != 0) {
   17726:	f7ed ff8b 	bl	5640 <wolfCrypt_Init>
   1772a:	0003      	movs	r3, r0
   1772c:	607b      	str	r3, [r7, #4]
   1772e:	687b      	ldr	r3, [r7, #4]
   17730:	2b00      	cmp	r3, #0
   17732:	d007      	beq.n	17744 <benchmark_init+0x28>
        printf("wolfCrypt_Init failed %d\n", ret);
   17734:	687a      	ldr	r2, [r7, #4]
   17736:	4b19      	ldr	r3, [pc, #100]	; (1779c <benchmark_init+0x80>)
   17738:	0011      	movs	r1, r2
   1773a:	0018      	movs	r0, r3
   1773c:	f00e fd20 	bl	26180 <iprintf>
        return EXIT_FAILURE;
   17740:	2301      	movs	r3, #1
   17742:	e027      	b.n	17794 <benchmark_init+0x78>
    }

    bench_stats_init();
   17744:	f7ff fc3e 	bl	16fc4 <bench_stats_init>

#if defined(DEBUG_WOLFSSL) && !defined(HAVE_VALGRIND)
    wolfSSL_Debugging_ON();
#endif

    if (csv_format == 1) {
   17748:	4b15      	ldr	r3, [pc, #84]	; (177a0 <benchmark_init+0x84>)
   1774a:	681b      	ldr	r3, [r3, #0]
   1774c:	2b01      	cmp	r3, #1
   1774e:	d116      	bne.n	1777e <benchmark_init+0x62>
        printf("wolfCrypt Benchmark (block bytes %d, min %.1f sec each)\n",
   17750:	4b14      	ldr	r3, [pc, #80]	; (177a4 <benchmark_init+0x88>)
   17752:	681b      	ldr	r3, [r3, #0]
   17754:	0019      	movs	r1, r3
   17756:	2300      	movs	r3, #0
   17758:	4c13      	ldr	r4, [pc, #76]	; (177a8 <benchmark_init+0x8c>)
   1775a:	4814      	ldr	r0, [pc, #80]	; (177ac <benchmark_init+0x90>)
   1775c:	001a      	movs	r2, r3
   1775e:	0023      	movs	r3, r4
   17760:	f00e fd0e 	bl	26180 <iprintf>
        (int)BENCH_SIZE, BENCH_MIN_RUNTIME_SEC);
        printf("This format allows you to easily copy the output to a csv file.");
   17764:	4b12      	ldr	r3, [pc, #72]	; (177b0 <benchmark_init+0x94>)
   17766:	0018      	movs	r0, r3
   17768:	f00e fd0a 	bl	26180 <iprintf>
        printf("\n\nSymmetric Ciphers:\n\n");
   1776c:	4b11      	ldr	r3, [pc, #68]	; (177b4 <benchmark_init+0x98>)
   1776e:	0018      	movs	r0, r3
   17770:	f00e fd06 	bl	26180 <iprintf>
        printf("Algorithm,MB/s,Cycles per byte,\n");
   17774:	4b10      	ldr	r3, [pc, #64]	; (177b8 <benchmark_init+0x9c>)
   17776:	0018      	movs	r0, r3
   17778:	f00e fd02 	bl	26180 <iprintf>
   1777c:	e009      	b.n	17792 <benchmark_init+0x76>
    } else {
        printf("wolfCrypt Benchmark (block bytes %d, min %.1f sec each)\n",
   1777e:	4b09      	ldr	r3, [pc, #36]	; (177a4 <benchmark_init+0x88>)
   17780:	681b      	ldr	r3, [r3, #0]
   17782:	0019      	movs	r1, r3
   17784:	2300      	movs	r3, #0
   17786:	4c08      	ldr	r4, [pc, #32]	; (177a8 <benchmark_init+0x8c>)
   17788:	4808      	ldr	r0, [pc, #32]	; (177ac <benchmark_init+0x90>)
   1778a:	001a      	movs	r2, r3
   1778c:	0023      	movs	r3, r4
   1778e:	f00e fcf7 	bl	26180 <iprintf>
    if (ret != 0) {
        printf("Whitewood netRandom config init failed %d\n", ret);
    }
#endif /* HAVE_WNR */

    return ret;
   17792:	687b      	ldr	r3, [r7, #4]
}
   17794:	0018      	movs	r0, r3
   17796:	46bd      	mov	sp, r7
   17798:	b003      	add	sp, #12
   1779a:	bd90      	pop	{r4, r7, pc}
   1779c:	0002dd1c 	.word	0x0002dd1c
   177a0:	20000398 	.word	0x20000398
   177a4:	200000b4 	.word	0x200000b4
   177a8:	3ff00000 	.word	0x3ff00000
   177ac:	0002dd38 	.word	0x0002dd38
   177b0:	0002dd74 	.word	0x0002dd74
   177b4:	0002ddb4 	.word	0x0002ddb4
   177b8:	0002ddcc 	.word	0x0002ddcc

000177bc <benchmark_free>:

int benchmark_free(void)
{
   177bc:	b580      	push	{r7, lr}
   177be:	b082      	sub	sp, #8
   177c0:	af00      	add	r7, sp, #0
    if (ret < 0) {
        printf("Failed to free netRandom context %d\n", ret);
    }
#endif

    bench_stats_free();
   177c2:	f7ff fe7b 	bl	174bc <bench_stats_free>

    if ((ret = wolfCrypt_Cleanup()) != 0) {
   177c6:	f7ed ff57 	bl	5678 <wolfCrypt_Cleanup>
   177ca:	0003      	movs	r3, r0
   177cc:	607b      	str	r3, [r7, #4]
   177ce:	687b      	ldr	r3, [r7, #4]
   177d0:	2b00      	cmp	r3, #0
   177d2:	d005      	beq.n	177e0 <benchmark_free+0x24>
        printf("error %d with wolfCrypt_Cleanup\n", ret);
   177d4:	687a      	ldr	r2, [r7, #4]
   177d6:	4b05      	ldr	r3, [pc, #20]	; (177ec <benchmark_free+0x30>)
   177d8:	0011      	movs	r1, r2
   177da:	0018      	movs	r0, r3
   177dc:	f00e fcd0 	bl	26180 <iprintf>
    }

    return ret;
   177e0:	687b      	ldr	r3, [r7, #4]
}
   177e2:	0018      	movs	r0, r3
   177e4:	46bd      	mov	sp, r7
   177e6:	b002      	add	sp, #8
   177e8:	bd80      	pop	{r7, pc}
   177ea:	46c0      	nop			; (mov r8, r8)
   177ec:	0002ddf0 	.word	0x0002ddf0

000177f0 <benchmark_test>:
#ifdef HAVE_STACK_SIZE
THREAD_RETURN WOLFSSL_THREAD benchmark_test(void* args)
#else
int benchmark_test(void *args)
#endif
{
   177f0:	b580      	push	{r7, lr}
   177f2:	b084      	sub	sp, #16
   177f4:	af00      	add	r7, sp, #0
   177f6:	6078      	str	r0, [r7, #4]
    int ret;

    (void)args;

    printf("------------------------------------------------------------------------------\n");
   177f8:	4b13      	ldr	r3, [pc, #76]	; (17848 <benchmark_test+0x58>)
   177fa:	0018      	movs	r0, r3
   177fc:	f00e fcc0 	bl	26180 <iprintf>
    printf(" wolfSSL version %s\n", LIBWOLFSSL_VERSION_STRING);
   17800:	4a12      	ldr	r2, [pc, #72]	; (1784c <benchmark_test+0x5c>)
   17802:	4b13      	ldr	r3, [pc, #76]	; (17850 <benchmark_test+0x60>)
   17804:	0011      	movs	r1, r2
   17806:	0018      	movs	r0, r3
   17808:	f00e fcba 	bl	26180 <iprintf>
    printf("------------------------------------------------------------------------------\n");
   1780c:	4b0e      	ldr	r3, [pc, #56]	; (17848 <benchmark_test+0x58>)
   1780e:	0018      	movs	r0, r3
   17810:	f00e fcb6 	bl	26180 <iprintf>

    ret = benchmark_init();
   17814:	f7ff ff82 	bl	1771c <benchmark_init>
   17818:	0003      	movs	r3, r0
   1781a:	60fb      	str	r3, [r7, #12]
    if (ret != 0)
   1781c:	68fb      	ldr	r3, [r7, #12]
   1781e:	2b00      	cmp	r3, #0
   17820:	d001      	beq.n	17826 <benchmark_test+0x36>
        EXIT_TEST(ret);
   17822:	68fb      	ldr	r3, [r7, #12]
   17824:	e00b      	b.n	1783e <benchmark_test+0x4e>
    }

    XFREE(g_threadData, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
}
#else
    benchmarks_do(NULL);
   17826:	2000      	movs	r0, #0
   17828:	f7ff fe4e 	bl	174c8 <benchmarks_do>
#endif

    printf("Benchmark complete\n");
   1782c:	4b09      	ldr	r3, [pc, #36]	; (17854 <benchmark_test+0x64>)
   1782e:	0018      	movs	r0, r3
   17830:	f00e fca6 	bl	26180 <iprintf>

    ret = benchmark_free();
   17834:	f7ff ffc2 	bl	177bc <benchmark_free>
   17838:	0003      	movs	r3, r0
   1783a:	60fb      	str	r3, [r7, #12]

    EXIT_TEST(ret);
   1783c:	68fb      	ldr	r3, [r7, #12]
}
   1783e:	0018      	movs	r0, r3
   17840:	46bd      	mov	sp, r7
   17842:	b004      	add	sp, #16
   17844:	bd80      	pop	{r7, pc}
   17846:	46c0      	nop			; (mov r8, r8)
   17848:	0002de14 	.word	0x0002de14
   1784c:	0002de64 	.word	0x0002de64
   17850:	0002de6c 	.word	0x0002de6c
   17854:	0002de84 	.word	0x0002de84

00017858 <bench_rng>:


#ifndef WC_NO_RNG
void bench_rng(void)
{
   17858:	b5b0      	push	{r4, r5, r7, lr}
   1785a:	b08e      	sub	sp, #56	; 0x38
   1785c:	af04      	add	r7, sp, #16
    double start;
    long   pos, len, remain;
    WC_RNG myrng;

#ifndef HAVE_FIPS
    ret = wc_InitRng_ex(&myrng, HEAP_HINT, devId);
   1785e:	4b3a      	ldr	r3, [pc, #232]	; (17948 <bench_rng+0xf0>)
   17860:	681a      	ldr	r2, [r3, #0]
   17862:	003b      	movs	r3, r7
   17864:	2100      	movs	r1, #0
   17866:	0018      	movs	r0, r3
   17868:	f7ed fdd2 	bl	5410 <wc_InitRng_ex>
   1786c:	0003      	movs	r3, r0
   1786e:	627b      	str	r3, [r7, #36]	; 0x24
#else
    ret = wc_InitRng(&myrng);
#endif
    if (ret < 0) {
   17870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17872:	2b00      	cmp	r3, #0
   17874:	da06      	bge.n	17884 <bench_rng+0x2c>
        printf("InitRNG failed %d\n", ret);
   17876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17878:	4b34      	ldr	r3, [pc, #208]	; (1794c <bench_rng+0xf4>)
   1787a:	0011      	movs	r1, r2
   1787c:	0018      	movs	r0, r3
   1787e:	f00e fc7f 	bl	26180 <iprintf>
   17882:	e05d      	b.n	17940 <bench_rng+0xe8>
        return;
    }

    bench_stats_start(&count, &start);
   17884:	2308      	movs	r3, #8
   17886:	18fa      	adds	r2, r7, r3
   17888:	2310      	movs	r3, #16
   1788a:	18fb      	adds	r3, r7, r3
   1788c:	0011      	movs	r1, r2
   1788e:	0018      	movs	r0, r3
   17890:	f7ff fb9e 	bl	16fd0 <bench_stats_start>
    do {
        for (i = 0; i < numBlocks; i++) {
   17894:	2300      	movs	r3, #0
   17896:	623b      	str	r3, [r7, #32]
   17898:	e02b      	b.n	178f2 <bench_rng+0x9a>
            /* Split request to handle large RNG request */
            pos = 0;
   1789a:	2300      	movs	r3, #0
   1789c:	61fb      	str	r3, [r7, #28]
            remain = (int)BENCH_SIZE;
   1789e:	4b2c      	ldr	r3, [pc, #176]	; (17950 <bench_rng+0xf8>)
   178a0:	681b      	ldr	r3, [r3, #0]
   178a2:	617b      	str	r3, [r7, #20]
            while (remain > 0) {
   178a4:	e01f      	b.n	178e6 <bench_rng+0x8e>
                len = remain;
   178a6:	697b      	ldr	r3, [r7, #20]
   178a8:	61bb      	str	r3, [r7, #24]
                if (len > RNG_MAX_BLOCK_LEN)
   178aa:	69ba      	ldr	r2, [r7, #24]
   178ac:	2380      	movs	r3, #128	; 0x80
   178ae:	025b      	lsls	r3, r3, #9
   178b0:	429a      	cmp	r2, r3
   178b2:	dd02      	ble.n	178ba <bench_rng+0x62>
                    len = RNG_MAX_BLOCK_LEN;
   178b4:	2380      	movs	r3, #128	; 0x80
   178b6:	025b      	lsls	r3, r3, #9
   178b8:	61bb      	str	r3, [r7, #24]
                ret = wc_RNG_GenerateBlock(&myrng, &bench_plain[pos], (word32)len);
   178ba:	4b26      	ldr	r3, [pc, #152]	; (17954 <bench_rng+0xfc>)
   178bc:	681a      	ldr	r2, [r3, #0]
   178be:	69fb      	ldr	r3, [r7, #28]
   178c0:	18d1      	adds	r1, r2, r3
   178c2:	69ba      	ldr	r2, [r7, #24]
   178c4:	003b      	movs	r3, r7
   178c6:	0018      	movs	r0, r3
   178c8:	f7ed fdb6 	bl	5438 <wc_RNG_GenerateBlock>
   178cc:	0003      	movs	r3, r0
   178ce:	627b      	str	r3, [r7, #36]	; 0x24
                if (ret < 0)
   178d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   178d2:	2b00      	cmp	r3, #0
   178d4:	db1f      	blt.n	17916 <bench_rng+0xbe>
                    goto exit_rng;

                remain -= len;
   178d6:	697a      	ldr	r2, [r7, #20]
   178d8:	69bb      	ldr	r3, [r7, #24]
   178da:	1ad3      	subs	r3, r2, r3
   178dc:	617b      	str	r3, [r7, #20]
                pos += len;
   178de:	69fa      	ldr	r2, [r7, #28]
   178e0:	69bb      	ldr	r3, [r7, #24]
   178e2:	18d3      	adds	r3, r2, r3
   178e4:	61fb      	str	r3, [r7, #28]
    do {
        for (i = 0; i < numBlocks; i++) {
            /* Split request to handle large RNG request */
            pos = 0;
            remain = (int)BENCH_SIZE;
            while (remain > 0) {
   178e6:	697b      	ldr	r3, [r7, #20]
   178e8:	2b00      	cmp	r3, #0
   178ea:	dcdc      	bgt.n	178a6 <bench_rng+0x4e>
        return;
    }

    bench_stats_start(&count, &start);
    do {
        for (i = 0; i < numBlocks; i++) {
   178ec:	6a3b      	ldr	r3, [r7, #32]
   178ee:	3301      	adds	r3, #1
   178f0:	623b      	str	r3, [r7, #32]
   178f2:	4b19      	ldr	r3, [pc, #100]	; (17958 <bench_rng+0x100>)
   178f4:	681b      	ldr	r3, [r3, #0]
   178f6:	6a3a      	ldr	r2, [r7, #32]
   178f8:	429a      	cmp	r2, r3
   178fa:	dbce      	blt.n	1789a <bench_rng+0x42>

                remain -= len;
                pos += len;
            }
        }
        count += i;
   178fc:	693a      	ldr	r2, [r7, #16]
   178fe:	6a3b      	ldr	r3, [r7, #32]
   17900:	18d3      	adds	r3, r2, r3
   17902:	613b      	str	r3, [r7, #16]
    } while (bench_stats_sym_check(start));
   17904:	68bb      	ldr	r3, [r7, #8]
   17906:	68fc      	ldr	r4, [r7, #12]
   17908:	0018      	movs	r0, r3
   1790a:	0021      	movs	r1, r4
   1790c:	f7ff fb74 	bl	16ff8 <bench_stats_sym_check>
   17910:	1e03      	subs	r3, r0, #0
   17912:	d1bf      	bne.n	17894 <bench_rng+0x3c>
   17914:	e000      	b.n	17918 <bench_rng+0xc0>
                len = remain;
                if (len > RNG_MAX_BLOCK_LEN)
                    len = RNG_MAX_BLOCK_LEN;
                ret = wc_RNG_GenerateBlock(&myrng, &bench_plain[pos], (word32)len);
                if (ret < 0)
                    goto exit_rng;
   17916:	46c0      	nop			; (mov r8, r8)
            }
        }
        count += i;
    } while (bench_stats_sym_check(start));
exit_rng:
    bench_stats_sym_finish("RNG", 0, count, bench_size, start, ret);
   17918:	6939      	ldr	r1, [r7, #16]
   1791a:	4b0d      	ldr	r3, [pc, #52]	; (17950 <bench_rng+0xf8>)
   1791c:	681b      	ldr	r3, [r3, #0]
   1791e:	001d      	movs	r5, r3
   17920:	68bb      	ldr	r3, [r7, #8]
   17922:	68fc      	ldr	r4, [r7, #12]
   17924:	480d      	ldr	r0, [pc, #52]	; (1795c <bench_rng+0x104>)
   17926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17928:	9202      	str	r2, [sp, #8]
   1792a:	9300      	str	r3, [sp, #0]
   1792c:	9401      	str	r4, [sp, #4]
   1792e:	002b      	movs	r3, r5
   17930:	000a      	movs	r2, r1
   17932:	2100      	movs	r1, #0
   17934:	f7ff fb82 	bl	1703c <bench_stats_sym_finish>

    wc_FreeRng(&myrng);
   17938:	003b      	movs	r3, r7
   1793a:	0018      	movs	r0, r3
   1793c:	f7ed fdae 	bl	549c <wc_FreeRng>
}
   17940:	46bd      	mov	sp, r7
   17942:	b00a      	add	sp, #40	; 0x28
   17944:	bdb0      	pop	{r4, r5, r7, pc}
   17946:	46c0      	nop			; (mov r8, r8)
   17948:	200000a8 	.word	0x200000a8
   1794c:	0002de98 	.word	0x0002de98
   17950:	200000b4 	.word	0x200000b4
   17954:	200003a0 	.word	0x200003a0
   17958:	200000b0 	.word	0x200000b0
   1795c:	0002deac 	.word	0x0002deac

00017960 <bench_aescbc_internal>:

#ifdef HAVE_AES_CBC
static void bench_aescbc_internal(int doAsync, const byte* key, word32 keySz,
                                  const byte* iv, const char* encLabel,
                                  const char* decLabel)
{
   17960:	b5f0      	push	{r4, r5, r6, r7, lr}
   17962:	b0df      	sub	sp, #380	; 0x17c
   17964:	af04      	add	r7, sp, #16
   17966:	60f8      	str	r0, [r7, #12]
   17968:	60b9      	str	r1, [r7, #8]
   1796a:	607a      	str	r2, [r7, #4]
   1796c:	603b      	str	r3, [r7, #0]
    int    ret = 0, i, count = 0, times, pending = 0;
   1796e:	2300      	movs	r3, #0
   17970:	22b0      	movs	r2, #176	; 0xb0
   17972:	0052      	lsls	r2, r2, #1
   17974:	18ba      	adds	r2, r7, r2
   17976:	6013      	str	r3, [r2, #0]
   17978:	2300      	movs	r3, #0
   1797a:	22ae      	movs	r2, #174	; 0xae
   1797c:	0052      	lsls	r2, r2, #1
   1797e:	18ba      	adds	r2, r7, r2
   17980:	6013      	str	r3, [r2, #0]
   17982:	2300      	movs	r3, #0
   17984:	22aa      	movs	r2, #170	; 0xaa
   17986:	0052      	lsls	r2, r2, #1
   17988:	18ba      	adds	r2, r7, r2
   1798a:	6013      	str	r3, [r2, #0]
    Aes    enc[BENCH_MAX_PENDING];
    double start;

    /* clear for done cleanup */
    XMEMSET(enc, 0, sizeof(enc));
   1798c:	239c      	movs	r3, #156	; 0x9c
   1798e:	005a      	lsls	r2, r3, #1
   17990:	231c      	movs	r3, #28
   17992:	18fb      	adds	r3, r7, r3
   17994:	2100      	movs	r1, #0
   17996:	0018      	movs	r0, r3
   17998:	f00d fec7 	bl	2572a <memset>

    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   1799c:	2300      	movs	r3, #0
   1799e:	22b2      	movs	r2, #178	; 0xb2
   179a0:	0052      	lsls	r2, r2, #1
   179a2:	18ba      	adds	r2, r7, r2
   179a4:	6013      	str	r3, [r2, #0]
   179a6:	e05a      	b.n	17a5e <bench_aescbc_internal+0xfe>
        if ((ret = wc_AesInit(&enc[i], HEAP_HINT,
   179a8:	231c      	movs	r3, #28
   179aa:	18fa      	adds	r2, r7, r3
   179ac:	23b2      	movs	r3, #178	; 0xb2
   179ae:	005b      	lsls	r3, r3, #1
   179b0:	18fb      	adds	r3, r7, r3
   179b2:	681b      	ldr	r3, [r3, #0]
   179b4:	219c      	movs	r1, #156	; 0x9c
   179b6:	0049      	lsls	r1, r1, #1
   179b8:	434b      	muls	r3, r1
   179ba:	18d0      	adds	r0, r2, r3
   179bc:	68fb      	ldr	r3, [r7, #12]
   179be:	2b00      	cmp	r3, #0
   179c0:	d002      	beq.n	179c8 <bench_aescbc_internal+0x68>
   179c2:	4bdc      	ldr	r3, [pc, #880]	; (17d34 <bench_aescbc_internal+0x3d4>)
   179c4:	681b      	ldr	r3, [r3, #0]
   179c6:	e001      	b.n	179cc <bench_aescbc_internal+0x6c>
   179c8:	2302      	movs	r3, #2
   179ca:	425b      	negs	r3, r3
   179cc:	001a      	movs	r2, r3
   179ce:	2100      	movs	r1, #0
   179d0:	f7f2 fa24 	bl	9e1c <wc_AesInit>
   179d4:	0003      	movs	r3, r0
   179d6:	22b0      	movs	r2, #176	; 0xb0
   179d8:	0052      	lsls	r2, r2, #1
   179da:	18ba      	adds	r2, r7, r2
   179dc:	6013      	str	r3, [r2, #0]
   179de:	23b0      	movs	r3, #176	; 0xb0
   179e0:	005b      	lsls	r3, r3, #1
   179e2:	18fb      	adds	r3, r7, r3
   179e4:	681b      	ldr	r3, [r3, #0]
   179e6:	2b00      	cmp	r3, #0
   179e8:	d009      	beq.n	179fe <bench_aescbc_internal+0x9e>
                                doAsync ? devId : INVALID_DEVID)) != 0) {
            printf("AesInit failed, ret = %d\n", ret);
   179ea:	23b0      	movs	r3, #176	; 0xb0
   179ec:	005b      	lsls	r3, r3, #1
   179ee:	18fb      	adds	r3, r7, r3
   179f0:	681a      	ldr	r2, [r3, #0]
   179f2:	4bd1      	ldr	r3, [pc, #836]	; (17d38 <bench_aescbc_internal+0x3d8>)
   179f4:	0011      	movs	r1, r2
   179f6:	0018      	movs	r0, r3
   179f8:	f00e fbc2 	bl	26180 <iprintf>
            goto exit;
   179fc:	e1c4      	b.n	17d88 <bench_aescbc_internal+0x428>
        }

        ret = wc_AesSetKey(&enc[i], key, keySz, iv, AES_ENCRYPTION);
   179fe:	231c      	movs	r3, #28
   17a00:	18fa      	adds	r2, r7, r3
   17a02:	23b2      	movs	r3, #178	; 0xb2
   17a04:	005b      	lsls	r3, r3, #1
   17a06:	18fb      	adds	r3, r7, r3
   17a08:	681b      	ldr	r3, [r3, #0]
   17a0a:	219c      	movs	r1, #156	; 0x9c
   17a0c:	0049      	lsls	r1, r1, #1
   17a0e:	434b      	muls	r3, r1
   17a10:	18d0      	adds	r0, r2, r3
   17a12:	683c      	ldr	r4, [r7, #0]
   17a14:	687a      	ldr	r2, [r7, #4]
   17a16:	68b9      	ldr	r1, [r7, #8]
   17a18:	2300      	movs	r3, #0
   17a1a:	9300      	str	r3, [sp, #0]
   17a1c:	0023      	movs	r3, r4
   17a1e:	f7f1 fae3 	bl	8fe8 <wc_AesSetKey>
   17a22:	0003      	movs	r3, r0
   17a24:	22b0      	movs	r2, #176	; 0xb0
   17a26:	0052      	lsls	r2, r2, #1
   17a28:	18ba      	adds	r2, r7, r2
   17a2a:	6013      	str	r3, [r2, #0]
        if (ret != 0) {
   17a2c:	23b0      	movs	r3, #176	; 0xb0
   17a2e:	005b      	lsls	r3, r3, #1
   17a30:	18fb      	adds	r3, r7, r3
   17a32:	681b      	ldr	r3, [r3, #0]
   17a34:	2b00      	cmp	r3, #0
   17a36:	d009      	beq.n	17a4c <bench_aescbc_internal+0xec>
            printf("AesSetKey failed, ret = %d\n", ret);
   17a38:	23b0      	movs	r3, #176	; 0xb0
   17a3a:	005b      	lsls	r3, r3, #1
   17a3c:	18fb      	adds	r3, r7, r3
   17a3e:	681a      	ldr	r2, [r3, #0]
   17a40:	4bbe      	ldr	r3, [pc, #760]	; (17d3c <bench_aescbc_internal+0x3dc>)
   17a42:	0011      	movs	r1, r2
   17a44:	0018      	movs	r0, r3
   17a46:	f00e fb9b 	bl	26180 <iprintf>
            goto exit;
   17a4a:	e19d      	b.n	17d88 <bench_aescbc_internal+0x428>

    /* clear for done cleanup */
    XMEMSET(enc, 0, sizeof(enc));

    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17a4c:	23b2      	movs	r3, #178	; 0xb2
   17a4e:	005b      	lsls	r3, r3, #1
   17a50:	18fb      	adds	r3, r7, r3
   17a52:	681b      	ldr	r3, [r3, #0]
   17a54:	3301      	adds	r3, #1
   17a56:	22b2      	movs	r2, #178	; 0xb2
   17a58:	0052      	lsls	r2, r2, #1
   17a5a:	18ba      	adds	r2, r7, r2
   17a5c:	6013      	str	r3, [r2, #0]
   17a5e:	23b2      	movs	r3, #178	; 0xb2
   17a60:	005b      	lsls	r3, r3, #1
   17a62:	18fb      	adds	r3, r7, r3
   17a64:	681b      	ldr	r3, [r3, #0]
   17a66:	2b00      	cmp	r3, #0
   17a68:	dd9e      	ble.n	179a8 <bench_aescbc_internal+0x48>
            printf("AesSetKey failed, ret = %d\n", ret);
            goto exit;
        }
    }

    bench_stats_start(&count, &start);
   17a6a:	2310      	movs	r3, #16
   17a6c:	18fa      	adds	r2, r7, r3
   17a6e:	23ae      	movs	r3, #174	; 0xae
   17a70:	005b      	lsls	r3, r3, #1
   17a72:	18fb      	adds	r3, r7, r3
   17a74:	0011      	movs	r1, r2
   17a76:	0018      	movs	r0, r3
   17a78:	f7ff faaa 	bl	16fd0 <bench_stats_start>
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
   17a7c:	2300      	movs	r3, #0
   17a7e:	22ac      	movs	r2, #172	; 0xac
   17a80:	0052      	lsls	r2, r2, #1
   17a82:	18ba      	adds	r2, r7, r2
   17a84:	6013      	str	r3, [r2, #0]
   17a86:	e050      	b.n	17b2a <bench_aescbc_internal+0x1ca>
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17a88:	2300      	movs	r3, #0
   17a8a:	22b2      	movs	r2, #178	; 0xb2
   17a8c:	0052      	lsls	r2, r2, #1
   17a8e:	18ba      	adds	r2, r7, r2
   17a90:	6013      	str	r3, [r2, #0]
   17a92:	e044      	b.n	17b1e <bench_aescbc_internal+0x1be>
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&enc[i]), 0, &times, numBlocks, &pending)) {
   17a94:	4baa      	ldr	r3, [pc, #680]	; (17d40 <bench_aescbc_internal+0x3e0>)
   17a96:	681b      	ldr	r3, [r3, #0]
   17a98:	22ac      	movs	r2, #172	; 0xac
   17a9a:	0052      	lsls	r2, r2, #1
   17a9c:	18b9      	adds	r1, r7, r2
   17a9e:	22b0      	movs	r2, #176	; 0xb0
   17aa0:	0052      	lsls	r2, r2, #1
   17aa2:	18b8      	adds	r0, r7, r2
   17aa4:	22aa      	movs	r2, #170	; 0xaa
   17aa6:	0052      	lsls	r2, r2, #1
   17aa8:	18ba      	adds	r2, r7, r2
   17aaa:	9201      	str	r2, [sp, #4]
   17aac:	9300      	str	r3, [sp, #0]
   17aae:	000b      	movs	r3, r1
   17ab0:	2200      	movs	r2, #0
   17ab2:	2100      	movs	r1, #0
   17ab4:	f7ff fa62 	bl	16f7c <bench_async_check>
   17ab8:	1e03      	subs	r3, r0, #0
   17aba:	d027      	beq.n	17b0c <bench_aescbc_internal+0x1ac>
                    ret = wc_AesCbcEncrypt(&enc[i], bench_plain, bench_cipher,
   17abc:	231c      	movs	r3, #28
   17abe:	18fa      	adds	r2, r7, r3
   17ac0:	23b2      	movs	r3, #178	; 0xb2
   17ac2:	005b      	lsls	r3, r3, #1
   17ac4:	18fb      	adds	r3, r7, r3
   17ac6:	681b      	ldr	r3, [r3, #0]
   17ac8:	219c      	movs	r1, #156	; 0x9c
   17aca:	0049      	lsls	r1, r1, #1
   17acc:	434b      	muls	r3, r1
   17ace:	18d0      	adds	r0, r2, r3
   17ad0:	4b9c      	ldr	r3, [pc, #624]	; (17d44 <bench_aescbc_internal+0x3e4>)
   17ad2:	6819      	ldr	r1, [r3, #0]
   17ad4:	4b9c      	ldr	r3, [pc, #624]	; (17d48 <bench_aescbc_internal+0x3e8>)
   17ad6:	681a      	ldr	r2, [r3, #0]
   17ad8:	4b9c      	ldr	r3, [pc, #624]	; (17d4c <bench_aescbc_internal+0x3ec>)
   17ada:	681b      	ldr	r3, [r3, #0]
   17adc:	f7f1 fae0 	bl	90a0 <wc_AesCbcEncrypt>
   17ae0:	0003      	movs	r3, r0
   17ae2:	22b0      	movs	r2, #176	; 0xb0
   17ae4:	0052      	lsls	r2, r2, #1
   17ae6:	18ba      	adds	r2, r7, r2
   17ae8:	6013      	str	r3, [r2, #0]
                        BENCH_SIZE);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&enc[i]), 0, &times, &pending)) {
   17aea:	23ac      	movs	r3, #172	; 0xac
   17aec:	005b      	lsls	r3, r3, #1
   17aee:	18fa      	adds	r2, r7, r3
   17af0:	23b0      	movs	r3, #176	; 0xb0
   17af2:	005b      	lsls	r3, r3, #1
   17af4:	18f8      	adds	r0, r7, r3
   17af6:	23aa      	movs	r3, #170	; 0xaa
   17af8:	005b      	lsls	r3, r3, #1
   17afa:	18fb      	adds	r3, r7, r3
   17afc:	9300      	str	r3, [sp, #0]
   17afe:	0013      	movs	r3, r2
   17b00:	2200      	movs	r2, #0
   17b02:	2100      	movs	r1, #0
   17b04:	f7ff fa46 	bl	16f94 <bench_async_handle>
   17b08:	1e03      	subs	r3, r0, #0
   17b0a:	d032      	beq.n	17b72 <bench_aescbc_internal+0x212>
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17b0c:	23b2      	movs	r3, #178	; 0xb2
   17b0e:	005b      	lsls	r3, r3, #1
   17b10:	18fb      	adds	r3, r7, r3
   17b12:	681b      	ldr	r3, [r3, #0]
   17b14:	3301      	adds	r3, #1
   17b16:	22b2      	movs	r2, #178	; 0xb2
   17b18:	0052      	lsls	r2, r2, #1
   17b1a:	18ba      	adds	r2, r7, r2
   17b1c:	6013      	str	r3, [r2, #0]
   17b1e:	23b2      	movs	r3, #178	; 0xb2
   17b20:	005b      	lsls	r3, r3, #1
   17b22:	18fb      	adds	r3, r7, r3
   17b24:	681b      	ldr	r3, [r3, #0]
   17b26:	2b00      	cmp	r3, #0
   17b28:	ddb4      	ble.n	17a94 <bench_aescbc_internal+0x134>
        }
    }

    bench_stats_start(&count, &start);
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
   17b2a:	23ac      	movs	r3, #172	; 0xac
   17b2c:	005b      	lsls	r3, r3, #1
   17b2e:	18fb      	adds	r3, r7, r3
   17b30:	681a      	ldr	r2, [r3, #0]
   17b32:	4b83      	ldr	r3, [pc, #524]	; (17d40 <bench_aescbc_internal+0x3e0>)
   17b34:	681b      	ldr	r3, [r3, #0]
   17b36:	429a      	cmp	r2, r3
   17b38:	dba6      	blt.n	17a88 <bench_aescbc_internal+0x128>
   17b3a:	23aa      	movs	r3, #170	; 0xaa
   17b3c:	005b      	lsls	r3, r3, #1
   17b3e:	18fb      	adds	r3, r7, r3
   17b40:	681b      	ldr	r3, [r3, #0]
   17b42:	2b00      	cmp	r3, #0
   17b44:	dca0      	bgt.n	17a88 <bench_aescbc_internal+0x128>
                        goto exit_aes_enc;
                    }
                }
            } /* for i */
        } /* for times */
        count += times;
   17b46:	23ae      	movs	r3, #174	; 0xae
   17b48:	005b      	lsls	r3, r3, #1
   17b4a:	18fb      	adds	r3, r7, r3
   17b4c:	681a      	ldr	r2, [r3, #0]
   17b4e:	23ac      	movs	r3, #172	; 0xac
   17b50:	005b      	lsls	r3, r3, #1
   17b52:	18fb      	adds	r3, r7, r3
   17b54:	681b      	ldr	r3, [r3, #0]
   17b56:	18d3      	adds	r3, r2, r3
   17b58:	22ae      	movs	r2, #174	; 0xae
   17b5a:	0052      	lsls	r2, r2, #1
   17b5c:	18ba      	adds	r2, r7, r2
   17b5e:	6013      	str	r3, [r2, #0]
    } while (bench_stats_sym_check(start));
   17b60:	693b      	ldr	r3, [r7, #16]
   17b62:	697c      	ldr	r4, [r7, #20]
   17b64:	0018      	movs	r0, r3
   17b66:	0021      	movs	r1, r4
   17b68:	f7ff fa46 	bl	16ff8 <bench_stats_sym_check>
   17b6c:	1e03      	subs	r3, r0, #0
   17b6e:	d185      	bne.n	17a7c <bench_aescbc_internal+0x11c>
   17b70:	e000      	b.n	17b74 <bench_aescbc_internal+0x214>
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&enc[i]), 0, &times, numBlocks, &pending)) {
                    ret = wc_AesCbcEncrypt(&enc[i], bench_plain, bench_cipher,
                        BENCH_SIZE);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&enc[i]), 0, &times, &pending)) {
                        goto exit_aes_enc;
   17b72:	46c0      	nop			; (mov r8, r8)
            } /* for i */
        } /* for times */
        count += times;
    } while (bench_stats_sym_check(start));
exit_aes_enc:
    bench_stats_sym_finish(encLabel, doAsync, count, bench_size, start, ret);
   17b74:	23ae      	movs	r3, #174	; 0xae
   17b76:	005b      	lsls	r3, r3, #1
   17b78:	18fb      	adds	r3, r7, r3
   17b7a:	681d      	ldr	r5, [r3, #0]
   17b7c:	4b73      	ldr	r3, [pc, #460]	; (17d4c <bench_aescbc_internal+0x3ec>)
   17b7e:	681b      	ldr	r3, [r3, #0]
   17b80:	001e      	movs	r6, r3
   17b82:	693b      	ldr	r3, [r7, #16]
   17b84:	697c      	ldr	r4, [r7, #20]
   17b86:	22b0      	movs	r2, #176	; 0xb0
   17b88:	0052      	lsls	r2, r2, #1
   17b8a:	18ba      	adds	r2, r7, r2
   17b8c:	6812      	ldr	r2, [r2, #0]
   17b8e:	68f9      	ldr	r1, [r7, #12]
   17b90:	20c0      	movs	r0, #192	; 0xc0
   17b92:	0040      	lsls	r0, r0, #1
   17b94:	1838      	adds	r0, r7, r0
   17b96:	6800      	ldr	r0, [r0, #0]
   17b98:	9202      	str	r2, [sp, #8]
   17b9a:	9300      	str	r3, [sp, #0]
   17b9c:	9401      	str	r4, [sp, #4]
   17b9e:	0033      	movs	r3, r6
   17ba0:	002a      	movs	r2, r5
   17ba2:	f7ff fa4b 	bl	1703c <bench_stats_sym_finish>

    if (ret < 0) {
   17ba6:	23b0      	movs	r3, #176	; 0xb0
   17ba8:	005b      	lsls	r3, r3, #1
   17baa:	18fb      	adds	r3, r7, r3
   17bac:	681b      	ldr	r3, [r3, #0]
   17bae:	2b00      	cmp	r3, #0
   17bb0:	da00      	bge.n	17bb4 <bench_aescbc_internal+0x254>
   17bb2:	e0e8      	b.n	17d86 <bench_aescbc_internal+0x426>
        goto exit;
    }

#ifdef HAVE_AES_DECRYPT
    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17bb4:	2300      	movs	r3, #0
   17bb6:	22b2      	movs	r2, #178	; 0xb2
   17bb8:	0052      	lsls	r2, r2, #1
   17bba:	18ba      	adds	r2, r7, r2
   17bbc:	6013      	str	r3, [r2, #0]
   17bbe:	e02f      	b.n	17c20 <bench_aescbc_internal+0x2c0>
        ret = wc_AesSetKey(&enc[i], key, keySz, iv, AES_DECRYPTION);
   17bc0:	231c      	movs	r3, #28
   17bc2:	18fa      	adds	r2, r7, r3
   17bc4:	23b2      	movs	r3, #178	; 0xb2
   17bc6:	005b      	lsls	r3, r3, #1
   17bc8:	18fb      	adds	r3, r7, r3
   17bca:	681b      	ldr	r3, [r3, #0]
   17bcc:	219c      	movs	r1, #156	; 0x9c
   17bce:	0049      	lsls	r1, r1, #1
   17bd0:	434b      	muls	r3, r1
   17bd2:	18d0      	adds	r0, r2, r3
   17bd4:	683c      	ldr	r4, [r7, #0]
   17bd6:	687a      	ldr	r2, [r7, #4]
   17bd8:	68b9      	ldr	r1, [r7, #8]
   17bda:	2301      	movs	r3, #1
   17bdc:	9300      	str	r3, [sp, #0]
   17bde:	0023      	movs	r3, r4
   17be0:	f7f1 fa02 	bl	8fe8 <wc_AesSetKey>
   17be4:	0003      	movs	r3, r0
   17be6:	22b0      	movs	r2, #176	; 0xb0
   17be8:	0052      	lsls	r2, r2, #1
   17bea:	18ba      	adds	r2, r7, r2
   17bec:	6013      	str	r3, [r2, #0]
        if (ret != 0) {
   17bee:	23b0      	movs	r3, #176	; 0xb0
   17bf0:	005b      	lsls	r3, r3, #1
   17bf2:	18fb      	adds	r3, r7, r3
   17bf4:	681b      	ldr	r3, [r3, #0]
   17bf6:	2b00      	cmp	r3, #0
   17bf8:	d009      	beq.n	17c0e <bench_aescbc_internal+0x2ae>
            printf("AesSetKey failed, ret = %d\n", ret);
   17bfa:	23b0      	movs	r3, #176	; 0xb0
   17bfc:	005b      	lsls	r3, r3, #1
   17bfe:	18fb      	adds	r3, r7, r3
   17c00:	681a      	ldr	r2, [r3, #0]
   17c02:	4b4e      	ldr	r3, [pc, #312]	; (17d3c <bench_aescbc_internal+0x3dc>)
   17c04:	0011      	movs	r1, r2
   17c06:	0018      	movs	r0, r3
   17c08:	f00e faba 	bl	26180 <iprintf>
            goto exit;
   17c0c:	e0bc      	b.n	17d88 <bench_aescbc_internal+0x428>
        goto exit;
    }

#ifdef HAVE_AES_DECRYPT
    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17c0e:	23b2      	movs	r3, #178	; 0xb2
   17c10:	005b      	lsls	r3, r3, #1
   17c12:	18fb      	adds	r3, r7, r3
   17c14:	681b      	ldr	r3, [r3, #0]
   17c16:	3301      	adds	r3, #1
   17c18:	22b2      	movs	r2, #178	; 0xb2
   17c1a:	0052      	lsls	r2, r2, #1
   17c1c:	18ba      	adds	r2, r7, r2
   17c1e:	6013      	str	r3, [r2, #0]
   17c20:	23b2      	movs	r3, #178	; 0xb2
   17c22:	005b      	lsls	r3, r3, #1
   17c24:	18fb      	adds	r3, r7, r3
   17c26:	681b      	ldr	r3, [r3, #0]
   17c28:	2b00      	cmp	r3, #0
   17c2a:	ddc9      	ble.n	17bc0 <bench_aescbc_internal+0x260>
            printf("AesSetKey failed, ret = %d\n", ret);
            goto exit;
        }
    }

    bench_stats_start(&count, &start);
   17c2c:	2310      	movs	r3, #16
   17c2e:	18fa      	adds	r2, r7, r3
   17c30:	23ae      	movs	r3, #174	; 0xae
   17c32:	005b      	lsls	r3, r3, #1
   17c34:	18fb      	adds	r3, r7, r3
   17c36:	0011      	movs	r1, r2
   17c38:	0018      	movs	r0, r3
   17c3a:	f7ff f9c9 	bl	16fd0 <bench_stats_start>
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
   17c3e:	2300      	movs	r3, #0
   17c40:	22ac      	movs	r2, #172	; 0xac
   17c42:	0052      	lsls	r2, r2, #1
   17c44:	18ba      	adds	r2, r7, r2
   17c46:	6013      	str	r3, [r2, #0]
   17c48:	e050      	b.n	17cec <bench_aescbc_internal+0x38c>
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17c4a:	2300      	movs	r3, #0
   17c4c:	22b2      	movs	r2, #178	; 0xb2
   17c4e:	0052      	lsls	r2, r2, #1
   17c50:	18ba      	adds	r2, r7, r2
   17c52:	6013      	str	r3, [r2, #0]
   17c54:	e044      	b.n	17ce0 <bench_aescbc_internal+0x380>
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&enc[i]), 0, &times, numBlocks, &pending)) {
   17c56:	4b3a      	ldr	r3, [pc, #232]	; (17d40 <bench_aescbc_internal+0x3e0>)
   17c58:	681b      	ldr	r3, [r3, #0]
   17c5a:	22ac      	movs	r2, #172	; 0xac
   17c5c:	0052      	lsls	r2, r2, #1
   17c5e:	18b9      	adds	r1, r7, r2
   17c60:	22b0      	movs	r2, #176	; 0xb0
   17c62:	0052      	lsls	r2, r2, #1
   17c64:	18b8      	adds	r0, r7, r2
   17c66:	22aa      	movs	r2, #170	; 0xaa
   17c68:	0052      	lsls	r2, r2, #1
   17c6a:	18ba      	adds	r2, r7, r2
   17c6c:	9201      	str	r2, [sp, #4]
   17c6e:	9300      	str	r3, [sp, #0]
   17c70:	000b      	movs	r3, r1
   17c72:	2200      	movs	r2, #0
   17c74:	2100      	movs	r1, #0
   17c76:	f7ff f981 	bl	16f7c <bench_async_check>
   17c7a:	1e03      	subs	r3, r0, #0
   17c7c:	d027      	beq.n	17cce <bench_aescbc_internal+0x36e>
                    ret = wc_AesCbcDecrypt(&enc[i], bench_plain, bench_cipher,
   17c7e:	231c      	movs	r3, #28
   17c80:	18fa      	adds	r2, r7, r3
   17c82:	23b2      	movs	r3, #178	; 0xb2
   17c84:	005b      	lsls	r3, r3, #1
   17c86:	18fb      	adds	r3, r7, r3
   17c88:	681b      	ldr	r3, [r3, #0]
   17c8a:	219c      	movs	r1, #156	; 0x9c
   17c8c:	0049      	lsls	r1, r1, #1
   17c8e:	434b      	muls	r3, r1
   17c90:	18d0      	adds	r0, r2, r3
   17c92:	4b2c      	ldr	r3, [pc, #176]	; (17d44 <bench_aescbc_internal+0x3e4>)
   17c94:	6819      	ldr	r1, [r3, #0]
   17c96:	4b2c      	ldr	r3, [pc, #176]	; (17d48 <bench_aescbc_internal+0x3e8>)
   17c98:	681a      	ldr	r2, [r3, #0]
   17c9a:	4b2c      	ldr	r3, [pc, #176]	; (17d4c <bench_aescbc_internal+0x3ec>)
   17c9c:	681b      	ldr	r3, [r3, #0]
   17c9e:	f7f1 fa3f 	bl	9120 <wc_AesCbcDecrypt>
   17ca2:	0003      	movs	r3, r0
   17ca4:	22b0      	movs	r2, #176	; 0xb0
   17ca6:	0052      	lsls	r2, r2, #1
   17ca8:	18ba      	adds	r2, r7, r2
   17caa:	6013      	str	r3, [r2, #0]
                        BENCH_SIZE);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&enc[i]), 0, &times, &pending)) {
   17cac:	23ac      	movs	r3, #172	; 0xac
   17cae:	005b      	lsls	r3, r3, #1
   17cb0:	18fa      	adds	r2, r7, r3
   17cb2:	23b0      	movs	r3, #176	; 0xb0
   17cb4:	005b      	lsls	r3, r3, #1
   17cb6:	18f8      	adds	r0, r7, r3
   17cb8:	23aa      	movs	r3, #170	; 0xaa
   17cba:	005b      	lsls	r3, r3, #1
   17cbc:	18fb      	adds	r3, r7, r3
   17cbe:	9300      	str	r3, [sp, #0]
   17cc0:	0013      	movs	r3, r2
   17cc2:	2200      	movs	r2, #0
   17cc4:	2100      	movs	r1, #0
   17cc6:	f7ff f965 	bl	16f94 <bench_async_handle>
   17cca:	1e03      	subs	r3, r0, #0
   17ccc:	d040      	beq.n	17d50 <bench_aescbc_internal+0x3f0>
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17cce:	23b2      	movs	r3, #178	; 0xb2
   17cd0:	005b      	lsls	r3, r3, #1
   17cd2:	18fb      	adds	r3, r7, r3
   17cd4:	681b      	ldr	r3, [r3, #0]
   17cd6:	3301      	adds	r3, #1
   17cd8:	22b2      	movs	r2, #178	; 0xb2
   17cda:	0052      	lsls	r2, r2, #1
   17cdc:	18ba      	adds	r2, r7, r2
   17cde:	6013      	str	r3, [r2, #0]
   17ce0:	23b2      	movs	r3, #178	; 0xb2
   17ce2:	005b      	lsls	r3, r3, #1
   17ce4:	18fb      	adds	r3, r7, r3
   17ce6:	681b      	ldr	r3, [r3, #0]
   17ce8:	2b00      	cmp	r3, #0
   17cea:	ddb4      	ble.n	17c56 <bench_aescbc_internal+0x2f6>
        }
    }

    bench_stats_start(&count, &start);
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
   17cec:	23ac      	movs	r3, #172	; 0xac
   17cee:	005b      	lsls	r3, r3, #1
   17cf0:	18fb      	adds	r3, r7, r3
   17cf2:	681a      	ldr	r2, [r3, #0]
   17cf4:	4b12      	ldr	r3, [pc, #72]	; (17d40 <bench_aescbc_internal+0x3e0>)
   17cf6:	681b      	ldr	r3, [r3, #0]
   17cf8:	429a      	cmp	r2, r3
   17cfa:	dba6      	blt.n	17c4a <bench_aescbc_internal+0x2ea>
   17cfc:	23aa      	movs	r3, #170	; 0xaa
   17cfe:	005b      	lsls	r3, r3, #1
   17d00:	18fb      	adds	r3, r7, r3
   17d02:	681b      	ldr	r3, [r3, #0]
   17d04:	2b00      	cmp	r3, #0
   17d06:	dca0      	bgt.n	17c4a <bench_aescbc_internal+0x2ea>
                        goto exit_aes_dec;
                    }
                }
            } /* for i */
        } /* for times */
        count += times;
   17d08:	23ae      	movs	r3, #174	; 0xae
   17d0a:	005b      	lsls	r3, r3, #1
   17d0c:	18fb      	adds	r3, r7, r3
   17d0e:	681a      	ldr	r2, [r3, #0]
   17d10:	23ac      	movs	r3, #172	; 0xac
   17d12:	005b      	lsls	r3, r3, #1
   17d14:	18fb      	adds	r3, r7, r3
   17d16:	681b      	ldr	r3, [r3, #0]
   17d18:	18d3      	adds	r3, r2, r3
   17d1a:	22ae      	movs	r2, #174	; 0xae
   17d1c:	0052      	lsls	r2, r2, #1
   17d1e:	18ba      	adds	r2, r7, r2
   17d20:	6013      	str	r3, [r2, #0]
    } while (bench_stats_sym_check(start));
   17d22:	693b      	ldr	r3, [r7, #16]
   17d24:	697c      	ldr	r4, [r7, #20]
   17d26:	0018      	movs	r0, r3
   17d28:	0021      	movs	r1, r4
   17d2a:	f7ff f965 	bl	16ff8 <bench_stats_sym_check>
   17d2e:	1e03      	subs	r3, r0, #0
   17d30:	d185      	bne.n	17c3e <bench_aescbc_internal+0x2de>
   17d32:	e00e      	b.n	17d52 <bench_aescbc_internal+0x3f2>
   17d34:	200000a8 	.word	0x200000a8
   17d38:	0002deb0 	.word	0x0002deb0
   17d3c:	0002decc 	.word	0x0002decc
   17d40:	200000b0 	.word	0x200000b0
   17d44:	200003a0 	.word	0x200003a0
   17d48:	200003a4 	.word	0x200003a4
   17d4c:	200000b4 	.word	0x200000b4
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&enc[i]), 0, &times, numBlocks, &pending)) {
                    ret = wc_AesCbcDecrypt(&enc[i], bench_plain, bench_cipher,
                        BENCH_SIZE);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&enc[i]), 0, &times, &pending)) {
                        goto exit_aes_dec;
   17d50:	46c0      	nop			; (mov r8, r8)
            } /* for i */
        } /* for times */
        count += times;
    } while (bench_stats_sym_check(start));
exit_aes_dec:
    bench_stats_sym_finish(decLabel, doAsync, count, bench_size, start, ret);
   17d52:	23ae      	movs	r3, #174	; 0xae
   17d54:	005b      	lsls	r3, r3, #1
   17d56:	18fb      	adds	r3, r7, r3
   17d58:	681d      	ldr	r5, [r3, #0]
   17d5a:	4b1e      	ldr	r3, [pc, #120]	; (17dd4 <bench_aescbc_internal+0x474>)
   17d5c:	681b      	ldr	r3, [r3, #0]
   17d5e:	001e      	movs	r6, r3
   17d60:	693b      	ldr	r3, [r7, #16]
   17d62:	697c      	ldr	r4, [r7, #20]
   17d64:	22b0      	movs	r2, #176	; 0xb0
   17d66:	0052      	lsls	r2, r2, #1
   17d68:	18ba      	adds	r2, r7, r2
   17d6a:	6812      	ldr	r2, [r2, #0]
   17d6c:	68f9      	ldr	r1, [r7, #12]
   17d6e:	20c2      	movs	r0, #194	; 0xc2
   17d70:	0040      	lsls	r0, r0, #1
   17d72:	1838      	adds	r0, r7, r0
   17d74:	6800      	ldr	r0, [r0, #0]
   17d76:	9202      	str	r2, [sp, #8]
   17d78:	9300      	str	r3, [sp, #0]
   17d7a:	9401      	str	r4, [sp, #4]
   17d7c:	0033      	movs	r3, r6
   17d7e:	002a      	movs	r2, r5
   17d80:	f7ff f95c 	bl	1703c <bench_stats_sym_finish>
   17d84:	e000      	b.n	17d88 <bench_aescbc_internal+0x428>
    } while (bench_stats_sym_check(start));
exit_aes_enc:
    bench_stats_sym_finish(encLabel, doAsync, count, bench_size, start, ret);

    if (ret < 0) {
        goto exit;
   17d86:	46c0      	nop			; (mov r8, r8)
#endif /* HAVE_AES_DECRYPT */

    (void)decLabel;
exit:

    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17d88:	2300      	movs	r3, #0
   17d8a:	22b2      	movs	r2, #178	; 0xb2
   17d8c:	0052      	lsls	r2, r2, #1
   17d8e:	18ba      	adds	r2, r7, r2
   17d90:	6013      	str	r3, [r2, #0]
   17d92:	e015      	b.n	17dc0 <bench_aescbc_internal+0x460>
        wc_AesFree(&enc[i]);
   17d94:	231c      	movs	r3, #28
   17d96:	18fa      	adds	r2, r7, r3
   17d98:	23b2      	movs	r3, #178	; 0xb2
   17d9a:	005b      	lsls	r3, r3, #1
   17d9c:	18fb      	adds	r3, r7, r3
   17d9e:	681b      	ldr	r3, [r3, #0]
   17da0:	219c      	movs	r1, #156	; 0x9c
   17da2:	0049      	lsls	r1, r1, #1
   17da4:	434b      	muls	r3, r1
   17da6:	18d3      	adds	r3, r2, r3
   17da8:	0018      	movs	r0, r3
   17daa:	f7f2 f84f 	bl	9e4c <wc_AesFree>
#endif /* HAVE_AES_DECRYPT */

    (void)decLabel;
exit:

    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17dae:	23b2      	movs	r3, #178	; 0xb2
   17db0:	005b      	lsls	r3, r3, #1
   17db2:	18fb      	adds	r3, r7, r3
   17db4:	681b      	ldr	r3, [r3, #0]
   17db6:	3301      	adds	r3, #1
   17db8:	22b2      	movs	r2, #178	; 0xb2
   17dba:	0052      	lsls	r2, r2, #1
   17dbc:	18ba      	adds	r2, r7, r2
   17dbe:	6013      	str	r3, [r2, #0]
   17dc0:	23b2      	movs	r3, #178	; 0xb2
   17dc2:	005b      	lsls	r3, r3, #1
   17dc4:	18fb      	adds	r3, r7, r3
   17dc6:	681b      	ldr	r3, [r3, #0]
   17dc8:	2b00      	cmp	r3, #0
   17dca:	dde3      	ble.n	17d94 <bench_aescbc_internal+0x434>
        wc_AesFree(&enc[i]);
    }
}
   17dcc:	46c0      	nop			; (mov r8, r8)
   17dce:	46bd      	mov	sp, r7
   17dd0:	b05b      	add	sp, #364	; 0x16c
   17dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17dd4:	200000b4 	.word	0x200000b4

00017dd8 <bench_aescbc>:

void bench_aescbc(int doAsync)
{
   17dd8:	b580      	push	{r7, lr}
   17dda:	b084      	sub	sp, #16
   17ddc:	af02      	add	r7, sp, #8
   17dde:	6078      	str	r0, [r7, #4]
#ifdef WOLFSSL_AES_128
    bench_aescbc_internal(doAsync, bench_key, 16, bench_iv,
   17de0:	4b15      	ldr	r3, [pc, #84]	; (17e38 <bench_aescbc+0x60>)
   17de2:	6819      	ldr	r1, [r3, #0]
   17de4:	4b15      	ldr	r3, [pc, #84]	; (17e3c <bench_aescbc+0x64>)
   17de6:	681a      	ldr	r2, [r3, #0]
   17de8:	6878      	ldr	r0, [r7, #4]
   17dea:	4b15      	ldr	r3, [pc, #84]	; (17e40 <bench_aescbc+0x68>)
   17dec:	9301      	str	r3, [sp, #4]
   17dee:	4b15      	ldr	r3, [pc, #84]	; (17e44 <bench_aescbc+0x6c>)
   17df0:	9300      	str	r3, [sp, #0]
   17df2:	0013      	movs	r3, r2
   17df4:	2210      	movs	r2, #16
   17df6:	f7ff fdb3 	bl	17960 <bench_aescbc_internal>
                 "AES-128-CBC-enc", "AES-128-CBC-dec");
#endif
#ifdef WOLFSSL_AES_192
    bench_aescbc_internal(doAsync, bench_key, 24, bench_iv,
   17dfa:	4b0f      	ldr	r3, [pc, #60]	; (17e38 <bench_aescbc+0x60>)
   17dfc:	6819      	ldr	r1, [r3, #0]
   17dfe:	4b0f      	ldr	r3, [pc, #60]	; (17e3c <bench_aescbc+0x64>)
   17e00:	681a      	ldr	r2, [r3, #0]
   17e02:	6878      	ldr	r0, [r7, #4]
   17e04:	4b10      	ldr	r3, [pc, #64]	; (17e48 <bench_aescbc+0x70>)
   17e06:	9301      	str	r3, [sp, #4]
   17e08:	4b10      	ldr	r3, [pc, #64]	; (17e4c <bench_aescbc+0x74>)
   17e0a:	9300      	str	r3, [sp, #0]
   17e0c:	0013      	movs	r3, r2
   17e0e:	2218      	movs	r2, #24
   17e10:	f7ff fda6 	bl	17960 <bench_aescbc_internal>
                 "AES-192-CBC-enc", "AES-192-CBC-dec");
#endif
#ifdef WOLFSSL_AES_256
    bench_aescbc_internal(doAsync, bench_key, 32, bench_iv,
   17e14:	4b08      	ldr	r3, [pc, #32]	; (17e38 <bench_aescbc+0x60>)
   17e16:	6819      	ldr	r1, [r3, #0]
   17e18:	4b08      	ldr	r3, [pc, #32]	; (17e3c <bench_aescbc+0x64>)
   17e1a:	681a      	ldr	r2, [r3, #0]
   17e1c:	6878      	ldr	r0, [r7, #4]
   17e1e:	4b0c      	ldr	r3, [pc, #48]	; (17e50 <bench_aescbc+0x78>)
   17e20:	9301      	str	r3, [sp, #4]
   17e22:	4b0c      	ldr	r3, [pc, #48]	; (17e54 <bench_aescbc+0x7c>)
   17e24:	9300      	str	r3, [sp, #0]
   17e26:	0013      	movs	r3, r2
   17e28:	2220      	movs	r2, #32
   17e2a:	f7ff fd99 	bl	17960 <bench_aescbc_internal>
                 "AES-256-CBC-enc", "AES-256-CBC-dec");
#endif
}
   17e2e:	46c0      	nop			; (mov r8, r8)
   17e30:	46bd      	mov	sp, r7
   17e32:	b002      	add	sp, #8
   17e34:	bd80      	pop	{r7, pc}
   17e36:	46c0      	nop			; (mov r8, r8)
   17e38:	200003a8 	.word	0x200003a8
   17e3c:	200003ac 	.word	0x200003ac
   17e40:	0002dee8 	.word	0x0002dee8
   17e44:	0002def8 	.word	0x0002def8
   17e48:	0002df08 	.word	0x0002df08
   17e4c:	0002df18 	.word	0x0002df18
   17e50:	0002df28 	.word	0x0002df28
   17e54:	0002df38 	.word	0x0002df38

00017e58 <bench_aesgcm_internal>:

#ifdef HAVE_AESGCM
static void bench_aesgcm_internal(int doAsync, const byte* key, word32 keySz,
                                  const byte* iv, word32 ivSz,
                                  const char* encLabel, const char* decLabel)
{
   17e58:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e5a:	4ce3      	ldr	r4, [pc, #908]	; (181e8 <bench_aesgcm_internal+0x390>)
   17e5c:	44a5      	add	sp, r4
   17e5e:	af06      	add	r7, sp, #24
   17e60:	60f8      	str	r0, [r7, #12]
   17e62:	60b9      	str	r1, [r7, #8]
   17e64:	607a      	str	r2, [r7, #4]
   17e66:	603b      	str	r3, [r7, #0]
    int    ret = 0, i, count = 0, times, pending = 0;
   17e68:	2300      	movs	r3, #0
   17e6a:	22ae      	movs	r2, #174	; 0xae
   17e6c:	0092      	lsls	r2, r2, #2
   17e6e:	18ba      	adds	r2, r7, r2
   17e70:	6013      	str	r3, [r2, #0]
   17e72:	2300      	movs	r3, #0
   17e74:	22ad      	movs	r2, #173	; 0xad
   17e76:	0092      	lsls	r2, r2, #2
   17e78:	18ba      	adds	r2, r7, r2
   17e7a:	6013      	str	r3, [r2, #0]
   17e7c:	2300      	movs	r3, #0
   17e7e:	22ab      	movs	r2, #171	; 0xab
   17e80:	0092      	lsls	r2, r2, #2
   17e82:	18ba      	adds	r2, r7, r2
   17e84:	6013      	str	r3, [r2, #0]

    DECLARE_VAR(bench_additional, byte, AES_AUTH_ADD_SZ, HEAP_HINT);
    DECLARE_VAR(bench_tag, byte, AES_AUTH_TAG_SZ, HEAP_HINT);

    /* clear for done cleanup */
    XMEMSET(enc, 0, sizeof(enc));
   17e86:	239c      	movs	r3, #156	; 0x9c
   17e88:	005a      	lsls	r2, r3, #1
   17e8a:	23ba      	movs	r3, #186	; 0xba
   17e8c:	005b      	lsls	r3, r3, #1
   17e8e:	18fb      	adds	r3, r7, r3
   17e90:	2100      	movs	r1, #0
   17e92:	0018      	movs	r0, r3
   17e94:	f00d fc49 	bl	2572a <memset>
#ifdef HAVE_AES_DECRYPT
    XMEMSET(dec, 0, sizeof(dec));
   17e98:	239c      	movs	r3, #156	; 0x9c
   17e9a:	005a      	lsls	r2, r3, #1
   17e9c:	233c      	movs	r3, #60	; 0x3c
   17e9e:	18fb      	adds	r3, r7, r3
   17ea0:	2100      	movs	r1, #0
   17ea2:	0018      	movs	r0, r3
   17ea4:	f00d fc41 	bl	2572a <memset>
#endif
#ifdef WOLFSSL_ASYNC_CRYPT
    if (bench_additional)
#endif
        XMEMSET(bench_additional, 0, AES_AUTH_ADD_SZ);
   17ea8:	2320      	movs	r3, #32
   17eaa:	18fb      	adds	r3, r7, r3
   17eac:	220d      	movs	r2, #13
   17eae:	2100      	movs	r1, #0
   17eb0:	0018      	movs	r0, r3
   17eb2:	f00d fc3a 	bl	2572a <memset>
#ifdef WOLFSSL_ASYNC_CRYPT
    if (bench_tag)
#endif
        XMEMSET(bench_tag, 0, AES_AUTH_TAG_SZ);
   17eb6:	2310      	movs	r3, #16
   17eb8:	18fb      	adds	r3, r7, r3
   17eba:	2210      	movs	r2, #16
   17ebc:	2100      	movs	r1, #0
   17ebe:	0018      	movs	r0, r3
   17ec0:	f00d fc33 	bl	2572a <memset>

    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17ec4:	2300      	movs	r3, #0
   17ec6:	22af      	movs	r2, #175	; 0xaf
   17ec8:	0092      	lsls	r2, r2, #2
   17eca:	18ba      	adds	r2, r7, r2
   17ecc:	6013      	str	r3, [r2, #0]
   17ece:	e059      	b.n	17f84 <bench_aesgcm_internal+0x12c>
        if ((ret = wc_AesInit(&enc[i], HEAP_HINT,
   17ed0:	23ba      	movs	r3, #186	; 0xba
   17ed2:	005b      	lsls	r3, r3, #1
   17ed4:	18fa      	adds	r2, r7, r3
   17ed6:	23af      	movs	r3, #175	; 0xaf
   17ed8:	009b      	lsls	r3, r3, #2
   17eda:	18fb      	adds	r3, r7, r3
   17edc:	681b      	ldr	r3, [r3, #0]
   17ede:	219c      	movs	r1, #156	; 0x9c
   17ee0:	0049      	lsls	r1, r1, #1
   17ee2:	434b      	muls	r3, r1
   17ee4:	18d0      	adds	r0, r2, r3
   17ee6:	68fb      	ldr	r3, [r7, #12]
   17ee8:	2b00      	cmp	r3, #0
   17eea:	d002      	beq.n	17ef2 <bench_aesgcm_internal+0x9a>
   17eec:	4bbf      	ldr	r3, [pc, #764]	; (181ec <bench_aesgcm_internal+0x394>)
   17eee:	681b      	ldr	r3, [r3, #0]
   17ef0:	e001      	b.n	17ef6 <bench_aesgcm_internal+0x9e>
   17ef2:	2302      	movs	r3, #2
   17ef4:	425b      	negs	r3, r3
   17ef6:	001a      	movs	r2, r3
   17ef8:	2100      	movs	r1, #0
   17efa:	f7f1 ff8f 	bl	9e1c <wc_AesInit>
   17efe:	0003      	movs	r3, r0
   17f00:	22ae      	movs	r2, #174	; 0xae
   17f02:	0092      	lsls	r2, r2, #2
   17f04:	18ba      	adds	r2, r7, r2
   17f06:	6013      	str	r3, [r2, #0]
   17f08:	23ae      	movs	r3, #174	; 0xae
   17f0a:	009b      	lsls	r3, r3, #2
   17f0c:	18fb      	adds	r3, r7, r3
   17f0e:	681b      	ldr	r3, [r3, #0]
   17f10:	2b00      	cmp	r3, #0
   17f12:	d009      	beq.n	17f28 <bench_aesgcm_internal+0xd0>
                        doAsync ? devId : INVALID_DEVID)) != 0) {
            printf("AesInit failed, ret = %d\n", ret);
   17f14:	23ae      	movs	r3, #174	; 0xae
   17f16:	009b      	lsls	r3, r3, #2
   17f18:	18fb      	adds	r3, r7, r3
   17f1a:	681a      	ldr	r2, [r3, #0]
   17f1c:	4bb4      	ldr	r3, [pc, #720]	; (181f0 <bench_aesgcm_internal+0x398>)
   17f1e:	0011      	movs	r1, r2
   17f20:	0018      	movs	r0, r3
   17f22:	f00e f92d 	bl	26180 <iprintf>
            goto exit;
   17f26:	e210      	b.n	1834a <bench_aesgcm_internal+0x4f2>
        }

        ret = wc_AesGcmSetKey(&enc[i], key, keySz);
   17f28:	23ba      	movs	r3, #186	; 0xba
   17f2a:	005b      	lsls	r3, r3, #1
   17f2c:	18fa      	adds	r2, r7, r3
   17f2e:	23af      	movs	r3, #175	; 0xaf
   17f30:	009b      	lsls	r3, r3, #2
   17f32:	18fb      	adds	r3, r7, r3
   17f34:	681b      	ldr	r3, [r3, #0]
   17f36:	219c      	movs	r1, #156	; 0x9c
   17f38:	0049      	lsls	r1, r1, #1
   17f3a:	434b      	muls	r3, r1
   17f3c:	18d3      	adds	r3, r2, r3
   17f3e:	687a      	ldr	r2, [r7, #4]
   17f40:	68b9      	ldr	r1, [r7, #8]
   17f42:	0018      	movs	r0, r3
   17f44:	f7f1 f9f8 	bl	9338 <wc_AesGcmSetKey>
   17f48:	0003      	movs	r3, r0
   17f4a:	22ae      	movs	r2, #174	; 0xae
   17f4c:	0092      	lsls	r2, r2, #2
   17f4e:	18ba      	adds	r2, r7, r2
   17f50:	6013      	str	r3, [r2, #0]
        if (ret != 0) {
   17f52:	23ae      	movs	r3, #174	; 0xae
   17f54:	009b      	lsls	r3, r3, #2
   17f56:	18fb      	adds	r3, r7, r3
   17f58:	681b      	ldr	r3, [r3, #0]
   17f5a:	2b00      	cmp	r3, #0
   17f5c:	d009      	beq.n	17f72 <bench_aesgcm_internal+0x11a>
            printf("AesGcmSetKey failed, ret = %d\n", ret);
   17f5e:	23ae      	movs	r3, #174	; 0xae
   17f60:	009b      	lsls	r3, r3, #2
   17f62:	18fb      	adds	r3, r7, r3
   17f64:	681a      	ldr	r2, [r3, #0]
   17f66:	4ba3      	ldr	r3, [pc, #652]	; (181f4 <bench_aesgcm_internal+0x39c>)
   17f68:	0011      	movs	r1, r2
   17f6a:	0018      	movs	r0, r3
   17f6c:	f00e f908 	bl	26180 <iprintf>
            goto exit;
   17f70:	e1eb      	b.n	1834a <bench_aesgcm_internal+0x4f2>
    if (bench_tag)
#endif
        XMEMSET(bench_tag, 0, AES_AUTH_TAG_SZ);

    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17f72:	23af      	movs	r3, #175	; 0xaf
   17f74:	009b      	lsls	r3, r3, #2
   17f76:	18fb      	adds	r3, r7, r3
   17f78:	681b      	ldr	r3, [r3, #0]
   17f7a:	3301      	adds	r3, #1
   17f7c:	22af      	movs	r2, #175	; 0xaf
   17f7e:	0092      	lsls	r2, r2, #2
   17f80:	18ba      	adds	r2, r7, r2
   17f82:	6013      	str	r3, [r2, #0]
   17f84:	23af      	movs	r3, #175	; 0xaf
   17f86:	009b      	lsls	r3, r3, #2
   17f88:	18fb      	adds	r3, r7, r3
   17f8a:	681b      	ldr	r3, [r3, #0]
   17f8c:	2b00      	cmp	r3, #0
   17f8e:	dd9f      	ble.n	17ed0 <bench_aesgcm_internal+0x78>
            goto exit;
        }
    }

    /* GCM uses same routine in backend for both encrypt and decrypt */
    bench_stats_start(&count, &start);
   17f90:	2330      	movs	r3, #48	; 0x30
   17f92:	18fa      	adds	r2, r7, r3
   17f94:	23ad      	movs	r3, #173	; 0xad
   17f96:	009b      	lsls	r3, r3, #2
   17f98:	18fb      	adds	r3, r7, r3
   17f9a:	0011      	movs	r1, r2
   17f9c:	0018      	movs	r0, r3
   17f9e:	f7ff f817 	bl	16fd0 <bench_stats_start>
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
   17fa2:	2300      	movs	r3, #0
   17fa4:	22ac      	movs	r2, #172	; 0xac
   17fa6:	0092      	lsls	r2, r2, #2
   17fa8:	18ba      	adds	r2, r7, r2
   17faa:	6013      	str	r3, [r2, #0]
   17fac:	e064      	b.n	18078 <bench_aesgcm_internal+0x220>
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   17fae:	2300      	movs	r3, #0
   17fb0:	22af      	movs	r2, #175	; 0xaf
   17fb2:	0092      	lsls	r2, r2, #2
   17fb4:	18ba      	adds	r2, r7, r2
   17fb6:	6013      	str	r3, [r2, #0]
   17fb8:	e058      	b.n	1806c <bench_aesgcm_internal+0x214>
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&enc[i]), 0, &times, numBlocks, &pending)) {
   17fba:	4b8f      	ldr	r3, [pc, #572]	; (181f8 <bench_aesgcm_internal+0x3a0>)
   17fbc:	681b      	ldr	r3, [r3, #0]
   17fbe:	22ac      	movs	r2, #172	; 0xac
   17fc0:	0092      	lsls	r2, r2, #2
   17fc2:	18b9      	adds	r1, r7, r2
   17fc4:	22ae      	movs	r2, #174	; 0xae
   17fc6:	0092      	lsls	r2, r2, #2
   17fc8:	18b8      	adds	r0, r7, r2
   17fca:	22ab      	movs	r2, #171	; 0xab
   17fcc:	0092      	lsls	r2, r2, #2
   17fce:	18ba      	adds	r2, r7, r2
   17fd0:	9201      	str	r2, [sp, #4]
   17fd2:	9300      	str	r3, [sp, #0]
   17fd4:	000b      	movs	r3, r1
   17fd6:	2200      	movs	r2, #0
   17fd8:	2100      	movs	r1, #0
   17fda:	f7fe ffcf 	bl	16f7c <bench_async_check>
   17fde:	1e03      	subs	r3, r0, #0
   17fe0:	d03b      	beq.n	1805a <bench_aesgcm_internal+0x202>
                    ret = wc_AesGcmEncrypt(&enc[i], bench_cipher,
   17fe2:	23ba      	movs	r3, #186	; 0xba
   17fe4:	005b      	lsls	r3, r3, #1
   17fe6:	18fa      	adds	r2, r7, r3
   17fe8:	23af      	movs	r3, #175	; 0xaf
   17fea:	009b      	lsls	r3, r3, #2
   17fec:	18fb      	adds	r3, r7, r3
   17fee:	681b      	ldr	r3, [r3, #0]
   17ff0:	219c      	movs	r1, #156	; 0x9c
   17ff2:	0049      	lsls	r1, r1, #1
   17ff4:	434b      	muls	r3, r1
   17ff6:	18d0      	adds	r0, r2, r3
   17ff8:	4b80      	ldr	r3, [pc, #512]	; (181fc <bench_aesgcm_internal+0x3a4>)
   17ffa:	6819      	ldr	r1, [r3, #0]
   17ffc:	4b80      	ldr	r3, [pc, #512]	; (18200 <bench_aesgcm_internal+0x3a8>)
   17ffe:	681a      	ldr	r2, [r3, #0]
   18000:	4b80      	ldr	r3, [pc, #512]	; (18204 <bench_aesgcm_internal+0x3ac>)
   18002:	681c      	ldr	r4, [r3, #0]
   18004:	4b80      	ldr	r3, [pc, #512]	; (18208 <bench_aesgcm_internal+0x3b0>)
   18006:	681b      	ldr	r3, [r3, #0]
   18008:	9305      	str	r3, [sp, #20]
   1800a:	2320      	movs	r3, #32
   1800c:	18fb      	adds	r3, r7, r3
   1800e:	9304      	str	r3, [sp, #16]
   18010:	2310      	movs	r3, #16
   18012:	9303      	str	r3, [sp, #12]
   18014:	2310      	movs	r3, #16
   18016:	18fb      	adds	r3, r7, r3
   18018:	9302      	str	r3, [sp, #8]
   1801a:	23b6      	movs	r3, #182	; 0xb6
   1801c:	009b      	lsls	r3, r3, #2
   1801e:	18fb      	adds	r3, r7, r3
   18020:	681b      	ldr	r3, [r3, #0]
   18022:	9301      	str	r3, [sp, #4]
   18024:	683b      	ldr	r3, [r7, #0]
   18026:	9300      	str	r3, [sp, #0]
   18028:	0023      	movs	r3, r4
   1802a:	f7f1 fb83 	bl	9734 <wc_AesGcmEncrypt>
   1802e:	0003      	movs	r3, r0
   18030:	22ae      	movs	r2, #174	; 0xae
   18032:	0092      	lsls	r2, r2, #2
   18034:	18ba      	adds	r2, r7, r2
   18036:	6013      	str	r3, [r2, #0]
                        bench_plain, BENCH_SIZE,
                        iv, ivSz, bench_tag, AES_AUTH_TAG_SZ,
                        bench_additional, aesAuthAddSz);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&enc[i]), 0, &times, &pending)) {
   18038:	23ac      	movs	r3, #172	; 0xac
   1803a:	009b      	lsls	r3, r3, #2
   1803c:	18fa      	adds	r2, r7, r3
   1803e:	23ae      	movs	r3, #174	; 0xae
   18040:	009b      	lsls	r3, r3, #2
   18042:	18f8      	adds	r0, r7, r3
   18044:	23ab      	movs	r3, #171	; 0xab
   18046:	009b      	lsls	r3, r3, #2
   18048:	18fb      	adds	r3, r7, r3
   1804a:	9300      	str	r3, [sp, #0]
   1804c:	0013      	movs	r3, r2
   1804e:	2200      	movs	r2, #0
   18050:	2100      	movs	r1, #0
   18052:	f7fe ff9f 	bl	16f94 <bench_async_handle>
   18056:	1e03      	subs	r3, r0, #0
   18058:	d033      	beq.n	180c2 <bench_aesgcm_internal+0x26a>
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   1805a:	23af      	movs	r3, #175	; 0xaf
   1805c:	009b      	lsls	r3, r3, #2
   1805e:	18fb      	adds	r3, r7, r3
   18060:	681b      	ldr	r3, [r3, #0]
   18062:	3301      	adds	r3, #1
   18064:	22af      	movs	r2, #175	; 0xaf
   18066:	0092      	lsls	r2, r2, #2
   18068:	18ba      	adds	r2, r7, r2
   1806a:	6013      	str	r3, [r2, #0]
   1806c:	23af      	movs	r3, #175	; 0xaf
   1806e:	009b      	lsls	r3, r3, #2
   18070:	18fb      	adds	r3, r7, r3
   18072:	681b      	ldr	r3, [r3, #0]
   18074:	2b00      	cmp	r3, #0
   18076:	dda0      	ble.n	17fba <bench_aesgcm_internal+0x162>
    }

    /* GCM uses same routine in backend for both encrypt and decrypt */
    bench_stats_start(&count, &start);
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
   18078:	23ac      	movs	r3, #172	; 0xac
   1807a:	009b      	lsls	r3, r3, #2
   1807c:	18fb      	adds	r3, r7, r3
   1807e:	681a      	ldr	r2, [r3, #0]
   18080:	4b5d      	ldr	r3, [pc, #372]	; (181f8 <bench_aesgcm_internal+0x3a0>)
   18082:	681b      	ldr	r3, [r3, #0]
   18084:	429a      	cmp	r2, r3
   18086:	db92      	blt.n	17fae <bench_aesgcm_internal+0x156>
   18088:	23ab      	movs	r3, #171	; 0xab
   1808a:	009b      	lsls	r3, r3, #2
   1808c:	18fb      	adds	r3, r7, r3
   1808e:	681b      	ldr	r3, [r3, #0]
   18090:	2b00      	cmp	r3, #0
   18092:	dc8c      	bgt.n	17fae <bench_aesgcm_internal+0x156>
                        goto exit_aes_gcm;
                    }
                }
            } /* for i */
        } /* for times */
        count += times;
   18094:	23ad      	movs	r3, #173	; 0xad
   18096:	009b      	lsls	r3, r3, #2
   18098:	18fb      	adds	r3, r7, r3
   1809a:	681a      	ldr	r2, [r3, #0]
   1809c:	23ac      	movs	r3, #172	; 0xac
   1809e:	009b      	lsls	r3, r3, #2
   180a0:	18fb      	adds	r3, r7, r3
   180a2:	681b      	ldr	r3, [r3, #0]
   180a4:	18d3      	adds	r3, r2, r3
   180a6:	22ad      	movs	r2, #173	; 0xad
   180a8:	0092      	lsls	r2, r2, #2
   180aa:	18ba      	adds	r2, r7, r2
   180ac:	6013      	str	r3, [r2, #0]
    } while (bench_stats_sym_check(start));
   180ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   180b0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   180b2:	0018      	movs	r0, r3
   180b4:	0021      	movs	r1, r4
   180b6:	f7fe ff9f 	bl	16ff8 <bench_stats_sym_check>
   180ba:	1e03      	subs	r3, r0, #0
   180bc:	d000      	beq.n	180c0 <bench_aesgcm_internal+0x268>
   180be:	e770      	b.n	17fa2 <bench_aesgcm_internal+0x14a>
   180c0:	e000      	b.n	180c4 <bench_aesgcm_internal+0x26c>
                    ret = wc_AesGcmEncrypt(&enc[i], bench_cipher,
                        bench_plain, BENCH_SIZE,
                        iv, ivSz, bench_tag, AES_AUTH_TAG_SZ,
                        bench_additional, aesAuthAddSz);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&enc[i]), 0, &times, &pending)) {
                        goto exit_aes_gcm;
   180c2:	46c0      	nop			; (mov r8, r8)
            } /* for i */
        } /* for times */
        count += times;
    } while (bench_stats_sym_check(start));
exit_aes_gcm:
    bench_stats_sym_finish(encLabel, doAsync, count, bench_size, start, ret);
   180c4:	23ad      	movs	r3, #173	; 0xad
   180c6:	009b      	lsls	r3, r3, #2
   180c8:	18fb      	adds	r3, r7, r3
   180ca:	681d      	ldr	r5, [r3, #0]
   180cc:	4b4d      	ldr	r3, [pc, #308]	; (18204 <bench_aesgcm_internal+0x3ac>)
   180ce:	681b      	ldr	r3, [r3, #0]
   180d0:	001e      	movs	r6, r3
   180d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   180d4:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   180d6:	22ae      	movs	r2, #174	; 0xae
   180d8:	0092      	lsls	r2, r2, #2
   180da:	18ba      	adds	r2, r7, r2
   180dc:	6812      	ldr	r2, [r2, #0]
   180de:	68f9      	ldr	r1, [r7, #12]
   180e0:	20b7      	movs	r0, #183	; 0xb7
   180e2:	0080      	lsls	r0, r0, #2
   180e4:	1838      	adds	r0, r7, r0
   180e6:	6800      	ldr	r0, [r0, #0]
   180e8:	9202      	str	r2, [sp, #8]
   180ea:	9300      	str	r3, [sp, #0]
   180ec:	9401      	str	r4, [sp, #4]
   180ee:	0033      	movs	r3, r6
   180f0:	002a      	movs	r2, r5
   180f2:	f7fe ffa3 	bl	1703c <bench_stats_sym_finish>

#ifdef HAVE_AES_DECRYPT
    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   180f6:	2300      	movs	r3, #0
   180f8:	22af      	movs	r2, #175	; 0xaf
   180fa:	0092      	lsls	r2, r2, #2
   180fc:	18ba      	adds	r2, r7, r2
   180fe:	6013      	str	r3, [r2, #0]
   18100:	e057      	b.n	181b2 <bench_aesgcm_internal+0x35a>
        if ((ret = wc_AesInit(&dec[i], HEAP_HINT,
   18102:	233c      	movs	r3, #60	; 0x3c
   18104:	18fa      	adds	r2, r7, r3
   18106:	23af      	movs	r3, #175	; 0xaf
   18108:	009b      	lsls	r3, r3, #2
   1810a:	18fb      	adds	r3, r7, r3
   1810c:	681b      	ldr	r3, [r3, #0]
   1810e:	219c      	movs	r1, #156	; 0x9c
   18110:	0049      	lsls	r1, r1, #1
   18112:	434b      	muls	r3, r1
   18114:	18d0      	adds	r0, r2, r3
   18116:	68fb      	ldr	r3, [r7, #12]
   18118:	2b00      	cmp	r3, #0
   1811a:	d002      	beq.n	18122 <bench_aesgcm_internal+0x2ca>
   1811c:	4b33      	ldr	r3, [pc, #204]	; (181ec <bench_aesgcm_internal+0x394>)
   1811e:	681b      	ldr	r3, [r3, #0]
   18120:	e001      	b.n	18126 <bench_aesgcm_internal+0x2ce>
   18122:	2302      	movs	r3, #2
   18124:	425b      	negs	r3, r3
   18126:	001a      	movs	r2, r3
   18128:	2100      	movs	r1, #0
   1812a:	f7f1 fe77 	bl	9e1c <wc_AesInit>
   1812e:	0003      	movs	r3, r0
   18130:	22ae      	movs	r2, #174	; 0xae
   18132:	0092      	lsls	r2, r2, #2
   18134:	18ba      	adds	r2, r7, r2
   18136:	6013      	str	r3, [r2, #0]
   18138:	23ae      	movs	r3, #174	; 0xae
   1813a:	009b      	lsls	r3, r3, #2
   1813c:	18fb      	adds	r3, r7, r3
   1813e:	681b      	ldr	r3, [r3, #0]
   18140:	2b00      	cmp	r3, #0
   18142:	d009      	beq.n	18158 <bench_aesgcm_internal+0x300>
                        doAsync ? devId : INVALID_DEVID)) != 0) {
            printf("AesInit failed, ret = %d\n", ret);
   18144:	23ae      	movs	r3, #174	; 0xae
   18146:	009b      	lsls	r3, r3, #2
   18148:	18fb      	adds	r3, r7, r3
   1814a:	681a      	ldr	r2, [r3, #0]
   1814c:	4b28      	ldr	r3, [pc, #160]	; (181f0 <bench_aesgcm_internal+0x398>)
   1814e:	0011      	movs	r1, r2
   18150:	0018      	movs	r0, r3
   18152:	f00e f815 	bl	26180 <iprintf>
            goto exit;
   18156:	e0f8      	b.n	1834a <bench_aesgcm_internal+0x4f2>
        }

        ret = wc_AesGcmSetKey(&dec[i], key, keySz);
   18158:	233c      	movs	r3, #60	; 0x3c
   1815a:	18fa      	adds	r2, r7, r3
   1815c:	23af      	movs	r3, #175	; 0xaf
   1815e:	009b      	lsls	r3, r3, #2
   18160:	18fb      	adds	r3, r7, r3
   18162:	681b      	ldr	r3, [r3, #0]
   18164:	219c      	movs	r1, #156	; 0x9c
   18166:	0049      	lsls	r1, r1, #1
   18168:	434b      	muls	r3, r1
   1816a:	18d3      	adds	r3, r2, r3
   1816c:	687a      	ldr	r2, [r7, #4]
   1816e:	68b9      	ldr	r1, [r7, #8]
   18170:	0018      	movs	r0, r3
   18172:	f7f1 f8e1 	bl	9338 <wc_AesGcmSetKey>
   18176:	0003      	movs	r3, r0
   18178:	22ae      	movs	r2, #174	; 0xae
   1817a:	0092      	lsls	r2, r2, #2
   1817c:	18ba      	adds	r2, r7, r2
   1817e:	6013      	str	r3, [r2, #0]
        if (ret != 0) {
   18180:	23ae      	movs	r3, #174	; 0xae
   18182:	009b      	lsls	r3, r3, #2
   18184:	18fb      	adds	r3, r7, r3
   18186:	681b      	ldr	r3, [r3, #0]
   18188:	2b00      	cmp	r3, #0
   1818a:	d009      	beq.n	181a0 <bench_aesgcm_internal+0x348>
            printf("AesGcmSetKey failed, ret = %d\n", ret);
   1818c:	23ae      	movs	r3, #174	; 0xae
   1818e:	009b      	lsls	r3, r3, #2
   18190:	18fb      	adds	r3, r7, r3
   18192:	681a      	ldr	r2, [r3, #0]
   18194:	4b17      	ldr	r3, [pc, #92]	; (181f4 <bench_aesgcm_internal+0x39c>)
   18196:	0011      	movs	r1, r2
   18198:	0018      	movs	r0, r3
   1819a:	f00d fff1 	bl	26180 <iprintf>
            goto exit;
   1819e:	e0d4      	b.n	1834a <bench_aesgcm_internal+0x4f2>
exit_aes_gcm:
    bench_stats_sym_finish(encLabel, doAsync, count, bench_size, start, ret);

#ifdef HAVE_AES_DECRYPT
    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   181a0:	23af      	movs	r3, #175	; 0xaf
   181a2:	009b      	lsls	r3, r3, #2
   181a4:	18fb      	adds	r3, r7, r3
   181a6:	681b      	ldr	r3, [r3, #0]
   181a8:	3301      	adds	r3, #1
   181aa:	22af      	movs	r2, #175	; 0xaf
   181ac:	0092      	lsls	r2, r2, #2
   181ae:	18ba      	adds	r2, r7, r2
   181b0:	6013      	str	r3, [r2, #0]
   181b2:	23af      	movs	r3, #175	; 0xaf
   181b4:	009b      	lsls	r3, r3, #2
   181b6:	18fb      	adds	r3, r7, r3
   181b8:	681b      	ldr	r3, [r3, #0]
   181ba:	2b00      	cmp	r3, #0
   181bc:	dda1      	ble.n	18102 <bench_aesgcm_internal+0x2aa>
            printf("AesGcmSetKey failed, ret = %d\n", ret);
            goto exit;
        }
    }

    bench_stats_start(&count, &start);
   181be:	2330      	movs	r3, #48	; 0x30
   181c0:	18fa      	adds	r2, r7, r3
   181c2:	23ad      	movs	r3, #173	; 0xad
   181c4:	009b      	lsls	r3, r3, #2
   181c6:	18fb      	adds	r3, r7, r3
   181c8:	0011      	movs	r1, r2
   181ca:	0018      	movs	r0, r3
   181cc:	f7fe ff00 	bl	16fd0 <bench_stats_start>
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
   181d0:	2300      	movs	r3, #0
   181d2:	22ac      	movs	r2, #172	; 0xac
   181d4:	0092      	lsls	r2, r2, #2
   181d6:	18ba      	adds	r2, r7, r2
   181d8:	6013      	str	r3, [r2, #0]
   181da:	e075      	b.n	182c8 <bench_aesgcm_internal+0x470>
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   181dc:	2300      	movs	r3, #0
   181de:	22af      	movs	r2, #175	; 0xaf
   181e0:	0092      	lsls	r2, r2, #2
   181e2:	18ba      	adds	r2, r7, r2
   181e4:	6013      	str	r3, [r2, #0]
   181e6:	e069      	b.n	182bc <bench_aesgcm_internal+0x464>
   181e8:	fffffd24 	.word	0xfffffd24
   181ec:	200000a8 	.word	0x200000a8
   181f0:	0002deb0 	.word	0x0002deb0
   181f4:	0002df48 	.word	0x0002df48
   181f8:	200000b0 	.word	0x200000b0
   181fc:	200003a4 	.word	0x200003a4
   18200:	200003a0 	.word	0x200003a0
   18204:	200000b4 	.word	0x200000b4
   18208:	200000ac 	.word	0x200000ac
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&dec[i]), 0, &times, numBlocks, &pending)) {
   1820c:	4b7c      	ldr	r3, [pc, #496]	; (18400 <bench_aesgcm_internal+0x5a8>)
   1820e:	681b      	ldr	r3, [r3, #0]
   18210:	22ac      	movs	r2, #172	; 0xac
   18212:	0092      	lsls	r2, r2, #2
   18214:	18b9      	adds	r1, r7, r2
   18216:	22ae      	movs	r2, #174	; 0xae
   18218:	0092      	lsls	r2, r2, #2
   1821a:	18b8      	adds	r0, r7, r2
   1821c:	22ab      	movs	r2, #171	; 0xab
   1821e:	0092      	lsls	r2, r2, #2
   18220:	18ba      	adds	r2, r7, r2
   18222:	9201      	str	r2, [sp, #4]
   18224:	9300      	str	r3, [sp, #0]
   18226:	000b      	movs	r3, r1
   18228:	2200      	movs	r2, #0
   1822a:	2100      	movs	r1, #0
   1822c:	f7fe fea6 	bl	16f7c <bench_async_check>
   18230:	1e03      	subs	r3, r0, #0
   18232:	d03a      	beq.n	182aa <bench_aesgcm_internal+0x452>
                    ret = wc_AesGcmDecrypt(&dec[i], bench_plain,
   18234:	233c      	movs	r3, #60	; 0x3c
   18236:	18fa      	adds	r2, r7, r3
   18238:	23af      	movs	r3, #175	; 0xaf
   1823a:	009b      	lsls	r3, r3, #2
   1823c:	18fb      	adds	r3, r7, r3
   1823e:	681b      	ldr	r3, [r3, #0]
   18240:	219c      	movs	r1, #156	; 0x9c
   18242:	0049      	lsls	r1, r1, #1
   18244:	434b      	muls	r3, r1
   18246:	18d0      	adds	r0, r2, r3
   18248:	4b6e      	ldr	r3, [pc, #440]	; (18404 <bench_aesgcm_internal+0x5ac>)
   1824a:	6819      	ldr	r1, [r3, #0]
   1824c:	4b6e      	ldr	r3, [pc, #440]	; (18408 <bench_aesgcm_internal+0x5b0>)
   1824e:	681a      	ldr	r2, [r3, #0]
   18250:	4b6e      	ldr	r3, [pc, #440]	; (1840c <bench_aesgcm_internal+0x5b4>)
   18252:	681c      	ldr	r4, [r3, #0]
   18254:	4b6e      	ldr	r3, [pc, #440]	; (18410 <bench_aesgcm_internal+0x5b8>)
   18256:	681b      	ldr	r3, [r3, #0]
   18258:	9305      	str	r3, [sp, #20]
   1825a:	2320      	movs	r3, #32
   1825c:	18fb      	adds	r3, r7, r3
   1825e:	9304      	str	r3, [sp, #16]
   18260:	2310      	movs	r3, #16
   18262:	9303      	str	r3, [sp, #12]
   18264:	2310      	movs	r3, #16
   18266:	18fb      	adds	r3, r7, r3
   18268:	9302      	str	r3, [sp, #8]
   1826a:	23b6      	movs	r3, #182	; 0xb6
   1826c:	009b      	lsls	r3, r3, #2
   1826e:	18fb      	adds	r3, r7, r3
   18270:	681b      	ldr	r3, [r3, #0]
   18272:	9301      	str	r3, [sp, #4]
   18274:	683b      	ldr	r3, [r7, #0]
   18276:	9300      	str	r3, [sp, #0]
   18278:	0023      	movs	r3, r4
   1827a:	f7f1 fb4f 	bl	991c <wc_AesGcmDecrypt>
   1827e:	0003      	movs	r3, r0
   18280:	22ae      	movs	r2, #174	; 0xae
   18282:	0092      	lsls	r2, r2, #2
   18284:	18ba      	adds	r2, r7, r2
   18286:	6013      	str	r3, [r2, #0]
                        bench_cipher, BENCH_SIZE,
                        iv, ivSz, bench_tag, AES_AUTH_TAG_SZ,
                        bench_additional, aesAuthAddSz);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&dec[i]), 0, &times, &pending)) {
   18288:	23ac      	movs	r3, #172	; 0xac
   1828a:	009b      	lsls	r3, r3, #2
   1828c:	18fa      	adds	r2, r7, r3
   1828e:	23ae      	movs	r3, #174	; 0xae
   18290:	009b      	lsls	r3, r3, #2
   18292:	18f8      	adds	r0, r7, r3
   18294:	23ab      	movs	r3, #171	; 0xab
   18296:	009b      	lsls	r3, r3, #2
   18298:	18fb      	adds	r3, r7, r3
   1829a:	9300      	str	r3, [sp, #0]
   1829c:	0013      	movs	r3, r2
   1829e:	2200      	movs	r2, #0
   182a0:	2100      	movs	r1, #0
   182a2:	f7fe fe77 	bl	16f94 <bench_async_handle>
   182a6:	1e03      	subs	r3, r0, #0
   182a8:	d035      	beq.n	18316 <bench_aesgcm_internal+0x4be>
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   182aa:	23af      	movs	r3, #175	; 0xaf
   182ac:	009b      	lsls	r3, r3, #2
   182ae:	18fb      	adds	r3, r7, r3
   182b0:	681b      	ldr	r3, [r3, #0]
   182b2:	3301      	adds	r3, #1
   182b4:	22af      	movs	r2, #175	; 0xaf
   182b6:	0092      	lsls	r2, r2, #2
   182b8:	18ba      	adds	r2, r7, r2
   182ba:	6013      	str	r3, [r2, #0]
   182bc:	23af      	movs	r3, #175	; 0xaf
   182be:	009b      	lsls	r3, r3, #2
   182c0:	18fb      	adds	r3, r7, r3
   182c2:	681b      	ldr	r3, [r3, #0]
   182c4:	2b00      	cmp	r3, #0
   182c6:	dda1      	ble.n	1820c <bench_aesgcm_internal+0x3b4>
        }
    }

    bench_stats_start(&count, &start);
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
   182c8:	23ac      	movs	r3, #172	; 0xac
   182ca:	009b      	lsls	r3, r3, #2
   182cc:	18fb      	adds	r3, r7, r3
   182ce:	681a      	ldr	r2, [r3, #0]
   182d0:	4b4b      	ldr	r3, [pc, #300]	; (18400 <bench_aesgcm_internal+0x5a8>)
   182d2:	681b      	ldr	r3, [r3, #0]
   182d4:	429a      	cmp	r2, r3
   182d6:	da00      	bge.n	182da <bench_aesgcm_internal+0x482>
   182d8:	e780      	b.n	181dc <bench_aesgcm_internal+0x384>
   182da:	23ab      	movs	r3, #171	; 0xab
   182dc:	009b      	lsls	r3, r3, #2
   182de:	18fb      	adds	r3, r7, r3
   182e0:	681b      	ldr	r3, [r3, #0]
   182e2:	2b00      	cmp	r3, #0
   182e4:	dd00      	ble.n	182e8 <bench_aesgcm_internal+0x490>
   182e6:	e779      	b.n	181dc <bench_aesgcm_internal+0x384>
                        goto exit_aes_gcm_dec;
                    }
                }
            } /* for i */
        } /* for times */
        count += times;
   182e8:	23ad      	movs	r3, #173	; 0xad
   182ea:	009b      	lsls	r3, r3, #2
   182ec:	18fb      	adds	r3, r7, r3
   182ee:	681a      	ldr	r2, [r3, #0]
   182f0:	23ac      	movs	r3, #172	; 0xac
   182f2:	009b      	lsls	r3, r3, #2
   182f4:	18fb      	adds	r3, r7, r3
   182f6:	681b      	ldr	r3, [r3, #0]
   182f8:	18d3      	adds	r3, r2, r3
   182fa:	22ad      	movs	r2, #173	; 0xad
   182fc:	0092      	lsls	r2, r2, #2
   182fe:	18ba      	adds	r2, r7, r2
   18300:	6013      	str	r3, [r2, #0]
    } while (bench_stats_sym_check(start));
   18302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18304:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   18306:	0018      	movs	r0, r3
   18308:	0021      	movs	r1, r4
   1830a:	f7fe fe75 	bl	16ff8 <bench_stats_sym_check>
   1830e:	1e03      	subs	r3, r0, #0
   18310:	d000      	beq.n	18314 <bench_aesgcm_internal+0x4bc>
   18312:	e75d      	b.n	181d0 <bench_aesgcm_internal+0x378>
   18314:	e000      	b.n	18318 <bench_aesgcm_internal+0x4c0>
                    ret = wc_AesGcmDecrypt(&dec[i], bench_plain,
                        bench_cipher, BENCH_SIZE,
                        iv, ivSz, bench_tag, AES_AUTH_TAG_SZ,
                        bench_additional, aesAuthAddSz);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&dec[i]), 0, &times, &pending)) {
                        goto exit_aes_gcm_dec;
   18316:	46c0      	nop			; (mov r8, r8)
            } /* for i */
        } /* for times */
        count += times;
    } while (bench_stats_sym_check(start));
exit_aes_gcm_dec:
    bench_stats_sym_finish(decLabel, doAsync, count, bench_size, start, ret);
   18318:	23ad      	movs	r3, #173	; 0xad
   1831a:	009b      	lsls	r3, r3, #2
   1831c:	18fb      	adds	r3, r7, r3
   1831e:	681d      	ldr	r5, [r3, #0]
   18320:	4b3a      	ldr	r3, [pc, #232]	; (1840c <bench_aesgcm_internal+0x5b4>)
   18322:	681b      	ldr	r3, [r3, #0]
   18324:	001e      	movs	r6, r3
   18326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18328:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1832a:	22ae      	movs	r2, #174	; 0xae
   1832c:	0092      	lsls	r2, r2, #2
   1832e:	18ba      	adds	r2, r7, r2
   18330:	6812      	ldr	r2, [r2, #0]
   18332:	68f9      	ldr	r1, [r7, #12]
   18334:	20b8      	movs	r0, #184	; 0xb8
   18336:	0080      	lsls	r0, r0, #2
   18338:	1838      	adds	r0, r7, r0
   1833a:	6800      	ldr	r0, [r0, #0]
   1833c:	9202      	str	r2, [sp, #8]
   1833e:	9300      	str	r3, [sp, #0]
   18340:	9401      	str	r4, [sp, #4]
   18342:	0033      	movs	r3, r6
   18344:	002a      	movs	r2, r5
   18346:	f7fe fe79 	bl	1703c <bench_stats_sym_finish>

    (void)decLabel;

exit:

    if (ret < 0) {
   1834a:	23ae      	movs	r3, #174	; 0xae
   1834c:	009b      	lsls	r3, r3, #2
   1834e:	18fb      	adds	r3, r7, r3
   18350:	681b      	ldr	r3, [r3, #0]
   18352:	2b00      	cmp	r3, #0
   18354:	da08      	bge.n	18368 <bench_aesgcm_internal+0x510>
        printf("bench_aesgcm failed: %d\n", ret);
   18356:	23ae      	movs	r3, #174	; 0xae
   18358:	009b      	lsls	r3, r3, #2
   1835a:	18fb      	adds	r3, r7, r3
   1835c:	681a      	ldr	r2, [r3, #0]
   1835e:	4b2d      	ldr	r3, [pc, #180]	; (18414 <bench_aesgcm_internal+0x5bc>)
   18360:	0011      	movs	r1, r2
   18362:	0018      	movs	r0, r3
   18364:	f00d ff0c 	bl	26180 <iprintf>
    }
#ifdef HAVE_AES_DECRYPT
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18368:	2300      	movs	r3, #0
   1836a:	22af      	movs	r2, #175	; 0xaf
   1836c:	0092      	lsls	r2, r2, #2
   1836e:	18ba      	adds	r2, r7, r2
   18370:	6013      	str	r3, [r2, #0]
   18372:	e015      	b.n	183a0 <bench_aesgcm_internal+0x548>
        wc_AesFree(&dec[i]);
   18374:	233c      	movs	r3, #60	; 0x3c
   18376:	18fa      	adds	r2, r7, r3
   18378:	23af      	movs	r3, #175	; 0xaf
   1837a:	009b      	lsls	r3, r3, #2
   1837c:	18fb      	adds	r3, r7, r3
   1837e:	681b      	ldr	r3, [r3, #0]
   18380:	219c      	movs	r1, #156	; 0x9c
   18382:	0049      	lsls	r1, r1, #1
   18384:	434b      	muls	r3, r1
   18386:	18d3      	adds	r3, r2, r3
   18388:	0018      	movs	r0, r3
   1838a:	f7f1 fd5f 	bl	9e4c <wc_AesFree>

    if (ret < 0) {
        printf("bench_aesgcm failed: %d\n", ret);
    }
#ifdef HAVE_AES_DECRYPT
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   1838e:	23af      	movs	r3, #175	; 0xaf
   18390:	009b      	lsls	r3, r3, #2
   18392:	18fb      	adds	r3, r7, r3
   18394:	681b      	ldr	r3, [r3, #0]
   18396:	3301      	adds	r3, #1
   18398:	22af      	movs	r2, #175	; 0xaf
   1839a:	0092      	lsls	r2, r2, #2
   1839c:	18ba      	adds	r2, r7, r2
   1839e:	6013      	str	r3, [r2, #0]
   183a0:	23af      	movs	r3, #175	; 0xaf
   183a2:	009b      	lsls	r3, r3, #2
   183a4:	18fb      	adds	r3, r7, r3
   183a6:	681b      	ldr	r3, [r3, #0]
   183a8:	2b00      	cmp	r3, #0
   183aa:	dde3      	ble.n	18374 <bench_aesgcm_internal+0x51c>
        wc_AesFree(&dec[i]);
    }
#endif
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   183ac:	2300      	movs	r3, #0
   183ae:	22af      	movs	r2, #175	; 0xaf
   183b0:	0092      	lsls	r2, r2, #2
   183b2:	18ba      	adds	r2, r7, r2
   183b4:	6013      	str	r3, [r2, #0]
   183b6:	e016      	b.n	183e6 <bench_aesgcm_internal+0x58e>
        wc_AesFree(&enc[i]);
   183b8:	23ba      	movs	r3, #186	; 0xba
   183ba:	005b      	lsls	r3, r3, #1
   183bc:	18fa      	adds	r2, r7, r3
   183be:	23af      	movs	r3, #175	; 0xaf
   183c0:	009b      	lsls	r3, r3, #2
   183c2:	18fb      	adds	r3, r7, r3
   183c4:	681b      	ldr	r3, [r3, #0]
   183c6:	219c      	movs	r1, #156	; 0x9c
   183c8:	0049      	lsls	r1, r1, #1
   183ca:	434b      	muls	r3, r1
   183cc:	18d3      	adds	r3, r2, r3
   183ce:	0018      	movs	r0, r3
   183d0:	f7f1 fd3c 	bl	9e4c <wc_AesFree>
#ifdef HAVE_AES_DECRYPT
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
        wc_AesFree(&dec[i]);
    }
#endif
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   183d4:	23af      	movs	r3, #175	; 0xaf
   183d6:	009b      	lsls	r3, r3, #2
   183d8:	18fb      	adds	r3, r7, r3
   183da:	681b      	ldr	r3, [r3, #0]
   183dc:	3301      	adds	r3, #1
   183de:	22af      	movs	r2, #175	; 0xaf
   183e0:	0092      	lsls	r2, r2, #2
   183e2:	18ba      	adds	r2, r7, r2
   183e4:	6013      	str	r3, [r2, #0]
   183e6:	23af      	movs	r3, #175	; 0xaf
   183e8:	009b      	lsls	r3, r3, #2
   183ea:	18fb      	adds	r3, r7, r3
   183ec:	681b      	ldr	r3, [r3, #0]
   183ee:	2b00      	cmp	r3, #0
   183f0:	dde2      	ble.n	183b8 <bench_aesgcm_internal+0x560>
        wc_AesFree(&enc[i]);
    }

    FREE_VAR(bench_additional, HEAP_HINT);
    FREE_VAR(bench_tag, HEAP_HINT);
}
   183f2:	46c0      	nop			; (mov r8, r8)
   183f4:	46bd      	mov	sp, r7
   183f6:	23b1      	movs	r3, #177	; 0xb1
   183f8:	009b      	lsls	r3, r3, #2
   183fa:	449d      	add	sp, r3
   183fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   183fe:	46c0      	nop			; (mov r8, r8)
   18400:	200000b0 	.word	0x200000b0
   18404:	200003a0 	.word	0x200003a0
   18408:	200003a4 	.word	0x200003a4
   1840c:	200000b4 	.word	0x200000b4
   18410:	200000ac 	.word	0x200000ac
   18414:	0002df68 	.word	0x0002df68

00018418 <bench_aesgcm>:

void bench_aesgcm(int doAsync)
{
   18418:	b580      	push	{r7, lr}
   1841a:	b086      	sub	sp, #24
   1841c:	af04      	add	r7, sp, #16
   1841e:	6078      	str	r0, [r7, #4]
#if defined(WOLFSSL_AES_128) && !defined(WOLFSSL_AFALG_XILINX_AES)
    bench_aesgcm_internal(doAsync, bench_key, 16, bench_iv, 12,
   18420:	4b18      	ldr	r3, [pc, #96]	; (18484 <bench_aesgcm+0x6c>)
   18422:	6819      	ldr	r1, [r3, #0]
   18424:	4b18      	ldr	r3, [pc, #96]	; (18488 <bench_aesgcm+0x70>)
   18426:	681a      	ldr	r2, [r3, #0]
   18428:	6878      	ldr	r0, [r7, #4]
   1842a:	4b18      	ldr	r3, [pc, #96]	; (1848c <bench_aesgcm+0x74>)
   1842c:	9302      	str	r3, [sp, #8]
   1842e:	4b18      	ldr	r3, [pc, #96]	; (18490 <bench_aesgcm+0x78>)
   18430:	9301      	str	r3, [sp, #4]
   18432:	230c      	movs	r3, #12
   18434:	9300      	str	r3, [sp, #0]
   18436:	0013      	movs	r3, r2
   18438:	2210      	movs	r2, #16
   1843a:	f7ff fd0d 	bl	17e58 <bench_aesgcm_internal>
                          "AES-128-GCM-enc", "AES-128-GCM-dec");
#endif
#if defined(WOLFSSL_AES_192) && !defined(WOLFSSL_AFALG_XILINX_AES)
    bench_aesgcm_internal(doAsync, bench_key, 24, bench_iv, 12,
   1843e:	4b11      	ldr	r3, [pc, #68]	; (18484 <bench_aesgcm+0x6c>)
   18440:	6819      	ldr	r1, [r3, #0]
   18442:	4b11      	ldr	r3, [pc, #68]	; (18488 <bench_aesgcm+0x70>)
   18444:	681a      	ldr	r2, [r3, #0]
   18446:	6878      	ldr	r0, [r7, #4]
   18448:	4b12      	ldr	r3, [pc, #72]	; (18494 <bench_aesgcm+0x7c>)
   1844a:	9302      	str	r3, [sp, #8]
   1844c:	4b12      	ldr	r3, [pc, #72]	; (18498 <bench_aesgcm+0x80>)
   1844e:	9301      	str	r3, [sp, #4]
   18450:	230c      	movs	r3, #12
   18452:	9300      	str	r3, [sp, #0]
   18454:	0013      	movs	r3, r2
   18456:	2218      	movs	r2, #24
   18458:	f7ff fcfe 	bl	17e58 <bench_aesgcm_internal>
                          "AES-192-GCM-enc", "AES-192-GCM-dec");
#endif
#ifdef WOLFSSL_AES_256
    bench_aesgcm_internal(doAsync, bench_key, 32, bench_iv, 12,
   1845c:	4b09      	ldr	r3, [pc, #36]	; (18484 <bench_aesgcm+0x6c>)
   1845e:	6819      	ldr	r1, [r3, #0]
   18460:	4b09      	ldr	r3, [pc, #36]	; (18488 <bench_aesgcm+0x70>)
   18462:	681a      	ldr	r2, [r3, #0]
   18464:	6878      	ldr	r0, [r7, #4]
   18466:	4b0d      	ldr	r3, [pc, #52]	; (1849c <bench_aesgcm+0x84>)
   18468:	9302      	str	r3, [sp, #8]
   1846a:	4b0d      	ldr	r3, [pc, #52]	; (184a0 <bench_aesgcm+0x88>)
   1846c:	9301      	str	r3, [sp, #4]
   1846e:	230c      	movs	r3, #12
   18470:	9300      	str	r3, [sp, #0]
   18472:	0013      	movs	r3, r2
   18474:	2220      	movs	r2, #32
   18476:	f7ff fcef 	bl	17e58 <bench_aesgcm_internal>
                          "AES-256-GCM-enc", "AES-256-GCM-dec");
#endif
}
   1847a:	46c0      	nop			; (mov r8, r8)
   1847c:	46bd      	mov	sp, r7
   1847e:	b002      	add	sp, #8
   18480:	bd80      	pop	{r7, pc}
   18482:	46c0      	nop			; (mov r8, r8)
   18484:	200003a8 	.word	0x200003a8
   18488:	200003ac 	.word	0x200003ac
   1848c:	0002df84 	.word	0x0002df84
   18490:	0002df94 	.word	0x0002df94
   18494:	0002dfa4 	.word	0x0002dfa4
   18498:	0002dfb4 	.word	0x0002dfb4
   1849c:	0002dfc4 	.word	0x0002dfc4
   184a0:	0002dfd4 	.word	0x0002dfd4

000184a4 <bench_sha>:
#endif /* !NO_MD5 */


#ifndef NO_SHA
void bench_sha(int doAsync)
{
   184a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   184a6:	b0ad      	sub	sp, #180	; 0xb4
   184a8:	af04      	add	r7, sp, #16
   184aa:	6078      	str	r0, [r7, #4]
    wc_Sha hash[BENCH_MAX_PENDING];
    double start;
    int    ret = 0, i, count = 0, times, pending = 0;
   184ac:	2300      	movs	r3, #0
   184ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   184b0:	2300      	movs	r3, #0
   184b2:	62bb      	str	r3, [r7, #40]	; 0x28
   184b4:	2300      	movs	r3, #0
   184b6:	623b      	str	r3, [r7, #32]
    DECLARE_ARRAY(digest, byte, BENCH_MAX_PENDING, WC_SHA_DIGEST_SIZE, HEAP_HINT);

    /* clear for done cleanup */
    XMEMSET(hash, 0, sizeof(hash));
   184b8:	2338      	movs	r3, #56	; 0x38
   184ba:	18fb      	adds	r3, r7, r3
   184bc:	2264      	movs	r2, #100	; 0x64
   184be:	2100      	movs	r1, #0
   184c0:	0018      	movs	r0, r3
   184c2:	f00d f932 	bl	2572a <memset>

    if (digest_stream) {
   184c6:	4bb0      	ldr	r3, [pc, #704]	; (18788 <bench_sha+0x2e4>)
   184c8:	681b      	ldr	r3, [r3, #0]
   184ca:	2b00      	cmp	r3, #0
   184cc:	d100      	bne.n	184d0 <bench_sha+0x2c>
   184ce:	e0df      	b.n	18690 <bench_sha+0x1ec>
        /* init keys */
        for (i = 0; i < BENCH_MAX_PENDING; i++) {
   184d0:	2300      	movs	r3, #0
   184d2:	229c      	movs	r2, #156	; 0x9c
   184d4:	18ba      	adds	r2, r7, r2
   184d6:	6013      	str	r3, [r2, #0]
   184d8:	e026      	b.n	18528 <bench_sha+0x84>
            ret = wc_InitSha_ex(&hash[i], HEAP_HINT,
   184da:	2338      	movs	r3, #56	; 0x38
   184dc:	18fa      	adds	r2, r7, r3
   184de:	239c      	movs	r3, #156	; 0x9c
   184e0:	18fb      	adds	r3, r7, r3
   184e2:	681b      	ldr	r3, [r3, #0]
   184e4:	2164      	movs	r1, #100	; 0x64
   184e6:	434b      	muls	r3, r1
   184e8:	18d0      	adds	r0, r2, r3
   184ea:	687b      	ldr	r3, [r7, #4]
   184ec:	2b00      	cmp	r3, #0
   184ee:	d002      	beq.n	184f6 <bench_sha+0x52>
   184f0:	4ba6      	ldr	r3, [pc, #664]	; (1878c <bench_sha+0x2e8>)
   184f2:	681b      	ldr	r3, [r3, #0]
   184f4:	e001      	b.n	184fa <bench_sha+0x56>
   184f6:	2302      	movs	r3, #2
   184f8:	425b      	negs	r3, r3
   184fa:	001a      	movs	r2, r3
   184fc:	2100      	movs	r1, #0
   184fe:	f7f4 f88b 	bl	c618 <wc_InitSha_ex>
   18502:	0003      	movs	r3, r0
   18504:	62fb      	str	r3, [r7, #44]	; 0x2c
                doAsync ? devId : INVALID_DEVID);
            if (ret != 0) {
   18506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18508:	2b00      	cmp	r3, #0
   1850a:	d006      	beq.n	1851a <bench_sha+0x76>
                printf("InitSha failed, ret = %d\n", ret);
   1850c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1850e:	4ba0      	ldr	r3, [pc, #640]	; (18790 <bench_sha+0x2ec>)
   18510:	0011      	movs	r1, r2
   18512:	0018      	movs	r0, r3
   18514:	f00d fe34 	bl	26180 <iprintf>
                goto exit;
   18518:	e115      	b.n	18746 <bench_sha+0x2a2>
    /* clear for done cleanup */
    XMEMSET(hash, 0, sizeof(hash));

    if (digest_stream) {
        /* init keys */
        for (i = 0; i < BENCH_MAX_PENDING; i++) {
   1851a:	239c      	movs	r3, #156	; 0x9c
   1851c:	18fb      	adds	r3, r7, r3
   1851e:	681b      	ldr	r3, [r3, #0]
   18520:	3301      	adds	r3, #1
   18522:	229c      	movs	r2, #156	; 0x9c
   18524:	18ba      	adds	r2, r7, r2
   18526:	6013      	str	r3, [r2, #0]
   18528:	239c      	movs	r3, #156	; 0x9c
   1852a:	18fb      	adds	r3, r7, r3
   1852c:	681b      	ldr	r3, [r3, #0]
   1852e:	2b00      	cmp	r3, #0
   18530:	ddd3      	ble.n	184da <bench_sha+0x36>
        #ifdef WOLFSSL_PIC32MZ_HASH
            wc_ShaSizeSet(&hash[i], numBlocks * BENCH_SIZE);
        #endif
        }

        bench_stats_start(&count, &start);
   18532:	2330      	movs	r3, #48	; 0x30
   18534:	18fa      	adds	r2, r7, r3
   18536:	2328      	movs	r3, #40	; 0x28
   18538:	18fb      	adds	r3, r7, r3
   1853a:	0011      	movs	r1, r2
   1853c:	0018      	movs	r0, r3
   1853e:	f7fe fd47 	bl	16fd0 <bench_stats_start>
        do {
            for (times = 0; times < numBlocks || pending > 0; ) {
   18542:	2300      	movs	r3, #0
   18544:	627b      	str	r3, [r7, #36]	; 0x24
   18546:	e041      	b.n	185cc <bench_sha+0x128>
                bench_async_poll(&pending);

                /* while free pending slots in queue, submit ops */
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18548:	2300      	movs	r3, #0
   1854a:	229c      	movs	r2, #156	; 0x9c
   1854c:	18ba      	adds	r2, r7, r2
   1854e:	6013      	str	r3, [r2, #0]
   18550:	e037      	b.n	185c2 <bench_sha+0x11e>
                    if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, numBlocks, &pending)) {
   18552:	4b90      	ldr	r3, [pc, #576]	; (18794 <bench_sha+0x2f0>)
   18554:	681b      	ldr	r3, [r3, #0]
   18556:	2224      	movs	r2, #36	; 0x24
   18558:	18b9      	adds	r1, r7, r2
   1855a:	222c      	movs	r2, #44	; 0x2c
   1855c:	18b8      	adds	r0, r7, r2
   1855e:	2220      	movs	r2, #32
   18560:	18ba      	adds	r2, r7, r2
   18562:	9201      	str	r2, [sp, #4]
   18564:	9300      	str	r3, [sp, #0]
   18566:	000b      	movs	r3, r1
   18568:	2200      	movs	r2, #0
   1856a:	2100      	movs	r1, #0
   1856c:	f7fe fd06 	bl	16f7c <bench_async_check>
   18570:	1e03      	subs	r3, r0, #0
   18572:	d01f      	beq.n	185b4 <bench_sha+0x110>
                        ret = wc_ShaUpdate(&hash[i], bench_plain,
   18574:	2338      	movs	r3, #56	; 0x38
   18576:	18fa      	adds	r2, r7, r3
   18578:	239c      	movs	r3, #156	; 0x9c
   1857a:	18fb      	adds	r3, r7, r3
   1857c:	681b      	ldr	r3, [r3, #0]
   1857e:	2164      	movs	r1, #100	; 0x64
   18580:	434b      	muls	r3, r1
   18582:	18d0      	adds	r0, r2, r3
   18584:	4b84      	ldr	r3, [pc, #528]	; (18798 <bench_sha+0x2f4>)
   18586:	6819      	ldr	r1, [r3, #0]
   18588:	4b84      	ldr	r3, [pc, #528]	; (1879c <bench_sha+0x2f8>)
   1858a:	681b      	ldr	r3, [r3, #0]
   1858c:	001a      	movs	r2, r3
   1858e:	f7f4 f865 	bl	c65c <wc_ShaUpdate>
   18592:	0003      	movs	r3, r0
   18594:	62fb      	str	r3, [r7, #44]	; 0x2c
                            BENCH_SIZE);
                        if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, &pending)) {
   18596:	2324      	movs	r3, #36	; 0x24
   18598:	18fa      	adds	r2, r7, r3
   1859a:	232c      	movs	r3, #44	; 0x2c
   1859c:	18f8      	adds	r0, r7, r3
   1859e:	2320      	movs	r3, #32
   185a0:	18fb      	adds	r3, r7, r3
   185a2:	9300      	str	r3, [sp, #0]
   185a4:	0013      	movs	r3, r2
   185a6:	2200      	movs	r2, #0
   185a8:	2100      	movs	r1, #0
   185aa:	f7fe fcf3 	bl	16f94 <bench_async_handle>
   185ae:	1e03      	subs	r3, r0, #0
   185b0:	d100      	bne.n	185b4 <bench_sha+0x110>
   185b2:	e0b3      	b.n	1871c <bench_sha+0x278>
        do {
            for (times = 0; times < numBlocks || pending > 0; ) {
                bench_async_poll(&pending);

                /* while free pending slots in queue, submit ops */
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
   185b4:	239c      	movs	r3, #156	; 0x9c
   185b6:	18fb      	adds	r3, r7, r3
   185b8:	681b      	ldr	r3, [r3, #0]
   185ba:	3301      	adds	r3, #1
   185bc:	229c      	movs	r2, #156	; 0x9c
   185be:	18ba      	adds	r2, r7, r2
   185c0:	6013      	str	r3, [r2, #0]
   185c2:	239c      	movs	r3, #156	; 0x9c
   185c4:	18fb      	adds	r3, r7, r3
   185c6:	681b      	ldr	r3, [r3, #0]
   185c8:	2b00      	cmp	r3, #0
   185ca:	ddc2      	ble.n	18552 <bench_sha+0xae>
        #endif
        }

        bench_stats_start(&count, &start);
        do {
            for (times = 0; times < numBlocks || pending > 0; ) {
   185cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   185ce:	4b71      	ldr	r3, [pc, #452]	; (18794 <bench_sha+0x2f0>)
   185d0:	681b      	ldr	r3, [r3, #0]
   185d2:	429a      	cmp	r2, r3
   185d4:	dbb8      	blt.n	18548 <bench_sha+0xa4>
   185d6:	6a3b      	ldr	r3, [r7, #32]
   185d8:	2b00      	cmp	r3, #0
   185da:	dcb5      	bgt.n	18548 <bench_sha+0xa4>
                            goto exit_sha;
                        }
                    }
                } /* for i */
            } /* for times */
            count += times;
   185dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   185de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   185e0:	18d3      	adds	r3, r2, r3
   185e2:	62bb      	str	r3, [r7, #40]	; 0x28

            times = 0;
   185e4:	2300      	movs	r3, #0
   185e6:	627b      	str	r3, [r7, #36]	; 0x24
            do {
                bench_async_poll(&pending);

                for (i = 0; i < BENCH_MAX_PENDING; i++) {
   185e8:	2300      	movs	r3, #0
   185ea:	229c      	movs	r2, #156	; 0x9c
   185ec:	18ba      	adds	r2, r7, r2
   185ee:	6013      	str	r3, [r2, #0]
   185f0:	e03c      	b.n	1866c <bench_sha+0x1c8>
                    if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, numBlocks, &pending)) {
   185f2:	4b68      	ldr	r3, [pc, #416]	; (18794 <bench_sha+0x2f0>)
   185f4:	681b      	ldr	r3, [r3, #0]
   185f6:	2224      	movs	r2, #36	; 0x24
   185f8:	18b9      	adds	r1, r7, r2
   185fa:	222c      	movs	r2, #44	; 0x2c
   185fc:	18b8      	adds	r0, r7, r2
   185fe:	2220      	movs	r2, #32
   18600:	18ba      	adds	r2, r7, r2
   18602:	9201      	str	r2, [sp, #4]
   18604:	9300      	str	r3, [sp, #0]
   18606:	000b      	movs	r3, r1
   18608:	2200      	movs	r2, #0
   1860a:	2100      	movs	r1, #0
   1860c:	f7fe fcb6 	bl	16f7c <bench_async_check>
   18610:	1e03      	subs	r3, r0, #0
   18612:	d024      	beq.n	1865e <bench_sha+0x1ba>
                        ret = wc_ShaFinal(&hash[i], digest[i]);
   18614:	2338      	movs	r3, #56	; 0x38
   18616:	18fa      	adds	r2, r7, r3
   18618:	239c      	movs	r3, #156	; 0x9c
   1861a:	18fb      	adds	r3, r7, r3
   1861c:	681b      	ldr	r3, [r3, #0]
   1861e:	2164      	movs	r1, #100	; 0x64
   18620:	434b      	muls	r3, r1
   18622:	18d0      	adds	r0, r2, r3
   18624:	230c      	movs	r3, #12
   18626:	18f9      	adds	r1, r7, r3
   18628:	239c      	movs	r3, #156	; 0x9c
   1862a:	18fb      	adds	r3, r7, r3
   1862c:	681a      	ldr	r2, [r3, #0]
   1862e:	0013      	movs	r3, r2
   18630:	009b      	lsls	r3, r3, #2
   18632:	189b      	adds	r3, r3, r2
   18634:	009b      	lsls	r3, r3, #2
   18636:	18cb      	adds	r3, r1, r3
   18638:	0019      	movs	r1, r3
   1863a:	f7f4 f871 	bl	c720 <wc_ShaFinal>
   1863e:	0003      	movs	r3, r0
   18640:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, &pending)) {
   18642:	2324      	movs	r3, #36	; 0x24
   18644:	18fa      	adds	r2, r7, r3
   18646:	232c      	movs	r3, #44	; 0x2c
   18648:	18f8      	adds	r0, r7, r3
   1864a:	2320      	movs	r3, #32
   1864c:	18fb      	adds	r3, r7, r3
   1864e:	9300      	str	r3, [sp, #0]
   18650:	0013      	movs	r3, r2
   18652:	2200      	movs	r2, #0
   18654:	2100      	movs	r1, #0
   18656:	f7fe fc9d 	bl	16f94 <bench_async_handle>
   1865a:	1e03      	subs	r3, r0, #0
   1865c:	d060      	beq.n	18720 <bench_sha+0x27c>

            times = 0;
            do {
                bench_async_poll(&pending);

                for (i = 0; i < BENCH_MAX_PENDING; i++) {
   1865e:	239c      	movs	r3, #156	; 0x9c
   18660:	18fb      	adds	r3, r7, r3
   18662:	681b      	ldr	r3, [r3, #0]
   18664:	3301      	adds	r3, #1
   18666:	229c      	movs	r2, #156	; 0x9c
   18668:	18ba      	adds	r2, r7, r2
   1866a:	6013      	str	r3, [r2, #0]
   1866c:	239c      	movs	r3, #156	; 0x9c
   1866e:	18fb      	adds	r3, r7, r3
   18670:	681b      	ldr	r3, [r3, #0]
   18672:	2b00      	cmp	r3, #0
   18674:	ddbd      	ble.n	185f2 <bench_sha+0x14e>
                        if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, &pending)) {
                            goto exit_sha;
                        }
                    }
                } /* for i */
            } while (pending > 0);
   18676:	6a3b      	ldr	r3, [r7, #32]
   18678:	2b00      	cmp	r3, #0
   1867a:	dcb5      	bgt.n	185e8 <bench_sha+0x144>
        } while (bench_stats_sym_check(start));
   1867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1867e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   18680:	0018      	movs	r0, r3
   18682:	0021      	movs	r1, r4
   18684:	f7fe fcb8 	bl	16ff8 <bench_stats_sym_check>
   18688:	1e03      	subs	r3, r0, #0
   1868a:	d000      	beq.n	1868e <bench_sha+0x1ea>
   1868c:	e759      	b.n	18542 <bench_sha+0x9e>
   1868e:	e04a      	b.n	18726 <bench_sha+0x282>
    }
    else {
        bench_stats_start(&count, &start);
   18690:	2330      	movs	r3, #48	; 0x30
   18692:	18fa      	adds	r2, r7, r3
   18694:	2328      	movs	r3, #40	; 0x28
   18696:	18fb      	adds	r3, r7, r3
   18698:	0011      	movs	r1, r2
   1869a:	0018      	movs	r0, r3
   1869c:	f7fe fc98 	bl	16fd0 <bench_stats_start>
        do {
            for (times = 0; times < numBlocks; times++) {
   186a0:	2300      	movs	r3, #0
   186a2:	627b      	str	r3, [r7, #36]	; 0x24
   186a4:	e028      	b.n	186f8 <bench_sha+0x254>
                ret = wc_InitSha_ex(hash, HEAP_HINT, INVALID_DEVID);
   186a6:	2302      	movs	r3, #2
   186a8:	425a      	negs	r2, r3
   186aa:	2338      	movs	r3, #56	; 0x38
   186ac:	18fb      	adds	r3, r7, r3
   186ae:	2100      	movs	r1, #0
   186b0:	0018      	movs	r0, r3
   186b2:	f7f3 ffb1 	bl	c618 <wc_InitSha_ex>
   186b6:	0003      	movs	r3, r0
   186b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                ret |= wc_ShaUpdate(hash, bench_plain, BENCH_SIZE);
   186ba:	4b37      	ldr	r3, [pc, #220]	; (18798 <bench_sha+0x2f4>)
   186bc:	6819      	ldr	r1, [r3, #0]
   186be:	4b37      	ldr	r3, [pc, #220]	; (1879c <bench_sha+0x2f8>)
   186c0:	681a      	ldr	r2, [r3, #0]
   186c2:	2338      	movs	r3, #56	; 0x38
   186c4:	18fb      	adds	r3, r7, r3
   186c6:	0018      	movs	r0, r3
   186c8:	f7f3 ffc8 	bl	c65c <wc_ShaUpdate>
   186cc:	0002      	movs	r2, r0
   186ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   186d0:	4313      	orrs	r3, r2
   186d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                ret |= wc_ShaFinal(hash, digest[0]);
   186d4:	230c      	movs	r3, #12
   186d6:	18fa      	adds	r2, r7, r3
   186d8:	2338      	movs	r3, #56	; 0x38
   186da:	18fb      	adds	r3, r7, r3
   186dc:	0011      	movs	r1, r2
   186de:	0018      	movs	r0, r3
   186e0:	f7f4 f81e 	bl	c720 <wc_ShaFinal>
   186e4:	0002      	movs	r2, r0
   186e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   186e8:	4313      	orrs	r3, r2
   186ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (ret != 0)
   186ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   186ee:	2b00      	cmp	r3, #0
   186f0:	d118      	bne.n	18724 <bench_sha+0x280>
        } while (bench_stats_sym_check(start));
    }
    else {
        bench_stats_start(&count, &start);
        do {
            for (times = 0; times < numBlocks; times++) {
   186f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   186f4:	3301      	adds	r3, #1
   186f6:	627b      	str	r3, [r7, #36]	; 0x24
   186f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   186fa:	4b26      	ldr	r3, [pc, #152]	; (18794 <bench_sha+0x2f0>)
   186fc:	681b      	ldr	r3, [r3, #0]
   186fe:	429a      	cmp	r2, r3
   18700:	dbd1      	blt.n	186a6 <bench_sha+0x202>
                ret |= wc_ShaUpdate(hash, bench_plain, BENCH_SIZE);
                ret |= wc_ShaFinal(hash, digest[0]);
                if (ret != 0)
                    goto exit_sha;
            } /* for times */
            count += times;
   18702:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18706:	18d3      	adds	r3, r2, r3
   18708:	62bb      	str	r3, [r7, #40]	; 0x28
        } while (bench_stats_sym_check(start));
   1870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1870c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1870e:	0018      	movs	r0, r3
   18710:	0021      	movs	r1, r4
   18712:	f7fe fc71 	bl	16ff8 <bench_stats_sym_check>
   18716:	1e03      	subs	r3, r0, #0
   18718:	d1c2      	bne.n	186a0 <bench_sha+0x1fc>
   1871a:	e004      	b.n	18726 <bench_sha+0x282>
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
                    if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, numBlocks, &pending)) {
                        ret = wc_ShaUpdate(&hash[i], bench_plain,
                            BENCH_SIZE);
                        if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, &pending)) {
                            goto exit_sha;
   1871c:	46c0      	nop			; (mov r8, r8)
   1871e:	e002      	b.n	18726 <bench_sha+0x282>

                for (i = 0; i < BENCH_MAX_PENDING; i++) {
                    if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, numBlocks, &pending)) {
                        ret = wc_ShaFinal(&hash[i], digest[i]);
                        if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, &pending)) {
                            goto exit_sha;
   18720:	46c0      	nop			; (mov r8, r8)
   18722:	e000      	b.n	18726 <bench_sha+0x282>
            for (times = 0; times < numBlocks; times++) {
                ret = wc_InitSha_ex(hash, HEAP_HINT, INVALID_DEVID);
                ret |= wc_ShaUpdate(hash, bench_plain, BENCH_SIZE);
                ret |= wc_ShaFinal(hash, digest[0]);
                if (ret != 0)
                    goto exit_sha;
   18724:	46c0      	nop			; (mov r8, r8)
            } /* for times */
            count += times;
        } while (bench_stats_sym_check(start));
    }
exit_sha:
    bench_stats_sym_finish("SHA", doAsync, count, bench_size, start, ret);
   18726:	6abd      	ldr	r5, [r7, #40]	; 0x28
   18728:	4b1c      	ldr	r3, [pc, #112]	; (1879c <bench_sha+0x2f8>)
   1872a:	681b      	ldr	r3, [r3, #0]
   1872c:	001e      	movs	r6, r3
   1872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18730:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   18732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   18734:	6879      	ldr	r1, [r7, #4]
   18736:	481a      	ldr	r0, [pc, #104]	; (187a0 <bench_sha+0x2fc>)
   18738:	9202      	str	r2, [sp, #8]
   1873a:	9300      	str	r3, [sp, #0]
   1873c:	9401      	str	r4, [sp, #4]
   1873e:	0033      	movs	r3, r6
   18740:	002a      	movs	r2, r5
   18742:	f7fe fc7b 	bl	1703c <bench_stats_sym_finish>

exit:

    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18746:	2300      	movs	r3, #0
   18748:	229c      	movs	r2, #156	; 0x9c
   1874a:	18ba      	adds	r2, r7, r2
   1874c:	6013      	str	r3, [r2, #0]
   1874e:	e011      	b.n	18774 <bench_sha+0x2d0>
        wc_ShaFree(&hash[i]);
   18750:	2338      	movs	r3, #56	; 0x38
   18752:	18fa      	adds	r2, r7, r3
   18754:	239c      	movs	r3, #156	; 0x9c
   18756:	18fb      	adds	r3, r7, r3
   18758:	681b      	ldr	r3, [r3, #0]
   1875a:	2164      	movs	r1, #100	; 0x64
   1875c:	434b      	muls	r3, r1
   1875e:	18d3      	adds	r3, r2, r3
   18760:	0018      	movs	r0, r3
   18762:	f7f4 f889 	bl	c878 <wc_ShaFree>
exit_sha:
    bench_stats_sym_finish("SHA", doAsync, count, bench_size, start, ret);

exit:

    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18766:	239c      	movs	r3, #156	; 0x9c
   18768:	18fb      	adds	r3, r7, r3
   1876a:	681b      	ldr	r3, [r3, #0]
   1876c:	3301      	adds	r3, #1
   1876e:	229c      	movs	r2, #156	; 0x9c
   18770:	18ba      	adds	r2, r7, r2
   18772:	6013      	str	r3, [r2, #0]
   18774:	239c      	movs	r3, #156	; 0x9c
   18776:	18fb      	adds	r3, r7, r3
   18778:	681b      	ldr	r3, [r3, #0]
   1877a:	2b00      	cmp	r3, #0
   1877c:	dde8      	ble.n	18750 <bench_sha+0x2ac>
        wc_ShaFree(&hash[i]);
    }

    FREE_ARRAY(digest, BENCH_MAX_PENDING, HEAP_HINT);
}
   1877e:	46c0      	nop			; (mov r8, r8)
   18780:	46bd      	mov	sp, r7
   18782:	b029      	add	sp, #164	; 0xa4
   18784:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18786:	46c0      	nop			; (mov r8, r8)
   18788:	200000bc 	.word	0x200000bc
   1878c:	200000a8 	.word	0x200000a8
   18790:	0002dfe4 	.word	0x0002dfe4
   18794:	200000b0 	.word	0x200000b0
   18798:	200003a0 	.word	0x200003a0
   1879c:	200000b4 	.word	0x200000b4
   187a0:	0002e000 	.word	0x0002e000

000187a4 <bench_sha256>:
}
#endif

#ifndef NO_SHA256
void bench_sha256(int doAsync)
{
   187a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   187a6:	b0b3      	sub	sp, #204	; 0xcc
   187a8:	af04      	add	r7, sp, #16
   187aa:	6078      	str	r0, [r7, #4]
    wc_Sha256 hash[BENCH_MAX_PENDING];
    double start;
    int    ret = 0, i, count = 0, times, pending = 0;
   187ac:	2300      	movs	r3, #0
   187ae:	637b      	str	r3, [r7, #52]	; 0x34
   187b0:	2300      	movs	r3, #0
   187b2:	633b      	str	r3, [r7, #48]	; 0x30
   187b4:	2300      	movs	r3, #0
   187b6:	62bb      	str	r3, [r7, #40]	; 0x28
    DECLARE_ARRAY(digest, byte, BENCH_MAX_PENDING, WC_SHA256_DIGEST_SIZE, HEAP_HINT);

    /* clear for done cleanup */
    XMEMSET(hash, 0, sizeof(hash));
   187b8:	2344      	movs	r3, #68	; 0x44
   187ba:	18fb      	adds	r3, r7, r3
   187bc:	2270      	movs	r2, #112	; 0x70
   187be:	2100      	movs	r1, #0
   187c0:	0018      	movs	r0, r3
   187c2:	f00c ffb2 	bl	2572a <memset>

    if (digest_stream) {
   187c6:	4bb2      	ldr	r3, [pc, #712]	; (18a90 <bench_sha256+0x2ec>)
   187c8:	681b      	ldr	r3, [r3, #0]
   187ca:	2b00      	cmp	r3, #0
   187cc:	d100      	bne.n	187d0 <bench_sha256+0x2c>
   187ce:	e0e2      	b.n	18996 <bench_sha256+0x1f2>
        /* init keys */
        for (i = 0; i < BENCH_MAX_PENDING; i++) {
   187d0:	2300      	movs	r3, #0
   187d2:	22b4      	movs	r2, #180	; 0xb4
   187d4:	18ba      	adds	r2, r7, r2
   187d6:	6013      	str	r3, [r2, #0]
   187d8:	e028      	b.n	1882c <bench_sha256+0x88>
            ret = wc_InitSha256_ex(&hash[i], HEAP_HINT,
   187da:	2344      	movs	r3, #68	; 0x44
   187dc:	18f9      	adds	r1, r7, r3
   187de:	23b4      	movs	r3, #180	; 0xb4
   187e0:	18fb      	adds	r3, r7, r3
   187e2:	681a      	ldr	r2, [r3, #0]
   187e4:	0013      	movs	r3, r2
   187e6:	00db      	lsls	r3, r3, #3
   187e8:	1a9b      	subs	r3, r3, r2
   187ea:	011b      	lsls	r3, r3, #4
   187ec:	18c8      	adds	r0, r1, r3
   187ee:	687b      	ldr	r3, [r7, #4]
   187f0:	2b00      	cmp	r3, #0
   187f2:	d002      	beq.n	187fa <bench_sha256+0x56>
   187f4:	4ba7      	ldr	r3, [pc, #668]	; (18a94 <bench_sha256+0x2f0>)
   187f6:	681b      	ldr	r3, [r3, #0]
   187f8:	e001      	b.n	187fe <bench_sha256+0x5a>
   187fa:	2302      	movs	r3, #2
   187fc:	425b      	negs	r3, r3
   187fe:	001a      	movs	r2, r3
   18800:	2100      	movs	r1, #0
   18802:	f7f4 f93b 	bl	ca7c <wc_InitSha256_ex>
   18806:	0003      	movs	r3, r0
   18808:	637b      	str	r3, [r7, #52]	; 0x34
                doAsync ? devId : INVALID_DEVID);
            if (ret != 0) {
   1880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1880c:	2b00      	cmp	r3, #0
   1880e:	d006      	beq.n	1881e <bench_sha256+0x7a>
                printf("InitSha256_ex failed, ret = %d\n", ret);
   18810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   18812:	4ba1      	ldr	r3, [pc, #644]	; (18a98 <bench_sha256+0x2f4>)
   18814:	0011      	movs	r1, r2
   18816:	0018      	movs	r0, r3
   18818:	f00d fcb2 	bl	26180 <iprintf>
                goto exit;
   1881c:	e116      	b.n	18a4c <bench_sha256+0x2a8>
    /* clear for done cleanup */
    XMEMSET(hash, 0, sizeof(hash));

    if (digest_stream) {
        /* init keys */
        for (i = 0; i < BENCH_MAX_PENDING; i++) {
   1881e:	23b4      	movs	r3, #180	; 0xb4
   18820:	18fb      	adds	r3, r7, r3
   18822:	681b      	ldr	r3, [r3, #0]
   18824:	3301      	adds	r3, #1
   18826:	22b4      	movs	r2, #180	; 0xb4
   18828:	18ba      	adds	r2, r7, r2
   1882a:	6013      	str	r3, [r2, #0]
   1882c:	23b4      	movs	r3, #180	; 0xb4
   1882e:	18fb      	adds	r3, r7, r3
   18830:	681b      	ldr	r3, [r3, #0]
   18832:	2b00      	cmp	r3, #0
   18834:	ddd1      	ble.n	187da <bench_sha256+0x36>
        #ifdef WOLFSSL_PIC32MZ_HASH
            wc_Sha256SizeSet(&hash[i], numBlocks * BENCH_SIZE);
        #endif
        }

        bench_stats_start(&count, &start);
   18836:	2338      	movs	r3, #56	; 0x38
   18838:	18fa      	adds	r2, r7, r3
   1883a:	2330      	movs	r3, #48	; 0x30
   1883c:	18fb      	adds	r3, r7, r3
   1883e:	0011      	movs	r1, r2
   18840:	0018      	movs	r0, r3
   18842:	f7fe fbc5 	bl	16fd0 <bench_stats_start>
        do {
            for (times = 0; times < numBlocks || pending > 0; ) {
   18846:	2300      	movs	r3, #0
   18848:	62fb      	str	r3, [r7, #44]	; 0x2c
   1884a:	e043      	b.n	188d4 <bench_sha256+0x130>
                bench_async_poll(&pending);

                /* while free pending slots in queue, submit ops */
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
   1884c:	2300      	movs	r3, #0
   1884e:	22b4      	movs	r2, #180	; 0xb4
   18850:	18ba      	adds	r2, r7, r2
   18852:	6013      	str	r3, [r2, #0]
   18854:	e039      	b.n	188ca <bench_sha256+0x126>
                    if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, numBlocks, &pending)) {
   18856:	4b91      	ldr	r3, [pc, #580]	; (18a9c <bench_sha256+0x2f8>)
   18858:	681b      	ldr	r3, [r3, #0]
   1885a:	222c      	movs	r2, #44	; 0x2c
   1885c:	18b9      	adds	r1, r7, r2
   1885e:	2234      	movs	r2, #52	; 0x34
   18860:	18b8      	adds	r0, r7, r2
   18862:	2228      	movs	r2, #40	; 0x28
   18864:	18ba      	adds	r2, r7, r2
   18866:	9201      	str	r2, [sp, #4]
   18868:	9300      	str	r3, [sp, #0]
   1886a:	000b      	movs	r3, r1
   1886c:	2200      	movs	r2, #0
   1886e:	2100      	movs	r1, #0
   18870:	f7fe fb84 	bl	16f7c <bench_async_check>
   18874:	1e03      	subs	r3, r0, #0
   18876:	d021      	beq.n	188bc <bench_sha256+0x118>
                        ret = wc_Sha256Update(&hash[i], bench_plain,
   18878:	2344      	movs	r3, #68	; 0x44
   1887a:	18f9      	adds	r1, r7, r3
   1887c:	23b4      	movs	r3, #180	; 0xb4
   1887e:	18fb      	adds	r3, r7, r3
   18880:	681a      	ldr	r2, [r3, #0]
   18882:	0013      	movs	r3, r2
   18884:	00db      	lsls	r3, r3, #3
   18886:	1a9b      	subs	r3, r3, r2
   18888:	011b      	lsls	r3, r3, #4
   1888a:	18c8      	adds	r0, r1, r3
   1888c:	4b84      	ldr	r3, [pc, #528]	; (18aa0 <bench_sha256+0x2fc>)
   1888e:	6819      	ldr	r1, [r3, #0]
   18890:	4b84      	ldr	r3, [pc, #528]	; (18aa4 <bench_sha256+0x300>)
   18892:	681b      	ldr	r3, [r3, #0]
   18894:	001a      	movs	r2, r3
   18896:	f7f4 fe83 	bl	d5a0 <wc_Sha256Update>
   1889a:	0003      	movs	r3, r0
   1889c:	637b      	str	r3, [r7, #52]	; 0x34
                            BENCH_SIZE);
                        if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, &pending)) {
   1889e:	232c      	movs	r3, #44	; 0x2c
   188a0:	18fa      	adds	r2, r7, r3
   188a2:	2334      	movs	r3, #52	; 0x34
   188a4:	18f8      	adds	r0, r7, r3
   188a6:	2328      	movs	r3, #40	; 0x28
   188a8:	18fb      	adds	r3, r7, r3
   188aa:	9300      	str	r3, [sp, #0]
   188ac:	0013      	movs	r3, r2
   188ae:	2200      	movs	r2, #0
   188b0:	2100      	movs	r1, #0
   188b2:	f7fe fb6f 	bl	16f94 <bench_async_handle>
   188b6:	1e03      	subs	r3, r0, #0
   188b8:	d100      	bne.n	188bc <bench_sha256+0x118>
   188ba:	e0b2      	b.n	18a22 <bench_sha256+0x27e>
        do {
            for (times = 0; times < numBlocks || pending > 0; ) {
                bench_async_poll(&pending);

                /* while free pending slots in queue, submit ops */
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
   188bc:	23b4      	movs	r3, #180	; 0xb4
   188be:	18fb      	adds	r3, r7, r3
   188c0:	681b      	ldr	r3, [r3, #0]
   188c2:	3301      	adds	r3, #1
   188c4:	22b4      	movs	r2, #180	; 0xb4
   188c6:	18ba      	adds	r2, r7, r2
   188c8:	6013      	str	r3, [r2, #0]
   188ca:	23b4      	movs	r3, #180	; 0xb4
   188cc:	18fb      	adds	r3, r7, r3
   188ce:	681b      	ldr	r3, [r3, #0]
   188d0:	2b00      	cmp	r3, #0
   188d2:	ddc0      	ble.n	18856 <bench_sha256+0xb2>
        #endif
        }

        bench_stats_start(&count, &start);
        do {
            for (times = 0; times < numBlocks || pending > 0; ) {
   188d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   188d6:	4b71      	ldr	r3, [pc, #452]	; (18a9c <bench_sha256+0x2f8>)
   188d8:	681b      	ldr	r3, [r3, #0]
   188da:	429a      	cmp	r2, r3
   188dc:	dbb6      	blt.n	1884c <bench_sha256+0xa8>
   188de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   188e0:	2b00      	cmp	r3, #0
   188e2:	dcb3      	bgt.n	1884c <bench_sha256+0xa8>
                            goto exit_sha256;
                        }
                    }
                } /* for i */
            } /* for times */
            count += times;
   188e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   188e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   188e8:	18d3      	adds	r3, r2, r3
   188ea:	633b      	str	r3, [r7, #48]	; 0x30

            times = 0;
   188ec:	2300      	movs	r3, #0
   188ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            do {
                bench_async_poll(&pending);
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
   188f0:	2300      	movs	r3, #0
   188f2:	22b4      	movs	r2, #180	; 0xb4
   188f4:	18ba      	adds	r2, r7, r2
   188f6:	6013      	str	r3, [r2, #0]
   188f8:	e03b      	b.n	18972 <bench_sha256+0x1ce>
                    if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, numBlocks, &pending)) {
   188fa:	4b68      	ldr	r3, [pc, #416]	; (18a9c <bench_sha256+0x2f8>)
   188fc:	681b      	ldr	r3, [r3, #0]
   188fe:	222c      	movs	r2, #44	; 0x2c
   18900:	18b9      	adds	r1, r7, r2
   18902:	2234      	movs	r2, #52	; 0x34
   18904:	18b8      	adds	r0, r7, r2
   18906:	2228      	movs	r2, #40	; 0x28
   18908:	18ba      	adds	r2, r7, r2
   1890a:	9201      	str	r2, [sp, #4]
   1890c:	9300      	str	r3, [sp, #0]
   1890e:	000b      	movs	r3, r1
   18910:	2200      	movs	r2, #0
   18912:	2100      	movs	r1, #0
   18914:	f7fe fb32 	bl	16f7c <bench_async_check>
   18918:	1e03      	subs	r3, r0, #0
   1891a:	d023      	beq.n	18964 <bench_sha256+0x1c0>
                        ret = wc_Sha256Final(&hash[i], digest[i]);
   1891c:	2344      	movs	r3, #68	; 0x44
   1891e:	18f9      	adds	r1, r7, r3
   18920:	23b4      	movs	r3, #180	; 0xb4
   18922:	18fb      	adds	r3, r7, r3
   18924:	681a      	ldr	r2, [r3, #0]
   18926:	0013      	movs	r3, r2
   18928:	00db      	lsls	r3, r3, #3
   1892a:	1a9b      	subs	r3, r3, r2
   1892c:	011b      	lsls	r3, r3, #4
   1892e:	18c8      	adds	r0, r1, r3
   18930:	2308      	movs	r3, #8
   18932:	18fa      	adds	r2, r7, r3
   18934:	23b4      	movs	r3, #180	; 0xb4
   18936:	18fb      	adds	r3, r7, r3
   18938:	681b      	ldr	r3, [r3, #0]
   1893a:	015b      	lsls	r3, r3, #5
   1893c:	18d3      	adds	r3, r2, r3
   1893e:	0019      	movs	r1, r3
   18940:	f7f4 fed2 	bl	d6e8 <wc_Sha256Final>
   18944:	0003      	movs	r3, r0
   18946:	637b      	str	r3, [r7, #52]	; 0x34
                        if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, &pending)) {
   18948:	232c      	movs	r3, #44	; 0x2c
   1894a:	18fa      	adds	r2, r7, r3
   1894c:	2334      	movs	r3, #52	; 0x34
   1894e:	18f8      	adds	r0, r7, r3
   18950:	2328      	movs	r3, #40	; 0x28
   18952:	18fb      	adds	r3, r7, r3
   18954:	9300      	str	r3, [sp, #0]
   18956:	0013      	movs	r3, r2
   18958:	2200      	movs	r2, #0
   1895a:	2100      	movs	r1, #0
   1895c:	f7fe fb1a 	bl	16f94 <bench_async_handle>
   18960:	1e03      	subs	r3, r0, #0
   18962:	d060      	beq.n	18a26 <bench_sha256+0x282>
            count += times;

            times = 0;
            do {
                bench_async_poll(&pending);
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18964:	23b4      	movs	r3, #180	; 0xb4
   18966:	18fb      	adds	r3, r7, r3
   18968:	681b      	ldr	r3, [r3, #0]
   1896a:	3301      	adds	r3, #1
   1896c:	22b4      	movs	r2, #180	; 0xb4
   1896e:	18ba      	adds	r2, r7, r2
   18970:	6013      	str	r3, [r2, #0]
   18972:	23b4      	movs	r3, #180	; 0xb4
   18974:	18fb      	adds	r3, r7, r3
   18976:	681b      	ldr	r3, [r3, #0]
   18978:	2b00      	cmp	r3, #0
   1897a:	ddbe      	ble.n	188fa <bench_sha256+0x156>
                        if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, &pending)) {
                            goto exit_sha256;
                        }
                    }
                } /* for i */
            } while (pending > 0);
   1897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1897e:	2b00      	cmp	r3, #0
   18980:	dcb6      	bgt.n	188f0 <bench_sha256+0x14c>
        } while (bench_stats_sym_check(start));
   18982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18984:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   18986:	0018      	movs	r0, r3
   18988:	0021      	movs	r1, r4
   1898a:	f7fe fb35 	bl	16ff8 <bench_stats_sym_check>
   1898e:	1e03      	subs	r3, r0, #0
   18990:	d000      	beq.n	18994 <bench_sha256+0x1f0>
   18992:	e758      	b.n	18846 <bench_sha256+0xa2>
   18994:	e04a      	b.n	18a2c <bench_sha256+0x288>
    }
    else {
        bench_stats_start(&count, &start);
   18996:	2338      	movs	r3, #56	; 0x38
   18998:	18fa      	adds	r2, r7, r3
   1899a:	2330      	movs	r3, #48	; 0x30
   1899c:	18fb      	adds	r3, r7, r3
   1899e:	0011      	movs	r1, r2
   189a0:	0018      	movs	r0, r3
   189a2:	f7fe fb15 	bl	16fd0 <bench_stats_start>
        do {
            for (times = 0; times < numBlocks; times++) {
   189a6:	2300      	movs	r3, #0
   189a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   189aa:	e028      	b.n	189fe <bench_sha256+0x25a>
                ret = wc_InitSha256_ex(hash, HEAP_HINT, INVALID_DEVID);
   189ac:	2302      	movs	r3, #2
   189ae:	425a      	negs	r2, r3
   189b0:	2344      	movs	r3, #68	; 0x44
   189b2:	18fb      	adds	r3, r7, r3
   189b4:	2100      	movs	r1, #0
   189b6:	0018      	movs	r0, r3
   189b8:	f7f4 f860 	bl	ca7c <wc_InitSha256_ex>
   189bc:	0003      	movs	r3, r0
   189be:	637b      	str	r3, [r7, #52]	; 0x34
                ret |= wc_Sha256Update(hash, bench_plain, BENCH_SIZE);
   189c0:	4b37      	ldr	r3, [pc, #220]	; (18aa0 <bench_sha256+0x2fc>)
   189c2:	6819      	ldr	r1, [r3, #0]
   189c4:	4b37      	ldr	r3, [pc, #220]	; (18aa4 <bench_sha256+0x300>)
   189c6:	681a      	ldr	r2, [r3, #0]
   189c8:	2344      	movs	r3, #68	; 0x44
   189ca:	18fb      	adds	r3, r7, r3
   189cc:	0018      	movs	r0, r3
   189ce:	f7f4 fde7 	bl	d5a0 <wc_Sha256Update>
   189d2:	0002      	movs	r2, r0
   189d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   189d6:	4313      	orrs	r3, r2
   189d8:	637b      	str	r3, [r7, #52]	; 0x34
                ret |= wc_Sha256Final(hash, digest[0]);
   189da:	2308      	movs	r3, #8
   189dc:	18fa      	adds	r2, r7, r3
   189de:	2344      	movs	r3, #68	; 0x44
   189e0:	18fb      	adds	r3, r7, r3
   189e2:	0011      	movs	r1, r2
   189e4:	0018      	movs	r0, r3
   189e6:	f7f4 fe7f 	bl	d6e8 <wc_Sha256Final>
   189ea:	0002      	movs	r2, r0
   189ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   189ee:	4313      	orrs	r3, r2
   189f0:	637b      	str	r3, [r7, #52]	; 0x34
                if (ret != 0)
   189f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   189f4:	2b00      	cmp	r3, #0
   189f6:	d118      	bne.n	18a2a <bench_sha256+0x286>
        } while (bench_stats_sym_check(start));
    }
    else {
        bench_stats_start(&count, &start);
        do {
            for (times = 0; times < numBlocks; times++) {
   189f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   189fa:	3301      	adds	r3, #1
   189fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   189fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   18a00:	4b26      	ldr	r3, [pc, #152]	; (18a9c <bench_sha256+0x2f8>)
   18a02:	681b      	ldr	r3, [r3, #0]
   18a04:	429a      	cmp	r2, r3
   18a06:	dbd1      	blt.n	189ac <bench_sha256+0x208>
                ret |= wc_Sha256Update(hash, bench_plain, BENCH_SIZE);
                ret |= wc_Sha256Final(hash, digest[0]);
                if (ret != 0)
                    goto exit_sha256;
            } /* for times */
            count += times;
   18a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   18a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18a0c:	18d3      	adds	r3, r2, r3
   18a0e:	633b      	str	r3, [r7, #48]	; 0x30
        } while (bench_stats_sym_check(start));
   18a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18a12:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   18a14:	0018      	movs	r0, r3
   18a16:	0021      	movs	r1, r4
   18a18:	f7fe faee 	bl	16ff8 <bench_stats_sym_check>
   18a1c:	1e03      	subs	r3, r0, #0
   18a1e:	d1c2      	bne.n	189a6 <bench_sha256+0x202>
   18a20:	e004      	b.n	18a2c <bench_sha256+0x288>
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
                    if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, numBlocks, &pending)) {
                        ret = wc_Sha256Update(&hash[i], bench_plain,
                            BENCH_SIZE);
                        if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, &pending)) {
                            goto exit_sha256;
   18a22:	46c0      	nop			; (mov r8, r8)
   18a24:	e002      	b.n	18a2c <bench_sha256+0x288>
                bench_async_poll(&pending);
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
                    if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, numBlocks, &pending)) {
                        ret = wc_Sha256Final(&hash[i], digest[i]);
                        if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hash[i]), 0, &times, &pending)) {
                            goto exit_sha256;
   18a26:	46c0      	nop			; (mov r8, r8)
   18a28:	e000      	b.n	18a2c <bench_sha256+0x288>
            for (times = 0; times < numBlocks; times++) {
                ret = wc_InitSha256_ex(hash, HEAP_HINT, INVALID_DEVID);
                ret |= wc_Sha256Update(hash, bench_plain, BENCH_SIZE);
                ret |= wc_Sha256Final(hash, digest[0]);
                if (ret != 0)
                    goto exit_sha256;
   18a2a:	46c0      	nop			; (mov r8, r8)
            } /* for times */
            count += times;
        } while (bench_stats_sym_check(start));
    }
exit_sha256:
    bench_stats_sym_finish("SHA-256", doAsync, count, bench_size, start, ret);
   18a2c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   18a2e:	4b1d      	ldr	r3, [pc, #116]	; (18aa4 <bench_sha256+0x300>)
   18a30:	681b      	ldr	r3, [r3, #0]
   18a32:	001e      	movs	r6, r3
   18a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18a36:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   18a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   18a3a:	6879      	ldr	r1, [r7, #4]
   18a3c:	481a      	ldr	r0, [pc, #104]	; (18aa8 <bench_sha256+0x304>)
   18a3e:	9202      	str	r2, [sp, #8]
   18a40:	9300      	str	r3, [sp, #0]
   18a42:	9401      	str	r4, [sp, #4]
   18a44:	0033      	movs	r3, r6
   18a46:	002a      	movs	r2, r5
   18a48:	f7fe faf8 	bl	1703c <bench_stats_sym_finish>

exit:

    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18a4c:	2300      	movs	r3, #0
   18a4e:	22b4      	movs	r2, #180	; 0xb4
   18a50:	18ba      	adds	r2, r7, r2
   18a52:	6013      	str	r3, [r2, #0]
   18a54:	e013      	b.n	18a7e <bench_sha256+0x2da>
        wc_Sha256Free(&hash[i]);
   18a56:	2344      	movs	r3, #68	; 0x44
   18a58:	18f9      	adds	r1, r7, r3
   18a5a:	23b4      	movs	r3, #180	; 0xb4
   18a5c:	18fb      	adds	r3, r7, r3
   18a5e:	681a      	ldr	r2, [r3, #0]
   18a60:	0013      	movs	r3, r2
   18a62:	00db      	lsls	r3, r3, #3
   18a64:	1a9b      	subs	r3, r3, r2
   18a66:	011b      	lsls	r3, r3, #4
   18a68:	18cb      	adds	r3, r1, r3
   18a6a:	0018      	movs	r0, r3
   18a6c:	f7f4 fe7a 	bl	d764 <wc_Sha256Free>
exit_sha256:
    bench_stats_sym_finish("SHA-256", doAsync, count, bench_size, start, ret);

exit:

    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18a70:	23b4      	movs	r3, #180	; 0xb4
   18a72:	18fb      	adds	r3, r7, r3
   18a74:	681b      	ldr	r3, [r3, #0]
   18a76:	3301      	adds	r3, #1
   18a78:	22b4      	movs	r2, #180	; 0xb4
   18a7a:	18ba      	adds	r2, r7, r2
   18a7c:	6013      	str	r3, [r2, #0]
   18a7e:	23b4      	movs	r3, #180	; 0xb4
   18a80:	18fb      	adds	r3, r7, r3
   18a82:	681b      	ldr	r3, [r3, #0]
   18a84:	2b00      	cmp	r3, #0
   18a86:	dde6      	ble.n	18a56 <bench_sha256+0x2b2>
        wc_Sha256Free(&hash[i]);
    }

    FREE_ARRAY(digest, BENCH_MAX_PENDING, HEAP_HINT);
}
   18a88:	46c0      	nop			; (mov r8, r8)
   18a8a:	46bd      	mov	sp, r7
   18a8c:	b02f      	add	sp, #188	; 0xbc
   18a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a90:	200000bc 	.word	0x200000bc
   18a94:	200000a8 	.word	0x200000a8
   18a98:	0002e004 	.word	0x0002e004
   18a9c:	200000b0 	.word	0x200000b0
   18aa0:	200003a0 	.word	0x200003a0
   18aa4:	200000b4 	.word	0x200000b4
   18aa8:	0002e024 	.word	0x0002e024

00018aac <bench_hmac>:

#ifndef NO_HMAC

static void bench_hmac(int doAsync, int type, int digestSz,
                       byte* key, word32 keySz, const char* label)
{
   18aac:	b5f0      	push	{r4, r5, r6, r7, lr}
   18aae:	b0df      	sub	sp, #380	; 0x17c
   18ab0:	af04      	add	r7, sp, #16
   18ab2:	60f8      	str	r0, [r7, #12]
   18ab4:	60b9      	str	r1, [r7, #8]
   18ab6:	607a      	str	r2, [r7, #4]
   18ab8:	603b      	str	r3, [r7, #0]
    Hmac   hmac[BENCH_MAX_PENDING];
    double start;
    int    ret = 0, i, count = 0, times, pending = 0;
   18aba:	2300      	movs	r3, #0
   18abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   18abe:	2300      	movs	r3, #0
   18ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   18ac2:	2300      	movs	r3, #0
   18ac4:	633b      	str	r3, [r7, #48]	; 0x30
#else
    DECLARE_ARRAY(digest, byte, BENCH_MAX_PENDING, digestSz, HEAP_HINT);
#endif

    /* clear for done cleanup */
    XMEMSET(hmac, 0, sizeof(hmac));
   18ac6:	238c      	movs	r3, #140	; 0x8c
   18ac8:	005a      	lsls	r2, r3, #1
   18aca:	234c      	movs	r3, #76	; 0x4c
   18acc:	18fb      	adds	r3, r7, r3
   18ace:	2100      	movs	r1, #0
   18ad0:	0018      	movs	r0, r3
   18ad2:	f00c fe2a 	bl	2572a <memset>

    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18ad6:	2300      	movs	r3, #0
   18ad8:	22b2      	movs	r2, #178	; 0xb2
   18ada:	0052      	lsls	r2, r2, #1
   18adc:	18ba      	adds	r2, r7, r2
   18ade:	6013      	str	r3, [r2, #0]
   18ae0:	e04e      	b.n	18b80 <bench_hmac+0xd4>
        ret = wc_HmacInit(&hmac[i], HEAP_HINT,
   18ae2:	234c      	movs	r3, #76	; 0x4c
   18ae4:	18fa      	adds	r2, r7, r3
   18ae6:	23b2      	movs	r3, #178	; 0xb2
   18ae8:	005b      	lsls	r3, r3, #1
   18aea:	18fb      	adds	r3, r7, r3
   18aec:	681b      	ldr	r3, [r3, #0]
   18aee:	218c      	movs	r1, #140	; 0x8c
   18af0:	0049      	lsls	r1, r1, #1
   18af2:	434b      	muls	r3, r1
   18af4:	18d0      	adds	r0, r2, r3
   18af6:	68fb      	ldr	r3, [r7, #12]
   18af8:	2b00      	cmp	r3, #0
   18afa:	d002      	beq.n	18b02 <bench_hmac+0x56>
   18afc:	4b8d      	ldr	r3, [pc, #564]	; (18d34 <bench_hmac+0x288>)
   18afe:	681b      	ldr	r3, [r3, #0]
   18b00:	e001      	b.n	18b06 <bench_hmac+0x5a>
   18b02:	2302      	movs	r3, #2
   18b04:	425b      	negs	r3, r3
   18b06:	001a      	movs	r2, r3
   18b08:	2100      	movs	r1, #0
   18b0a:	f7f1 fc53 	bl	a3b4 <wc_HmacInit>
   18b0e:	0003      	movs	r3, r0
   18b10:	63fb      	str	r3, [r7, #60]	; 0x3c
                doAsync ? devId : INVALID_DEVID);
        if (ret != 0) {
   18b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18b14:	2b00      	cmp	r3, #0
   18b16:	d009      	beq.n	18b2c <bench_hmac+0x80>
            printf("wc_HmacInit failed for %s, ret = %d\n", label, ret);
   18b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   18b1a:	23c2      	movs	r3, #194	; 0xc2
   18b1c:	005b      	lsls	r3, r3, #1
   18b1e:	18fb      	adds	r3, r7, r3
   18b20:	6819      	ldr	r1, [r3, #0]
   18b22:	4b85      	ldr	r3, [pc, #532]	; (18d38 <bench_hmac+0x28c>)
   18b24:	0018      	movs	r0, r3
   18b26:	f00d fb2b 	bl	26180 <iprintf>
            goto exit;
   18b2a:	e0fe      	b.n	18d2a <bench_hmac+0x27e>
        }

        ret = wc_HmacSetKey(&hmac[i], type, key, keySz);
   18b2c:	234c      	movs	r3, #76	; 0x4c
   18b2e:	18fa      	adds	r2, r7, r3
   18b30:	23b2      	movs	r3, #178	; 0xb2
   18b32:	005b      	lsls	r3, r3, #1
   18b34:	18fb      	adds	r3, r7, r3
   18b36:	681b      	ldr	r3, [r3, #0]
   18b38:	218c      	movs	r1, #140	; 0x8c
   18b3a:	0049      	lsls	r1, r1, #1
   18b3c:	434b      	muls	r3, r1
   18b3e:	18d0      	adds	r0, r2, r3
   18b40:	23c0      	movs	r3, #192	; 0xc0
   18b42:	005b      	lsls	r3, r3, #1
   18b44:	18fb      	adds	r3, r7, r3
   18b46:	681b      	ldr	r3, [r3, #0]
   18b48:	683a      	ldr	r2, [r7, #0]
   18b4a:	68b9      	ldr	r1, [r7, #8]
   18b4c:	f7f1 fa1e 	bl	9f8c <wc_HmacSetKey>
   18b50:	0003      	movs	r3, r0
   18b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (ret != 0) {
   18b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18b56:	2b00      	cmp	r3, #0
   18b58:	d009      	beq.n	18b6e <bench_hmac+0xc2>
            printf("wc_HmacSetKey failed for %s, ret = %d\n", label, ret);
   18b5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   18b5c:	23c2      	movs	r3, #194	; 0xc2
   18b5e:	005b      	lsls	r3, r3, #1
   18b60:	18fb      	adds	r3, r7, r3
   18b62:	6819      	ldr	r1, [r3, #0]
   18b64:	4b75      	ldr	r3, [pc, #468]	; (18d3c <bench_hmac+0x290>)
   18b66:	0018      	movs	r0, r3
   18b68:	f00d fb0a 	bl	26180 <iprintf>
            goto exit;
   18b6c:	e0dd      	b.n	18d2a <bench_hmac+0x27e>

    /* clear for done cleanup */
    XMEMSET(hmac, 0, sizeof(hmac));

    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18b6e:	23b2      	movs	r3, #178	; 0xb2
   18b70:	005b      	lsls	r3, r3, #1
   18b72:	18fb      	adds	r3, r7, r3
   18b74:	681b      	ldr	r3, [r3, #0]
   18b76:	3301      	adds	r3, #1
   18b78:	22b2      	movs	r2, #178	; 0xb2
   18b7a:	0052      	lsls	r2, r2, #1
   18b7c:	18ba      	adds	r2, r7, r2
   18b7e:	6013      	str	r3, [r2, #0]
   18b80:	23b2      	movs	r3, #178	; 0xb2
   18b82:	005b      	lsls	r3, r3, #1
   18b84:	18fb      	adds	r3, r7, r3
   18b86:	681b      	ldr	r3, [r3, #0]
   18b88:	2b00      	cmp	r3, #0
   18b8a:	ddaa      	ble.n	18ae2 <bench_hmac+0x36>
            printf("wc_HmacSetKey failed for %s, ret = %d\n", label, ret);
            goto exit;
        }
    }

    bench_stats_start(&count, &start);
   18b8c:	2340      	movs	r3, #64	; 0x40
   18b8e:	18fa      	adds	r2, r7, r3
   18b90:	2338      	movs	r3, #56	; 0x38
   18b92:	18fb      	adds	r3, r7, r3
   18b94:	0011      	movs	r1, r2
   18b96:	0018      	movs	r0, r3
   18b98:	f7fe fa1a 	bl	16fd0 <bench_stats_start>
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
   18b9c:	2300      	movs	r3, #0
   18b9e:	637b      	str	r3, [r7, #52]	; 0x34
   18ba0:	e047      	b.n	18c32 <bench_hmac+0x186>
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18ba2:	2300      	movs	r3, #0
   18ba4:	22b2      	movs	r2, #178	; 0xb2
   18ba6:	0052      	lsls	r2, r2, #1
   18ba8:	18ba      	adds	r2, r7, r2
   18baa:	6013      	str	r3, [r2, #0]
   18bac:	e03b      	b.n	18c26 <bench_hmac+0x17a>
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hmac[i]), 0,
   18bae:	4b64      	ldr	r3, [pc, #400]	; (18d40 <bench_hmac+0x294>)
   18bb0:	681b      	ldr	r3, [r3, #0]
   18bb2:	2234      	movs	r2, #52	; 0x34
   18bb4:	18b9      	adds	r1, r7, r2
   18bb6:	223c      	movs	r2, #60	; 0x3c
   18bb8:	18b8      	adds	r0, r7, r2
   18bba:	2230      	movs	r2, #48	; 0x30
   18bbc:	18ba      	adds	r2, r7, r2
   18bbe:	9201      	str	r2, [sp, #4]
   18bc0:	9300      	str	r3, [sp, #0]
   18bc2:	000b      	movs	r3, r1
   18bc4:	2200      	movs	r2, #0
   18bc6:	2100      	movs	r1, #0
   18bc8:	f7fe f9d8 	bl	16f7c <bench_async_check>
   18bcc:	1e03      	subs	r3, r0, #0
   18bce:	d021      	beq.n	18c14 <bench_hmac+0x168>
                                      &times, numBlocks, &pending)) {
                    ret = wc_HmacUpdate(&hmac[i], bench_plain, BENCH_SIZE);
   18bd0:	234c      	movs	r3, #76	; 0x4c
   18bd2:	18fa      	adds	r2, r7, r3
   18bd4:	23b2      	movs	r3, #178	; 0xb2
   18bd6:	005b      	lsls	r3, r3, #1
   18bd8:	18fb      	adds	r3, r7, r3
   18bda:	681b      	ldr	r3, [r3, #0]
   18bdc:	218c      	movs	r1, #140	; 0x8c
   18bde:	0049      	lsls	r1, r1, #1
   18be0:	434b      	muls	r3, r1
   18be2:	18d0      	adds	r0, r2, r3
   18be4:	4b57      	ldr	r3, [pc, #348]	; (18d44 <bench_hmac+0x298>)
   18be6:	6819      	ldr	r1, [r3, #0]
   18be8:	4b57      	ldr	r3, [pc, #348]	; (18d48 <bench_hmac+0x29c>)
   18bea:	681b      	ldr	r3, [r3, #0]
   18bec:	001a      	movs	r2, r3
   18bee:	f7f1 fafd 	bl	a1ec <wc_HmacUpdate>
   18bf2:	0003      	movs	r3, r0
   18bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hmac[i]),
   18bf6:	2334      	movs	r3, #52	; 0x34
   18bf8:	18fa      	adds	r2, r7, r3
   18bfa:	233c      	movs	r3, #60	; 0x3c
   18bfc:	18f8      	adds	r0, r7, r3
   18bfe:	2330      	movs	r3, #48	; 0x30
   18c00:	18fb      	adds	r3, r7, r3
   18c02:	9300      	str	r3, [sp, #0]
   18c04:	0013      	movs	r3, r2
   18c06:	2200      	movs	r2, #0
   18c08:	2100      	movs	r1, #0
   18c0a:	f7fe f9c3 	bl	16f94 <bench_async_handle>
   18c0e:	1e03      	subs	r3, r0, #0
   18c10:	d100      	bne.n	18c14 <bench_hmac+0x168>
   18c12:	e074      	b.n	18cfe <bench_hmac+0x252>
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18c14:	23b2      	movs	r3, #178	; 0xb2
   18c16:	005b      	lsls	r3, r3, #1
   18c18:	18fb      	adds	r3, r7, r3
   18c1a:	681b      	ldr	r3, [r3, #0]
   18c1c:	3301      	adds	r3, #1
   18c1e:	22b2      	movs	r2, #178	; 0xb2
   18c20:	0052      	lsls	r2, r2, #1
   18c22:	18ba      	adds	r2, r7, r2
   18c24:	6013      	str	r3, [r2, #0]
   18c26:	23b2      	movs	r3, #178	; 0xb2
   18c28:	005b      	lsls	r3, r3, #1
   18c2a:	18fb      	adds	r3, r7, r3
   18c2c:	681b      	ldr	r3, [r3, #0]
   18c2e:	2b00      	cmp	r3, #0
   18c30:	ddbd      	ble.n	18bae <bench_hmac+0x102>
        }
    }

    bench_stats_start(&count, &start);
    do {
        for (times = 0; times < numBlocks || pending > 0; ) {
   18c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   18c34:	4b42      	ldr	r3, [pc, #264]	; (18d40 <bench_hmac+0x294>)
   18c36:	681b      	ldr	r3, [r3, #0]
   18c38:	429a      	cmp	r2, r3
   18c3a:	dbb2      	blt.n	18ba2 <bench_hmac+0xf6>
   18c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18c3e:	2b00      	cmp	r3, #0
   18c40:	dcaf      	bgt.n	18ba2 <bench_hmac+0xf6>
                        goto exit_hmac;
                    }
                }
            } /* for i */
        } /* for times */
        count += times;
   18c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
   18c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18c46:	18d3      	adds	r3, r2, r3
   18c48:	63bb      	str	r3, [r7, #56]	; 0x38

        times = 0;
   18c4a:	2300      	movs	r3, #0
   18c4c:	637b      	str	r3, [r7, #52]	; 0x34
        do {
            bench_async_poll(&pending);

            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18c4e:	2300      	movs	r3, #0
   18c50:	22b2      	movs	r2, #178	; 0xb2
   18c52:	0052      	lsls	r2, r2, #1
   18c54:	18ba      	adds	r2, r7, r2
   18c56:	6013      	str	r3, [r2, #0]
   18c58:	e03e      	b.n	18cd8 <bench_hmac+0x22c>
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hmac[i]), 0,
   18c5a:	4b39      	ldr	r3, [pc, #228]	; (18d40 <bench_hmac+0x294>)
   18c5c:	681b      	ldr	r3, [r3, #0]
   18c5e:	2234      	movs	r2, #52	; 0x34
   18c60:	18b9      	adds	r1, r7, r2
   18c62:	223c      	movs	r2, #60	; 0x3c
   18c64:	18b8      	adds	r0, r7, r2
   18c66:	2230      	movs	r2, #48	; 0x30
   18c68:	18ba      	adds	r2, r7, r2
   18c6a:	9201      	str	r2, [sp, #4]
   18c6c:	9300      	str	r3, [sp, #0]
   18c6e:	000b      	movs	r3, r1
   18c70:	2200      	movs	r2, #0
   18c72:	2100      	movs	r1, #0
   18c74:	f7fe f982 	bl	16f7c <bench_async_check>
   18c78:	1e03      	subs	r3, r0, #0
   18c7a:	d024      	beq.n	18cc6 <bench_hmac+0x21a>
                                      &times, numBlocks, &pending)) {
                    ret = wc_HmacFinal(&hmac[i], digest[i]);
   18c7c:	234c      	movs	r3, #76	; 0x4c
   18c7e:	18fa      	adds	r2, r7, r3
   18c80:	23b2      	movs	r3, #178	; 0xb2
   18c82:	005b      	lsls	r3, r3, #1
   18c84:	18fb      	adds	r3, r7, r3
   18c86:	681b      	ldr	r3, [r3, #0]
   18c88:	218c      	movs	r1, #140	; 0x8c
   18c8a:	0049      	lsls	r1, r1, #1
   18c8c:	434b      	muls	r3, r1
   18c8e:	18d0      	adds	r0, r2, r3
   18c90:	2310      	movs	r3, #16
   18c92:	18fa      	adds	r2, r7, r3
   18c94:	23b2      	movs	r3, #178	; 0xb2
   18c96:	005b      	lsls	r3, r3, #1
   18c98:	18fb      	adds	r3, r7, r3
   18c9a:	681b      	ldr	r3, [r3, #0]
   18c9c:	015b      	lsls	r3, r3, #5
   18c9e:	18d3      	adds	r3, r2, r3
   18ca0:	0019      	movs	r1, r3
   18ca2:	f7f1 fae9 	bl	a278 <wc_HmacFinal>
   18ca6:	0003      	movs	r3, r0
   18ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hmac[i]),
   18caa:	2334      	movs	r3, #52	; 0x34
   18cac:	18fa      	adds	r2, r7, r3
   18cae:	233c      	movs	r3, #60	; 0x3c
   18cb0:	18f8      	adds	r0, r7, r3
   18cb2:	2330      	movs	r3, #48	; 0x30
   18cb4:	18fb      	adds	r3, r7, r3
   18cb6:	9300      	str	r3, [sp, #0]
   18cb8:	0013      	movs	r3, r2
   18cba:	2200      	movs	r2, #0
   18cbc:	2100      	movs	r1, #0
   18cbe:	f7fe f969 	bl	16f94 <bench_async_handle>
   18cc2:	1e03      	subs	r3, r0, #0
   18cc4:	d01d      	beq.n	18d02 <bench_hmac+0x256>

        times = 0;
        do {
            bench_async_poll(&pending);

            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18cc6:	23b2      	movs	r3, #178	; 0xb2
   18cc8:	005b      	lsls	r3, r3, #1
   18cca:	18fb      	adds	r3, r7, r3
   18ccc:	681b      	ldr	r3, [r3, #0]
   18cce:	3301      	adds	r3, #1
   18cd0:	22b2      	movs	r2, #178	; 0xb2
   18cd2:	0052      	lsls	r2, r2, #1
   18cd4:	18ba      	adds	r2, r7, r2
   18cd6:	6013      	str	r3, [r2, #0]
   18cd8:	23b2      	movs	r3, #178	; 0xb2
   18cda:	005b      	lsls	r3, r3, #1
   18cdc:	18fb      	adds	r3, r7, r3
   18cde:	681b      	ldr	r3, [r3, #0]
   18ce0:	2b00      	cmp	r3, #0
   18ce2:	ddba      	ble.n	18c5a <bench_hmac+0x1ae>
                                            0, &times, &pending)) {
                        goto exit_hmac;
                    }
                }
            } /* for i */
        } while (pending > 0);
   18ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18ce6:	2b00      	cmp	r3, #0
   18ce8:	dcb1      	bgt.n	18c4e <bench_hmac+0x1a2>
    } while (bench_stats_sym_check(start));
   18cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18cec:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   18cee:	0018      	movs	r0, r3
   18cf0:	0021      	movs	r1, r4
   18cf2:	f7fe f981 	bl	16ff8 <bench_stats_sym_check>
   18cf6:	1e03      	subs	r3, r0, #0
   18cf8:	d000      	beq.n	18cfc <bench_hmac+0x250>
   18cfa:	e74f      	b.n	18b9c <bench_hmac+0xf0>
   18cfc:	e002      	b.n	18d04 <bench_hmac+0x258>
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hmac[i]), 0,
                                      &times, numBlocks, &pending)) {
                    ret = wc_HmacUpdate(&hmac[i], bench_plain, BENCH_SIZE);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hmac[i]),
                                            0, &times, &pending)) {
                        goto exit_hmac;
   18cfe:	46c0      	nop			; (mov r8, r8)
   18d00:	e000      	b.n	18d04 <bench_hmac+0x258>
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&hmac[i]), 0,
                                      &times, numBlocks, &pending)) {
                    ret = wc_HmacFinal(&hmac[i], digest[i]);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&hmac[i]),
                                            0, &times, &pending)) {
                        goto exit_hmac;
   18d02:	46c0      	nop			; (mov r8, r8)
                }
            } /* for i */
        } while (pending > 0);
    } while (bench_stats_sym_check(start));
exit_hmac:
    bench_stats_sym_finish(label, doAsync, count, bench_size, start, ret);
   18d04:	6bbd      	ldr	r5, [r7, #56]	; 0x38
   18d06:	4b10      	ldr	r3, [pc, #64]	; (18d48 <bench_hmac+0x29c>)
   18d08:	681b      	ldr	r3, [r3, #0]
   18d0a:	001e      	movs	r6, r3
   18d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18d0e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   18d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   18d12:	68f9      	ldr	r1, [r7, #12]
   18d14:	20c2      	movs	r0, #194	; 0xc2
   18d16:	0040      	lsls	r0, r0, #1
   18d18:	1838      	adds	r0, r7, r0
   18d1a:	6800      	ldr	r0, [r0, #0]
   18d1c:	9202      	str	r2, [sp, #8]
   18d1e:	9300      	str	r3, [sp, #0]
   18d20:	9401      	str	r4, [sp, #4]
   18d22:	0033      	movs	r3, r6
   18d24:	002a      	movs	r2, r5
   18d26:	f7fe f989 	bl	1703c <bench_stats_sym_finish>
        wc_HmacFree(&hmac[i]);
    }
#endif

    FREE_ARRAY(digest, BENCH_MAX_PENDING, HEAP_HINT);
}
   18d2a:	46c0      	nop			; (mov r8, r8)
   18d2c:	46bd      	mov	sp, r7
   18d2e:	b05b      	add	sp, #364	; 0x16c
   18d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18d32:	46c0      	nop			; (mov r8, r8)
   18d34:	200000a8 	.word	0x200000a8
   18d38:	0002e02c 	.word	0x0002e02c
   18d3c:	0002e054 	.word	0x0002e054
   18d40:	200000b0 	.word	0x200000b0
   18d44:	200003a0 	.word	0x200003a0
   18d48:	200000b4 	.word	0x200000b4

00018d4c <bench_hmac_sha>:
#endif /* NO_MD5 */

#ifndef NO_SHA

void bench_hmac_sha(int doAsync)
{
   18d4c:	b580      	push	{r7, lr}
   18d4e:	b08a      	sub	sp, #40	; 0x28
   18d50:	af02      	add	r7, sp, #8
   18d52:	6078      	str	r0, [r7, #4]
    byte key[] = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
   18d54:	230c      	movs	r3, #12
   18d56:	18fa      	adds	r2, r7, r3
   18d58:	4b0b      	ldr	r3, [pc, #44]	; (18d88 <bench_hmac_sha+0x3c>)
   18d5a:	0010      	movs	r0, r2
   18d5c:	0019      	movs	r1, r3
   18d5e:	2314      	movs	r3, #20
   18d60:	001a      	movs	r2, r3
   18d62:	f00c fcc4 	bl	256ee <memcpy>
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
                   0x0b, 0x0b, 0x0b, 0x0b };

    bench_hmac(doAsync, WC_SHA, WC_SHA_DIGEST_SIZE, key, sizeof(key),
   18d66:	230c      	movs	r3, #12
   18d68:	18fa      	adds	r2, r7, r3
   18d6a:	6878      	ldr	r0, [r7, #4]
   18d6c:	4b07      	ldr	r3, [pc, #28]	; (18d8c <bench_hmac_sha+0x40>)
   18d6e:	9301      	str	r3, [sp, #4]
   18d70:	2314      	movs	r3, #20
   18d72:	9300      	str	r3, [sp, #0]
   18d74:	0013      	movs	r3, r2
   18d76:	2214      	movs	r2, #20
   18d78:	2104      	movs	r1, #4
   18d7a:	f7ff fe97 	bl	18aac <bench_hmac>
               "HMAC-SHA");
}
   18d7e:	46c0      	nop			; (mov r8, r8)
   18d80:	46bd      	mov	sp, r7
   18d82:	b008      	add	sp, #32
   18d84:	bd80      	pop	{r7, pc}
   18d86:	46c0      	nop			; (mov r8, r8)
   18d88:	0002e088 	.word	0x0002e088
   18d8c:	0002e07c 	.word	0x0002e07c

00018d90 <bench_hmac_sha256>:
#endif /* WOLFSSL_SHA224 */

#ifndef NO_SHA256

void bench_hmac_sha256(int doAsync)
{
   18d90:	b580      	push	{r7, lr}
   18d92:	b08c      	sub	sp, #48	; 0x30
   18d94:	af02      	add	r7, sp, #8
   18d96:	6078      	str	r0, [r7, #4]
    byte key[] = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
   18d98:	2308      	movs	r3, #8
   18d9a:	18fa      	adds	r2, r7, r3
   18d9c:	4b0b      	ldr	r3, [pc, #44]	; (18dcc <bench_hmac_sha256+0x3c>)
   18d9e:	0010      	movs	r0, r2
   18da0:	0019      	movs	r1, r3
   18da2:	2320      	movs	r3, #32
   18da4:	001a      	movs	r2, r3
   18da6:	f00c fca2 	bl	256ee <memcpy>
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b };

    bench_hmac(doAsync, WC_SHA256, WC_SHA256_DIGEST_SIZE, key, sizeof(key),
   18daa:	2308      	movs	r3, #8
   18dac:	18fa      	adds	r2, r7, r3
   18dae:	6878      	ldr	r0, [r7, #4]
   18db0:	4b07      	ldr	r3, [pc, #28]	; (18dd0 <bench_hmac_sha256+0x40>)
   18db2:	9301      	str	r3, [sp, #4]
   18db4:	2320      	movs	r3, #32
   18db6:	9300      	str	r3, [sp, #0]
   18db8:	0013      	movs	r3, r2
   18dba:	2220      	movs	r2, #32
   18dbc:	2106      	movs	r1, #6
   18dbe:	f7ff fe75 	bl	18aac <bench_hmac>
               "HMAC-SHA256");
}
   18dc2:	46c0      	nop			; (mov r8, r8)
   18dc4:	46bd      	mov	sp, r7
   18dc6:	b00a      	add	sp, #40	; 0x28
   18dc8:	bd80      	pop	{r7, pc}
   18dca:	46c0      	nop			; (mov r8, r8)
   18dcc:	0002e0a8 	.word	0x0002e0a8
   18dd0:	0002e09c 	.word	0x0002e09c

00018dd4 <bench_eccMakeKey>:
#ifndef BENCH_ECC_SIZE
    #define BENCH_ECC_SIZE  32
#endif

void bench_eccMakeKey(int doAsync)
{
   18dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18dd6:	4c92      	ldr	r4, [pc, #584]	; (19020 <bench_eccMakeKey+0x24c>)
   18dd8:	44a5      	add	sp, r4
   18dda:	af06      	add	r7, sp, #24
   18ddc:	6078      	str	r0, [r7, #4]
    int ret = 0, i, times, count, pending = 0;
   18dde:	2300      	movs	r3, #0
   18de0:	22e6      	movs	r2, #230	; 0xe6
   18de2:	0092      	lsls	r2, r2, #2
   18de4:	18ba      	adds	r2, r7, r2
   18de6:	6013      	str	r3, [r2, #0]
   18de8:	2300      	movs	r3, #0
   18dea:	22e3      	movs	r2, #227	; 0xe3
   18dec:	0092      	lsls	r2, r2, #2
   18dee:	18ba      	adds	r2, r7, r2
   18df0:	6013      	str	r3, [r2, #0]
    const int keySize = BENCH_ECC_SIZE;
   18df2:	2320      	movs	r3, #32
   18df4:	22e8      	movs	r2, #232	; 0xe8
   18df6:	0092      	lsls	r2, r2, #2
   18df8:	18ba      	adds	r2, r7, r2
   18dfa:	6013      	str	r3, [r2, #0]
    ecc_key genKey[BENCH_MAX_PENDING];
    double start;
    const char**desc = bench_desc_words[lng_index];
   18dfc:	4b89      	ldr	r3, [pc, #548]	; (19024 <bench_eccMakeKey+0x250>)
   18dfe:	681a      	ldr	r2, [r3, #0]
   18e00:	0013      	movs	r3, r2
   18e02:	00db      	lsls	r3, r3, #3
   18e04:	189b      	adds	r3, r3, r2
   18e06:	009b      	lsls	r3, r3, #2
   18e08:	4a87      	ldr	r2, [pc, #540]	; (19028 <bench_eccMakeKey+0x254>)
   18e0a:	189b      	adds	r3, r3, r2
   18e0c:	22e7      	movs	r2, #231	; 0xe7
   18e0e:	0092      	lsls	r2, r2, #2
   18e10:	18ba      	adds	r2, r7, r2
   18e12:	6013      	str	r3, [r2, #0]

    /* clear for done cleanup */
    XMEMSET(&genKey, 0, sizeof(genKey));
   18e14:	23de      	movs	r3, #222	; 0xde
   18e16:	009a      	lsls	r2, r3, #2
   18e18:	2314      	movs	r3, #20
   18e1a:	18fb      	adds	r3, r7, r3
   18e1c:	2100      	movs	r1, #0
   18e1e:	0018      	movs	r0, r3
   18e20:	f00c fc83 	bl	2572a <memset>

    /* ECC Make Key */
    bench_stats_start(&count, &start);
   18e24:	2308      	movs	r3, #8
   18e26:	18fa      	adds	r2, r7, r3
   18e28:	23e4      	movs	r3, #228	; 0xe4
   18e2a:	009b      	lsls	r3, r3, #2
   18e2c:	18fb      	adds	r3, r7, r3
   18e2e:	0011      	movs	r1, r2
   18e30:	0018      	movs	r0, r3
   18e32:	f7fe f8cd 	bl	16fd0 <bench_stats_start>
    do {
        /* while free pending slots in queue, submit ops */
        for (times = 0; times < genTimes || pending > 0; ) {
   18e36:	2300      	movs	r3, #0
   18e38:	22e5      	movs	r2, #229	; 0xe5
   18e3a:	0092      	lsls	r2, r2, #2
   18e3c:	18ba      	adds	r2, r7, r2
   18e3e:	6013      	str	r3, [r2, #0]
   18e40:	e07d      	b.n	18f3e <bench_eccMakeKey+0x16a>
            bench_async_poll(&pending);

            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18e42:	2300      	movs	r3, #0
   18e44:	22e9      	movs	r2, #233	; 0xe9
   18e46:	0092      	lsls	r2, r2, #2
   18e48:	18ba      	adds	r2, r7, r2
   18e4a:	6013      	str	r3, [r2, #0]
   18e4c:	e071      	b.n	18f32 <bench_eccMakeKey+0x15e>
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 0, &times, genTimes, &pending)) {
   18e4e:	23e5      	movs	r3, #229	; 0xe5
   18e50:	009b      	lsls	r3, r3, #2
   18e52:	18fa      	adds	r2, r7, r3
   18e54:	23e6      	movs	r3, #230	; 0xe6
   18e56:	009b      	lsls	r3, r3, #2
   18e58:	18f8      	adds	r0, r7, r3
   18e5a:	23e3      	movs	r3, #227	; 0xe3
   18e5c:	009b      	lsls	r3, r3, #2
   18e5e:	18fb      	adds	r3, r7, r3
   18e60:	9301      	str	r3, [sp, #4]
   18e62:	2301      	movs	r3, #1
   18e64:	9300      	str	r3, [sp, #0]
   18e66:	0013      	movs	r3, r2
   18e68:	2200      	movs	r2, #0
   18e6a:	2100      	movs	r1, #0
   18e6c:	f7fe f886 	bl	16f7c <bench_async_check>
   18e70:	1e03      	subs	r3, r0, #0
   18e72:	d055      	beq.n	18f20 <bench_eccMakeKey+0x14c>

                    wc_ecc_free(&genKey[i]);
   18e74:	2314      	movs	r3, #20
   18e76:	18fa      	adds	r2, r7, r3
   18e78:	23e9      	movs	r3, #233	; 0xe9
   18e7a:	009b      	lsls	r3, r3, #2
   18e7c:	18fb      	adds	r3, r7, r3
   18e7e:	681b      	ldr	r3, [r3, #0]
   18e80:	21de      	movs	r1, #222	; 0xde
   18e82:	0089      	lsls	r1, r1, #2
   18e84:	434b      	muls	r3, r1
   18e86:	18d3      	adds	r3, r2, r3
   18e88:	0018      	movs	r0, r3
   18e8a:	f7f5 fa3d 	bl	e308 <wc_ecc_free>
                    ret = wc_ecc_init_ex(&genKey[i], HEAP_HINT, doAsync ? devId : INVALID_DEVID);
   18e8e:	2314      	movs	r3, #20
   18e90:	18fa      	adds	r2, r7, r3
   18e92:	23e9      	movs	r3, #233	; 0xe9
   18e94:	009b      	lsls	r3, r3, #2
   18e96:	18fb      	adds	r3, r7, r3
   18e98:	681b      	ldr	r3, [r3, #0]
   18e9a:	21de      	movs	r1, #222	; 0xde
   18e9c:	0089      	lsls	r1, r1, #2
   18e9e:	434b      	muls	r3, r1
   18ea0:	18d0      	adds	r0, r2, r3
   18ea2:	687b      	ldr	r3, [r7, #4]
   18ea4:	2b00      	cmp	r3, #0
   18ea6:	d002      	beq.n	18eae <bench_eccMakeKey+0xda>
   18ea8:	4b60      	ldr	r3, [pc, #384]	; (1902c <bench_eccMakeKey+0x258>)
   18eaa:	681b      	ldr	r3, [r3, #0]
   18eac:	e001      	b.n	18eb2 <bench_eccMakeKey+0xde>
   18eae:	2302      	movs	r3, #2
   18eb0:	425b      	negs	r3, r3
   18eb2:	001a      	movs	r2, r3
   18eb4:	2100      	movs	r1, #0
   18eb6:	f7f5 f85d 	bl	df74 <wc_ecc_init_ex>
   18eba:	0003      	movs	r3, r0
   18ebc:	22e6      	movs	r2, #230	; 0xe6
   18ebe:	0092      	lsls	r2, r2, #2
   18ec0:	18ba      	adds	r2, r7, r2
   18ec2:	6013      	str	r3, [r2, #0]
                    if (ret < 0) {
   18ec4:	23e6      	movs	r3, #230	; 0xe6
   18ec6:	009b      	lsls	r3, r3, #2
   18ec8:	18fb      	adds	r3, r7, r3
   18eca:	681b      	ldr	r3, [r3, #0]
   18ecc:	2b00      	cmp	r3, #0
   18ece:	db5b      	blt.n	18f88 <bench_eccMakeKey+0x1b4>
                        goto exit;
                    }

                    ret = wc_ecc_make_key(&rng, keySize, &genKey[i]);
   18ed0:	2314      	movs	r3, #20
   18ed2:	18fa      	adds	r2, r7, r3
   18ed4:	23e9      	movs	r3, #233	; 0xe9
   18ed6:	009b      	lsls	r3, r3, #2
   18ed8:	18fb      	adds	r3, r7, r3
   18eda:	681b      	ldr	r3, [r3, #0]
   18edc:	21de      	movs	r1, #222	; 0xde
   18ede:	0089      	lsls	r1, r1, #2
   18ee0:	434b      	muls	r3, r1
   18ee2:	18d2      	adds	r2, r2, r3
   18ee4:	23e8      	movs	r3, #232	; 0xe8
   18ee6:	009b      	lsls	r3, r3, #2
   18ee8:	18fb      	adds	r3, r7, r3
   18eea:	6819      	ldr	r1, [r3, #0]
   18eec:	4b50      	ldr	r3, [pc, #320]	; (19030 <bench_eccMakeKey+0x25c>)
   18eee:	0018      	movs	r0, r3
   18ef0:	f7f5 f82e 	bl	df50 <wc_ecc_make_key>
   18ef4:	0003      	movs	r3, r0
   18ef6:	22e6      	movs	r2, #230	; 0xe6
   18ef8:	0092      	lsls	r2, r2, #2
   18efa:	18ba      	adds	r2, r7, r2
   18efc:	6013      	str	r3, [r2, #0]
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 0, &times, &pending)) {
   18efe:	23e5      	movs	r3, #229	; 0xe5
   18f00:	009b      	lsls	r3, r3, #2
   18f02:	18fa      	adds	r2, r7, r3
   18f04:	23e6      	movs	r3, #230	; 0xe6
   18f06:	009b      	lsls	r3, r3, #2
   18f08:	18f8      	adds	r0, r7, r3
   18f0a:	23e3      	movs	r3, #227	; 0xe3
   18f0c:	009b      	lsls	r3, r3, #2
   18f0e:	18fb      	adds	r3, r7, r3
   18f10:	9300      	str	r3, [sp, #0]
   18f12:	0013      	movs	r3, r2
   18f14:	2200      	movs	r2, #0
   18f16:	2100      	movs	r1, #0
   18f18:	f7fe f83c 	bl	16f94 <bench_async_handle>
   18f1c:	1e03      	subs	r3, r0, #0
   18f1e:	d035      	beq.n	18f8c <bench_eccMakeKey+0x1b8>
    do {
        /* while free pending slots in queue, submit ops */
        for (times = 0; times < genTimes || pending > 0; ) {
            bench_async_poll(&pending);

            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18f20:	23e9      	movs	r3, #233	; 0xe9
   18f22:	009b      	lsls	r3, r3, #2
   18f24:	18fb      	adds	r3, r7, r3
   18f26:	681b      	ldr	r3, [r3, #0]
   18f28:	3301      	adds	r3, #1
   18f2a:	22e9      	movs	r2, #233	; 0xe9
   18f2c:	0092      	lsls	r2, r2, #2
   18f2e:	18ba      	adds	r2, r7, r2
   18f30:	6013      	str	r3, [r2, #0]
   18f32:	23e9      	movs	r3, #233	; 0xe9
   18f34:	009b      	lsls	r3, r3, #2
   18f36:	18fb      	adds	r3, r7, r3
   18f38:	681b      	ldr	r3, [r3, #0]
   18f3a:	2b00      	cmp	r3, #0
   18f3c:	dd87      	ble.n	18e4e <bench_eccMakeKey+0x7a>

    /* ECC Make Key */
    bench_stats_start(&count, &start);
    do {
        /* while free pending slots in queue, submit ops */
        for (times = 0; times < genTimes || pending > 0; ) {
   18f3e:	23e5      	movs	r3, #229	; 0xe5
   18f40:	009b      	lsls	r3, r3, #2
   18f42:	18fb      	adds	r3, r7, r3
   18f44:	681b      	ldr	r3, [r3, #0]
   18f46:	2b00      	cmp	r3, #0
   18f48:	dc00      	bgt.n	18f4c <bench_eccMakeKey+0x178>
   18f4a:	e77a      	b.n	18e42 <bench_eccMakeKey+0x6e>
   18f4c:	23e3      	movs	r3, #227	; 0xe3
   18f4e:	009b      	lsls	r3, r3, #2
   18f50:	18fb      	adds	r3, r7, r3
   18f52:	681b      	ldr	r3, [r3, #0]
   18f54:	2b00      	cmp	r3, #0
   18f56:	dd00      	ble.n	18f5a <bench_eccMakeKey+0x186>
   18f58:	e773      	b.n	18e42 <bench_eccMakeKey+0x6e>
                        goto exit;
                    }
                }
            } /* for i */
        } /* for times */
        count += times;
   18f5a:	23e4      	movs	r3, #228	; 0xe4
   18f5c:	009b      	lsls	r3, r3, #2
   18f5e:	18fb      	adds	r3, r7, r3
   18f60:	681a      	ldr	r2, [r3, #0]
   18f62:	23e5      	movs	r3, #229	; 0xe5
   18f64:	009b      	lsls	r3, r3, #2
   18f66:	18fb      	adds	r3, r7, r3
   18f68:	681b      	ldr	r3, [r3, #0]
   18f6a:	18d3      	adds	r3, r2, r3
   18f6c:	22e4      	movs	r2, #228	; 0xe4
   18f6e:	0092      	lsls	r2, r2, #2
   18f70:	18ba      	adds	r2, r7, r2
   18f72:	6013      	str	r3, [r2, #0]
    } while (bench_stats_sym_check(start));
   18f74:	68bb      	ldr	r3, [r7, #8]
   18f76:	68fc      	ldr	r4, [r7, #12]
   18f78:	0018      	movs	r0, r3
   18f7a:	0021      	movs	r1, r4
   18f7c:	f7fe f83c 	bl	16ff8 <bench_stats_sym_check>
   18f80:	1e03      	subs	r3, r0, #0
   18f82:	d000      	beq.n	18f86 <bench_eccMakeKey+0x1b2>
   18f84:	e757      	b.n	18e36 <bench_eccMakeKey+0x62>
   18f86:	e002      	b.n	18f8e <bench_eccMakeKey+0x1ba>
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 0, &times, genTimes, &pending)) {

                    wc_ecc_free(&genKey[i]);
                    ret = wc_ecc_init_ex(&genKey[i], HEAP_HINT, doAsync ? devId : INVALID_DEVID);
                    if (ret < 0) {
                        goto exit;
   18f88:	46c0      	nop			; (mov r8, r8)
   18f8a:	e000      	b.n	18f8e <bench_eccMakeKey+0x1ba>
                    }

                    ret = wc_ecc_make_key(&rng, keySize, &genKey[i]);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 0, &times, &pending)) {
                        goto exit;
   18f8c:	46c0      	nop			; (mov r8, r8)
            } /* for i */
        } /* for times */
        count += times;
    } while (bench_stats_sym_check(start));
exit:
    bench_stats_asym_finish("ECC", keySize * 8, desc[2], doAsync, count, start, ret);
   18f8e:	23e8      	movs	r3, #232	; 0xe8
   18f90:	009b      	lsls	r3, r3, #2
   18f92:	18fb      	adds	r3, r7, r3
   18f94:	681b      	ldr	r3, [r3, #0]
   18f96:	00dd      	lsls	r5, r3, #3
   18f98:	23e7      	movs	r3, #231	; 0xe7
   18f9a:	009b      	lsls	r3, r3, #2
   18f9c:	18fb      	adds	r3, r7, r3
   18f9e:	681b      	ldr	r3, [r3, #0]
   18fa0:	3308      	adds	r3, #8
   18fa2:	681e      	ldr	r6, [r3, #0]
   18fa4:	23e4      	movs	r3, #228	; 0xe4
   18fa6:	009b      	lsls	r3, r3, #2
   18fa8:	18fb      	adds	r3, r7, r3
   18faa:	681a      	ldr	r2, [r3, #0]
   18fac:	68bb      	ldr	r3, [r7, #8]
   18fae:	68fc      	ldr	r4, [r7, #12]
   18fb0:	21e6      	movs	r1, #230	; 0xe6
   18fb2:	0089      	lsls	r1, r1, #2
   18fb4:	1879      	adds	r1, r7, r1
   18fb6:	6809      	ldr	r1, [r1, #0]
   18fb8:	6878      	ldr	r0, [r7, #4]
   18fba:	4684      	mov	ip, r0
   18fbc:	481d      	ldr	r0, [pc, #116]	; (19034 <bench_eccMakeKey+0x260>)
   18fbe:	9104      	str	r1, [sp, #16]
   18fc0:	9302      	str	r3, [sp, #8]
   18fc2:	9403      	str	r4, [sp, #12]
   18fc4:	9200      	str	r2, [sp, #0]
   18fc6:	4663      	mov	r3, ip
   18fc8:	0032      	movs	r2, r6
   18fca:	0029      	movs	r1, r5
   18fcc:	f7fe f9b6 	bl	1733c <bench_stats_asym_finish>

    /* cleanup */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18fd0:	2300      	movs	r3, #0
   18fd2:	22e9      	movs	r2, #233	; 0xe9
   18fd4:	0092      	lsls	r2, r2, #2
   18fd6:	18ba      	adds	r2, r7, r2
   18fd8:	6013      	str	r3, [r2, #0]
   18fda:	e015      	b.n	19008 <bench_eccMakeKey+0x234>
        wc_ecc_free(&genKey[i]);
   18fdc:	2314      	movs	r3, #20
   18fde:	18fa      	adds	r2, r7, r3
   18fe0:	23e9      	movs	r3, #233	; 0xe9
   18fe2:	009b      	lsls	r3, r3, #2
   18fe4:	18fb      	adds	r3, r7, r3
   18fe6:	681b      	ldr	r3, [r3, #0]
   18fe8:	21de      	movs	r1, #222	; 0xde
   18fea:	0089      	lsls	r1, r1, #2
   18fec:	434b      	muls	r3, r1
   18fee:	18d3      	adds	r3, r2, r3
   18ff0:	0018      	movs	r0, r3
   18ff2:	f7f5 f989 	bl	e308 <wc_ecc_free>
    } while (bench_stats_sym_check(start));
exit:
    bench_stats_asym_finish("ECC", keySize * 8, desc[2], doAsync, count, start, ret);

    /* cleanup */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   18ff6:	23e9      	movs	r3, #233	; 0xe9
   18ff8:	009b      	lsls	r3, r3, #2
   18ffa:	18fb      	adds	r3, r7, r3
   18ffc:	681b      	ldr	r3, [r3, #0]
   18ffe:	3301      	adds	r3, #1
   19000:	22e9      	movs	r2, #233	; 0xe9
   19002:	0092      	lsls	r2, r2, #2
   19004:	18ba      	adds	r2, r7, r2
   19006:	6013      	str	r3, [r2, #0]
   19008:	23e9      	movs	r3, #233	; 0xe9
   1900a:	009b      	lsls	r3, r3, #2
   1900c:	18fb      	adds	r3, r7, r3
   1900e:	681b      	ldr	r3, [r3, #0]
   19010:	2b00      	cmp	r3, #0
   19012:	dde3      	ble.n	18fdc <bench_eccMakeKey+0x208>
        wc_ecc_free(&genKey[i]);
    }
}
   19014:	46c0      	nop			; (mov r8, r8)
   19016:	46bd      	mov	sp, r7
   19018:	23eb      	movs	r3, #235	; 0xeb
   1901a:	009b      	lsls	r3, r3, #2
   1901c:	449d      	add	sp, r3
   1901e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19020:	fffffc3c 	.word	0xfffffc3c
   19024:	2000038c 	.word	0x2000038c
   19028:	20000038 	.word	0x20000038
   1902c:	200000a8 	.word	0x200000a8
   19030:	20000390 	.word	0x20000390
   19034:	0002e0c8 	.word	0x0002e0c8

00019038 <bench_ecc>:

void bench_ecc(int doAsync)
{
   19038:	b5f0      	push	{r4, r5, r6, r7, lr}
   1903a:	4ce5      	ldr	r4, [pc, #916]	; (193d0 <bench_ecc+0x398>)
   1903c:	44a5      	add	sp, r4
   1903e:	af06      	add	r7, sp, #24
   19040:	6078      	str	r0, [r7, #4]
    int ret = 0, i, times, count, pending = 0;
   19042:	2300      	movs	r3, #0
   19044:	22f5      	movs	r2, #245	; 0xf5
   19046:	00d2      	lsls	r2, r2, #3
   19048:	18ba      	adds	r2, r7, r2
   1904a:	6013      	str	r3, [r2, #0]
   1904c:	2300      	movs	r3, #0
   1904e:	4ae1      	ldr	r2, [pc, #900]	; (193d4 <bench_ecc+0x39c>)
   19050:	18ba      	adds	r2, r7, r2
   19052:	6013      	str	r3, [r2, #0]
    const int keySize = BENCH_ECC_SIZE;
   19054:	2320      	movs	r3, #32
   19056:	22f6      	movs	r2, #246	; 0xf6
   19058:	00d2      	lsls	r2, r2, #3
   1905a:	18ba      	adds	r2, r7, r2
   1905c:	6013      	str	r3, [r2, #0]
    int    verify[BENCH_MAX_PENDING];
#endif
#endif
    word32 x[BENCH_MAX_PENDING];
    double start;
    const char**desc = bench_desc_words[lng_index];
   1905e:	4bde      	ldr	r3, [pc, #888]	; (193d8 <bench_ecc+0x3a0>)
   19060:	681a      	ldr	r2, [r3, #0]
   19062:	0013      	movs	r3, r2
   19064:	00db      	lsls	r3, r3, #3
   19066:	189b      	adds	r3, r3, r2
   19068:	009b      	lsls	r3, r3, #2
   1906a:	4adc      	ldr	r2, [pc, #880]	; (193dc <bench_ecc+0x3a4>)
   1906c:	189b      	adds	r3, r3, r2
   1906e:	4adc      	ldr	r2, [pc, #880]	; (193e0 <bench_ecc+0x3a8>)
   19070:	18ba      	adds	r2, r7, r2
   19072:	6013      	str	r3, [r2, #0]
    DECLARE_ARRAY(sig, byte, BENCH_MAX_PENDING, ECC_MAX_SIG_SIZE, HEAP_HINT);
#endif
    DECLARE_ARRAY(digest, byte, BENCH_MAX_PENDING, BENCH_ECC_SIZE, HEAP_HINT);

    /* clear for done cleanup */
    XMEMSET(&genKey, 0, sizeof(genKey));
   19074:	23de      	movs	r3, #222	; 0xde
   19076:	009a      	lsls	r2, r3, #2
   19078:	4bda      	ldr	r3, [pc, #872]	; (193e4 <bench_ecc+0x3ac>)
   1907a:	18fb      	adds	r3, r7, r3
   1907c:	2100      	movs	r1, #0
   1907e:	0018      	movs	r0, r3
   19080:	f00c fb53 	bl	2572a <memset>
#ifdef HAVE_ECC_DHE
    XMEMSET(&genKey2, 0, sizeof(genKey2));
   19084:	23de      	movs	r3, #222	; 0xde
   19086:	009a      	lsls	r2, r3, #2
   19088:	23ac      	movs	r3, #172	; 0xac
   1908a:	18fb      	adds	r3, r7, r3
   1908c:	2100      	movs	r1, #0
   1908e:	0018      	movs	r0, r3
   19090:	f00c fb4b 	bl	2572a <memset>
#endif

    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   19094:	2300      	movs	r3, #0
   19096:	4ad4      	ldr	r2, [pc, #848]	; (193e8 <bench_ecc+0x3b0>)
   19098:	18ba      	adds	r2, r7, r2
   1909a:	6013      	str	r3, [r2, #0]
   1909c:	e07c      	b.n	19198 <bench_ecc+0x160>
        /* setup an context for each key */
        if ((ret = wc_ecc_init_ex(&genKey[i], HEAP_HINT,
   1909e:	4bd1      	ldr	r3, [pc, #836]	; (193e4 <bench_ecc+0x3ac>)
   190a0:	18fa      	adds	r2, r7, r3
   190a2:	4bd1      	ldr	r3, [pc, #836]	; (193e8 <bench_ecc+0x3b0>)
   190a4:	18fb      	adds	r3, r7, r3
   190a6:	681b      	ldr	r3, [r3, #0]
   190a8:	21de      	movs	r1, #222	; 0xde
   190aa:	0089      	lsls	r1, r1, #2
   190ac:	434b      	muls	r3, r1
   190ae:	18d0      	adds	r0, r2, r3
   190b0:	687b      	ldr	r3, [r7, #4]
   190b2:	2b00      	cmp	r3, #0
   190b4:	d002      	beq.n	190bc <bench_ecc+0x84>
   190b6:	4bcd      	ldr	r3, [pc, #820]	; (193ec <bench_ecc+0x3b4>)
   190b8:	681b      	ldr	r3, [r3, #0]
   190ba:	e001      	b.n	190c0 <bench_ecc+0x88>
   190bc:	2302      	movs	r3, #2
   190be:	425b      	negs	r3, r3
   190c0:	001a      	movs	r2, r3
   190c2:	2100      	movs	r1, #0
   190c4:	f7f4 ff56 	bl	df74 <wc_ecc_init_ex>
   190c8:	0003      	movs	r3, r0
   190ca:	22f5      	movs	r2, #245	; 0xf5
   190cc:	00d2      	lsls	r2, r2, #3
   190ce:	18ba      	adds	r2, r7, r2
   190d0:	6013      	str	r3, [r2, #0]
   190d2:	23f5      	movs	r3, #245	; 0xf5
   190d4:	00db      	lsls	r3, r3, #3
   190d6:	18fb      	adds	r3, r7, r3
   190d8:	681b      	ldr	r3, [r3, #0]
   190da:	2b00      	cmp	r3, #0
   190dc:	da00      	bge.n	190e0 <bench_ecc+0xa8>
   190de:	e33a      	b.n	19756 <bench_ecc+0x71e>
                                    doAsync ? devId : INVALID_DEVID)) < 0) {
            goto exit;
        }
        ret = wc_ecc_make_key(&rng, keySize, &genKey[i]);
   190e0:	4bc0      	ldr	r3, [pc, #768]	; (193e4 <bench_ecc+0x3ac>)
   190e2:	18fa      	adds	r2, r7, r3
   190e4:	4bc0      	ldr	r3, [pc, #768]	; (193e8 <bench_ecc+0x3b0>)
   190e6:	18fb      	adds	r3, r7, r3
   190e8:	681b      	ldr	r3, [r3, #0]
   190ea:	21de      	movs	r1, #222	; 0xde
   190ec:	0089      	lsls	r1, r1, #2
   190ee:	434b      	muls	r3, r1
   190f0:	18d2      	adds	r2, r2, r3
   190f2:	23f6      	movs	r3, #246	; 0xf6
   190f4:	00db      	lsls	r3, r3, #3
   190f6:	18fb      	adds	r3, r7, r3
   190f8:	6819      	ldr	r1, [r3, #0]
   190fa:	4bbd      	ldr	r3, [pc, #756]	; (193f0 <bench_ecc+0x3b8>)
   190fc:	0018      	movs	r0, r3
   190fe:	f7f4 ff27 	bl	df50 <wc_ecc_make_key>
   19102:	0003      	movs	r3, r0
   19104:	22f5      	movs	r2, #245	; 0xf5
   19106:	00d2      	lsls	r2, r2, #3
   19108:	18ba      	adds	r2, r7, r2
   1910a:	6013      	str	r3, [r2, #0]
    #ifdef WOLFSSL_ASYNC_CRYPT
        ret = wc_AsyncWait(ret, &genKey[i].asyncDev, WC_ASYNC_FLAG_NONE);
    #endif
        if (ret < 0) {
   1910c:	23f5      	movs	r3, #245	; 0xf5
   1910e:	00db      	lsls	r3, r3, #3
   19110:	18fb      	adds	r3, r7, r3
   19112:	681b      	ldr	r3, [r3, #0]
   19114:	2b00      	cmp	r3, #0
   19116:	da00      	bge.n	1911a <bench_ecc+0xe2>
   19118:	e31f      	b.n	1975a <bench_ecc+0x722>
            goto exit;
        }

    #ifdef HAVE_ECC_DHE
        if ((ret = wc_ecc_init_ex(&genKey2[i], HEAP_HINT, INVALID_DEVID)) < 0) {
   1911a:	23ac      	movs	r3, #172	; 0xac
   1911c:	18fa      	adds	r2, r7, r3
   1911e:	4bb2      	ldr	r3, [pc, #712]	; (193e8 <bench_ecc+0x3b0>)
   19120:	18fb      	adds	r3, r7, r3
   19122:	681b      	ldr	r3, [r3, #0]
   19124:	21de      	movs	r1, #222	; 0xde
   19126:	0089      	lsls	r1, r1, #2
   19128:	434b      	muls	r3, r1
   1912a:	18d0      	adds	r0, r2, r3
   1912c:	2302      	movs	r3, #2
   1912e:	425b      	negs	r3, r3
   19130:	001a      	movs	r2, r3
   19132:	2100      	movs	r1, #0
   19134:	f7f4 ff1e 	bl	df74 <wc_ecc_init_ex>
   19138:	0003      	movs	r3, r0
   1913a:	22f5      	movs	r2, #245	; 0xf5
   1913c:	00d2      	lsls	r2, r2, #3
   1913e:	18ba      	adds	r2, r7, r2
   19140:	6013      	str	r3, [r2, #0]
   19142:	23f5      	movs	r3, #245	; 0xf5
   19144:	00db      	lsls	r3, r3, #3
   19146:	18fb      	adds	r3, r7, r3
   19148:	681b      	ldr	r3, [r3, #0]
   1914a:	2b00      	cmp	r3, #0
   1914c:	da00      	bge.n	19150 <bench_ecc+0x118>
   1914e:	e306      	b.n	1975e <bench_ecc+0x726>
            goto exit;
        }
        if ((ret = wc_ecc_make_key(&rng, keySize, &genKey2[i])) > 0) {
   19150:	23ac      	movs	r3, #172	; 0xac
   19152:	18fa      	adds	r2, r7, r3
   19154:	4ba4      	ldr	r3, [pc, #656]	; (193e8 <bench_ecc+0x3b0>)
   19156:	18fb      	adds	r3, r7, r3
   19158:	681b      	ldr	r3, [r3, #0]
   1915a:	21de      	movs	r1, #222	; 0xde
   1915c:	0089      	lsls	r1, r1, #2
   1915e:	434b      	muls	r3, r1
   19160:	18d2      	adds	r2, r2, r3
   19162:	23f6      	movs	r3, #246	; 0xf6
   19164:	00db      	lsls	r3, r3, #3
   19166:	18fb      	adds	r3, r7, r3
   19168:	6819      	ldr	r1, [r3, #0]
   1916a:	4ba1      	ldr	r3, [pc, #644]	; (193f0 <bench_ecc+0x3b8>)
   1916c:	0018      	movs	r0, r3
   1916e:	f7f4 feef 	bl	df50 <wc_ecc_make_key>
   19172:	0003      	movs	r3, r0
   19174:	22f5      	movs	r2, #245	; 0xf5
   19176:	00d2      	lsls	r2, r2, #3
   19178:	18ba      	adds	r2, r7, r2
   1917a:	6013      	str	r3, [r2, #0]
   1917c:	23f5      	movs	r3, #245	; 0xf5
   1917e:	00db      	lsls	r3, r3, #3
   19180:	18fb      	adds	r3, r7, r3
   19182:	681b      	ldr	r3, [r3, #0]
   19184:	2b00      	cmp	r3, #0
   19186:	dd00      	ble.n	1918a <bench_ecc+0x152>
   19188:	e2eb      	b.n	19762 <bench_ecc+0x72a>
#ifdef HAVE_ECC_DHE
    XMEMSET(&genKey2, 0, sizeof(genKey2));
#endif

    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   1918a:	4b97      	ldr	r3, [pc, #604]	; (193e8 <bench_ecc+0x3b0>)
   1918c:	18fb      	adds	r3, r7, r3
   1918e:	681b      	ldr	r3, [r3, #0]
   19190:	3301      	adds	r3, #1
   19192:	4a95      	ldr	r2, [pc, #596]	; (193e8 <bench_ecc+0x3b0>)
   19194:	18ba      	adds	r2, r7, r2
   19196:	6013      	str	r3, [r2, #0]
   19198:	4b93      	ldr	r3, [pc, #588]	; (193e8 <bench_ecc+0x3b0>)
   1919a:	18fb      	adds	r3, r7, r3
   1919c:	681b      	ldr	r3, [r3, #0]
   1919e:	2b00      	cmp	r3, #0
   191a0:	dc00      	bgt.n	191a4 <bench_ecc+0x16c>
   191a2:	e77c      	b.n	1909e <bench_ecc+0x66>
    }

#ifdef HAVE_ECC_DHE

    /* ECC Shared Secret */
    bench_stats_start(&count, &start);
   191a4:	2398      	movs	r3, #152	; 0x98
   191a6:	18fa      	adds	r2, r7, r3
   191a8:	23f4      	movs	r3, #244	; 0xf4
   191aa:	00db      	lsls	r3, r3, #3
   191ac:	18fb      	adds	r3, r7, r3
   191ae:	0011      	movs	r1, r2
   191b0:	0018      	movs	r0, r3
   191b2:	f7fd ff0d 	bl	16fd0 <bench_stats_start>
    do {
        for (times = 0; times < agreeTimes || pending > 0; ) {
   191b6:	2300      	movs	r3, #0
   191b8:	4a8e      	ldr	r2, [pc, #568]	; (193f4 <bench_ecc+0x3bc>)
   191ba:	18ba      	adds	r2, r7, r2
   191bc:	6013      	str	r3, [r2, #0]
   191be:	e068      	b.n	19292 <bench_ecc+0x25a>
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   191c0:	2300      	movs	r3, #0
   191c2:	4a89      	ldr	r2, [pc, #548]	; (193e8 <bench_ecc+0x3b0>)
   191c4:	18ba      	adds	r2, r7, r2
   191c6:	6013      	str	r3, [r2, #0]
   191c8:	e05e      	b.n	19288 <bench_ecc+0x250>
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 1, &times, agreeTimes, &pending)) {
   191ca:	4b8a      	ldr	r3, [pc, #552]	; (193f4 <bench_ecc+0x3bc>)
   191cc:	18fa      	adds	r2, r7, r3
   191ce:	23f5      	movs	r3, #245	; 0xf5
   191d0:	00db      	lsls	r3, r3, #3
   191d2:	18f8      	adds	r0, r7, r3
   191d4:	4b7f      	ldr	r3, [pc, #508]	; (193d4 <bench_ecc+0x39c>)
   191d6:	18fb      	adds	r3, r7, r3
   191d8:	9301      	str	r3, [sp, #4]
   191da:	2302      	movs	r3, #2
   191dc:	9300      	str	r3, [sp, #0]
   191de:	0013      	movs	r3, r2
   191e0:	2201      	movs	r2, #1
   191e2:	2100      	movs	r1, #0
   191e4:	f7fd feca 	bl	16f7c <bench_async_check>
   191e8:	1e03      	subs	r3, r0, #0
   191ea:	d046      	beq.n	1927a <bench_ecc+0x242>
                    x[i] = (word32)keySize;
   191ec:	23f6      	movs	r3, #246	; 0xf6
   191ee:	00db      	lsls	r3, r3, #3
   191f0:	18fb      	adds	r3, r7, r3
   191f2:	681a      	ldr	r2, [r3, #0]
   191f4:	4b7c      	ldr	r3, [pc, #496]	; (193e8 <bench_ecc+0x3b0>)
   191f6:	18fb      	adds	r3, r7, r3
   191f8:	681b      	ldr	r3, [r3, #0]
   191fa:	497f      	ldr	r1, [pc, #508]	; (193f8 <bench_ecc+0x3c0>)
   191fc:	009b      	lsls	r3, r3, #2
   191fe:	20f7      	movs	r0, #247	; 0xf7
   19200:	00c0      	lsls	r0, r0, #3
   19202:	4684      	mov	ip, r0
   19204:	44bc      	add	ip, r7
   19206:	4463      	add	r3, ip
   19208:	185b      	adds	r3, r3, r1
   1920a:	601a      	str	r2, [r3, #0]
                    ret = wc_ecc_shared_secret(&genKey[i], &genKey2[i], shared[i], &x[i]);
   1920c:	4b75      	ldr	r3, [pc, #468]	; (193e4 <bench_ecc+0x3ac>)
   1920e:	18fa      	adds	r2, r7, r3
   19210:	4b75      	ldr	r3, [pc, #468]	; (193e8 <bench_ecc+0x3b0>)
   19212:	18fb      	adds	r3, r7, r3
   19214:	681b      	ldr	r3, [r3, #0]
   19216:	21de      	movs	r1, #222	; 0xde
   19218:	0089      	lsls	r1, r1, #2
   1921a:	434b      	muls	r3, r1
   1921c:	18d0      	adds	r0, r2, r3
   1921e:	23ac      	movs	r3, #172	; 0xac
   19220:	18fa      	adds	r2, r7, r3
   19222:	4b71      	ldr	r3, [pc, #452]	; (193e8 <bench_ecc+0x3b0>)
   19224:	18fb      	adds	r3, r7, r3
   19226:	681b      	ldr	r3, [r3, #0]
   19228:	21de      	movs	r1, #222	; 0xde
   1922a:	0089      	lsls	r1, r1, #2
   1922c:	434b      	muls	r3, r1
   1922e:	18d1      	adds	r1, r2, r3
   19230:	2378      	movs	r3, #120	; 0x78
   19232:	18fa      	adds	r2, r7, r3
   19234:	4b6c      	ldr	r3, [pc, #432]	; (193e8 <bench_ecc+0x3b0>)
   19236:	18fb      	adds	r3, r7, r3
   19238:	681b      	ldr	r3, [r3, #0]
   1923a:	015b      	lsls	r3, r3, #5
   1923c:	18d4      	adds	r4, r2, r3
   1923e:	23a4      	movs	r3, #164	; 0xa4
   19240:	18fa      	adds	r2, r7, r3
   19242:	4b69      	ldr	r3, [pc, #420]	; (193e8 <bench_ecc+0x3b0>)
   19244:	18fb      	adds	r3, r7, r3
   19246:	681b      	ldr	r3, [r3, #0]
   19248:	009b      	lsls	r3, r3, #2
   1924a:	18d3      	adds	r3, r2, r3
   1924c:	0022      	movs	r2, r4
   1924e:	f7f4 fd71 	bl	dd34 <wc_ecc_shared_secret>
   19252:	0003      	movs	r3, r0
   19254:	22f5      	movs	r2, #245	; 0xf5
   19256:	00d2      	lsls	r2, r2, #3
   19258:	18ba      	adds	r2, r7, r2
   1925a:	6013      	str	r3, [r2, #0]
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 1, &times, &pending)) {
   1925c:	4b65      	ldr	r3, [pc, #404]	; (193f4 <bench_ecc+0x3bc>)
   1925e:	18fa      	adds	r2, r7, r3
   19260:	23f5      	movs	r3, #245	; 0xf5
   19262:	00db      	lsls	r3, r3, #3
   19264:	18f8      	adds	r0, r7, r3
   19266:	4b5b      	ldr	r3, [pc, #364]	; (193d4 <bench_ecc+0x39c>)
   19268:	18fb      	adds	r3, r7, r3
   1926a:	9300      	str	r3, [sp, #0]
   1926c:	0013      	movs	r3, r2
   1926e:	2201      	movs	r2, #1
   19270:	2100      	movs	r1, #0
   19272:	f7fd fe8f 	bl	16f94 <bench_async_handle>
   19276:	1e03      	subs	r3, r0, #0
   19278:	d02d      	beq.n	192d6 <bench_ecc+0x29e>
    do {
        for (times = 0; times < agreeTimes || pending > 0; ) {
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   1927a:	4b5b      	ldr	r3, [pc, #364]	; (193e8 <bench_ecc+0x3b0>)
   1927c:	18fb      	adds	r3, r7, r3
   1927e:	681b      	ldr	r3, [r3, #0]
   19280:	3301      	adds	r3, #1
   19282:	4a59      	ldr	r2, [pc, #356]	; (193e8 <bench_ecc+0x3b0>)
   19284:	18ba      	adds	r2, r7, r2
   19286:	6013      	str	r3, [r2, #0]
   19288:	4b57      	ldr	r3, [pc, #348]	; (193e8 <bench_ecc+0x3b0>)
   1928a:	18fb      	adds	r3, r7, r3
   1928c:	681b      	ldr	r3, [r3, #0]
   1928e:	2b00      	cmp	r3, #0
   19290:	dd9b      	ble.n	191ca <bench_ecc+0x192>
#ifdef HAVE_ECC_DHE

    /* ECC Shared Secret */
    bench_stats_start(&count, &start);
    do {
        for (times = 0; times < agreeTimes || pending > 0; ) {
   19292:	4b58      	ldr	r3, [pc, #352]	; (193f4 <bench_ecc+0x3bc>)
   19294:	18fb      	adds	r3, r7, r3
   19296:	681b      	ldr	r3, [r3, #0]
   19298:	2b01      	cmp	r3, #1
   1929a:	dd91      	ble.n	191c0 <bench_ecc+0x188>
   1929c:	4b4d      	ldr	r3, [pc, #308]	; (193d4 <bench_ecc+0x39c>)
   1929e:	18fb      	adds	r3, r7, r3
   192a0:	681b      	ldr	r3, [r3, #0]
   192a2:	2b00      	cmp	r3, #0
   192a4:	dc8c      	bgt.n	191c0 <bench_ecc+0x188>
                        goto exit_ecdhe;
                    }
                }
            } /* for i */
        } /* for times */
        count += times;
   192a6:	23f4      	movs	r3, #244	; 0xf4
   192a8:	00db      	lsls	r3, r3, #3
   192aa:	18fb      	adds	r3, r7, r3
   192ac:	681a      	ldr	r2, [r3, #0]
   192ae:	4b51      	ldr	r3, [pc, #324]	; (193f4 <bench_ecc+0x3bc>)
   192b0:	18fb      	adds	r3, r7, r3
   192b2:	681b      	ldr	r3, [r3, #0]
   192b4:	18d3      	adds	r3, r2, r3
   192b6:	22f4      	movs	r2, #244	; 0xf4
   192b8:	00d2      	lsls	r2, r2, #3
   192ba:	18ba      	adds	r2, r7, r2
   192bc:	6013      	str	r3, [r2, #0]
    } while (bench_stats_sym_check(start));
   192be:	2398      	movs	r3, #152	; 0x98
   192c0:	18fb      	adds	r3, r7, r3
   192c2:	685c      	ldr	r4, [r3, #4]
   192c4:	681b      	ldr	r3, [r3, #0]
   192c6:	0018      	movs	r0, r3
   192c8:	0021      	movs	r1, r4
   192ca:	f7fd fe95 	bl	16ff8 <bench_stats_sym_check>
   192ce:	1e03      	subs	r3, r0, #0
   192d0:	d000      	beq.n	192d4 <bench_ecc+0x29c>
   192d2:	e770      	b.n	191b6 <bench_ecc+0x17e>
   192d4:	e000      	b.n	192d8 <bench_ecc+0x2a0>
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 1, &times, agreeTimes, &pending)) {
                    x[i] = (word32)keySize;
                    ret = wc_ecc_shared_secret(&genKey[i], &genKey2[i], shared[i], &x[i]);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 1, &times, &pending)) {
                        goto exit_ecdhe;
   192d6:	46c0      	nop			; (mov r8, r8)
            } /* for i */
        } /* for times */
        count += times;
    } while (bench_stats_sym_check(start));
exit_ecdhe:
    bench_stats_asym_finish("ECDHE", keySize * 8, desc[3], doAsync, count, start, ret);
   192d8:	23f6      	movs	r3, #246	; 0xf6
   192da:	00db      	lsls	r3, r3, #3
   192dc:	18fb      	adds	r3, r7, r3
   192de:	681b      	ldr	r3, [r3, #0]
   192e0:	00dd      	lsls	r5, r3, #3
   192e2:	4b3f      	ldr	r3, [pc, #252]	; (193e0 <bench_ecc+0x3a8>)
   192e4:	18fb      	adds	r3, r7, r3
   192e6:	681b      	ldr	r3, [r3, #0]
   192e8:	330c      	adds	r3, #12
   192ea:	681e      	ldr	r6, [r3, #0]
   192ec:	23f4      	movs	r3, #244	; 0xf4
   192ee:	00db      	lsls	r3, r3, #3
   192f0:	18fb      	adds	r3, r7, r3
   192f2:	681a      	ldr	r2, [r3, #0]
   192f4:	2398      	movs	r3, #152	; 0x98
   192f6:	18fb      	adds	r3, r7, r3
   192f8:	685c      	ldr	r4, [r3, #4]
   192fa:	681b      	ldr	r3, [r3, #0]
   192fc:	21f5      	movs	r1, #245	; 0xf5
   192fe:	00c9      	lsls	r1, r1, #3
   19300:	1879      	adds	r1, r7, r1
   19302:	6809      	ldr	r1, [r1, #0]
   19304:	6878      	ldr	r0, [r7, #4]
   19306:	4684      	mov	ip, r0
   19308:	483c      	ldr	r0, [pc, #240]	; (193fc <bench_ecc+0x3c4>)
   1930a:	9104      	str	r1, [sp, #16]
   1930c:	9302      	str	r3, [sp, #8]
   1930e:	9403      	str	r4, [sp, #12]
   19310:	9200      	str	r2, [sp, #0]
   19312:	4663      	mov	r3, ip
   19314:	0032      	movs	r2, r6
   19316:	0029      	movs	r1, r5
   19318:	f7fe f810 	bl	1733c <bench_stats_asym_finish>

    if (ret < 0) {
   1931c:	23f5      	movs	r3, #245	; 0xf5
   1931e:	00db      	lsls	r3, r3, #3
   19320:	18fb      	adds	r3, r7, r3
   19322:	681b      	ldr	r3, [r3, #0]
   19324:	2b00      	cmp	r3, #0
   19326:	da00      	bge.n	1932a <bench_ecc+0x2f2>
   19328:	e21d      	b.n	19766 <bench_ecc+0x72e>
#endif /* HAVE_ECC_DHE */

#if !defined(NO_ASN) && defined(HAVE_ECC_SIGN)

    /* Init digest to sign */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   1932a:	2300      	movs	r3, #0
   1932c:	4a2e      	ldr	r2, [pc, #184]	; (193e8 <bench_ecc+0x3b0>)
   1932e:	18ba      	adds	r2, r7, r2
   19330:	6013      	str	r3, [r2, #0]
   19332:	e034      	b.n	1939e <bench_ecc+0x366>
        for (count = 0; count < keySize; count++) {
   19334:	2300      	movs	r3, #0
   19336:	22f4      	movs	r2, #244	; 0xf4
   19338:	00d2      	lsls	r2, r2, #3
   1933a:	18ba      	adds	r2, r7, r2
   1933c:	6013      	str	r3, [r2, #0]
   1933e:	e01d      	b.n	1937c <bench_ecc+0x344>
            digest[i][count] = (byte)count;
   19340:	23f4      	movs	r3, #244	; 0xf4
   19342:	00db      	lsls	r3, r3, #3
   19344:	18fb      	adds	r3, r7, r3
   19346:	681b      	ldr	r3, [r3, #0]
   19348:	22f4      	movs	r2, #244	; 0xf4
   1934a:	00d2      	lsls	r2, r2, #3
   1934c:	18ba      	adds	r2, r7, r2
   1934e:	6812      	ldr	r2, [r2, #0]
   19350:	b2d0      	uxtb	r0, r2
   19352:	4a2b      	ldr	r2, [pc, #172]	; (19400 <bench_ecc+0x3c8>)
   19354:	21f7      	movs	r1, #247	; 0xf7
   19356:	00c9      	lsls	r1, r1, #3
   19358:	1879      	adds	r1, r7, r1
   1935a:	1889      	adds	r1, r1, r2
   1935c:	4a22      	ldr	r2, [pc, #136]	; (193e8 <bench_ecc+0x3b0>)
   1935e:	18ba      	adds	r2, r7, r2
   19360:	6812      	ldr	r2, [r2, #0]
   19362:	0152      	lsls	r2, r2, #5
   19364:	188a      	adds	r2, r1, r2
   19366:	1c01      	adds	r1, r0, #0
   19368:	54d1      	strb	r1, [r2, r3]

#if !defined(NO_ASN) && defined(HAVE_ECC_SIGN)

    /* Init digest to sign */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
        for (count = 0; count < keySize; count++) {
   1936a:	23f4      	movs	r3, #244	; 0xf4
   1936c:	00db      	lsls	r3, r3, #3
   1936e:	18fb      	adds	r3, r7, r3
   19370:	681b      	ldr	r3, [r3, #0]
   19372:	3301      	adds	r3, #1
   19374:	22f4      	movs	r2, #244	; 0xf4
   19376:	00d2      	lsls	r2, r2, #3
   19378:	18ba      	adds	r2, r7, r2
   1937a:	6013      	str	r3, [r2, #0]
   1937c:	23f4      	movs	r3, #244	; 0xf4
   1937e:	00db      	lsls	r3, r3, #3
   19380:	18fb      	adds	r3, r7, r3
   19382:	681a      	ldr	r2, [r3, #0]
   19384:	23f6      	movs	r3, #246	; 0xf6
   19386:	00db      	lsls	r3, r3, #3
   19388:	18fb      	adds	r3, r7, r3
   1938a:	681b      	ldr	r3, [r3, #0]
   1938c:	429a      	cmp	r2, r3
   1938e:	dbd7      	blt.n	19340 <bench_ecc+0x308>
#endif /* HAVE_ECC_DHE */

#if !defined(NO_ASN) && defined(HAVE_ECC_SIGN)

    /* Init digest to sign */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   19390:	4b15      	ldr	r3, [pc, #84]	; (193e8 <bench_ecc+0x3b0>)
   19392:	18fb      	adds	r3, r7, r3
   19394:	681b      	ldr	r3, [r3, #0]
   19396:	3301      	adds	r3, #1
   19398:	4a13      	ldr	r2, [pc, #76]	; (193e8 <bench_ecc+0x3b0>)
   1939a:	18ba      	adds	r2, r7, r2
   1939c:	6013      	str	r3, [r2, #0]
   1939e:	4b12      	ldr	r3, [pc, #72]	; (193e8 <bench_ecc+0x3b0>)
   193a0:	18fb      	adds	r3, r7, r3
   193a2:	681b      	ldr	r3, [r3, #0]
   193a4:	2b00      	cmp	r3, #0
   193a6:	ddc5      	ble.n	19334 <bench_ecc+0x2fc>
            digest[i][count] = (byte)count;
        }
    }

    /* ECC Sign */
    bench_stats_start(&count, &start);
   193a8:	2398      	movs	r3, #152	; 0x98
   193aa:	18fa      	adds	r2, r7, r3
   193ac:	23f4      	movs	r3, #244	; 0xf4
   193ae:	00db      	lsls	r3, r3, #3
   193b0:	18fb      	adds	r3, r7, r3
   193b2:	0011      	movs	r1, r2
   193b4:	0018      	movs	r0, r3
   193b6:	f7fd fe0b 	bl	16fd0 <bench_stats_start>
    do {
        for (times = 0; times < agreeTimes || pending > 0; ) {
   193ba:	2300      	movs	r3, #0
   193bc:	4a0d      	ldr	r2, [pc, #52]	; (193f4 <bench_ecc+0x3bc>)
   193be:	18ba      	adds	r2, r7, r2
   193c0:	6013      	str	r3, [r2, #0]
   193c2:	e098      	b.n	194f6 <bench_ecc+0x4be>
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   193c4:	2300      	movs	r3, #0
   193c6:	4a08      	ldr	r2, [pc, #32]	; (193e8 <bench_ecc+0x3b0>)
   193c8:	18ba      	adds	r2, r7, r2
   193ca:	6013      	str	r3, [r2, #0]
   193cc:	e08e      	b.n	194ec <bench_ecc+0x4b4>
   193ce:	46c0      	nop			; (mov r8, r8)
   193d0:	fffff82c 	.word	0xfffff82c
   193d4:	0000079c 	.word	0x0000079c
   193d8:	2000038c 	.word	0x2000038c
   193dc:	20000038 	.word	0x20000038
   193e0:	000007ac 	.word	0x000007ac
   193e4:	00000424 	.word	0x00000424
   193e8:	000007b4 	.word	0x000007b4
   193ec:	200000a8 	.word	0x200000a8
   193f0:	20000390 	.word	0x20000390
   193f4:	000007a4 	.word	0x000007a4
   193f8:	fffff8ec 	.word	0xfffff8ec
   193fc:	0002e0cc 	.word	0x0002e0cc
   19400:	fffff854 	.word	0xfffff854
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 1, &times, agreeTimes, &pending)) {
   19404:	4bdc      	ldr	r3, [pc, #880]	; (19778 <bench_ecc+0x740>)
   19406:	18fa      	adds	r2, r7, r3
   19408:	23f5      	movs	r3, #245	; 0xf5
   1940a:	00db      	lsls	r3, r3, #3
   1940c:	18f8      	adds	r0, r7, r3
   1940e:	4bdb      	ldr	r3, [pc, #876]	; (1977c <bench_ecc+0x744>)
   19410:	18fb      	adds	r3, r7, r3
   19412:	9301      	str	r3, [sp, #4]
   19414:	2302      	movs	r3, #2
   19416:	9300      	str	r3, [sp, #0]
   19418:	0013      	movs	r3, r2
   1941a:	2201      	movs	r2, #1
   1941c:	2100      	movs	r1, #0
   1941e:	f7fd fdad 	bl	16f7c <bench_async_check>
   19422:	1e03      	subs	r3, r0, #0
   19424:	d05b      	beq.n	194de <bench_ecc+0x4a6>
                    if (genKey[i].state == 0)
   19426:	4bd6      	ldr	r3, [pc, #856]	; (19780 <bench_ecc+0x748>)
   19428:	22f7      	movs	r2, #247	; 0xf7
   1942a:	00d2      	lsls	r2, r2, #3
   1942c:	18ba      	adds	r2, r7, r2
   1942e:	18d2      	adds	r2, r2, r3
   19430:	4bd4      	ldr	r3, [pc, #848]	; (19784 <bench_ecc+0x74c>)
   19432:	18fb      	adds	r3, r7, r3
   19434:	681b      	ldr	r3, [r3, #0]
   19436:	21de      	movs	r1, #222	; 0xde
   19438:	0089      	lsls	r1, r1, #2
   1943a:	434b      	muls	r3, r1
   1943c:	18d3      	adds	r3, r2, r3
   1943e:	3308      	adds	r3, #8
   19440:	681b      	ldr	r3, [r3, #0]
   19442:	2b00      	cmp	r3, #0
   19444:	d10c      	bne.n	19460 <bench_ecc+0x428>
                        x[i] = ECC_MAX_SIG_SIZE;
   19446:	4bcf      	ldr	r3, [pc, #828]	; (19784 <bench_ecc+0x74c>)
   19448:	18fb      	adds	r3, r7, r3
   1944a:	681b      	ldr	r3, [r3, #0]
   1944c:	4ace      	ldr	r2, [pc, #824]	; (19788 <bench_ecc+0x750>)
   1944e:	009b      	lsls	r3, r3, #2
   19450:	21f7      	movs	r1, #247	; 0xf7
   19452:	00c9      	lsls	r1, r1, #3
   19454:	468c      	mov	ip, r1
   19456:	44bc      	add	ip, r7
   19458:	4463      	add	r3, ip
   1945a:	189b      	adds	r3, r3, r2
   1945c:	224a      	movs	r2, #74	; 0x4a
   1945e:	601a      	str	r2, [r3, #0]
                    ret = wc_ecc_sign_hash(digest[i], (word32)keySize, sig[i], &x[i],
   19460:	230c      	movs	r3, #12
   19462:	18fa      	adds	r2, r7, r3
   19464:	4bc7      	ldr	r3, [pc, #796]	; (19784 <bench_ecc+0x74c>)
   19466:	18fb      	adds	r3, r7, r3
   19468:	681b      	ldr	r3, [r3, #0]
   1946a:	015b      	lsls	r3, r3, #5
   1946c:	18d0      	adds	r0, r2, r3
   1946e:	23f6      	movs	r3, #246	; 0xf6
   19470:	00db      	lsls	r3, r3, #3
   19472:	18fb      	adds	r3, r7, r3
   19474:	681c      	ldr	r4, [r3, #0]
   19476:	232c      	movs	r3, #44	; 0x2c
   19478:	18fa      	adds	r2, r7, r3
   1947a:	4bc2      	ldr	r3, [pc, #776]	; (19784 <bench_ecc+0x74c>)
   1947c:	18fb      	adds	r3, r7, r3
   1947e:	681b      	ldr	r3, [r3, #0]
   19480:	214a      	movs	r1, #74	; 0x4a
   19482:	434b      	muls	r3, r1
   19484:	18d5      	adds	r5, r2, r3
   19486:	23a4      	movs	r3, #164	; 0xa4
   19488:	18fa      	adds	r2, r7, r3
   1948a:	4bbe      	ldr	r3, [pc, #760]	; (19784 <bench_ecc+0x74c>)
   1948c:	18fb      	adds	r3, r7, r3
   1948e:	681b      	ldr	r3, [r3, #0]
   19490:	009b      	lsls	r3, r3, #2
   19492:	18d6      	adds	r6, r2, r3
   19494:	4bbd      	ldr	r3, [pc, #756]	; (1978c <bench_ecc+0x754>)
   19496:	18fa      	adds	r2, r7, r3
   19498:	4bba      	ldr	r3, [pc, #744]	; (19784 <bench_ecc+0x74c>)
   1949a:	18fb      	adds	r3, r7, r3
   1949c:	681b      	ldr	r3, [r3, #0]
   1949e:	21de      	movs	r1, #222	; 0xde
   194a0:	0089      	lsls	r1, r1, #2
   194a2:	434b      	muls	r3, r1
   194a4:	18d3      	adds	r3, r2, r3
   194a6:	9301      	str	r3, [sp, #4]
   194a8:	4bb9      	ldr	r3, [pc, #740]	; (19790 <bench_ecc+0x758>)
   194aa:	9300      	str	r3, [sp, #0]
   194ac:	0033      	movs	r3, r6
   194ae:	002a      	movs	r2, r5
   194b0:	0021      	movs	r1, r4
   194b2:	f7f4 fe53 	bl	e15c <wc_ecc_sign_hash>
   194b6:	0003      	movs	r3, r0
   194b8:	22f5      	movs	r2, #245	; 0xf5
   194ba:	00d2      	lsls	r2, r2, #3
   194bc:	18ba      	adds	r2, r7, r2
   194be:	6013      	str	r3, [r2, #0]
                                                            &rng, &genKey[i]);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 1, &times, &pending)) {
   194c0:	4bad      	ldr	r3, [pc, #692]	; (19778 <bench_ecc+0x740>)
   194c2:	18fa      	adds	r2, r7, r3
   194c4:	23f5      	movs	r3, #245	; 0xf5
   194c6:	00db      	lsls	r3, r3, #3
   194c8:	18f8      	adds	r0, r7, r3
   194ca:	4bac      	ldr	r3, [pc, #688]	; (1977c <bench_ecc+0x744>)
   194cc:	18fb      	adds	r3, r7, r3
   194ce:	9300      	str	r3, [sp, #0]
   194d0:	0013      	movs	r3, r2
   194d2:	2201      	movs	r2, #1
   194d4:	2100      	movs	r1, #0
   194d6:	f7fd fd5d 	bl	16f94 <bench_async_handle>
   194da:	1e03      	subs	r3, r0, #0
   194dc:	d02f      	beq.n	1953e <bench_ecc+0x506>
    do {
        for (times = 0; times < agreeTimes || pending > 0; ) {
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   194de:	4ba9      	ldr	r3, [pc, #676]	; (19784 <bench_ecc+0x74c>)
   194e0:	18fb      	adds	r3, r7, r3
   194e2:	681b      	ldr	r3, [r3, #0]
   194e4:	3301      	adds	r3, #1
   194e6:	4aa7      	ldr	r2, [pc, #668]	; (19784 <bench_ecc+0x74c>)
   194e8:	18ba      	adds	r2, r7, r2
   194ea:	6013      	str	r3, [r2, #0]
   194ec:	4ba5      	ldr	r3, [pc, #660]	; (19784 <bench_ecc+0x74c>)
   194ee:	18fb      	adds	r3, r7, r3
   194f0:	681b      	ldr	r3, [r3, #0]
   194f2:	2b00      	cmp	r3, #0
   194f4:	dd86      	ble.n	19404 <bench_ecc+0x3cc>
    }

    /* ECC Sign */
    bench_stats_start(&count, &start);
    do {
        for (times = 0; times < agreeTimes || pending > 0; ) {
   194f6:	4ba0      	ldr	r3, [pc, #640]	; (19778 <bench_ecc+0x740>)
   194f8:	18fb      	adds	r3, r7, r3
   194fa:	681b      	ldr	r3, [r3, #0]
   194fc:	2b01      	cmp	r3, #1
   194fe:	dc00      	bgt.n	19502 <bench_ecc+0x4ca>
   19500:	e760      	b.n	193c4 <bench_ecc+0x38c>
   19502:	4b9e      	ldr	r3, [pc, #632]	; (1977c <bench_ecc+0x744>)
   19504:	18fb      	adds	r3, r7, r3
   19506:	681b      	ldr	r3, [r3, #0]
   19508:	2b00      	cmp	r3, #0
   1950a:	dd00      	ble.n	1950e <bench_ecc+0x4d6>
   1950c:	e75a      	b.n	193c4 <bench_ecc+0x38c>
                        goto exit_ecdsa_sign;
                    }
                }
            } /* for i */
        } /* for times */
        count += times;
   1950e:	23f4      	movs	r3, #244	; 0xf4
   19510:	00db      	lsls	r3, r3, #3
   19512:	18fb      	adds	r3, r7, r3
   19514:	681a      	ldr	r2, [r3, #0]
   19516:	4b98      	ldr	r3, [pc, #608]	; (19778 <bench_ecc+0x740>)
   19518:	18fb      	adds	r3, r7, r3
   1951a:	681b      	ldr	r3, [r3, #0]
   1951c:	18d3      	adds	r3, r2, r3
   1951e:	22f4      	movs	r2, #244	; 0xf4
   19520:	00d2      	lsls	r2, r2, #3
   19522:	18ba      	adds	r2, r7, r2
   19524:	6013      	str	r3, [r2, #0]
    } while (bench_stats_sym_check(start));
   19526:	2398      	movs	r3, #152	; 0x98
   19528:	18fb      	adds	r3, r7, r3
   1952a:	685c      	ldr	r4, [r3, #4]
   1952c:	681b      	ldr	r3, [r3, #0]
   1952e:	0018      	movs	r0, r3
   19530:	0021      	movs	r1, r4
   19532:	f7fd fd61 	bl	16ff8 <bench_stats_sym_check>
   19536:	1e03      	subs	r3, r0, #0
   19538:	d000      	beq.n	1953c <bench_ecc+0x504>
   1953a:	e73e      	b.n	193ba <bench_ecc+0x382>
   1953c:	e000      	b.n	19540 <bench_ecc+0x508>
                    if (genKey[i].state == 0)
                        x[i] = ECC_MAX_SIG_SIZE;
                    ret = wc_ecc_sign_hash(digest[i], (word32)keySize, sig[i], &x[i],
                                                            &rng, &genKey[i]);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 1, &times, &pending)) {
                        goto exit_ecdsa_sign;
   1953e:	46c0      	nop			; (mov r8, r8)
            } /* for i */
        } /* for times */
        count += times;
    } while (bench_stats_sym_check(start));
exit_ecdsa_sign:
    bench_stats_asym_finish("ECDSA", keySize * 8, desc[4], doAsync, count, start, ret);
   19540:	23f6      	movs	r3, #246	; 0xf6
   19542:	00db      	lsls	r3, r3, #3
   19544:	18fb      	adds	r3, r7, r3
   19546:	681b      	ldr	r3, [r3, #0]
   19548:	00dd      	lsls	r5, r3, #3
   1954a:	4b92      	ldr	r3, [pc, #584]	; (19794 <bench_ecc+0x75c>)
   1954c:	18fb      	adds	r3, r7, r3
   1954e:	681b      	ldr	r3, [r3, #0]
   19550:	3310      	adds	r3, #16
   19552:	681e      	ldr	r6, [r3, #0]
   19554:	23f4      	movs	r3, #244	; 0xf4
   19556:	00db      	lsls	r3, r3, #3
   19558:	18fb      	adds	r3, r7, r3
   1955a:	681a      	ldr	r2, [r3, #0]
   1955c:	2398      	movs	r3, #152	; 0x98
   1955e:	18fb      	adds	r3, r7, r3
   19560:	685c      	ldr	r4, [r3, #4]
   19562:	681b      	ldr	r3, [r3, #0]
   19564:	21f5      	movs	r1, #245	; 0xf5
   19566:	00c9      	lsls	r1, r1, #3
   19568:	1879      	adds	r1, r7, r1
   1956a:	6809      	ldr	r1, [r1, #0]
   1956c:	6878      	ldr	r0, [r7, #4]
   1956e:	4684      	mov	ip, r0
   19570:	4889      	ldr	r0, [pc, #548]	; (19798 <bench_ecc+0x760>)
   19572:	9104      	str	r1, [sp, #16]
   19574:	9302      	str	r3, [sp, #8]
   19576:	9403      	str	r4, [sp, #12]
   19578:	9200      	str	r2, [sp, #0]
   1957a:	4663      	mov	r3, ip
   1957c:	0032      	movs	r2, r6
   1957e:	0029      	movs	r1, r5
   19580:	f7fd fedc 	bl	1733c <bench_stats_asym_finish>

    if (ret < 0) {
   19584:	23f5      	movs	r3, #245	; 0xf5
   19586:	00db      	lsls	r3, r3, #3
   19588:	18fb      	adds	r3, r7, r3
   1958a:	681b      	ldr	r3, [r3, #0]
   1958c:	2b00      	cmp	r3, #0
   1958e:	da00      	bge.n	19592 <bench_ecc+0x55a>
   19590:	e0eb      	b.n	1976a <bench_ecc+0x732>
    }

#ifdef HAVE_ECC_VERIFY

    /* ECC Verify */
    bench_stats_start(&count, &start);
   19592:	2398      	movs	r3, #152	; 0x98
   19594:	18fa      	adds	r2, r7, r3
   19596:	23f4      	movs	r3, #244	; 0xf4
   19598:	00db      	lsls	r3, r3, #3
   1959a:	18fb      	adds	r3, r7, r3
   1959c:	0011      	movs	r1, r2
   1959e:	0018      	movs	r0, r3
   195a0:	f7fd fd16 	bl	16fd0 <bench_stats_start>
    do {
        for (times = 0; times < agreeTimes || pending > 0; ) {
   195a4:	2300      	movs	r3, #0
   195a6:	4a74      	ldr	r2, [pc, #464]	; (19778 <bench_ecc+0x740>)
   195a8:	18ba      	adds	r2, r7, r2
   195aa:	6013      	str	r3, [r2, #0]
   195ac:	e08b      	b.n	196c6 <bench_ecc+0x68e>
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   195ae:	2300      	movs	r3, #0
   195b0:	4a74      	ldr	r2, [pc, #464]	; (19784 <bench_ecc+0x74c>)
   195b2:	18ba      	adds	r2, r7, r2
   195b4:	6013      	str	r3, [r2, #0]
   195b6:	e080      	b.n	196ba <bench_ecc+0x682>
                if (bench_async_check(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 1, &times, agreeTimes, &pending)) {
   195b8:	4b6f      	ldr	r3, [pc, #444]	; (19778 <bench_ecc+0x740>)
   195ba:	18fa      	adds	r2, r7, r3
   195bc:	23f5      	movs	r3, #245	; 0xf5
   195be:	00db      	lsls	r3, r3, #3
   195c0:	18f8      	adds	r0, r7, r3
   195c2:	4b6e      	ldr	r3, [pc, #440]	; (1977c <bench_ecc+0x744>)
   195c4:	18fb      	adds	r3, r7, r3
   195c6:	9301      	str	r3, [sp, #4]
   195c8:	2302      	movs	r3, #2
   195ca:	9300      	str	r3, [sp, #0]
   195cc:	0013      	movs	r3, r2
   195ce:	2201      	movs	r2, #1
   195d0:	2100      	movs	r1, #0
   195d2:	f7fd fcd3 	bl	16f7c <bench_async_check>
   195d6:	1e03      	subs	r3, r0, #0
   195d8:	d068      	beq.n	196ac <bench_ecc+0x674>
                    if (genKey[i].state == 0)
   195da:	4b69      	ldr	r3, [pc, #420]	; (19780 <bench_ecc+0x748>)
   195dc:	22f7      	movs	r2, #247	; 0xf7
   195de:	00d2      	lsls	r2, r2, #3
   195e0:	18ba      	adds	r2, r7, r2
   195e2:	18d2      	adds	r2, r2, r3
   195e4:	4b67      	ldr	r3, [pc, #412]	; (19784 <bench_ecc+0x74c>)
   195e6:	18fb      	adds	r3, r7, r3
   195e8:	681b      	ldr	r3, [r3, #0]
   195ea:	21de      	movs	r1, #222	; 0xde
   195ec:	0089      	lsls	r1, r1, #2
   195ee:	434b      	muls	r3, r1
   195f0:	18d3      	adds	r3, r2, r3
   195f2:	3308      	adds	r3, #8
   195f4:	681b      	ldr	r3, [r3, #0]
   195f6:	2b00      	cmp	r3, #0
   195f8:	d10c      	bne.n	19614 <bench_ecc+0x5dc>
                        verify[i] = 0;
   195fa:	4b62      	ldr	r3, [pc, #392]	; (19784 <bench_ecc+0x74c>)
   195fc:	18fb      	adds	r3, r7, r3
   195fe:	681b      	ldr	r3, [r3, #0]
   19600:	4a66      	ldr	r2, [pc, #408]	; (1979c <bench_ecc+0x764>)
   19602:	009b      	lsls	r3, r3, #2
   19604:	21f7      	movs	r1, #247	; 0xf7
   19606:	00c9      	lsls	r1, r1, #3
   19608:	468c      	mov	ip, r1
   1960a:	44bc      	add	ip, r7
   1960c:	4463      	add	r3, ip
   1960e:	189b      	adds	r3, r3, r2
   19610:	2200      	movs	r2, #0
   19612:	601a      	str	r2, [r3, #0]
                    ret = wc_ecc_verify_hash(sig[i], x[i], digest[i],
   19614:	232c      	movs	r3, #44	; 0x2c
   19616:	18fa      	adds	r2, r7, r3
   19618:	4b5a      	ldr	r3, [pc, #360]	; (19784 <bench_ecc+0x74c>)
   1961a:	18fb      	adds	r3, r7, r3
   1961c:	681b      	ldr	r3, [r3, #0]
   1961e:	214a      	movs	r1, #74	; 0x4a
   19620:	434b      	muls	r3, r1
   19622:	18d4      	adds	r4, r2, r3
   19624:	4b57      	ldr	r3, [pc, #348]	; (19784 <bench_ecc+0x74c>)
   19626:	18fb      	adds	r3, r7, r3
   19628:	681b      	ldr	r3, [r3, #0]
   1962a:	4a57      	ldr	r2, [pc, #348]	; (19788 <bench_ecc+0x750>)
   1962c:	009b      	lsls	r3, r3, #2
   1962e:	21f7      	movs	r1, #247	; 0xf7
   19630:	00c9      	lsls	r1, r1, #3
   19632:	468c      	mov	ip, r1
   19634:	44bc      	add	ip, r7
   19636:	4463      	add	r3, ip
   19638:	189b      	adds	r3, r3, r2
   1963a:	681d      	ldr	r5, [r3, #0]
   1963c:	230c      	movs	r3, #12
   1963e:	18fa      	adds	r2, r7, r3
   19640:	4b50      	ldr	r3, [pc, #320]	; (19784 <bench_ecc+0x74c>)
   19642:	18fb      	adds	r3, r7, r3
   19644:	681b      	ldr	r3, [r3, #0]
   19646:	015b      	lsls	r3, r3, #5
   19648:	18d6      	adds	r6, r2, r3
   1964a:	23f6      	movs	r3, #246	; 0xf6
   1964c:	00db      	lsls	r3, r3, #3
   1964e:	18fb      	adds	r3, r7, r3
   19650:	681b      	ldr	r3, [r3, #0]
   19652:	469c      	mov	ip, r3
   19654:	23a8      	movs	r3, #168	; 0xa8
   19656:	18fa      	adds	r2, r7, r3
   19658:	4b4a      	ldr	r3, [pc, #296]	; (19784 <bench_ecc+0x74c>)
   1965a:	18fb      	adds	r3, r7, r3
   1965c:	681b      	ldr	r3, [r3, #0]
   1965e:	009b      	lsls	r3, r3, #2
   19660:	18d3      	adds	r3, r2, r3
   19662:	4a4a      	ldr	r2, [pc, #296]	; (1978c <bench_ecc+0x754>)
   19664:	18b9      	adds	r1, r7, r2
   19666:	4a47      	ldr	r2, [pc, #284]	; (19784 <bench_ecc+0x74c>)
   19668:	18ba      	adds	r2, r7, r2
   1966a:	6812      	ldr	r2, [r2, #0]
   1966c:	20de      	movs	r0, #222	; 0xde
   1966e:	0080      	lsls	r0, r0, #2
   19670:	4342      	muls	r2, r0
   19672:	188a      	adds	r2, r1, r2
   19674:	9201      	str	r2, [sp, #4]
   19676:	9300      	str	r3, [sp, #0]
   19678:	4663      	mov	r3, ip
   1967a:	0032      	movs	r2, r6
   1967c:	0029      	movs	r1, r5
   1967e:	0020      	movs	r0, r4
   19680:	f7f4 fe5c 	bl	e33c <wc_ecc_verify_hash>
   19684:	0003      	movs	r3, r0
   19686:	22f5      	movs	r2, #245	; 0xf5
   19688:	00d2      	lsls	r2, r2, #3
   1968a:	18ba      	adds	r2, r7, r2
   1968c:	6013      	str	r3, [r2, #0]
                                        (word32)keySize, &verify[i], &genKey[i]);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 1, &times, &pending)) {
   1968e:	4b3a      	ldr	r3, [pc, #232]	; (19778 <bench_ecc+0x740>)
   19690:	18fa      	adds	r2, r7, r3
   19692:	23f5      	movs	r3, #245	; 0xf5
   19694:	00db      	lsls	r3, r3, #3
   19696:	18f8      	adds	r0, r7, r3
   19698:	4b38      	ldr	r3, [pc, #224]	; (1977c <bench_ecc+0x744>)
   1969a:	18fb      	adds	r3, r7, r3
   1969c:	9300      	str	r3, [sp, #0]
   1969e:	0013      	movs	r3, r2
   196a0:	2201      	movs	r2, #1
   196a2:	2100      	movs	r1, #0
   196a4:	f7fd fc76 	bl	16f94 <bench_async_handle>
   196a8:	1e03      	subs	r3, r0, #0
   196aa:	d030      	beq.n	1970e <bench_ecc+0x6d6>
    do {
        for (times = 0; times < agreeTimes || pending > 0; ) {
            bench_async_poll(&pending);

            /* while free pending slots in queue, submit ops */
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
   196ac:	4b35      	ldr	r3, [pc, #212]	; (19784 <bench_ecc+0x74c>)
   196ae:	18fb      	adds	r3, r7, r3
   196b0:	681b      	ldr	r3, [r3, #0]
   196b2:	3301      	adds	r3, #1
   196b4:	4a33      	ldr	r2, [pc, #204]	; (19784 <bench_ecc+0x74c>)
   196b6:	18ba      	adds	r2, r7, r2
   196b8:	6013      	str	r3, [r2, #0]
   196ba:	4b32      	ldr	r3, [pc, #200]	; (19784 <bench_ecc+0x74c>)
   196bc:	18fb      	adds	r3, r7, r3
   196be:	681b      	ldr	r3, [r3, #0]
   196c0:	2b00      	cmp	r3, #0
   196c2:	dc00      	bgt.n	196c6 <bench_ecc+0x68e>
   196c4:	e778      	b.n	195b8 <bench_ecc+0x580>
#ifdef HAVE_ECC_VERIFY

    /* ECC Verify */
    bench_stats_start(&count, &start);
    do {
        for (times = 0; times < agreeTimes || pending > 0; ) {
   196c6:	4b2c      	ldr	r3, [pc, #176]	; (19778 <bench_ecc+0x740>)
   196c8:	18fb      	adds	r3, r7, r3
   196ca:	681b      	ldr	r3, [r3, #0]
   196cc:	2b01      	cmp	r3, #1
   196ce:	dc00      	bgt.n	196d2 <bench_ecc+0x69a>
   196d0:	e76d      	b.n	195ae <bench_ecc+0x576>
   196d2:	4b2a      	ldr	r3, [pc, #168]	; (1977c <bench_ecc+0x744>)
   196d4:	18fb      	adds	r3, r7, r3
   196d6:	681b      	ldr	r3, [r3, #0]
   196d8:	2b00      	cmp	r3, #0
   196da:	dd00      	ble.n	196de <bench_ecc+0x6a6>
   196dc:	e767      	b.n	195ae <bench_ecc+0x576>
                        goto exit_ecdsa_verify;
                    }
                }
            } /* for i */
        } /* for times */
        count += times;
   196de:	23f4      	movs	r3, #244	; 0xf4
   196e0:	00db      	lsls	r3, r3, #3
   196e2:	18fb      	adds	r3, r7, r3
   196e4:	681a      	ldr	r2, [r3, #0]
   196e6:	4b24      	ldr	r3, [pc, #144]	; (19778 <bench_ecc+0x740>)
   196e8:	18fb      	adds	r3, r7, r3
   196ea:	681b      	ldr	r3, [r3, #0]
   196ec:	18d3      	adds	r3, r2, r3
   196ee:	22f4      	movs	r2, #244	; 0xf4
   196f0:	00d2      	lsls	r2, r2, #3
   196f2:	18ba      	adds	r2, r7, r2
   196f4:	6013      	str	r3, [r2, #0]
    } while (bench_stats_sym_check(start));
   196f6:	2398      	movs	r3, #152	; 0x98
   196f8:	18fb      	adds	r3, r7, r3
   196fa:	685c      	ldr	r4, [r3, #4]
   196fc:	681b      	ldr	r3, [r3, #0]
   196fe:	0018      	movs	r0, r3
   19700:	0021      	movs	r1, r4
   19702:	f7fd fc79 	bl	16ff8 <bench_stats_sym_check>
   19706:	1e03      	subs	r3, r0, #0
   19708:	d000      	beq.n	1970c <bench_ecc+0x6d4>
   1970a:	e74b      	b.n	195a4 <bench_ecc+0x56c>
   1970c:	e000      	b.n	19710 <bench_ecc+0x6d8>
                    if (genKey[i].state == 0)
                        verify[i] = 0;
                    ret = wc_ecc_verify_hash(sig[i], x[i], digest[i],
                                        (word32)keySize, &verify[i], &genKey[i]);
                    if (!bench_async_handle(&ret, BENCH_ASYNC_GET_DEV(&genKey[i]), 1, &times, &pending)) {
                        goto exit_ecdsa_verify;
   1970e:	46c0      	nop			; (mov r8, r8)
            } /* for i */
        } /* for times */
        count += times;
    } while (bench_stats_sym_check(start));
exit_ecdsa_verify:
    bench_stats_asym_finish("ECDSA", keySize * 8, desc[5], doAsync, count, start, ret);
   19710:	23f6      	movs	r3, #246	; 0xf6
   19712:	00db      	lsls	r3, r3, #3
   19714:	18fb      	adds	r3, r7, r3
   19716:	681b      	ldr	r3, [r3, #0]
   19718:	00dd      	lsls	r5, r3, #3
   1971a:	4b1e      	ldr	r3, [pc, #120]	; (19794 <bench_ecc+0x75c>)
   1971c:	18fb      	adds	r3, r7, r3
   1971e:	681b      	ldr	r3, [r3, #0]
   19720:	3314      	adds	r3, #20
   19722:	681e      	ldr	r6, [r3, #0]
   19724:	23f4      	movs	r3, #244	; 0xf4
   19726:	00db      	lsls	r3, r3, #3
   19728:	18fb      	adds	r3, r7, r3
   1972a:	681a      	ldr	r2, [r3, #0]
   1972c:	2398      	movs	r3, #152	; 0x98
   1972e:	18fb      	adds	r3, r7, r3
   19730:	685c      	ldr	r4, [r3, #4]
   19732:	681b      	ldr	r3, [r3, #0]
   19734:	21f5      	movs	r1, #245	; 0xf5
   19736:	00c9      	lsls	r1, r1, #3
   19738:	1879      	adds	r1, r7, r1
   1973a:	6809      	ldr	r1, [r1, #0]
   1973c:	6878      	ldr	r0, [r7, #4]
   1973e:	4684      	mov	ip, r0
   19740:	4815      	ldr	r0, [pc, #84]	; (19798 <bench_ecc+0x760>)
   19742:	9104      	str	r1, [sp, #16]
   19744:	9302      	str	r3, [sp, #8]
   19746:	9403      	str	r4, [sp, #12]
   19748:	9200      	str	r2, [sp, #0]
   1974a:	4663      	mov	r3, ip
   1974c:	0032      	movs	r2, r6
   1974e:	0029      	movs	r1, r5
   19750:	f7fd fdf4 	bl	1733c <bench_stats_asym_finish>
   19754:	e00a      	b.n	1976c <bench_ecc+0x734>
    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
        /* setup an context for each key */
        if ((ret = wc_ecc_init_ex(&genKey[i], HEAP_HINT,
                                    doAsync ? devId : INVALID_DEVID)) < 0) {
            goto exit;
   19756:	46c0      	nop			; (mov r8, r8)
   19758:	e008      	b.n	1976c <bench_ecc+0x734>
        ret = wc_ecc_make_key(&rng, keySize, &genKey[i]);
    #ifdef WOLFSSL_ASYNC_CRYPT
        ret = wc_AsyncWait(ret, &genKey[i].asyncDev, WC_ASYNC_FLAG_NONE);
    #endif
        if (ret < 0) {
            goto exit;
   1975a:	46c0      	nop			; (mov r8, r8)
   1975c:	e006      	b.n	1976c <bench_ecc+0x734>
        }

    #ifdef HAVE_ECC_DHE
        if ((ret = wc_ecc_init_ex(&genKey2[i], HEAP_HINT, INVALID_DEVID)) < 0) {
            goto exit;
   1975e:	46c0      	nop			; (mov r8, r8)
   19760:	e004      	b.n	1976c <bench_ecc+0x734>
        }
        if ((ret = wc_ecc_make_key(&rng, keySize, &genKey2[i])) > 0) {
            goto exit;
   19762:	46c0      	nop			; (mov r8, r8)
   19764:	e002      	b.n	1976c <bench_ecc+0x734>
    } while (bench_stats_sym_check(start));
exit_ecdhe:
    bench_stats_asym_finish("ECDHE", keySize * 8, desc[3], doAsync, count, start, ret);

    if (ret < 0) {
        goto exit;
   19766:	46c0      	nop			; (mov r8, r8)
   19768:	e000      	b.n	1976c <bench_ecc+0x734>
    } while (bench_stats_sym_check(start));
exit_ecdsa_sign:
    bench_stats_asym_finish("ECDSA", keySize * 8, desc[4], doAsync, count, start, ret);

    if (ret < 0) {
        goto exit;
   1976a:	46c0      	nop			; (mov r8, r8)
#endif /* !NO_ASN && HAVE_ECC_SIGN */

exit:

    /* cleanup */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   1976c:	2300      	movs	r3, #0
   1976e:	4a05      	ldr	r2, [pc, #20]	; (19784 <bench_ecc+0x74c>)
   19770:	18ba      	adds	r2, r7, r2
   19772:	6013      	str	r3, [r2, #0]
   19774:	e033      	b.n	197de <bench_ecc+0x7a6>
   19776:	46c0      	nop			; (mov r8, r8)
   19778:	000007a4 	.word	0x000007a4
   1977c:	0000079c 	.word	0x0000079c
   19780:	fffffc6c 	.word	0xfffffc6c
   19784:	000007b4 	.word	0x000007b4
   19788:	fffff8ec 	.word	0xfffff8ec
   1978c:	00000424 	.word	0x00000424
   19790:	20000390 	.word	0x20000390
   19794:	000007ac 	.word	0x000007ac
   19798:	0002e0d4 	.word	0x0002e0d4
   1979c:	fffff8f0 	.word	0xfffff8f0
        wc_ecc_free(&genKey[i]);
   197a0:	4b14      	ldr	r3, [pc, #80]	; (197f4 <bench_ecc+0x7bc>)
   197a2:	18fa      	adds	r2, r7, r3
   197a4:	4b14      	ldr	r3, [pc, #80]	; (197f8 <bench_ecc+0x7c0>)
   197a6:	18fb      	adds	r3, r7, r3
   197a8:	681b      	ldr	r3, [r3, #0]
   197aa:	21de      	movs	r1, #222	; 0xde
   197ac:	0089      	lsls	r1, r1, #2
   197ae:	434b      	muls	r3, r1
   197b0:	18d3      	adds	r3, r2, r3
   197b2:	0018      	movs	r0, r3
   197b4:	f7f4 fda8 	bl	e308 <wc_ecc_free>
    #ifdef HAVE_ECC_DHE
        wc_ecc_free(&genKey2[i]);
   197b8:	23ac      	movs	r3, #172	; 0xac
   197ba:	18fa      	adds	r2, r7, r3
   197bc:	4b0e      	ldr	r3, [pc, #56]	; (197f8 <bench_ecc+0x7c0>)
   197be:	18fb      	adds	r3, r7, r3
   197c0:	681b      	ldr	r3, [r3, #0]
   197c2:	21de      	movs	r1, #222	; 0xde
   197c4:	0089      	lsls	r1, r1, #2
   197c6:	434b      	muls	r3, r1
   197c8:	18d3      	adds	r3, r2, r3
   197ca:	0018      	movs	r0, r3
   197cc:	f7f4 fd9c 	bl	e308 <wc_ecc_free>
#endif /* !NO_ASN && HAVE_ECC_SIGN */

exit:

    /* cleanup */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
   197d0:	4b09      	ldr	r3, [pc, #36]	; (197f8 <bench_ecc+0x7c0>)
   197d2:	18fb      	adds	r3, r7, r3
   197d4:	681b      	ldr	r3, [r3, #0]
   197d6:	3301      	adds	r3, #1
   197d8:	4a07      	ldr	r2, [pc, #28]	; (197f8 <bench_ecc+0x7c0>)
   197da:	18ba      	adds	r2, r7, r2
   197dc:	6013      	str	r3, [r2, #0]
   197de:	4b06      	ldr	r3, [pc, #24]	; (197f8 <bench_ecc+0x7c0>)
   197e0:	18fb      	adds	r3, r7, r3
   197e2:	681b      	ldr	r3, [r3, #0]
   197e4:	2b00      	cmp	r3, #0
   197e6:	dddb      	ble.n	197a0 <bench_ecc+0x768>
#endif
#if !defined(NO_ASN) && defined(HAVE_ECC_SIGN)
    FREE_ARRAY(sig, BENCH_MAX_PENDING, HEAP_HINT);
#endif
    FREE_ARRAY(digest, BENCH_MAX_PENDING, HEAP_HINT);
}
   197e8:	46c0      	nop			; (mov r8, r8)
   197ea:	46bd      	mov	sp, r7
   197ec:	4b03      	ldr	r3, [pc, #12]	; (197fc <bench_ecc+0x7c4>)
   197ee:	449d      	add	sp, r3
   197f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   197f2:	46c0      	nop			; (mov r8, r8)
   197f4:	00000424 	.word	0x00000424
   197f8:	000007b4 	.word	0x000007b4
   197fc:	000007bc 	.word	0x000007bc

00019800 <atcab_init>:
 *  \param[in] cfg  Logical interface configuration. Some predefined
 *                  configurations can be found in atca_cfgs.h
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_init(ATCAIfaceCfg *cfg)
{
   19800:	b590      	push	{r4, r7, lr}
   19802:	b087      	sub	sp, #28
   19804:	af02      	add	r7, sp, #8
   19806:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   19808:	230f      	movs	r3, #15
   1980a:	18fb      	adds	r3, r7, r3
   1980c:	22e1      	movs	r2, #225	; 0xe1
   1980e:	701a      	strb	r2, [r3, #0]

    // If a device has already been initialized, release it
    if (_gDevice)
   19810:	4b1f      	ldr	r3, [pc, #124]	; (19890 <atcab_init+0x90>)
   19812:	681b      	ldr	r3, [r3, #0]
   19814:	2b00      	cmp	r3, #0
   19816:	d001      	beq.n	1981c <atcab_init+0x1c>
    {
        atcab_release();
   19818:	f000 f83c 	bl	19894 <atcab_release>
    {
        return status;
    }
    _gDevice = &g_atcab_device;
#else
    _gDevice = newATCADevice(cfg);
   1981c:	687b      	ldr	r3, [r7, #4]
   1981e:	0018      	movs	r0, r3
   19820:	f002 fb06 	bl	1be30 <newATCADevice>
   19824:	0002      	movs	r2, r0
   19826:	4b1a      	ldr	r3, [pc, #104]	; (19890 <atcab_init+0x90>)
   19828:	601a      	str	r2, [r3, #0]
    if (_gDevice == NULL)
   1982a:	4b19      	ldr	r3, [pc, #100]	; (19890 <atcab_init+0x90>)
   1982c:	681b      	ldr	r3, [r3, #0]
   1982e:	2b00      	cmp	r3, #0
   19830:	d101      	bne.n	19836 <atcab_init+0x36>
    {
        return ATCA_GEN_FAIL;
   19832:	23e1      	movs	r3, #225	; 0xe1
   19834:	e028      	b.n	19888 <atcab_init+0x88>
    }
#endif

    if (cfg->devtype == ATECC608A)
   19836:	687b      	ldr	r3, [r7, #4]
   19838:	785b      	ldrb	r3, [r3, #1]
   1983a:	2b03      	cmp	r3, #3
   1983c:	d123      	bne.n	19886 <atcab_init+0x86>
    {
        if ((status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
   1983e:	4b14      	ldr	r3, [pc, #80]	; (19890 <atcab_init+0x90>)
   19840:	681b      	ldr	r3, [r3, #0]
   19842:	681b      	ldr	r3, [r3, #0]
   19844:	1c5a      	adds	r2, r3, #1
   19846:	230f      	movs	r3, #15
   19848:	18fc      	adds	r4, r7, r3
   1984a:	2301      	movs	r3, #1
   1984c:	9300      	str	r3, [sp, #0]
   1984e:	0013      	movs	r3, r2
   19850:	2213      	movs	r2, #19
   19852:	2100      	movs	r1, #0
   19854:	2000      	movs	r0, #0
   19856:	f001 fa73 	bl	1ad40 <atcab_read_bytes_zone>
   1985a:	0003      	movs	r3, r0
   1985c:	7023      	strb	r3, [r4, #0]
   1985e:	230f      	movs	r3, #15
   19860:	18fb      	adds	r3, r7, r3
   19862:	781b      	ldrb	r3, [r3, #0]
   19864:	2b00      	cmp	r3, #0
   19866:	d003      	beq.n	19870 <atcab_init+0x70>
        {
            return status;
   19868:	230f      	movs	r3, #15
   1986a:	18fb      	adds	r3, r7, r3
   1986c:	781b      	ldrb	r3, [r3, #0]
   1986e:	e00b      	b.n	19888 <atcab_init+0x88>
        }
        _gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
   19870:	4b07      	ldr	r3, [pc, #28]	; (19890 <atcab_init+0x90>)
   19872:	681b      	ldr	r3, [r3, #0]
   19874:	681a      	ldr	r2, [r3, #0]
   19876:	4b06      	ldr	r3, [pc, #24]	; (19890 <atcab_init+0x90>)
   19878:	681b      	ldr	r3, [r3, #0]
   1987a:	681b      	ldr	r3, [r3, #0]
   1987c:	785b      	ldrb	r3, [r3, #1]
   1987e:	2107      	movs	r1, #7
   19880:	438b      	bics	r3, r1
   19882:	b2db      	uxtb	r3, r3
   19884:	7053      	strb	r3, [r2, #1]
    }

    return ATCA_SUCCESS;
   19886:	2300      	movs	r3, #0
}
   19888:	0018      	movs	r0, r3
   1988a:	46bd      	mov	sp, r7
   1988c:	b005      	add	sp, #20
   1988e:	bd90      	pop	{r4, r7, pc}
   19890:	200003b0 	.word	0x200003b0

00019894 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
   19894:	b580      	push	{r7, lr}
   19896:	af00      	add	r7, sp, #0
    {
        return status;
    }
    _gDevice = NULL;
#else
    deleteATCADevice(&_gDevice);
   19898:	4b03      	ldr	r3, [pc, #12]	; (198a8 <atcab_release+0x14>)
   1989a:	0018      	movs	r0, r3
   1989c:	f002 fb2e 	bl	1befc <deleteATCADevice>
#endif
    return ATCA_SUCCESS;
   198a0:	2300      	movs	r3, #0
}
   198a2:	0018      	movs	r0, r3
   198a4:	46bd      	mov	sp, r7
   198a6:	bd80      	pop	{r7, pc}
   198a8:	200003b0 	.word	0x200003b0

000198ac <atcab_sleep>:

/** \brief invoke sleep on the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sleep(void)
{
   198ac:	b580      	push	{r7, lr}
   198ae:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
   198b0:	4b07      	ldr	r3, [pc, #28]	; (198d0 <atcab_sleep+0x24>)
   198b2:	681b      	ldr	r3, [r3, #0]
   198b4:	2b00      	cmp	r3, #0
   198b6:	d101      	bne.n	198bc <atcab_sleep+0x10>
    {
        return ATCA_GEN_FAIL;
   198b8:	23e1      	movs	r3, #225	; 0xe1
   198ba:	e006      	b.n	198ca <atcab_sleep+0x1e>
    }

    return atsleep(_gDevice->mIface);
   198bc:	4b04      	ldr	r3, [pc, #16]	; (198d0 <atcab_sleep+0x24>)
   198be:	681b      	ldr	r3, [r3, #0]
   198c0:	685b      	ldr	r3, [r3, #4]
   198c2:	0018      	movs	r0, r3
   198c4:	f002 fcfe 	bl	1c2c4 <atsleep>
   198c8:	0003      	movs	r3, r0
}
   198ca:	0018      	movs	r0, r3
   198cc:	46bd      	mov	sp, r7
   198ce:	bd80      	pop	{r7, pc}
   198d0:	200003b0 	.word	0x200003b0

000198d4 <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
   198d4:	b5b0      	push	{r4, r5, r7, lr}
   198d6:	b084      	sub	sp, #16
   198d8:	af00      	add	r7, sp, #0
   198da:	0005      	movs	r5, r0
   198dc:	000c      	movs	r4, r1
   198de:	0010      	movs	r0, r2
   198e0:	0019      	movs	r1, r3
   198e2:	1dfb      	adds	r3, r7, #7
   198e4:	1c2a      	adds	r2, r5, #0
   198e6:	701a      	strb	r2, [r3, #0]
   198e8:	1d3b      	adds	r3, r7, #4
   198ea:	1c22      	adds	r2, r4, #0
   198ec:	801a      	strh	r2, [r3, #0]
   198ee:	1dbb      	adds	r3, r7, #6
   198f0:	1c02      	adds	r2, r0, #0
   198f2:	701a      	strb	r2, [r3, #0]
   198f4:	1cfb      	adds	r3, r7, #3
   198f6:	1c0a      	adds	r2, r1, #0
   198f8:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
   198fa:	230f      	movs	r3, #15
   198fc:	18fb      	adds	r3, r7, r3
   198fe:	2200      	movs	r2, #0
   19900:	701a      	strb	r2, [r3, #0]
    uint8_t mem_zone = zone & 0x03;
   19902:	230e      	movs	r3, #14
   19904:	18fb      	adds	r3, r7, r3
   19906:	1dfa      	adds	r2, r7, #7
   19908:	7812      	ldrb	r2, [r2, #0]
   1990a:	2103      	movs	r1, #3
   1990c:	400a      	ands	r2, r1
   1990e:	701a      	strb	r2, [r3, #0]

    if (addr == NULL)
   19910:	6a3b      	ldr	r3, [r7, #32]
   19912:	2b00      	cmp	r3, #0
   19914:	d101      	bne.n	1991a <atcab_get_addr+0x46>
    {
        return ATCA_BAD_PARAM;
   19916:	23e2      	movs	r3, #226	; 0xe2
   19918:	e052      	b.n	199c0 <atcab_get_addr+0xec>
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
   1991a:	230e      	movs	r3, #14
   1991c:	18fb      	adds	r3, r7, r3
   1991e:	781b      	ldrb	r3, [r3, #0]
   19920:	2b00      	cmp	r3, #0
   19922:	d00b      	beq.n	1993c <atcab_get_addr+0x68>
   19924:	230e      	movs	r3, #14
   19926:	18fb      	adds	r3, r7, r3
   19928:	781b      	ldrb	r3, [r3, #0]
   1992a:	2b02      	cmp	r3, #2
   1992c:	d006      	beq.n	1993c <atcab_get_addr+0x68>
   1992e:	230e      	movs	r3, #14
   19930:	18fb      	adds	r3, r7, r3
   19932:	781b      	ldrb	r3, [r3, #0]
   19934:	2b01      	cmp	r3, #1
   19936:	d001      	beq.n	1993c <atcab_get_addr+0x68>
    {
        return ATCA_BAD_PARAM;
   19938:	23e2      	movs	r3, #226	; 0xe2
   1993a:	e041      	b.n	199c0 <atcab_get_addr+0xec>
    }
    do
    {
        // Initialize the addr to 00
        *addr = 0;
   1993c:	6a3b      	ldr	r3, [r7, #32]
   1993e:	2200      	movs	r2, #0
   19940:	801a      	strh	r2, [r3, #0]
        // Mask the offset
        offset = offset & (uint8_t)0x07;
   19942:	1cfb      	adds	r3, r7, #3
   19944:	1cfa      	adds	r2, r7, #3
   19946:	7812      	ldrb	r2, [r2, #0]
   19948:	2107      	movs	r1, #7
   1994a:	400a      	ands	r2, r1
   1994c:	701a      	strb	r2, [r3, #0]
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
   1994e:	230e      	movs	r3, #14
   19950:	18fb      	adds	r3, r7, r3
   19952:	781b      	ldrb	r3, [r3, #0]
   19954:	2b00      	cmp	r3, #0
   19956:	d004      	beq.n	19962 <atcab_get_addr+0x8e>
   19958:	230e      	movs	r3, #14
   1995a:	18fb      	adds	r3, r7, r3
   1995c:	781b      	ldrb	r3, [r3, #0]
   1995e:	2b01      	cmp	r3, #1
   19960:	d110      	bne.n	19984 <atcab_get_addr+0xb0>
        {
            *addr = block << 3;
   19962:	1dbb      	adds	r3, r7, #6
   19964:	781b      	ldrb	r3, [r3, #0]
   19966:	b29b      	uxth	r3, r3
   19968:	00db      	lsls	r3, r3, #3
   1996a:	b29a      	uxth	r2, r3
   1996c:	6a3b      	ldr	r3, [r7, #32]
   1996e:	801a      	strh	r2, [r3, #0]
            *addr |= offset;
   19970:	6a3b      	ldr	r3, [r7, #32]
   19972:	881a      	ldrh	r2, [r3, #0]
   19974:	1cfb      	adds	r3, r7, #3
   19976:	781b      	ldrb	r3, [r3, #0]
   19978:	b29b      	uxth	r3, r3
   1997a:	4313      	orrs	r3, r2
   1997c:	b29a      	uxth	r2, r3
   1997e:	6a3b      	ldr	r3, [r7, #32]
   19980:	801a      	strh	r2, [r3, #0]
   19982:	e01a      	b.n	199ba <atcab_get_addr+0xe6>
        }
        else     // ATCA_ZONE_DATA
        {
            *addr = slot << 3;
   19984:	1d3b      	adds	r3, r7, #4
   19986:	881b      	ldrh	r3, [r3, #0]
   19988:	00db      	lsls	r3, r3, #3
   1998a:	b29a      	uxth	r2, r3
   1998c:	6a3b      	ldr	r3, [r7, #32]
   1998e:	801a      	strh	r2, [r3, #0]
            *addr  |= offset;
   19990:	6a3b      	ldr	r3, [r7, #32]
   19992:	881a      	ldrh	r2, [r3, #0]
   19994:	1cfb      	adds	r3, r7, #3
   19996:	781b      	ldrb	r3, [r3, #0]
   19998:	b29b      	uxth	r3, r3
   1999a:	4313      	orrs	r3, r2
   1999c:	b29a      	uxth	r2, r3
   1999e:	6a3b      	ldr	r3, [r7, #32]
   199a0:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
   199a2:	6a3b      	ldr	r3, [r7, #32]
   199a4:	881b      	ldrh	r3, [r3, #0]
   199a6:	b21a      	sxth	r2, r3
   199a8:	1dbb      	adds	r3, r7, #6
   199aa:	781b      	ldrb	r3, [r3, #0]
   199ac:	021b      	lsls	r3, r3, #8
   199ae:	b21b      	sxth	r3, r3
   199b0:	4313      	orrs	r3, r2
   199b2:	b21b      	sxth	r3, r3
   199b4:	b29a      	uxth	r2, r3
   199b6:	6a3b      	ldr	r3, [r7, #32]
   199b8:	801a      	strh	r2, [r3, #0]
        }
    }
    while (0);

    return status;
   199ba:	230f      	movs	r3, #15
   199bc:	18fb      	adds	r3, r7, r3
   199be:	781b      	ldrb	r3, [r3, #0]
}
   199c0:	0018      	movs	r0, r3
   199c2:	46bd      	mov	sp, r7
   199c4:	b004      	add	sp, #16
   199c6:	bdb0      	pop	{r4, r5, r7, pc}

000199c8 <atcab_get_zone_size>:
 * \param[out] size  Zone size is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
   199c8:	b580      	push	{r7, lr}
   199ca:	b084      	sub	sp, #16
   199cc:	af00      	add	r7, sp, #0
   199ce:	603a      	str	r2, [r7, #0]
   199d0:	1dfb      	adds	r3, r7, #7
   199d2:	1c02      	adds	r2, r0, #0
   199d4:	701a      	strb	r2, [r3, #0]
   199d6:	1d3b      	adds	r3, r7, #4
   199d8:	1c0a      	adds	r2, r1, #0
   199da:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
   199dc:	230f      	movs	r3, #15
   199de:	18fb      	adds	r3, r7, r3
   199e0:	2200      	movs	r2, #0
   199e2:	701a      	strb	r2, [r3, #0]

    if (size == NULL)
   199e4:	683b      	ldr	r3, [r7, #0]
   199e6:	2b00      	cmp	r3, #0
   199e8:	d101      	bne.n	199ee <atcab_get_zone_size+0x26>
    {
        return ATCA_BAD_PARAM;
   199ea:	23e2      	movs	r3, #226	; 0xe2
   199ec:	e056      	b.n	19a9c <atcab_get_zone_size+0xd4>
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
   199ee:	4b2d      	ldr	r3, [pc, #180]	; (19aa4 <atcab_get_zone_size+0xdc>)
   199f0:	681b      	ldr	r3, [r3, #0]
   199f2:	685b      	ldr	r3, [r3, #4]
   199f4:	685b      	ldr	r3, [r3, #4]
   199f6:	785b      	ldrb	r3, [r3, #1]
   199f8:	2b00      	cmp	r3, #0
   199fa:	d119      	bne.n	19a30 <atcab_get_zone_size+0x68>
    {
        switch (zone)
   199fc:	1dfb      	adds	r3, r7, #7
   199fe:	781b      	ldrb	r3, [r3, #0]
   19a00:	2b01      	cmp	r3, #1
   19a02:	d007      	beq.n	19a14 <atcab_get_zone_size+0x4c>
   19a04:	2b02      	cmp	r3, #2
   19a06:	d009      	beq.n	19a1c <atcab_get_zone_size+0x54>
   19a08:	2b00      	cmp	r3, #0
   19a0a:	d10b      	bne.n	19a24 <atcab_get_zone_size+0x5c>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
   19a0c:	683b      	ldr	r3, [r7, #0]
   19a0e:	2258      	movs	r2, #88	; 0x58
   19a10:	601a      	str	r2, [r3, #0]
   19a12:	e040      	b.n	19a96 <atcab_get_zone_size+0xce>
        case ATCA_ZONE_OTP:    *size = 64; break;
   19a14:	683b      	ldr	r3, [r7, #0]
   19a16:	2240      	movs	r2, #64	; 0x40
   19a18:	601a      	str	r2, [r3, #0]
   19a1a:	e03c      	b.n	19a96 <atcab_get_zone_size+0xce>
        case ATCA_ZONE_DATA:   *size = 32; break;
   19a1c:	683b      	ldr	r3, [r7, #0]
   19a1e:	2220      	movs	r2, #32
   19a20:	601a      	str	r2, [r3, #0]
   19a22:	e038      	b.n	19a96 <atcab_get_zone_size+0xce>
        default: status = ATCA_BAD_PARAM; break;
   19a24:	230f      	movs	r3, #15
   19a26:	18fb      	adds	r3, r7, r3
   19a28:	22e2      	movs	r2, #226	; 0xe2
   19a2a:	701a      	strb	r2, [r3, #0]
   19a2c:	46c0      	nop			; (mov r8, r8)
   19a2e:	e032      	b.n	19a96 <atcab_get_zone_size+0xce>
        }
    }
    else
    {
        switch (zone)
   19a30:	1dfb      	adds	r3, r7, #7
   19a32:	781b      	ldrb	r3, [r3, #0]
   19a34:	2b01      	cmp	r3, #1
   19a36:	d007      	beq.n	19a48 <atcab_get_zone_size+0x80>
   19a38:	2b02      	cmp	r3, #2
   19a3a:	d009      	beq.n	19a50 <atcab_get_zone_size+0x88>
   19a3c:	2b00      	cmp	r3, #0
   19a3e:	d125      	bne.n	19a8c <atcab_get_zone_size+0xc4>
        {
        case ATCA_ZONE_CONFIG: *size = 128; break;
   19a40:	683b      	ldr	r3, [r7, #0]
   19a42:	2280      	movs	r2, #128	; 0x80
   19a44:	601a      	str	r2, [r3, #0]
   19a46:	e026      	b.n	19a96 <atcab_get_zone_size+0xce>
        case ATCA_ZONE_OTP:    *size = 64; break;
   19a48:	683b      	ldr	r3, [r7, #0]
   19a4a:	2240      	movs	r2, #64	; 0x40
   19a4c:	601a      	str	r2, [r3, #0]
   19a4e:	e022      	b.n	19a96 <atcab_get_zone_size+0xce>
        case ATCA_ZONE_DATA:
            if (slot < 8)
   19a50:	1d3b      	adds	r3, r7, #4
   19a52:	881b      	ldrh	r3, [r3, #0]
   19a54:	2b07      	cmp	r3, #7
   19a56:	d803      	bhi.n	19a60 <atcab_get_zone_size+0x98>
            {
                *size = 36;
   19a58:	683b      	ldr	r3, [r7, #0]
   19a5a:	2224      	movs	r2, #36	; 0x24
   19a5c:	601a      	str	r2, [r3, #0]
            }
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
   19a5e:	e01a      	b.n	19a96 <atcab_get_zone_size+0xce>
        case ATCA_ZONE_DATA:
            if (slot < 8)
            {
                *size = 36;
            }
            else if (slot == 8)
   19a60:	1d3b      	adds	r3, r7, #4
   19a62:	881b      	ldrh	r3, [r3, #0]
   19a64:	2b08      	cmp	r3, #8
   19a66:	d104      	bne.n	19a72 <atcab_get_zone_size+0xaa>
            {
                *size = 416;
   19a68:	683b      	ldr	r3, [r7, #0]
   19a6a:	22d0      	movs	r2, #208	; 0xd0
   19a6c:	0052      	lsls	r2, r2, #1
   19a6e:	601a      	str	r2, [r3, #0]
            }
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
   19a70:	e011      	b.n	19a96 <atcab_get_zone_size+0xce>
            }
            else if (slot == 8)
            {
                *size = 416;
            }
            else if (slot < 16)
   19a72:	1d3b      	adds	r3, r7, #4
   19a74:	881b      	ldrh	r3, [r3, #0]
   19a76:	2b0f      	cmp	r3, #15
   19a78:	d803      	bhi.n	19a82 <atcab_get_zone_size+0xba>
            {
                *size = 72;
   19a7a:	683b      	ldr	r3, [r7, #0]
   19a7c:	2248      	movs	r2, #72	; 0x48
   19a7e:	601a      	str	r2, [r3, #0]
            }
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
   19a80:	e009      	b.n	19a96 <atcab_get_zone_size+0xce>
            {
                *size = 72;
            }
            else
            {
                status = ATCA_BAD_PARAM;
   19a82:	230f      	movs	r3, #15
   19a84:	18fb      	adds	r3, r7, r3
   19a86:	22e2      	movs	r2, #226	; 0xe2
   19a88:	701a      	strb	r2, [r3, #0]
            }
            break;
   19a8a:	e004      	b.n	19a96 <atcab_get_zone_size+0xce>
        default: status = ATCA_BAD_PARAM; break;
   19a8c:	230f      	movs	r3, #15
   19a8e:	18fb      	adds	r3, r7, r3
   19a90:	22e2      	movs	r2, #226	; 0xe2
   19a92:	701a      	strb	r2, [r3, #0]
   19a94:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
   19a96:	230f      	movs	r3, #15
   19a98:	18fb      	adds	r3, r7, r3
   19a9a:	781b      	ldrb	r3, [r3, #0]
}
   19a9c:	0018      	movs	r0, r3
   19a9e:	46bd      	mov	sp, r7
   19aa0:	b004      	add	sp, #16
   19aa2:	bd80      	pop	{r7, pc}
   19aa4:	200003b0 	.word	0x200003b0

00019aa8 <atcab_ecdh_base>:
 *  \param[out] out_nonce   Nonce used to encrypt pre-master secret. NULL if
 *                          output encryption not used.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_ecdh_base(uint8_t mode, uint16_t key_id, const uint8_t* public_key, uint8_t* pms, uint8_t* out_nonce)
{
   19aa8:	b590      	push	{r4, r7, lr}
   19aaa:	b0b9      	sub	sp, #228	; 0xe4
   19aac:	af00      	add	r7, sp, #0
   19aae:	60ba      	str	r2, [r7, #8]
   19ab0:	607b      	str	r3, [r7, #4]
   19ab2:	230f      	movs	r3, #15
   19ab4:	18fb      	adds	r3, r7, r3
   19ab6:	1c02      	adds	r2, r0, #0
   19ab8:	701a      	strb	r2, [r3, #0]
   19aba:	230c      	movs	r3, #12
   19abc:	18fb      	adds	r3, r7, r3
   19abe:	1c0a      	adds	r2, r1, #0
   19ac0:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCA_STATUS status = ATCA_GEN_FAIL;
   19ac2:	23df      	movs	r3, #223	; 0xdf
   19ac4:	18fb      	adds	r3, r7, r3
   19ac6:	22e1      	movs	r2, #225	; 0xe1
   19ac8:	701a      	strb	r2, [r3, #0]

    do
    {
        // Build Command
        packet.param1 = mode;
   19aca:	2314      	movs	r3, #20
   19acc:	18fb      	adds	r3, r7, r3
   19ace:	220f      	movs	r2, #15
   19ad0:	18ba      	adds	r2, r7, r2
   19ad2:	7812      	ldrb	r2, [r2, #0]
   19ad4:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
   19ad6:	2314      	movs	r3, #20
   19ad8:	18fb      	adds	r3, r7, r3
   19ada:	220c      	movs	r2, #12
   19adc:	18ba      	adds	r2, r7, r2
   19ade:	8812      	ldrh	r2, [r2, #0]
   19ae0:	809a      	strh	r2, [r3, #4]
        memcpy(packet.data, public_key, ATCA_PUB_KEY_SIZE);
   19ae2:	68b9      	ldr	r1, [r7, #8]
   19ae4:	2314      	movs	r3, #20
   19ae6:	18fb      	adds	r3, r7, r3
   19ae8:	3306      	adds	r3, #6
   19aea:	2240      	movs	r2, #64	; 0x40
   19aec:	0018      	movs	r0, r3
   19aee:	f00b fdfe 	bl	256ee <memcpy>

        if ((status = atECDH(_gDevice->mCommands, &packet)) != ATCA_SUCCESS)
   19af2:	4b29      	ldr	r3, [pc, #164]	; (19b98 <atcab_ecdh_base+0xf0>)
   19af4:	681b      	ldr	r3, [r3, #0]
   19af6:	681b      	ldr	r3, [r3, #0]
   19af8:	22df      	movs	r2, #223	; 0xdf
   19afa:	18bc      	adds	r4, r7, r2
   19afc:	2214      	movs	r2, #20
   19afe:	18ba      	adds	r2, r7, r2
   19b00:	0011      	movs	r1, r2
   19b02:	0018      	movs	r0, r3
   19b04:	f001 fee2 	bl	1b8cc <atECDH>
   19b08:	0003      	movs	r3, r0
   19b0a:	7023      	strb	r3, [r4, #0]
   19b0c:	23df      	movs	r3, #223	; 0xdf
   19b0e:	18fb      	adds	r3, r7, r3
   19b10:	781b      	ldrb	r3, [r3, #0]
   19b12:	2b00      	cmp	r3, #0
   19b14:	d136      	bne.n	19b84 <atcab_ecdh_base+0xdc>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   19b16:	4b20      	ldr	r3, [pc, #128]	; (19b98 <atcab_ecdh_base+0xf0>)
   19b18:	681a      	ldr	r2, [r3, #0]
   19b1a:	23df      	movs	r3, #223	; 0xdf
   19b1c:	18fc      	adds	r4, r7, r3
   19b1e:	2314      	movs	r3, #20
   19b20:	18fb      	adds	r3, r7, r3
   19b22:	0011      	movs	r1, r2
   19b24:	0018      	movs	r0, r3
   19b26:	f002 fa6f 	bl	1c008 <atca_execute_command>
   19b2a:	0003      	movs	r3, r0
   19b2c:	7023      	strb	r3, [r4, #0]
   19b2e:	23df      	movs	r3, #223	; 0xdf
   19b30:	18fb      	adds	r3, r7, r3
   19b32:	781b      	ldrb	r3, [r3, #0]
   19b34:	2b00      	cmp	r3, #0
   19b36:	d127      	bne.n	19b88 <atcab_ecdh_base+0xe0>
        {
            break;
        }

        if (pms != NULL && packet.data[ATCA_COUNT_IDX] >= (3 + ATCA_KEY_SIZE))
   19b38:	687b      	ldr	r3, [r7, #4]
   19b3a:	2b00      	cmp	r3, #0
   19b3c:	d00c      	beq.n	19b58 <atcab_ecdh_base+0xb0>
   19b3e:	2314      	movs	r3, #20
   19b40:	18fb      	adds	r3, r7, r3
   19b42:	799b      	ldrb	r3, [r3, #6]
   19b44:	2b22      	cmp	r3, #34	; 0x22
   19b46:	d907      	bls.n	19b58 <atcab_ecdh_base+0xb0>
        {
            memcpy(pms, &packet.data[ATCA_RSP_DATA_IDX], ATCA_KEY_SIZE);
   19b48:	2314      	movs	r3, #20
   19b4a:	18fb      	adds	r3, r7, r3
   19b4c:	1dd9      	adds	r1, r3, #7
   19b4e:	687b      	ldr	r3, [r7, #4]
   19b50:	2220      	movs	r2, #32
   19b52:	0018      	movs	r0, r3
   19b54:	f00b fdcb 	bl	256ee <memcpy>
        }

        if (out_nonce != NULL && packet.data[ATCA_COUNT_IDX] >= (3 + ATCA_KEY_SIZE * 2))
   19b58:	23f0      	movs	r3, #240	; 0xf0
   19b5a:	18fb      	adds	r3, r7, r3
   19b5c:	681b      	ldr	r3, [r3, #0]
   19b5e:	2b00      	cmp	r3, #0
   19b60:	d013      	beq.n	19b8a <atcab_ecdh_base+0xe2>
   19b62:	2314      	movs	r3, #20
   19b64:	18fb      	adds	r3, r7, r3
   19b66:	799b      	ldrb	r3, [r3, #6]
   19b68:	2b42      	cmp	r3, #66	; 0x42
   19b6a:	d90e      	bls.n	19b8a <atcab_ecdh_base+0xe2>
        {
            memcpy(out_nonce, &packet.data[ATCA_RSP_DATA_IDX + ATCA_KEY_SIZE], ATCA_KEY_SIZE);
   19b6c:	2314      	movs	r3, #20
   19b6e:	18fb      	adds	r3, r7, r3
   19b70:	3327      	adds	r3, #39	; 0x27
   19b72:	0019      	movs	r1, r3
   19b74:	23f0      	movs	r3, #240	; 0xf0
   19b76:	18fb      	adds	r3, r7, r3
   19b78:	681b      	ldr	r3, [r3, #0]
   19b7a:	2220      	movs	r2, #32
   19b7c:	0018      	movs	r0, r3
   19b7e:	f00b fdb6 	bl	256ee <memcpy>
   19b82:	e002      	b.n	19b8a <atcab_ecdh_base+0xe2>
        packet.param2 = key_id;
        memcpy(packet.data, public_key, ATCA_PUB_KEY_SIZE);

        if ((status = atECDH(_gDevice->mCommands, &packet)) != ATCA_SUCCESS)
        {
            break;
   19b84:	46c0      	nop			; (mov r8, r8)
   19b86:	e000      	b.n	19b8a <atcab_ecdh_base+0xe2>
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
        {
            break;
   19b88:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   19b8a:	23df      	movs	r3, #223	; 0xdf
   19b8c:	18fb      	adds	r3, r7, r3
   19b8e:	781b      	ldrb	r3, [r3, #0]
}
   19b90:	0018      	movs	r0, r3
   19b92:	46bd      	mov	sp, r7
   19b94:	b039      	add	sp, #228	; 0xe4
   19b96:	bd90      	pop	{r4, r7, pc}
   19b98:	200003b0 	.word	0x200003b0

00019b9c <atcab_ecdh>:
 *                        32 bytes.
 *
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_ecdh(uint16_t key_id, const uint8_t* public_key, uint8_t* pms)
{
   19b9c:	b590      	push	{r4, r7, lr}
   19b9e:	b089      	sub	sp, #36	; 0x24
   19ba0:	af02      	add	r7, sp, #8
   19ba2:	60b9      	str	r1, [r7, #8]
   19ba4:	607a      	str	r2, [r7, #4]
   19ba6:	230e      	movs	r3, #14
   19ba8:	18fb      	adds	r3, r7, r3
   19baa:	1c02      	adds	r2, r0, #0
   19bac:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status;

    status = atcab_ecdh_base(ECDH_PREFIX_MODE, key_id, public_key, pms, NULL);
   19bae:	2317      	movs	r3, #23
   19bb0:	18fc      	adds	r4, r7, r3
   19bb2:	6878      	ldr	r0, [r7, #4]
   19bb4:	68ba      	ldr	r2, [r7, #8]
   19bb6:	230e      	movs	r3, #14
   19bb8:	18fb      	adds	r3, r7, r3
   19bba:	8819      	ldrh	r1, [r3, #0]
   19bbc:	2300      	movs	r3, #0
   19bbe:	9300      	str	r3, [sp, #0]
   19bc0:	0003      	movs	r3, r0
   19bc2:	2000      	movs	r0, #0
   19bc4:	f7ff ff70 	bl	19aa8 <atcab_ecdh_base>
   19bc8:	0003      	movs	r3, r0
   19bca:	7023      	strb	r3, [r4, #0]

    return status;
   19bcc:	2317      	movs	r3, #23
   19bce:	18fb      	adds	r3, r7, r3
   19bd0:	781b      	ldrb	r3, [r3, #0]
}
   19bd2:	0018      	movs	r0, r3
   19bd4:	46bd      	mov	sp, r7
   19bd6:	b007      	add	sp, #28
   19bd8:	bd90      	pop	{r4, r7, pc}
   19bda:	46c0      	nop			; (mov r8, r8)

00019bdc <atcab_ecdh_enc>:
 *  \param[in]  read_key     Read key for the premaster secret slot (key_id|1).
 *  \param[in]  read_key_id  Read key slot for read_key.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_ecdh_enc(uint16_t key_id, const uint8_t* public_key, uint8_t* pms, const uint8_t* read_key, uint16_t read_key_id)
{
   19bdc:	b590      	push	{r4, r7, lr}
   19bde:	b089      	sub	sp, #36	; 0x24
   19be0:	af02      	add	r7, sp, #8
   19be2:	60b9      	str	r1, [r7, #8]
   19be4:	607a      	str	r2, [r7, #4]
   19be6:	603b      	str	r3, [r7, #0]
   19be8:	230e      	movs	r3, #14
   19bea:	18fb      	adds	r3, r7, r3
   19bec:	1c02      	adds	r2, r0, #0
   19bee:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
   19bf0:	2317      	movs	r3, #23
   19bf2:	18fb      	adds	r3, r7, r3
   19bf4:	2200      	movs	r2, #0
   19bf6:	701a      	strb	r2, [r3, #0]

    do
    {
        // Check the inputs
        if (public_key == NULL || pms == NULL || read_key == NULL)
   19bf8:	68bb      	ldr	r3, [r7, #8]
   19bfa:	2b00      	cmp	r3, #0
   19bfc:	d005      	beq.n	19c0a <atcab_ecdh_enc+0x2e>
   19bfe:	687b      	ldr	r3, [r7, #4]
   19c00:	2b00      	cmp	r3, #0
   19c02:	d002      	beq.n	19c0a <atcab_ecdh_enc+0x2e>
   19c04:	683b      	ldr	r3, [r7, #0]
   19c06:	2b00      	cmp	r3, #0
   19c08:	d10c      	bne.n	19c24 <atcab_ecdh_enc+0x48>
        {
            status = ATCA_BAD_PARAM;
   19c0a:	2317      	movs	r3, #23
   19c0c:	18fb      	adds	r3, r7, r3
   19c0e:	22e2      	movs	r2, #226	; 0xe2
   19c10:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Bad input parameters");
   19c12:	2317      	movs	r3, #23
   19c14:	18fb      	adds	r3, r7, r3
   19c16:	781a      	ldrb	r2, [r3, #0]
   19c18:	4b24      	ldr	r3, [pc, #144]	; (19cac <atcab_ecdh_enc+0xd0>)
   19c1a:	0011      	movs	r1, r2
   19c1c:	0018      	movs	r0, r3
   19c1e:	f00c faaf 	bl	26180 <iprintf>
   19c22:	e03b      	b.n	19c9c <atcab_ecdh_enc+0xc0>
        }

        // Send the ECDH command with the public key provided
        if ((status = atcab_ecdh(key_id, public_key, NULL)) != ATCA_SUCCESS)
   19c24:	2317      	movs	r3, #23
   19c26:	18fc      	adds	r4, r7, r3
   19c28:	68b9      	ldr	r1, [r7, #8]
   19c2a:	230e      	movs	r3, #14
   19c2c:	18fb      	adds	r3, r7, r3
   19c2e:	881b      	ldrh	r3, [r3, #0]
   19c30:	2200      	movs	r2, #0
   19c32:	0018      	movs	r0, r3
   19c34:	f7ff ffb2 	bl	19b9c <atcab_ecdh>
   19c38:	0003      	movs	r3, r0
   19c3a:	7023      	strb	r3, [r4, #0]
   19c3c:	2317      	movs	r3, #23
   19c3e:	18fb      	adds	r3, r7, r3
   19c40:	781b      	ldrb	r3, [r3, #0]
   19c42:	2b00      	cmp	r3, #0
   19c44:	d008      	beq.n	19c58 <atcab_ecdh_enc+0x7c>
        {
            BREAK(status, "ECDH Failed");
   19c46:	2317      	movs	r3, #23
   19c48:	18fb      	adds	r3, r7, r3
   19c4a:	781a      	ldrb	r2, [r3, #0]
   19c4c:	4b18      	ldr	r3, [pc, #96]	; (19cb0 <atcab_ecdh_enc+0xd4>)
   19c4e:	0011      	movs	r1, r2
   19c50:	0018      	movs	r0, r3
   19c52:	f00c fa95 	bl	26180 <iprintf>
   19c56:	e021      	b.n	19c9c <atcab_ecdh_enc+0xc0>
        }

        if ((status = atcab_read_enc(key_id | 0x0001, 0, pms, read_key, read_key_id)) != ATCA_SUCCESS)
   19c58:	230e      	movs	r3, #14
   19c5a:	18fb      	adds	r3, r7, r3
   19c5c:	881b      	ldrh	r3, [r3, #0]
   19c5e:	2201      	movs	r2, #1
   19c60:	4313      	orrs	r3, r2
   19c62:	b298      	uxth	r0, r3
   19c64:	2317      	movs	r3, #23
   19c66:	18fc      	adds	r4, r7, r3
   19c68:	6839      	ldr	r1, [r7, #0]
   19c6a:	687a      	ldr	r2, [r7, #4]
   19c6c:	2328      	movs	r3, #40	; 0x28
   19c6e:	18fb      	adds	r3, r7, r3
   19c70:	881b      	ldrh	r3, [r3, #0]
   19c72:	9300      	str	r3, [sp, #0]
   19c74:	000b      	movs	r3, r1
   19c76:	2100      	movs	r1, #0
   19c78:	f000 fea6 	bl	1a9c8 <atcab_read_enc>
   19c7c:	0003      	movs	r3, r0
   19c7e:	7023      	strb	r3, [r4, #0]
   19c80:	2317      	movs	r3, #23
   19c82:	18fb      	adds	r3, r7, r3
   19c84:	781b      	ldrb	r3, [r3, #0]
   19c86:	2b00      	cmp	r3, #0
   19c88:	d008      	beq.n	19c9c <atcab_ecdh_enc+0xc0>
        {
            BREAK(status, "Encrypted read failed");
   19c8a:	2317      	movs	r3, #23
   19c8c:	18fb      	adds	r3, r7, r3
   19c8e:	781a      	ldrb	r2, [r3, #0]
   19c90:	4b08      	ldr	r3, [pc, #32]	; (19cb4 <atcab_ecdh_enc+0xd8>)
   19c92:	0011      	movs	r1, r2
   19c94:	0018      	movs	r0, r3
   19c96:	f00c fa73 	bl	26180 <iprintf>
   19c9a:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);

    return status;
   19c9c:	2317      	movs	r3, #23
   19c9e:	18fb      	adds	r3, r7, r3
   19ca0:	781b      	ldrb	r3, [r3, #0]
}
   19ca2:	0018      	movs	r0, r3
   19ca4:	46bd      	mov	sp, r7
   19ca6:	b007      	add	sp, #28
   19ca8:	bd90      	pop	{r4, r7, pc}
   19caa:	46c0      	nop			; (mov r8, r8)
   19cac:	0002e114 	.word	0x0002e114
   19cb0:	0002e140 	.word	0x0002e140
   19cb4:	0002e160 	.word	0x0002e160

00019cb8 <atcab_gendig>:
 *                              "Shared Nonce" mode, otherwise ignored (can be NULL).
 *  \param[in] other_data_size  Size of other_data in bytes.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_gendig(uint8_t zone, uint16_t key_id, const uint8_t *other_data, uint8_t other_data_size)
{
   19cb8:	b590      	push	{r4, r7, lr}
   19cba:	b0b7      	sub	sp, #220	; 0xdc
   19cbc:	af00      	add	r7, sp, #0
   19cbe:	0004      	movs	r4, r0
   19cc0:	0008      	movs	r0, r1
   19cc2:	603a      	str	r2, [r7, #0]
   19cc4:	0019      	movs	r1, r3
   19cc6:	1dfb      	adds	r3, r7, #7
   19cc8:	1c22      	adds	r2, r4, #0
   19cca:	701a      	strb	r2, [r3, #0]
   19ccc:	1d3b      	adds	r3, r7, #4
   19cce:	1c02      	adds	r2, r0, #0
   19cd0:	801a      	strh	r2, [r3, #0]
   19cd2:	1dbb      	adds	r3, r7, #6
   19cd4:	1c0a      	adds	r2, r1, #0
   19cd6:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   19cd8:	4b38      	ldr	r3, [pc, #224]	; (19dbc <atcab_gendig+0x104>)
   19cda:	681b      	ldr	r3, [r3, #0]
   19cdc:	681b      	ldr	r3, [r3, #0]
   19cde:	22d0      	movs	r2, #208	; 0xd0
   19ce0:	18ba      	adds	r2, r7, r2
   19ce2:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   19ce4:	23d7      	movs	r3, #215	; 0xd7
   19ce6:	18fb      	adds	r3, r7, r3
   19ce8:	22e1      	movs	r2, #225	; 0xe1
   19cea:	701a      	strb	r2, [r3, #0]
    bool is_no_mac_key = false;
   19cec:	23d6      	movs	r3, #214	; 0xd6
   19cee:	18fb      	adds	r3, r7, r3
   19cf0:	2200      	movs	r2, #0
   19cf2:	701a      	strb	r2, [r3, #0]

    if (other_data_size > 0 && other_data == NULL)
   19cf4:	1dbb      	adds	r3, r7, #6
   19cf6:	781b      	ldrb	r3, [r3, #0]
   19cf8:	2b00      	cmp	r3, #0
   19cfa:	d004      	beq.n	19d06 <atcab_gendig+0x4e>
   19cfc:	683b      	ldr	r3, [r7, #0]
   19cfe:	2b00      	cmp	r3, #0
   19d00:	d101      	bne.n	19d06 <atcab_gendig+0x4e>
    {
        return ATCA_BAD_PARAM;
   19d02:	23e2      	movs	r3, #226	; 0xe2
   19d04:	e055      	b.n	19db2 <atcab_gendig+0xfa>
    }

    do
    {
        // build gendig command
        packet.param1 = zone;
   19d06:	2308      	movs	r3, #8
   19d08:	18fb      	adds	r3, r7, r3
   19d0a:	1dfa      	adds	r2, r7, #7
   19d0c:	7812      	ldrb	r2, [r2, #0]
   19d0e:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
   19d10:	2308      	movs	r3, #8
   19d12:	18fb      	adds	r3, r7, r3
   19d14:	1d3a      	adds	r2, r7, #4
   19d16:	8812      	ldrh	r2, [r2, #0]
   19d18:	809a      	strh	r2, [r3, #4]

        if (packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
   19d1a:	2308      	movs	r3, #8
   19d1c:	18fb      	adds	r3, r7, r3
   19d1e:	78db      	ldrb	r3, [r3, #3]
   19d20:	2b03      	cmp	r3, #3
   19d22:	d10c      	bne.n	19d3e <atcab_gendig+0x86>
   19d24:	1dbb      	adds	r3, r7, #6
   19d26:	781b      	ldrb	r3, [r3, #0]
   19d28:	2b1f      	cmp	r3, #31
   19d2a:	d908      	bls.n	19d3e <atcab_gendig+0x86>
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_BLOCK_SIZE);
   19d2c:	6839      	ldr	r1, [r7, #0]
   19d2e:	2308      	movs	r3, #8
   19d30:	18fb      	adds	r3, r7, r3
   19d32:	3306      	adds	r3, #6
   19d34:	2220      	movs	r2, #32
   19d36:	0018      	movs	r0, r3
   19d38:	f00b fcd9 	bl	256ee <memcpy>
   19d3c:	e014      	b.n	19d68 <atcab_gendig+0xb0>
        }
        else if (packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE)
   19d3e:	2308      	movs	r3, #8
   19d40:	18fb      	adds	r3, r7, r3
   19d42:	78db      	ldrb	r3, [r3, #3]
   19d44:	2b02      	cmp	r3, #2
   19d46:	d10f      	bne.n	19d68 <atcab_gendig+0xb0>
   19d48:	1dbb      	adds	r3, r7, #6
   19d4a:	781b      	ldrb	r3, [r3, #0]
   19d4c:	2b03      	cmp	r3, #3
   19d4e:	d90b      	bls.n	19d68 <atcab_gendig+0xb0>
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_WORD_SIZE);
   19d50:	6839      	ldr	r1, [r7, #0]
   19d52:	2308      	movs	r3, #8
   19d54:	18fb      	adds	r3, r7, r3
   19d56:	3306      	adds	r3, #6
   19d58:	2204      	movs	r2, #4
   19d5a:	0018      	movs	r0, r3
   19d5c:	f00b fcc7 	bl	256ee <memcpy>
            is_no_mac_key = true;
   19d60:	23d6      	movs	r3, #214	; 0xd6
   19d62:	18fb      	adds	r3, r7, r3
   19d64:	2201      	movs	r2, #1
   19d66:	701a      	strb	r2, [r3, #0]
        }

        if ((status = atGenDig(ca_cmd, &packet, is_no_mac_key)) != ATCA_SUCCESS)
   19d68:	23d7      	movs	r3, #215	; 0xd7
   19d6a:	18fc      	adds	r4, r7, r3
   19d6c:	23d6      	movs	r3, #214	; 0xd6
   19d6e:	18fb      	adds	r3, r7, r3
   19d70:	781a      	ldrb	r2, [r3, #0]
   19d72:	2308      	movs	r3, #8
   19d74:	18f9      	adds	r1, r7, r3
   19d76:	23d0      	movs	r3, #208	; 0xd0
   19d78:	18fb      	adds	r3, r7, r3
   19d7a:	681b      	ldr	r3, [r3, #0]
   19d7c:	0018      	movs	r0, r3
   19d7e:	f001 fdb9 	bl	1b8f4 <atGenDig>
   19d82:	0003      	movs	r3, r0
   19d84:	7023      	strb	r3, [r4, #0]
   19d86:	23d7      	movs	r3, #215	; 0xd7
   19d88:	18fb      	adds	r3, r7, r3
   19d8a:	781b      	ldrb	r3, [r3, #0]
   19d8c:	2b00      	cmp	r3, #0
   19d8e:	d10c      	bne.n	19daa <atcab_gendig+0xf2>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   19d90:	4b0a      	ldr	r3, [pc, #40]	; (19dbc <atcab_gendig+0x104>)
   19d92:	681a      	ldr	r2, [r3, #0]
   19d94:	23d7      	movs	r3, #215	; 0xd7
   19d96:	18fc      	adds	r4, r7, r3
   19d98:	2308      	movs	r3, #8
   19d9a:	18fb      	adds	r3, r7, r3
   19d9c:	0011      	movs	r1, r2
   19d9e:	0018      	movs	r0, r3
   19da0:	f002 f932 	bl	1c008 <atca_execute_command>
   19da4:	0003      	movs	r3, r0
   19da6:	7023      	strb	r3, [r4, #0]
   19da8:	e000      	b.n	19dac <atcab_gendig+0xf4>
            is_no_mac_key = true;
        }

        if ((status = atGenDig(ca_cmd, &packet, is_no_mac_key)) != ATCA_SUCCESS)
        {
            break;
   19daa:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   19dac:	23d7      	movs	r3, #215	; 0xd7
   19dae:	18fb      	adds	r3, r7, r3
   19db0:	781b      	ldrb	r3, [r3, #0]
}
   19db2:	0018      	movs	r0, r3
   19db4:	46bd      	mov	sp, r7
   19db6:	b037      	add	sp, #220	; 0xdc
   19db8:	bd90      	pop	{r4, r7, pc}
   19dba:	46c0      	nop			; (mov r8, r8)
   19dbc:	200003b0 	.word	0x200003b0

00019dc0 <atcab_genkey_base>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_genkey_base(uint8_t mode, uint16_t key_id, const uint8_t* other_data, uint8_t* public_key)
{
   19dc0:	b590      	push	{r4, r7, lr}
   19dc2:	b0b9      	sub	sp, #228	; 0xe4
   19dc4:	af00      	add	r7, sp, #0
   19dc6:	60ba      	str	r2, [r7, #8]
   19dc8:	607b      	str	r3, [r7, #4]
   19dca:	230f      	movs	r3, #15
   19dcc:	18fb      	adds	r3, r7, r3
   19dce:	1c02      	adds	r2, r0, #0
   19dd0:	701a      	strb	r2, [r3, #0]
   19dd2:	230c      	movs	r3, #12
   19dd4:	18fb      	adds	r3, r7, r3
   19dd6:	1c0a      	adds	r2, r1, #0
   19dd8:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   19dda:	4b31      	ldr	r3, [pc, #196]	; (19ea0 <atcab_genkey_base+0xe0>)
   19ddc:	681b      	ldr	r3, [r3, #0]
   19dde:	681b      	ldr	r3, [r3, #0]
   19de0:	22d8      	movs	r2, #216	; 0xd8
   19de2:	18ba      	adds	r2, r7, r2
   19de4:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   19de6:	23df      	movs	r3, #223	; 0xdf
   19de8:	18fb      	adds	r3, r7, r3
   19dea:	22e1      	movs	r2, #225	; 0xe1
   19dec:	701a      	strb	r2, [r3, #0]

    do
    {
        // Build GenKey command
        packet.param1 = mode;
   19dee:	2310      	movs	r3, #16
   19df0:	18fb      	adds	r3, r7, r3
   19df2:	220f      	movs	r2, #15
   19df4:	18ba      	adds	r2, r7, r2
   19df6:	7812      	ldrb	r2, [r2, #0]
   19df8:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
   19dfa:	2310      	movs	r3, #16
   19dfc:	18fb      	adds	r3, r7, r3
   19dfe:	220c      	movs	r2, #12
   19e00:	18ba      	adds	r2, r7, r2
   19e02:	8812      	ldrh	r2, [r2, #0]
   19e04:	809a      	strh	r2, [r3, #4]
        if (other_data)
   19e06:	68bb      	ldr	r3, [r7, #8]
   19e08:	2b00      	cmp	r3, #0
   19e0a:	d007      	beq.n	19e1c <atcab_genkey_base+0x5c>
        {
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
   19e0c:	68b9      	ldr	r1, [r7, #8]
   19e0e:	2310      	movs	r3, #16
   19e10:	18fb      	adds	r3, r7, r3
   19e12:	3306      	adds	r3, #6
   19e14:	2203      	movs	r2, #3
   19e16:	0018      	movs	r0, r3
   19e18:	f00b fc69 	bl	256ee <memcpy>
        }

        if ((status = atGenKey(ca_cmd, &packet)) != ATCA_SUCCESS)
   19e1c:	23df      	movs	r3, #223	; 0xdf
   19e1e:	18fc      	adds	r4, r7, r3
   19e20:	2310      	movs	r3, #16
   19e22:	18fa      	adds	r2, r7, r3
   19e24:	23d8      	movs	r3, #216	; 0xd8
   19e26:	18fb      	adds	r3, r7, r3
   19e28:	681b      	ldr	r3, [r3, #0]
   19e2a:	0011      	movs	r1, r2
   19e2c:	0018      	movs	r0, r3
   19e2e:	f001 fd87 	bl	1b940 <atGenKey>
   19e32:	0003      	movs	r3, r0
   19e34:	7023      	strb	r3, [r4, #0]
   19e36:	23df      	movs	r3, #223	; 0xdf
   19e38:	18fb      	adds	r3, r7, r3
   19e3a:	781b      	ldrb	r3, [r3, #0]
   19e3c:	2b00      	cmp	r3, #0
   19e3e:	d125      	bne.n	19e8c <atcab_genkey_base+0xcc>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   19e40:	4b17      	ldr	r3, [pc, #92]	; (19ea0 <atcab_genkey_base+0xe0>)
   19e42:	681a      	ldr	r2, [r3, #0]
   19e44:	23df      	movs	r3, #223	; 0xdf
   19e46:	18fc      	adds	r4, r7, r3
   19e48:	2310      	movs	r3, #16
   19e4a:	18fb      	adds	r3, r7, r3
   19e4c:	0011      	movs	r1, r2
   19e4e:	0018      	movs	r0, r3
   19e50:	f002 f8da 	bl	1c008 <atca_execute_command>
   19e54:	0003      	movs	r3, r0
   19e56:	7023      	strb	r3, [r4, #0]
   19e58:	23df      	movs	r3, #223	; 0xdf
   19e5a:	18fb      	adds	r3, r7, r3
   19e5c:	781b      	ldrb	r3, [r3, #0]
   19e5e:	2b00      	cmp	r3, #0
   19e60:	d116      	bne.n	19e90 <atcab_genkey_base+0xd0>
        {
            break;
        }

        if (public_key && packet.data[ATCA_COUNT_IDX] > 4)
   19e62:	687b      	ldr	r3, [r7, #4]
   19e64:	2b00      	cmp	r3, #0
   19e66:	d014      	beq.n	19e92 <atcab_genkey_base+0xd2>
   19e68:	2310      	movs	r3, #16
   19e6a:	18fb      	adds	r3, r7, r3
   19e6c:	799b      	ldrb	r3, [r3, #6]
   19e6e:	2b04      	cmp	r3, #4
   19e70:	d90f      	bls.n	19e92 <atcab_genkey_base+0xd2>
        {
            memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
   19e72:	2310      	movs	r3, #16
   19e74:	18fb      	adds	r3, r7, r3
   19e76:	799b      	ldrb	r3, [r3, #6]
   19e78:	3b03      	subs	r3, #3
   19e7a:	001a      	movs	r2, r3
   19e7c:	2310      	movs	r3, #16
   19e7e:	18fb      	adds	r3, r7, r3
   19e80:	1dd9      	adds	r1, r3, #7
   19e82:	687b      	ldr	r3, [r7, #4]
   19e84:	0018      	movs	r0, r3
   19e86:	f00b fc32 	bl	256ee <memcpy>
   19e8a:	e002      	b.n	19e92 <atcab_genkey_base+0xd2>
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
        }

        if ((status = atGenKey(ca_cmd, &packet)) != ATCA_SUCCESS)
        {
            break;
   19e8c:	46c0      	nop			; (mov r8, r8)
   19e8e:	e000      	b.n	19e92 <atcab_genkey_base+0xd2>
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
        {
            break;
   19e90:	46c0      	nop			; (mov r8, r8)
            memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
        }
    }
    while (0);

    return status;
   19e92:	23df      	movs	r3, #223	; 0xdf
   19e94:	18fb      	adds	r3, r7, r3
   19e96:	781b      	ldrb	r3, [r3, #0]
}
   19e98:	0018      	movs	r0, r3
   19e9a:	46bd      	mov	sp, r7
   19e9c:	b039      	add	sp, #228	; 0xe4
   19e9e:	bd90      	pop	{r4, r7, pc}
   19ea0:	200003b0 	.word	0x200003b0

00019ea4 <atcab_genkey>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_genkey(uint16_t key_id, uint8_t *public_key)
{
   19ea4:	b580      	push	{r7, lr}
   19ea6:	b082      	sub	sp, #8
   19ea8:	af00      	add	r7, sp, #0
   19eaa:	0002      	movs	r2, r0
   19eac:	6039      	str	r1, [r7, #0]
   19eae:	1dbb      	adds	r3, r7, #6
   19eb0:	801a      	strh	r2, [r3, #0]
    return atcab_genkey_base(GENKEY_MODE_PRIVATE, key_id, NULL, public_key);
   19eb2:	683a      	ldr	r2, [r7, #0]
   19eb4:	1dbb      	adds	r3, r7, #6
   19eb6:	8819      	ldrh	r1, [r3, #0]
   19eb8:	0013      	movs	r3, r2
   19eba:	2200      	movs	r2, #0
   19ebc:	2004      	movs	r0, #4
   19ebe:	f7ff ff7f 	bl	19dc0 <atcab_genkey_base>
   19ec2:	0003      	movs	r3, r0
}
   19ec4:	0018      	movs	r0, r3
   19ec6:	46bd      	mov	sp, r7
   19ec8:	b002      	add	sp, #8
   19eca:	bd80      	pop	{r7, pc}

00019ecc <atcab_get_pubkey>:
 *                          isn't required.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_pubkey(uint16_t key_id, uint8_t *public_key)
{
   19ecc:	b580      	push	{r7, lr}
   19ece:	b082      	sub	sp, #8
   19ed0:	af00      	add	r7, sp, #0
   19ed2:	0002      	movs	r2, r0
   19ed4:	6039      	str	r1, [r7, #0]
   19ed6:	1dbb      	adds	r3, r7, #6
   19ed8:	801a      	strh	r2, [r3, #0]
    return atcab_genkey_base(GENKEY_MODE_PUBLIC, key_id, NULL, public_key);
   19eda:	683a      	ldr	r2, [r7, #0]
   19edc:	1dbb      	adds	r3, r7, #6
   19ede:	8819      	ldrh	r1, [r3, #0]
   19ee0:	0013      	movs	r3, r2
   19ee2:	2200      	movs	r2, #0
   19ee4:	2000      	movs	r0, #0
   19ee6:	f7ff ff6b 	bl	19dc0 <atcab_genkey_base>
   19eea:	0003      	movs	r3, r0
   19eec:	0018      	movs	r0, r3
   19eee:	46bd      	mov	sp, r7
   19ef0:	b002      	add	sp, #8
   19ef2:	bd80      	pop	{r7, pc}

00019ef4 <atcab_info_base>:
 * \param[out] out_data  Response from info command (4 bytes). Can be set to
 *                       NULL if not required.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_info_base(uint8_t mode, uint16_t param2, uint8_t* out_data)
{
   19ef4:	b590      	push	{r4, r7, lr}
   19ef6:	b0b7      	sub	sp, #220	; 0xdc
   19ef8:	af00      	add	r7, sp, #0
   19efa:	603a      	str	r2, [r7, #0]
   19efc:	1dfb      	adds	r3, r7, #7
   19efe:	1c02      	adds	r2, r0, #0
   19f00:	701a      	strb	r2, [r3, #0]
   19f02:	1d3b      	adds	r3, r7, #4
   19f04:	1c0a      	adds	r2, r1, #0
   19f06:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   19f08:	4b28      	ldr	r3, [pc, #160]	; (19fac <atcab_info_base+0xb8>)
   19f0a:	681b      	ldr	r3, [r3, #0]
   19f0c:	681b      	ldr	r3, [r3, #0]
   19f0e:	22d0      	movs	r2, #208	; 0xd0
   19f10:	18ba      	adds	r2, r7, r2
   19f12:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   19f14:	23d7      	movs	r3, #215	; 0xd7
   19f16:	18fb      	adds	r3, r7, r3
   19f18:	22e1      	movs	r2, #225	; 0xe1
   19f1a:	701a      	strb	r2, [r3, #0]

    // build an info command
    packet.param1 = mode;
   19f1c:	2308      	movs	r3, #8
   19f1e:	18fb      	adds	r3, r7, r3
   19f20:	1dfa      	adds	r2, r7, #7
   19f22:	7812      	ldrb	r2, [r2, #0]
   19f24:	70da      	strb	r2, [r3, #3]
    packet.param2 = param2;
   19f26:	2308      	movs	r3, #8
   19f28:	18fb      	adds	r3, r7, r3
   19f2a:	1d3a      	adds	r2, r7, #4
   19f2c:	8812      	ldrh	r2, [r2, #0]
   19f2e:	809a      	strh	r2, [r3, #4]

    do
    {

        if ((status = atInfo(ca_cmd, &packet)) != ATCA_SUCCESS)
   19f30:	23d7      	movs	r3, #215	; 0xd7
   19f32:	18fc      	adds	r4, r7, r3
   19f34:	2308      	movs	r3, #8
   19f36:	18fa      	adds	r2, r7, r3
   19f38:	23d0      	movs	r3, #208	; 0xd0
   19f3a:	18fb      	adds	r3, r7, r3
   19f3c:	681b      	ldr	r3, [r3, #0]
   19f3e:	0011      	movs	r1, r2
   19f40:	0018      	movs	r0, r3
   19f42:	f001 fd1b 	bl	1b97c <atInfo>
   19f46:	0003      	movs	r3, r0
   19f48:	7023      	strb	r3, [r4, #0]
   19f4a:	23d7      	movs	r3, #215	; 0xd7
   19f4c:	18fb      	adds	r3, r7, r3
   19f4e:	781b      	ldrb	r3, [r3, #0]
   19f50:	2b00      	cmp	r3, #0
   19f52:	d121      	bne.n	19f98 <atcab_info_base+0xa4>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   19f54:	4b15      	ldr	r3, [pc, #84]	; (19fac <atcab_info_base+0xb8>)
   19f56:	681a      	ldr	r2, [r3, #0]
   19f58:	23d7      	movs	r3, #215	; 0xd7
   19f5a:	18fc      	adds	r4, r7, r3
   19f5c:	2308      	movs	r3, #8
   19f5e:	18fb      	adds	r3, r7, r3
   19f60:	0011      	movs	r1, r2
   19f62:	0018      	movs	r0, r3
   19f64:	f002 f850 	bl	1c008 <atca_execute_command>
   19f68:	0003      	movs	r3, r0
   19f6a:	7023      	strb	r3, [r4, #0]
   19f6c:	23d7      	movs	r3, #215	; 0xd7
   19f6e:	18fb      	adds	r3, r7, r3
   19f70:	781b      	ldrb	r3, [r3, #0]
   19f72:	2b00      	cmp	r3, #0
   19f74:	d112      	bne.n	19f9c <atcab_info_base+0xa8>
        {
            break;
        }

        if (out_data != NULL && packet.data[ATCA_COUNT_IDX] >= 7)
   19f76:	683b      	ldr	r3, [r7, #0]
   19f78:	2b00      	cmp	r3, #0
   19f7a:	d010      	beq.n	19f9e <atcab_info_base+0xaa>
   19f7c:	2308      	movs	r3, #8
   19f7e:	18fb      	adds	r3, r7, r3
   19f80:	799b      	ldrb	r3, [r3, #6]
   19f82:	2b06      	cmp	r3, #6
   19f84:	d90b      	bls.n	19f9e <atcab_info_base+0xaa>
        {
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], 4);
   19f86:	2308      	movs	r3, #8
   19f88:	18fb      	adds	r3, r7, r3
   19f8a:	1dd9      	adds	r1, r3, #7
   19f8c:	683b      	ldr	r3, [r7, #0]
   19f8e:	2204      	movs	r2, #4
   19f90:	0018      	movs	r0, r3
   19f92:	f00b fbac 	bl	256ee <memcpy>
   19f96:	e002      	b.n	19f9e <atcab_info_base+0xaa>
    do
    {

        if ((status = atInfo(ca_cmd, &packet)) != ATCA_SUCCESS)
        {
            break;
   19f98:	46c0      	nop			; (mov r8, r8)
   19f9a:	e000      	b.n	19f9e <atcab_info_base+0xaa>
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
        {
            break;
   19f9c:	46c0      	nop			; (mov r8, r8)
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], 4);
        }
    }
    while (0);

    return status;
   19f9e:	23d7      	movs	r3, #215	; 0xd7
   19fa0:	18fb      	adds	r3, r7, r3
   19fa2:	781b      	ldrb	r3, [r3, #0]
}
   19fa4:	0018      	movs	r0, r3
   19fa6:	46bd      	mov	sp, r7
   19fa8:	b037      	add	sp, #220	; 0xdc
   19faa:	bd90      	pop	{r4, r7, pc}
   19fac:	200003b0 	.word	0x200003b0

00019fb0 <atcab_info>:
/** \brief Use the Info command to get the device revision (DevRev).
 *  \param[out] revision  Device revision is returned here (4 bytes).
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_info(uint8_t* revision)
{
   19fb0:	b580      	push	{r7, lr}
   19fb2:	b082      	sub	sp, #8
   19fb4:	af00      	add	r7, sp, #0
   19fb6:	6078      	str	r0, [r7, #4]
    if (revision == NULL)
   19fb8:	687b      	ldr	r3, [r7, #4]
   19fba:	2b00      	cmp	r3, #0
   19fbc:	d101      	bne.n	19fc2 <atcab_info+0x12>
    {
        return ATCA_BAD_PARAM;
   19fbe:	23e2      	movs	r3, #226	; 0xe2
   19fc0:	e006      	b.n	19fd0 <atcab_info+0x20>
    }

    return atcab_info_base(INFO_MODE_REVISION, 0, revision);
   19fc2:	687b      	ldr	r3, [r7, #4]
   19fc4:	001a      	movs	r2, r3
   19fc6:	2100      	movs	r1, #0
   19fc8:	2000      	movs	r0, #0
   19fca:	f7ff ff93 	bl	19ef4 <atcab_info_base>
   19fce:	0003      	movs	r3, r0
}
   19fd0:	0018      	movs	r0, r3
   19fd2:	46bd      	mov	sp, r7
   19fd4:	b002      	add	sp, #8
   19fd6:	bd80      	pop	{r7, pc}

00019fd8 <atcab_lock>:
 *                            slot locks or when mode bit 7 is set.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_lock(uint8_t mode, uint16_t summary_crc)
{
   19fd8:	b590      	push	{r4, r7, lr}
   19fda:	b0b7      	sub	sp, #220	; 0xdc
   19fdc:	af00      	add	r7, sp, #0
   19fde:	0002      	movs	r2, r0
   19fe0:	1dfb      	adds	r3, r7, #7
   19fe2:	701a      	strb	r2, [r3, #0]
   19fe4:	1d3b      	adds	r3, r7, #4
   19fe6:	1c0a      	adds	r2, r1, #0
   19fe8:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   19fea:	4b21      	ldr	r3, [pc, #132]	; (1a070 <atcab_lock+0x98>)
   19fec:	681b      	ldr	r3, [r3, #0]
   19fee:	681b      	ldr	r3, [r3, #0]
   19ff0:	22d0      	movs	r2, #208	; 0xd0
   19ff2:	18ba      	adds	r2, r7, r2
   19ff4:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   19ff6:	23d7      	movs	r3, #215	; 0xd7
   19ff8:	18fb      	adds	r3, r7, r3
   19ffa:	22e1      	movs	r2, #225	; 0xe1
   19ffc:	701a      	strb	r2, [r3, #0]

    // build command for lock zone and send
    memset(&packet, 0, sizeof(packet));
   19ffe:	2308      	movs	r3, #8
   1a000:	18fb      	adds	r3, r7, r3
   1a002:	22c8      	movs	r2, #200	; 0xc8
   1a004:	2100      	movs	r1, #0
   1a006:	0018      	movs	r0, r3
   1a008:	f00b fb8f 	bl	2572a <memset>
    packet.param1 = mode;
   1a00c:	2308      	movs	r3, #8
   1a00e:	18fb      	adds	r3, r7, r3
   1a010:	1dfa      	adds	r2, r7, #7
   1a012:	7812      	ldrb	r2, [r2, #0]
   1a014:	70da      	strb	r2, [r3, #3]
    packet.param2 = summary_crc;
   1a016:	2308      	movs	r3, #8
   1a018:	18fb      	adds	r3, r7, r3
   1a01a:	1d3a      	adds	r2, r7, #4
   1a01c:	8812      	ldrh	r2, [r2, #0]
   1a01e:	809a      	strh	r2, [r3, #4]

    do
    {
        if ((status = atLock(ca_cmd, &packet)) != ATCA_SUCCESS)
   1a020:	23d7      	movs	r3, #215	; 0xd7
   1a022:	18fc      	adds	r4, r7, r3
   1a024:	2308      	movs	r3, #8
   1a026:	18fa      	adds	r2, r7, r3
   1a028:	23d0      	movs	r3, #208	; 0xd0
   1a02a:	18fb      	adds	r3, r7, r3
   1a02c:	681b      	ldr	r3, [r3, #0]
   1a02e:	0011      	movs	r1, r2
   1a030:	0018      	movs	r0, r3
   1a032:	f001 fcb7 	bl	1b9a4 <atLock>
   1a036:	0003      	movs	r3, r0
   1a038:	7023      	strb	r3, [r4, #0]
   1a03a:	23d7      	movs	r3, #215	; 0xd7
   1a03c:	18fb      	adds	r3, r7, r3
   1a03e:	781b      	ldrb	r3, [r3, #0]
   1a040:	2b00      	cmp	r3, #0
   1a042:	d10c      	bne.n	1a05e <atcab_lock+0x86>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   1a044:	4b0a      	ldr	r3, [pc, #40]	; (1a070 <atcab_lock+0x98>)
   1a046:	681a      	ldr	r2, [r3, #0]
   1a048:	23d7      	movs	r3, #215	; 0xd7
   1a04a:	18fc      	adds	r4, r7, r3
   1a04c:	2308      	movs	r3, #8
   1a04e:	18fb      	adds	r3, r7, r3
   1a050:	0011      	movs	r1, r2
   1a052:	0018      	movs	r0, r3
   1a054:	f001 ffd8 	bl	1c008 <atca_execute_command>
   1a058:	0003      	movs	r3, r0
   1a05a:	7023      	strb	r3, [r4, #0]
   1a05c:	e000      	b.n	1a060 <atcab_lock+0x88>

    do
    {
        if ((status = atLock(ca_cmd, &packet)) != ATCA_SUCCESS)
        {
            break;
   1a05e:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   1a060:	23d7      	movs	r3, #215	; 0xd7
   1a062:	18fb      	adds	r3, r7, r3
   1a064:	781b      	ldrb	r3, [r3, #0]
}
   1a066:	0018      	movs	r0, r3
   1a068:	46bd      	mov	sp, r7
   1a06a:	b037      	add	sp, #220	; 0xdc
   1a06c:	bd90      	pop	{r4, r7, pc}
   1a06e:	46c0      	nop			; (mov r8, r8)
   1a070:	200003b0 	.word	0x200003b0

0001a074 <atcab_lock_config_zone>:
/** \brief Unconditionally (no CRC required) lock the config zone.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_lock_config_zone(void)
{
   1a074:	b580      	push	{r7, lr}
   1a076:	af00      	add	r7, sp, #0
    return atcab_lock(LOCK_ZONE_NO_CRC | LOCK_ZONE_CONFIG, 0);
   1a078:	2100      	movs	r1, #0
   1a07a:	2080      	movs	r0, #128	; 0x80
   1a07c:	f7ff ffac 	bl	19fd8 <atcab_lock>
   1a080:	0003      	movs	r3, r0
}
   1a082:	0018      	movs	r0, r3
   1a084:	46bd      	mov	sp, r7
   1a086:	bd80      	pop	{r7, pc}

0001a088 <atcab_lock_data_zone>:
 *	ConfigZone must be locked and DataZone must be unlocked for the zone to be successfully locked.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_lock_data_zone(void)
{
   1a088:	b580      	push	{r7, lr}
   1a08a:	af00      	add	r7, sp, #0
    return atcab_lock(LOCK_ZONE_NO_CRC | LOCK_ZONE_DATA, 0);
   1a08c:	2100      	movs	r1, #0
   1a08e:	2081      	movs	r0, #129	; 0x81
   1a090:	f7ff ffa2 	bl	19fd8 <atcab_lock>
   1a094:	0003      	movs	r3, r0
}
   1a096:	0018      	movs	r0, r3
   1a098:	46bd      	mov	sp, r7
   1a09a:	bd80      	pop	{r7, pc}

0001a09c <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
   1a09c:	b590      	push	{r4, r7, lr}
   1a09e:	b0bb      	sub	sp, #236	; 0xec
   1a0a0:	af00      	add	r7, sp, #0
   1a0a2:	60ba      	str	r2, [r7, #8]
   1a0a4:	607b      	str	r3, [r7, #4]
   1a0a6:	230f      	movs	r3, #15
   1a0a8:	18fb      	adds	r3, r7, r3
   1a0aa:	1c02      	adds	r2, r0, #0
   1a0ac:	701a      	strb	r2, [r3, #0]
   1a0ae:	230c      	movs	r3, #12
   1a0b0:	18fb      	adds	r3, r7, r3
   1a0b2:	1c0a      	adds	r2, r1, #0
   1a0b4:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1a0b6:	4b47      	ldr	r3, [pc, #284]	; (1a1d4 <atcab_nonce_base+0x138>)
   1a0b8:	681b      	ldr	r3, [r3, #0]
   1a0ba:	681b      	ldr	r3, [r3, #0]
   1a0bc:	22e0      	movs	r2, #224	; 0xe0
   1a0be:	18ba      	adds	r2, r7, r2
   1a0c0:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1a0c2:	23e7      	movs	r3, #231	; 0xe7
   1a0c4:	18fb      	adds	r3, r7, r3
   1a0c6:	22e1      	movs	r2, #225	; 0xe1
   1a0c8:	701a      	strb	r2, [r3, #0]
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
   1a0ca:	23df      	movs	r3, #223	; 0xdf
   1a0cc:	18fb      	adds	r3, r7, r3
   1a0ce:	220f      	movs	r2, #15
   1a0d0:	18ba      	adds	r2, r7, r2
   1a0d2:	7812      	ldrb	r2, [r2, #0]
   1a0d4:	2103      	movs	r1, #3
   1a0d6:	400a      	ands	r2, r1
   1a0d8:	701a      	strb	r2, [r3, #0]

    do
    {
        // build a nonce command
        packet.param1 = mode;
   1a0da:	2314      	movs	r3, #20
   1a0dc:	18fb      	adds	r3, r7, r3
   1a0de:	220f      	movs	r2, #15
   1a0e0:	18ba      	adds	r2, r7, r2
   1a0e2:	7812      	ldrb	r2, [r2, #0]
   1a0e4:	70da      	strb	r2, [r3, #3]
        packet.param2 = zero;
   1a0e6:	2314      	movs	r3, #20
   1a0e8:	18fb      	adds	r3, r7, r3
   1a0ea:	220c      	movs	r2, #12
   1a0ec:	18ba      	adds	r2, r7, r2
   1a0ee:	8812      	ldrh	r2, [r2, #0]
   1a0f0:	809a      	strh	r2, [r3, #4]

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
   1a0f2:	23df      	movs	r3, #223	; 0xdf
   1a0f4:	18fb      	adds	r3, r7, r3
   1a0f6:	781b      	ldrb	r3, [r3, #0]
   1a0f8:	2b00      	cmp	r3, #0
   1a0fa:	d004      	beq.n	1a106 <atcab_nonce_base+0x6a>
   1a0fc:	23df      	movs	r3, #223	; 0xdf
   1a0fe:	18fb      	adds	r3, r7, r3
   1a100:	781b      	ldrb	r3, [r3, #0]
   1a102:	2b01      	cmp	r3, #1
   1a104:	d108      	bne.n	1a118 <atcab_nonce_base+0x7c>
        {
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
   1a106:	68b9      	ldr	r1, [r7, #8]
   1a108:	2314      	movs	r3, #20
   1a10a:	18fb      	adds	r3, r7, r3
   1a10c:	3306      	adds	r3, #6
   1a10e:	2214      	movs	r2, #20
   1a110:	0018      	movs	r0, r3
   1a112:	f00b faec 	bl	256ee <memcpy>
   1a116:	e01e      	b.n	1a156 <atcab_nonce_base+0xba>
        }
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
   1a118:	23df      	movs	r3, #223	; 0xdf
   1a11a:	18fb      	adds	r3, r7, r3
   1a11c:	781b      	ldrb	r3, [r3, #0]
   1a11e:	2b03      	cmp	r3, #3
   1a120:	d117      	bne.n	1a152 <atcab_nonce_base+0xb6>
        {
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
   1a122:	230f      	movs	r3, #15
   1a124:	18fb      	adds	r3, r7, r3
   1a126:	781b      	ldrb	r3, [r3, #0]
   1a128:	2220      	movs	r2, #32
   1a12a:	4013      	ands	r3, r2
   1a12c:	d008      	beq.n	1a140 <atcab_nonce_base+0xa4>
            {
                memcpy(packet.data, num_in, 64);
   1a12e:	68b9      	ldr	r1, [r7, #8]
   1a130:	2314      	movs	r3, #20
   1a132:	18fb      	adds	r3, r7, r3
   1a134:	3306      	adds	r3, #6
   1a136:	2240      	movs	r2, #64	; 0x40
   1a138:	0018      	movs	r0, r3
   1a13a:	f00b fad8 	bl	256ee <memcpy>
   1a13e:	e00a      	b.n	1a156 <atcab_nonce_base+0xba>
            }
            else
            {
                memcpy(packet.data, num_in, 32);
   1a140:	68b9      	ldr	r1, [r7, #8]
   1a142:	2314      	movs	r3, #20
   1a144:	18fb      	adds	r3, r7, r3
   1a146:	3306      	adds	r3, #6
   1a148:	2220      	movs	r2, #32
   1a14a:	0018      	movs	r0, r3
   1a14c:	f00b facf 	bl	256ee <memcpy>
   1a150:	e001      	b.n	1a156 <atcab_nonce_base+0xba>
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
   1a152:	23e2      	movs	r3, #226	; 0xe2
   1a154:	e039      	b.n	1a1ca <atcab_nonce_base+0x12e>
        }

        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
   1a156:	23e7      	movs	r3, #231	; 0xe7
   1a158:	18fc      	adds	r4, r7, r3
   1a15a:	2314      	movs	r3, #20
   1a15c:	18fa      	adds	r2, r7, r3
   1a15e:	23e0      	movs	r3, #224	; 0xe0
   1a160:	18fb      	adds	r3, r7, r3
   1a162:	681b      	ldr	r3, [r3, #0]
   1a164:	0011      	movs	r1, r2
   1a166:	0018      	movs	r0, r3
   1a168:	f001 fc30 	bl	1b9cc <atNonce>
   1a16c:	0003      	movs	r3, r0
   1a16e:	7023      	strb	r3, [r4, #0]
   1a170:	23e7      	movs	r3, #231	; 0xe7
   1a172:	18fb      	adds	r3, r7, r3
   1a174:	781b      	ldrb	r3, [r3, #0]
   1a176:	2b00      	cmp	r3, #0
   1a178:	d121      	bne.n	1a1be <atcab_nonce_base+0x122>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   1a17a:	4b16      	ldr	r3, [pc, #88]	; (1a1d4 <atcab_nonce_base+0x138>)
   1a17c:	681a      	ldr	r2, [r3, #0]
   1a17e:	23e7      	movs	r3, #231	; 0xe7
   1a180:	18fc      	adds	r4, r7, r3
   1a182:	2314      	movs	r3, #20
   1a184:	18fb      	adds	r3, r7, r3
   1a186:	0011      	movs	r1, r2
   1a188:	0018      	movs	r0, r3
   1a18a:	f001 ff3d 	bl	1c008 <atca_execute_command>
   1a18e:	0003      	movs	r3, r0
   1a190:	7023      	strb	r3, [r4, #0]
   1a192:	23e7      	movs	r3, #231	; 0xe7
   1a194:	18fb      	adds	r3, r7, r3
   1a196:	781b      	ldrb	r3, [r3, #0]
   1a198:	2b00      	cmp	r3, #0
   1a19a:	d112      	bne.n	1a1c2 <atcab_nonce_base+0x126>
        {
            break;
        }

        if ((rand_out != NULL) && (packet.data[ATCA_COUNT_IDX] >= 35))
   1a19c:	687b      	ldr	r3, [r7, #4]
   1a19e:	2b00      	cmp	r3, #0
   1a1a0:	d010      	beq.n	1a1c4 <atcab_nonce_base+0x128>
   1a1a2:	2314      	movs	r3, #20
   1a1a4:	18fb      	adds	r3, r7, r3
   1a1a6:	799b      	ldrb	r3, [r3, #6]
   1a1a8:	2b22      	cmp	r3, #34	; 0x22
   1a1aa:	d90b      	bls.n	1a1c4 <atcab_nonce_base+0x128>
        {
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
   1a1ac:	2314      	movs	r3, #20
   1a1ae:	18fb      	adds	r3, r7, r3
   1a1b0:	1dd9      	adds	r1, r3, #7
   1a1b2:	687b      	ldr	r3, [r7, #4]
   1a1b4:	2220      	movs	r2, #32
   1a1b6:	0018      	movs	r0, r3
   1a1b8:	f00b fa99 	bl	256ee <memcpy>
   1a1bc:	e002      	b.n	1a1c4 <atcab_nonce_base+0x128>
            return ATCA_BAD_PARAM;
        }

        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
        {
            break;
   1a1be:	46c0      	nop			; (mov r8, r8)
   1a1c0:	e000      	b.n	1a1c4 <atcab_nonce_base+0x128>
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
        {
            break;
   1a1c2:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   1a1c4:	23e7      	movs	r3, #231	; 0xe7
   1a1c6:	18fb      	adds	r3, r7, r3
   1a1c8:	781b      	ldrb	r3, [r3, #0]
}
   1a1ca:	0018      	movs	r0, r3
   1a1cc:	46bd      	mov	sp, r7
   1a1ce:	b03b      	add	sp, #236	; 0xec
   1a1d0:	bd90      	pop	{r4, r7, pc}
   1a1d2:	46c0      	nop			; (mov r8, r8)
   1a1d4:	200003b0 	.word	0x200003b0

0001a1d8 <atcab_nonce_load>:
 *                          depending on device and target.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_load(uint8_t target, const uint8_t *num_in, uint16_t num_in_size)
{
   1a1d8:	b580      	push	{r7, lr}
   1a1da:	b084      	sub	sp, #16
   1a1dc:	af00      	add	r7, sp, #0
   1a1de:	6039      	str	r1, [r7, #0]
   1a1e0:	0011      	movs	r1, r2
   1a1e2:	1dfb      	adds	r3, r7, #7
   1a1e4:	1c02      	adds	r2, r0, #0
   1a1e6:	701a      	strb	r2, [r3, #0]
   1a1e8:	1d3b      	adds	r3, r7, #4
   1a1ea:	1c0a      	adds	r2, r1, #0
   1a1ec:	801a      	strh	r2, [r3, #0]
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
   1a1ee:	1dfb      	adds	r3, r7, #7
   1a1f0:	781b      	ldrb	r3, [r3, #0]
   1a1f2:	223f      	movs	r2, #63	; 0x3f
   1a1f4:	4393      	bics	r3, r2
   1a1f6:	b2da      	uxtb	r2, r3
   1a1f8:	230f      	movs	r3, #15
   1a1fa:	18fb      	adds	r3, r7, r3
   1a1fc:	2103      	movs	r1, #3
   1a1fe:	430a      	orrs	r2, r1
   1a200:	701a      	strb	r2, [r3, #0]

    if (num_in_size == 32)
   1a202:	1d3b      	adds	r3, r7, #4
   1a204:	881b      	ldrh	r3, [r3, #0]
   1a206:	2b20      	cmp	r3, #32
   1a208:	d106      	bne.n	1a218 <atcab_nonce_load+0x40>
    {
        mode |= NONCE_MODE_INPUT_LEN_32;
   1a20a:	230f      	movs	r3, #15
   1a20c:	18fb      	adds	r3, r7, r3
   1a20e:	220f      	movs	r2, #15
   1a210:	18ba      	adds	r2, r7, r2
   1a212:	7812      	ldrb	r2, [r2, #0]
   1a214:	701a      	strb	r2, [r3, #0]
   1a216:	e00e      	b.n	1a236 <atcab_nonce_load+0x5e>
    }
    else if (num_in_size == 64)
   1a218:	1d3b      	adds	r3, r7, #4
   1a21a:	881b      	ldrh	r3, [r3, #0]
   1a21c:	2b40      	cmp	r3, #64	; 0x40
   1a21e:	d108      	bne.n	1a232 <atcab_nonce_load+0x5a>
    {
        mode |= NONCE_MODE_INPUT_LEN_64;
   1a220:	230f      	movs	r3, #15
   1a222:	18fb      	adds	r3, r7, r3
   1a224:	220f      	movs	r2, #15
   1a226:	18ba      	adds	r2, r7, r2
   1a228:	7812      	ldrb	r2, [r2, #0]
   1a22a:	2120      	movs	r1, #32
   1a22c:	430a      	orrs	r2, r1
   1a22e:	701a      	strb	r2, [r3, #0]
   1a230:	e001      	b.n	1a236 <atcab_nonce_load+0x5e>
    }
    else
    {
        return ATCA_BAD_PARAM;
   1a232:	23e2      	movs	r3, #226	; 0xe2
   1a234:	e008      	b.n	1a248 <atcab_nonce_load+0x70>
    }

    return atcab_nonce_base(mode, 0, num_in, NULL);
   1a236:	683a      	ldr	r2, [r7, #0]
   1a238:	230f      	movs	r3, #15
   1a23a:	18fb      	adds	r3, r7, r3
   1a23c:	7818      	ldrb	r0, [r3, #0]
   1a23e:	2300      	movs	r3, #0
   1a240:	2100      	movs	r1, #0
   1a242:	f7ff ff2b 	bl	1a09c <atcab_nonce_base>
   1a246:	0003      	movs	r3, r0
}
   1a248:	0018      	movs	r0, r3
   1a24a:	46bd      	mov	sp, r7
   1a24c:	b004      	add	sp, #16
   1a24e:	bd80      	pop	{r7, pc}

0001a250 <atcab_nonce_rand>:
 *                        here. Can be NULL if not needed.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_rand(const uint8_t *num_in, uint8_t* rand_out)
{
   1a250:	b580      	push	{r7, lr}
   1a252:	b082      	sub	sp, #8
   1a254:	af00      	add	r7, sp, #0
   1a256:	6078      	str	r0, [r7, #4]
   1a258:	6039      	str	r1, [r7, #0]
    return atcab_nonce_base(NONCE_MODE_SEED_UPDATE, 0, num_in, rand_out);
   1a25a:	683b      	ldr	r3, [r7, #0]
   1a25c:	687a      	ldr	r2, [r7, #4]
   1a25e:	2100      	movs	r1, #0
   1a260:	2000      	movs	r0, #0
   1a262:	f7ff ff1b 	bl	1a09c <atcab_nonce_base>
   1a266:	0003      	movs	r3, r0
}
   1a268:	0018      	movs	r0, r3
   1a26a:	46bd      	mov	sp, r7
   1a26c:	b002      	add	sp, #8
   1a26e:	bd80      	pop	{r7, pc}

0001a270 <atcab_priv_write>:
 *                           the data zone is unlocked.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_priv_write(uint16_t key_id, const uint8_t priv_key[36], uint16_t write_key_id, const uint8_t write_key[32])
{
   1a270:	b590      	push	{r4, r7, lr}
   1a272:	4c46      	ldr	r4, [pc, #280]	; (1a38c <atcab_priv_write+0x11c>)
   1a274:	44a5      	add	sp, r4
   1a276:	af02      	add	r7, sp, #8
   1a278:	60b9      	str	r1, [r7, #8]
   1a27a:	0011      	movs	r1, r2
   1a27c:	607b      	str	r3, [r7, #4]
   1a27e:	4b44      	ldr	r3, [pc, #272]	; (1a390 <atcab_priv_write+0x120>)
   1a280:	2280      	movs	r2, #128	; 0x80
   1a282:	0092      	lsls	r2, r2, #2
   1a284:	4694      	mov	ip, r2
   1a286:	44bc      	add	ip, r7
   1a288:	4463      	add	r3, ip
   1a28a:	1c02      	adds	r2, r0, #0
   1a28c:	801a      	strh	r2, [r3, #0]
   1a28e:	4b41      	ldr	r3, [pc, #260]	; (1a394 <atcab_priv_write+0x124>)
   1a290:	2280      	movs	r2, #128	; 0x80
   1a292:	0092      	lsls	r2, r2, #2
   1a294:	4694      	mov	ip, r2
   1a296:	44bc      	add	ip, r7
   1a298:	4463      	add	r3, ip
   1a29a:	1c0a      	adds	r2, r1, #0
   1a29c:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1a29e:	4b3e      	ldr	r3, [pc, #248]	; (1a398 <atcab_priv_write+0x128>)
   1a2a0:	681b      	ldr	r3, [r3, #0]
   1a2a2:	681b      	ldr	r3, [r3, #0]
   1a2a4:	22fc      	movs	r2, #252	; 0xfc
   1a2a6:	0052      	lsls	r2, r2, #1
   1a2a8:	18ba      	adds	r2, r7, r2
   1a2aa:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1a2ac:	4b3b      	ldr	r3, [pc, #236]	; (1a39c <atcab_priv_write+0x12c>)
   1a2ae:	18fb      	adds	r3, r7, r3
   1a2b0:	22e1      	movs	r2, #225	; 0xe1
   1a2b2:	701a      	strb	r2, [r3, #0]
    atca_nonce_in_out_t nonce_params;
    atca_gen_dig_in_out_t gen_dig_param;
    atca_write_mac_in_out_t host_mac_param;
    atca_temp_key_t temp_key;
    uint8_t serial_num[32]; // Buffer is larger than the 9 bytes required to make reads easier
    uint8_t num_in[NONCE_NUMIN_SIZE] = { 0 };
   1a2b4:	4b3a      	ldr	r3, [pc, #232]	; (1a3a0 <atcab_priv_write+0x130>)
   1a2b6:	2280      	movs	r2, #128	; 0x80
   1a2b8:	0092      	lsls	r2, r2, #2
   1a2ba:	4694      	mov	ip, r2
   1a2bc:	44bc      	add	ip, r7
   1a2be:	4463      	add	r3, ip
   1a2c0:	0018      	movs	r0, r3
   1a2c2:	2314      	movs	r3, #20
   1a2c4:	001a      	movs	r2, r3
   1a2c6:	2100      	movs	r1, #0
   1a2c8:	f00b fa2f 	bl	2572a <memset>
    uint8_t rand_out[RANDOM_NUM_SIZE] = { 0 };
   1a2cc:	4b35      	ldr	r3, [pc, #212]	; (1a3a4 <atcab_priv_write+0x134>)
   1a2ce:	2280      	movs	r2, #128	; 0x80
   1a2d0:	0092      	lsls	r2, r2, #2
   1a2d2:	4694      	mov	ip, r2
   1a2d4:	44bc      	add	ip, r7
   1a2d6:	4463      	add	r3, ip
   1a2d8:	0018      	movs	r0, r3
   1a2da:	2320      	movs	r3, #32
   1a2dc:	001a      	movs	r2, r3
   1a2de:	2100      	movs	r1, #0
   1a2e0:	f00b fa23 	bl	2572a <memset>
    uint8_t cipher_text[36] = { 0 };
   1a2e4:	4b30      	ldr	r3, [pc, #192]	; (1a3a8 <atcab_priv_write+0x138>)
   1a2e6:	2280      	movs	r2, #128	; 0x80
   1a2e8:	0092      	lsls	r2, r2, #2
   1a2ea:	4694      	mov	ip, r2
   1a2ec:	44bc      	add	ip, r7
   1a2ee:	4463      	add	r3, ip
   1a2f0:	0018      	movs	r0, r3
   1a2f2:	2324      	movs	r3, #36	; 0x24
   1a2f4:	001a      	movs	r2, r3
   1a2f6:	2100      	movs	r1, #0
   1a2f8:	f00b fa17 	bl	2572a <memset>
    uint8_t host_mac[MAC_SIZE] = { 0 };
   1a2fc:	4b2b      	ldr	r3, [pc, #172]	; (1a3ac <atcab_priv_write+0x13c>)
   1a2fe:	2280      	movs	r2, #128	; 0x80
   1a300:	0092      	lsls	r2, r2, #2
   1a302:	4694      	mov	ip, r2
   1a304:	44bc      	add	ip, r7
   1a306:	4463      	add	r3, ip
   1a308:	0018      	movs	r0, r3
   1a30a:	2320      	movs	r3, #32
   1a30c:	001a      	movs	r2, r3
   1a30e:	2100      	movs	r1, #0
   1a310:	f00b fa0b 	bl	2572a <memset>
    uint8_t other_data[4] = { 0 };
   1a314:	4b26      	ldr	r3, [pc, #152]	; (1a3b0 <atcab_priv_write+0x140>)
   1a316:	2280      	movs	r2, #128	; 0x80
   1a318:	0092      	lsls	r2, r2, #2
   1a31a:	4694      	mov	ip, r2
   1a31c:	44bc      	add	ip, r7
   1a31e:	4463      	add	r3, ip
   1a320:	2200      	movs	r2, #0
   1a322:	601a      	str	r2, [r3, #0]

    if (key_id > 15 || priv_key == NULL)
   1a324:	4b1a      	ldr	r3, [pc, #104]	; (1a390 <atcab_priv_write+0x120>)
   1a326:	2280      	movs	r2, #128	; 0x80
   1a328:	0092      	lsls	r2, r2, #2
   1a32a:	4694      	mov	ip, r2
   1a32c:	44bc      	add	ip, r7
   1a32e:	4463      	add	r3, ip
   1a330:	881b      	ldrh	r3, [r3, #0]
   1a332:	2b0f      	cmp	r3, #15
   1a334:	d802      	bhi.n	1a33c <atcab_priv_write+0xcc>
   1a336:	68bb      	ldr	r3, [r7, #8]
   1a338:	2b00      	cmp	r3, #0
   1a33a:	d101      	bne.n	1a340 <atcab_priv_write+0xd0>
    {
        return ATCA_BAD_PARAM;
   1a33c:	23e2      	movs	r3, #226	; 0xe2
   1a33e:	e1e8      	b.n	1a712 <atcab_priv_write+0x4a2>
    }

    do
    {

        if (write_key == NULL)
   1a340:	687b      	ldr	r3, [r7, #4]
   1a342:	2b00      	cmp	r3, #0
   1a344:	d136      	bne.n	1a3b4 <atcab_priv_write+0x144>
        {
            // Caller requested an unencrypted PrivWrite, which is only allowed when the data zone is unlocked
            // build an PrivWrite command
            packet.param1 = 0x00;                   // Mode is unencrypted write
   1a346:	2398      	movs	r3, #152	; 0x98
   1a348:	005b      	lsls	r3, r3, #1
   1a34a:	18fb      	adds	r3, r7, r3
   1a34c:	2200      	movs	r2, #0
   1a34e:	70da      	strb	r2, [r3, #3]
            packet.param2 = key_id;                 // Key ID
   1a350:	2398      	movs	r3, #152	; 0x98
   1a352:	005b      	lsls	r3, r3, #1
   1a354:	18fb      	adds	r3, r7, r3
   1a356:	4a0e      	ldr	r2, [pc, #56]	; (1a390 <atcab_priv_write+0x120>)
   1a358:	2180      	movs	r1, #128	; 0x80
   1a35a:	0089      	lsls	r1, r1, #2
   1a35c:	468c      	mov	ip, r1
   1a35e:	44bc      	add	ip, r7
   1a360:	4462      	add	r2, ip
   1a362:	8812      	ldrh	r2, [r2, #0]
   1a364:	809a      	strh	r2, [r3, #4]
            memcpy(&packet.data[0], priv_key, 36);  // Private key
   1a366:	68b9      	ldr	r1, [r7, #8]
   1a368:	2398      	movs	r3, #152	; 0x98
   1a36a:	005b      	lsls	r3, r3, #1
   1a36c:	18fb      	adds	r3, r7, r3
   1a36e:	3306      	adds	r3, #6
   1a370:	2224      	movs	r2, #36	; 0x24
   1a372:	0018      	movs	r0, r3
   1a374:	f00b f9bb 	bl	256ee <memcpy>
            memset(&packet.data[36], 0, 32);        // MAC (ignored for unencrypted write)
   1a378:	2398      	movs	r3, #152	; 0x98
   1a37a:	005b      	lsls	r3, r3, #1
   1a37c:	18fb      	adds	r3, r7, r3
   1a37e:	332a      	adds	r3, #42	; 0x2a
   1a380:	2220      	movs	r2, #32
   1a382:	2100      	movs	r1, #0
   1a384:	0018      	movs	r0, r3
   1a386:	f00b f9d0 	bl	2572a <memset>
   1a38a:	e190      	b.n	1a6ae <atcab_priv_write+0x43e>
   1a38c:	fffffdf4 	.word	0xfffffdf4
   1a390:	fffffe0e 	.word	0xfffffe0e
   1a394:	fffffe0c 	.word	0xfffffe0c
   1a398:	200003b0 	.word	0x200003b0
   1a39c:	000001ff 	.word	0x000001ff
   1a3a0:	fffffe78 	.word	0xfffffe78
   1a3a4:	fffffe58 	.word	0xfffffe58
   1a3a8:	fffffe34 	.word	0xfffffe34
   1a3ac:	fffffe14 	.word	0xfffffe14
   1a3b0:	fffffe10 	.word	0xfffffe10
        }
        else
        {
            // Read the device SN
            if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, serial_num, 32)) != ATCA_SUCCESS)
   1a3b4:	4bda      	ldr	r3, [pc, #872]	; (1a720 <atcab_priv_write+0x4b0>)
   1a3b6:	18fc      	adds	r4, r7, r3
   1a3b8:	2320      	movs	r3, #32
   1a3ba:	9301      	str	r3, [sp, #4]
   1a3bc:	238c      	movs	r3, #140	; 0x8c
   1a3be:	18fb      	adds	r3, r7, r3
   1a3c0:	9300      	str	r3, [sp, #0]
   1a3c2:	2300      	movs	r3, #0
   1a3c4:	2200      	movs	r2, #0
   1a3c6:	2100      	movs	r1, #0
   1a3c8:	2000      	movs	r0, #0
   1a3ca:	f000 fa15 	bl	1a7f8 <atcab_read_zone>
   1a3ce:	0003      	movs	r3, r0
   1a3d0:	7023      	strb	r3, [r4, #0]
   1a3d2:	4bd3      	ldr	r3, [pc, #844]	; (1a720 <atcab_priv_write+0x4b0>)
   1a3d4:	18fb      	adds	r3, r7, r3
   1a3d6:	781b      	ldrb	r3, [r3, #0]
   1a3d8:	2b00      	cmp	r3, #0
   1a3da:	d000      	beq.n	1a3de <atcab_priv_write+0x16e>
   1a3dc:	e189      	b.n	1a6f2 <atcab_priv_write+0x482>
            {
                break;
            }
            // Make the SN continuous by moving SN[4:8] right after SN[0:3]
            memmove(&serial_num[4], &serial_num[8], 5);
   1a3de:	238c      	movs	r3, #140	; 0x8c
   1a3e0:	18fb      	adds	r3, r7, r3
   1a3e2:	3308      	adds	r3, #8
   1a3e4:	0019      	movs	r1, r3
   1a3e6:	238c      	movs	r3, #140	; 0x8c
   1a3e8:	18fb      	adds	r3, r7, r3
   1a3ea:	3304      	adds	r3, #4
   1a3ec:	2205      	movs	r2, #5
   1a3ee:	0018      	movs	r0, r3
   1a3f0:	f00b f986 	bl	25700 <memmove>

            // Send the random Nonce command
            if ((status = atcab_nonce_rand(num_in, rand_out)) != ATCA_SUCCESS)
   1a3f4:	4bca      	ldr	r3, [pc, #808]	; (1a720 <atcab_priv_write+0x4b0>)
   1a3f6:	18fc      	adds	r4, r7, r3
   1a3f8:	2358      	movs	r3, #88	; 0x58
   1a3fa:	18fa      	adds	r2, r7, r3
   1a3fc:	2378      	movs	r3, #120	; 0x78
   1a3fe:	18fb      	adds	r3, r7, r3
   1a400:	0011      	movs	r1, r2
   1a402:	0018      	movs	r0, r3
   1a404:	f7ff ff24 	bl	1a250 <atcab_nonce_rand>
   1a408:	0003      	movs	r3, r0
   1a40a:	7023      	strb	r3, [r4, #0]
   1a40c:	4bc4      	ldr	r3, [pc, #784]	; (1a720 <atcab_priv_write+0x4b0>)
   1a40e:	18fb      	adds	r3, r7, r3
   1a410:	781b      	ldrb	r3, [r3, #0]
   1a412:	2b00      	cmp	r3, #0
   1a414:	d000      	beq.n	1a418 <atcab_priv_write+0x1a8>
   1a416:	e16e      	b.n	1a6f6 <atcab_priv_write+0x486>
            {
                break;
            }

            // Calculate Tempkey
            memset(&temp_key, 0, sizeof(temp_key));
   1a418:	23ac      	movs	r3, #172	; 0xac
   1a41a:	18fb      	adds	r3, r7, r3
   1a41c:	2244      	movs	r2, #68	; 0x44
   1a41e:	2100      	movs	r1, #0
   1a420:	0018      	movs	r0, r3
   1a422:	f00b f982 	bl	2572a <memset>
            memset(&nonce_params, 0, sizeof(nonce_params));
   1a426:	2390      	movs	r3, #144	; 0x90
   1a428:	005b      	lsls	r3, r3, #1
   1a42a:	18fb      	adds	r3, r7, r3
   1a42c:	2210      	movs	r2, #16
   1a42e:	2100      	movs	r1, #0
   1a430:	0018      	movs	r0, r3
   1a432:	f00b f97a 	bl	2572a <memset>
            nonce_params.mode = NONCE_MODE_SEED_UPDATE;
   1a436:	2390      	movs	r3, #144	; 0x90
   1a438:	005b      	lsls	r3, r3, #1
   1a43a:	18fb      	adds	r3, r7, r3
   1a43c:	2200      	movs	r2, #0
   1a43e:	701a      	strb	r2, [r3, #0]
            nonce_params.zero = 0;
   1a440:	2390      	movs	r3, #144	; 0x90
   1a442:	005b      	lsls	r3, r3, #1
   1a444:	18fb      	adds	r3, r7, r3
   1a446:	2200      	movs	r2, #0
   1a448:	805a      	strh	r2, [r3, #2]
            nonce_params.num_in = num_in;
   1a44a:	2390      	movs	r3, #144	; 0x90
   1a44c:	005b      	lsls	r3, r3, #1
   1a44e:	18fb      	adds	r3, r7, r3
   1a450:	2278      	movs	r2, #120	; 0x78
   1a452:	18ba      	adds	r2, r7, r2
   1a454:	605a      	str	r2, [r3, #4]
            nonce_params.rand_out = rand_out;
   1a456:	2390      	movs	r3, #144	; 0x90
   1a458:	005b      	lsls	r3, r3, #1
   1a45a:	18fb      	adds	r3, r7, r3
   1a45c:	2258      	movs	r2, #88	; 0x58
   1a45e:	18ba      	adds	r2, r7, r2
   1a460:	609a      	str	r2, [r3, #8]
            nonce_params.temp_key = &temp_key;
   1a462:	2390      	movs	r3, #144	; 0x90
   1a464:	005b      	lsls	r3, r3, #1
   1a466:	18fb      	adds	r3, r7, r3
   1a468:	22ac      	movs	r2, #172	; 0xac
   1a46a:	18ba      	adds	r2, r7, r2
   1a46c:	60da      	str	r2, [r3, #12]
            if ((status = atcah_nonce(&nonce_params)) != ATCA_SUCCESS)
   1a46e:	4bac      	ldr	r3, [pc, #688]	; (1a720 <atcab_priv_write+0x4b0>)
   1a470:	18fc      	adds	r4, r7, r3
   1a472:	2390      	movs	r3, #144	; 0x90
   1a474:	005b      	lsls	r3, r3, #1
   1a476:	18fb      	adds	r3, r7, r3
   1a478:	0018      	movs	r0, r3
   1a47a:	f001 ff8d 	bl	1c398 <atcah_nonce>
   1a47e:	0003      	movs	r3, r0
   1a480:	7023      	strb	r3, [r4, #0]
   1a482:	4ba7      	ldr	r3, [pc, #668]	; (1a720 <atcab_priv_write+0x4b0>)
   1a484:	18fb      	adds	r3, r7, r3
   1a486:	781b      	ldrb	r3, [r3, #0]
   1a488:	2b00      	cmp	r3, #0
   1a48a:	d000      	beq.n	1a48e <atcab_priv_write+0x21e>
   1a48c:	e135      	b.n	1a6fa <atcab_priv_write+0x48a>
            {
                break;
            }

            // Supply OtherData so GenDig behavior is the same for keys with SlotConfig.NoMac set
            other_data[0] = ATCA_GENDIG;
   1a48e:	4ba5      	ldr	r3, [pc, #660]	; (1a724 <atcab_priv_write+0x4b4>)
   1a490:	2280      	movs	r2, #128	; 0x80
   1a492:	0092      	lsls	r2, r2, #2
   1a494:	4694      	mov	ip, r2
   1a496:	44bc      	add	ip, r7
   1a498:	4463      	add	r3, ip
   1a49a:	2215      	movs	r2, #21
   1a49c:	701a      	strb	r2, [r3, #0]
            other_data[1] = GENDIG_ZONE_DATA;
   1a49e:	4ba1      	ldr	r3, [pc, #644]	; (1a724 <atcab_priv_write+0x4b4>)
   1a4a0:	2280      	movs	r2, #128	; 0x80
   1a4a2:	0092      	lsls	r2, r2, #2
   1a4a4:	4694      	mov	ip, r2
   1a4a6:	44bc      	add	ip, r7
   1a4a8:	4463      	add	r3, ip
   1a4aa:	2202      	movs	r2, #2
   1a4ac:	705a      	strb	r2, [r3, #1]
            other_data[2] = (uint8_t)(write_key_id);
   1a4ae:	4b9e      	ldr	r3, [pc, #632]	; (1a728 <atcab_priv_write+0x4b8>)
   1a4b0:	2280      	movs	r2, #128	; 0x80
   1a4b2:	0092      	lsls	r2, r2, #2
   1a4b4:	4694      	mov	ip, r2
   1a4b6:	44bc      	add	ip, r7
   1a4b8:	4463      	add	r3, ip
   1a4ba:	881b      	ldrh	r3, [r3, #0]
   1a4bc:	b2da      	uxtb	r2, r3
   1a4be:	4b99      	ldr	r3, [pc, #612]	; (1a724 <atcab_priv_write+0x4b4>)
   1a4c0:	2180      	movs	r1, #128	; 0x80
   1a4c2:	0089      	lsls	r1, r1, #2
   1a4c4:	468c      	mov	ip, r1
   1a4c6:	44bc      	add	ip, r7
   1a4c8:	4463      	add	r3, ip
   1a4ca:	709a      	strb	r2, [r3, #2]
            other_data[3] = (uint8_t)(write_key_id >> 8);
   1a4cc:	4b96      	ldr	r3, [pc, #600]	; (1a728 <atcab_priv_write+0x4b8>)
   1a4ce:	2280      	movs	r2, #128	; 0x80
   1a4d0:	0092      	lsls	r2, r2, #2
   1a4d2:	4694      	mov	ip, r2
   1a4d4:	44bc      	add	ip, r7
   1a4d6:	4463      	add	r3, ip
   1a4d8:	881b      	ldrh	r3, [r3, #0]
   1a4da:	0a1b      	lsrs	r3, r3, #8
   1a4dc:	b29b      	uxth	r3, r3
   1a4de:	b2da      	uxtb	r2, r3
   1a4e0:	4b90      	ldr	r3, [pc, #576]	; (1a724 <atcab_priv_write+0x4b4>)
   1a4e2:	2180      	movs	r1, #128	; 0x80
   1a4e4:	0089      	lsls	r1, r1, #2
   1a4e6:	468c      	mov	ip, r1
   1a4e8:	44bc      	add	ip, r7
   1a4ea:	4463      	add	r3, ip
   1a4ec:	70da      	strb	r2, [r3, #3]

            // Send the GenDig command
            if ((status = atcab_gendig(GENDIG_ZONE_DATA, write_key_id, other_data, sizeof(other_data))) != ATCA_SUCCESS)
   1a4ee:	4b8c      	ldr	r3, [pc, #560]	; (1a720 <atcab_priv_write+0x4b0>)
   1a4f0:	18fc      	adds	r4, r7, r3
   1a4f2:	2310      	movs	r3, #16
   1a4f4:	18fa      	adds	r2, r7, r3
   1a4f6:	4b8c      	ldr	r3, [pc, #560]	; (1a728 <atcab_priv_write+0x4b8>)
   1a4f8:	2180      	movs	r1, #128	; 0x80
   1a4fa:	0089      	lsls	r1, r1, #2
   1a4fc:	468c      	mov	ip, r1
   1a4fe:	44bc      	add	ip, r7
   1a500:	4463      	add	r3, ip
   1a502:	8819      	ldrh	r1, [r3, #0]
   1a504:	2304      	movs	r3, #4
   1a506:	2002      	movs	r0, #2
   1a508:	f7ff fbd6 	bl	19cb8 <atcab_gendig>
   1a50c:	0003      	movs	r3, r0
   1a50e:	7023      	strb	r3, [r4, #0]
   1a510:	4b83      	ldr	r3, [pc, #524]	; (1a720 <atcab_priv_write+0x4b0>)
   1a512:	18fb      	adds	r3, r7, r3
   1a514:	781b      	ldrb	r3, [r3, #0]
   1a516:	2b00      	cmp	r3, #0
   1a518:	d000      	beq.n	1a51c <atcab_priv_write+0x2ac>
   1a51a:	e0f0      	b.n	1a6fe <atcab_priv_write+0x48e>
            }

            // Calculate Tempkey
            // NoMac bit isn't being considered here on purpose to remove having to read SlotConfig.
            // OtherData is built to get the same result regardless of the NoMac bit.
            memset(&gen_dig_param, 0, sizeof(gen_dig_param));
   1a51c:	2384      	movs	r3, #132	; 0x84
   1a51e:	005b      	lsls	r3, r3, #1
   1a520:	18fb      	adds	r3, r7, r3
   1a522:	2218      	movs	r2, #24
   1a524:	2100      	movs	r1, #0
   1a526:	0018      	movs	r0, r3
   1a528:	f00b f8ff 	bl	2572a <memset>
            gen_dig_param.zone = GENDIG_ZONE_DATA;
   1a52c:	2384      	movs	r3, #132	; 0x84
   1a52e:	005b      	lsls	r3, r3, #1
   1a530:	18fb      	adds	r3, r7, r3
   1a532:	2202      	movs	r2, #2
   1a534:	701a      	strb	r2, [r3, #0]
            gen_dig_param.sn = serial_num;
   1a536:	2384      	movs	r3, #132	; 0x84
   1a538:	005b      	lsls	r3, r3, #1
   1a53a:	18fb      	adds	r3, r7, r3
   1a53c:	228c      	movs	r2, #140	; 0x8c
   1a53e:	18ba      	adds	r2, r7, r2
   1a540:	609a      	str	r2, [r3, #8]
            gen_dig_param.key_id = write_key_id;
   1a542:	2384      	movs	r3, #132	; 0x84
   1a544:	005b      	lsls	r3, r3, #1
   1a546:	18fb      	adds	r3, r7, r3
   1a548:	4a77      	ldr	r2, [pc, #476]	; (1a728 <atcab_priv_write+0x4b8>)
   1a54a:	2180      	movs	r1, #128	; 0x80
   1a54c:	0089      	lsls	r1, r1, #2
   1a54e:	468c      	mov	ip, r1
   1a550:	44bc      	add	ip, r7
   1a552:	4462      	add	r2, ip
   1a554:	8812      	ldrh	r2, [r2, #0]
   1a556:	805a      	strh	r2, [r3, #2]
            gen_dig_param.is_key_nomac = false;
   1a558:	2384      	movs	r3, #132	; 0x84
   1a55a:	005b      	lsls	r3, r3, #1
   1a55c:	18fb      	adds	r3, r7, r3
   1a55e:	2200      	movs	r2, #0
   1a560:	711a      	strb	r2, [r3, #4]
            gen_dig_param.stored_value = write_key;
   1a562:	2384      	movs	r3, #132	; 0x84
   1a564:	005b      	lsls	r3, r3, #1
   1a566:	18fb      	adds	r3, r7, r3
   1a568:	687a      	ldr	r2, [r7, #4]
   1a56a:	60da      	str	r2, [r3, #12]
            gen_dig_param.other_data = other_data;
   1a56c:	2384      	movs	r3, #132	; 0x84
   1a56e:	005b      	lsls	r3, r3, #1
   1a570:	18fb      	adds	r3, r7, r3
   1a572:	2210      	movs	r2, #16
   1a574:	18ba      	adds	r2, r7, r2
   1a576:	611a      	str	r2, [r3, #16]
            gen_dig_param.temp_key = &temp_key;
   1a578:	2384      	movs	r3, #132	; 0x84
   1a57a:	005b      	lsls	r3, r3, #1
   1a57c:	18fb      	adds	r3, r7, r3
   1a57e:	22ac      	movs	r2, #172	; 0xac
   1a580:	18ba      	adds	r2, r7, r2
   1a582:	615a      	str	r2, [r3, #20]
            if ((status = atcah_gen_dig(&gen_dig_param)) != ATCA_SUCCESS)
   1a584:	4b66      	ldr	r3, [pc, #408]	; (1a720 <atcab_priv_write+0x4b0>)
   1a586:	18fc      	adds	r4, r7, r3
   1a588:	2384      	movs	r3, #132	; 0x84
   1a58a:	005b      	lsls	r3, r3, #1
   1a58c:	18fb      	adds	r3, r7, r3
   1a58e:	0018      	movs	r0, r3
   1a590:	f001 ffe6 	bl	1c560 <atcah_gen_dig>
   1a594:	0003      	movs	r3, r0
   1a596:	7023      	strb	r3, [r4, #0]
   1a598:	4b61      	ldr	r3, [pc, #388]	; (1a720 <atcab_priv_write+0x4b0>)
   1a59a:	18fb      	adds	r3, r7, r3
   1a59c:	781b      	ldrb	r3, [r3, #0]
   1a59e:	2b00      	cmp	r3, #0
   1a5a0:	d000      	beq.n	1a5a4 <atcab_priv_write+0x334>
   1a5a2:	e0ae      	b.n	1a702 <atcab_priv_write+0x492>
            {
                break;
            }

            // Calculate Auth MAC and cipher text
            memset(&host_mac_param, 0, sizeof(host_mac_param));
   1a5a4:	23f0      	movs	r3, #240	; 0xf0
   1a5a6:	18fb      	adds	r3, r7, r3
   1a5a8:	2218      	movs	r2, #24
   1a5aa:	2100      	movs	r1, #0
   1a5ac:	0018      	movs	r0, r3
   1a5ae:	f00b f8bc 	bl	2572a <memset>
            host_mac_param.zone = PRIVWRITE_MODE_ENCRYPT;
   1a5b2:	4b5e      	ldr	r3, [pc, #376]	; (1a72c <atcab_priv_write+0x4bc>)
   1a5b4:	2280      	movs	r2, #128	; 0x80
   1a5b6:	0092      	lsls	r2, r2, #2
   1a5b8:	4694      	mov	ip, r2
   1a5ba:	44bc      	add	ip, r7
   1a5bc:	4463      	add	r3, ip
   1a5be:	2240      	movs	r2, #64	; 0x40
   1a5c0:	701a      	strb	r2, [r3, #0]
            host_mac_param.key_id = key_id;
   1a5c2:	4b5a      	ldr	r3, [pc, #360]	; (1a72c <atcab_priv_write+0x4bc>)
   1a5c4:	2280      	movs	r2, #128	; 0x80
   1a5c6:	0092      	lsls	r2, r2, #2
   1a5c8:	4694      	mov	ip, r2
   1a5ca:	44bc      	add	ip, r7
   1a5cc:	4463      	add	r3, ip
   1a5ce:	4a58      	ldr	r2, [pc, #352]	; (1a730 <atcab_priv_write+0x4c0>)
   1a5d0:	2180      	movs	r1, #128	; 0x80
   1a5d2:	0089      	lsls	r1, r1, #2
   1a5d4:	468c      	mov	ip, r1
   1a5d6:	44bc      	add	ip, r7
   1a5d8:	4462      	add	r2, ip
   1a5da:	8812      	ldrh	r2, [r2, #0]
   1a5dc:	805a      	strh	r2, [r3, #2]
            host_mac_param.sn = serial_num;
   1a5de:	4b53      	ldr	r3, [pc, #332]	; (1a72c <atcab_priv_write+0x4bc>)
   1a5e0:	2280      	movs	r2, #128	; 0x80
   1a5e2:	0092      	lsls	r2, r2, #2
   1a5e4:	4694      	mov	ip, r2
   1a5e6:	44bc      	add	ip, r7
   1a5e8:	4463      	add	r3, ip
   1a5ea:	228c      	movs	r2, #140	; 0x8c
   1a5ec:	18ba      	adds	r2, r7, r2
   1a5ee:	605a      	str	r2, [r3, #4]
            host_mac_param.input_data = &priv_key[0];
   1a5f0:	4b4e      	ldr	r3, [pc, #312]	; (1a72c <atcab_priv_write+0x4bc>)
   1a5f2:	2280      	movs	r2, #128	; 0x80
   1a5f4:	0092      	lsls	r2, r2, #2
   1a5f6:	4694      	mov	ip, r2
   1a5f8:	44bc      	add	ip, r7
   1a5fa:	4463      	add	r3, ip
   1a5fc:	68ba      	ldr	r2, [r7, #8]
   1a5fe:	609a      	str	r2, [r3, #8]
            host_mac_param.encrypted_data = cipher_text;
   1a600:	4b4a      	ldr	r3, [pc, #296]	; (1a72c <atcab_priv_write+0x4bc>)
   1a602:	2280      	movs	r2, #128	; 0x80
   1a604:	0092      	lsls	r2, r2, #2
   1a606:	4694      	mov	ip, r2
   1a608:	44bc      	add	ip, r7
   1a60a:	4463      	add	r3, ip
   1a60c:	2234      	movs	r2, #52	; 0x34
   1a60e:	18ba      	adds	r2, r7, r2
   1a610:	60da      	str	r2, [r3, #12]
            host_mac_param.auth_mac = host_mac;
   1a612:	4b46      	ldr	r3, [pc, #280]	; (1a72c <atcab_priv_write+0x4bc>)
   1a614:	2280      	movs	r2, #128	; 0x80
   1a616:	0092      	lsls	r2, r2, #2
   1a618:	4694      	mov	ip, r2
   1a61a:	44bc      	add	ip, r7
   1a61c:	4463      	add	r3, ip
   1a61e:	2214      	movs	r2, #20
   1a620:	18ba      	adds	r2, r7, r2
   1a622:	611a      	str	r2, [r3, #16]
            host_mac_param.temp_key = &temp_key;
   1a624:	4b41      	ldr	r3, [pc, #260]	; (1a72c <atcab_priv_write+0x4bc>)
   1a626:	2280      	movs	r2, #128	; 0x80
   1a628:	0092      	lsls	r2, r2, #2
   1a62a:	4694      	mov	ip, r2
   1a62c:	44bc      	add	ip, r7
   1a62e:	4463      	add	r3, ip
   1a630:	22ac      	movs	r2, #172	; 0xac
   1a632:	18ba      	adds	r2, r7, r2
   1a634:	615a      	str	r2, [r3, #20]
            if ((status = atcah_privwrite_auth_mac(&host_mac_param)) != ATCA_SUCCESS)
   1a636:	4b3a      	ldr	r3, [pc, #232]	; (1a720 <atcab_priv_write+0x4b0>)
   1a638:	18fc      	adds	r4, r7, r3
   1a63a:	23f0      	movs	r3, #240	; 0xf0
   1a63c:	18fb      	adds	r3, r7, r3
   1a63e:	0018      	movs	r0, r3
   1a640:	f002 f88a 	bl	1c758 <atcah_privwrite_auth_mac>
   1a644:	0003      	movs	r3, r0
   1a646:	7023      	strb	r3, [r4, #0]
   1a648:	4b35      	ldr	r3, [pc, #212]	; (1a720 <atcab_priv_write+0x4b0>)
   1a64a:	18fb      	adds	r3, r7, r3
   1a64c:	781b      	ldrb	r3, [r3, #0]
   1a64e:	2b00      	cmp	r3, #0
   1a650:	d159      	bne.n	1a706 <atcab_priv_write+0x496>
            {
                break;
            }

            // build a write command for encrypted writes
            packet.param1 = PRIVWRITE_MODE_ENCRYPT; // Mode is encrypted write
   1a652:	2398      	movs	r3, #152	; 0x98
   1a654:	005b      	lsls	r3, r3, #1
   1a656:	18fb      	adds	r3, r7, r3
   1a658:	2240      	movs	r2, #64	; 0x40
   1a65a:	70da      	strb	r2, [r3, #3]
            packet.param2 = key_id;                 // Key ID
   1a65c:	2398      	movs	r3, #152	; 0x98
   1a65e:	005b      	lsls	r3, r3, #1
   1a660:	18fb      	adds	r3, r7, r3
   1a662:	4a33      	ldr	r2, [pc, #204]	; (1a730 <atcab_priv_write+0x4c0>)
   1a664:	2180      	movs	r1, #128	; 0x80
   1a666:	0089      	lsls	r1, r1, #2
   1a668:	468c      	mov	ip, r1
   1a66a:	44bc      	add	ip, r7
   1a66c:	4462      	add	r2, ip
   1a66e:	8812      	ldrh	r2, [r2, #0]
   1a670:	809a      	strh	r2, [r3, #4]
            memcpy(&packet.data[0], cipher_text, sizeof(cipher_text));
   1a672:	2398      	movs	r3, #152	; 0x98
   1a674:	005b      	lsls	r3, r3, #1
   1a676:	18fb      	adds	r3, r7, r3
   1a678:	2206      	movs	r2, #6
   1a67a:	492e      	ldr	r1, [pc, #184]	; (1a734 <atcab_priv_write+0x4c4>)
   1a67c:	2080      	movs	r0, #128	; 0x80
   1a67e:	0080      	lsls	r0, r0, #2
   1a680:	4684      	mov	ip, r0
   1a682:	44bc      	add	ip, r7
   1a684:	4461      	add	r1, ip
   1a686:	189b      	adds	r3, r3, r2
   1a688:	2224      	movs	r2, #36	; 0x24
   1a68a:	0018      	movs	r0, r3
   1a68c:	f00b f82f 	bl	256ee <memcpy>
            memcpy(&packet.data[sizeof(cipher_text)], host_mac, sizeof(host_mac));
   1a690:	2398      	movs	r3, #152	; 0x98
   1a692:	005b      	lsls	r3, r3, #1
   1a694:	18fb      	adds	r3, r7, r3
   1a696:	222a      	movs	r2, #42	; 0x2a
   1a698:	4927      	ldr	r1, [pc, #156]	; (1a738 <atcab_priv_write+0x4c8>)
   1a69a:	2080      	movs	r0, #128	; 0x80
   1a69c:	0080      	lsls	r0, r0, #2
   1a69e:	4684      	mov	ip, r0
   1a6a0:	44bc      	add	ip, r7
   1a6a2:	4461      	add	r1, ip
   1a6a4:	189b      	adds	r3, r3, r2
   1a6a6:	2220      	movs	r2, #32
   1a6a8:	0018      	movs	r0, r3
   1a6aa:	f00b f820 	bl	256ee <memcpy>
        }

        if ((status = atPrivWrite(ca_cmd, &packet)) != ATCA_SUCCESS)
   1a6ae:	4b1c      	ldr	r3, [pc, #112]	; (1a720 <atcab_priv_write+0x4b0>)
   1a6b0:	18fc      	adds	r4, r7, r3
   1a6b2:	2398      	movs	r3, #152	; 0x98
   1a6b4:	005b      	lsls	r3, r3, #1
   1a6b6:	18fa      	adds	r2, r7, r3
   1a6b8:	23fc      	movs	r3, #252	; 0xfc
   1a6ba:	005b      	lsls	r3, r3, #1
   1a6bc:	18fb      	adds	r3, r7, r3
   1a6be:	681b      	ldr	r3, [r3, #0]
   1a6c0:	0011      	movs	r1, r2
   1a6c2:	0018      	movs	r0, r3
   1a6c4:	f001 f9be 	bl	1ba44 <atPrivWrite>
   1a6c8:	0003      	movs	r3, r0
   1a6ca:	7023      	strb	r3, [r4, #0]
   1a6cc:	4b14      	ldr	r3, [pc, #80]	; (1a720 <atcab_priv_write+0x4b0>)
   1a6ce:	18fb      	adds	r3, r7, r3
   1a6d0:	781b      	ldrb	r3, [r3, #0]
   1a6d2:	2b00      	cmp	r3, #0
   1a6d4:	d119      	bne.n	1a70a <atcab_priv_write+0x49a>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   1a6d6:	4b19      	ldr	r3, [pc, #100]	; (1a73c <atcab_priv_write+0x4cc>)
   1a6d8:	681a      	ldr	r2, [r3, #0]
   1a6da:	4b11      	ldr	r3, [pc, #68]	; (1a720 <atcab_priv_write+0x4b0>)
   1a6dc:	18fc      	adds	r4, r7, r3
   1a6de:	2398      	movs	r3, #152	; 0x98
   1a6e0:	005b      	lsls	r3, r3, #1
   1a6e2:	18fb      	adds	r3, r7, r3
   1a6e4:	0011      	movs	r1, r2
   1a6e6:	0018      	movs	r0, r3
   1a6e8:	f001 fc8e 	bl	1c008 <atca_execute_command>
   1a6ec:	0003      	movs	r3, r0
   1a6ee:	7023      	strb	r3, [r4, #0]
   1a6f0:	e00c      	b.n	1a70c <atcab_priv_write+0x49c>
        else
        {
            // Read the device SN
            if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, serial_num, 32)) != ATCA_SUCCESS)
            {
                break;
   1a6f2:	46c0      	nop			; (mov r8, r8)
   1a6f4:	e00a      	b.n	1a70c <atcab_priv_write+0x49c>
            memmove(&serial_num[4], &serial_num[8], 5);

            // Send the random Nonce command
            if ((status = atcab_nonce_rand(num_in, rand_out)) != ATCA_SUCCESS)
            {
                break;
   1a6f6:	46c0      	nop			; (mov r8, r8)
   1a6f8:	e008      	b.n	1a70c <atcab_priv_write+0x49c>
            nonce_params.num_in = num_in;
            nonce_params.rand_out = rand_out;
            nonce_params.temp_key = &temp_key;
            if ((status = atcah_nonce(&nonce_params)) != ATCA_SUCCESS)
            {
                break;
   1a6fa:	46c0      	nop			; (mov r8, r8)
   1a6fc:	e006      	b.n	1a70c <atcab_priv_write+0x49c>
            other_data[3] = (uint8_t)(write_key_id >> 8);

            // Send the GenDig command
            if ((status = atcab_gendig(GENDIG_ZONE_DATA, write_key_id, other_data, sizeof(other_data))) != ATCA_SUCCESS)
            {
                break;
   1a6fe:	46c0      	nop			; (mov r8, r8)
   1a700:	e004      	b.n	1a70c <atcab_priv_write+0x49c>
            gen_dig_param.stored_value = write_key;
            gen_dig_param.other_data = other_data;
            gen_dig_param.temp_key = &temp_key;
            if ((status = atcah_gen_dig(&gen_dig_param)) != ATCA_SUCCESS)
            {
                break;
   1a702:	46c0      	nop			; (mov r8, r8)
   1a704:	e002      	b.n	1a70c <atcab_priv_write+0x49c>
            host_mac_param.encrypted_data = cipher_text;
            host_mac_param.auth_mac = host_mac;
            host_mac_param.temp_key = &temp_key;
            if ((status = atcah_privwrite_auth_mac(&host_mac_param)) != ATCA_SUCCESS)
            {
                break;
   1a706:	46c0      	nop			; (mov r8, r8)
   1a708:	e000      	b.n	1a70c <atcab_priv_write+0x49c>
            memcpy(&packet.data[sizeof(cipher_text)], host_mac, sizeof(host_mac));
        }

        if ((status = atPrivWrite(ca_cmd, &packet)) != ATCA_SUCCESS)
        {
            break;
   1a70a:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   1a70c:	4b04      	ldr	r3, [pc, #16]	; (1a720 <atcab_priv_write+0x4b0>)
   1a70e:	18fb      	adds	r3, r7, r3
   1a710:	781b      	ldrb	r3, [r3, #0]
}
   1a712:	0018      	movs	r0, r3
   1a714:	46bd      	mov	sp, r7
   1a716:	2381      	movs	r3, #129	; 0x81
   1a718:	009b      	lsls	r3, r3, #2
   1a71a:	449d      	add	sp, r3
   1a71c:	bd90      	pop	{r4, r7, pc}
   1a71e:	46c0      	nop			; (mov r8, r8)
   1a720:	000001ff 	.word	0x000001ff
   1a724:	fffffe10 	.word	0xfffffe10
   1a728:	fffffe0c 	.word	0xfffffe0c
   1a72c:	fffffef0 	.word	0xfffffef0
   1a730:	fffffe0e 	.word	0xfffffe0e
   1a734:	fffffe34 	.word	0xfffffe34
   1a738:	fffffe14 	.word	0xfffffe14
   1a73c:	200003b0 	.word	0x200003b0

0001a740 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
   1a740:	b590      	push	{r4, r7, lr}
   1a742:	b0b7      	sub	sp, #220	; 0xdc
   1a744:	af00      	add	r7, sp, #0
   1a746:	6078      	str	r0, [r7, #4]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1a748:	4b2a      	ldr	r3, [pc, #168]	; (1a7f4 <atcab_random+0xb4>)
   1a74a:	681b      	ldr	r3, [r3, #0]
   1a74c:	681b      	ldr	r3, [r3, #0]
   1a74e:	22d0      	movs	r2, #208	; 0xd0
   1a750:	18ba      	adds	r2, r7, r2
   1a752:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1a754:	23d7      	movs	r3, #215	; 0xd7
   1a756:	18fb      	adds	r3, r7, r3
   1a758:	22e1      	movs	r2, #225	; 0xe1
   1a75a:	701a      	strb	r2, [r3, #0]

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
   1a75c:	2308      	movs	r3, #8
   1a75e:	18fb      	adds	r3, r7, r3
   1a760:	2200      	movs	r2, #0
   1a762:	70da      	strb	r2, [r3, #3]
        packet.param2 = 0x0000;
   1a764:	2308      	movs	r3, #8
   1a766:	18fb      	adds	r3, r7, r3
   1a768:	2200      	movs	r2, #0
   1a76a:	809a      	strh	r2, [r3, #4]

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
   1a76c:	23d7      	movs	r3, #215	; 0xd7
   1a76e:	18fc      	adds	r4, r7, r3
   1a770:	2308      	movs	r3, #8
   1a772:	18fa      	adds	r2, r7, r3
   1a774:	23d0      	movs	r3, #208	; 0xd0
   1a776:	18fb      	adds	r3, r7, r3
   1a778:	681b      	ldr	r3, [r3, #0]
   1a77a:	0011      	movs	r1, r2
   1a77c:	0018      	movs	r0, r3
   1a77e:	f001 f975 	bl	1ba6c <atRandom>
   1a782:	0003      	movs	r3, r0
   1a784:	7023      	strb	r3, [r4, #0]
   1a786:	23d7      	movs	r3, #215	; 0xd7
   1a788:	18fb      	adds	r3, r7, r3
   1a78a:	781b      	ldrb	r3, [r3, #0]
   1a78c:	2b00      	cmp	r3, #0
   1a78e:	d126      	bne.n	1a7de <atcab_random+0x9e>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   1a790:	4b18      	ldr	r3, [pc, #96]	; (1a7f4 <atcab_random+0xb4>)
   1a792:	681a      	ldr	r2, [r3, #0]
   1a794:	23d7      	movs	r3, #215	; 0xd7
   1a796:	18fc      	adds	r4, r7, r3
   1a798:	2308      	movs	r3, #8
   1a79a:	18fb      	adds	r3, r7, r3
   1a79c:	0011      	movs	r1, r2
   1a79e:	0018      	movs	r0, r3
   1a7a0:	f001 fc32 	bl	1c008 <atca_execute_command>
   1a7a4:	0003      	movs	r3, r0
   1a7a6:	7023      	strb	r3, [r4, #0]
   1a7a8:	23d7      	movs	r3, #215	; 0xd7
   1a7aa:	18fb      	adds	r3, r7, r3
   1a7ac:	781b      	ldrb	r3, [r3, #0]
   1a7ae:	2b00      	cmp	r3, #0
   1a7b0:	d117      	bne.n	1a7e2 <atcab_random+0xa2>
        {
            break;
        }

        if (packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
   1a7b2:	2308      	movs	r3, #8
   1a7b4:	18fb      	adds	r3, r7, r3
   1a7b6:	799b      	ldrb	r3, [r3, #6]
   1a7b8:	2b23      	cmp	r3, #35	; 0x23
   1a7ba:	d004      	beq.n	1a7c6 <atcab_random+0x86>
        {
            status = ATCA_RX_FAIL;
   1a7bc:	23d7      	movs	r3, #215	; 0xd7
   1a7be:	18fb      	adds	r3, r7, r3
   1a7c0:	22e6      	movs	r2, #230	; 0xe6
   1a7c2:	701a      	strb	r2, [r3, #0]
            break;
   1a7c4:	e00e      	b.n	1a7e4 <atcab_random+0xa4>
        }

        if (rand_out)
   1a7c6:	687b      	ldr	r3, [r7, #4]
   1a7c8:	2b00      	cmp	r3, #0
   1a7ca:	d00b      	beq.n	1a7e4 <atcab_random+0xa4>
        {
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
   1a7cc:	2308      	movs	r3, #8
   1a7ce:	18fb      	adds	r3, r7, r3
   1a7d0:	1dd9      	adds	r1, r3, #7
   1a7d2:	687b      	ldr	r3, [r7, #4]
   1a7d4:	2220      	movs	r2, #32
   1a7d6:	0018      	movs	r0, r3
   1a7d8:	f00a ff89 	bl	256ee <memcpy>
   1a7dc:	e002      	b.n	1a7e4 <atcab_random+0xa4>
        packet.param1 = RANDOM_SEED_UPDATE;
        packet.param2 = 0x0000;

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
        {
            break;
   1a7de:	46c0      	nop			; (mov r8, r8)
   1a7e0:	e000      	b.n	1a7e4 <atcab_random+0xa4>
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
        {
            break;
   1a7e2:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);


    return status;
   1a7e4:	23d7      	movs	r3, #215	; 0xd7
   1a7e6:	18fb      	adds	r3, r7, r3
   1a7e8:	781b      	ldrb	r3, [r3, #0]
}
   1a7ea:	0018      	movs	r0, r3
   1a7ec:	46bd      	mov	sp, r7
   1a7ee:	b037      	add	sp, #220	; 0xdc
   1a7f0:	bd90      	pop	{r4, r7, pc}
   1a7f2:	46c0      	nop			; (mov r8, r8)
   1a7f4:	200003b0 	.word	0x200003b0

0001a7f8 <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
   1a7f8:	b5b0      	push	{r4, r5, r7, lr}
   1a7fa:	b0ba      	sub	sp, #232	; 0xe8
   1a7fc:	af02      	add	r7, sp, #8
   1a7fe:	0005      	movs	r5, r0
   1a800:	000c      	movs	r4, r1
   1a802:	0010      	movs	r0, r2
   1a804:	0019      	movs	r1, r3
   1a806:	1dfb      	adds	r3, r7, #7
   1a808:	1c2a      	adds	r2, r5, #0
   1a80a:	701a      	strb	r2, [r3, #0]
   1a80c:	1d3b      	adds	r3, r7, #4
   1a80e:	1c22      	adds	r2, r4, #0
   1a810:	801a      	strh	r2, [r3, #0]
   1a812:	1dbb      	adds	r3, r7, #6
   1a814:	1c02      	adds	r2, r0, #0
   1a816:	701a      	strb	r2, [r3, #0]
   1a818:	1cfb      	adds	r3, r7, #3
   1a81a:	1c0a      	adds	r2, r1, #0
   1a81c:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1a81e:	4b43      	ldr	r3, [pc, #268]	; (1a92c <atcab_read_zone+0x134>)
   1a820:	681b      	ldr	r3, [r3, #0]
   1a822:	681b      	ldr	r3, [r3, #0]
   1a824:	22d8      	movs	r2, #216	; 0xd8
   1a826:	18ba      	adds	r2, r7, r2
   1a828:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1a82a:	23df      	movs	r3, #223	; 0xdf
   1a82c:	18fb      	adds	r3, r7, r3
   1a82e:	22e1      	movs	r2, #225	; 0xe1
   1a830:	701a      	strb	r2, [r3, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if (data == NULL)
   1a832:	23f0      	movs	r3, #240	; 0xf0
   1a834:	18fb      	adds	r3, r7, r3
   1a836:	681b      	ldr	r3, [r3, #0]
   1a838:	2b00      	cmp	r3, #0
   1a83a:	d101      	bne.n	1a840 <atcab_read_zone+0x48>
        {
            return ATCA_BAD_PARAM;
   1a83c:	23e2      	movs	r3, #226	; 0xe2
   1a83e:	e071      	b.n	1a924 <atcab_read_zone+0x12c>
        }

        if (len != 4 && len != 32)
   1a840:	23f4      	movs	r3, #244	; 0xf4
   1a842:	18fb      	adds	r3, r7, r3
   1a844:	781b      	ldrb	r3, [r3, #0]
   1a846:	2b04      	cmp	r3, #4
   1a848:	d006      	beq.n	1a858 <atcab_read_zone+0x60>
   1a84a:	23f4      	movs	r3, #244	; 0xf4
   1a84c:	18fb      	adds	r3, r7, r3
   1a84e:	781b      	ldrb	r3, [r3, #0]
   1a850:	2b20      	cmp	r3, #32
   1a852:	d001      	beq.n	1a858 <atcab_read_zone+0x60>
        {
            return ATCA_BAD_PARAM;
   1a854:	23e2      	movs	r3, #226	; 0xe2
   1a856:	e065      	b.n	1a924 <atcab_read_zone+0x12c>
        }

        // The get address function checks the remaining variables
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
   1a858:	23df      	movs	r3, #223	; 0xdf
   1a85a:	18fc      	adds	r4, r7, r3
   1a85c:	1cfb      	adds	r3, r7, #3
   1a85e:	781d      	ldrb	r5, [r3, #0]
   1a860:	1dbb      	adds	r3, r7, #6
   1a862:	781a      	ldrb	r2, [r3, #0]
   1a864:	1d3b      	adds	r3, r7, #4
   1a866:	8819      	ldrh	r1, [r3, #0]
   1a868:	1dfb      	adds	r3, r7, #7
   1a86a:	7818      	ldrb	r0, [r3, #0]
   1a86c:	230e      	movs	r3, #14
   1a86e:	18fb      	adds	r3, r7, r3
   1a870:	9300      	str	r3, [sp, #0]
   1a872:	002b      	movs	r3, r5
   1a874:	f7ff f82e 	bl	198d4 <atcab_get_addr>
   1a878:	0003      	movs	r3, r0
   1a87a:	7023      	strb	r3, [r4, #0]
   1a87c:	23df      	movs	r3, #223	; 0xdf
   1a87e:	18fb      	adds	r3, r7, r3
   1a880:	781b      	ldrb	r3, [r3, #0]
   1a882:	2b00      	cmp	r3, #0
   1a884:	d146      	bne.n	1a914 <atcab_read_zone+0x11c>
        {
            break;
        }

        // If there are 32 bytes to read, then OR the bit into the mode
        if (len == ATCA_BLOCK_SIZE)
   1a886:	23f4      	movs	r3, #244	; 0xf4
   1a888:	18fb      	adds	r3, r7, r3
   1a88a:	781b      	ldrb	r3, [r3, #0]
   1a88c:	2b20      	cmp	r3, #32
   1a88e:	d106      	bne.n	1a89e <atcab_read_zone+0xa6>
        {
            zone = zone | ATCA_ZONE_READWRITE_32;
   1a890:	1dfb      	adds	r3, r7, #7
   1a892:	1dfa      	adds	r2, r7, #7
   1a894:	7812      	ldrb	r2, [r2, #0]
   1a896:	2180      	movs	r1, #128	; 0x80
   1a898:	4249      	negs	r1, r1
   1a89a:	430a      	orrs	r2, r1
   1a89c:	701a      	strb	r2, [r3, #0]
        }

        // build a read command
        packet.param1 = zone;
   1a89e:	2310      	movs	r3, #16
   1a8a0:	18fb      	adds	r3, r7, r3
   1a8a2:	1dfa      	adds	r2, r7, #7
   1a8a4:	7812      	ldrb	r2, [r2, #0]
   1a8a6:	70da      	strb	r2, [r3, #3]
        packet.param2 = addr;
   1a8a8:	230e      	movs	r3, #14
   1a8aa:	18fb      	adds	r3, r7, r3
   1a8ac:	881a      	ldrh	r2, [r3, #0]
   1a8ae:	2310      	movs	r3, #16
   1a8b0:	18fb      	adds	r3, r7, r3
   1a8b2:	809a      	strh	r2, [r3, #4]

        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
   1a8b4:	23df      	movs	r3, #223	; 0xdf
   1a8b6:	18fc      	adds	r4, r7, r3
   1a8b8:	2310      	movs	r3, #16
   1a8ba:	18fa      	adds	r2, r7, r3
   1a8bc:	23d8      	movs	r3, #216	; 0xd8
   1a8be:	18fb      	adds	r3, r7, r3
   1a8c0:	681b      	ldr	r3, [r3, #0]
   1a8c2:	0011      	movs	r1, r2
   1a8c4:	0018      	movs	r0, r3
   1a8c6:	f001 f8e5 	bl	1ba94 <atRead>
   1a8ca:	0003      	movs	r3, r0
   1a8cc:	7023      	strb	r3, [r4, #0]
   1a8ce:	23df      	movs	r3, #223	; 0xdf
   1a8d0:	18fb      	adds	r3, r7, r3
   1a8d2:	781b      	ldrb	r3, [r3, #0]
   1a8d4:	2b00      	cmp	r3, #0
   1a8d6:	d11f      	bne.n	1a918 <atcab_read_zone+0x120>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   1a8d8:	4b14      	ldr	r3, [pc, #80]	; (1a92c <atcab_read_zone+0x134>)
   1a8da:	681a      	ldr	r2, [r3, #0]
   1a8dc:	23df      	movs	r3, #223	; 0xdf
   1a8de:	18fc      	adds	r4, r7, r3
   1a8e0:	2310      	movs	r3, #16
   1a8e2:	18fb      	adds	r3, r7, r3
   1a8e4:	0011      	movs	r1, r2
   1a8e6:	0018      	movs	r0, r3
   1a8e8:	f001 fb8e 	bl	1c008 <atca_execute_command>
   1a8ec:	0003      	movs	r3, r0
   1a8ee:	7023      	strb	r3, [r4, #0]
   1a8f0:	23df      	movs	r3, #223	; 0xdf
   1a8f2:	18fb      	adds	r3, r7, r3
   1a8f4:	781b      	ldrb	r3, [r3, #0]
   1a8f6:	2b00      	cmp	r3, #0
   1a8f8:	d110      	bne.n	1a91c <atcab_read_zone+0x124>
        {
            break;
        }

        memcpy(data, &packet.data[1], len);
   1a8fa:	23f4      	movs	r3, #244	; 0xf4
   1a8fc:	18fb      	adds	r3, r7, r3
   1a8fe:	781a      	ldrb	r2, [r3, #0]
   1a900:	2310      	movs	r3, #16
   1a902:	18fb      	adds	r3, r7, r3
   1a904:	1dd9      	adds	r1, r3, #7
   1a906:	23f0      	movs	r3, #240	; 0xf0
   1a908:	18fb      	adds	r3, r7, r3
   1a90a:	681b      	ldr	r3, [r3, #0]
   1a90c:	0018      	movs	r0, r3
   1a90e:	f00a feee 	bl	256ee <memcpy>
   1a912:	e004      	b.n	1a91e <atcab_read_zone+0x126>
        }

        // The get address function checks the remaining variables
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
        {
            break;
   1a914:	46c0      	nop			; (mov r8, r8)
   1a916:	e002      	b.n	1a91e <atcab_read_zone+0x126>
        packet.param1 = zone;
        packet.param2 = addr;

        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
        {
            break;
   1a918:	46c0      	nop			; (mov r8, r8)
   1a91a:	e000      	b.n	1a91e <atcab_read_zone+0x126>
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
        {
            break;
   1a91c:	46c0      	nop			; (mov r8, r8)

        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
   1a91e:	23df      	movs	r3, #223	; 0xdf
   1a920:	18fb      	adds	r3, r7, r3
   1a922:	781b      	ldrb	r3, [r3, #0]
}
   1a924:	0018      	movs	r0, r3
   1a926:	46bd      	mov	sp, r7
   1a928:	b038      	add	sp, #224	; 0xe0
   1a92a:	bdb0      	pop	{r4, r5, r7, pc}
   1a92c:	200003b0 	.word	0x200003b0

0001a930 <atcab_is_locked>:
 *                         LOCK_ZONE_DATA).
 *  \param[out] is_locked  Lock state returned here. True if locked.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_is_locked(uint8_t zone, bool *is_locked)
{
   1a930:	b590      	push	{r4, r7, lr}
   1a932:	b087      	sub	sp, #28
   1a934:	af02      	add	r7, sp, #8
   1a936:	0002      	movs	r2, r0
   1a938:	6039      	str	r1, [r7, #0]
   1a93a:	1dfb      	adds	r3, r7, #7
   1a93c:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS ret = ATCA_GEN_FAIL;
   1a93e:	230f      	movs	r3, #15
   1a940:	18fb      	adds	r3, r7, r3
   1a942:	22e1      	movs	r2, #225	; 0xe1
   1a944:	701a      	strb	r2, [r3, #0]
    uint8_t data[ATCA_WORD_SIZE];

    do
    {
        if (is_locked == NULL)
   1a946:	683b      	ldr	r3, [r7, #0]
   1a948:	2b00      	cmp	r3, #0
   1a94a:	d101      	bne.n	1a950 <atcab_is_locked+0x20>
        {
            return ATCA_BAD_PARAM;
   1a94c:	23e2      	movs	r3, #226	; 0xe2
   1a94e:	e037      	b.n	1a9c0 <atcab_is_locked+0x90>
        }

        // Read the word with the lock bytes (UserExtra, Selector, LockValue, LockConfig) (config block = 2, word offset = 5)
        if ((ret = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 2 /*block*/, 5 /*offset*/, data, ATCA_WORD_SIZE)) != ATCA_SUCCESS)
   1a950:	230f      	movs	r3, #15
   1a952:	18fc      	adds	r4, r7, r3
   1a954:	2304      	movs	r3, #4
   1a956:	9301      	str	r3, [sp, #4]
   1a958:	2308      	movs	r3, #8
   1a95a:	18fb      	adds	r3, r7, r3
   1a95c:	9300      	str	r3, [sp, #0]
   1a95e:	2305      	movs	r3, #5
   1a960:	2202      	movs	r2, #2
   1a962:	2100      	movs	r1, #0
   1a964:	2000      	movs	r0, #0
   1a966:	f7ff ff47 	bl	1a7f8 <atcab_read_zone>
   1a96a:	0003      	movs	r3, r0
   1a96c:	7023      	strb	r3, [r4, #0]
   1a96e:	230f      	movs	r3, #15
   1a970:	18fb      	adds	r3, r7, r3
   1a972:	781b      	ldrb	r3, [r3, #0]
   1a974:	2b00      	cmp	r3, #0
   1a976:	d11f      	bne.n	1a9b8 <atcab_is_locked+0x88>
        {
            break;
        }

        // Determine the index into the word_data based on the zone we are querying for
        switch (zone)
   1a978:	1dfb      	adds	r3, r7, #7
   1a97a:	781b      	ldrb	r3, [r3, #0]
   1a97c:	2b00      	cmp	r3, #0
   1a97e:	d002      	beq.n	1a986 <atcab_is_locked+0x56>
   1a980:	2b01      	cmp	r3, #1
   1a982:	d00a      	beq.n	1a99a <atcab_is_locked+0x6a>
   1a984:	e013      	b.n	1a9ae <atcab_is_locked+0x7e>
        {
        case LOCK_ZONE_CONFIG: *is_locked = (data[3] != 0x55); break;
   1a986:	2308      	movs	r3, #8
   1a988:	18fb      	adds	r3, r7, r3
   1a98a:	78db      	ldrb	r3, [r3, #3]
   1a98c:	3b55      	subs	r3, #85	; 0x55
   1a98e:	1e5a      	subs	r2, r3, #1
   1a990:	4193      	sbcs	r3, r2
   1a992:	b2da      	uxtb	r2, r3
   1a994:	683b      	ldr	r3, [r7, #0]
   1a996:	701a      	strb	r2, [r3, #0]
   1a998:	e00f      	b.n	1a9ba <atcab_is_locked+0x8a>
        case LOCK_ZONE_DATA:   *is_locked = (data[2] != 0x55); break;
   1a99a:	2308      	movs	r3, #8
   1a99c:	18fb      	adds	r3, r7, r3
   1a99e:	789b      	ldrb	r3, [r3, #2]
   1a9a0:	3b55      	subs	r3, #85	; 0x55
   1a9a2:	1e5a      	subs	r2, r3, #1
   1a9a4:	4193      	sbcs	r3, r2
   1a9a6:	b2da      	uxtb	r2, r3
   1a9a8:	683b      	ldr	r3, [r7, #0]
   1a9aa:	701a      	strb	r2, [r3, #0]
   1a9ac:	e005      	b.n	1a9ba <atcab_is_locked+0x8a>
        default: ret = ATCA_BAD_PARAM; break;
   1a9ae:	230f      	movs	r3, #15
   1a9b0:	18fb      	adds	r3, r7, r3
   1a9b2:	22e2      	movs	r2, #226	; 0xe2
   1a9b4:	701a      	strb	r2, [r3, #0]
   1a9b6:	e000      	b.n	1a9ba <atcab_is_locked+0x8a>
        }

        // Read the word with the lock bytes (UserExtra, Selector, LockValue, LockConfig) (config block = 2, word offset = 5)
        if ((ret = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 2 /*block*/, 5 /*offset*/, data, ATCA_WORD_SIZE)) != ATCA_SUCCESS)
        {
            break;
   1a9b8:	46c0      	nop			; (mov r8, r8)
        default: ret = ATCA_BAD_PARAM; break;
        }
    }
    while (0);

    return ret;
   1a9ba:	230f      	movs	r3, #15
   1a9bc:	18fb      	adds	r3, r7, r3
   1a9be:	781b      	ldrb	r3, [r3, #0]
}
   1a9c0:	0018      	movs	r0, r3
   1a9c2:	46bd      	mov	sp, r7
   1a9c4:	b005      	add	sp, #20
   1a9c6:	bd90      	pop	{r4, r7, pc}

0001a9c8 <atcab_read_enc>:
 *  \param[in]  enc_key_id  KeyID of the ReadKey being used.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_enc(uint16_t key_id, uint8_t block, uint8_t *data, const uint8_t* enc_key, const uint16_t enc_key_id)
{
   1a9c8:	b590      	push	{r4, r7, lr}
   1a9ca:	b0bb      	sub	sp, #236	; 0xec
   1a9cc:	af02      	add	r7, sp, #8
   1a9ce:	60ba      	str	r2, [r7, #8]
   1a9d0:	607b      	str	r3, [r7, #4]
   1a9d2:	230e      	movs	r3, #14
   1a9d4:	18fb      	adds	r3, r7, r3
   1a9d6:	1c02      	adds	r2, r0, #0
   1a9d8:	801a      	strh	r2, [r3, #0]
   1a9da:	230d      	movs	r3, #13
   1a9dc:	18fb      	adds	r3, r7, r3
   1a9de:	1c0a      	adds	r2, r1, #0
   1a9e0:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1a9e2:	23df      	movs	r3, #223	; 0xdf
   1a9e4:	18fb      	adds	r3, r7, r3
   1a9e6:	22e1      	movs	r2, #225	; 0xe1
   1a9e8:	701a      	strb	r2, [r3, #0]
    uint8_t zone = ATCA_ZONE_DATA | ATCA_ZONE_READWRITE_32;
   1a9ea:	23d7      	movs	r3, #215	; 0xd7
   1a9ec:	18fb      	adds	r3, r7, r3
   1a9ee:	2282      	movs	r2, #130	; 0x82
   1a9f0:	701a      	strb	r2, [r3, #0]
    atca_nonce_in_out_t nonce_params;
    atca_gen_dig_in_out_t gen_dig_param;
    atca_temp_key_t temp_key;
    uint8_t serial_num[32];
    uint8_t num_in[NONCE_NUMIN_SIZE] = { 0 };
   1a9f2:	2334      	movs	r3, #52	; 0x34
   1a9f4:	18fb      	adds	r3, r7, r3
   1a9f6:	0018      	movs	r0, r3
   1a9f8:	2314      	movs	r3, #20
   1a9fa:	001a      	movs	r2, r3
   1a9fc:	2100      	movs	r1, #0
   1a9fe:	f00a fe94 	bl	2572a <memset>
    uint8_t rand_out[RANDOM_NUM_SIZE] = { 0 };
   1aa02:	2314      	movs	r3, #20
   1aa04:	18fb      	adds	r3, r7, r3
   1aa06:	0018      	movs	r0, r3
   1aa08:	2320      	movs	r3, #32
   1aa0a:	001a      	movs	r2, r3
   1aa0c:	2100      	movs	r1, #0
   1aa0e:	f00a fe8c 	bl	2572a <memset>
    uint8_t other_data[4] = { 0 };
   1aa12:	2310      	movs	r3, #16
   1aa14:	18fb      	adds	r3, r7, r3
   1aa16:	2200      	movs	r2, #0
   1aa18:	601a      	str	r2, [r3, #0]
    int i = 0;
   1aa1a:	2300      	movs	r3, #0
   1aa1c:	22d8      	movs	r2, #216	; 0xd8
   1aa1e:	18ba      	adds	r2, r7, r2
   1aa20:	6013      	str	r3, [r2, #0]

    do
    {
        // Verify inputs parameters
        if (data == NULL || enc_key == NULL)
   1aa22:	68bb      	ldr	r3, [r7, #8]
   1aa24:	2b00      	cmp	r3, #0
   1aa26:	d002      	beq.n	1aa2e <atcab_read_enc+0x66>
   1aa28:	687b      	ldr	r3, [r7, #4]
   1aa2a:	2b00      	cmp	r3, #0
   1aa2c:	d104      	bne.n	1aa38 <atcab_read_enc+0x70>
        {
            status = ATCA_BAD_PARAM;
   1aa2e:	23df      	movs	r3, #223	; 0xdf
   1aa30:	18fb      	adds	r3, r7, r3
   1aa32:	22e2      	movs	r2, #226	; 0xe2
   1aa34:	701a      	strb	r2, [r3, #0]
            break;
   1aa36:	e135      	b.n	1aca4 <atcab_read_enc+0x2dc>
        }

        // Read the device SN
        if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, serial_num, 32)) != ATCA_SUCCESS)
   1aa38:	23df      	movs	r3, #223	; 0xdf
   1aa3a:	18fc      	adds	r4, r7, r3
   1aa3c:	2320      	movs	r3, #32
   1aa3e:	9301      	str	r3, [sp, #4]
   1aa40:	2348      	movs	r3, #72	; 0x48
   1aa42:	18fb      	adds	r3, r7, r3
   1aa44:	9300      	str	r3, [sp, #0]
   1aa46:	2300      	movs	r3, #0
   1aa48:	2200      	movs	r2, #0
   1aa4a:	2100      	movs	r1, #0
   1aa4c:	2000      	movs	r0, #0
   1aa4e:	f7ff fed3 	bl	1a7f8 <atcab_read_zone>
   1aa52:	0003      	movs	r3, r0
   1aa54:	7023      	strb	r3, [r4, #0]
   1aa56:	23df      	movs	r3, #223	; 0xdf
   1aa58:	18fb      	adds	r3, r7, r3
   1aa5a:	781b      	ldrb	r3, [r3, #0]
   1aa5c:	2b00      	cmp	r3, #0
   1aa5e:	d000      	beq.n	1aa62 <atcab_read_enc+0x9a>
   1aa60:	e11f      	b.n	1aca2 <atcab_read_enc+0x2da>
        {
            break;
        }
        // Make the SN continuous by moving SN[4:8] right after SN[0:3]
        memmove(&serial_num[4], &serial_num[8], 5);
   1aa62:	2348      	movs	r3, #72	; 0x48
   1aa64:	18fb      	adds	r3, r7, r3
   1aa66:	3308      	adds	r3, #8
   1aa68:	0019      	movs	r1, r3
   1aa6a:	2348      	movs	r3, #72	; 0x48
   1aa6c:	18fb      	adds	r3, r7, r3
   1aa6e:	3304      	adds	r3, #4
   1aa70:	2205      	movs	r2, #5
   1aa72:	0018      	movs	r0, r3
   1aa74:	f00a fe44 	bl	25700 <memmove>

        // Send the random Nonce command
        if ((status = atcab_nonce_rand(num_in, rand_out)) != ATCA_SUCCESS)
   1aa78:	23df      	movs	r3, #223	; 0xdf
   1aa7a:	18fc      	adds	r4, r7, r3
   1aa7c:	2314      	movs	r3, #20
   1aa7e:	18fa      	adds	r2, r7, r3
   1aa80:	2334      	movs	r3, #52	; 0x34
   1aa82:	18fb      	adds	r3, r7, r3
   1aa84:	0011      	movs	r1, r2
   1aa86:	0018      	movs	r0, r3
   1aa88:	f7ff fbe2 	bl	1a250 <atcab_nonce_rand>
   1aa8c:	0003      	movs	r3, r0
   1aa8e:	7023      	strb	r3, [r4, #0]
   1aa90:	23df      	movs	r3, #223	; 0xdf
   1aa92:	18fb      	adds	r3, r7, r3
   1aa94:	781b      	ldrb	r3, [r3, #0]
   1aa96:	2b00      	cmp	r3, #0
   1aa98:	d008      	beq.n	1aaac <atcab_read_enc+0xe4>
        {
            BREAK(status, "Nonce failed");
   1aa9a:	23df      	movs	r3, #223	; 0xdf
   1aa9c:	18fb      	adds	r3, r7, r3
   1aa9e:	781a      	ldrb	r2, [r3, #0]
   1aaa0:	4b84      	ldr	r3, [pc, #528]	; (1acb4 <atcab_read_enc+0x2ec>)
   1aaa2:	0011      	movs	r1, r2
   1aaa4:	0018      	movs	r0, r3
   1aaa6:	f00b fb6b 	bl	26180 <iprintf>
   1aaaa:	e0fb      	b.n	1aca4 <atcab_read_enc+0x2dc>
        }

        // Calculate Tempkey
        memset(&temp_key, 0, sizeof(temp_key));
   1aaac:	2368      	movs	r3, #104	; 0x68
   1aaae:	18fb      	adds	r3, r7, r3
   1aab0:	2244      	movs	r2, #68	; 0x44
   1aab2:	2100      	movs	r1, #0
   1aab4:	0018      	movs	r0, r3
   1aab6:	f00a fe38 	bl	2572a <memset>
        memset(&nonce_params, 0, sizeof(nonce_params));
   1aaba:	23c4      	movs	r3, #196	; 0xc4
   1aabc:	18fb      	adds	r3, r7, r3
   1aabe:	2210      	movs	r2, #16
   1aac0:	2100      	movs	r1, #0
   1aac2:	0018      	movs	r0, r3
   1aac4:	f00a fe31 	bl	2572a <memset>
        nonce_params.mode = NONCE_MODE_SEED_UPDATE;
   1aac8:	23c4      	movs	r3, #196	; 0xc4
   1aaca:	18fb      	adds	r3, r7, r3
   1aacc:	2200      	movs	r2, #0
   1aace:	701a      	strb	r2, [r3, #0]
        nonce_params.zero = 0;
   1aad0:	23c4      	movs	r3, #196	; 0xc4
   1aad2:	18fb      	adds	r3, r7, r3
   1aad4:	2200      	movs	r2, #0
   1aad6:	805a      	strh	r2, [r3, #2]
        nonce_params.num_in = (uint8_t*)&num_in;
   1aad8:	23c4      	movs	r3, #196	; 0xc4
   1aada:	18fb      	adds	r3, r7, r3
   1aadc:	2234      	movs	r2, #52	; 0x34
   1aade:	18ba      	adds	r2, r7, r2
   1aae0:	605a      	str	r2, [r3, #4]
        nonce_params.rand_out = (uint8_t*)&rand_out;
   1aae2:	23c4      	movs	r3, #196	; 0xc4
   1aae4:	18fb      	adds	r3, r7, r3
   1aae6:	2214      	movs	r2, #20
   1aae8:	18ba      	adds	r2, r7, r2
   1aaea:	609a      	str	r2, [r3, #8]
        nonce_params.temp_key = &temp_key;
   1aaec:	23c4      	movs	r3, #196	; 0xc4
   1aaee:	18fb      	adds	r3, r7, r3
   1aaf0:	2268      	movs	r2, #104	; 0x68
   1aaf2:	18ba      	adds	r2, r7, r2
   1aaf4:	60da      	str	r2, [r3, #12]
        if ((status = atcah_nonce(&nonce_params)) != ATCA_SUCCESS)
   1aaf6:	23df      	movs	r3, #223	; 0xdf
   1aaf8:	18fc      	adds	r4, r7, r3
   1aafa:	23c4      	movs	r3, #196	; 0xc4
   1aafc:	18fb      	adds	r3, r7, r3
   1aafe:	0018      	movs	r0, r3
   1ab00:	f001 fc4a 	bl	1c398 <atcah_nonce>
   1ab04:	0003      	movs	r3, r0
   1ab06:	7023      	strb	r3, [r4, #0]
   1ab08:	23df      	movs	r3, #223	; 0xdf
   1ab0a:	18fb      	adds	r3, r7, r3
   1ab0c:	781b      	ldrb	r3, [r3, #0]
   1ab0e:	2b00      	cmp	r3, #0
   1ab10:	d008      	beq.n	1ab24 <atcab_read_enc+0x15c>
        {
            BREAK(status, "Calc TempKey failed");
   1ab12:	23df      	movs	r3, #223	; 0xdf
   1ab14:	18fb      	adds	r3, r7, r3
   1ab16:	781a      	ldrb	r2, [r3, #0]
   1ab18:	4b67      	ldr	r3, [pc, #412]	; (1acb8 <atcab_read_enc+0x2f0>)
   1ab1a:	0011      	movs	r1, r2
   1ab1c:	0018      	movs	r0, r3
   1ab1e:	f00b fb2f 	bl	26180 <iprintf>
   1ab22:	e0bf      	b.n	1aca4 <atcab_read_enc+0x2dc>
        }

        // Supply OtherData so GenDig behavior is the same for keys with SlotConfig.NoMac set
        other_data[0] = ATCA_GENDIG;
   1ab24:	2310      	movs	r3, #16
   1ab26:	18fb      	adds	r3, r7, r3
   1ab28:	2215      	movs	r2, #21
   1ab2a:	701a      	strb	r2, [r3, #0]
        other_data[1] = GENDIG_ZONE_DATA;
   1ab2c:	2310      	movs	r3, #16
   1ab2e:	18fb      	adds	r3, r7, r3
   1ab30:	2202      	movs	r2, #2
   1ab32:	705a      	strb	r2, [r3, #1]
        other_data[2] = (uint8_t)(enc_key_id);
   1ab34:	23f0      	movs	r3, #240	; 0xf0
   1ab36:	18fb      	adds	r3, r7, r3
   1ab38:	881b      	ldrh	r3, [r3, #0]
   1ab3a:	b2da      	uxtb	r2, r3
   1ab3c:	2310      	movs	r3, #16
   1ab3e:	18fb      	adds	r3, r7, r3
   1ab40:	709a      	strb	r2, [r3, #2]
        other_data[3] = (uint8_t)(enc_key_id >> 8);
   1ab42:	23f0      	movs	r3, #240	; 0xf0
   1ab44:	18fb      	adds	r3, r7, r3
   1ab46:	881b      	ldrh	r3, [r3, #0]
   1ab48:	0a1b      	lsrs	r3, r3, #8
   1ab4a:	b29b      	uxth	r3, r3
   1ab4c:	b2da      	uxtb	r2, r3
   1ab4e:	2310      	movs	r3, #16
   1ab50:	18fb      	adds	r3, r7, r3
   1ab52:	70da      	strb	r2, [r3, #3]

        // Send the GenDig command
        if ((status = atcab_gendig(GENDIG_ZONE_DATA, enc_key_id, other_data, sizeof(other_data))) != ATCA_SUCCESS)
   1ab54:	23df      	movs	r3, #223	; 0xdf
   1ab56:	18fc      	adds	r4, r7, r3
   1ab58:	2310      	movs	r3, #16
   1ab5a:	18fa      	adds	r2, r7, r3
   1ab5c:	23f0      	movs	r3, #240	; 0xf0
   1ab5e:	18fb      	adds	r3, r7, r3
   1ab60:	8819      	ldrh	r1, [r3, #0]
   1ab62:	2304      	movs	r3, #4
   1ab64:	2002      	movs	r0, #2
   1ab66:	f7ff f8a7 	bl	19cb8 <atcab_gendig>
   1ab6a:	0003      	movs	r3, r0
   1ab6c:	7023      	strb	r3, [r4, #0]
   1ab6e:	23df      	movs	r3, #223	; 0xdf
   1ab70:	18fb      	adds	r3, r7, r3
   1ab72:	781b      	ldrb	r3, [r3, #0]
   1ab74:	2b00      	cmp	r3, #0
   1ab76:	d008      	beq.n	1ab8a <atcab_read_enc+0x1c2>
        {
            BREAK(status, "GenDig failed");
   1ab78:	23df      	movs	r3, #223	; 0xdf
   1ab7a:	18fb      	adds	r3, r7, r3
   1ab7c:	781a      	ldrb	r2, [r3, #0]
   1ab7e:	4b4f      	ldr	r3, [pc, #316]	; (1acbc <atcab_read_enc+0x2f4>)
   1ab80:	0011      	movs	r1, r2
   1ab82:	0018      	movs	r0, r3
   1ab84:	f00b fafc 	bl	26180 <iprintf>
   1ab88:	e08c      	b.n	1aca4 <atcab_read_enc+0x2dc>
        }

        // Calculate Tempkey
        // NoMac bit isn't being considered here on purpose to remove having to read SlotConfig.
        // OtherData is built to get the same result regardless of the NoMac bit.
        memset(&gen_dig_param, 0, sizeof(gen_dig_param));
   1ab8a:	23ac      	movs	r3, #172	; 0xac
   1ab8c:	18fb      	adds	r3, r7, r3
   1ab8e:	2218      	movs	r2, #24
   1ab90:	2100      	movs	r1, #0
   1ab92:	0018      	movs	r0, r3
   1ab94:	f00a fdc9 	bl	2572a <memset>
        gen_dig_param.key_id = enc_key_id;
   1ab98:	23ac      	movs	r3, #172	; 0xac
   1ab9a:	18fb      	adds	r3, r7, r3
   1ab9c:	22f0      	movs	r2, #240	; 0xf0
   1ab9e:	18ba      	adds	r2, r7, r2
   1aba0:	8812      	ldrh	r2, [r2, #0]
   1aba2:	805a      	strh	r2, [r3, #2]
        gen_dig_param.is_key_nomac = false;
   1aba4:	23ac      	movs	r3, #172	; 0xac
   1aba6:	18fb      	adds	r3, r7, r3
   1aba8:	2200      	movs	r2, #0
   1abaa:	711a      	strb	r2, [r3, #4]
        gen_dig_param.sn = serial_num;
   1abac:	23ac      	movs	r3, #172	; 0xac
   1abae:	18fb      	adds	r3, r7, r3
   1abb0:	2248      	movs	r2, #72	; 0x48
   1abb2:	18ba      	adds	r2, r7, r2
   1abb4:	609a      	str	r2, [r3, #8]
        gen_dig_param.stored_value = enc_key;
   1abb6:	23ac      	movs	r3, #172	; 0xac
   1abb8:	18fb      	adds	r3, r7, r3
   1abba:	687a      	ldr	r2, [r7, #4]
   1abbc:	60da      	str	r2, [r3, #12]
        gen_dig_param.zone = GENDIG_ZONE_DATA;
   1abbe:	23ac      	movs	r3, #172	; 0xac
   1abc0:	18fb      	adds	r3, r7, r3
   1abc2:	2202      	movs	r2, #2
   1abc4:	701a      	strb	r2, [r3, #0]
        gen_dig_param.other_data = other_data;
   1abc6:	23ac      	movs	r3, #172	; 0xac
   1abc8:	18fb      	adds	r3, r7, r3
   1abca:	2210      	movs	r2, #16
   1abcc:	18ba      	adds	r2, r7, r2
   1abce:	611a      	str	r2, [r3, #16]
        gen_dig_param.temp_key = &temp_key;
   1abd0:	23ac      	movs	r3, #172	; 0xac
   1abd2:	18fb      	adds	r3, r7, r3
   1abd4:	2268      	movs	r2, #104	; 0x68
   1abd6:	18ba      	adds	r2, r7, r2
   1abd8:	615a      	str	r2, [r3, #20]
        if ((status = atcah_gen_dig(&gen_dig_param)) != ATCA_SUCCESS)
   1abda:	23df      	movs	r3, #223	; 0xdf
   1abdc:	18fc      	adds	r4, r7, r3
   1abde:	23ac      	movs	r3, #172	; 0xac
   1abe0:	18fb      	adds	r3, r7, r3
   1abe2:	0018      	movs	r0, r3
   1abe4:	f001 fcbc 	bl	1c560 <atcah_gen_dig>
   1abe8:	0003      	movs	r3, r0
   1abea:	7023      	strb	r3, [r4, #0]
   1abec:	23df      	movs	r3, #223	; 0xdf
   1abee:	18fb      	adds	r3, r7, r3
   1abf0:	781b      	ldrb	r3, [r3, #0]
   1abf2:	2b00      	cmp	r3, #0
   1abf4:	d008      	beq.n	1ac08 <atcab_read_enc+0x240>
        {
            BREAK(status, "");
   1abf6:	23df      	movs	r3, #223	; 0xdf
   1abf8:	18fb      	adds	r3, r7, r3
   1abfa:	781a      	ldrb	r2, [r3, #0]
   1abfc:	4b30      	ldr	r3, [pc, #192]	; (1acc0 <atcab_read_enc+0x2f8>)
   1abfe:	0011      	movs	r1, r2
   1ac00:	0018      	movs	r0, r3
   1ac02:	f00b fabd 	bl	26180 <iprintf>
   1ac06:	e04d      	b.n	1aca4 <atcab_read_enc+0x2dc>
        }

        // Read Encrypted
        if ((status = atcab_read_zone(zone, key_id, block, 0, data, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
   1ac08:	23df      	movs	r3, #223	; 0xdf
   1ac0a:	18fc      	adds	r4, r7, r3
   1ac0c:	230d      	movs	r3, #13
   1ac0e:	18fb      	adds	r3, r7, r3
   1ac10:	781a      	ldrb	r2, [r3, #0]
   1ac12:	230e      	movs	r3, #14
   1ac14:	18fb      	adds	r3, r7, r3
   1ac16:	8819      	ldrh	r1, [r3, #0]
   1ac18:	23d7      	movs	r3, #215	; 0xd7
   1ac1a:	18fb      	adds	r3, r7, r3
   1ac1c:	7818      	ldrb	r0, [r3, #0]
   1ac1e:	2320      	movs	r3, #32
   1ac20:	9301      	str	r3, [sp, #4]
   1ac22:	68bb      	ldr	r3, [r7, #8]
   1ac24:	9300      	str	r3, [sp, #0]
   1ac26:	2300      	movs	r3, #0
   1ac28:	f7ff fde6 	bl	1a7f8 <atcab_read_zone>
   1ac2c:	0003      	movs	r3, r0
   1ac2e:	7023      	strb	r3, [r4, #0]
   1ac30:	23df      	movs	r3, #223	; 0xdf
   1ac32:	18fb      	adds	r3, r7, r3
   1ac34:	781b      	ldrb	r3, [r3, #0]
   1ac36:	2b00      	cmp	r3, #0
   1ac38:	d008      	beq.n	1ac4c <atcab_read_enc+0x284>
        {
            BREAK(status, "Read encrypted failed");
   1ac3a:	23df      	movs	r3, #223	; 0xdf
   1ac3c:	18fb      	adds	r3, r7, r3
   1ac3e:	781a      	ldrb	r2, [r3, #0]
   1ac40:	4b20      	ldr	r3, [pc, #128]	; (1acc4 <atcab_read_enc+0x2fc>)
   1ac42:	0011      	movs	r1, r2
   1ac44:	0018      	movs	r0, r3
   1ac46:	f00b fa9b 	bl	26180 <iprintf>
   1ac4a:	e02b      	b.n	1aca4 <atcab_read_enc+0x2dc>
        }

        // Decrypt
        for (i = 0; i < ATCA_BLOCK_SIZE; i++)
   1ac4c:	2300      	movs	r3, #0
   1ac4e:	22d8      	movs	r2, #216	; 0xd8
   1ac50:	18ba      	adds	r2, r7, r2
   1ac52:	6013      	str	r3, [r2, #0]
   1ac54:	e01b      	b.n	1ac8e <atcab_read_enc+0x2c6>
        {
            data[i] = data[i] ^ temp_key.value[i];
   1ac56:	23d8      	movs	r3, #216	; 0xd8
   1ac58:	18fb      	adds	r3, r7, r3
   1ac5a:	681b      	ldr	r3, [r3, #0]
   1ac5c:	68ba      	ldr	r2, [r7, #8]
   1ac5e:	18d3      	adds	r3, r2, r3
   1ac60:	22d8      	movs	r2, #216	; 0xd8
   1ac62:	18ba      	adds	r2, r7, r2
   1ac64:	6812      	ldr	r2, [r2, #0]
   1ac66:	68b9      	ldr	r1, [r7, #8]
   1ac68:	188a      	adds	r2, r1, r2
   1ac6a:	7811      	ldrb	r1, [r2, #0]
   1ac6c:	2268      	movs	r2, #104	; 0x68
   1ac6e:	18b8      	adds	r0, r7, r2
   1ac70:	22d8      	movs	r2, #216	; 0xd8
   1ac72:	18ba      	adds	r2, r7, r2
   1ac74:	6812      	ldr	r2, [r2, #0]
   1ac76:	1882      	adds	r2, r0, r2
   1ac78:	7812      	ldrb	r2, [r2, #0]
   1ac7a:	404a      	eors	r2, r1
   1ac7c:	b2d2      	uxtb	r2, r2
   1ac7e:	701a      	strb	r2, [r3, #0]
        {
            BREAK(status, "Read encrypted failed");
        }

        // Decrypt
        for (i = 0; i < ATCA_BLOCK_SIZE; i++)
   1ac80:	23d8      	movs	r3, #216	; 0xd8
   1ac82:	18fb      	adds	r3, r7, r3
   1ac84:	681b      	ldr	r3, [r3, #0]
   1ac86:	3301      	adds	r3, #1
   1ac88:	22d8      	movs	r2, #216	; 0xd8
   1ac8a:	18ba      	adds	r2, r7, r2
   1ac8c:	6013      	str	r3, [r2, #0]
   1ac8e:	23d8      	movs	r3, #216	; 0xd8
   1ac90:	18fb      	adds	r3, r7, r3
   1ac92:	681b      	ldr	r3, [r3, #0]
   1ac94:	2b1f      	cmp	r3, #31
   1ac96:	ddde      	ble.n	1ac56 <atcab_read_enc+0x28e>
        {
            data[i] = data[i] ^ temp_key.value[i];
        }

        status = ATCA_SUCCESS;
   1ac98:	23df      	movs	r3, #223	; 0xdf
   1ac9a:	18fb      	adds	r3, r7, r3
   1ac9c:	2200      	movs	r2, #0
   1ac9e:	701a      	strb	r2, [r3, #0]
   1aca0:	e000      	b.n	1aca4 <atcab_read_enc+0x2dc>
        }

        // Read the device SN
        if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, serial_num, 32)) != ATCA_SUCCESS)
        {
            break;
   1aca2:	46c0      	nop			; (mov r8, r8)

    }
    while (0);


    return status;
   1aca4:	23df      	movs	r3, #223	; 0xdf
   1aca6:	18fb      	adds	r3, r7, r3
   1aca8:	781b      	ldrb	r3, [r3, #0]
}
   1acaa:	0018      	movs	r0, r3
   1acac:	46bd      	mov	sp, r7
   1acae:	b039      	add	sp, #228	; 0xe4
   1acb0:	bd90      	pop	{r4, r7, pc}
   1acb2:	46c0      	nop			; (mov r8, r8)
   1acb4:	0002e18c 	.word	0x0002e18c
   1acb8:	0002e1b0 	.word	0x0002e1b0
   1acbc:	0002e1d8 	.word	0x0002e1d8
   1acc0:	0002e1fc 	.word	0x0002e1fc
   1acc4:	0002e214 	.word	0x0002e214

0001acc8 <atcab_read_config_zone>:
 *                           for ATSHA devices, 128 bytes for ATECC devices.
 *
 *  \returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_config_zone(uint8_t* config_data)
{
   1acc8:	b590      	push	{r4, r7, lr}
   1acca:	b087      	sub	sp, #28
   1accc:	af02      	add	r7, sp, #8
   1acce:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1acd0:	230f      	movs	r3, #15
   1acd2:	18fb      	adds	r3, r7, r3
   1acd4:	22e1      	movs	r2, #225	; 0xe1
   1acd6:	701a      	strb	r2, [r3, #0]

    do
    {

        // Verify the inputs
        if (config_data == NULL)
   1acd8:	687b      	ldr	r3, [r7, #4]
   1acda:	2b00      	cmp	r3, #0
   1acdc:	d104      	bne.n	1ace8 <atcab_read_config_zone+0x20>
        {
            status = ATCA_BAD_PARAM;
   1acde:	230f      	movs	r3, #15
   1ace0:	18fb      	adds	r3, r7, r3
   1ace2:	22e2      	movs	r2, #226	; 0xe2
   1ace4:	701a      	strb	r2, [r3, #0]
            break;
   1ace6:	e021      	b.n	1ad2c <atcab_read_config_zone+0x64>
        }

        if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
   1ace8:	4b14      	ldr	r3, [pc, #80]	; (1ad3c <atcab_read_config_zone+0x74>)
   1acea:	681b      	ldr	r3, [r3, #0]
   1acec:	685b      	ldr	r3, [r3, #4]
   1acee:	685b      	ldr	r3, [r3, #4]
   1acf0:	785b      	ldrb	r3, [r3, #1]
   1acf2:	2b00      	cmp	r3, #0
   1acf4:	d10d      	bne.n	1ad12 <atcab_read_config_zone+0x4a>
        {
            status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, 0x00, config_data, ATCA_SHA_CONFIG_SIZE);
   1acf6:	230f      	movs	r3, #15
   1acf8:	18fc      	adds	r4, r7, r3
   1acfa:	687a      	ldr	r2, [r7, #4]
   1acfc:	2358      	movs	r3, #88	; 0x58
   1acfe:	9300      	str	r3, [sp, #0]
   1ad00:	0013      	movs	r3, r2
   1ad02:	2200      	movs	r2, #0
   1ad04:	2100      	movs	r1, #0
   1ad06:	2000      	movs	r0, #0
   1ad08:	f000 f81a 	bl	1ad40 <atcab_read_bytes_zone>
   1ad0c:	0003      	movs	r3, r0
   1ad0e:	7023      	strb	r3, [r4, #0]
   1ad10:	e00c      	b.n	1ad2c <atcab_read_config_zone+0x64>
        }
        else
        {
            status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, 0x00, config_data, ATCA_ECC_CONFIG_SIZE);
   1ad12:	230f      	movs	r3, #15
   1ad14:	18fc      	adds	r4, r7, r3
   1ad16:	687a      	ldr	r2, [r7, #4]
   1ad18:	2380      	movs	r3, #128	; 0x80
   1ad1a:	9300      	str	r3, [sp, #0]
   1ad1c:	0013      	movs	r3, r2
   1ad1e:	2200      	movs	r2, #0
   1ad20:	2100      	movs	r1, #0
   1ad22:	2000      	movs	r0, #0
   1ad24:	f000 f80c 	bl	1ad40 <atcab_read_bytes_zone>
   1ad28:	0003      	movs	r3, r0
   1ad2a:	7023      	strb	r3, [r4, #0]
        }

    }
    while (0);

    return status;
   1ad2c:	230f      	movs	r3, #15
   1ad2e:	18fb      	adds	r3, r7, r3
   1ad30:	781b      	ldrb	r3, [r3, #0]
}
   1ad32:	0018      	movs	r0, r3
   1ad34:	46bd      	mov	sp, r7
   1ad36:	b005      	add	sp, #20
   1ad38:	bd90      	pop	{r4, r7, pc}
   1ad3a:	46c0      	nop			; (mov r8, r8)
   1ad3c:	200003b0 	.word	0x200003b0

0001ad40 <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
   1ad40:	b5b0      	push	{r4, r5, r7, lr}
   1ad42:	b098      	sub	sp, #96	; 0x60
   1ad44:	af02      	add	r7, sp, #8
   1ad46:	60ba      	str	r2, [r7, #8]
   1ad48:	607b      	str	r3, [r7, #4]
   1ad4a:	230f      	movs	r3, #15
   1ad4c:	18fb      	adds	r3, r7, r3
   1ad4e:	1c02      	adds	r2, r0, #0
   1ad50:	701a      	strb	r2, [r3, #0]
   1ad52:	230c      	movs	r3, #12
   1ad54:	18fb      	adds	r3, r7, r3
   1ad56:	1c0a      	adds	r2, r1, #0
   1ad58:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1ad5a:	2357      	movs	r3, #87	; 0x57
   1ad5c:	18fb      	adds	r3, r7, r3
   1ad5e:	22e1      	movs	r2, #225	; 0xe1
   1ad60:	701a      	strb	r2, [r3, #0]
    size_t zone_size = 0;
   1ad62:	2300      	movs	r3, #0
   1ad64:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t read_buf[32];
    size_t data_idx = 0;
   1ad66:	2300      	movs	r3, #0
   1ad68:	653b      	str	r3, [r7, #80]	; 0x50
    size_t cur_block = 0;
   1ad6a:	2300      	movs	r3, #0
   1ad6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t cur_offset = 0;
   1ad6e:	2300      	movs	r3, #0
   1ad70:	64bb      	str	r3, [r7, #72]	; 0x48
    uint8_t read_size = ATCA_BLOCK_SIZE;
   1ad72:	2347      	movs	r3, #71	; 0x47
   1ad74:	18fb      	adds	r3, r7, r3
   1ad76:	2220      	movs	r2, #32
   1ad78:	701a      	strb	r2, [r3, #0]
    size_t read_buf_idx = 0;
   1ad7a:	2300      	movs	r3, #0
   1ad7c:	643b      	str	r3, [r7, #64]	; 0x40
    size_t copy_length = 0;
   1ad7e:	2300      	movs	r3, #0
   1ad80:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t read_offset = 0;
   1ad82:	2300      	movs	r3, #0
   1ad84:	63bb      	str	r3, [r7, #56]	; 0x38

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
   1ad86:	230f      	movs	r3, #15
   1ad88:	18fb      	adds	r3, r7, r3
   1ad8a:	781b      	ldrb	r3, [r3, #0]
   1ad8c:	2b00      	cmp	r3, #0
   1ad8e:	d00b      	beq.n	1ada8 <atcab_read_bytes_zone+0x68>
   1ad90:	230f      	movs	r3, #15
   1ad92:	18fb      	adds	r3, r7, r3
   1ad94:	781b      	ldrb	r3, [r3, #0]
   1ad96:	2b01      	cmp	r3, #1
   1ad98:	d006      	beq.n	1ada8 <atcab_read_bytes_zone+0x68>
   1ad9a:	230f      	movs	r3, #15
   1ad9c:	18fb      	adds	r3, r7, r3
   1ad9e:	781b      	ldrb	r3, [r3, #0]
   1ada0:	2b02      	cmp	r3, #2
   1ada2:	d001      	beq.n	1ada8 <atcab_read_bytes_zone+0x68>
    {
        return ATCA_BAD_PARAM;
   1ada4:	23e2      	movs	r3, #226	; 0xe2
   1ada6:	e0b5      	b.n	1af14 <atcab_read_bytes_zone+0x1d4>
    }
    if (zone == ATCA_ZONE_DATA && slot > 15)
   1ada8:	230f      	movs	r3, #15
   1adaa:	18fb      	adds	r3, r7, r3
   1adac:	781b      	ldrb	r3, [r3, #0]
   1adae:	2b02      	cmp	r3, #2
   1adb0:	d106      	bne.n	1adc0 <atcab_read_bytes_zone+0x80>
   1adb2:	230c      	movs	r3, #12
   1adb4:	18fb      	adds	r3, r7, r3
   1adb6:	881b      	ldrh	r3, [r3, #0]
   1adb8:	2b0f      	cmp	r3, #15
   1adba:	d901      	bls.n	1adc0 <atcab_read_bytes_zone+0x80>
    {
        return ATCA_BAD_PARAM;
   1adbc:	23e2      	movs	r3, #226	; 0xe2
   1adbe:	e0a9      	b.n	1af14 <atcab_read_bytes_zone+0x1d4>
    }
    if (length == 0)
   1adc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1adc2:	2b00      	cmp	r3, #0
   1adc4:	d101      	bne.n	1adca <atcab_read_bytes_zone+0x8a>
    {
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
   1adc6:	2300      	movs	r3, #0
   1adc8:	e0a4      	b.n	1af14 <atcab_read_bytes_zone+0x1d4>
    }
    if (data == NULL)
   1adca:	687b      	ldr	r3, [r7, #4]
   1adcc:	2b00      	cmp	r3, #0
   1adce:	d101      	bne.n	1add4 <atcab_read_bytes_zone+0x94>
    {
        return ATCA_BAD_PARAM;
   1add0:	23e2      	movs	r3, #226	; 0xe2
   1add2:	e09f      	b.n	1af14 <atcab_read_bytes_zone+0x1d4>
    }

    do
    {
        status = atcab_get_zone_size(zone, slot, &zone_size);
   1add4:	2357      	movs	r3, #87	; 0x57
   1add6:	18fc      	adds	r4, r7, r3
   1add8:	2334      	movs	r3, #52	; 0x34
   1adda:	18fa      	adds	r2, r7, r3
   1addc:	230c      	movs	r3, #12
   1adde:	18fb      	adds	r3, r7, r3
   1ade0:	8819      	ldrh	r1, [r3, #0]
   1ade2:	230f      	movs	r3, #15
   1ade4:	18fb      	adds	r3, r7, r3
   1ade6:	781b      	ldrb	r3, [r3, #0]
   1ade8:	0018      	movs	r0, r3
   1adea:	f7fe fded 	bl	199c8 <atcab_get_zone_size>
   1adee:	0003      	movs	r3, r0
   1adf0:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
   1adf2:	2357      	movs	r3, #87	; 0x57
   1adf4:	18fb      	adds	r3, r7, r3
   1adf6:	781b      	ldrb	r3, [r3, #0]
   1adf8:	2b00      	cmp	r3, #0
   1adfa:	d000      	beq.n	1adfe <atcab_read_bytes_zone+0xbe>
   1adfc:	e084      	b.n	1af08 <atcab_read_bytes_zone+0x1c8>
        {
            break;
        }
        if (offset + length > zone_size)
   1adfe:	68ba      	ldr	r2, [r7, #8]
   1ae00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1ae02:	18d2      	adds	r2, r2, r3
   1ae04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ae06:	429a      	cmp	r2, r3
   1ae08:	d901      	bls.n	1ae0e <atcab_read_bytes_zone+0xce>
        {
            return ATCA_BAD_PARAM; // Can't read past the end of a zone
   1ae0a:	23e2      	movs	r3, #226	; 0xe2
   1ae0c:	e082      	b.n	1af14 <atcab_read_bytes_zone+0x1d4>

        }
        cur_block = offset / ATCA_BLOCK_SIZE;
   1ae0e:	68bb      	ldr	r3, [r7, #8]
   1ae10:	095b      	lsrs	r3, r3, #5
   1ae12:	64fb      	str	r3, [r7, #76]	; 0x4c

        while (data_idx < length)
   1ae14:	e073      	b.n	1aefe <atcab_read_bytes_zone+0x1be>
        {
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
   1ae16:	2347      	movs	r3, #71	; 0x47
   1ae18:	18fb      	adds	r3, r7, r3
   1ae1a:	781b      	ldrb	r3, [r3, #0]
   1ae1c:	2b20      	cmp	r3, #32
   1ae1e:	d110      	bne.n	1ae42 <atcab_read_bytes_zone+0x102>
   1ae20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1ae22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ae24:	015b      	lsls	r3, r3, #5
   1ae26:	1ad3      	subs	r3, r2, r3
   1ae28:	2b1f      	cmp	r3, #31
   1ae2a:	d80a      	bhi.n	1ae42 <atcab_read_bytes_zone+0x102>
            {
                // We have less than a block to read and can't read past the end of the zone, switch to word reads
                read_size = ATCA_WORD_SIZE;
   1ae2c:	2347      	movs	r3, #71	; 0x47
   1ae2e:	18fb      	adds	r3, r7, r3
   1ae30:	2204      	movs	r2, #4
   1ae32:	701a      	strb	r2, [r3, #0]
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
   1ae34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1ae36:	68bb      	ldr	r3, [r7, #8]
   1ae38:	18d3      	adds	r3, r2, r3
   1ae3a:	089b      	lsrs	r3, r3, #2
   1ae3c:	2207      	movs	r2, #7
   1ae3e:	4013      	ands	r3, r2
   1ae40:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            // Read next chunk of data
            status = atcab_read_zone(
   1ae42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ae44:	b2da      	uxtb	r2, r3
   1ae46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ae48:	b2dd      	uxtb	r5, r3
   1ae4a:	2357      	movs	r3, #87	; 0x57
   1ae4c:	18fc      	adds	r4, r7, r3
   1ae4e:	230c      	movs	r3, #12
   1ae50:	18fb      	adds	r3, r7, r3
   1ae52:	8819      	ldrh	r1, [r3, #0]
   1ae54:	230f      	movs	r3, #15
   1ae56:	18fb      	adds	r3, r7, r3
   1ae58:	7818      	ldrb	r0, [r3, #0]
   1ae5a:	2347      	movs	r3, #71	; 0x47
   1ae5c:	18fb      	adds	r3, r7, r3
   1ae5e:	781b      	ldrb	r3, [r3, #0]
   1ae60:	9301      	str	r3, [sp, #4]
   1ae62:	2314      	movs	r3, #20
   1ae64:	18fb      	adds	r3, r7, r3
   1ae66:	9300      	str	r3, [sp, #0]
   1ae68:	002b      	movs	r3, r5
   1ae6a:	f7ff fcc5 	bl	1a7f8 <atcab_read_zone>
   1ae6e:	0003      	movs	r3, r0
   1ae70:	7023      	strb	r3, [r4, #0]
                slot,
                (uint8_t)cur_block,
                (uint8_t)cur_offset,
                read_buf,
                read_size);
            if (status != ATCA_SUCCESS)
   1ae72:	2357      	movs	r3, #87	; 0x57
   1ae74:	18fb      	adds	r3, r7, r3
   1ae76:	781b      	ldrb	r3, [r3, #0]
   1ae78:	2b00      	cmp	r3, #0
   1ae7a:	d147      	bne.n	1af0c <atcab_read_bytes_zone+0x1cc>
            {
                break;
            }

            // Calculate where in the read buffer we need data from
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
   1ae7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ae7e:	00da      	lsls	r2, r3, #3
   1ae80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ae82:	18d3      	adds	r3, r2, r3
   1ae84:	009b      	lsls	r3, r3, #2
   1ae86:	63bb      	str	r3, [r7, #56]	; 0x38
            if (read_offset < offset)
   1ae88:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ae8a:	68bb      	ldr	r3, [r7, #8]
   1ae8c:	429a      	cmp	r2, r3
   1ae8e:	d204      	bcs.n	1ae9a <atcab_read_bytes_zone+0x15a>
            {
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
   1ae90:	68ba      	ldr	r2, [r7, #8]
   1ae92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ae94:	1ad3      	subs	r3, r2, r3
   1ae96:	643b      	str	r3, [r7, #64]	; 0x40
   1ae98:	e001      	b.n	1ae9e <atcab_read_bytes_zone+0x15e>
            }
            else
            {
                read_buf_idx = 0;                     // Read data is within the requested chunk
   1ae9a:	2300      	movs	r3, #0
   1ae9c:	643b      	str	r3, [r7, #64]	; 0x40

            }
            // Calculate how much data from the read buffer we want to copy
            if (length - data_idx < read_size - read_buf_idx)
   1ae9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1aea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1aea2:	1ad2      	subs	r2, r2, r3
   1aea4:	2347      	movs	r3, #71	; 0x47
   1aea6:	18fb      	adds	r3, r7, r3
   1aea8:	7819      	ldrb	r1, [r3, #0]
   1aeaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1aeac:	1acb      	subs	r3, r1, r3
   1aeae:	429a      	cmp	r2, r3
   1aeb0:	d204      	bcs.n	1aebc <atcab_read_bytes_zone+0x17c>
            {
                copy_length = length - data_idx;
   1aeb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1aeb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1aeb6:	1ad3      	subs	r3, r2, r3
   1aeb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   1aeba:	e005      	b.n	1aec8 <atcab_read_bytes_zone+0x188>
            }
            else
            {
                copy_length = read_size - read_buf_idx;
   1aebc:	2347      	movs	r3, #71	; 0x47
   1aebe:	18fb      	adds	r3, r7, r3
   1aec0:	781a      	ldrb	r2, [r3, #0]
   1aec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1aec4:	1ad3      	subs	r3, r2, r3
   1aec6:	63fb      	str	r3, [r7, #60]	; 0x3c
            }

            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
   1aec8:	687a      	ldr	r2, [r7, #4]
   1aeca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1aecc:	18d0      	adds	r0, r2, r3
   1aece:	2314      	movs	r3, #20
   1aed0:	18fa      	adds	r2, r7, r3
   1aed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1aed4:	18d3      	adds	r3, r2, r3
   1aed6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1aed8:	0019      	movs	r1, r3
   1aeda:	f00a fc08 	bl	256ee <memcpy>
            data_idx += copy_length;
   1aede:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1aee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1aee2:	18d3      	adds	r3, r2, r3
   1aee4:	653b      	str	r3, [r7, #80]	; 0x50
            if (read_size == ATCA_BLOCK_SIZE)
   1aee6:	2347      	movs	r3, #71	; 0x47
   1aee8:	18fb      	adds	r3, r7, r3
   1aeea:	781b      	ldrb	r3, [r3, #0]
   1aeec:	2b20      	cmp	r3, #32
   1aeee:	d103      	bne.n	1aef8 <atcab_read_bytes_zone+0x1b8>
            {
                cur_block += 1;
   1aef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1aef2:	3301      	adds	r3, #1
   1aef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   1aef6:	e002      	b.n	1aefe <atcab_read_bytes_zone+0x1be>
            }
            else
            {
                cur_offset += 1;
   1aef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1aefa:	3301      	adds	r3, #1
   1aefc:	64bb      	str	r3, [r7, #72]	; 0x48
            return ATCA_BAD_PARAM; // Can't read past the end of a zone

        }
        cur_block = offset / ATCA_BLOCK_SIZE;

        while (data_idx < length)
   1aefe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1af00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1af02:	429a      	cmp	r2, r3
   1af04:	d387      	bcc.n	1ae16 <atcab_read_bytes_zone+0xd6>
   1af06:	e002      	b.n	1af0e <atcab_read_bytes_zone+0x1ce>
    do
    {
        status = atcab_get_zone_size(zone, slot, &zone_size);
        if (status != ATCA_SUCCESS)
        {
            break;
   1af08:	46c0      	nop			; (mov r8, r8)
   1af0a:	e000      	b.n	1af0e <atcab_read_bytes_zone+0x1ce>
                (uint8_t)cur_offset,
                read_buf,
                read_size);
            if (status != ATCA_SUCCESS)
            {
                break;
   1af0c:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }
    while (false);

    return status;
   1af0e:	2357      	movs	r3, #87	; 0x57
   1af10:	18fb      	adds	r3, r7, r3
   1af12:	781b      	ldrb	r3, [r3, #0]
}
   1af14:	0018      	movs	r0, r3
   1af16:	46bd      	mov	sp, r7
   1af18:	b016      	add	sp, #88	; 0x58
   1af1a:	bdb0      	pop	{r4, r5, r7, pc}

0001af1c <atcab_sign_base>:
 *                        curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
   1af1c:	b590      	push	{r4, r7, lr}
   1af1e:	b0b7      	sub	sp, #220	; 0xdc
   1af20:	af00      	add	r7, sp, #0
   1af22:	603a      	str	r2, [r7, #0]
   1af24:	1dfb      	adds	r3, r7, #7
   1af26:	1c02      	adds	r2, r0, #0
   1af28:	701a      	strb	r2, [r3, #0]
   1af2a:	1d3b      	adds	r3, r7, #4
   1af2c:	1c0a      	adds	r2, r1, #0
   1af2e:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1af30:	4b2b      	ldr	r3, [pc, #172]	; (1afe0 <atcab_sign_base+0xc4>)
   1af32:	681b      	ldr	r3, [r3, #0]
   1af34:	681b      	ldr	r3, [r3, #0]
   1af36:	22d0      	movs	r2, #208	; 0xd0
   1af38:	18ba      	adds	r2, r7, r2
   1af3a:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1af3c:	23d7      	movs	r3, #215	; 0xd7
   1af3e:	18fb      	adds	r3, r7, r3
   1af40:	22e1      	movs	r2, #225	; 0xe1
   1af42:	701a      	strb	r2, [r3, #0]

    if (signature == NULL)
   1af44:	683b      	ldr	r3, [r7, #0]
   1af46:	2b00      	cmp	r3, #0
   1af48:	d101      	bne.n	1af4e <atcab_sign_base+0x32>
    {
        return ATCA_BAD_PARAM;
   1af4a:	23e2      	movs	r3, #226	; 0xe2
   1af4c:	e044      	b.n	1afd8 <atcab_sign_base+0xbc>
    }

    do
    {
        // Build sign command
        packet.param1 = mode;
   1af4e:	2308      	movs	r3, #8
   1af50:	18fb      	adds	r3, r7, r3
   1af52:	1dfa      	adds	r2, r7, #7
   1af54:	7812      	ldrb	r2, [r2, #0]
   1af56:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
   1af58:	2308      	movs	r3, #8
   1af5a:	18fb      	adds	r3, r7, r3
   1af5c:	1d3a      	adds	r2, r7, #4
   1af5e:	8812      	ldrh	r2, [r2, #0]
   1af60:	809a      	strh	r2, [r3, #4]
        if ((status = atSign(ca_cmd, &packet)) != ATCA_SUCCESS)
   1af62:	23d7      	movs	r3, #215	; 0xd7
   1af64:	18fc      	adds	r4, r7, r3
   1af66:	2308      	movs	r3, #8
   1af68:	18fa      	adds	r2, r7, r3
   1af6a:	23d0      	movs	r3, #208	; 0xd0
   1af6c:	18fb      	adds	r3, r7, r3
   1af6e:	681b      	ldr	r3, [r3, #0]
   1af70:	0011      	movs	r1, r2
   1af72:	0018      	movs	r0, r3
   1af74:	f000 fda2 	bl	1babc <atSign>
   1af78:	0003      	movs	r3, r0
   1af7a:	7023      	strb	r3, [r4, #0]
   1af7c:	23d7      	movs	r3, #215	; 0xd7
   1af7e:	18fb      	adds	r3, r7, r3
   1af80:	781b      	ldrb	r3, [r3, #0]
   1af82:	2b00      	cmp	r3, #0
   1af84:	d122      	bne.n	1afcc <atcab_sign_base+0xb0>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   1af86:	4b16      	ldr	r3, [pc, #88]	; (1afe0 <atcab_sign_base+0xc4>)
   1af88:	681a      	ldr	r2, [r3, #0]
   1af8a:	23d7      	movs	r3, #215	; 0xd7
   1af8c:	18fc      	adds	r4, r7, r3
   1af8e:	2308      	movs	r3, #8
   1af90:	18fb      	adds	r3, r7, r3
   1af92:	0011      	movs	r1, r2
   1af94:	0018      	movs	r0, r3
   1af96:	f001 f837 	bl	1c008 <atca_execute_command>
   1af9a:	0003      	movs	r3, r0
   1af9c:	7023      	strb	r3, [r4, #0]
   1af9e:	23d7      	movs	r3, #215	; 0xd7
   1afa0:	18fb      	adds	r3, r7, r3
   1afa2:	781b      	ldrb	r3, [r3, #0]
   1afa4:	2b00      	cmp	r3, #0
   1afa6:	d113      	bne.n	1afd0 <atcab_sign_base+0xb4>
        {
            break;
        }

        if (packet.data[ATCA_COUNT_IDX] > 4)
   1afa8:	2308      	movs	r3, #8
   1afaa:	18fb      	adds	r3, r7, r3
   1afac:	799b      	ldrb	r3, [r3, #6]
   1afae:	2b04      	cmp	r3, #4
   1afb0:	d90f      	bls.n	1afd2 <atcab_sign_base+0xb6>
        {
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - ATCA_PACKET_OVERHEAD);
   1afb2:	2308      	movs	r3, #8
   1afb4:	18fb      	adds	r3, r7, r3
   1afb6:	799b      	ldrb	r3, [r3, #6]
   1afb8:	3b03      	subs	r3, #3
   1afba:	001a      	movs	r2, r3
   1afbc:	2308      	movs	r3, #8
   1afbe:	18fb      	adds	r3, r7, r3
   1afc0:	1dd9      	adds	r1, r3, #7
   1afc2:	683b      	ldr	r3, [r7, #0]
   1afc4:	0018      	movs	r0, r3
   1afc6:	f00a fb92 	bl	256ee <memcpy>
   1afca:	e002      	b.n	1afd2 <atcab_sign_base+0xb6>
        // Build sign command
        packet.param1 = mode;
        packet.param2 = key_id;
        if ((status = atSign(ca_cmd, &packet)) != ATCA_SUCCESS)
        {
            break;
   1afcc:	46c0      	nop			; (mov r8, r8)
   1afce:	e000      	b.n	1afd2 <atcab_sign_base+0xb6>
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
        {
            break;
   1afd0:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   1afd2:	23d7      	movs	r3, #215	; 0xd7
   1afd4:	18fb      	adds	r3, r7, r3
   1afd6:	781b      	ldrb	r3, [r3, #0]
}
   1afd8:	0018      	movs	r0, r3
   1afda:	46bd      	mov	sp, r7
   1afdc:	b037      	add	sp, #220	; 0xdc
   1afde:	bd90      	pop	{r4, r7, pc}
   1afe0:	200003b0 	.word	0x200003b0

0001afe4 <atcab_sign>:
 *                         curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
   1afe4:	b590      	push	{r4, r7, lr}
   1afe6:	b087      	sub	sp, #28
   1afe8:	af00      	add	r7, sp, #0
   1afea:	60b9      	str	r1, [r7, #8]
   1afec:	607a      	str	r2, [r7, #4]
   1afee:	230e      	movs	r3, #14
   1aff0:	18fb      	adds	r3, r7, r3
   1aff2:	1c02      	adds	r2, r0, #0
   1aff4:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1aff6:	2317      	movs	r3, #23
   1aff8:	18fb      	adds	r3, r7, r3
   1affa:	22e1      	movs	r2, #225	; 0xe1
   1affc:	701a      	strb	r2, [r3, #0]
    uint8_t nonce_target = NONCE_MODE_TARGET_TEMPKEY;
   1affe:	2316      	movs	r3, #22
   1b000:	18fb      	adds	r3, r7, r3
   1b002:	2200      	movs	r2, #0
   1b004:	701a      	strb	r2, [r3, #0]
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;
   1b006:	2315      	movs	r3, #21
   1b008:	18fb      	adds	r3, r7, r3
   1b00a:	2200      	movs	r2, #0
   1b00c:	701a      	strb	r2, [r3, #0]

    do
    {
        // Make sure RNG has updated its seed
        if ((status = atcab_random(NULL)) != ATCA_SUCCESS)
   1b00e:	2317      	movs	r3, #23
   1b010:	18fc      	adds	r4, r7, r3
   1b012:	2000      	movs	r0, #0
   1b014:	f7ff fb94 	bl	1a740 <atcab_random>
   1b018:	0003      	movs	r3, r0
   1b01a:	7023      	strb	r3, [r4, #0]
   1b01c:	2317      	movs	r3, #23
   1b01e:	18fb      	adds	r3, r7, r3
   1b020:	781b      	ldrb	r3, [r3, #0]
   1b022:	2b00      	cmp	r3, #0
   1b024:	d131      	bne.n	1b08a <atcab_sign+0xa6>
        {
            break;
        }

        // Load message into device
        if (_gDevice->mCommands->dt == ATECC608A)
   1b026:	4b1e      	ldr	r3, [pc, #120]	; (1b0a0 <atcab_sign+0xbc>)
   1b028:	681b      	ldr	r3, [r3, #0]
   1b02a:	681b      	ldr	r3, [r3, #0]
   1b02c:	781b      	ldrb	r3, [r3, #0]
   1b02e:	2b03      	cmp	r3, #3
   1b030:	d107      	bne.n	1b042 <atcab_sign+0x5e>
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
   1b032:	2316      	movs	r3, #22
   1b034:	18fb      	adds	r3, r7, r3
   1b036:	2240      	movs	r2, #64	; 0x40
   1b038:	701a      	strb	r2, [r3, #0]
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
   1b03a:	2315      	movs	r3, #21
   1b03c:	18fb      	adds	r3, r7, r3
   1b03e:	2220      	movs	r2, #32
   1b040:	701a      	strb	r2, [r3, #0]
        }
        if ((status = atcab_nonce_load(nonce_target, msg, 32)) != ATCA_SUCCESS)
   1b042:	2317      	movs	r3, #23
   1b044:	18fc      	adds	r4, r7, r3
   1b046:	68b9      	ldr	r1, [r7, #8]
   1b048:	2316      	movs	r3, #22
   1b04a:	18fb      	adds	r3, r7, r3
   1b04c:	781b      	ldrb	r3, [r3, #0]
   1b04e:	2220      	movs	r2, #32
   1b050:	0018      	movs	r0, r3
   1b052:	f7ff f8c1 	bl	1a1d8 <atcab_nonce_load>
   1b056:	0003      	movs	r3, r0
   1b058:	7023      	strb	r3, [r4, #0]
   1b05a:	2317      	movs	r3, #23
   1b05c:	18fb      	adds	r3, r7, r3
   1b05e:	781b      	ldrb	r3, [r3, #0]
   1b060:	2b00      	cmp	r3, #0
   1b062:	d114      	bne.n	1b08e <atcab_sign+0xaa>
        {
            break;
        }

        // Sign the message
        if ((status = atcab_sign_base(SIGN_MODE_EXTERNAL | sign_source, key_id, signature)) != ATCA_SUCCESS)
   1b064:	2315      	movs	r3, #21
   1b066:	18fb      	adds	r3, r7, r3
   1b068:	781b      	ldrb	r3, [r3, #0]
   1b06a:	2280      	movs	r2, #128	; 0x80
   1b06c:	4252      	negs	r2, r2
   1b06e:	4313      	orrs	r3, r2
   1b070:	b2d8      	uxtb	r0, r3
   1b072:	2317      	movs	r3, #23
   1b074:	18fc      	adds	r4, r7, r3
   1b076:	687a      	ldr	r2, [r7, #4]
   1b078:	230e      	movs	r3, #14
   1b07a:	18fb      	adds	r3, r7, r3
   1b07c:	881b      	ldrh	r3, [r3, #0]
   1b07e:	0019      	movs	r1, r3
   1b080:	f7ff ff4c 	bl	1af1c <atcab_sign_base>
   1b084:	0003      	movs	r3, r0
   1b086:	7023      	strb	r3, [r4, #0]
   1b088:	e002      	b.n	1b090 <atcab_sign+0xac>
    do
    {
        // Make sure RNG has updated its seed
        if ((status = atcab_random(NULL)) != ATCA_SUCCESS)
        {
            break;
   1b08a:	46c0      	nop			; (mov r8, r8)
   1b08c:	e000      	b.n	1b090 <atcab_sign+0xac>
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
        }
        if ((status = atcab_nonce_load(nonce_target, msg, 32)) != ATCA_SUCCESS)
        {
            break;
   1b08e:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }
    while (0);

    return status;
   1b090:	2317      	movs	r3, #23
   1b092:	18fb      	adds	r3, r7, r3
   1b094:	781b      	ldrb	r3, [r3, #0]
}
   1b096:	0018      	movs	r0, r3
   1b098:	46bd      	mov	sp, r7
   1b09a:	b007      	add	sp, #28
   1b09c:	bd90      	pop	{r4, r7, pc}
   1b09e:	46c0      	nop			; (mov r8, r8)
   1b0a0:	200003b0 	.word	0x200003b0

0001b0a4 <atcab_updateextra>:
 * \param[in] new_value  Value to be written.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_updateextra(uint8_t mode, uint16_t new_value)
{
   1b0a4:	b590      	push	{r4, r7, lr}
   1b0a6:	b0b7      	sub	sp, #220	; 0xdc
   1b0a8:	af00      	add	r7, sp, #0
   1b0aa:	0002      	movs	r2, r0
   1b0ac:	1dfb      	adds	r3, r7, #7
   1b0ae:	701a      	strb	r2, [r3, #0]
   1b0b0:	1d3b      	adds	r3, r7, #4
   1b0b2:	1c0a      	adds	r2, r1, #0
   1b0b4:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1b0b6:	4b21      	ldr	r3, [pc, #132]	; (1b13c <atcab_updateextra+0x98>)
   1b0b8:	681b      	ldr	r3, [r3, #0]
   1b0ba:	681b      	ldr	r3, [r3, #0]
   1b0bc:	22d0      	movs	r2, #208	; 0xd0
   1b0be:	18ba      	adds	r2, r7, r2
   1b0c0:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1b0c2:	23d7      	movs	r3, #215	; 0xd7
   1b0c4:	18fb      	adds	r3, r7, r3
   1b0c6:	22e1      	movs	r2, #225	; 0xe1
   1b0c8:	701a      	strb	r2, [r3, #0]

    do
    {
        // Build command
        memset(&packet, 0, sizeof(packet));
   1b0ca:	2308      	movs	r3, #8
   1b0cc:	18fb      	adds	r3, r7, r3
   1b0ce:	22c8      	movs	r2, #200	; 0xc8
   1b0d0:	2100      	movs	r1, #0
   1b0d2:	0018      	movs	r0, r3
   1b0d4:	f00a fb29 	bl	2572a <memset>
        packet.param1 = mode;
   1b0d8:	2308      	movs	r3, #8
   1b0da:	18fb      	adds	r3, r7, r3
   1b0dc:	1dfa      	adds	r2, r7, #7
   1b0de:	7812      	ldrb	r2, [r2, #0]
   1b0e0:	70da      	strb	r2, [r3, #3]
        packet.param2 = new_value;
   1b0e2:	2308      	movs	r3, #8
   1b0e4:	18fb      	adds	r3, r7, r3
   1b0e6:	1d3a      	adds	r2, r7, #4
   1b0e8:	8812      	ldrh	r2, [r2, #0]
   1b0ea:	809a      	strh	r2, [r3, #4]

        if ((status = atUpdateExtra(ca_cmd, &packet)) != ATCA_SUCCESS)
   1b0ec:	23d7      	movs	r3, #215	; 0xd7
   1b0ee:	18fc      	adds	r4, r7, r3
   1b0f0:	2308      	movs	r3, #8
   1b0f2:	18fa      	adds	r2, r7, r3
   1b0f4:	23d0      	movs	r3, #208	; 0xd0
   1b0f6:	18fb      	adds	r3, r7, r3
   1b0f8:	681b      	ldr	r3, [r3, #0]
   1b0fa:	0011      	movs	r1, r2
   1b0fc:	0018      	movs	r0, r3
   1b0fe:	f000 fcf1 	bl	1bae4 <atUpdateExtra>
   1b102:	0003      	movs	r3, r0
   1b104:	7023      	strb	r3, [r4, #0]
   1b106:	23d7      	movs	r3, #215	; 0xd7
   1b108:	18fb      	adds	r3, r7, r3
   1b10a:	781b      	ldrb	r3, [r3, #0]
   1b10c:	2b00      	cmp	r3, #0
   1b10e:	d10c      	bne.n	1b12a <atcab_updateextra+0x86>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   1b110:	4b0a      	ldr	r3, [pc, #40]	; (1b13c <atcab_updateextra+0x98>)
   1b112:	681a      	ldr	r2, [r3, #0]
   1b114:	23d7      	movs	r3, #215	; 0xd7
   1b116:	18fc      	adds	r4, r7, r3
   1b118:	2308      	movs	r3, #8
   1b11a:	18fb      	adds	r3, r7, r3
   1b11c:	0011      	movs	r1, r2
   1b11e:	0018      	movs	r0, r3
   1b120:	f000 ff72 	bl	1c008 <atca_execute_command>
   1b124:	0003      	movs	r3, r0
   1b126:	7023      	strb	r3, [r4, #0]
   1b128:	e000      	b.n	1b12c <atcab_updateextra+0x88>
        packet.param1 = mode;
        packet.param2 = new_value;

        if ((status = atUpdateExtra(ca_cmd, &packet)) != ATCA_SUCCESS)
        {
            break;
   1b12a:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   1b12c:	23d7      	movs	r3, #215	; 0xd7
   1b12e:	18fb      	adds	r3, r7, r3
   1b130:	781b      	ldrb	r3, [r3, #0]
}
   1b132:	0018      	movs	r0, r3
   1b134:	46bd      	mov	sp, r7
   1b136:	b037      	add	sp, #220	; 0xdc
   1b138:	bd90      	pop	{r4, r7, pc}
   1b13a:	46c0      	nop			; (mov r8, r8)
   1b13c:	200003b0 	.word	0x200003b0

0001b140 <atcab_verify>:
 *                        will be returned here. Can be NULL otherwise.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_verify(uint8_t mode, uint16_t key_id, const uint8_t* signature, const uint8_t* public_key, const uint8_t* other_data, uint8_t* mac)
{
   1b140:	b590      	push	{r4, r7, lr}
   1b142:	b0bb      	sub	sp, #236	; 0xec
   1b144:	af00      	add	r7, sp, #0
   1b146:	60ba      	str	r2, [r7, #8]
   1b148:	607b      	str	r3, [r7, #4]
   1b14a:	230f      	movs	r3, #15
   1b14c:	18fb      	adds	r3, r7, r3
   1b14e:	1c02      	adds	r2, r0, #0
   1b150:	701a      	strb	r2, [r3, #0]
   1b152:	230c      	movs	r3, #12
   1b154:	18fb      	adds	r3, r7, r3
   1b156:	1c0a      	adds	r2, r1, #0
   1b158:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1b15a:	4b52      	ldr	r3, [pc, #328]	; (1b2a4 <atcab_verify+0x164>)
   1b15c:	681b      	ldr	r3, [r3, #0]
   1b15e:	681b      	ldr	r3, [r3, #0]
   1b160:	22e0      	movs	r2, #224	; 0xe0
   1b162:	18ba      	adds	r2, r7, r2
   1b164:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1b166:	23e7      	movs	r3, #231	; 0xe7
   1b168:	18fb      	adds	r3, r7, r3
   1b16a:	22e1      	movs	r2, #225	; 0xe1
   1b16c:	701a      	strb	r2, [r3, #0]
    uint8_t verify_mode = (mode & VERIFY_MODE_MASK);
   1b16e:	23df      	movs	r3, #223	; 0xdf
   1b170:	18fb      	adds	r3, r7, r3
   1b172:	220f      	movs	r2, #15
   1b174:	18ba      	adds	r2, r7, r2
   1b176:	7812      	ldrb	r2, [r2, #0]
   1b178:	2103      	movs	r1, #3
   1b17a:	400a      	ands	r2, r1
   1b17c:	701a      	strb	r2, [r3, #0]

    do
    {
        if (signature == NULL)
   1b17e:	68bb      	ldr	r3, [r7, #8]
   1b180:	2b00      	cmp	r3, #0
   1b182:	d101      	bne.n	1b188 <atcab_verify+0x48>
        {
            return ATCA_BAD_PARAM;
   1b184:	23e2      	movs	r3, #226	; 0xe2
   1b186:	e089      	b.n	1b29c <atcab_verify+0x15c>
        }
        if (verify_mode == VERIFY_MODE_EXTERNAL && public_key == NULL)
   1b188:	23df      	movs	r3, #223	; 0xdf
   1b18a:	18fb      	adds	r3, r7, r3
   1b18c:	781b      	ldrb	r3, [r3, #0]
   1b18e:	2b02      	cmp	r3, #2
   1b190:	d104      	bne.n	1b19c <atcab_verify+0x5c>
   1b192:	687b      	ldr	r3, [r7, #4]
   1b194:	2b00      	cmp	r3, #0
   1b196:	d101      	bne.n	1b19c <atcab_verify+0x5c>
        {
            return ATCA_BAD_PARAM;
   1b198:	23e2      	movs	r3, #226	; 0xe2
   1b19a:	e07f      	b.n	1b29c <atcab_verify+0x15c>
        }
        if ((verify_mode == VERIFY_MODE_VALIDATE || verify_mode == VERIFY_MODE_INVALIDATE) && other_data == NULL)
   1b19c:	23df      	movs	r3, #223	; 0xdf
   1b19e:	18fb      	adds	r3, r7, r3
   1b1a0:	781b      	ldrb	r3, [r3, #0]
   1b1a2:	2b03      	cmp	r3, #3
   1b1a4:	d004      	beq.n	1b1b0 <atcab_verify+0x70>
   1b1a6:	23df      	movs	r3, #223	; 0xdf
   1b1a8:	18fb      	adds	r3, r7, r3
   1b1aa:	781b      	ldrb	r3, [r3, #0]
   1b1ac:	2b07      	cmp	r3, #7
   1b1ae:	d106      	bne.n	1b1be <atcab_verify+0x7e>
   1b1b0:	23f8      	movs	r3, #248	; 0xf8
   1b1b2:	18fb      	adds	r3, r7, r3
   1b1b4:	681b      	ldr	r3, [r3, #0]
   1b1b6:	2b00      	cmp	r3, #0
   1b1b8:	d101      	bne.n	1b1be <atcab_verify+0x7e>
        {
            return ATCA_BAD_PARAM;
   1b1ba:	23e2      	movs	r3, #226	; 0xe2
   1b1bc:	e06e      	b.n	1b29c <atcab_verify+0x15c>
        }

        // Build the verify command
        packet.param1 = mode;
   1b1be:	2314      	movs	r3, #20
   1b1c0:	18fb      	adds	r3, r7, r3
   1b1c2:	220f      	movs	r2, #15
   1b1c4:	18ba      	adds	r2, r7, r2
   1b1c6:	7812      	ldrb	r2, [r2, #0]
   1b1c8:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
   1b1ca:	2314      	movs	r3, #20
   1b1cc:	18fb      	adds	r3, r7, r3
   1b1ce:	220c      	movs	r2, #12
   1b1d0:	18ba      	adds	r2, r7, r2
   1b1d2:	8812      	ldrh	r2, [r2, #0]
   1b1d4:	809a      	strh	r2, [r3, #4]
        memcpy(&packet.data[0], signature, ATCA_SIG_SIZE);
   1b1d6:	68b9      	ldr	r1, [r7, #8]
   1b1d8:	2314      	movs	r3, #20
   1b1da:	18fb      	adds	r3, r7, r3
   1b1dc:	3306      	adds	r3, #6
   1b1de:	2240      	movs	r2, #64	; 0x40
   1b1e0:	0018      	movs	r0, r3
   1b1e2:	f00a fa84 	bl	256ee <memcpy>
        if (verify_mode == VERIFY_MODE_EXTERNAL)
   1b1e6:	23df      	movs	r3, #223	; 0xdf
   1b1e8:	18fb      	adds	r3, r7, r3
   1b1ea:	781b      	ldrb	r3, [r3, #0]
   1b1ec:	2b02      	cmp	r3, #2
   1b1ee:	d108      	bne.n	1b202 <atcab_verify+0xc2>
        {
            memcpy(&packet.data[ATCA_SIG_SIZE], public_key, ATCA_PUB_KEY_SIZE);
   1b1f0:	6879      	ldr	r1, [r7, #4]
   1b1f2:	2314      	movs	r3, #20
   1b1f4:	18fb      	adds	r3, r7, r3
   1b1f6:	3346      	adds	r3, #70	; 0x46
   1b1f8:	2240      	movs	r2, #64	; 0x40
   1b1fa:	0018      	movs	r0, r3
   1b1fc:	f00a fa77 	bl	256ee <memcpy>
   1b200:	e00e      	b.n	1b220 <atcab_verify+0xe0>
        }
        else if (other_data)
   1b202:	23f8      	movs	r3, #248	; 0xf8
   1b204:	18fb      	adds	r3, r7, r3
   1b206:	681b      	ldr	r3, [r3, #0]
   1b208:	2b00      	cmp	r3, #0
   1b20a:	d009      	beq.n	1b220 <atcab_verify+0xe0>
        {
            memcpy(&packet.data[ATCA_SIG_SIZE], other_data, VERIFY_OTHER_DATA_SIZE);
   1b20c:	23f8      	movs	r3, #248	; 0xf8
   1b20e:	18fb      	adds	r3, r7, r3
   1b210:	6819      	ldr	r1, [r3, #0]
   1b212:	2314      	movs	r3, #20
   1b214:	18fb      	adds	r3, r7, r3
   1b216:	3346      	adds	r3, #70	; 0x46
   1b218:	2213      	movs	r2, #19
   1b21a:	0018      	movs	r0, r3
   1b21c:	f00a fa67 	bl	256ee <memcpy>
        }

        if ((status = atVerify(ca_cmd, &packet)) != ATCA_SUCCESS)
   1b220:	23e7      	movs	r3, #231	; 0xe7
   1b222:	18fc      	adds	r4, r7, r3
   1b224:	2314      	movs	r3, #20
   1b226:	18fa      	adds	r2, r7, r3
   1b228:	23e0      	movs	r3, #224	; 0xe0
   1b22a:	18fb      	adds	r3, r7, r3
   1b22c:	681b      	ldr	r3, [r3, #0]
   1b22e:	0011      	movs	r1, r2
   1b230:	0018      	movs	r0, r3
   1b232:	f000 fc6b 	bl	1bb0c <atVerify>
   1b236:	0003      	movs	r3, r0
   1b238:	7023      	strb	r3, [r4, #0]
   1b23a:	23e7      	movs	r3, #231	; 0xe7
   1b23c:	18fb      	adds	r3, r7, r3
   1b23e:	781b      	ldrb	r3, [r3, #0]
   1b240:	2b00      	cmp	r3, #0
   1b242:	d125      	bne.n	1b290 <atcab_verify+0x150>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   1b244:	4b17      	ldr	r3, [pc, #92]	; (1b2a4 <atcab_verify+0x164>)
   1b246:	681a      	ldr	r2, [r3, #0]
   1b248:	23e7      	movs	r3, #231	; 0xe7
   1b24a:	18fc      	adds	r4, r7, r3
   1b24c:	2314      	movs	r3, #20
   1b24e:	18fb      	adds	r3, r7, r3
   1b250:	0011      	movs	r1, r2
   1b252:	0018      	movs	r0, r3
   1b254:	f000 fed8 	bl	1c008 <atca_execute_command>
   1b258:	0003      	movs	r3, r0
   1b25a:	7023      	strb	r3, [r4, #0]
   1b25c:	23e7      	movs	r3, #231	; 0xe7
   1b25e:	18fb      	adds	r3, r7, r3
   1b260:	781b      	ldrb	r3, [r3, #0]
   1b262:	2b00      	cmp	r3, #0
   1b264:	d116      	bne.n	1b294 <atcab_verify+0x154>
        {
            break;
        }

        // The Verify command may return MAC if requested
        if ((mac != NULL) && (packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + MAC_SIZE)))
   1b266:	23fc      	movs	r3, #252	; 0xfc
   1b268:	18fb      	adds	r3, r7, r3
   1b26a:	681b      	ldr	r3, [r3, #0]
   1b26c:	2b00      	cmp	r3, #0
   1b26e:	d012      	beq.n	1b296 <atcab_verify+0x156>
   1b270:	2314      	movs	r3, #20
   1b272:	18fb      	adds	r3, r7, r3
   1b274:	799b      	ldrb	r3, [r3, #6]
   1b276:	2b22      	cmp	r3, #34	; 0x22
   1b278:	d90d      	bls.n	1b296 <atcab_verify+0x156>
        {
            memcpy(mac, &packet.data[ATCA_RSP_DATA_IDX], MAC_SIZE);
   1b27a:	2314      	movs	r3, #20
   1b27c:	18fb      	adds	r3, r7, r3
   1b27e:	1dd9      	adds	r1, r3, #7
   1b280:	23fc      	movs	r3, #252	; 0xfc
   1b282:	18fb      	adds	r3, r7, r3
   1b284:	681b      	ldr	r3, [r3, #0]
   1b286:	2220      	movs	r2, #32
   1b288:	0018      	movs	r0, r3
   1b28a:	f00a fa30 	bl	256ee <memcpy>
   1b28e:	e002      	b.n	1b296 <atcab_verify+0x156>
            memcpy(&packet.data[ATCA_SIG_SIZE], other_data, VERIFY_OTHER_DATA_SIZE);
        }

        if ((status = atVerify(ca_cmd, &packet)) != ATCA_SUCCESS)
        {
            break;
   1b290:	46c0      	nop			; (mov r8, r8)
   1b292:	e000      	b.n	1b296 <atcab_verify+0x156>
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
        {
            break;
   1b294:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (false);

    return status;
   1b296:	23e7      	movs	r3, #231	; 0xe7
   1b298:	18fb      	adds	r3, r7, r3
   1b29a:	781b      	ldrb	r3, [r3, #0]
}
   1b29c:	0018      	movs	r0, r3
   1b29e:	46bd      	mov	sp, r7
   1b2a0:	b03b      	add	sp, #236	; 0xec
   1b2a2:	bd90      	pop	{r4, r7, pc}
   1b2a4:	200003b0 	.word	0x200003b0

0001b2a8 <atcab_verify_extern>:
 *
 * \return ATCA_SUCCESS on verification success or failure, because the
 *         command still completed successfully.
 */
ATCA_STATUS atcab_verify_extern(const uint8_t *message, const uint8_t *signature, const uint8_t *public_key, bool *is_verified)
{
   1b2a8:	b590      	push	{r4, r7, lr}
   1b2aa:	b089      	sub	sp, #36	; 0x24
   1b2ac:	af02      	add	r7, sp, #8
   1b2ae:	60f8      	str	r0, [r7, #12]
   1b2b0:	60b9      	str	r1, [r7, #8]
   1b2b2:	607a      	str	r2, [r7, #4]
   1b2b4:	603b      	str	r3, [r7, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1b2b6:	2317      	movs	r3, #23
   1b2b8:	18fb      	adds	r3, r7, r3
   1b2ba:	22e1      	movs	r2, #225	; 0xe1
   1b2bc:	701a      	strb	r2, [r3, #0]
    uint8_t nonce_target = NONCE_MODE_TARGET_TEMPKEY;
   1b2be:	2316      	movs	r3, #22
   1b2c0:	18fb      	adds	r3, r7, r3
   1b2c2:	2200      	movs	r2, #0
   1b2c4:	701a      	strb	r2, [r3, #0]
    uint8_t verify_source = VERIFY_MODE_SOURCE_TEMPKEY;
   1b2c6:	2315      	movs	r3, #21
   1b2c8:	18fb      	adds	r3, r7, r3
   1b2ca:	2200      	movs	r2, #0
   1b2cc:	701a      	strb	r2, [r3, #0]

    if (is_verified == NULL)
   1b2ce:	683b      	ldr	r3, [r7, #0]
   1b2d0:	2b00      	cmp	r3, #0
   1b2d2:	d101      	bne.n	1b2d8 <atcab_verify_extern+0x30>
    {
        return ATCA_BAD_PARAM;
   1b2d4:	23e2      	movs	r3, #226	; 0xe2
   1b2d6:	e056      	b.n	1b386 <atcab_verify_extern+0xde>
    }

    *is_verified = false;
   1b2d8:	683b      	ldr	r3, [r7, #0]
   1b2da:	2200      	movs	r2, #0
   1b2dc:	701a      	strb	r2, [r3, #0]

    if (signature == NULL || message == NULL || public_key == NULL)
   1b2de:	68bb      	ldr	r3, [r7, #8]
   1b2e0:	2b00      	cmp	r3, #0
   1b2e2:	d005      	beq.n	1b2f0 <atcab_verify_extern+0x48>
   1b2e4:	68fb      	ldr	r3, [r7, #12]
   1b2e6:	2b00      	cmp	r3, #0
   1b2e8:	d002      	beq.n	1b2f0 <atcab_verify_extern+0x48>
   1b2ea:	687b      	ldr	r3, [r7, #4]
   1b2ec:	2b00      	cmp	r3, #0
   1b2ee:	d101      	bne.n	1b2f4 <atcab_verify_extern+0x4c>
    {
        return ATCA_BAD_PARAM;
   1b2f0:	23e2      	movs	r3, #226	; 0xe2
   1b2f2:	e048      	b.n	1b386 <atcab_verify_extern+0xde>
    }

    do
    {
        // Load message into device
        if (_gDevice->mCommands->dt == ATECC608A)
   1b2f4:	4b26      	ldr	r3, [pc, #152]	; (1b390 <atcab_verify_extern+0xe8>)
   1b2f6:	681b      	ldr	r3, [r3, #0]
   1b2f8:	681b      	ldr	r3, [r3, #0]
   1b2fa:	781b      	ldrb	r3, [r3, #0]
   1b2fc:	2b03      	cmp	r3, #3
   1b2fe:	d107      	bne.n	1b310 <atcab_verify_extern+0x68>
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
   1b300:	2316      	movs	r3, #22
   1b302:	18fb      	adds	r3, r7, r3
   1b304:	2240      	movs	r2, #64	; 0x40
   1b306:	701a      	strb	r2, [r3, #0]
            verify_source = VERIFY_MODE_SOURCE_MSGDIGBUF;
   1b308:	2315      	movs	r3, #21
   1b30a:	18fb      	adds	r3, r7, r3
   1b30c:	2220      	movs	r2, #32
   1b30e:	701a      	strb	r2, [r3, #0]
        }
        if ((status = atcab_nonce_load(nonce_target, message, 32)) != ATCA_SUCCESS)
   1b310:	2317      	movs	r3, #23
   1b312:	18fc      	adds	r4, r7, r3
   1b314:	68f9      	ldr	r1, [r7, #12]
   1b316:	2316      	movs	r3, #22
   1b318:	18fb      	adds	r3, r7, r3
   1b31a:	781b      	ldrb	r3, [r3, #0]
   1b31c:	2220      	movs	r2, #32
   1b31e:	0018      	movs	r0, r3
   1b320:	f7fe ff5a 	bl	1a1d8 <atcab_nonce_load>
   1b324:	0003      	movs	r3, r0
   1b326:	7023      	strb	r3, [r4, #0]
   1b328:	2317      	movs	r3, #23
   1b32a:	18fb      	adds	r3, r7, r3
   1b32c:	781b      	ldrb	r3, [r3, #0]
   1b32e:	2b00      	cmp	r3, #0
   1b330:	d125      	bne.n	1b37e <atcab_verify_extern+0xd6>
        {
            break;
        }

        status = atcab_verify(VERIFY_MODE_EXTERNAL | verify_source, VERIFY_KEY_P256, signature, public_key, NULL, NULL);
   1b332:	2315      	movs	r3, #21
   1b334:	18fb      	adds	r3, r7, r3
   1b336:	781b      	ldrb	r3, [r3, #0]
   1b338:	2202      	movs	r2, #2
   1b33a:	4313      	orrs	r3, r2
   1b33c:	b2d8      	uxtb	r0, r3
   1b33e:	2317      	movs	r3, #23
   1b340:	18fc      	adds	r4, r7, r3
   1b342:	6879      	ldr	r1, [r7, #4]
   1b344:	68ba      	ldr	r2, [r7, #8]
   1b346:	2300      	movs	r3, #0
   1b348:	9301      	str	r3, [sp, #4]
   1b34a:	2300      	movs	r3, #0
   1b34c:	9300      	str	r3, [sp, #0]
   1b34e:	000b      	movs	r3, r1
   1b350:	2104      	movs	r1, #4
   1b352:	f7ff fef5 	bl	1b140 <atcab_verify>
   1b356:	0003      	movs	r3, r0
   1b358:	7023      	strb	r3, [r4, #0]
        *is_verified = (status == ATCA_SUCCESS);
   1b35a:	2317      	movs	r3, #23
   1b35c:	18fb      	adds	r3, r7, r3
   1b35e:	781b      	ldrb	r3, [r3, #0]
   1b360:	425a      	negs	r2, r3
   1b362:	4153      	adcs	r3, r2
   1b364:	b2da      	uxtb	r2, r3
   1b366:	683b      	ldr	r3, [r7, #0]
   1b368:	701a      	strb	r2, [r3, #0]

        if (status == ATCA_CHECKMAC_VERIFY_FAILED)
   1b36a:	2317      	movs	r3, #23
   1b36c:	18fb      	adds	r3, r7, r3
   1b36e:	781b      	ldrb	r3, [r3, #0]
   1b370:	2bd1      	cmp	r3, #209	; 0xd1
   1b372:	d105      	bne.n	1b380 <atcab_verify_extern+0xd8>
        {
            status = ATCA_SUCCESS;  // Verify failed, but command succeeded
   1b374:	2317      	movs	r3, #23
   1b376:	18fb      	adds	r3, r7, r3
   1b378:	2200      	movs	r2, #0
   1b37a:	701a      	strb	r2, [r3, #0]
   1b37c:	e000      	b.n	1b380 <atcab_verify_extern+0xd8>
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
            verify_source = VERIFY_MODE_SOURCE_MSGDIGBUF;
        }
        if ((status = atcab_nonce_load(nonce_target, message, 32)) != ATCA_SUCCESS)
        {
            break;
   1b37e:	46c0      	nop			; (mov r8, r8)

        }
    }
    while (0);

    return status;
   1b380:	2317      	movs	r3, #23
   1b382:	18fb      	adds	r3, r7, r3
   1b384:	781b      	ldrb	r3, [r3, #0]
}
   1b386:	0018      	movs	r0, r3
   1b388:	46bd      	mov	sp, r7
   1b38a:	b007      	add	sp, #28
   1b38c:	bd90      	pop	{r4, r7, pc}
   1b38e:	46c0      	nop			; (mov r8, r8)
   1b390:	200003b0 	.word	0x200003b0

0001b394 <atcab_write>:
 *                     if not required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write(uint8_t zone, uint16_t address, const uint8_t *value, const uint8_t *mac)
{
   1b394:	b590      	push	{r4, r7, lr}
   1b396:	b0b9      	sub	sp, #228	; 0xe4
   1b398:	af00      	add	r7, sp, #0
   1b39a:	60ba      	str	r2, [r7, #8]
   1b39c:	607b      	str	r3, [r7, #4]
   1b39e:	230f      	movs	r3, #15
   1b3a0:	18fb      	adds	r3, r7, r3
   1b3a2:	1c02      	adds	r2, r0, #0
   1b3a4:	701a      	strb	r2, [r3, #0]
   1b3a6:	230c      	movs	r3, #12
   1b3a8:	18fb      	adds	r3, r7, r3
   1b3aa:	1c0a      	adds	r2, r1, #0
   1b3ac:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1b3ae:	4b39      	ldr	r3, [pc, #228]	; (1b494 <atcab_write+0x100>)
   1b3b0:	681b      	ldr	r3, [r3, #0]
   1b3b2:	681b      	ldr	r3, [r3, #0]
   1b3b4:	22d8      	movs	r2, #216	; 0xd8
   1b3b6:	18ba      	adds	r2, r7, r2
   1b3b8:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1b3ba:	23df      	movs	r3, #223	; 0xdf
   1b3bc:	18fb      	adds	r3, r7, r3
   1b3be:	22e1      	movs	r2, #225	; 0xe1
   1b3c0:	701a      	strb	r2, [r3, #0]

    if (value == NULL)
   1b3c2:	68bb      	ldr	r3, [r7, #8]
   1b3c4:	2b00      	cmp	r3, #0
   1b3c6:	d101      	bne.n	1b3cc <atcab_write+0x38>
    {
        return ATCA_BAD_PARAM;
   1b3c8:	23e2      	movs	r3, #226	; 0xe2
   1b3ca:	e05f      	b.n	1b48c <atcab_write+0xf8>
    }

    do
    {
        // Build the write command
        packet.param1 = zone;
   1b3cc:	2310      	movs	r3, #16
   1b3ce:	18fb      	adds	r3, r7, r3
   1b3d0:	220f      	movs	r2, #15
   1b3d2:	18ba      	adds	r2, r7, r2
   1b3d4:	7812      	ldrb	r2, [r2, #0]
   1b3d6:	70da      	strb	r2, [r3, #3]
        packet.param2 = address;
   1b3d8:	2310      	movs	r3, #16
   1b3da:	18fb      	adds	r3, r7, r3
   1b3dc:	220c      	movs	r2, #12
   1b3de:	18ba      	adds	r2, r7, r2
   1b3e0:	8812      	ldrh	r2, [r2, #0]
   1b3e2:	809a      	strh	r2, [r3, #4]
        if (zone & ATCA_ZONE_READWRITE_32)
   1b3e4:	230f      	movs	r3, #15
   1b3e6:	18fb      	adds	r3, r7, r3
   1b3e8:	781b      	ldrb	r3, [r3, #0]
   1b3ea:	b25b      	sxtb	r3, r3
   1b3ec:	2b00      	cmp	r3, #0
   1b3ee:	da13      	bge.n	1b418 <atcab_write+0x84>
        {
            // 32-byte write
            memcpy(packet.data, value, 32);
   1b3f0:	68b9      	ldr	r1, [r7, #8]
   1b3f2:	2310      	movs	r3, #16
   1b3f4:	18fb      	adds	r3, r7, r3
   1b3f6:	3306      	adds	r3, #6
   1b3f8:	2220      	movs	r2, #32
   1b3fa:	0018      	movs	r0, r3
   1b3fc:	f00a f977 	bl	256ee <memcpy>
            // Only 32-byte writes can have a MAC
            if (mac)
   1b400:	687b      	ldr	r3, [r7, #4]
   1b402:	2b00      	cmp	r3, #0
   1b404:	d010      	beq.n	1b428 <atcab_write+0x94>
            {
                memcpy(&packet.data[32], mac, 32);
   1b406:	6879      	ldr	r1, [r7, #4]
   1b408:	2310      	movs	r3, #16
   1b40a:	18fb      	adds	r3, r7, r3
   1b40c:	3326      	adds	r3, #38	; 0x26
   1b40e:	2220      	movs	r2, #32
   1b410:	0018      	movs	r0, r3
   1b412:	f00a f96c 	bl	256ee <memcpy>
   1b416:	e007      	b.n	1b428 <atcab_write+0x94>
            }
        }
        else
        {
            // 4-byte write
            memcpy(packet.data, value, 4);
   1b418:	68b9      	ldr	r1, [r7, #8]
   1b41a:	2310      	movs	r3, #16
   1b41c:	18fb      	adds	r3, r7, r3
   1b41e:	3306      	adds	r3, #6
   1b420:	2204      	movs	r2, #4
   1b422:	0018      	movs	r0, r3
   1b424:	f00a f963 	bl	256ee <memcpy>
        }

        if ((status = atWrite(ca_cmd, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
   1b428:	687b      	ldr	r3, [r7, #4]
   1b42a:	2b00      	cmp	r3, #0
   1b42c:	d007      	beq.n	1b43e <atcab_write+0xaa>
   1b42e:	230f      	movs	r3, #15
   1b430:	18fb      	adds	r3, r7, r3
   1b432:	781b      	ldrb	r3, [r3, #0]
   1b434:	b25b      	sxtb	r3, r3
   1b436:	2b00      	cmp	r3, #0
   1b438:	da01      	bge.n	1b43e <atcab_write+0xaa>
   1b43a:	2301      	movs	r3, #1
   1b43c:	e000      	b.n	1b440 <atcab_write+0xac>
   1b43e:	2300      	movs	r3, #0
   1b440:	1c1a      	adds	r2, r3, #0
   1b442:	2301      	movs	r3, #1
   1b444:	4013      	ands	r3, r2
   1b446:	b2da      	uxtb	r2, r3
   1b448:	23df      	movs	r3, #223	; 0xdf
   1b44a:	18fc      	adds	r4, r7, r3
   1b44c:	2310      	movs	r3, #16
   1b44e:	18f9      	adds	r1, r7, r3
   1b450:	23d8      	movs	r3, #216	; 0xd8
   1b452:	18fb      	adds	r3, r7, r3
   1b454:	681b      	ldr	r3, [r3, #0]
   1b456:	0018      	movs	r0, r3
   1b458:	f000 fb8a 	bl	1bb70 <atWrite>
   1b45c:	0003      	movs	r3, r0
   1b45e:	7023      	strb	r3, [r4, #0]
   1b460:	23df      	movs	r3, #223	; 0xdf
   1b462:	18fb      	adds	r3, r7, r3
   1b464:	781b      	ldrb	r3, [r3, #0]
   1b466:	2b00      	cmp	r3, #0
   1b468:	d10c      	bne.n	1b484 <atcab_write+0xf0>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
   1b46a:	4b0a      	ldr	r3, [pc, #40]	; (1b494 <atcab_write+0x100>)
   1b46c:	681a      	ldr	r2, [r3, #0]
   1b46e:	23df      	movs	r3, #223	; 0xdf
   1b470:	18fc      	adds	r4, r7, r3
   1b472:	2310      	movs	r3, #16
   1b474:	18fb      	adds	r3, r7, r3
   1b476:	0011      	movs	r1, r2
   1b478:	0018      	movs	r0, r3
   1b47a:	f000 fdc5 	bl	1c008 <atca_execute_command>
   1b47e:	0003      	movs	r3, r0
   1b480:	7023      	strb	r3, [r4, #0]
   1b482:	e000      	b.n	1b486 <atcab_write+0xf2>
            memcpy(packet.data, value, 4);
        }

        if ((status = atWrite(ca_cmd, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
        {
            break;
   1b484:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   1b486:	23df      	movs	r3, #223	; 0xdf
   1b488:	18fb      	adds	r3, r7, r3
   1b48a:	781b      	ldrb	r3, [r3, #0]
}
   1b48c:	0018      	movs	r0, r3
   1b48e:	46bd      	mov	sp, r7
   1b490:	b039      	add	sp, #228	; 0xe4
   1b492:	bd90      	pop	{r4, r7, pc}
   1b494:	200003b0 	.word	0x200003b0

0001b498 <atcab_write_zone>:
 *  \param[in] len     Number of bytes to be written. Must be either 4 or 32.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, const uint8_t *data, uint8_t len)
{
   1b498:	b5b0      	push	{r4, r5, r7, lr}
   1b49a:	b086      	sub	sp, #24
   1b49c:	af02      	add	r7, sp, #8
   1b49e:	0005      	movs	r5, r0
   1b4a0:	000c      	movs	r4, r1
   1b4a2:	0010      	movs	r0, r2
   1b4a4:	0019      	movs	r1, r3
   1b4a6:	1dfb      	adds	r3, r7, #7
   1b4a8:	1c2a      	adds	r2, r5, #0
   1b4aa:	701a      	strb	r2, [r3, #0]
   1b4ac:	1d3b      	adds	r3, r7, #4
   1b4ae:	1c22      	adds	r2, r4, #0
   1b4b0:	801a      	strh	r2, [r3, #0]
   1b4b2:	1dbb      	adds	r3, r7, #6
   1b4b4:	1c02      	adds	r2, r0, #0
   1b4b6:	701a      	strb	r2, [r3, #0]
   1b4b8:	1cfb      	adds	r3, r7, #3
   1b4ba:	1c0a      	adds	r2, r1, #0
   1b4bc:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1b4be:	230f      	movs	r3, #15
   1b4c0:	18fb      	adds	r3, r7, r3
   1b4c2:	22e1      	movs	r2, #225	; 0xe1
   1b4c4:	701a      	strb	r2, [r3, #0]
    uint16_t addr;

    // Check the input parameters
    if (data == NULL)
   1b4c6:	6a3b      	ldr	r3, [r7, #32]
   1b4c8:	2b00      	cmp	r3, #0
   1b4ca:	d101      	bne.n	1b4d0 <atcab_write_zone+0x38>
    {
        return ATCA_BAD_PARAM;
   1b4cc:	23e2      	movs	r3, #226	; 0xe2
   1b4ce:	e040      	b.n	1b552 <atcab_write_zone+0xba>
    }

    if (len != 4 && len != 32)
   1b4d0:	2324      	movs	r3, #36	; 0x24
   1b4d2:	18fb      	adds	r3, r7, r3
   1b4d4:	781b      	ldrb	r3, [r3, #0]
   1b4d6:	2b04      	cmp	r3, #4
   1b4d8:	d006      	beq.n	1b4e8 <atcab_write_zone+0x50>
   1b4da:	2324      	movs	r3, #36	; 0x24
   1b4dc:	18fb      	adds	r3, r7, r3
   1b4de:	781b      	ldrb	r3, [r3, #0]
   1b4e0:	2b20      	cmp	r3, #32
   1b4e2:	d001      	beq.n	1b4e8 <atcab_write_zone+0x50>
    {
        return ATCA_BAD_PARAM;
   1b4e4:	23e2      	movs	r3, #226	; 0xe2
   1b4e6:	e034      	b.n	1b552 <atcab_write_zone+0xba>
    }

    do
    {
        // The get address function checks the remaining variables
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
   1b4e8:	230f      	movs	r3, #15
   1b4ea:	18fc      	adds	r4, r7, r3
   1b4ec:	1cfb      	adds	r3, r7, #3
   1b4ee:	781d      	ldrb	r5, [r3, #0]
   1b4f0:	1dbb      	adds	r3, r7, #6
   1b4f2:	781a      	ldrb	r2, [r3, #0]
   1b4f4:	1d3b      	adds	r3, r7, #4
   1b4f6:	8819      	ldrh	r1, [r3, #0]
   1b4f8:	1dfb      	adds	r3, r7, #7
   1b4fa:	7818      	ldrb	r0, [r3, #0]
   1b4fc:	230c      	movs	r3, #12
   1b4fe:	18fb      	adds	r3, r7, r3
   1b500:	9300      	str	r3, [sp, #0]
   1b502:	002b      	movs	r3, r5
   1b504:	f7fe f9e6 	bl	198d4 <atcab_get_addr>
   1b508:	0003      	movs	r3, r0
   1b50a:	7023      	strb	r3, [r4, #0]
   1b50c:	230f      	movs	r3, #15
   1b50e:	18fb      	adds	r3, r7, r3
   1b510:	781b      	ldrb	r3, [r3, #0]
   1b512:	2b00      	cmp	r3, #0
   1b514:	d119      	bne.n	1b54a <atcab_write_zone+0xb2>
        {
            break;
        }

        // If there are 32 bytes to write, then xor the bit into the mode
        if (len == ATCA_BLOCK_SIZE)
   1b516:	2324      	movs	r3, #36	; 0x24
   1b518:	18fb      	adds	r3, r7, r3
   1b51a:	781b      	ldrb	r3, [r3, #0]
   1b51c:	2b20      	cmp	r3, #32
   1b51e:	d106      	bne.n	1b52e <atcab_write_zone+0x96>
        {
            zone = zone | ATCA_ZONE_READWRITE_32;
   1b520:	1dfb      	adds	r3, r7, #7
   1b522:	1dfa      	adds	r2, r7, #7
   1b524:	7812      	ldrb	r2, [r2, #0]
   1b526:	2180      	movs	r1, #128	; 0x80
   1b528:	4249      	negs	r1, r1
   1b52a:	430a      	orrs	r2, r1
   1b52c:	701a      	strb	r2, [r3, #0]
        }

        status = atcab_write(zone, addr, data, NULL);
   1b52e:	230c      	movs	r3, #12
   1b530:	18fb      	adds	r3, r7, r3
   1b532:	8819      	ldrh	r1, [r3, #0]
   1b534:	230f      	movs	r3, #15
   1b536:	18fc      	adds	r4, r7, r3
   1b538:	6a3a      	ldr	r2, [r7, #32]
   1b53a:	1dfb      	adds	r3, r7, #7
   1b53c:	7818      	ldrb	r0, [r3, #0]
   1b53e:	2300      	movs	r3, #0
   1b540:	f7ff ff28 	bl	1b394 <atcab_write>
   1b544:	0003      	movs	r3, r0
   1b546:	7023      	strb	r3, [r4, #0]
   1b548:	e000      	b.n	1b54c <atcab_write_zone+0xb4>
    do
    {
        // The get address function checks the remaining variables
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
        {
            break;
   1b54a:	46c0      	nop			; (mov r8, r8)
        status = atcab_write(zone, addr, data, NULL);

    }
    while (0);

    return status;
   1b54c:	230f      	movs	r3, #15
   1b54e:	18fb      	adds	r3, r7, r3
   1b550:	781b      	ldrb	r3, [r3, #0]
}
   1b552:	0018      	movs	r0, r3
   1b554:	46bd      	mov	sp, r7
   1b556:	b004      	add	sp, #16
   1b558:	bdb0      	pop	{r4, r5, r7, pc}
   1b55a:	46c0      	nop			; (mov r8, r8)

0001b55c <atcab_write_config_zone>:
 *                          devices.
 *
 *  \returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write_config_zone(const uint8_t* config_data)
{
   1b55c:	b590      	push	{r4, r7, lr}
   1b55e:	b087      	sub	sp, #28
   1b560:	af02      	add	r7, sp, #8
   1b562:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1b564:	230f      	movs	r3, #15
   1b566:	18fb      	adds	r3, r7, r3
   1b568:	22e1      	movs	r2, #225	; 0xe1
   1b56a:	701a      	strb	r2, [r3, #0]
    size_t config_size = 0;
   1b56c:	2300      	movs	r3, #0
   1b56e:	60bb      	str	r3, [r7, #8]

    if (config_data == NULL)
   1b570:	687b      	ldr	r3, [r7, #4]
   1b572:	2b00      	cmp	r3, #0
   1b574:	d101      	bne.n	1b57a <atcab_write_config_zone+0x1e>
    {
        return ATCA_BAD_PARAM;
   1b576:	23e2      	movs	r3, #226	; 0xe2
   1b578:	e04a      	b.n	1b610 <atcab_write_config_zone+0xb4>
    }

    do
    {
        // Get config zone size for the device
        status = atcab_get_zone_size(ATCA_ZONE_CONFIG, 0, &config_size);
   1b57a:	230f      	movs	r3, #15
   1b57c:	18fc      	adds	r4, r7, r3
   1b57e:	2308      	movs	r3, #8
   1b580:	18fb      	adds	r3, r7, r3
   1b582:	001a      	movs	r2, r3
   1b584:	2100      	movs	r1, #0
   1b586:	2000      	movs	r0, #0
   1b588:	f7fe fa1e 	bl	199c8 <atcab_get_zone_size>
   1b58c:	0003      	movs	r3, r0
   1b58e:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
   1b590:	230f      	movs	r3, #15
   1b592:	18fb      	adds	r3, r7, r3
   1b594:	781b      	ldrb	r3, [r3, #0]
   1b596:	2b00      	cmp	r3, #0
   1b598:	d132      	bne.n	1b600 <atcab_write_config_zone+0xa4>
        {
            break;
        }

        // Write config zone excluding UserExtra and Selector
        status = atcab_write_bytes_zone(ATCA_ZONE_CONFIG, 0, 16, &config_data[16], config_size - 16);
   1b59a:	687b      	ldr	r3, [r7, #4]
   1b59c:	3310      	adds	r3, #16
   1b59e:	001a      	movs	r2, r3
   1b5a0:	68bb      	ldr	r3, [r7, #8]
   1b5a2:	3b10      	subs	r3, #16
   1b5a4:	210f      	movs	r1, #15
   1b5a6:	187c      	adds	r4, r7, r1
   1b5a8:	9300      	str	r3, [sp, #0]
   1b5aa:	0013      	movs	r3, r2
   1b5ac:	2210      	movs	r2, #16
   1b5ae:	2100      	movs	r1, #0
   1b5b0:	2000      	movs	r0, #0
   1b5b2:	f000 f831 	bl	1b618 <atcab_write_bytes_zone>
   1b5b6:	0003      	movs	r3, r0
   1b5b8:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
   1b5ba:	230f      	movs	r3, #15
   1b5bc:	18fb      	adds	r3, r7, r3
   1b5be:	781b      	ldrb	r3, [r3, #0]
   1b5c0:	2b00      	cmp	r3, #0
   1b5c2:	d11f      	bne.n	1b604 <atcab_write_config_zone+0xa8>
        {
            break;
        }

        // Write the UserExtra and Selector. This may fail if either value is already non-zero.
        status = atcab_updateextra(UPDATE_MODE_USER_EXTRA, config_data[84]);
   1b5c4:	687b      	ldr	r3, [r7, #4]
   1b5c6:	3354      	adds	r3, #84	; 0x54
   1b5c8:	781b      	ldrb	r3, [r3, #0]
   1b5ca:	b29b      	uxth	r3, r3
   1b5cc:	220f      	movs	r2, #15
   1b5ce:	18bc      	adds	r4, r7, r2
   1b5d0:	0019      	movs	r1, r3
   1b5d2:	2000      	movs	r0, #0
   1b5d4:	f7ff fd66 	bl	1b0a4 <atcab_updateextra>
   1b5d8:	0003      	movs	r3, r0
   1b5da:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
   1b5dc:	230f      	movs	r3, #15
   1b5de:	18fb      	adds	r3, r7, r3
   1b5e0:	781b      	ldrb	r3, [r3, #0]
   1b5e2:	2b00      	cmp	r3, #0
   1b5e4:	d110      	bne.n	1b608 <atcab_write_config_zone+0xac>
        {
            break;
        }
        status = atcab_updateextra(UPDATE_MODE_SELECTOR, config_data[85]);
   1b5e6:	687b      	ldr	r3, [r7, #4]
   1b5e8:	3355      	adds	r3, #85	; 0x55
   1b5ea:	781b      	ldrb	r3, [r3, #0]
   1b5ec:	b29b      	uxth	r3, r3
   1b5ee:	220f      	movs	r2, #15
   1b5f0:	18bc      	adds	r4, r7, r2
   1b5f2:	0019      	movs	r1, r3
   1b5f4:	2001      	movs	r0, #1
   1b5f6:	f7ff fd55 	bl	1b0a4 <atcab_updateextra>
   1b5fa:	0003      	movs	r3, r0
   1b5fc:	7023      	strb	r3, [r4, #0]
   1b5fe:	e004      	b.n	1b60a <atcab_write_config_zone+0xae>
    {
        // Get config zone size for the device
        status = atcab_get_zone_size(ATCA_ZONE_CONFIG, 0, &config_size);
        if (status != ATCA_SUCCESS)
        {
            break;
   1b600:	46c0      	nop			; (mov r8, r8)
   1b602:	e002      	b.n	1b60a <atcab_write_config_zone+0xae>

        // Write config zone excluding UserExtra and Selector
        status = atcab_write_bytes_zone(ATCA_ZONE_CONFIG, 0, 16, &config_data[16], config_size - 16);
        if (status != ATCA_SUCCESS)
        {
            break;
   1b604:	46c0      	nop			; (mov r8, r8)
   1b606:	e000      	b.n	1b60a <atcab_write_config_zone+0xae>

        // Write the UserExtra and Selector. This may fail if either value is already non-zero.
        status = atcab_updateextra(UPDATE_MODE_USER_EXTRA, config_data[84]);
        if (status != ATCA_SUCCESS)
        {
            break;
   1b608:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }
    while (0);

    return status;
   1b60a:	230f      	movs	r3, #15
   1b60c:	18fb      	adds	r3, r7, r3
   1b60e:	781b      	ldrb	r3, [r3, #0]
}
   1b610:	0018      	movs	r0, r3
   1b612:	46bd      	mov	sp, r7
   1b614:	b005      	add	sp, #20
   1b616:	bd90      	pop	{r4, r7, pc}

0001b618 <atcab_write_bytes_zone>:
 *                           of a word (4 bytes).
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write_bytes_zone(uint8_t zone, uint16_t slot, size_t offset_bytes, const uint8_t *data, size_t length)
{
   1b618:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b61a:	b08d      	sub	sp, #52	; 0x34
   1b61c:	af02      	add	r7, sp, #8
   1b61e:	60ba      	str	r2, [r7, #8]
   1b620:	607b      	str	r3, [r7, #4]
   1b622:	230f      	movs	r3, #15
   1b624:	18fb      	adds	r3, r7, r3
   1b626:	1c02      	adds	r2, r0, #0
   1b628:	701a      	strb	r2, [r3, #0]
   1b62a:	230c      	movs	r3, #12
   1b62c:	18fb      	adds	r3, r7, r3
   1b62e:	1c0a      	adds	r2, r1, #0
   1b630:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1b632:	2327      	movs	r3, #39	; 0x27
   1b634:	18fb      	adds	r3, r7, r3
   1b636:	22e1      	movs	r2, #225	; 0xe1
   1b638:	701a      	strb	r2, [r3, #0]
    size_t zone_size = 0;
   1b63a:	2300      	movs	r3, #0
   1b63c:	617b      	str	r3, [r7, #20]
    size_t data_idx = 0;
   1b63e:	2300      	movs	r3, #0
   1b640:	623b      	str	r3, [r7, #32]
    size_t cur_block = 0;
   1b642:	2300      	movs	r3, #0
   1b644:	61fb      	str	r3, [r7, #28]
    size_t cur_word = 0;
   1b646:	2300      	movs	r3, #0
   1b648:	61bb      	str	r3, [r7, #24]

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
   1b64a:	230f      	movs	r3, #15
   1b64c:	18fb      	adds	r3, r7, r3
   1b64e:	781b      	ldrb	r3, [r3, #0]
   1b650:	2b00      	cmp	r3, #0
   1b652:	d00b      	beq.n	1b66c <atcab_write_bytes_zone+0x54>
   1b654:	230f      	movs	r3, #15
   1b656:	18fb      	adds	r3, r7, r3
   1b658:	781b      	ldrb	r3, [r3, #0]
   1b65a:	2b01      	cmp	r3, #1
   1b65c:	d006      	beq.n	1b66c <atcab_write_bytes_zone+0x54>
   1b65e:	230f      	movs	r3, #15
   1b660:	18fb      	adds	r3, r7, r3
   1b662:	781b      	ldrb	r3, [r3, #0]
   1b664:	2b02      	cmp	r3, #2
   1b666:	d001      	beq.n	1b66c <atcab_write_bytes_zone+0x54>
    {
        return ATCA_BAD_PARAM;
   1b668:	23e2      	movs	r3, #226	; 0xe2
   1b66a:	e0ba      	b.n	1b7e2 <atcab_write_bytes_zone+0x1ca>
    }
    if (zone == ATCA_ZONE_DATA && slot > 15)
   1b66c:	230f      	movs	r3, #15
   1b66e:	18fb      	adds	r3, r7, r3
   1b670:	781b      	ldrb	r3, [r3, #0]
   1b672:	2b02      	cmp	r3, #2
   1b674:	d106      	bne.n	1b684 <atcab_write_bytes_zone+0x6c>
   1b676:	230c      	movs	r3, #12
   1b678:	18fb      	adds	r3, r7, r3
   1b67a:	881b      	ldrh	r3, [r3, #0]
   1b67c:	2b0f      	cmp	r3, #15
   1b67e:	d901      	bls.n	1b684 <atcab_write_bytes_zone+0x6c>
    {
        return ATCA_BAD_PARAM;
   1b680:	23e2      	movs	r3, #226	; 0xe2
   1b682:	e0ae      	b.n	1b7e2 <atcab_write_bytes_zone+0x1ca>
    }
    if (length == 0)
   1b684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b686:	2b00      	cmp	r3, #0
   1b688:	d101      	bne.n	1b68e <atcab_write_bytes_zone+0x76>
    {
        return ATCA_SUCCESS;  // Always succeed writing 0 bytes
   1b68a:	2300      	movs	r3, #0
   1b68c:	e0a9      	b.n	1b7e2 <atcab_write_bytes_zone+0x1ca>
    }
    if (data == NULL)
   1b68e:	687b      	ldr	r3, [r7, #4]
   1b690:	2b00      	cmp	r3, #0
   1b692:	d101      	bne.n	1b698 <atcab_write_bytes_zone+0x80>
    {
        return ATCA_BAD_PARAM;
   1b694:	23e2      	movs	r3, #226	; 0xe2
   1b696:	e0a4      	b.n	1b7e2 <atcab_write_bytes_zone+0x1ca>
    }
    if (offset_bytes % ATCA_WORD_SIZE != 0 || length % ATCA_WORD_SIZE != 0)
   1b698:	68bb      	ldr	r3, [r7, #8]
   1b69a:	2203      	movs	r2, #3
   1b69c:	4013      	ands	r3, r2
   1b69e:	d103      	bne.n	1b6a8 <atcab_write_bytes_zone+0x90>
   1b6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b6a2:	2203      	movs	r2, #3
   1b6a4:	4013      	ands	r3, r2
   1b6a6:	d001      	beq.n	1b6ac <atcab_write_bytes_zone+0x94>
    {
        return ATCA_BAD_PARAM;
   1b6a8:	23e2      	movs	r3, #226	; 0xe2
   1b6aa:	e09a      	b.n	1b7e2 <atcab_write_bytes_zone+0x1ca>
    }

    do
    {
        status = atcab_get_zone_size(zone, slot, &zone_size);
   1b6ac:	2327      	movs	r3, #39	; 0x27
   1b6ae:	18fc      	adds	r4, r7, r3
   1b6b0:	2314      	movs	r3, #20
   1b6b2:	18fa      	adds	r2, r7, r3
   1b6b4:	230c      	movs	r3, #12
   1b6b6:	18fb      	adds	r3, r7, r3
   1b6b8:	8819      	ldrh	r1, [r3, #0]
   1b6ba:	230f      	movs	r3, #15
   1b6bc:	18fb      	adds	r3, r7, r3
   1b6be:	781b      	ldrb	r3, [r3, #0]
   1b6c0:	0018      	movs	r0, r3
   1b6c2:	f7fe f981 	bl	199c8 <atcab_get_zone_size>
   1b6c6:	0003      	movs	r3, r0
   1b6c8:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
   1b6ca:	2327      	movs	r3, #39	; 0x27
   1b6cc:	18fb      	adds	r3, r7, r3
   1b6ce:	781b      	ldrb	r3, [r3, #0]
   1b6d0:	2b00      	cmp	r3, #0
   1b6d2:	d000      	beq.n	1b6d6 <atcab_write_bytes_zone+0xbe>
   1b6d4:	e07d      	b.n	1b7d2 <atcab_write_bytes_zone+0x1ba>
        {
            break;
        }
        if (offset_bytes + length > zone_size)
   1b6d6:	68ba      	ldr	r2, [r7, #8]
   1b6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b6da:	18d2      	adds	r2, r2, r3
   1b6dc:	697b      	ldr	r3, [r7, #20]
   1b6de:	429a      	cmp	r2, r3
   1b6e0:	d901      	bls.n	1b6e6 <atcab_write_bytes_zone+0xce>
        {
            return ATCA_BAD_PARAM;
   1b6e2:	23e2      	movs	r3, #226	; 0xe2
   1b6e4:	e07d      	b.n	1b7e2 <atcab_write_bytes_zone+0x1ca>
        }

        cur_block = offset_bytes / ATCA_BLOCK_SIZE;
   1b6e6:	68bb      	ldr	r3, [r7, #8]
   1b6e8:	095b      	lsrs	r3, r3, #5
   1b6ea:	61fb      	str	r3, [r7, #28]
        cur_word = (offset_bytes % ATCA_BLOCK_SIZE) / ATCA_WORD_SIZE;
   1b6ec:	68bb      	ldr	r3, [r7, #8]
   1b6ee:	221f      	movs	r2, #31
   1b6f0:	4013      	ands	r3, r2
   1b6f2:	089b      	lsrs	r3, r3, #2
   1b6f4:	61bb      	str	r3, [r7, #24]

        while (data_idx < length)
   1b6f6:	e067      	b.n	1b7c8 <atcab_write_bytes_zone+0x1b0>
        {
            // The last item makes sure we handle the selector, user extra, and lock bytes in the config properly
            if (cur_word == 0 && length - data_idx >= ATCA_BLOCK_SIZE && !(zone == ATCA_ZONE_CONFIG && cur_block == 2))
   1b6f8:	69bb      	ldr	r3, [r7, #24]
   1b6fa:	2b00      	cmp	r3, #0
   1b6fc:	d12e      	bne.n	1b75c <atcab_write_bytes_zone+0x144>
   1b6fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1b700:	6a3b      	ldr	r3, [r7, #32]
   1b702:	1ad3      	subs	r3, r2, r3
   1b704:	2b1f      	cmp	r3, #31
   1b706:	d929      	bls.n	1b75c <atcab_write_bytes_zone+0x144>
   1b708:	230f      	movs	r3, #15
   1b70a:	18fb      	adds	r3, r7, r3
   1b70c:	781b      	ldrb	r3, [r3, #0]
   1b70e:	2b00      	cmp	r3, #0
   1b710:	d102      	bne.n	1b718 <atcab_write_bytes_zone+0x100>
   1b712:	69fb      	ldr	r3, [r7, #28]
   1b714:	2b02      	cmp	r3, #2
   1b716:	d021      	beq.n	1b75c <atcab_write_bytes_zone+0x144>
            {
                status = atcab_write_zone(zone, slot, (uint8_t)cur_block, 0, &data[data_idx], ATCA_BLOCK_SIZE);
   1b718:	69fb      	ldr	r3, [r7, #28]
   1b71a:	b2dd      	uxtb	r5, r3
   1b71c:	687a      	ldr	r2, [r7, #4]
   1b71e:	6a3b      	ldr	r3, [r7, #32]
   1b720:	18d3      	adds	r3, r2, r3
   1b722:	2227      	movs	r2, #39	; 0x27
   1b724:	18bc      	adds	r4, r7, r2
   1b726:	220c      	movs	r2, #12
   1b728:	18ba      	adds	r2, r7, r2
   1b72a:	8811      	ldrh	r1, [r2, #0]
   1b72c:	220f      	movs	r2, #15
   1b72e:	18ba      	adds	r2, r7, r2
   1b730:	7810      	ldrb	r0, [r2, #0]
   1b732:	2220      	movs	r2, #32
   1b734:	9201      	str	r2, [sp, #4]
   1b736:	9300      	str	r3, [sp, #0]
   1b738:	2300      	movs	r3, #0
   1b73a:	002a      	movs	r2, r5
   1b73c:	f7ff feac 	bl	1b498 <atcab_write_zone>
   1b740:	0003      	movs	r3, r0
   1b742:	7023      	strb	r3, [r4, #0]
                if (status != ATCA_SUCCESS)
   1b744:	2327      	movs	r3, #39	; 0x27
   1b746:	18fb      	adds	r3, r7, r3
   1b748:	781b      	ldrb	r3, [r3, #0]
   1b74a:	2b00      	cmp	r3, #0
   1b74c:	d143      	bne.n	1b7d6 <atcab_write_bytes_zone+0x1be>
                {
                    break;
                }
                data_idx += ATCA_BLOCK_SIZE;
   1b74e:	6a3b      	ldr	r3, [r7, #32]
   1b750:	3320      	adds	r3, #32
   1b752:	623b      	str	r3, [r7, #32]
                cur_block += 1;
   1b754:	69fb      	ldr	r3, [r7, #28]
   1b756:	3301      	adds	r3, #1
   1b758:	61fb      	str	r3, [r7, #28]
   1b75a:	e035      	b.n	1b7c8 <atcab_write_bytes_zone+0x1b0>
            }
            else
            {
                // Skip trying to change UserExtra, Selector, LockValue, and LockConfig which require the UpdateExtra command to change
                if (!(zone == ATCA_ZONE_CONFIG && cur_block == 2 && cur_word == 5))
   1b75c:	230f      	movs	r3, #15
   1b75e:	18fb      	adds	r3, r7, r3
   1b760:	781b      	ldrb	r3, [r3, #0]
   1b762:	2b00      	cmp	r3, #0
   1b764:	d105      	bne.n	1b772 <atcab_write_bytes_zone+0x15a>
   1b766:	69fb      	ldr	r3, [r7, #28]
   1b768:	2b02      	cmp	r3, #2
   1b76a:	d102      	bne.n	1b772 <atcab_write_bytes_zone+0x15a>
   1b76c:	69bb      	ldr	r3, [r7, #24]
   1b76e:	2b05      	cmp	r3, #5
   1b770:	d01c      	beq.n	1b7ac <atcab_write_bytes_zone+0x194>
                {
                    status = atcab_write_zone(zone, slot, (uint8_t)cur_block, (uint8_t)cur_word, &data[data_idx], ATCA_WORD_SIZE);
   1b772:	69fb      	ldr	r3, [r7, #28]
   1b774:	b2dd      	uxtb	r5, r3
   1b776:	69bb      	ldr	r3, [r7, #24]
   1b778:	b2de      	uxtb	r6, r3
   1b77a:	687a      	ldr	r2, [r7, #4]
   1b77c:	6a3b      	ldr	r3, [r7, #32]
   1b77e:	18d3      	adds	r3, r2, r3
   1b780:	2227      	movs	r2, #39	; 0x27
   1b782:	18bc      	adds	r4, r7, r2
   1b784:	220c      	movs	r2, #12
   1b786:	18ba      	adds	r2, r7, r2
   1b788:	8811      	ldrh	r1, [r2, #0]
   1b78a:	220f      	movs	r2, #15
   1b78c:	18ba      	adds	r2, r7, r2
   1b78e:	7810      	ldrb	r0, [r2, #0]
   1b790:	2204      	movs	r2, #4
   1b792:	9201      	str	r2, [sp, #4]
   1b794:	9300      	str	r3, [sp, #0]
   1b796:	0033      	movs	r3, r6
   1b798:	002a      	movs	r2, r5
   1b79a:	f7ff fe7d 	bl	1b498 <atcab_write_zone>
   1b79e:	0003      	movs	r3, r0
   1b7a0:	7023      	strb	r3, [r4, #0]
                    if (status != ATCA_SUCCESS)
   1b7a2:	2327      	movs	r3, #39	; 0x27
   1b7a4:	18fb      	adds	r3, r7, r3
   1b7a6:	781b      	ldrb	r3, [r3, #0]
   1b7a8:	2b00      	cmp	r3, #0
   1b7aa:	d116      	bne.n	1b7da <atcab_write_bytes_zone+0x1c2>
                    {
                        break;
                    }
                }
                data_idx += ATCA_WORD_SIZE;
   1b7ac:	6a3b      	ldr	r3, [r7, #32]
   1b7ae:	3304      	adds	r3, #4
   1b7b0:	623b      	str	r3, [r7, #32]
                cur_word += 1;
   1b7b2:	69bb      	ldr	r3, [r7, #24]
   1b7b4:	3301      	adds	r3, #1
   1b7b6:	61bb      	str	r3, [r7, #24]
                if (cur_word == ATCA_BLOCK_SIZE / ATCA_WORD_SIZE)
   1b7b8:	69bb      	ldr	r3, [r7, #24]
   1b7ba:	2b08      	cmp	r3, #8
   1b7bc:	d104      	bne.n	1b7c8 <atcab_write_bytes_zone+0x1b0>
                {
                    cur_block += 1;
   1b7be:	69fb      	ldr	r3, [r7, #28]
   1b7c0:	3301      	adds	r3, #1
   1b7c2:	61fb      	str	r3, [r7, #28]
                    cur_word = 0;
   1b7c4:	2300      	movs	r3, #0
   1b7c6:	61bb      	str	r3, [r7, #24]
        }

        cur_block = offset_bytes / ATCA_BLOCK_SIZE;
        cur_word = (offset_bytes % ATCA_BLOCK_SIZE) / ATCA_WORD_SIZE;

        while (data_idx < length)
   1b7c8:	6a3a      	ldr	r2, [r7, #32]
   1b7ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b7cc:	429a      	cmp	r2, r3
   1b7ce:	d393      	bcc.n	1b6f8 <atcab_write_bytes_zone+0xe0>
   1b7d0:	e004      	b.n	1b7dc <atcab_write_bytes_zone+0x1c4>
    do
    {
        status = atcab_get_zone_size(zone, slot, &zone_size);
        if (status != ATCA_SUCCESS)
        {
            break;
   1b7d2:	46c0      	nop			; (mov r8, r8)
   1b7d4:	e002      	b.n	1b7dc <atcab_write_bytes_zone+0x1c4>
            if (cur_word == 0 && length - data_idx >= ATCA_BLOCK_SIZE && !(zone == ATCA_ZONE_CONFIG && cur_block == 2))
            {
                status = atcab_write_zone(zone, slot, (uint8_t)cur_block, 0, &data[data_idx], ATCA_BLOCK_SIZE);
                if (status != ATCA_SUCCESS)
                {
                    break;
   1b7d6:	46c0      	nop			; (mov r8, r8)
   1b7d8:	e000      	b.n	1b7dc <atcab_write_bytes_zone+0x1c4>
                if (!(zone == ATCA_ZONE_CONFIG && cur_block == 2 && cur_word == 5))
                {
                    status = atcab_write_zone(zone, slot, (uint8_t)cur_block, (uint8_t)cur_word, &data[data_idx], ATCA_WORD_SIZE);
                    if (status != ATCA_SUCCESS)
                    {
                        break;
   1b7da:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
    while (false);

    return status;
   1b7dc:	2327      	movs	r3, #39	; 0x27
   1b7de:	18fb      	adds	r3, r7, r3
   1b7e0:	781b      	ldrb	r3, [r3, #0]
}
   1b7e2:	0018      	movs	r0, r3
   1b7e4:	46bd      	mov	sp, r7
   1b7e6:	b00b      	add	sp, #44	; 0x2c
   1b7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b7ea:	46c0      	nop			; (mov r8, r8)

0001b7ec <atcab_printbin_label>:
 *  \param[in] binary input buffer to print
 *  \param[in] bin_len length of buffer to print
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_printbin_label(const char* label, uint8_t* binary, size_t bin_len)
{
   1b7ec:	b580      	push	{r7, lr}
   1b7ee:	b084      	sub	sp, #16
   1b7f0:	af00      	add	r7, sp, #0
   1b7f2:	60f8      	str	r0, [r7, #12]
   1b7f4:	60b9      	str	r1, [r7, #8]
   1b7f6:	607a      	str	r2, [r7, #4]
    printf("%s", label);
   1b7f8:	68fa      	ldr	r2, [r7, #12]
   1b7fa:	4b08      	ldr	r3, [pc, #32]	; (1b81c <atcab_printbin_label+0x30>)
   1b7fc:	0011      	movs	r1, r2
   1b7fe:	0018      	movs	r0, r3
   1b800:	f00a fcbe 	bl	26180 <iprintf>
    return atcab_printbin(binary, bin_len, true);
   1b804:	6879      	ldr	r1, [r7, #4]
   1b806:	68bb      	ldr	r3, [r7, #8]
   1b808:	2201      	movs	r2, #1
   1b80a:	0018      	movs	r0, r3
   1b80c:	f000 f808 	bl	1b820 <atcab_printbin>
   1b810:	0003      	movs	r3, r0
}
   1b812:	0018      	movs	r0, r3
   1b814:	46bd      	mov	sp, r7
   1b816:	b004      	add	sp, #16
   1b818:	bd80      	pop	{r7, pc}
   1b81a:	46c0      	nop			; (mov r8, r8)
   1b81c:	0002e2cc 	.word	0x0002e2cc

0001b820 <atcab_printbin>:
 *  \param[in] bin_len length of buffer to print
 *  \param[in] add_space indicates whether spaces and returns should be added for pretty printing
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_printbin(uint8_t* binary, size_t bin_len, bool add_space)
{
   1b820:	b580      	push	{r7, lr}
   1b822:	b086      	sub	sp, #24
   1b824:	af00      	add	r7, sp, #0
   1b826:	60f8      	str	r0, [r7, #12]
   1b828:	60b9      	str	r1, [r7, #8]
   1b82a:	1dfb      	adds	r3, r7, #7
   1b82c:	701a      	strb	r2, [r3, #0]
    size_t i = 0;
   1b82e:	2300      	movs	r3, #0
   1b830:	617b      	str	r3, [r7, #20]
    size_t line_len = 16;
   1b832:	2310      	movs	r3, #16
   1b834:	613b      	str	r3, [r7, #16]

    // Verify the inputs
    if (binary == NULL)
   1b836:	68fb      	ldr	r3, [r7, #12]
   1b838:	2b00      	cmp	r3, #0
   1b83a:	d101      	bne.n	1b840 <atcab_printbin+0x20>
    {
        return ATCA_BAD_PARAM;
   1b83c:	23e2      	movs	r3, #226	; 0xe2
   1b83e:	e03b      	b.n	1b8b8 <atcab_printbin+0x98>
    }

    // Set the line length
    line_len = add_space ? 16 : 32;
   1b840:	1dfb      	adds	r3, r7, #7
   1b842:	781b      	ldrb	r3, [r3, #0]
   1b844:	2b00      	cmp	r3, #0
   1b846:	d001      	beq.n	1b84c <atcab_printbin+0x2c>
   1b848:	2310      	movs	r3, #16
   1b84a:	e000      	b.n	1b84e <atcab_printbin+0x2e>
   1b84c:	2320      	movs	r3, #32
   1b84e:	613b      	str	r3, [r7, #16]

    // Print the bytes
    for (i = 0; i < bin_len; i++)
   1b850:	2300      	movs	r3, #0
   1b852:	617b      	str	r3, [r7, #20]
   1b854:	e027      	b.n	1b8a6 <atcab_printbin+0x86>
    {
        // Print the byte
        if (add_space)
   1b856:	1dfb      	adds	r3, r7, #7
   1b858:	781b      	ldrb	r3, [r3, #0]
   1b85a:	2b00      	cmp	r3, #0
   1b85c:	d00a      	beq.n	1b874 <atcab_printbin+0x54>
        {
            printf("%02X ", binary[i]);
   1b85e:	68fa      	ldr	r2, [r7, #12]
   1b860:	697b      	ldr	r3, [r7, #20]
   1b862:	18d3      	adds	r3, r2, r3
   1b864:	781b      	ldrb	r3, [r3, #0]
   1b866:	001a      	movs	r2, r3
   1b868:	4b15      	ldr	r3, [pc, #84]	; (1b8c0 <atcab_printbin+0xa0>)
   1b86a:	0011      	movs	r1, r2
   1b86c:	0018      	movs	r0, r3
   1b86e:	f00a fc87 	bl	26180 <iprintf>
   1b872:	e009      	b.n	1b888 <atcab_printbin+0x68>
        }
        else
        {
            printf("%02X", binary[i]);
   1b874:	68fa      	ldr	r2, [r7, #12]
   1b876:	697b      	ldr	r3, [r7, #20]
   1b878:	18d3      	adds	r3, r2, r3
   1b87a:	781b      	ldrb	r3, [r3, #0]
   1b87c:	001a      	movs	r2, r3
   1b87e:	4b11      	ldr	r3, [pc, #68]	; (1b8c4 <atcab_printbin+0xa4>)
   1b880:	0011      	movs	r1, r2
   1b882:	0018      	movs	r0, r3
   1b884:	f00a fc7c 	bl	26180 <iprintf>
        }

        // Break at the line_len
        if ((i + 1) % line_len == 0)
   1b888:	697b      	ldr	r3, [r7, #20]
   1b88a:	3301      	adds	r3, #1
   1b88c:	6939      	ldr	r1, [r7, #16]
   1b88e:	0018      	movs	r0, r3
   1b890:	f007 fe8a 	bl	235a8 <__aeabi_uidivmod>
   1b894:	1e0b      	subs	r3, r1, #0
   1b896:	d103      	bne.n	1b8a0 <atcab_printbin+0x80>
        {
            printf("\r\n");
   1b898:	4b0b      	ldr	r3, [pc, #44]	; (1b8c8 <atcab_printbin+0xa8>)
   1b89a:	0018      	movs	r0, r3
   1b89c:	f00a fc70 	bl	26180 <iprintf>

    // Set the line length
    line_len = add_space ? 16 : 32;

    // Print the bytes
    for (i = 0; i < bin_len; i++)
   1b8a0:	697b      	ldr	r3, [r7, #20]
   1b8a2:	3301      	adds	r3, #1
   1b8a4:	617b      	str	r3, [r7, #20]
   1b8a6:	697a      	ldr	r2, [r7, #20]
   1b8a8:	68bb      	ldr	r3, [r7, #8]
   1b8aa:	429a      	cmp	r2, r3
   1b8ac:	d3d3      	bcc.n	1b856 <atcab_printbin+0x36>
        {
            printf("\r\n");
        }
    }
    // Print the last carriage return
    printf("\r\n");
   1b8ae:	4b06      	ldr	r3, [pc, #24]	; (1b8c8 <atcab_printbin+0xa8>)
   1b8b0:	0018      	movs	r0, r3
   1b8b2:	f00a fc65 	bl	26180 <iprintf>

    return ATCA_SUCCESS;
   1b8b6:	2300      	movs	r3, #0
}
   1b8b8:	0018      	movs	r0, r3
   1b8ba:	46bd      	mov	sp, r7
   1b8bc:	b006      	add	sp, #24
   1b8be:	bd80      	pop	{r7, pc}
   1b8c0:	0002e2d0 	.word	0x0002e2d0
   1b8c4:	0002e2d8 	.word	0x0002e2d8
   1b8c8:	0002e2c8 	.word	0x0002e2c8

0001b8cc <atECDH>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atECDH(ATCACommand ca_cmd, ATCAPacket *packet)
{
   1b8cc:	b580      	push	{r7, lr}
   1b8ce:	b082      	sub	sp, #8
   1b8d0:	af00      	add	r7, sp, #0
   1b8d2:	6078      	str	r0, [r7, #4]
   1b8d4:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_ECDH;
   1b8d6:	683b      	ldr	r3, [r7, #0]
   1b8d8:	2243      	movs	r2, #67	; 0x43
   1b8da:	709a      	strb	r2, [r3, #2]
    packet->txsize = ECDH_COUNT;
   1b8dc:	683b      	ldr	r3, [r7, #0]
   1b8de:	2247      	movs	r2, #71	; 0x47
   1b8e0:	705a      	strb	r2, [r3, #1]
    atCalcCrc(packet);
   1b8e2:	683b      	ldr	r3, [r7, #0]
   1b8e4:	0018      	movs	r0, r3
   1b8e6:	f000 fa0f 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1b8ea:	2300      	movs	r3, #0
}
   1b8ec:	0018      	movs	r0, r3
   1b8ee:	46bd      	mov	sp, r7
   1b8f0:	b002      	add	sp, #8
   1b8f2:	bd80      	pop	{r7, pc}

0001b8f4 <atGenDig>:
 * \param[in] packet         pointer to the packet containing the command being built
 * \param[in] is_no_mac_key  Should be true if GenDig is being run on a slot that has its SlotConfig.NoMac bit set
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atGenDig(ATCACommand ca_cmd, ATCAPacket *packet, bool is_no_mac_key)
{
   1b8f4:	b580      	push	{r7, lr}
   1b8f6:	b084      	sub	sp, #16
   1b8f8:	af00      	add	r7, sp, #0
   1b8fa:	60f8      	str	r0, [r7, #12]
   1b8fc:	60b9      	str	r1, [r7, #8]
   1b8fe:	1dfb      	adds	r3, r7, #7
   1b900:	701a      	strb	r2, [r3, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_GENDIG;
   1b902:	68bb      	ldr	r3, [r7, #8]
   1b904:	2215      	movs	r2, #21
   1b906:	709a      	strb	r2, [r3, #2]

    if (packet->param1 == GENDIG_ZONE_SHARED_NONCE) // shared nonce mode
   1b908:	68bb      	ldr	r3, [r7, #8]
   1b90a:	78db      	ldrb	r3, [r3, #3]
   1b90c:	2b03      	cmp	r3, #3
   1b90e:	d103      	bne.n	1b918 <atGenDig+0x24>
    {
        packet->txsize = GENDIG_COUNT + 32;
   1b910:	68bb      	ldr	r3, [r7, #8]
   1b912:	2227      	movs	r2, #39	; 0x27
   1b914:	705a      	strb	r2, [r3, #1]
   1b916:	e00a      	b.n	1b92e <atGenDig+0x3a>
    }
    else if (is_no_mac_key)
   1b918:	1dfb      	adds	r3, r7, #7
   1b91a:	781b      	ldrb	r3, [r3, #0]
   1b91c:	2b00      	cmp	r3, #0
   1b91e:	d003      	beq.n	1b928 <atGenDig+0x34>
    {
        packet->txsize = GENDIG_COUNT + 4;  // noMac keys use 4 bytes of OtherData in calculation
   1b920:	68bb      	ldr	r3, [r7, #8]
   1b922:	220b      	movs	r2, #11
   1b924:	705a      	strb	r2, [r3, #1]
   1b926:	e002      	b.n	1b92e <atGenDig+0x3a>
    }
    else
    {
        packet->txsize = GENDIG_COUNT;
   1b928:	68bb      	ldr	r3, [r7, #8]
   1b92a:	2207      	movs	r2, #7
   1b92c:	705a      	strb	r2, [r3, #1]
    }
    atCalcCrc(packet);
   1b92e:	68bb      	ldr	r3, [r7, #8]
   1b930:	0018      	movs	r0, r3
   1b932:	f000 f9e9 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1b936:	2300      	movs	r3, #0
}
   1b938:	0018      	movs	r0, r3
   1b93a:	46bd      	mov	sp, r7
   1b93c:	b004      	add	sp, #16
   1b93e:	bd80      	pop	{r7, pc}

0001b940 <atGenKey>:
 * \param[in] ca_cmd     instance
 * \param[in] packet    pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atGenKey(ATCACommand ca_cmd, ATCAPacket *packet)
{
   1b940:	b580      	push	{r7, lr}
   1b942:	b082      	sub	sp, #8
   1b944:	af00      	add	r7, sp, #0
   1b946:	6078      	str	r0, [r7, #4]
   1b948:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_GENKEY;
   1b94a:	683b      	ldr	r3, [r7, #0]
   1b94c:	2240      	movs	r2, #64	; 0x40
   1b94e:	709a      	strb	r2, [r3, #2]

    if (packet->param1 & GENKEY_MODE_PUBKEY_DIGEST)
   1b950:	683b      	ldr	r3, [r7, #0]
   1b952:	78db      	ldrb	r3, [r3, #3]
   1b954:	001a      	movs	r2, r3
   1b956:	2310      	movs	r3, #16
   1b958:	4013      	ands	r3, r2
   1b95a:	d003      	beq.n	1b964 <atGenKey+0x24>
    {
        packet->txsize = GENKEY_COUNT_DATA;
   1b95c:	683b      	ldr	r3, [r7, #0]
   1b95e:	220a      	movs	r2, #10
   1b960:	705a      	strb	r2, [r3, #1]
   1b962:	e002      	b.n	1b96a <atGenKey+0x2a>
    }
    else
    {
        packet->txsize = GENKEY_COUNT;
   1b964:	683b      	ldr	r3, [r7, #0]
   1b966:	2207      	movs	r2, #7
   1b968:	705a      	strb	r2, [r3, #1]
    }
    atCalcCrc(packet);
   1b96a:	683b      	ldr	r3, [r7, #0]
   1b96c:	0018      	movs	r0, r3
   1b96e:	f000 f9cb 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1b972:	2300      	movs	r3, #0
}
   1b974:	0018      	movs	r0, r3
   1b976:	46bd      	mov	sp, r7
   1b978:	b002      	add	sp, #8
   1b97a:	bd80      	pop	{r7, pc}

0001b97c <atInfo>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atInfo(ATCACommand ca_cmd, ATCAPacket *packet)
{
   1b97c:	b580      	push	{r7, lr}
   1b97e:	b082      	sub	sp, #8
   1b980:	af00      	add	r7, sp, #0
   1b982:	6078      	str	r0, [r7, #4]
   1b984:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_INFO;
   1b986:	683b      	ldr	r3, [r7, #0]
   1b988:	2230      	movs	r2, #48	; 0x30
   1b98a:	709a      	strb	r2, [r3, #2]
    packet->txsize = INFO_COUNT;
   1b98c:	683b      	ldr	r3, [r7, #0]
   1b98e:	2207      	movs	r2, #7
   1b990:	705a      	strb	r2, [r3, #1]
    atCalcCrc(packet);
   1b992:	683b      	ldr	r3, [r7, #0]
   1b994:	0018      	movs	r0, r3
   1b996:	f000 f9b7 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1b99a:	2300      	movs	r3, #0
}
   1b99c:	0018      	movs	r0, r3
   1b99e:	46bd      	mov	sp, r7
   1b9a0:	b002      	add	sp, #8
   1b9a2:	bd80      	pop	{r7, pc}

0001b9a4 <atLock>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atLock(ATCACommand ca_cmd, ATCAPacket *packet)
{
   1b9a4:	b580      	push	{r7, lr}
   1b9a6:	b082      	sub	sp, #8
   1b9a8:	af00      	add	r7, sp, #0
   1b9aa:	6078      	str	r0, [r7, #4]
   1b9ac:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_LOCK;
   1b9ae:	683b      	ldr	r3, [r7, #0]
   1b9b0:	2217      	movs	r2, #23
   1b9b2:	709a      	strb	r2, [r3, #2]
    packet->txsize = LOCK_COUNT;
   1b9b4:	683b      	ldr	r3, [r7, #0]
   1b9b6:	2207      	movs	r2, #7
   1b9b8:	705a      	strb	r2, [r3, #1]
    atCalcCrc(packet);
   1b9ba:	683b      	ldr	r3, [r7, #0]
   1b9bc:	0018      	movs	r0, r3
   1b9be:	f000 f9a3 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1b9c2:	2300      	movs	r3, #0
}
   1b9c4:	0018      	movs	r0, r3
   1b9c6:	46bd      	mov	sp, r7
   1b9c8:	b002      	add	sp, #8
   1b9ca:	bd80      	pop	{r7, pc}

0001b9cc <atNonce>:
 * \param[in] ca_cmd   instance
 * \param[in] packet   pointer to the packet containing the command being built
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atNonce(ATCACommand ca_cmd, ATCAPacket *packet)
{
   1b9cc:	b580      	push	{r7, lr}
   1b9ce:	b084      	sub	sp, #16
   1b9d0:	af00      	add	r7, sp, #0
   1b9d2:	6078      	str	r0, [r7, #4]
   1b9d4:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    // variable packet size
    uint8_t calc_mode = packet->param1 & NONCE_MODE_MASK;
   1b9d6:	683b      	ldr	r3, [r7, #0]
   1b9d8:	78da      	ldrb	r2, [r3, #3]
   1b9da:	230f      	movs	r3, #15
   1b9dc:	18fb      	adds	r3, r7, r3
   1b9de:	2103      	movs	r1, #3
   1b9e0:	400a      	ands	r2, r1
   1b9e2:	701a      	strb	r2, [r3, #0]

    packet->opcode = ATCA_NONCE;
   1b9e4:	683b      	ldr	r3, [r7, #0]
   1b9e6:	2216      	movs	r2, #22
   1b9e8:	709a      	strb	r2, [r3, #2]

    if ((calc_mode == NONCE_MODE_SEED_UPDATE || calc_mode == NONCE_MODE_NO_SEED_UPDATE))
   1b9ea:	230f      	movs	r3, #15
   1b9ec:	18fb      	adds	r3, r7, r3
   1b9ee:	781b      	ldrb	r3, [r3, #0]
   1b9f0:	2b00      	cmp	r3, #0
   1b9f2:	d004      	beq.n	1b9fe <atNonce+0x32>
   1b9f4:	230f      	movs	r3, #15
   1b9f6:	18fb      	adds	r3, r7, r3
   1b9f8:	781b      	ldrb	r3, [r3, #0]
   1b9fa:	2b01      	cmp	r3, #1
   1b9fc:	d103      	bne.n	1ba06 <atNonce+0x3a>
    {
        // Calculated nonce mode, 20 byte NumInm
        packet->txsize = NONCE_COUNT_SHORT;
   1b9fe:	683b      	ldr	r3, [r7, #0]
   1ba00:	221b      	movs	r2, #27
   1ba02:	705a      	strb	r2, [r3, #1]
   1ba04:	e014      	b.n	1ba30 <atNonce+0x64>
    }
    else if (calc_mode == NONCE_MODE_PASSTHROUGH)
   1ba06:	230f      	movs	r3, #15
   1ba08:	18fb      	adds	r3, r7, r3
   1ba0a:	781b      	ldrb	r3, [r3, #0]
   1ba0c:	2b03      	cmp	r3, #3
   1ba0e:	d10d      	bne.n	1ba2c <atNonce+0x60>
    {
        // PAss-through nonce mode
        if ((packet->param1 & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
   1ba10:	683b      	ldr	r3, [r7, #0]
   1ba12:	78db      	ldrb	r3, [r3, #3]
   1ba14:	001a      	movs	r2, r3
   1ba16:	2320      	movs	r3, #32
   1ba18:	4013      	ands	r3, r2
   1ba1a:	d003      	beq.n	1ba24 <atNonce+0x58>
        {
            // 64 byte NumIn
            packet->txsize = NONCE_COUNT_LONG_64;
   1ba1c:	683b      	ldr	r3, [r7, #0]
   1ba1e:	2247      	movs	r2, #71	; 0x47
   1ba20:	705a      	strb	r2, [r3, #1]
   1ba22:	e005      	b.n	1ba30 <atNonce+0x64>
        }
        else
        {
            // 32 byte NumIn
            packet->txsize = NONCE_COUNT_LONG;
   1ba24:	683b      	ldr	r3, [r7, #0]
   1ba26:	2227      	movs	r2, #39	; 0x27
   1ba28:	705a      	strb	r2, [r3, #1]
   1ba2a:	e001      	b.n	1ba30 <atNonce+0x64>
        }
    }
    else
    {
        return ATCA_BAD_PARAM;
   1ba2c:	23e2      	movs	r3, #226	; 0xe2
   1ba2e:	e004      	b.n	1ba3a <atNonce+0x6e>
    }
    atCalcCrc(packet);
   1ba30:	683b      	ldr	r3, [r7, #0]
   1ba32:	0018      	movs	r0, r3
   1ba34:	f000 f968 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1ba38:	2300      	movs	r3, #0
}
   1ba3a:	0018      	movs	r0, r3
   1ba3c:	46bd      	mov	sp, r7
   1ba3e:	b004      	add	sp, #16
   1ba40:	bd80      	pop	{r7, pc}
   1ba42:	46c0      	nop			; (mov r8, r8)

0001ba44 <atPrivWrite>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atPrivWrite(ATCACommand ca_cmd, ATCAPacket *packet)
{
   1ba44:	b580      	push	{r7, lr}
   1ba46:	b082      	sub	sp, #8
   1ba48:	af00      	add	r7, sp, #0
   1ba4a:	6078      	str	r0, [r7, #4]
   1ba4c:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_PRIVWRITE;
   1ba4e:	683b      	ldr	r3, [r7, #0]
   1ba50:	2246      	movs	r2, #70	; 0x46
   1ba52:	709a      	strb	r2, [r3, #2]
    packet->txsize = PRIVWRITE_COUNT;
   1ba54:	683b      	ldr	r3, [r7, #0]
   1ba56:	224b      	movs	r2, #75	; 0x4b
   1ba58:	705a      	strb	r2, [r3, #1]
    atCalcCrc(packet);
   1ba5a:	683b      	ldr	r3, [r7, #0]
   1ba5c:	0018      	movs	r0, r3
   1ba5e:	f000 f953 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1ba62:	2300      	movs	r3, #0
}
   1ba64:	0018      	movs	r0, r3
   1ba66:	46bd      	mov	sp, r7
   1ba68:	b002      	add	sp, #8
   1ba6a:	bd80      	pop	{r7, pc}

0001ba6c <atRandom>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atRandom(ATCACommand ca_cmd, ATCAPacket *packet)
{
   1ba6c:	b580      	push	{r7, lr}
   1ba6e:	b082      	sub	sp, #8
   1ba70:	af00      	add	r7, sp, #0
   1ba72:	6078      	str	r0, [r7, #4]
   1ba74:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_RANDOM;
   1ba76:	683b      	ldr	r3, [r7, #0]
   1ba78:	221b      	movs	r2, #27
   1ba7a:	709a      	strb	r2, [r3, #2]
    packet->txsize = RANDOM_COUNT;
   1ba7c:	683b      	ldr	r3, [r7, #0]
   1ba7e:	2207      	movs	r2, #7
   1ba80:	705a      	strb	r2, [r3, #1]
    atCalcCrc(packet);
   1ba82:	683b      	ldr	r3, [r7, #0]
   1ba84:	0018      	movs	r0, r3
   1ba86:	f000 f93f 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1ba8a:	2300      	movs	r3, #0
}
   1ba8c:	0018      	movs	r0, r3
   1ba8e:	46bd      	mov	sp, r7
   1ba90:	b002      	add	sp, #8
   1ba92:	bd80      	pop	{r7, pc}

0001ba94 <atRead>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atRead(ATCACommand ca_cmd, ATCAPacket *packet)
{
   1ba94:	b580      	push	{r7, lr}
   1ba96:	b082      	sub	sp, #8
   1ba98:	af00      	add	r7, sp, #0
   1ba9a:	6078      	str	r0, [r7, #4]
   1ba9c:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_READ;
   1ba9e:	683b      	ldr	r3, [r7, #0]
   1baa0:	2202      	movs	r2, #2
   1baa2:	709a      	strb	r2, [r3, #2]
    packet->txsize = READ_COUNT;
   1baa4:	683b      	ldr	r3, [r7, #0]
   1baa6:	2207      	movs	r2, #7
   1baa8:	705a      	strb	r2, [r3, #1]
    atCalcCrc(packet);
   1baaa:	683b      	ldr	r3, [r7, #0]
   1baac:	0018      	movs	r0, r3
   1baae:	f000 f92b 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1bab2:	2300      	movs	r3, #0
}
   1bab4:	0018      	movs	r0, r3
   1bab6:	46bd      	mov	sp, r7
   1bab8:	b002      	add	sp, #8
   1baba:	bd80      	pop	{r7, pc}

0001babc <atSign>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atSign(ATCACommand ca_cmd, ATCAPacket *packet)
{
   1babc:	b580      	push	{r7, lr}
   1babe:	b082      	sub	sp, #8
   1bac0:	af00      	add	r7, sp, #0
   1bac2:	6078      	str	r0, [r7, #4]
   1bac4:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_SIGN;
   1bac6:	683b      	ldr	r3, [r7, #0]
   1bac8:	2241      	movs	r2, #65	; 0x41
   1baca:	709a      	strb	r2, [r3, #2]
    packet->txsize = SIGN_COUNT;
   1bacc:	683b      	ldr	r3, [r7, #0]
   1bace:	2207      	movs	r2, #7
   1bad0:	705a      	strb	r2, [r3, #1]
    atCalcCrc(packet);
   1bad2:	683b      	ldr	r3, [r7, #0]
   1bad4:	0018      	movs	r0, r3
   1bad6:	f000 f917 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1bada:	2300      	movs	r3, #0
}
   1badc:	0018      	movs	r0, r3
   1bade:	46bd      	mov	sp, r7
   1bae0:	b002      	add	sp, #8
   1bae2:	bd80      	pop	{r7, pc}

0001bae4 <atUpdateExtra>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atUpdateExtra(ATCACommand ca_cmd, ATCAPacket *packet)
{
   1bae4:	b580      	push	{r7, lr}
   1bae6:	b082      	sub	sp, #8
   1bae8:	af00      	add	r7, sp, #0
   1baea:	6078      	str	r0, [r7, #4]
   1baec:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_UPDATE_EXTRA;
   1baee:	683b      	ldr	r3, [r7, #0]
   1baf0:	2220      	movs	r2, #32
   1baf2:	709a      	strb	r2, [r3, #2]
    packet->txsize = UPDATE_COUNT;
   1baf4:	683b      	ldr	r3, [r7, #0]
   1baf6:	2207      	movs	r2, #7
   1baf8:	705a      	strb	r2, [r3, #1]
    atCalcCrc(packet);
   1bafa:	683b      	ldr	r3, [r7, #0]
   1bafc:	0018      	movs	r0, r3
   1bafe:	f000 f903 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1bb02:	2300      	movs	r3, #0
}
   1bb04:	0018      	movs	r0, r3
   1bb06:	46bd      	mov	sp, r7
   1bb08:	b002      	add	sp, #8
   1bb0a:	bd80      	pop	{r7, pc}

0001bb0c <atVerify>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atVerify(ATCACommand ca_cmd, ATCAPacket *packet)
{
   1bb0c:	b580      	push	{r7, lr}
   1bb0e:	b082      	sub	sp, #8
   1bb10:	af00      	add	r7, sp, #0
   1bb12:	6078      	str	r0, [r7, #4]
   1bb14:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_VERIFY;
   1bb16:	683b      	ldr	r3, [r7, #0]
   1bb18:	2245      	movs	r2, #69	; 0x45
   1bb1a:	709a      	strb	r2, [r3, #2]

    // variable packet size based on mode
    switch (packet->param1 & VERIFY_MODE_MASK)
   1bb1c:	683b      	ldr	r3, [r7, #0]
   1bb1e:	78db      	ldrb	r3, [r3, #3]
   1bb20:	001a      	movs	r2, r3
   1bb22:	2303      	movs	r3, #3
   1bb24:	4013      	ands	r3, r2
   1bb26:	2b07      	cmp	r3, #7
   1bb28:	d814      	bhi.n	1bb54 <atVerify+0x48>
   1bb2a:	009a      	lsls	r2, r3, #2
   1bb2c:	4b0f      	ldr	r3, [pc, #60]	; (1bb6c <atVerify+0x60>)
   1bb2e:	18d3      	adds	r3, r2, r3
   1bb30:	681b      	ldr	r3, [r3, #0]
   1bb32:	469f      	mov	pc, r3
    {
    case VERIFY_MODE_STORED:
        packet->txsize = VERIFY_256_STORED_COUNT;
   1bb34:	683b      	ldr	r3, [r7, #0]
   1bb36:	2247      	movs	r2, #71	; 0x47
   1bb38:	705a      	strb	r2, [r3, #1]
        break;
   1bb3a:	e00d      	b.n	1bb58 <atVerify+0x4c>

    case VERIFY_MODE_VALIDATE_EXTERNAL:
        packet->txsize = VERIFY_256_EXTERNAL_COUNT;
   1bb3c:	683b      	ldr	r3, [r7, #0]
   1bb3e:	2287      	movs	r2, #135	; 0x87
   1bb40:	705a      	strb	r2, [r3, #1]
        break;
   1bb42:	e009      	b.n	1bb58 <atVerify+0x4c>

    case VERIFY_MODE_EXTERNAL:
        packet->txsize = VERIFY_256_EXTERNAL_COUNT;
   1bb44:	683b      	ldr	r3, [r7, #0]
   1bb46:	2287      	movs	r2, #135	; 0x87
   1bb48:	705a      	strb	r2, [r3, #1]
        break;
   1bb4a:	e005      	b.n	1bb58 <atVerify+0x4c>

    case VERIFY_MODE_VALIDATE:
    case VERIFY_MODE_INVALIDATE:
        packet->txsize = VERIFY_256_VALIDATE_COUNT;
   1bb4c:	683b      	ldr	r3, [r7, #0]
   1bb4e:	225a      	movs	r2, #90	; 0x5a
   1bb50:	705a      	strb	r2, [r3, #1]
        break;
   1bb52:	e001      	b.n	1bb58 <atVerify+0x4c>

    default:
        return ATCA_BAD_PARAM;
   1bb54:	23e2      	movs	r3, #226	; 0xe2
   1bb56:	e004      	b.n	1bb62 <atVerify+0x56>
    }

    atCalcCrc(packet);
   1bb58:	683b      	ldr	r3, [r7, #0]
   1bb5a:	0018      	movs	r0, r3
   1bb5c:	f000 f8d4 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1bb60:	2300      	movs	r3, #0
}
   1bb62:	0018      	movs	r0, r3
   1bb64:	46bd      	mov	sp, r7
   1bb66:	b002      	add	sp, #8
   1bb68:	bd80      	pop	{r7, pc}
   1bb6a:	46c0      	nop			; (mov r8, r8)
   1bb6c:	0002e448 	.word	0x0002e448

0001bb70 <atWrite>:
 * \param[in] packet  pointer to the packet containing the command being built
 * \param[in] has_mac  Flag to indicate whether a mac is present or not
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atWrite(ATCACommand ca_cmd, ATCAPacket *packet, bool has_mac)
{
   1bb70:	b580      	push	{r7, lr}
   1bb72:	b084      	sub	sp, #16
   1bb74:	af00      	add	r7, sp, #0
   1bb76:	60f8      	str	r0, [r7, #12]
   1bb78:	60b9      	str	r1, [r7, #8]
   1bb7a:	1dfb      	adds	r3, r7, #7
   1bb7c:	701a      	strb	r2, [r3, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_WRITE;
   1bb7e:	68bb      	ldr	r3, [r7, #8]
   1bb80:	2212      	movs	r2, #18
   1bb82:	709a      	strb	r2, [r3, #2]

    packet->txsize = 7;
   1bb84:	68bb      	ldr	r3, [r7, #8]
   1bb86:	2207      	movs	r2, #7
   1bb88:	705a      	strb	r2, [r3, #1]
    if (packet->param1 & ATCA_ZONE_READWRITE_32)
   1bb8a:	68bb      	ldr	r3, [r7, #8]
   1bb8c:	78db      	ldrb	r3, [r3, #3]
   1bb8e:	b25b      	sxtb	r3, r3
   1bb90:	2b00      	cmp	r3, #0
   1bb92:	da06      	bge.n	1bba2 <atWrite+0x32>
    {
        packet->txsize += ATCA_BLOCK_SIZE;
   1bb94:	68bb      	ldr	r3, [r7, #8]
   1bb96:	785b      	ldrb	r3, [r3, #1]
   1bb98:	3320      	adds	r3, #32
   1bb9a:	b2da      	uxtb	r2, r3
   1bb9c:	68bb      	ldr	r3, [r7, #8]
   1bb9e:	705a      	strb	r2, [r3, #1]
   1bba0:	e005      	b.n	1bbae <atWrite+0x3e>
    }
    else
    {
        packet->txsize += ATCA_WORD_SIZE;
   1bba2:	68bb      	ldr	r3, [r7, #8]
   1bba4:	785b      	ldrb	r3, [r3, #1]
   1bba6:	3304      	adds	r3, #4
   1bba8:	b2da      	uxtb	r2, r3
   1bbaa:	68bb      	ldr	r3, [r7, #8]
   1bbac:	705a      	strb	r2, [r3, #1]
    }
    if (has_mac)
   1bbae:	1dfb      	adds	r3, r7, #7
   1bbb0:	781b      	ldrb	r3, [r3, #0]
   1bbb2:	2b00      	cmp	r3, #0
   1bbb4:	d005      	beq.n	1bbc2 <atWrite+0x52>
    {
        packet->txsize += WRITE_MAC_SIZE;
   1bbb6:	68bb      	ldr	r3, [r7, #8]
   1bbb8:	785b      	ldrb	r3, [r3, #1]
   1bbba:	3320      	adds	r3, #32
   1bbbc:	b2da      	uxtb	r2, r3
   1bbbe:	68bb      	ldr	r3, [r7, #8]
   1bbc0:	705a      	strb	r2, [r3, #1]
    }
    atCalcCrc(packet);
   1bbc2:	68bb      	ldr	r3, [r7, #8]
   1bbc4:	0018      	movs	r0, r3
   1bbc6:	f000 f89f 	bl	1bd08 <atCalcCrc>
    return ATCA_SUCCESS;
   1bbca:	2300      	movs	r3, #0
}
   1bbcc:	0018      	movs	r0, r3
   1bbce:	46bd      	mov	sp, r7
   1bbd0:	b004      	add	sp, #16
   1bbd2:	bd80      	pop	{r7, pc}

0001bbd4 <initATCACommand>:
 *                         should be associated with this command object.
 * \param[in] ca_cmd       Pre-allocated command structure to initialize.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCACommand(ATCADeviceType device_type, ATCACommand ca_cmd)
{
   1bbd4:	b580      	push	{r7, lr}
   1bbd6:	b082      	sub	sp, #8
   1bbd8:	af00      	add	r7, sp, #0
   1bbda:	0002      	movs	r2, r0
   1bbdc:	6039      	str	r1, [r7, #0]
   1bbde:	1dfb      	adds	r3, r7, #7
   1bbe0:	701a      	strb	r2, [r3, #0]
    if (ca_cmd == NULL)
   1bbe2:	683b      	ldr	r3, [r7, #0]
   1bbe4:	2b00      	cmp	r3, #0
   1bbe6:	d101      	bne.n	1bbec <initATCACommand+0x18>
    {
        return ATCA_BAD_PARAM;
   1bbe8:	23e2      	movs	r3, #226	; 0xe2
   1bbea:	e007      	b.n	1bbfc <initATCACommand+0x28>
    }

    ca_cmd->dt = device_type;
   1bbec:	683b      	ldr	r3, [r7, #0]
   1bbee:	1dfa      	adds	r2, r7, #7
   1bbf0:	7812      	ldrb	r2, [r2, #0]
   1bbf2:	701a      	strb	r2, [r3, #0]
    ca_cmd->clock_divider = 0;
   1bbf4:	683b      	ldr	r3, [r7, #0]
   1bbf6:	2200      	movs	r2, #0
   1bbf8:	705a      	strb	r2, [r3, #1]

    return ATCA_SUCCESS;
   1bbfa:	2300      	movs	r3, #0
}
   1bbfc:	0018      	movs	r0, r3
   1bbfe:	46bd      	mov	sp, r7
   1bc00:	b002      	add	sp, #8
   1bc02:	bd80      	pop	{r7, pc}

0001bc04 <deleteATCACommand>:
#ifndef ATCA_NO_HEAP
/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)
{
   1bc04:	b580      	push	{r7, lr}
   1bc06:	b082      	sub	sp, #8
   1bc08:	af00      	add	r7, sp, #0
   1bc0a:	6078      	str	r0, [r7, #4]
    if (ca_cmd == NULL)
   1bc0c:	687b      	ldr	r3, [r7, #4]
   1bc0e:	2b00      	cmp	r3, #0
   1bc10:	d008      	beq.n	1bc24 <deleteATCACommand+0x20>
    {
        return;
    }

    free(*ca_cmd);
   1bc12:	687b      	ldr	r3, [r7, #4]
   1bc14:	681b      	ldr	r3, [r3, #0]
   1bc16:	0018      	movs	r0, r3
   1bc18:	f009 fd3e 	bl	25698 <free>
    *ca_cmd = NULL;
   1bc1c:	687b      	ldr	r3, [r7, #4]
   1bc1e:	2200      	movs	r2, #0
   1bc20:	601a      	str	r2, [r3, #0]
   1bc22:	e000      	b.n	1bc26 <deleteATCACommand+0x22>
 */
void deleteATCACommand(ATCACommand *ca_cmd)
{
    if (ca_cmd == NULL)
    {
        return;
   1bc24:	46c0      	nop			; (mov r8, r8)
    }

    free(*ca_cmd);
    *ca_cmd = NULL;
}
   1bc26:	46bd      	mov	sp, r7
   1bc28:	b002      	add	sp, #8
   1bc2a:	bd80      	pop	{r7, pc}

0001bc2c <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
   1bc2c:	b580      	push	{r7, lr}
   1bc2e:	b088      	sub	sp, #32
   1bc30:	af00      	add	r7, sp, #0
   1bc32:	60f8      	str	r0, [r7, #12]
   1bc34:	60b9      	str	r1, [r7, #8]
   1bc36:	607a      	str	r2, [r7, #4]
    size_t counter;
    uint16_t crc_register = 0;
   1bc38:	231a      	movs	r3, #26
   1bc3a:	18fb      	adds	r3, r7, r3
   1bc3c:	2200      	movs	r2, #0
   1bc3e:	801a      	strh	r2, [r3, #0]
    uint16_t polynom = 0x8005;
   1bc40:	2316      	movs	r3, #22
   1bc42:	18fb      	adds	r3, r7, r3
   1bc44:	4a2f      	ldr	r2, [pc, #188]	; (1bd04 <atCRC+0xd8>)
   1bc46:	801a      	strh	r2, [r3, #0]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
   1bc48:	2300      	movs	r3, #0
   1bc4a:	61fb      	str	r3, [r7, #28]
   1bc4c:	e043      	b.n	1bcd6 <atCRC+0xaa>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
   1bc4e:	2319      	movs	r3, #25
   1bc50:	18fb      	adds	r3, r7, r3
   1bc52:	2201      	movs	r2, #1
   1bc54:	701a      	strb	r2, [r3, #0]
   1bc56:	e036      	b.n	1bcc6 <atCRC+0x9a>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
   1bc58:	68ba      	ldr	r2, [r7, #8]
   1bc5a:	69fb      	ldr	r3, [r7, #28]
   1bc5c:	18d3      	adds	r3, r2, r3
   1bc5e:	781b      	ldrb	r3, [r3, #0]
   1bc60:	2219      	movs	r2, #25
   1bc62:	18ba      	adds	r2, r7, r2
   1bc64:	7812      	ldrb	r2, [r2, #0]
   1bc66:	4013      	ands	r3, r2
   1bc68:	b2db      	uxtb	r3, r3
   1bc6a:	1e5a      	subs	r2, r3, #1
   1bc6c:	4193      	sbcs	r3, r2
   1bc6e:	b2da      	uxtb	r2, r3
   1bc70:	2315      	movs	r3, #21
   1bc72:	18fb      	adds	r3, r7, r3
   1bc74:	701a      	strb	r2, [r3, #0]
            crc_bit = crc_register >> 15;
   1bc76:	231a      	movs	r3, #26
   1bc78:	18fb      	adds	r3, r7, r3
   1bc7a:	881b      	ldrh	r3, [r3, #0]
   1bc7c:	0bdb      	lsrs	r3, r3, #15
   1bc7e:	b29a      	uxth	r2, r3
   1bc80:	2314      	movs	r3, #20
   1bc82:	18fb      	adds	r3, r7, r3
   1bc84:	701a      	strb	r2, [r3, #0]
            crc_register <<= 1;
   1bc86:	231a      	movs	r3, #26
   1bc88:	18fa      	adds	r2, r7, r3
   1bc8a:	231a      	movs	r3, #26
   1bc8c:	18fb      	adds	r3, r7, r3
   1bc8e:	881b      	ldrh	r3, [r3, #0]
   1bc90:	18db      	adds	r3, r3, r3
   1bc92:	8013      	strh	r3, [r2, #0]
            if (data_bit != crc_bit)
   1bc94:	2315      	movs	r3, #21
   1bc96:	18fa      	adds	r2, r7, r3
   1bc98:	2314      	movs	r3, #20
   1bc9a:	18fb      	adds	r3, r7, r3
   1bc9c:	7812      	ldrb	r2, [r2, #0]
   1bc9e:	781b      	ldrb	r3, [r3, #0]
   1bca0:	429a      	cmp	r2, r3
   1bca2:	d009      	beq.n	1bcb8 <atCRC+0x8c>
            {
                crc_register ^= polynom;
   1bca4:	231a      	movs	r3, #26
   1bca6:	18fb      	adds	r3, r7, r3
   1bca8:	221a      	movs	r2, #26
   1bcaa:	18b9      	adds	r1, r7, r2
   1bcac:	2216      	movs	r2, #22
   1bcae:	18ba      	adds	r2, r7, r2
   1bcb0:	8809      	ldrh	r1, [r1, #0]
   1bcb2:	8812      	ldrh	r2, [r2, #0]
   1bcb4:	404a      	eors	r2, r1
   1bcb6:	801a      	strh	r2, [r3, #0]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
   1bcb8:	2319      	movs	r3, #25
   1bcba:	18fa      	adds	r2, r7, r3
   1bcbc:	2319      	movs	r3, #25
   1bcbe:	18fb      	adds	r3, r7, r3
   1bcc0:	781b      	ldrb	r3, [r3, #0]
   1bcc2:	18db      	adds	r3, r3, r3
   1bcc4:	7013      	strb	r3, [r2, #0]
   1bcc6:	2319      	movs	r3, #25
   1bcc8:	18fb      	adds	r3, r7, r3
   1bcca:	781b      	ldrb	r3, [r3, #0]
   1bccc:	2b00      	cmp	r3, #0
   1bcce:	d1c3      	bne.n	1bc58 <atCRC+0x2c>
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
   1bcd0:	69fb      	ldr	r3, [r7, #28]
   1bcd2:	3301      	adds	r3, #1
   1bcd4:	61fb      	str	r3, [r7, #28]
   1bcd6:	69fa      	ldr	r2, [r7, #28]
   1bcd8:	68fb      	ldr	r3, [r7, #12]
   1bcda:	429a      	cmp	r2, r3
   1bcdc:	d3b7      	bcc.n	1bc4e <atCRC+0x22>
            {
                crc_register ^= polynom;
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
   1bcde:	231a      	movs	r3, #26
   1bce0:	18fb      	adds	r3, r7, r3
   1bce2:	881b      	ldrh	r3, [r3, #0]
   1bce4:	b2da      	uxtb	r2, r3
   1bce6:	687b      	ldr	r3, [r7, #4]
   1bce8:	701a      	strb	r2, [r3, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
   1bcea:	687b      	ldr	r3, [r7, #4]
   1bcec:	3301      	adds	r3, #1
   1bcee:	221a      	movs	r2, #26
   1bcf0:	18ba      	adds	r2, r7, r2
   1bcf2:	8812      	ldrh	r2, [r2, #0]
   1bcf4:	0a12      	lsrs	r2, r2, #8
   1bcf6:	b292      	uxth	r2, r2
   1bcf8:	b2d2      	uxtb	r2, r2
   1bcfa:	701a      	strb	r2, [r3, #0]
}
   1bcfc:	46c0      	nop			; (mov r8, r8)
   1bcfe:	46bd      	mov	sp, r7
   1bd00:	b008      	add	sp, #32
   1bd02:	bd80      	pop	{r7, pc}
   1bd04:	ffff8005 	.word	0xffff8005

0001bd08 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
   1bd08:	b580      	push	{r7, lr}
   1bd0a:	b084      	sub	sp, #16
   1bd0c:	af00      	add	r7, sp, #0
   1bd0e:	6078      	str	r0, [r7, #4]
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
   1bd10:	687b      	ldr	r3, [r7, #4]
   1bd12:	785a      	ldrb	r2, [r3, #1]
   1bd14:	230f      	movs	r3, #15
   1bd16:	18fb      	adds	r3, r7, r3
   1bd18:	3a02      	subs	r2, #2
   1bd1a:	701a      	strb	r2, [r3, #0]
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
   1bd1c:	687b      	ldr	r3, [r7, #4]
   1bd1e:	1c5a      	adds	r2, r3, #1
   1bd20:	230f      	movs	r3, #15
   1bd22:	18fb      	adds	r3, r7, r3
   1bd24:	781b      	ldrb	r3, [r3, #0]
   1bd26:	18d3      	adds	r3, r2, r3
   1bd28:	60bb      	str	r3, [r7, #8]

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
   1bd2a:	230f      	movs	r3, #15
   1bd2c:	18fb      	adds	r3, r7, r3
   1bd2e:	7818      	ldrb	r0, [r3, #0]
   1bd30:	687b      	ldr	r3, [r7, #4]
   1bd32:	3301      	adds	r3, #1
   1bd34:	68ba      	ldr	r2, [r7, #8]
   1bd36:	0019      	movs	r1, r3
   1bd38:	f7ff ff78 	bl	1bc2c <atCRC>
}
   1bd3c:	46c0      	nop			; (mov r8, r8)
   1bd3e:	46bd      	mov	sp, r7
   1bd40:	b004      	add	sp, #16
   1bd42:	bd80      	pop	{r7, pc}

0001bd44 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
   1bd44:	b580      	push	{r7, lr}
   1bd46:	b084      	sub	sp, #16
   1bd48:	af00      	add	r7, sp, #0
   1bd4a:	6078      	str	r0, [r7, #4]
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
   1bd4c:	230f      	movs	r3, #15
   1bd4e:	18fb      	adds	r3, r7, r3
   1bd50:	687a      	ldr	r2, [r7, #4]
   1bd52:	7812      	ldrb	r2, [r2, #0]
   1bd54:	701a      	strb	r2, [r3, #0]

    count -= ATCA_CRC_SIZE;
   1bd56:	230f      	movs	r3, #15
   1bd58:	18fb      	adds	r3, r7, r3
   1bd5a:	220f      	movs	r2, #15
   1bd5c:	18ba      	adds	r2, r7, r2
   1bd5e:	7812      	ldrb	r2, [r2, #0]
   1bd60:	3a02      	subs	r2, #2
   1bd62:	701a      	strb	r2, [r3, #0]
    atCRC(count, response, crc);
   1bd64:	230f      	movs	r3, #15
   1bd66:	18fb      	adds	r3, r7, r3
   1bd68:	781b      	ldrb	r3, [r3, #0]
   1bd6a:	220c      	movs	r2, #12
   1bd6c:	18ba      	adds	r2, r7, r2
   1bd6e:	6879      	ldr	r1, [r7, #4]
   1bd70:	0018      	movs	r0, r3
   1bd72:	f7ff ff5b 	bl	1bc2c <atCRC>

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
   1bd76:	230c      	movs	r3, #12
   1bd78:	18fb      	adds	r3, r7, r3
   1bd7a:	781a      	ldrb	r2, [r3, #0]
   1bd7c:	230f      	movs	r3, #15
   1bd7e:	18fb      	adds	r3, r7, r3
   1bd80:	781b      	ldrb	r3, [r3, #0]
   1bd82:	6879      	ldr	r1, [r7, #4]
   1bd84:	18cb      	adds	r3, r1, r3
   1bd86:	781b      	ldrb	r3, [r3, #0]
   1bd88:	429a      	cmp	r2, r3
   1bd8a:	d10d      	bne.n	1bda8 <atCheckCrc+0x64>
   1bd8c:	230c      	movs	r3, #12
   1bd8e:	18fb      	adds	r3, r7, r3
   1bd90:	785a      	ldrb	r2, [r3, #1]
   1bd92:	230f      	movs	r3, #15
   1bd94:	18fb      	adds	r3, r7, r3
   1bd96:	781b      	ldrb	r3, [r3, #0]
   1bd98:	3301      	adds	r3, #1
   1bd9a:	6879      	ldr	r1, [r7, #4]
   1bd9c:	18cb      	adds	r3, r1, r3
   1bd9e:	781b      	ldrb	r3, [r3, #0]
   1bda0:	429a      	cmp	r2, r3
   1bda2:	d101      	bne.n	1bda8 <atCheckCrc+0x64>
   1bda4:	2300      	movs	r3, #0
   1bda6:	e000      	b.n	1bdaa <atCheckCrc+0x66>
   1bda8:	23e5      	movs	r3, #229	; 0xe5
}
   1bdaa:	0018      	movs	r0, r3
   1bdac:	46bd      	mov	sp, r7
   1bdae:	b004      	add	sp, #16
   1bdb0:	bd80      	pop	{r7, pc}
   1bdb2:	46c0      	nop			; (mov r8, r8)

0001bdb4 <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
   1bdb4:	b580      	push	{r7, lr}
   1bdb6:	b082      	sub	sp, #8
   1bdb8:	af00      	add	r7, sp, #0
   1bdba:	6078      	str	r0, [r7, #4]
    if (data[0] == 0x04)        // error packets are always 4 bytes long
   1bdbc:	687b      	ldr	r3, [r7, #4]
   1bdbe:	781b      	ldrb	r3, [r3, #0]
   1bdc0:	2b04      	cmp	r3, #4
   1bdc2:	d12f      	bne.n	1be24 <isATCAError+0x70>
    {
        switch (data[1])
   1bdc4:	687b      	ldr	r3, [r7, #4]
   1bdc6:	3301      	adds	r3, #1
   1bdc8:	781b      	ldrb	r3, [r3, #0]
   1bdca:	2b07      	cmp	r3, #7
   1bdcc:	d01e      	beq.n	1be0c <isATCAError+0x58>
   1bdce:	dc0a      	bgt.n	1bde6 <isATCAError+0x32>
   1bdd0:	2b01      	cmp	r3, #1
   1bdd2:	d015      	beq.n	1be00 <isATCAError+0x4c>
   1bdd4:	dc02      	bgt.n	1bddc <isATCAError+0x28>
   1bdd6:	2b00      	cmp	r3, #0
   1bdd8:	d010      	beq.n	1bdfc <isATCAError+0x48>
   1bdda:	e021      	b.n	1be20 <isATCAError+0x6c>
   1bddc:	2b03      	cmp	r3, #3
   1bdde:	d011      	beq.n	1be04 <isATCAError+0x50>
   1bde0:	2b05      	cmp	r3, #5
   1bde2:	d011      	beq.n	1be08 <isATCAError+0x54>
   1bde4:	e01c      	b.n	1be20 <isATCAError+0x6c>
   1bde6:	2b0f      	cmp	r3, #15
   1bde8:	d014      	beq.n	1be14 <isATCAError+0x60>
   1bdea:	dc02      	bgt.n	1bdf2 <isATCAError+0x3e>
   1bdec:	2b08      	cmp	r3, #8
   1bdee:	d00f      	beq.n	1be10 <isATCAError+0x5c>
   1bdf0:	e016      	b.n	1be20 <isATCAError+0x6c>
   1bdf2:	2b11      	cmp	r3, #17
   1bdf4:	d010      	beq.n	1be18 <isATCAError+0x64>
   1bdf6:	2bff      	cmp	r3, #255	; 0xff
   1bdf8:	d010      	beq.n	1be1c <isATCAError+0x68>
   1bdfa:	e011      	b.n	1be20 <isATCAError+0x6c>
        {
        case 0x00: //No Error
            return ATCA_SUCCESS;
   1bdfc:	2300      	movs	r3, #0
   1bdfe:	e012      	b.n	1be26 <isATCAError+0x72>
        case 0x01: // checkmac or verify failed
            return ATCA_CHECKMAC_VERIFY_FAILED;
   1be00:	23d1      	movs	r3, #209	; 0xd1
   1be02:	e010      	b.n	1be26 <isATCAError+0x72>
            break;
        case 0x03: // command received byte length, opcode or parameter was illegal
            return ATCA_PARSE_ERROR;
   1be04:	23d2      	movs	r3, #210	; 0xd2
   1be06:	e00e      	b.n	1be26 <isATCAError+0x72>
            break;
        case 0x05: // computation error during ECC processing causing invalid results
            return ATCA_STATUS_ECC;
   1be08:	23d6      	movs	r3, #214	; 0xd6
   1be0a:	e00c      	b.n	1be26 <isATCAError+0x72>
            break;
        case 0x07: // chip is in self test failure mode
            return ATCA_STATUS_SELFTEST_ERROR;
   1be0c:	23d7      	movs	r3, #215	; 0xd7
   1be0e:	e00a      	b.n	1be26 <isATCAError+0x72>
            break;
        case 0x08: //random number generator health test error
            return ATCA_HEALTH_TEST_ERROR;
   1be10:	23fa      	movs	r3, #250	; 0xfa
   1be12:	e008      	b.n	1be26 <isATCAError+0x72>
        case 0x0f: // chip can't execute the command
            return ATCA_EXECUTION_ERROR;
   1be14:	23f4      	movs	r3, #244	; 0xf4
   1be16:	e006      	b.n	1be26 <isATCAError+0x72>
            break;
        case 0x11: // chip was successfully woken up
            return ATCA_WAKE_SUCCESS;
   1be18:	23f3      	movs	r3, #243	; 0xf3
   1be1a:	e004      	b.n	1be26 <isATCAError+0x72>
            break;
        case 0xff: // bad crc found (command not properly received by device) or other comm error
            return ATCA_STATUS_CRC;
   1be1c:	23d4      	movs	r3, #212	; 0xd4
   1be1e:	e002      	b.n	1be26 <isATCAError+0x72>
            break;
        default:
            return ATCA_GEN_FAIL;
   1be20:	23e1      	movs	r3, #225	; 0xe1
   1be22:	e000      	b.n	1be26 <isATCAError+0x72>
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
   1be24:	2300      	movs	r3, #0
    }
}
   1be26:	0018      	movs	r0, r3
   1be28:	46bd      	mov	sp, r7
   1be2a:	b002      	add	sp, #8
   1be2c:	bd80      	pop	{r7, pc}
   1be2e:	46c0      	nop			; (mov r8, r8)

0001be30 <newATCADevice>:
/** \brief constructor for a Microchip CryptoAuth device
 * \param[in] cfg  Interface configuration object
 * \return Reference to a new ATCADevice on success. NULL on failure.
 */
ATCADevice newATCADevice(ATCAIfaceCfg *cfg)
{
   1be30:	b590      	push	{r4, r7, lr}
   1be32:	b085      	sub	sp, #20
   1be34:	af00      	add	r7, sp, #0
   1be36:	6078      	str	r0, [r7, #4]
    ATCADevice ca_dev = NULL;
   1be38:	2300      	movs	r3, #0
   1be3a:	60fb      	str	r3, [r7, #12]
    ATCA_STATUS status;

    if (cfg == NULL)
   1be3c:	687b      	ldr	r3, [r7, #4]
   1be3e:	2b00      	cmp	r3, #0
   1be40:	d101      	bne.n	1be46 <newATCADevice+0x16>
    {
        return NULL;
   1be42:	2300      	movs	r3, #0
   1be44:	e056      	b.n	1bef4 <newATCADevice+0xc4>
    }

    ca_dev = (ATCADevice)malloc(sizeof(*ca_dev));
   1be46:	2008      	movs	r0, #8
   1be48:	f009 fc1c 	bl	25684 <malloc>
   1be4c:	0003      	movs	r3, r0
   1be4e:	60fb      	str	r3, [r7, #12]
    if (ca_dev == NULL)
   1be50:	68fb      	ldr	r3, [r7, #12]
   1be52:	2b00      	cmp	r3, #0
   1be54:	d101      	bne.n	1be5a <newATCADevice+0x2a>
    {
        return NULL;
   1be56:	2300      	movs	r3, #0
   1be58:	e04c      	b.n	1bef4 <newATCADevice+0xc4>
    }

    ca_dev->mCommands = (ATCACommand)malloc(sizeof(*(ca_dev->mCommands)));
   1be5a:	2004      	movs	r0, #4
   1be5c:	f009 fc12 	bl	25684 <malloc>
   1be60:	0003      	movs	r3, r0
   1be62:	001a      	movs	r2, r3
   1be64:	68fb      	ldr	r3, [r7, #12]
   1be66:	601a      	str	r2, [r3, #0]
    if (ca_dev->mCommands == NULL)
   1be68:	68fb      	ldr	r3, [r7, #12]
   1be6a:	681b      	ldr	r3, [r3, #0]
   1be6c:	2b00      	cmp	r3, #0
   1be6e:	d107      	bne.n	1be80 <newATCADevice+0x50>
    {
        free(ca_dev);
   1be70:	68fb      	ldr	r3, [r7, #12]
   1be72:	0018      	movs	r0, r3
   1be74:	f009 fc10 	bl	25698 <free>
        ca_dev = NULL;
   1be78:	2300      	movs	r3, #0
   1be7a:	60fb      	str	r3, [r7, #12]
        return NULL;
   1be7c:	2300      	movs	r3, #0
   1be7e:	e039      	b.n	1bef4 <newATCADevice+0xc4>
    }

    ca_dev->mIface = (ATCAIface)malloc(sizeof(*(ca_dev->mIface)));
   1be80:	2028      	movs	r0, #40	; 0x28
   1be82:	f009 fbff 	bl	25684 <malloc>
   1be86:	0003      	movs	r3, r0
   1be88:	001a      	movs	r2, r3
   1be8a:	68fb      	ldr	r3, [r7, #12]
   1be8c:	605a      	str	r2, [r3, #4]
    if (ca_dev->mIface == NULL)
   1be8e:	68fb      	ldr	r3, [r7, #12]
   1be90:	685b      	ldr	r3, [r3, #4]
   1be92:	2b00      	cmp	r3, #0
   1be94:	d10c      	bne.n	1beb0 <newATCADevice+0x80>
    {
        free(ca_dev->mCommands);
   1be96:	68fb      	ldr	r3, [r7, #12]
   1be98:	681b      	ldr	r3, [r3, #0]
   1be9a:	0018      	movs	r0, r3
   1be9c:	f009 fbfc 	bl	25698 <free>
        free(ca_dev);
   1bea0:	68fb      	ldr	r3, [r7, #12]
   1bea2:	0018      	movs	r0, r3
   1bea4:	f009 fbf8 	bl	25698 <free>
        ca_dev = NULL;
   1bea8:	2300      	movs	r3, #0
   1beaa:	60fb      	str	r3, [r7, #12]
        return NULL;
   1beac:	2300      	movs	r3, #0
   1beae:	e021      	b.n	1bef4 <newATCADevice+0xc4>
    }

    status = initATCADevice(cfg, ca_dev);
   1beb0:	230b      	movs	r3, #11
   1beb2:	18fc      	adds	r4, r7, r3
   1beb4:	68fa      	ldr	r2, [r7, #12]
   1beb6:	687b      	ldr	r3, [r7, #4]
   1beb8:	0011      	movs	r1, r2
   1beba:	0018      	movs	r0, r3
   1bebc:	f000 f84c 	bl	1bf58 <initATCADevice>
   1bec0:	0003      	movs	r3, r0
   1bec2:	7023      	strb	r3, [r4, #0]
    if (status != ATCA_SUCCESS)
   1bec4:	230b      	movs	r3, #11
   1bec6:	18fb      	adds	r3, r7, r3
   1bec8:	781b      	ldrb	r3, [r3, #0]
   1beca:	2b00      	cmp	r3, #0
   1becc:	d011      	beq.n	1bef2 <newATCADevice+0xc2>
    {
        free(ca_dev->mIface);
   1bece:	68fb      	ldr	r3, [r7, #12]
   1bed0:	685b      	ldr	r3, [r3, #4]
   1bed2:	0018      	movs	r0, r3
   1bed4:	f009 fbe0 	bl	25698 <free>
        free(ca_dev->mCommands);
   1bed8:	68fb      	ldr	r3, [r7, #12]
   1beda:	681b      	ldr	r3, [r3, #0]
   1bedc:	0018      	movs	r0, r3
   1bede:	f009 fbdb 	bl	25698 <free>
        free(ca_dev);
   1bee2:	68fb      	ldr	r3, [r7, #12]
   1bee4:	0018      	movs	r0, r3
   1bee6:	f009 fbd7 	bl	25698 <free>
        ca_dev = NULL;
   1beea:	2300      	movs	r3, #0
   1beec:	60fb      	str	r3, [r7, #12]
        return NULL;
   1beee:	2300      	movs	r3, #0
   1bef0:	e000      	b.n	1bef4 <newATCADevice+0xc4>
    }

    return ca_dev;
   1bef2:	68fb      	ldr	r3, [r7, #12]
}
   1bef4:	0018      	movs	r0, r3
   1bef6:	46bd      	mov	sp, r7
   1bef8:	b005      	add	sp, #20
   1befa:	bd90      	pop	{r4, r7, pc}

0001befc <deleteATCADevice>:

/** \brief destructor for a device NULLs reference after object is freed
 * \param[in] ca_dev  pointer to a reference to a device
 */
void deleteATCADevice(ATCADevice *ca_dev)
{
   1befc:	b580      	push	{r7, lr}
   1befe:	b082      	sub	sp, #8
   1bf00:	af00      	add	r7, sp, #0
   1bf02:	6078      	str	r0, [r7, #4]
    if (ca_dev == NULL)
   1bf04:	687b      	ldr	r3, [r7, #4]
   1bf06:	2b00      	cmp	r3, #0
   1bf08:	d021      	beq.n	1bf4e <deleteATCADevice+0x52>
    {
        return;
    }

    releaseATCADevice(*ca_dev);
   1bf0a:	687b      	ldr	r3, [r7, #4]
   1bf0c:	681b      	ldr	r3, [r3, #0]
   1bf0e:	0018      	movs	r0, r3
   1bf10:	f000 f866 	bl	1bfe0 <releaseATCADevice>
    deleteATCACommand(&(*ca_dev)->mCommands);
   1bf14:	687b      	ldr	r3, [r7, #4]
   1bf16:	681b      	ldr	r3, [r3, #0]
   1bf18:	0018      	movs	r0, r3
   1bf1a:	f7ff fe73 	bl	1bc04 <deleteATCACommand>
    // Free iface manually as we don't want to call releaseATCAIface twice
    if ((*ca_dev)->mIface)
   1bf1e:	687b      	ldr	r3, [r7, #4]
   1bf20:	681b      	ldr	r3, [r3, #0]
   1bf22:	685b      	ldr	r3, [r3, #4]
   1bf24:	2b00      	cmp	r3, #0
   1bf26:	d009      	beq.n	1bf3c <deleteATCADevice+0x40>
    {
        free((*ca_dev)->mIface);
   1bf28:	687b      	ldr	r3, [r7, #4]
   1bf2a:	681b      	ldr	r3, [r3, #0]
   1bf2c:	685b      	ldr	r3, [r3, #4]
   1bf2e:	0018      	movs	r0, r3
   1bf30:	f009 fbb2 	bl	25698 <free>
        (*ca_dev)->mIface = NULL;
   1bf34:	687b      	ldr	r3, [r7, #4]
   1bf36:	681b      	ldr	r3, [r3, #0]
   1bf38:	2200      	movs	r2, #0
   1bf3a:	605a      	str	r2, [r3, #4]
    }

    free(*ca_dev);
   1bf3c:	687b      	ldr	r3, [r7, #4]
   1bf3e:	681b      	ldr	r3, [r3, #0]
   1bf40:	0018      	movs	r0, r3
   1bf42:	f009 fba9 	bl	25698 <free>
    *ca_dev = NULL;
   1bf46:	687b      	ldr	r3, [r7, #4]
   1bf48:	2200      	movs	r2, #0
   1bf4a:	601a      	str	r2, [r3, #0]
   1bf4c:	e000      	b.n	1bf50 <deleteATCADevice+0x54>
 */
void deleteATCADevice(ATCADevice *ca_dev)
{
    if (ca_dev == NULL)
    {
        return;
   1bf4e:	46c0      	nop			; (mov r8, r8)
        (*ca_dev)->mIface = NULL;
    }

    free(*ca_dev);
    *ca_dev = NULL;
}
   1bf50:	46bd      	mov	sp, r7
   1bf52:	b002      	add	sp, #8
   1bf54:	bd80      	pop	{r7, pc}
   1bf56:	46c0      	nop			; (mov r8, r8)

0001bf58 <initATCADevice>:
 *                       mCommands and mIface members should point to existing
 *                       structures to be initialized.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
   1bf58:	b590      	push	{r4, r7, lr}
   1bf5a:	b085      	sub	sp, #20
   1bf5c:	af00      	add	r7, sp, #0
   1bf5e:	6078      	str	r0, [r7, #4]
   1bf60:	6039      	str	r1, [r7, #0]
    ATCA_STATUS status;

    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
   1bf62:	687b      	ldr	r3, [r7, #4]
   1bf64:	2b00      	cmp	r3, #0
   1bf66:	d00a      	beq.n	1bf7e <initATCADevice+0x26>
   1bf68:	683b      	ldr	r3, [r7, #0]
   1bf6a:	2b00      	cmp	r3, #0
   1bf6c:	d007      	beq.n	1bf7e <initATCADevice+0x26>
   1bf6e:	683b      	ldr	r3, [r7, #0]
   1bf70:	681b      	ldr	r3, [r3, #0]
   1bf72:	2b00      	cmp	r3, #0
   1bf74:	d003      	beq.n	1bf7e <initATCADevice+0x26>
   1bf76:	683b      	ldr	r3, [r7, #0]
   1bf78:	685b      	ldr	r3, [r3, #4]
   1bf7a:	2b00      	cmp	r3, #0
   1bf7c:	d101      	bne.n	1bf82 <initATCADevice+0x2a>
    {
        return ATCA_BAD_PARAM;
   1bf7e:	23e2      	movs	r3, #226	; 0xe2
   1bf80:	e029      	b.n	1bfd6 <initATCADevice+0x7e>
    }

    status = initATCACommand(cfg->devtype, ca_dev->mCommands);
   1bf82:	687b      	ldr	r3, [r7, #4]
   1bf84:	785a      	ldrb	r2, [r3, #1]
   1bf86:	683b      	ldr	r3, [r7, #0]
   1bf88:	681b      	ldr	r3, [r3, #0]
   1bf8a:	210f      	movs	r1, #15
   1bf8c:	187c      	adds	r4, r7, r1
   1bf8e:	0019      	movs	r1, r3
   1bf90:	0010      	movs	r0, r2
   1bf92:	f7ff fe1f 	bl	1bbd4 <initATCACommand>
   1bf96:	0003      	movs	r3, r0
   1bf98:	7023      	strb	r3, [r4, #0]
    if (status != ATCA_SUCCESS)
   1bf9a:	230f      	movs	r3, #15
   1bf9c:	18fb      	adds	r3, r7, r3
   1bf9e:	781b      	ldrb	r3, [r3, #0]
   1bfa0:	2b00      	cmp	r3, #0
   1bfa2:	d003      	beq.n	1bfac <initATCADevice+0x54>
    {
        return status;
   1bfa4:	230f      	movs	r3, #15
   1bfa6:	18fb      	adds	r3, r7, r3
   1bfa8:	781b      	ldrb	r3, [r3, #0]
   1bfaa:	e014      	b.n	1bfd6 <initATCADevice+0x7e>
    }

    status = initATCAIface(cfg, ca_dev->mIface);
   1bfac:	683b      	ldr	r3, [r7, #0]
   1bfae:	685a      	ldr	r2, [r3, #4]
   1bfb0:	230f      	movs	r3, #15
   1bfb2:	18fc      	adds	r4, r7, r3
   1bfb4:	687b      	ldr	r3, [r7, #4]
   1bfb6:	0011      	movs	r1, r2
   1bfb8:	0018      	movs	r0, r3
   1bfba:	f000 f8c1 	bl	1c140 <initATCAIface>
   1bfbe:	0003      	movs	r3, r0
   1bfc0:	7023      	strb	r3, [r4, #0]
    if (status != ATCA_SUCCESS)
   1bfc2:	230f      	movs	r3, #15
   1bfc4:	18fb      	adds	r3, r7, r3
   1bfc6:	781b      	ldrb	r3, [r3, #0]
   1bfc8:	2b00      	cmp	r3, #0
   1bfca:	d003      	beq.n	1bfd4 <initATCADevice+0x7c>
    {
        return status;
   1bfcc:	230f      	movs	r3, #15
   1bfce:	18fb      	adds	r3, r7, r3
   1bfd0:	781b      	ldrb	r3, [r3, #0]
   1bfd2:	e000      	b.n	1bfd6 <initATCADevice+0x7e>
    }

    return ATCA_SUCCESS;
   1bfd4:	2300      	movs	r3, #0
}
   1bfd6:	0018      	movs	r0, r3
   1bfd8:	46bd      	mov	sp, r7
   1bfda:	b005      	add	sp, #20
   1bfdc:	bd90      	pop	{r4, r7, pc}
   1bfde:	46c0      	nop			; (mov r8, r8)

0001bfe0 <releaseATCADevice>:
/** \brief Release any resources associated with the device.
 *  \param[in] ca_dev  Device to release
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCADevice(ATCADevice ca_dev)
{
   1bfe0:	b580      	push	{r7, lr}
   1bfe2:	b082      	sub	sp, #8
   1bfe4:	af00      	add	r7, sp, #0
   1bfe6:	6078      	str	r0, [r7, #4]
    if (ca_dev == NULL)
   1bfe8:	687b      	ldr	r3, [r7, #4]
   1bfea:	2b00      	cmp	r3, #0
   1bfec:	d101      	bne.n	1bff2 <releaseATCADevice+0x12>
    {
        return ATCA_BAD_PARAM;
   1bfee:	23e2      	movs	r3, #226	; 0xe2
   1bff0:	e005      	b.n	1bffe <releaseATCADevice+0x1e>
    }

    return releaseATCAIface(ca_dev->mIface);
   1bff2:	687b      	ldr	r3, [r7, #4]
   1bff4:	685b      	ldr	r3, [r3, #4]
   1bff6:	0018      	movs	r0, r3
   1bff8:	f000 f986 	bl	1c308 <releaseATCAIface>
   1bffc:	0003      	movs	r3, r0
}
   1bffe:	0018      	movs	r0, r3
   1c000:	46bd      	mov	sp, r7
   1c002:	b002      	add	sp, #8
   1c004:	bd80      	pop	{r7, pc}
   1c006:	46c0      	nop			; (mov r8, r8)

0001c008 <atca_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atca_execute_command(ATCAPacket* packet, ATCADevice device)
{
   1c008:	b590      	push	{r4, r7, lr}
   1c00a:	b087      	sub	sp, #28
   1c00c:	af00      	add	r7, sp, #0
   1c00e:	6078      	str	r0, [r7, #4]
   1c010:	6039      	str	r1, [r7, #0]
            return status;
        }
        execution_or_wait_time = device->mCommands->execution_time_msec;
        max_delay_count = 0;
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
   1c012:	2301      	movs	r3, #1
   1c014:	60fb      	str	r3, [r7, #12]
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
   1c016:	4b49      	ldr	r3, [pc, #292]	; (1c13c <atca_execute_command+0x134>)
   1c018:	613b      	str	r3, [r7, #16]
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
   1c01a:	683b      	ldr	r3, [r7, #0]
   1c01c:	685b      	ldr	r3, [r3, #4]
   1c01e:	2217      	movs	r2, #23
   1c020:	18bc      	adds	r4, r7, r2
   1c022:	0018      	movs	r0, r3
   1c024:	f000 f910 	bl	1c248 <atwake>
   1c028:	0003      	movs	r3, r0
   1c02a:	7023      	strb	r3, [r4, #0]
   1c02c:	2317      	movs	r3, #23
   1c02e:	18fb      	adds	r3, r7, r3
   1c030:	781b      	ldrb	r3, [r3, #0]
   1c032:	2b00      	cmp	r3, #0
   1c034:	d000      	beq.n	1c038 <atca_execute_command+0x30>
   1c036:	e06d      	b.n	1c114 <atca_execute_command+0x10c>
        {
            break;
        }

        // send the command
        if ((status = atsend(device->mIface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
   1c038:	683b      	ldr	r3, [r7, #0]
   1c03a:	6858      	ldr	r0, [r3, #4]
   1c03c:	687b      	ldr	r3, [r7, #4]
   1c03e:	785b      	ldrb	r3, [r3, #1]
   1c040:	001a      	movs	r2, r3
   1c042:	2317      	movs	r3, #23
   1c044:	18fc      	adds	r4, r7, r3
   1c046:	687b      	ldr	r3, [r7, #4]
   1c048:	0019      	movs	r1, r3
   1c04a:	f000 f8d9 	bl	1c200 <atsend>
   1c04e:	0003      	movs	r3, r0
   1c050:	7023      	strb	r3, [r4, #0]
   1c052:	2317      	movs	r3, #23
   1c054:	18fb      	adds	r3, r7, r3
   1c056:	781b      	ldrb	r3, [r3, #0]
   1c058:	2b00      	cmp	r3, #0
   1c05a:	d15d      	bne.n	1c118 <atca_execute_command+0x110>
        {
            break;
        }

        // Delay for execution time or initial wait before polling
        atca_delay_ms(execution_or_wait_time);
   1c05c:	68fb      	ldr	r3, [r7, #12]
   1c05e:	0018      	movs	r0, r3
   1c060:	f001 f908 	bl	1d274 <atca_delay_ms>

        do
        {
            memset(packet->data, 0, sizeof(packet->data));
   1c064:	687b      	ldr	r3, [r7, #4]
   1c066:	3306      	adds	r3, #6
   1c068:	22c0      	movs	r2, #192	; 0xc0
   1c06a:	2100      	movs	r1, #0
   1c06c:	0018      	movs	r0, r3
   1c06e:	f009 fb5c 	bl	2572a <memset>
            // receive the response
            rxsize = sizeof(packet->data);
   1c072:	230a      	movs	r3, #10
   1c074:	18fb      	adds	r3, r7, r3
   1c076:	22c0      	movs	r2, #192	; 0xc0
   1c078:	801a      	strh	r2, [r3, #0]
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
   1c07a:	683b      	ldr	r3, [r7, #0]
   1c07c:	6858      	ldr	r0, [r3, #4]
   1c07e:	687b      	ldr	r3, [r7, #4]
   1c080:	3306      	adds	r3, #6
   1c082:	2217      	movs	r2, #23
   1c084:	18bc      	adds	r4, r7, r2
   1c086:	220a      	movs	r2, #10
   1c088:	18ba      	adds	r2, r7, r2
   1c08a:	0019      	movs	r1, r3
   1c08c:	f000 f8ca 	bl	1c224 <atreceive>
   1c090:	0003      	movs	r3, r0
   1c092:	7023      	strb	r3, [r4, #0]
   1c094:	2317      	movs	r3, #23
   1c096:	18fb      	adds	r3, r7, r3
   1c098:	781b      	ldrb	r3, [r3, #0]
   1c09a:	2b00      	cmp	r3, #0
   1c09c:	d008      	beq.n	1c0b0 <atca_execute_command+0xa8>
                break;
            }

#ifndef ATCA_NO_POLL
            // delay for polling frequency time
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
   1c09e:	2002      	movs	r0, #2
   1c0a0:	f001 f8e8 	bl	1d274 <atca_delay_ms>
#endif
        }
        while (max_delay_count-- > 0);
   1c0a4:	693b      	ldr	r3, [r7, #16]
   1c0a6:	1e5a      	subs	r2, r3, #1
   1c0a8:	613a      	str	r2, [r7, #16]
   1c0aa:	2b00      	cmp	r3, #0
   1c0ac:	d1da      	bne.n	1c064 <atca_execute_command+0x5c>
   1c0ae:	e000      	b.n	1c0b2 <atca_execute_command+0xaa>
            memset(packet->data, 0, sizeof(packet->data));
            // receive the response
            rxsize = sizeof(packet->data);
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
            {
                break;
   1c0b0:	46c0      	nop			; (mov r8, r8)
            // delay for polling frequency time
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
#endif
        }
        while (max_delay_count-- > 0);
        if (status != ATCA_SUCCESS)
   1c0b2:	2317      	movs	r3, #23
   1c0b4:	18fb      	adds	r3, r7, r3
   1c0b6:	781b      	ldrb	r3, [r3, #0]
   1c0b8:	2b00      	cmp	r3, #0
   1c0ba:	d12f      	bne.n	1c11c <atca_execute_command+0x114>
        {
            break;
        }

        // Check response size
        if (rxsize < 4)
   1c0bc:	230a      	movs	r3, #10
   1c0be:	18fb      	adds	r3, r7, r3
   1c0c0:	881b      	ldrh	r3, [r3, #0]
   1c0c2:	2b03      	cmp	r3, #3
   1c0c4:	d80e      	bhi.n	1c0e4 <atca_execute_command+0xdc>
        {
            if (rxsize > 0)
   1c0c6:	230a      	movs	r3, #10
   1c0c8:	18fb      	adds	r3, r7, r3
   1c0ca:	881b      	ldrh	r3, [r3, #0]
   1c0cc:	2b00      	cmp	r3, #0
   1c0ce:	d004      	beq.n	1c0da <atca_execute_command+0xd2>
            {
                status = ATCA_RX_FAIL;
   1c0d0:	2317      	movs	r3, #23
   1c0d2:	18fb      	adds	r3, r7, r3
   1c0d4:	22e6      	movs	r2, #230	; 0xe6
   1c0d6:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = ATCA_RX_NO_RESPONSE;
            }
            break;
   1c0d8:	e023      	b.n	1c122 <atca_execute_command+0x11a>
            {
                status = ATCA_RX_FAIL;
            }
            else
            {
                status = ATCA_RX_NO_RESPONSE;
   1c0da:	2317      	movs	r3, #23
   1c0dc:	18fb      	adds	r3, r7, r3
   1c0de:	22e7      	movs	r2, #231	; 0xe7
   1c0e0:	701a      	strb	r2, [r3, #0]
            }
            break;
   1c0e2:	e01e      	b.n	1c122 <atca_execute_command+0x11a>
        }

        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
   1c0e4:	687b      	ldr	r3, [r7, #4]
   1c0e6:	3306      	adds	r3, #6
   1c0e8:	2217      	movs	r2, #23
   1c0ea:	18bc      	adds	r4, r7, r2
   1c0ec:	0018      	movs	r0, r3
   1c0ee:	f7ff fe29 	bl	1bd44 <atCheckCrc>
   1c0f2:	0003      	movs	r3, r0
   1c0f4:	7023      	strb	r3, [r4, #0]
   1c0f6:	2317      	movs	r3, #23
   1c0f8:	18fb      	adds	r3, r7, r3
   1c0fa:	781b      	ldrb	r3, [r3, #0]
   1c0fc:	2b00      	cmp	r3, #0
   1c0fe:	d10f      	bne.n	1c120 <atca_execute_command+0x118>
        {
            break;
        }

        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
   1c100:	687b      	ldr	r3, [r7, #4]
   1c102:	3306      	adds	r3, #6
   1c104:	2217      	movs	r2, #23
   1c106:	18bc      	adds	r4, r7, r2
   1c108:	0018      	movs	r0, r3
   1c10a:	f7ff fe53 	bl	1bdb4 <isATCAError>
   1c10e:	0003      	movs	r3, r0
   1c110:	7023      	strb	r3, [r4, #0]
   1c112:	e006      	b.n	1c122 <atca_execute_command+0x11a>
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
        {
            break;
   1c114:	46c0      	nop			; (mov r8, r8)
   1c116:	e004      	b.n	1c122 <atca_execute_command+0x11a>
        }

        // send the command
        if ((status = atsend(device->mIface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
        {
            break;
   1c118:	46c0      	nop			; (mov r8, r8)
   1c11a:	e002      	b.n	1c122 <atca_execute_command+0x11a>
#endif
        }
        while (max_delay_count-- > 0);
        if (status != ATCA_SUCCESS)
        {
            break;
   1c11c:	46c0      	nop			; (mov r8, r8)
   1c11e:	e000      	b.n	1c122 <atca_execute_command+0x11a>
            break;
        }

        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
        {
            break;
   1c120:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }
    while (0);

    atidle(device->mIface);
   1c122:	683b      	ldr	r3, [r7, #0]
   1c124:	685b      	ldr	r3, [r3, #4]
   1c126:	0018      	movs	r0, r3
   1c128:	f000 f8b4 	bl	1c294 <atidle>
    return status;
   1c12c:	2317      	movs	r3, #23
   1c12e:	18fb      	adds	r3, r7, r3
   1c130:	781b      	ldrb	r3, [r3, #0]
}
   1c132:	0018      	movs	r0, r3
   1c134:	46bd      	mov	sp, r7
   1c136:	b007      	add	sp, #28
   1c138:	bd90      	pop	{r4, r7, pc}
   1c13a:	46c0      	nop			; (mov r8, r8)
   1c13c:	000004e2 	.word	0x000004e2

0001c140 <initATCAIface>:
 * \param[in] cfg       Logical configuration for the interface
 * \param[in] ca_iface  Interface structure to initialize.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCAIface(ATCAIfaceCfg *cfg, ATCAIface ca_iface)
{
   1c140:	b590      	push	{r4, r7, lr}
   1c142:	b085      	sub	sp, #20
   1c144:	af00      	add	r7, sp, #0
   1c146:	6078      	str	r0, [r7, #4]
   1c148:	6039      	str	r1, [r7, #0]
    ATCA_STATUS status;

    if (cfg == NULL || ca_iface == NULL)
   1c14a:	687b      	ldr	r3, [r7, #4]
   1c14c:	2b00      	cmp	r3, #0
   1c14e:	d002      	beq.n	1c156 <initATCAIface+0x16>
   1c150:	683b      	ldr	r3, [r7, #0]
   1c152:	2b00      	cmp	r3, #0
   1c154:	d101      	bne.n	1c15a <initATCAIface+0x1a>
    {
        return ATCA_BAD_PARAM;
   1c156:	23e2      	movs	r3, #226	; 0xe2
   1c158:	e018      	b.n	1c18c <initATCAIface+0x4c>
    }

    ca_iface->mType = cfg->iface_type;
   1c15a:	687b      	ldr	r3, [r7, #4]
   1c15c:	781a      	ldrb	r2, [r3, #0]
   1c15e:	683b      	ldr	r3, [r7, #0]
   1c160:	701a      	strb	r2, [r3, #0]
    ca_iface->mIfaceCFG = cfg;
   1c162:	683b      	ldr	r3, [r7, #0]
   1c164:	687a      	ldr	r2, [r7, #4]
   1c166:	605a      	str	r2, [r3, #4]

    status = atinit(ca_iface);
   1c168:	230f      	movs	r3, #15
   1c16a:	18fc      	adds	r4, r7, r3
   1c16c:	683b      	ldr	r3, [r7, #0]
   1c16e:	0018      	movs	r0, r3
   1c170:	f000 f810 	bl	1c194 <atinit>
   1c174:	0003      	movs	r3, r0
   1c176:	7023      	strb	r3, [r4, #0]
    if (status != ATCA_SUCCESS)
   1c178:	230f      	movs	r3, #15
   1c17a:	18fb      	adds	r3, r7, r3
   1c17c:	781b      	ldrb	r3, [r3, #0]
   1c17e:	2b00      	cmp	r3, #0
   1c180:	d003      	beq.n	1c18a <initATCAIface+0x4a>
    {
        return status;
   1c182:	230f      	movs	r3, #15
   1c184:	18fb      	adds	r3, r7, r3
   1c186:	781b      	ldrb	r3, [r3, #0]
   1c188:	e000      	b.n	1c18c <initATCAIface+0x4c>
    }

    return ATCA_SUCCESS;
   1c18a:	2300      	movs	r3, #0
}
   1c18c:	0018      	movs	r0, r3
   1c18e:	46bd      	mov	sp, r7
   1c190:	b005      	add	sp, #20
   1c192:	bd90      	pop	{r4, r7, pc}

0001c194 <atinit>:
 *         be called instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atinit(ATCAIface ca_iface)
{
   1c194:	b590      	push	{r4, r7, lr}
   1c196:	b08d      	sub	sp, #52	; 0x34
   1c198:	af00      	add	r7, sp, #0
   1c19a:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_COMM_FAIL;
   1c19c:	232f      	movs	r3, #47	; 0x2f
   1c19e:	18fb      	adds	r3, r7, r3
   1c1a0:	22f0      	movs	r2, #240	; 0xf0
   1c1a2:	701a      	strb	r2, [r3, #0]
    ATCAHAL_t hal;

    _atinit(ca_iface, &hal);
   1c1a4:	2308      	movs	r3, #8
   1c1a6:	18fa      	adds	r2, r7, r3
   1c1a8:	687b      	ldr	r3, [r7, #4]
   1c1aa:	0011      	movs	r1, r2
   1c1ac:	0018      	movs	r0, r3
   1c1ae:	f000 f8c1 	bl	1c334 <_atinit>

    status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
   1c1b2:	687b      	ldr	r3, [r7, #4]
   1c1b4:	689a      	ldr	r2, [r3, #8]
   1c1b6:	687b      	ldr	r3, [r7, #4]
   1c1b8:	6859      	ldr	r1, [r3, #4]
   1c1ba:	232f      	movs	r3, #47	; 0x2f
   1c1bc:	18fc      	adds	r4, r7, r3
   1c1be:	2308      	movs	r3, #8
   1c1c0:	18fb      	adds	r3, r7, r3
   1c1c2:	0018      	movs	r0, r3
   1c1c4:	4790      	blx	r2
   1c1c6:	0003      	movs	r3, r0
   1c1c8:	7023      	strb	r3, [r4, #0]
    if (status == ATCA_SUCCESS)
   1c1ca:	232f      	movs	r3, #47	; 0x2f
   1c1cc:	18fb      	adds	r3, r7, r3
   1c1ce:	781b      	ldrb	r3, [r3, #0]
   1c1d0:	2b00      	cmp	r3, #0
   1c1d2:	d10d      	bne.n	1c1f0 <atinit+0x5c>
    {
        ca_iface->hal_data = hal.hal_data;
   1c1d4:	2308      	movs	r3, #8
   1c1d6:	18fb      	adds	r3, r7, r3
   1c1d8:	6a1a      	ldr	r2, [r3, #32]
   1c1da:	687b      	ldr	r3, [r7, #4]
   1c1dc:	625a      	str	r2, [r3, #36]	; 0x24

        // Perform the post init
        status = ca_iface->atpostinit(ca_iface);
   1c1de:	687b      	ldr	r3, [r7, #4]
   1c1e0:	68db      	ldr	r3, [r3, #12]
   1c1e2:	222f      	movs	r2, #47	; 0x2f
   1c1e4:	18bc      	adds	r4, r7, r2
   1c1e6:	687a      	ldr	r2, [r7, #4]
   1c1e8:	0010      	movs	r0, r2
   1c1ea:	4798      	blx	r3
   1c1ec:	0003      	movs	r3, r0
   1c1ee:	7023      	strb	r3, [r4, #0]
    }

    return status;
   1c1f0:	232f      	movs	r3, #47	; 0x2f
   1c1f2:	18fb      	adds	r3, r7, r3
   1c1f4:	781b      	ldrb	r3, [r3, #0]
}
   1c1f6:	0018      	movs	r0, r3
   1c1f8:	46bd      	mov	sp, r7
   1c1fa:	b00d      	add	sp, #52	; 0x34
   1c1fc:	bd90      	pop	{r4, r7, pc}
   1c1fe:	46c0      	nop			; (mov r8, r8)

0001c200 <atsend>:
 * \param[in] txdata    Data to be transmitted to the device.
 * \param[in] txlength  Number of bytes to be transmitted to the device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
   1c200:	b580      	push	{r7, lr}
   1c202:	b084      	sub	sp, #16
   1c204:	af00      	add	r7, sp, #0
   1c206:	60f8      	str	r0, [r7, #12]
   1c208:	60b9      	str	r1, [r7, #8]
   1c20a:	607a      	str	r2, [r7, #4]
    return ca_iface->atsend(ca_iface, txdata, txlength);
   1c20c:	68fb      	ldr	r3, [r7, #12]
   1c20e:	691b      	ldr	r3, [r3, #16]
   1c210:	687a      	ldr	r2, [r7, #4]
   1c212:	68b9      	ldr	r1, [r7, #8]
   1c214:	68f8      	ldr	r0, [r7, #12]
   1c216:	4798      	blx	r3
   1c218:	0003      	movs	r3, r0
}
   1c21a:	0018      	movs	r0, r3
   1c21c:	46bd      	mov	sp, r7
   1c21e:	b004      	add	sp, #16
   1c220:	bd80      	pop	{r7, pc}
   1c222:	46c0      	nop			; (mov r8, r8)

0001c224 <atreceive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
   1c224:	b580      	push	{r7, lr}
   1c226:	b084      	sub	sp, #16
   1c228:	af00      	add	r7, sp, #0
   1c22a:	60f8      	str	r0, [r7, #12]
   1c22c:	60b9      	str	r1, [r7, #8]
   1c22e:	607a      	str	r2, [r7, #4]
    return ca_iface->atreceive(ca_iface, rxdata, rxlength);
   1c230:	68fb      	ldr	r3, [r7, #12]
   1c232:	695b      	ldr	r3, [r3, #20]
   1c234:	687a      	ldr	r2, [r7, #4]
   1c236:	68b9      	ldr	r1, [r7, #8]
   1c238:	68f8      	ldr	r0, [r7, #12]
   1c23a:	4798      	blx	r3
   1c23c:	0003      	movs	r3, r0
}
   1c23e:	0018      	movs	r0, r3
   1c240:	46bd      	mov	sp, r7
   1c242:	b004      	add	sp, #16
   1c244:	bd80      	pop	{r7, pc}
   1c246:	46c0      	nop			; (mov r8, r8)

0001c248 <atwake>:
 *         instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
   1c248:	b590      	push	{r4, r7, lr}
   1c24a:	b085      	sub	sp, #20
   1c24c:	af00      	add	r7, sp, #0
   1c24e:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ca_iface->atwake(ca_iface);
   1c250:	687b      	ldr	r3, [r7, #4]
   1c252:	699b      	ldr	r3, [r3, #24]
   1c254:	220f      	movs	r2, #15
   1c256:	18bc      	adds	r4, r7, r2
   1c258:	687a      	ldr	r2, [r7, #4]
   1c25a:	0010      	movs	r0, r2
   1c25c:	4798      	blx	r3
   1c25e:	0003      	movs	r3, r0
   1c260:	7023      	strb	r3, [r4, #0]

    if (status == ATCA_WAKE_FAILED)
   1c262:	230f      	movs	r3, #15
   1c264:	18fb      	adds	r3, r7, r3
   1c266:	781b      	ldrb	r3, [r3, #0]
   1c268:	2bd0      	cmp	r3, #208	; 0xd0
   1c26a:	d10b      	bne.n	1c284 <atwake+0x3c>
    {
        // The device might be performing a POST. Wait for it to complete
        // and try again.
        atca_delay_ms(ATCA_POST_DELAY_MSEC);
   1c26c:	2019      	movs	r0, #25
   1c26e:	f001 f801 	bl	1d274 <atca_delay_ms>

        status = ca_iface->atwake(ca_iface);
   1c272:	687b      	ldr	r3, [r7, #4]
   1c274:	699b      	ldr	r3, [r3, #24]
   1c276:	220f      	movs	r2, #15
   1c278:	18bc      	adds	r4, r7, r2
   1c27a:	687a      	ldr	r2, [r7, #4]
   1c27c:	0010      	movs	r0, r2
   1c27e:	4798      	blx	r3
   1c280:	0003      	movs	r3, r0
   1c282:	7023      	strb	r3, [r4, #0]
    }

    return status;
   1c284:	230f      	movs	r3, #15
   1c286:	18fb      	adds	r3, r7, r3
   1c288:	781b      	ldrb	r3, [r3, #0]
}
   1c28a:	0018      	movs	r0, r3
   1c28c:	46bd      	mov	sp, r7
   1c28e:	b005      	add	sp, #20
   1c290:	bd90      	pop	{r4, r7, pc}
   1c292:	46c0      	nop			; (mov r8, r8)

0001c294 <atidle>:
 *         be used instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
   1c294:	b590      	push	{r4, r7, lr}
   1c296:	b085      	sub	sp, #20
   1c298:	af00      	add	r7, sp, #0
   1c29a:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = ca_iface->atidle(ca_iface);
   1c29c:	687b      	ldr	r3, [r7, #4]
   1c29e:	69db      	ldr	r3, [r3, #28]
   1c2a0:	220f      	movs	r2, #15
   1c2a2:	18bc      	adds	r4, r7, r2
   1c2a4:	687a      	ldr	r2, [r7, #4]
   1c2a6:	0010      	movs	r0, r2
   1c2a8:	4798      	blx	r3
   1c2aa:	0003      	movs	r3, r0
   1c2ac:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
   1c2ae:	2001      	movs	r0, #1
   1c2b0:	f000 ffe0 	bl	1d274 <atca_delay_ms>
    return status;
   1c2b4:	230f      	movs	r3, #15
   1c2b6:	18fb      	adds	r3, r7, r3
   1c2b8:	781b      	ldrb	r3, [r3, #0]
}
   1c2ba:	0018      	movs	r0, r3
   1c2bc:	46bd      	mov	sp, r7
   1c2be:	b005      	add	sp, #20
   1c2c0:	bd90      	pop	{r4, r7, pc}
   1c2c2:	46c0      	nop			; (mov r8, r8)

0001c2c4 <atsleep>:
 *         be used instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsleep(ATCAIface ca_iface)
{
   1c2c4:	b590      	push	{r4, r7, lr}
   1c2c6:	b085      	sub	sp, #20
   1c2c8:	af00      	add	r7, sp, #0
   1c2ca:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = ca_iface->atsleep(ca_iface);
   1c2cc:	687b      	ldr	r3, [r7, #4]
   1c2ce:	6a1b      	ldr	r3, [r3, #32]
   1c2d0:	220f      	movs	r2, #15
   1c2d2:	18bc      	adds	r4, r7, r2
   1c2d4:	687a      	ldr	r2, [r7, #4]
   1c2d6:	0010      	movs	r0, r2
   1c2d8:	4798      	blx	r3
   1c2da:	0003      	movs	r3, r0
   1c2dc:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
   1c2de:	2001      	movs	r0, #1
   1c2e0:	f000 ffc8 	bl	1d274 <atca_delay_ms>
    return status;
   1c2e4:	230f      	movs	r3, #15
   1c2e6:	18fb      	adds	r3, r7, r3
   1c2e8:	781b      	ldrb	r3, [r3, #0]
}
   1c2ea:	0018      	movs	r0, r3
   1c2ec:	46bd      	mov	sp, r7
   1c2ee:	b005      	add	sp, #20
   1c2f0:	bd90      	pop	{r4, r7, pc}
   1c2f2:	46c0      	nop			; (mov r8, r8)

0001c2f4 <atgetifacecfg>:
/** \brief Returns the logical interface configuration for the device.
 * \param[in] ca_iface  Device interface.
 * \return Logical interface configuration.
 */
ATCAIfaceCfg * atgetifacecfg(ATCAIface ca_iface)
{
   1c2f4:	b580      	push	{r7, lr}
   1c2f6:	b082      	sub	sp, #8
   1c2f8:	af00      	add	r7, sp, #0
   1c2fa:	6078      	str	r0, [r7, #4]
    return ca_iface->mIfaceCFG;
   1c2fc:	687b      	ldr	r3, [r7, #4]
   1c2fe:	685b      	ldr	r3, [r3, #4]
}
   1c300:	0018      	movs	r0, r3
   1c302:	46bd      	mov	sp, r7
   1c304:	b002      	add	sp, #8
   1c306:	bd80      	pop	{r7, pc}

0001c308 <releaseATCAIface>:
 *         this interface.
 *  \param[in] ca_iface  Device interface.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCAIface(ATCAIface ca_iface)
{
   1c308:	b580      	push	{r7, lr}
   1c30a:	b082      	sub	sp, #8
   1c30c:	af00      	add	r7, sp, #0
   1c30e:	6078      	str	r0, [r7, #4]
    if (ca_iface == NULL)
   1c310:	687b      	ldr	r3, [r7, #4]
   1c312:	2b00      	cmp	r3, #0
   1c314:	d101      	bne.n	1c31a <releaseATCAIface+0x12>
    {
        return ATCA_BAD_PARAM;
   1c316:	23e2      	movs	r3, #226	; 0xe2
   1c318:	e008      	b.n	1c32c <releaseATCAIface+0x24>
    }

    return hal_iface_release(ca_iface->mType, ca_iface->hal_data);
   1c31a:	687b      	ldr	r3, [r7, #4]
   1c31c:	781a      	ldrb	r2, [r3, #0]
   1c31e:	687b      	ldr	r3, [r7, #4]
   1c320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c322:	0019      	movs	r1, r3
   1c324:	0010      	movs	r0, r2
   1c326:	f000 fb7b 	bl	1ca20 <hal_iface_release>
   1c32a:	0003      	movs	r3, r0
}
   1c32c:	0018      	movs	r0, r3
   1c32e:	46bd      	mov	sp, r7
   1c330:	b002      	add	sp, #8
   1c332:	bd80      	pop	{r7, pc}

0001c334 <_atinit>:
    *ca_iface = NULL;
}
#endif

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
   1c334:	b580      	push	{r7, lr}
   1c336:	b082      	sub	sp, #8
   1c338:	af00      	add	r7, sp, #0
   1c33a:	6078      	str	r0, [r7, #4]
   1c33c:	6039      	str	r1, [r7, #0]
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
   1c33e:	687b      	ldr	r3, [r7, #4]
   1c340:	685b      	ldr	r3, [r3, #4]
   1c342:	683a      	ldr	r2, [r7, #0]
   1c344:	0011      	movs	r1, r2
   1c346:	0018      	movs	r0, r3
   1c348:	f000 fb1c 	bl	1c984 <hal_iface_init>
    ca_iface->atinit     = hal->halinit;
   1c34c:	683b      	ldr	r3, [r7, #0]
   1c34e:	681a      	ldr	r2, [r3, #0]
   1c350:	687b      	ldr	r3, [r7, #4]
   1c352:	609a      	str	r2, [r3, #8]
    ca_iface->atpostinit = hal->halpostinit;
   1c354:	683b      	ldr	r3, [r7, #0]
   1c356:	685a      	ldr	r2, [r3, #4]
   1c358:	687b      	ldr	r3, [r7, #4]
   1c35a:	60da      	str	r2, [r3, #12]
    ca_iface->atsend     = hal->halsend;
   1c35c:	683b      	ldr	r3, [r7, #0]
   1c35e:	689a      	ldr	r2, [r3, #8]
   1c360:	687b      	ldr	r3, [r7, #4]
   1c362:	611a      	str	r2, [r3, #16]
    ca_iface->atreceive  = hal->halreceive;
   1c364:	683b      	ldr	r3, [r7, #0]
   1c366:	68da      	ldr	r2, [r3, #12]
   1c368:	687b      	ldr	r3, [r7, #4]
   1c36a:	615a      	str	r2, [r3, #20]
    ca_iface->atwake     = hal->halwake;
   1c36c:	683b      	ldr	r3, [r7, #0]
   1c36e:	691a      	ldr	r2, [r3, #16]
   1c370:	687b      	ldr	r3, [r7, #4]
   1c372:	619a      	str	r2, [r3, #24]
    ca_iface->atsleep    = hal->halsleep;
   1c374:	683b      	ldr	r3, [r7, #0]
   1c376:	699a      	ldr	r2, [r3, #24]
   1c378:	687b      	ldr	r3, [r7, #4]
   1c37a:	621a      	str	r2, [r3, #32]
    ca_iface->atidle     = hal->halidle;
   1c37c:	683b      	ldr	r3, [r7, #0]
   1c37e:	695a      	ldr	r2, [r3, #20]
   1c380:	687b      	ldr	r3, [r7, #4]
   1c382:	61da      	str	r2, [r3, #28]
    ca_iface->hal_data   = hal->hal_data;
   1c384:	683b      	ldr	r3, [r7, #0]
   1c386:	6a1a      	ldr	r2, [r3, #32]
   1c388:	687b      	ldr	r3, [r7, #4]
   1c38a:	625a      	str	r2, [r3, #36]	; 0x24

    return ATCA_SUCCESS;
   1c38c:	2300      	movs	r3, #0
}
   1c38e:	0018      	movs	r0, r3
   1c390:	46bd      	mov	sp, r7
   1c392:	b002      	add	sp, #8
   1c394:	bd80      	pop	{r7, pc}
   1c396:	46c0      	nop			; (mov r8, r8)

0001c398 <atcah_nonce>:
/** \brief This function calculates host side nonce with the parameters passed.
 *    \param[in, out] param pointer to parameter structure
 *   \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcah_nonce(struct atca_nonce_in_out *param)
{
   1c398:	b580      	push	{r7, lr}
   1c39a:	b092      	sub	sp, #72	; 0x48
   1c39c:	af00      	add	r7, sp, #0
   1c39e:	6078      	str	r0, [r7, #4]
    uint8_t temporary[ATCA_MSG_SIZE_NONCE];
    uint8_t *p_temp;
    uint8_t calc_mode = param->mode & NONCE_MODE_MASK;
   1c3a0:	687b      	ldr	r3, [r7, #4]
   1c3a2:	781a      	ldrb	r2, [r3, #0]
   1c3a4:	2347      	movs	r3, #71	; 0x47
   1c3a6:	18fb      	adds	r3, r7, r3
   1c3a8:	2103      	movs	r1, #3
   1c3aa:	400a      	ands	r2, r1
   1c3ac:	701a      	strb	r2, [r3, #0]

    // Check parameters
    if (param->temp_key == NULL || param->num_in == NULL)
   1c3ae:	687b      	ldr	r3, [r7, #4]
   1c3b0:	68db      	ldr	r3, [r3, #12]
   1c3b2:	2b00      	cmp	r3, #0
   1c3b4:	d003      	beq.n	1c3be <atcah_nonce+0x26>
   1c3b6:	687b      	ldr	r3, [r7, #4]
   1c3b8:	685b      	ldr	r3, [r3, #4]
   1c3ba:	2b00      	cmp	r3, #0
   1c3bc:	d101      	bne.n	1c3c2 <atcah_nonce+0x2a>
    {
        return ATCA_BAD_PARAM;
   1c3be:	23e2      	movs	r3, #226	; 0xe2
   1c3c0:	e0ca      	b.n	1c558 <atcah_nonce+0x1c0>
    }

    // Calculate or pass-through the nonce to TempKey->Value
    if ((calc_mode == NONCE_MODE_SEED_UPDATE) || (calc_mode == NONCE_MODE_NO_SEED_UPDATE))
   1c3c2:	2347      	movs	r3, #71	; 0x47
   1c3c4:	18fb      	adds	r3, r7, r3
   1c3c6:	781b      	ldrb	r3, [r3, #0]
   1c3c8:	2b00      	cmp	r3, #0
   1c3ca:	d004      	beq.n	1c3d6 <atcah_nonce+0x3e>
   1c3cc:	2347      	movs	r3, #71	; 0x47
   1c3ce:	18fb      	adds	r3, r7, r3
   1c3d0:	781b      	ldrb	r3, [r3, #0]
   1c3d2:	2b01      	cmp	r3, #1
   1c3d4:	d16e      	bne.n	1c4b4 <atcah_nonce+0x11c>
    {
        // RandOut is only required for these modes
        if (param->rand_out == NULL)
   1c3d6:	687b      	ldr	r3, [r7, #4]
   1c3d8:	689b      	ldr	r3, [r3, #8]
   1c3da:	2b00      	cmp	r3, #0
   1c3dc:	d101      	bne.n	1c3e2 <atcah_nonce+0x4a>
        {
            return ATCA_BAD_PARAM;
   1c3de:	23e2      	movs	r3, #226	; 0xe2
   1c3e0:	e0ba      	b.n	1c558 <atcah_nonce+0x1c0>
        }

        if ((param->zero & NONCE_ZERO_CALC_MASK) == NONCE_ZERO_CALC_TEMPKEY)
   1c3e2:	687b      	ldr	r3, [r7, #4]
   1c3e4:	885b      	ldrh	r3, [r3, #2]
   1c3e6:	b21b      	sxth	r3, r3
   1c3e8:	2b00      	cmp	r3, #0
   1c3ea:	da09      	bge.n	1c400 <atcah_nonce+0x68>
        {
            // Nonce calculation mode. Actual value of TempKey has been returned in RandOut
            memcpy(param->temp_key->value, param->rand_out, 32);
   1c3ec:	687b      	ldr	r3, [r7, #4]
   1c3ee:	68db      	ldr	r3, [r3, #12]
   1c3f0:	0018      	movs	r0, r3
   1c3f2:	687b      	ldr	r3, [r7, #4]
   1c3f4:	689b      	ldr	r3, [r3, #8]
   1c3f6:	2220      	movs	r2, #32
   1c3f8:	0019      	movs	r1, r3
   1c3fa:	f009 f978 	bl	256ee <memcpy>
   1c3fe:	e053      	b.n	1c4a8 <atcah_nonce+0x110>
            // TempKey flags aren't changed
        }
        else
        {
            // Calculate nonce using SHA-256 (refer to data sheet)
            p_temp = temporary;
   1c400:	2308      	movs	r3, #8
   1c402:	18fb      	adds	r3, r7, r3
   1c404:	643b      	str	r3, [r7, #64]	; 0x40

            memcpy(p_temp, param->rand_out, RANDOM_NUM_SIZE);
   1c406:	687b      	ldr	r3, [r7, #4]
   1c408:	6899      	ldr	r1, [r3, #8]
   1c40a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c40c:	2220      	movs	r2, #32
   1c40e:	0018      	movs	r0, r3
   1c410:	f009 f96d 	bl	256ee <memcpy>
            p_temp += RANDOM_NUM_SIZE;
   1c414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c416:	3320      	adds	r3, #32
   1c418:	643b      	str	r3, [r7, #64]	; 0x40

            memcpy(p_temp, param->num_in, NONCE_NUMIN_SIZE);
   1c41a:	687b      	ldr	r3, [r7, #4]
   1c41c:	6859      	ldr	r1, [r3, #4]
   1c41e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c420:	2214      	movs	r2, #20
   1c422:	0018      	movs	r0, r3
   1c424:	f009 f963 	bl	256ee <memcpy>
            p_temp += NONCE_NUMIN_SIZE;
   1c428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c42a:	3314      	adds	r3, #20
   1c42c:	643b      	str	r3, [r7, #64]	; 0x40

            *p_temp++ = ATCA_NONCE;
   1c42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c430:	1c5a      	adds	r2, r3, #1
   1c432:	643a      	str	r2, [r7, #64]	; 0x40
   1c434:	2216      	movs	r2, #22
   1c436:	701a      	strb	r2, [r3, #0]
            *p_temp++ = param->mode;
   1c438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c43a:	1c5a      	adds	r2, r3, #1
   1c43c:	643a      	str	r2, [r7, #64]	; 0x40
   1c43e:	687a      	ldr	r2, [r7, #4]
   1c440:	7812      	ldrb	r2, [r2, #0]
   1c442:	701a      	strb	r2, [r3, #0]
            *p_temp++ = 0x00;
   1c444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c446:	1c5a      	adds	r2, r3, #1
   1c448:	643a      	str	r2, [r7, #64]	; 0x40
   1c44a:	2200      	movs	r2, #0
   1c44c:	701a      	strb	r2, [r3, #0]

            // Calculate SHA256 to get the nonce
            atcac_sw_sha2_256(temporary, ATCA_MSG_SIZE_NONCE, param->temp_key->value);
   1c44e:	687b      	ldr	r3, [r7, #4]
   1c450:	68db      	ldr	r3, [r3, #12]
   1c452:	001a      	movs	r2, r3
   1c454:	2308      	movs	r3, #8
   1c456:	18fb      	adds	r3, r7, r3
   1c458:	2137      	movs	r1, #55	; 0x37
   1c45a:	0018      	movs	r0, r3
   1c45c:	f000 ffc4 	bl	1d3e8 <atcac_sw_sha2_256>

            // Update TempKey flags
            param->temp_key->source_flag = 0; // Random
   1c460:	687b      	ldr	r3, [r7, #4]
   1c462:	68db      	ldr	r3, [r3, #12]
   1c464:	2240      	movs	r2, #64	; 0x40
   1c466:	5c99      	ldrb	r1, [r3, r2]
   1c468:	2010      	movs	r0, #16
   1c46a:	4381      	bics	r1, r0
   1c46c:	5499      	strb	r1, [r3, r2]
            param->temp_key->key_id = 0;
   1c46e:	687b      	ldr	r3, [r7, #4]
   1c470:	68db      	ldr	r3, [r3, #12]
   1c472:	2240      	movs	r2, #64	; 0x40
   1c474:	5c99      	ldrb	r1, [r3, r2]
   1c476:	200f      	movs	r0, #15
   1c478:	4381      	bics	r1, r0
   1c47a:	5499      	strb	r1, [r3, r2]
            param->temp_key->gen_dig_data = 0;
   1c47c:	687b      	ldr	r3, [r7, #4]
   1c47e:	68db      	ldr	r3, [r3, #12]
   1c480:	2240      	movs	r2, #64	; 0x40
   1c482:	5c99      	ldrb	r1, [r3, r2]
   1c484:	2020      	movs	r0, #32
   1c486:	4381      	bics	r1, r0
   1c488:	5499      	strb	r1, [r3, r2]
            param->temp_key->no_mac_flag = 0;
   1c48a:	687b      	ldr	r3, [r7, #4]
   1c48c:	68db      	ldr	r3, [r3, #12]
   1c48e:	2240      	movs	r2, #64	; 0x40
   1c490:	5c99      	ldrb	r1, [r3, r2]
   1c492:	207f      	movs	r0, #127	; 0x7f
   1c494:	4001      	ands	r1, r0
   1c496:	5499      	strb	r1, [r3, r2]
            param->temp_key->valid = 1;
   1c498:	687b      	ldr	r3, [r7, #4]
   1c49a:	68db      	ldr	r3, [r3, #12]
   1c49c:	2240      	movs	r2, #64	; 0x40
   1c49e:	189b      	adds	r3, r3, r2
   1c4a0:	785a      	ldrb	r2, [r3, #1]
   1c4a2:	2101      	movs	r1, #1
   1c4a4:	430a      	orrs	r2, r1
   1c4a6:	705a      	strb	r2, [r3, #1]
        }

        // Update TempKey to only 32 bytes
        param->temp_key->is_64 = 0;
   1c4a8:	687b      	ldr	r3, [r7, #4]
   1c4aa:	68db      	ldr	r3, [r3, #12]
   1c4ac:	2242      	movs	r2, #66	; 0x42
   1c4ae:	2100      	movs	r1, #0
   1c4b0:	5499      	strb	r1, [r3, r2]
   1c4b2:	e050      	b.n	1c556 <atcah_nonce+0x1be>
    }
    else if (param->mode == NONCE_MODE_PASSTHROUGH && (param->mode & NONCE_MODE_TARGET_MASK) != NONCE_MODE_TARGET_TEMPKEY)
   1c4b4:	687b      	ldr	r3, [r7, #4]
   1c4b6:	781b      	ldrb	r3, [r3, #0]
   1c4b8:	2b03      	cmp	r3, #3
   1c4ba:	d14c      	bne.n	1c556 <atcah_nonce+0x1be>
   1c4bc:	687b      	ldr	r3, [r7, #4]
   1c4be:	781b      	ldrb	r3, [r3, #0]
   1c4c0:	001a      	movs	r2, r3
   1c4c2:	23c0      	movs	r3, #192	; 0xc0
   1c4c4:	4013      	ands	r3, r2
   1c4c6:	d046      	beq.n	1c556 <atcah_nonce+0x1be>
    {
        // Pass-through mode for TempKey (other targets have no effect on TempKey)
        if ((param->mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
   1c4c8:	687b      	ldr	r3, [r7, #4]
   1c4ca:	781b      	ldrb	r3, [r3, #0]
   1c4cc:	001a      	movs	r2, r3
   1c4ce:	2320      	movs	r3, #32
   1c4d0:	4013      	ands	r3, r2
   1c4d2:	d00e      	beq.n	1c4f2 <atcah_nonce+0x15a>
        {
            memcpy(param->temp_key->value, param->num_in, 64);
   1c4d4:	687b      	ldr	r3, [r7, #4]
   1c4d6:	68db      	ldr	r3, [r3, #12]
   1c4d8:	0018      	movs	r0, r3
   1c4da:	687b      	ldr	r3, [r7, #4]
   1c4dc:	685b      	ldr	r3, [r3, #4]
   1c4de:	2240      	movs	r2, #64	; 0x40
   1c4e0:	0019      	movs	r1, r3
   1c4e2:	f009 f904 	bl	256ee <memcpy>
            param->temp_key->is_64 = 1;
   1c4e6:	687b      	ldr	r3, [r7, #4]
   1c4e8:	68db      	ldr	r3, [r3, #12]
   1c4ea:	2242      	movs	r2, #66	; 0x42
   1c4ec:	2101      	movs	r1, #1
   1c4ee:	5499      	strb	r1, [r3, r2]
   1c4f0:	e00d      	b.n	1c50e <atcah_nonce+0x176>
        }
        else
        {
            memcpy(param->temp_key->value, param->num_in, 32);
   1c4f2:	687b      	ldr	r3, [r7, #4]
   1c4f4:	68db      	ldr	r3, [r3, #12]
   1c4f6:	0018      	movs	r0, r3
   1c4f8:	687b      	ldr	r3, [r7, #4]
   1c4fa:	685b      	ldr	r3, [r3, #4]
   1c4fc:	2220      	movs	r2, #32
   1c4fe:	0019      	movs	r1, r3
   1c500:	f009 f8f5 	bl	256ee <memcpy>
            param->temp_key->is_64 = 0;
   1c504:	687b      	ldr	r3, [r7, #4]
   1c506:	68db      	ldr	r3, [r3, #12]
   1c508:	2242      	movs	r2, #66	; 0x42
   1c50a:	2100      	movs	r1, #0
   1c50c:	5499      	strb	r1, [r3, r2]
        }

        // Update TempKey flags
        param->temp_key->source_flag = 1; // Not Random
   1c50e:	687b      	ldr	r3, [r7, #4]
   1c510:	68db      	ldr	r3, [r3, #12]
   1c512:	2240      	movs	r2, #64	; 0x40
   1c514:	5c99      	ldrb	r1, [r3, r2]
   1c516:	2010      	movs	r0, #16
   1c518:	4301      	orrs	r1, r0
   1c51a:	5499      	strb	r1, [r3, r2]
        param->temp_key->key_id = 0;
   1c51c:	687b      	ldr	r3, [r7, #4]
   1c51e:	68db      	ldr	r3, [r3, #12]
   1c520:	2240      	movs	r2, #64	; 0x40
   1c522:	5c99      	ldrb	r1, [r3, r2]
   1c524:	200f      	movs	r0, #15
   1c526:	4381      	bics	r1, r0
   1c528:	5499      	strb	r1, [r3, r2]
        param->temp_key->gen_dig_data = 0;
   1c52a:	687b      	ldr	r3, [r7, #4]
   1c52c:	68db      	ldr	r3, [r3, #12]
   1c52e:	2240      	movs	r2, #64	; 0x40
   1c530:	5c99      	ldrb	r1, [r3, r2]
   1c532:	2020      	movs	r0, #32
   1c534:	4381      	bics	r1, r0
   1c536:	5499      	strb	r1, [r3, r2]
        param->temp_key->no_mac_flag = 0;
   1c538:	687b      	ldr	r3, [r7, #4]
   1c53a:	68db      	ldr	r3, [r3, #12]
   1c53c:	2240      	movs	r2, #64	; 0x40
   1c53e:	5c99      	ldrb	r1, [r3, r2]
   1c540:	207f      	movs	r0, #127	; 0x7f
   1c542:	4001      	ands	r1, r0
   1c544:	5499      	strb	r1, [r3, r2]
        param->temp_key->valid = 1;
   1c546:	687b      	ldr	r3, [r7, #4]
   1c548:	68db      	ldr	r3, [r3, #12]
   1c54a:	2240      	movs	r2, #64	; 0x40
   1c54c:	189b      	adds	r3, r3, r2
   1c54e:	785a      	ldrb	r2, [r3, #1]
   1c550:	2101      	movs	r1, #1
   1c552:	430a      	orrs	r2, r1
   1c554:	705a      	strb	r2, [r3, #1]
    }

    return ATCA_SUCCESS;
   1c556:	2300      	movs	r3, #0
}
   1c558:	0018      	movs	r0, r3
   1c55a:	46bd      	mov	sp, r7
   1c55c:	b012      	add	sp, #72	; 0x48
   1c55e:	bd80      	pop	{r7, pc}

0001c560 <atcah_gen_dig>:

 * \param[in, out] param pointer to parameter structure
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcah_gen_dig(struct atca_gen_dig_in_out *param)
{
   1c560:	b590      	push	{r4, r7, lr}
   1c562:	b09d      	sub	sp, #116	; 0x74
   1c564:	af00      	add	r7, sp, #0
   1c566:	6078      	str	r0, [r7, #4]
    uint8_t temporary[ATCA_MSG_SIZE_GEN_DIG];
    uint8_t *p_temp;

    // Check parameters
    if (param->sn == NULL || param->temp_key == NULL)
   1c568:	687b      	ldr	r3, [r7, #4]
   1c56a:	689b      	ldr	r3, [r3, #8]
   1c56c:	2b00      	cmp	r3, #0
   1c56e:	d003      	beq.n	1c578 <atcah_gen_dig+0x18>
   1c570:	687b      	ldr	r3, [r7, #4]
   1c572:	695b      	ldr	r3, [r3, #20]
   1c574:	2b00      	cmp	r3, #0
   1c576:	d101      	bne.n	1c57c <atcah_gen_dig+0x1c>
    {
        return ATCA_BAD_PARAM;
   1c578:	23e2      	movs	r3, #226	; 0xe2
   1c57a:	e0e8      	b.n	1c74e <atcah_gen_dig+0x1ee>
    }
    if (param->zone != GENDIG_ZONE_SHARED_NONCE && param->stored_value == NULL)
   1c57c:	687b      	ldr	r3, [r7, #4]
   1c57e:	781b      	ldrb	r3, [r3, #0]
   1c580:	2b03      	cmp	r3, #3
   1c582:	d005      	beq.n	1c590 <atcah_gen_dig+0x30>
   1c584:	687b      	ldr	r3, [r7, #4]
   1c586:	68db      	ldr	r3, [r3, #12]
   1c588:	2b00      	cmp	r3, #0
   1c58a:	d101      	bne.n	1c590 <atcah_gen_dig+0x30>
    {
        return ATCA_BAD_PARAM;  // Stored value can only be null with the shared_nonce mode
   1c58c:	23e2      	movs	r3, #226	; 0xe2
   1c58e:	e0de      	b.n	1c74e <atcah_gen_dig+0x1ee>
    }
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
   1c590:	687b      	ldr	r3, [r7, #4]
   1c592:	781b      	ldrb	r3, [r3, #0]
   1c594:	2b03      	cmp	r3, #3
   1c596:	d007      	beq.n	1c5a8 <atcah_gen_dig+0x48>
   1c598:	687b      	ldr	r3, [r7, #4]
   1c59a:	781b      	ldrb	r3, [r3, #0]
   1c59c:	2b02      	cmp	r3, #2
   1c59e:	d109      	bne.n	1c5b4 <atcah_gen_dig+0x54>
   1c5a0:	687b      	ldr	r3, [r7, #4]
   1c5a2:	791b      	ldrb	r3, [r3, #4]
   1c5a4:	2b00      	cmp	r3, #0
   1c5a6:	d005      	beq.n	1c5b4 <atcah_gen_dig+0x54>
   1c5a8:	687b      	ldr	r3, [r7, #4]
   1c5aa:	691b      	ldr	r3, [r3, #16]
   1c5ac:	2b00      	cmp	r3, #0
   1c5ae:	d101      	bne.n	1c5b4 <atcah_gen_dig+0x54>
    {
        return ATCA_BAD_PARAM;  // Other data is required in these cases
   1c5b0:	23e2      	movs	r3, #226	; 0xe2
   1c5b2:	e0cc      	b.n	1c74e <atcah_gen_dig+0x1ee>
    }
    if (param->zone > 5)
   1c5b4:	687b      	ldr	r3, [r7, #4]
   1c5b6:	781b      	ldrb	r3, [r3, #0]
   1c5b8:	2b05      	cmp	r3, #5
   1c5ba:	d901      	bls.n	1c5c0 <atcah_gen_dig+0x60>
    {
        return ATCA_BAD_PARAM;  // Unknown zone
   1c5bc:	23e2      	movs	r3, #226	; 0xe2
   1c5be:	e0c6      	b.n	1c74e <atcah_gen_dig+0x1ee>

    }
    // Start calculation
    p_temp = temporary;
   1c5c0:	230c      	movs	r3, #12
   1c5c2:	18fb      	adds	r3, r7, r3
   1c5c4:	66fb      	str	r3, [r7, #108]	; 0x6c

    // (1) 32 bytes inputKey
    if (param->zone == GENDIG_ZONE_SHARED_NONCE && param->key_id & 0x8000)
   1c5c6:	687b      	ldr	r3, [r7, #4]
   1c5c8:	781b      	ldrb	r3, [r3, #0]
   1c5ca:	2b03      	cmp	r3, #3
   1c5cc:	d10c      	bne.n	1c5e8 <atcah_gen_dig+0x88>
   1c5ce:	687b      	ldr	r3, [r7, #4]
   1c5d0:	885b      	ldrh	r3, [r3, #2]
   1c5d2:	b21b      	sxth	r3, r3
   1c5d4:	2b00      	cmp	r3, #0
   1c5d6:	da07      	bge.n	1c5e8 <atcah_gen_dig+0x88>
    {
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);
   1c5d8:	687b      	ldr	r3, [r7, #4]
   1c5da:	6919      	ldr	r1, [r3, #16]
   1c5dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c5de:	2220      	movs	r2, #32
   1c5e0:	0018      	movs	r0, r3
   1c5e2:	f009 f884 	bl	256ee <memcpy>
   1c5e6:	e006      	b.n	1c5f6 <atcah_gen_dig+0x96>
    }
    else
    {
        memcpy(p_temp, param->stored_value, ATCA_KEY_SIZE);
   1c5e8:	687b      	ldr	r3, [r7, #4]
   1c5ea:	68d9      	ldr	r1, [r3, #12]
   1c5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c5ee:	2220      	movs	r2, #32
   1c5f0:	0018      	movs	r0, r3
   1c5f2:	f009 f87c 	bl	256ee <memcpy>
    }
    p_temp += ATCA_KEY_SIZE;
   1c5f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c5f8:	3320      	adds	r3, #32
   1c5fa:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)
   1c5fc:	687b      	ldr	r3, [r7, #4]
   1c5fe:	781b      	ldrb	r3, [r3, #0]
   1c600:	2b02      	cmp	r3, #2
   1c602:	d10e      	bne.n	1c622 <atcah_gen_dig+0xc2>
   1c604:	687b      	ldr	r3, [r7, #4]
   1c606:	791b      	ldrb	r3, [r3, #4]
   1c608:	2b00      	cmp	r3, #0
   1c60a:	d00a      	beq.n	1c622 <atcah_gen_dig+0xc2>
    {
        // If a key has the SlotConfig.NoMac bit set, then opcode and parameters come from OtherData
        memcpy(p_temp, param->other_data, 4);
   1c60c:	687b      	ldr	r3, [r7, #4]
   1c60e:	6919      	ldr	r1, [r3, #16]
   1c610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c612:	2204      	movs	r2, #4
   1c614:	0018      	movs	r0, r3
   1c616:	f009 f86a 	bl	256ee <memcpy>
        p_temp += 4;
   1c61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c61c:	3304      	adds	r3, #4
   1c61e:	66fb      	str	r3, [r7, #108]	; 0x6c
   1c620:	e01a      	b.n	1c658 <atcah_gen_dig+0xf8>
    }
    else
    {
        // (2) 1 byte Opcode
        *p_temp++ = ATCA_GENDIG;
   1c622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c624:	1c5a      	adds	r2, r3, #1
   1c626:	66fa      	str	r2, [r7, #108]	; 0x6c
   1c628:	2215      	movs	r2, #21
   1c62a:	701a      	strb	r2, [r3, #0]

        // (3) 1 byte Param1 (zone)
        *p_temp++ = param->zone;
   1c62c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c62e:	1c5a      	adds	r2, r3, #1
   1c630:	66fa      	str	r2, [r7, #108]	; 0x6c
   1c632:	687a      	ldr	r2, [r7, #4]
   1c634:	7812      	ldrb	r2, [r2, #0]
   1c636:	701a      	strb	r2, [r3, #0]

        // (4) 2 bytes Param2 (keyID)
        *p_temp++ = (uint8_t)(param->key_id & 0xFF);
   1c638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c63a:	1c5a      	adds	r2, r3, #1
   1c63c:	66fa      	str	r2, [r7, #108]	; 0x6c
   1c63e:	687a      	ldr	r2, [r7, #4]
   1c640:	8852      	ldrh	r2, [r2, #2]
   1c642:	b2d2      	uxtb	r2, r2
   1c644:	701a      	strb	r2, [r3, #0]
        *p_temp++ = (uint8_t)(param->key_id >> 8);
   1c646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c648:	1c5a      	adds	r2, r3, #1
   1c64a:	66fa      	str	r2, [r7, #108]	; 0x6c
   1c64c:	687a      	ldr	r2, [r7, #4]
   1c64e:	8852      	ldrh	r2, [r2, #2]
   1c650:	0a12      	lsrs	r2, r2, #8
   1c652:	b292      	uxth	r2, r2
   1c654:	b2d2      	uxtb	r2, r2
   1c656:	701a      	strb	r2, [r3, #0]
    }

    // (5) 1 byte SN[8]
    *p_temp++ = param->sn[8];
   1c658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c65a:	1c5a      	adds	r2, r3, #1
   1c65c:	66fa      	str	r2, [r7, #108]	; 0x6c
   1c65e:	687a      	ldr	r2, [r7, #4]
   1c660:	6892      	ldr	r2, [r2, #8]
   1c662:	7a12      	ldrb	r2, [r2, #8]
   1c664:	701a      	strb	r2, [r3, #0]

    // (6) 2 bytes SN[0:1]
    *p_temp++ = param->sn[0];
   1c666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c668:	1c5a      	adds	r2, r3, #1
   1c66a:	66fa      	str	r2, [r7, #108]	; 0x6c
   1c66c:	687a      	ldr	r2, [r7, #4]
   1c66e:	6892      	ldr	r2, [r2, #8]
   1c670:	7812      	ldrb	r2, [r2, #0]
   1c672:	701a      	strb	r2, [r3, #0]
    *p_temp++ = param->sn[1];
   1c674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c676:	1c5a      	adds	r2, r3, #1
   1c678:	66fa      	str	r2, [r7, #108]	; 0x6c
   1c67a:	687a      	ldr	r2, [r7, #4]
   1c67c:	6892      	ldr	r2, [r2, #8]
   1c67e:	7852      	ldrb	r2, [r2, #1]
   1c680:	701a      	strb	r2, [r3, #0]

    // (7) 25 zeros
    memset(p_temp, 0, ATCA_GENDIG_ZEROS_SIZE);
   1c682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c684:	2219      	movs	r2, #25
   1c686:	2100      	movs	r1, #0
   1c688:	0018      	movs	r0, r3
   1c68a:	f009 f84e 	bl	2572a <memset>
    p_temp += ATCA_GENDIG_ZEROS_SIZE;
   1c68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c690:	3319      	adds	r3, #25
   1c692:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (param->zone == GENDIG_ZONE_SHARED_NONCE && !(param->key_id & 0x8000))
   1c694:	687b      	ldr	r3, [r7, #4]
   1c696:	781b      	ldrb	r3, [r3, #0]
   1c698:	2b03      	cmp	r3, #3
   1c69a:	d10c      	bne.n	1c6b6 <atcah_gen_dig+0x156>
   1c69c:	687b      	ldr	r3, [r7, #4]
   1c69e:	885b      	ldrh	r3, [r3, #2]
   1c6a0:	b21b      	sxth	r3, r3
   1c6a2:	2b00      	cmp	r3, #0
   1c6a4:	db07      	blt.n	1c6b6 <atcah_gen_dig+0x156>
    {
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);       // (8) 32 bytes OtherData
   1c6a6:	687b      	ldr	r3, [r7, #4]
   1c6a8:	6919      	ldr	r1, [r3, #16]
   1c6aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c6ac:	2220      	movs	r2, #32
   1c6ae:	0018      	movs	r0, r3
   1c6b0:	f009 f81d 	bl	256ee <memcpy>
   1c6b4:	e007      	b.n	1c6c6 <atcah_gen_dig+0x166>
    }
    else
    {
        memcpy(p_temp, param->temp_key->value, ATCA_KEY_SIZE);  // (8) 32 bytes TempKey
   1c6b6:	687b      	ldr	r3, [r7, #4]
   1c6b8:	695b      	ldr	r3, [r3, #20]
   1c6ba:	0019      	movs	r1, r3
   1c6bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c6be:	2220      	movs	r2, #32
   1c6c0:	0018      	movs	r0, r3
   1c6c2:	f009 f814 	bl	256ee <memcpy>

    }
    // Calculate SHA256 to get the new TempKey
    atcac_sw_sha2_256(temporary, ATCA_MSG_SIZE_GEN_DIG, param->temp_key->value);
   1c6c6:	687b      	ldr	r3, [r7, #4]
   1c6c8:	695b      	ldr	r3, [r3, #20]
   1c6ca:	001a      	movs	r2, r3
   1c6cc:	230c      	movs	r3, #12
   1c6ce:	18fb      	adds	r3, r7, r3
   1c6d0:	2160      	movs	r1, #96	; 0x60
   1c6d2:	0018      	movs	r0, r3
   1c6d4:	f000 fe88 	bl	1d3e8 <atcac_sw_sha2_256>

    // Update TempKey fields
    param->temp_key->valid = 1;
   1c6d8:	687b      	ldr	r3, [r7, #4]
   1c6da:	695b      	ldr	r3, [r3, #20]
   1c6dc:	2240      	movs	r2, #64	; 0x40
   1c6de:	189b      	adds	r3, r3, r2
   1c6e0:	785a      	ldrb	r2, [r3, #1]
   1c6e2:	2101      	movs	r1, #1
   1c6e4:	430a      	orrs	r2, r1
   1c6e6:	705a      	strb	r2, [r3, #1]

    if ((param->zone == GENDIG_ZONE_DATA) && (param->key_id <= 15))
   1c6e8:	687b      	ldr	r3, [r7, #4]
   1c6ea:	781b      	ldrb	r3, [r3, #0]
   1c6ec:	2b02      	cmp	r3, #2
   1c6ee:	d11f      	bne.n	1c730 <atcah_gen_dig+0x1d0>
   1c6f0:	687b      	ldr	r3, [r7, #4]
   1c6f2:	885b      	ldrh	r3, [r3, #2]
   1c6f4:	2b0f      	cmp	r3, #15
   1c6f6:	d81b      	bhi.n	1c730 <atcah_gen_dig+0x1d0>
    {
        param->temp_key->gen_dig_data = 1;
   1c6f8:	687b      	ldr	r3, [r7, #4]
   1c6fa:	695b      	ldr	r3, [r3, #20]
   1c6fc:	2240      	movs	r2, #64	; 0x40
   1c6fe:	5c99      	ldrb	r1, [r3, r2]
   1c700:	2020      	movs	r0, #32
   1c702:	4301      	orrs	r1, r0
   1c704:	5499      	strb	r1, [r3, r2]
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
   1c706:	687b      	ldr	r3, [r7, #4]
   1c708:	695b      	ldr	r3, [r3, #20]
   1c70a:	687a      	ldr	r2, [r7, #4]
   1c70c:	8852      	ldrh	r2, [r2, #2]
   1c70e:	b2d2      	uxtb	r2, r2
   1c710:	1c11      	adds	r1, r2, #0
   1c712:	220f      	movs	r2, #15
   1c714:	400a      	ands	r2, r1
   1c716:	b2d1      	uxtb	r1, r2
   1c718:	2240      	movs	r2, #64	; 0x40
   1c71a:	200f      	movs	r0, #15
   1c71c:	4001      	ands	r1, r0
   1c71e:	000c      	movs	r4, r1
   1c720:	5c99      	ldrb	r1, [r3, r2]
   1c722:	200f      	movs	r0, #15
   1c724:	4381      	bics	r1, r0
   1c726:	1c08      	adds	r0, r1, #0
   1c728:	1c21      	adds	r1, r4, #0
   1c72a:	4301      	orrs	r1, r0
   1c72c:	5499      	strb	r1, [r3, r2]
   1c72e:	e00d      	b.n	1c74c <atcah_gen_dig+0x1ec>
    }
    else
    {
        param->temp_key->gen_dig_data = 0;
   1c730:	687b      	ldr	r3, [r7, #4]
   1c732:	695b      	ldr	r3, [r3, #20]
   1c734:	2240      	movs	r2, #64	; 0x40
   1c736:	5c99      	ldrb	r1, [r3, r2]
   1c738:	2020      	movs	r0, #32
   1c73a:	4381      	bics	r1, r0
   1c73c:	5499      	strb	r1, [r3, r2]
        param->temp_key->key_id = 0;
   1c73e:	687b      	ldr	r3, [r7, #4]
   1c740:	695b      	ldr	r3, [r3, #20]
   1c742:	2240      	movs	r2, #64	; 0x40
   1c744:	5c99      	ldrb	r1, [r3, r2]
   1c746:	200f      	movs	r0, #15
   1c748:	4381      	bics	r1, r0
   1c74a:	5499      	strb	r1, [r3, r2]
    }

    return ATCA_SUCCESS;
   1c74c:	2300      	movs	r3, #0
}
   1c74e:	0018      	movs	r0, r3
   1c750:	46bd      	mov	sp, r7
   1c752:	b01d      	add	sp, #116	; 0x74
   1c754:	bd90      	pop	{r4, r7, pc}
   1c756:	46c0      	nop			; (mov r8, r8)

0001c758 <atcah_privwrite_auth_mac>:

 * \param[in, out] param pointer to parameter structure
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcah_privwrite_auth_mac(struct atca_write_mac_in_out *param)
{
   1c758:	b580      	push	{r7, lr}
   1c75a:	b0a4      	sub	sp, #144	; 0x90
   1c75c:	af00      	add	r7, sp, #0
   1c75e:	6078      	str	r0, [r7, #4]
    uint8_t mac_input[ATCA_MSG_SIZE_PRIVWRITE_MAC];
    uint8_t i = 0;
   1c760:	238f      	movs	r3, #143	; 0x8f
   1c762:	18fb      	adds	r3, r7, r3
   1c764:	2200      	movs	r2, #0
   1c766:	701a      	strb	r2, [r3, #0]
    uint8_t *p_temp = NULL;
   1c768:	2300      	movs	r3, #0
   1c76a:	2288      	movs	r2, #136	; 0x88
   1c76c:	18ba      	adds	r2, r7, r2
   1c76e:	6013      	str	r3, [r2, #0]
    uint8_t session_key2[32];

    // Check parameters
    if (!param->input_data || !param->temp_key)
   1c770:	687b      	ldr	r3, [r7, #4]
   1c772:	689b      	ldr	r3, [r3, #8]
   1c774:	2b00      	cmp	r3, #0
   1c776:	d003      	beq.n	1c780 <atcah_privwrite_auth_mac+0x28>
   1c778:	687b      	ldr	r3, [r7, #4]
   1c77a:	695b      	ldr	r3, [r3, #20]
   1c77c:	2b00      	cmp	r3, #0
   1c77e:	d101      	bne.n	1c784 <atcah_privwrite_auth_mac+0x2c>
    {
        return ATCA_BAD_PARAM;
   1c780:	23e2      	movs	r3, #226	; 0xe2
   1c782:	e0fb      	b.n	1c97c <atcah_privwrite_auth_mac+0x224>
    }

    // Check TempKey fields validity (TempKey is always used)
    if ( // TempKey.CheckFlag must be 0 and TempKey.Valid must be 1
        param->temp_key->no_mac_flag || (param->temp_key->valid != 1)
   1c784:	687b      	ldr	r3, [r7, #4]
   1c786:	695b      	ldr	r3, [r3, #20]
   1c788:	2240      	movs	r2, #64	; 0x40
   1c78a:	5c9b      	ldrb	r3, [r3, r2]
   1c78c:	227f      	movs	r2, #127	; 0x7f
   1c78e:	4393      	bics	r3, r2
   1c790:	b2db      	uxtb	r3, r3
    {
        return ATCA_BAD_PARAM;
    }

    // Check TempKey fields validity (TempKey is always used)
    if ( // TempKey.CheckFlag must be 0 and TempKey.Valid must be 1
   1c792:	2b00      	cmp	r3, #0
   1c794:	d108      	bne.n	1c7a8 <atcah_privwrite_auth_mac+0x50>
        param->temp_key->no_mac_flag || (param->temp_key->valid != 1)
   1c796:	687b      	ldr	r3, [r7, #4]
   1c798:	695b      	ldr	r3, [r3, #20]
   1c79a:	2241      	movs	r2, #65	; 0x41
   1c79c:	5c9b      	ldrb	r3, [r3, r2]
   1c79e:	2201      	movs	r2, #1
   1c7a0:	4013      	ands	r3, r2
   1c7a2:	b2db      	uxtb	r3, r3
   1c7a4:	2b00      	cmp	r3, #0
   1c7a6:	d109      	bne.n	1c7bc <atcah_privwrite_auth_mac+0x64>
        )
    {
        // Invalidate TempKey, then return
        param->temp_key->valid = 0;
   1c7a8:	687b      	ldr	r3, [r7, #4]
   1c7aa:	695b      	ldr	r3, [r3, #20]
   1c7ac:	2240      	movs	r2, #64	; 0x40
   1c7ae:	189b      	adds	r3, r3, r2
   1c7b0:	785a      	ldrb	r2, [r3, #1]
   1c7b2:	2101      	movs	r1, #1
   1c7b4:	438a      	bics	r2, r1
   1c7b6:	705a      	strb	r2, [r3, #1]
        return ATCA_EXECUTION_ERROR;
   1c7b8:	23f4      	movs	r3, #244	; 0xf4
   1c7ba:	e0df      	b.n	1c97c <atcah_privwrite_auth_mac+0x224>

    /* Encrypt by XOR-ing Data with the TempKey
     */

    // Encrypt the next 28 bytes of the cipher text, which is the first part of the private key.
    for (i = 0; i < 32; i++)
   1c7bc:	238f      	movs	r3, #143	; 0x8f
   1c7be:	18fb      	adds	r3, r7, r3
   1c7c0:	2200      	movs	r2, #0
   1c7c2:	701a      	strb	r2, [r3, #0]
   1c7c4:	e01c      	b.n	1c800 <atcah_privwrite_auth_mac+0xa8>
    {
        param->encrypted_data[i] = param->input_data[i] ^ param->temp_key->value[i];
   1c7c6:	687b      	ldr	r3, [r7, #4]
   1c7c8:	68da      	ldr	r2, [r3, #12]
   1c7ca:	238f      	movs	r3, #143	; 0x8f
   1c7cc:	18fb      	adds	r3, r7, r3
   1c7ce:	781b      	ldrb	r3, [r3, #0]
   1c7d0:	18d2      	adds	r2, r2, r3
   1c7d2:	687b      	ldr	r3, [r7, #4]
   1c7d4:	6899      	ldr	r1, [r3, #8]
   1c7d6:	238f      	movs	r3, #143	; 0x8f
   1c7d8:	18fb      	adds	r3, r7, r3
   1c7da:	781b      	ldrb	r3, [r3, #0]
   1c7dc:	18cb      	adds	r3, r1, r3
   1c7de:	7819      	ldrb	r1, [r3, #0]
   1c7e0:	687b      	ldr	r3, [r7, #4]
   1c7e2:	6958      	ldr	r0, [r3, #20]
   1c7e4:	238f      	movs	r3, #143	; 0x8f
   1c7e6:	18fb      	adds	r3, r7, r3
   1c7e8:	781b      	ldrb	r3, [r3, #0]
   1c7ea:	5cc3      	ldrb	r3, [r0, r3]
   1c7ec:	404b      	eors	r3, r1
   1c7ee:	b2db      	uxtb	r3, r3
   1c7f0:	7013      	strb	r3, [r2, #0]

    /* Encrypt by XOR-ing Data with the TempKey
     */

    // Encrypt the next 28 bytes of the cipher text, which is the first part of the private key.
    for (i = 0; i < 32; i++)
   1c7f2:	238f      	movs	r3, #143	; 0x8f
   1c7f4:	18fb      	adds	r3, r7, r3
   1c7f6:	781a      	ldrb	r2, [r3, #0]
   1c7f8:	238f      	movs	r3, #143	; 0x8f
   1c7fa:	18fb      	adds	r3, r7, r3
   1c7fc:	3201      	adds	r2, #1
   1c7fe:	701a      	strb	r2, [r3, #0]
   1c800:	238f      	movs	r3, #143	; 0x8f
   1c802:	18fb      	adds	r3, r7, r3
   1c804:	781b      	ldrb	r3, [r3, #0]
   1c806:	2b1f      	cmp	r3, #31
   1c808:	d9dd      	bls.n	1c7c6 <atcah_privwrite_auth_mac+0x6e>
    {
        param->encrypted_data[i] = param->input_data[i] ^ param->temp_key->value[i];
    }

    // Calculate the new key for the last 4 bytes of the cipher text
    atcac_sw_sha2_256(param->temp_key->value, 32, session_key2);
   1c80a:	687b      	ldr	r3, [r7, #4]
   1c80c:	695b      	ldr	r3, [r3, #20]
   1c80e:	0018      	movs	r0, r3
   1c810:	2308      	movs	r3, #8
   1c812:	18fb      	adds	r3, r7, r3
   1c814:	001a      	movs	r2, r3
   1c816:	2120      	movs	r1, #32
   1c818:	f000 fde6 	bl	1d3e8 <atcac_sw_sha2_256>

    // Encrypt the last 4 bytes of the cipher text, which is the remaining part of the private key
    for (i = 32; i < 36; i++)
   1c81c:	238f      	movs	r3, #143	; 0x8f
   1c81e:	18fb      	adds	r3, r7, r3
   1c820:	2220      	movs	r2, #32
   1c822:	701a      	strb	r2, [r3, #0]
   1c824:	e01d      	b.n	1c862 <atcah_privwrite_auth_mac+0x10a>
    {
        param->encrypted_data[i] = param->input_data[i] ^ session_key2[i - 32];
   1c826:	687b      	ldr	r3, [r7, #4]
   1c828:	68da      	ldr	r2, [r3, #12]
   1c82a:	238f      	movs	r3, #143	; 0x8f
   1c82c:	18fb      	adds	r3, r7, r3
   1c82e:	781b      	ldrb	r3, [r3, #0]
   1c830:	18d2      	adds	r2, r2, r3
   1c832:	687b      	ldr	r3, [r7, #4]
   1c834:	6899      	ldr	r1, [r3, #8]
   1c836:	238f      	movs	r3, #143	; 0x8f
   1c838:	18fb      	adds	r3, r7, r3
   1c83a:	781b      	ldrb	r3, [r3, #0]
   1c83c:	18cb      	adds	r3, r1, r3
   1c83e:	7819      	ldrb	r1, [r3, #0]
   1c840:	238f      	movs	r3, #143	; 0x8f
   1c842:	18fb      	adds	r3, r7, r3
   1c844:	781b      	ldrb	r3, [r3, #0]
   1c846:	3b20      	subs	r3, #32
   1c848:	2008      	movs	r0, #8
   1c84a:	1838      	adds	r0, r7, r0
   1c84c:	5cc3      	ldrb	r3, [r0, r3]
   1c84e:	404b      	eors	r3, r1
   1c850:	b2db      	uxtb	r3, r3
   1c852:	7013      	strb	r3, [r2, #0]

    // Calculate the new key for the last 4 bytes of the cipher text
    atcac_sw_sha2_256(param->temp_key->value, 32, session_key2);

    // Encrypt the last 4 bytes of the cipher text, which is the remaining part of the private key
    for (i = 32; i < 36; i++)
   1c854:	238f      	movs	r3, #143	; 0x8f
   1c856:	18fb      	adds	r3, r7, r3
   1c858:	781a      	ldrb	r2, [r3, #0]
   1c85a:	238f      	movs	r3, #143	; 0x8f
   1c85c:	18fb      	adds	r3, r7, r3
   1c85e:	3201      	adds	r2, #1
   1c860:	701a      	strb	r2, [r3, #0]
   1c862:	238f      	movs	r3, #143	; 0x8f
   1c864:	18fb      	adds	r3, r7, r3
   1c866:	781b      	ldrb	r3, [r3, #0]
   1c868:	2b23      	cmp	r3, #35	; 0x23
   1c86a:	d9dc      	bls.n	1c826 <atcah_privwrite_auth_mac+0xce>
    {
        param->encrypted_data[i] = param->input_data[i] ^ session_key2[i - 32];
    }

    // If the pointer *mac is provided by the caller then calculate input MAC
    if (param->auth_mac)
   1c86c:	687b      	ldr	r3, [r7, #4]
   1c86e:	691b      	ldr	r3, [r3, #16]
   1c870:	2b00      	cmp	r3, #0
   1c872:	d100      	bne.n	1c876 <atcah_privwrite_auth_mac+0x11e>
   1c874:	e081      	b.n	1c97a <atcah_privwrite_auth_mac+0x222>
    {
        // Start calculation
        p_temp = mac_input;
   1c876:	2328      	movs	r3, #40	; 0x28
   1c878:	18fb      	adds	r3, r7, r3
   1c87a:	2288      	movs	r2, #136	; 0x88
   1c87c:	18ba      	adds	r2, r7, r2
   1c87e:	6013      	str	r3, [r2, #0]

        // (1) 32 bytes TempKey
        memcpy(p_temp, param->temp_key->value, ATCA_KEY_SIZE);
   1c880:	687b      	ldr	r3, [r7, #4]
   1c882:	695b      	ldr	r3, [r3, #20]
   1c884:	0019      	movs	r1, r3
   1c886:	2388      	movs	r3, #136	; 0x88
   1c888:	18fb      	adds	r3, r7, r3
   1c88a:	681b      	ldr	r3, [r3, #0]
   1c88c:	2220      	movs	r2, #32
   1c88e:	0018      	movs	r0, r3
   1c890:	f008 ff2d 	bl	256ee <memcpy>
        p_temp += ATCA_KEY_SIZE;
   1c894:	2388      	movs	r3, #136	; 0x88
   1c896:	18fb      	adds	r3, r7, r3
   1c898:	681b      	ldr	r3, [r3, #0]
   1c89a:	3320      	adds	r3, #32
   1c89c:	2288      	movs	r2, #136	; 0x88
   1c89e:	18ba      	adds	r2, r7, r2
   1c8a0:	6013      	str	r3, [r2, #0]

        // (2) 1 byte Opcode
        *p_temp++ = ATCA_PRIVWRITE;
   1c8a2:	2388      	movs	r3, #136	; 0x88
   1c8a4:	18fb      	adds	r3, r7, r3
   1c8a6:	681b      	ldr	r3, [r3, #0]
   1c8a8:	1c5a      	adds	r2, r3, #1
   1c8aa:	2188      	movs	r1, #136	; 0x88
   1c8ac:	1879      	adds	r1, r7, r1
   1c8ae:	600a      	str	r2, [r1, #0]
   1c8b0:	2246      	movs	r2, #70	; 0x46
   1c8b2:	701a      	strb	r2, [r3, #0]

        // (3) 1 byte Param1 (zone)
        *p_temp++ = param->zone;
   1c8b4:	2388      	movs	r3, #136	; 0x88
   1c8b6:	18fb      	adds	r3, r7, r3
   1c8b8:	681b      	ldr	r3, [r3, #0]
   1c8ba:	1c5a      	adds	r2, r3, #1
   1c8bc:	2188      	movs	r1, #136	; 0x88
   1c8be:	1879      	adds	r1, r7, r1
   1c8c0:	600a      	str	r2, [r1, #0]
   1c8c2:	687a      	ldr	r2, [r7, #4]
   1c8c4:	7812      	ldrb	r2, [r2, #0]
   1c8c6:	701a      	strb	r2, [r3, #0]

        // (4) 2 bytes Param2 (keyID)
        *p_temp++ = param->key_id & 0xFF;
   1c8c8:	2388      	movs	r3, #136	; 0x88
   1c8ca:	18fb      	adds	r3, r7, r3
   1c8cc:	681b      	ldr	r3, [r3, #0]
   1c8ce:	1c5a      	adds	r2, r3, #1
   1c8d0:	2188      	movs	r1, #136	; 0x88
   1c8d2:	1879      	adds	r1, r7, r1
   1c8d4:	600a      	str	r2, [r1, #0]
   1c8d6:	687a      	ldr	r2, [r7, #4]
   1c8d8:	8852      	ldrh	r2, [r2, #2]
   1c8da:	b2d2      	uxtb	r2, r2
   1c8dc:	701a      	strb	r2, [r3, #0]
        *p_temp++ = (param->key_id >> 8) & 0xFF;
   1c8de:	2388      	movs	r3, #136	; 0x88
   1c8e0:	18fb      	adds	r3, r7, r3
   1c8e2:	681b      	ldr	r3, [r3, #0]
   1c8e4:	1c5a      	adds	r2, r3, #1
   1c8e6:	2188      	movs	r1, #136	; 0x88
   1c8e8:	1879      	adds	r1, r7, r1
   1c8ea:	600a      	str	r2, [r1, #0]
   1c8ec:	687a      	ldr	r2, [r7, #4]
   1c8ee:	8852      	ldrh	r2, [r2, #2]
   1c8f0:	0a12      	lsrs	r2, r2, #8
   1c8f2:	b292      	uxth	r2, r2
   1c8f4:	b2d2      	uxtb	r2, r2
   1c8f6:	701a      	strb	r2, [r3, #0]

        // (5) 1 byte SN[8]
        *p_temp++ = param->sn[8];
   1c8f8:	2388      	movs	r3, #136	; 0x88
   1c8fa:	18fb      	adds	r3, r7, r3
   1c8fc:	681b      	ldr	r3, [r3, #0]
   1c8fe:	1c5a      	adds	r2, r3, #1
   1c900:	2188      	movs	r1, #136	; 0x88
   1c902:	1879      	adds	r1, r7, r1
   1c904:	600a      	str	r2, [r1, #0]
   1c906:	687a      	ldr	r2, [r7, #4]
   1c908:	6852      	ldr	r2, [r2, #4]
   1c90a:	7a12      	ldrb	r2, [r2, #8]
   1c90c:	701a      	strb	r2, [r3, #0]

        // (6) 2 bytes SN[0:1]
        *p_temp++ = param->sn[0];
   1c90e:	2388      	movs	r3, #136	; 0x88
   1c910:	18fb      	adds	r3, r7, r3
   1c912:	681b      	ldr	r3, [r3, #0]
   1c914:	1c5a      	adds	r2, r3, #1
   1c916:	2188      	movs	r1, #136	; 0x88
   1c918:	1879      	adds	r1, r7, r1
   1c91a:	600a      	str	r2, [r1, #0]
   1c91c:	687a      	ldr	r2, [r7, #4]
   1c91e:	6852      	ldr	r2, [r2, #4]
   1c920:	7812      	ldrb	r2, [r2, #0]
   1c922:	701a      	strb	r2, [r3, #0]
        *p_temp++ = param->sn[1];
   1c924:	2388      	movs	r3, #136	; 0x88
   1c926:	18fb      	adds	r3, r7, r3
   1c928:	681b      	ldr	r3, [r3, #0]
   1c92a:	1c5a      	adds	r2, r3, #1
   1c92c:	2188      	movs	r1, #136	; 0x88
   1c92e:	1879      	adds	r1, r7, r1
   1c930:	600a      	str	r2, [r1, #0]
   1c932:	687a      	ldr	r2, [r7, #4]
   1c934:	6852      	ldr	r2, [r2, #4]
   1c936:	7852      	ldrb	r2, [r2, #1]
   1c938:	701a      	strb	r2, [r3, #0]

        // (7) 21 zeros
        memset(p_temp, 0, ATCA_PRIVWRITE_MAC_ZEROS_SIZE);
   1c93a:	2388      	movs	r3, #136	; 0x88
   1c93c:	18fb      	adds	r3, r7, r3
   1c93e:	681b      	ldr	r3, [r3, #0]
   1c940:	2215      	movs	r2, #21
   1c942:	2100      	movs	r1, #0
   1c944:	0018      	movs	r0, r3
   1c946:	f008 fef0 	bl	2572a <memset>
        p_temp += ATCA_PRIVWRITE_MAC_ZEROS_SIZE;
   1c94a:	2388      	movs	r3, #136	; 0x88
   1c94c:	18fb      	adds	r3, r7, r3
   1c94e:	681b      	ldr	r3, [r3, #0]
   1c950:	3315      	adds	r3, #21
   1c952:	2288      	movs	r2, #136	; 0x88
   1c954:	18ba      	adds	r2, r7, r2
   1c956:	6013      	str	r3, [r2, #0]

        // (8) 36 bytes PlainText (Private Key)
        memcpy(p_temp, param->input_data, ATCA_PRIVWRITE_PLAIN_TEXT_SIZE);
   1c958:	687b      	ldr	r3, [r7, #4]
   1c95a:	6899      	ldr	r1, [r3, #8]
   1c95c:	2388      	movs	r3, #136	; 0x88
   1c95e:	18fb      	adds	r3, r7, r3
   1c960:	681b      	ldr	r3, [r3, #0]
   1c962:	2224      	movs	r2, #36	; 0x24
   1c964:	0018      	movs	r0, r3
   1c966:	f008 fec2 	bl	256ee <memcpy>

        // Calculate SHA256 to get the new TempKey
        atcac_sw_sha2_256(mac_input, sizeof(mac_input), param->auth_mac);
   1c96a:	687b      	ldr	r3, [r7, #4]
   1c96c:	691a      	ldr	r2, [r3, #16]
   1c96e:	2328      	movs	r3, #40	; 0x28
   1c970:	18fb      	adds	r3, r7, r3
   1c972:	2160      	movs	r1, #96	; 0x60
   1c974:	0018      	movs	r0, r3
   1c976:	f000 fd37 	bl	1d3e8 <atcac_sw_sha2_256>
    }

    return ATCA_SUCCESS;
   1c97a:	2300      	movs	r3, #0
}
   1c97c:	0018      	movs	r0, r3
   1c97e:	46bd      	mov	sp, r7
   1c980:	b024      	add	sp, #144	; 0x90
   1c982:	bd80      	pop	{r7, pc}

0001c984 <hal_iface_init>:
 * \param[in] hal pointer to ATCAHAL_t intermediate data structure
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t *hal)
{
   1c984:	b580      	push	{r7, lr}
   1c986:	b084      	sub	sp, #16
   1c988:	af00      	add	r7, sp, #0
   1c98a:	6078      	str	r0, [r7, #4]
   1c98c:	6039      	str	r1, [r7, #0]
    // Because C isn't a real object oriented language or dynamically typed, some switch in the overall system is unavoidable
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;
   1c98e:	230f      	movs	r3, #15
   1c990:	18fb      	adds	r3, r7, r3
   1c992:	22f0      	movs	r2, #240	; 0xf0
   1c994:	701a      	strb	r2, [r3, #0]

    switch (cfg->iface_type)
   1c996:	687b      	ldr	r3, [r7, #4]
   1c998:	781b      	ldrb	r3, [r3, #0]
   1c99a:	2b05      	cmp	r3, #5
   1c99c:	d824      	bhi.n	1c9e8 <hal_iface_init+0x64>
   1c99e:	009a      	lsls	r2, r3, #2
   1c9a0:	4b16      	ldr	r3, [pc, #88]	; (1c9fc <hal_iface_init+0x78>)
   1c9a2:	18d3      	adds	r3, r2, r3
   1c9a4:	681b      	ldr	r3, [r3, #0]
   1c9a6:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
        #ifdef ATCA_HAL_I2C
        hal->halinit = &hal_i2c_init;
   1c9a8:	683b      	ldr	r3, [r7, #0]
   1c9aa:	4a15      	ldr	r2, [pc, #84]	; (1ca00 <hal_iface_init+0x7c>)
   1c9ac:	601a      	str	r2, [r3, #0]
        hal->halpostinit = &hal_i2c_post_init;
   1c9ae:	683b      	ldr	r3, [r7, #0]
   1c9b0:	4a14      	ldr	r2, [pc, #80]	; (1ca04 <hal_iface_init+0x80>)
   1c9b2:	605a      	str	r2, [r3, #4]
        hal->halreceive = &hal_i2c_receive;
   1c9b4:	683b      	ldr	r3, [r7, #0]
   1c9b6:	4a14      	ldr	r2, [pc, #80]	; (1ca08 <hal_iface_init+0x84>)
   1c9b8:	60da      	str	r2, [r3, #12]
        hal->halsend = &hal_i2c_send;
   1c9ba:	683b      	ldr	r3, [r7, #0]
   1c9bc:	4a13      	ldr	r2, [pc, #76]	; (1ca0c <hal_iface_init+0x88>)
   1c9be:	609a      	str	r2, [r3, #8]
        hal->halsleep = &hal_i2c_sleep;
   1c9c0:	683b      	ldr	r3, [r7, #0]
   1c9c2:	4a13      	ldr	r2, [pc, #76]	; (1ca10 <hal_iface_init+0x8c>)
   1c9c4:	619a      	str	r2, [r3, #24]
        hal->halwake = &hal_i2c_wake;
   1c9c6:	683b      	ldr	r3, [r7, #0]
   1c9c8:	4a12      	ldr	r2, [pc, #72]	; (1ca14 <hal_iface_init+0x90>)
   1c9ca:	611a      	str	r2, [r3, #16]
        hal->halidle = &hal_i2c_idle;
   1c9cc:	683b      	ldr	r3, [r7, #0]
   1c9ce:	4a12      	ldr	r2, [pc, #72]	; (1ca18 <hal_iface_init+0x94>)
   1c9d0:	615a      	str	r2, [r3, #20]
        hal->halrelease = &hal_i2c_release;
   1c9d2:	683b      	ldr	r3, [r7, #0]
   1c9d4:	4a11      	ldr	r2, [pc, #68]	; (1ca1c <hal_iface_init+0x98>)
   1c9d6:	61da      	str	r2, [r3, #28]
        hal->hal_data = NULL;
   1c9d8:	683b      	ldr	r3, [r7, #0]
   1c9da:	2200      	movs	r2, #0
   1c9dc:	621a      	str	r2, [r3, #32]

        status = ATCA_SUCCESS;
   1c9de:	230f      	movs	r3, #15
   1c9e0:	18fb      	adds	r3, r7, r3
   1c9e2:	2200      	movs	r2, #0
   1c9e4:	701a      	strb	r2, [r3, #0]
        #endif
        break;
   1c9e6:	e002      	b.n	1c9ee <hal_iface_init+0x6a>

        status = ATCA_SUCCESS;
        #endif
        break;
    default:
        break;
   1c9e8:	46c0      	nop			; (mov r8, r8)
   1c9ea:	e000      	b.n	1c9ee <hal_iface_init+0x6a>
        hal->halrelease = cfg->atcacustom.halrelease;
        hal->hal_data = NULL;

        status = ATCA_SUCCESS;
        #endif
        break;
   1c9ec:	46c0      	nop			; (mov r8, r8)
    default:
        break;
    }
    return status;
   1c9ee:	230f      	movs	r3, #15
   1c9f0:	18fb      	adds	r3, r7, r3
   1c9f2:	781b      	ldrb	r3, [r3, #0]
}
   1c9f4:	0018      	movs	r0, r3
   1c9f6:	46bd      	mov	sp, r7
   1c9f8:	b004      	add	sp, #16
   1c9fa:	bd80      	pop	{r7, pc}
   1c9fc:	0002e468 	.word	0x0002e468
   1ca00:	0001cc45 	.word	0x0001cc45
   1ca04:	0001cd4d 	.word	0x0001cd4d
   1ca08:	0001ce01 	.word	0x0001ce01
   1ca0c:	0001cd61 	.word	0x0001cd61
   1ca10:	0001d181 	.word	0x0001d181
   1ca14:	0001cfcd 	.word	0x0001cfcd
   1ca18:	0001d0f5 	.word	0x0001d0f5
   1ca1c:	0001d20d 	.word	0x0001d20d

0001ca20 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
   1ca20:	b590      	push	{r4, r7, lr}
   1ca22:	b085      	sub	sp, #20
   1ca24:	af00      	add	r7, sp, #0
   1ca26:	0002      	movs	r2, r0
   1ca28:	6039      	str	r1, [r7, #0]
   1ca2a:	1dfb      	adds	r3, r7, #7
   1ca2c:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1ca2e:	230f      	movs	r3, #15
   1ca30:	18fb      	adds	r3, r7, r3
   1ca32:	22e1      	movs	r2, #225	; 0xe1
   1ca34:	701a      	strb	r2, [r3, #0]

    switch (iface_type)
   1ca36:	1dfb      	adds	r3, r7, #7
   1ca38:	781b      	ldrb	r3, [r3, #0]
   1ca3a:	2b05      	cmp	r3, #5
   1ca3c:	d80d      	bhi.n	1ca5a <hal_iface_release+0x3a>
   1ca3e:	009a      	lsls	r2, r3, #2
   1ca40:	4b0b      	ldr	r3, [pc, #44]	; (1ca70 <hal_iface_release+0x50>)
   1ca42:	18d3      	adds	r3, r2, r3
   1ca44:	681b      	ldr	r3, [r3, #0]
   1ca46:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
#ifdef ATCA_HAL_I2C
        status = hal_i2c_release(hal_data);
   1ca48:	230f      	movs	r3, #15
   1ca4a:	18fc      	adds	r4, r7, r3
   1ca4c:	683b      	ldr	r3, [r7, #0]
   1ca4e:	0018      	movs	r0, r3
   1ca50:	f000 fbdc 	bl	1d20c <hal_i2c_release>
   1ca54:	0003      	movs	r3, r0
   1ca56:	7023      	strb	r3, [r4, #0]
#endif
        break;
   1ca58:	e002      	b.n	1ca60 <hal_iface_release+0x40>
        // release function. So we just assume success at this point.
        status = ATCA_SUCCESS;
#endif
        break;
    default:
        break;
   1ca5a:	46c0      	nop			; (mov r8, r8)
   1ca5c:	e000      	b.n	1ca60 <hal_iface_release+0x40>
#ifdef ATCA_HAL_CUSTOM
        // Current architecture/API prevents us from accessing the custom
        // release function. So we just assume success at this point.
        status = ATCA_SUCCESS;
#endif
        break;
   1ca5e:	46c0      	nop			; (mov r8, r8)
    default:
        break;
    }

    return status;
   1ca60:	230f      	movs	r3, #15
   1ca62:	18fb      	adds	r3, r7, r3
   1ca64:	781b      	ldrb	r3, [r3, #0]
}
   1ca66:	0018      	movs	r0, r3
   1ca68:	46bd      	mov	sp, r7
   1ca6a:	b005      	add	sp, #20
   1ca6c:	bd90      	pop	{r4, r7, pc}
   1ca6e:	46c0      	nop			; (mov r8, r8)
   1ca70:	0002e480 	.word	0x0002e480

0001ca74 <hal_check_wake>:
 * \param[in] response_size  Size of the response to check.
 * \return ATCA_SUCCESS for expected wake, ATCA_STATUS_SELFTEST_ERROR if the
 *         power on self test failed, ATCA_WAKE_FAILED for other failures.
 */
ATCA_STATUS hal_check_wake(const uint8_t* response, int response_size)
{
   1ca74:	b580      	push	{r7, lr}
   1ca76:	b084      	sub	sp, #16
   1ca78:	af00      	add	r7, sp, #0
   1ca7a:	6078      	str	r0, [r7, #4]
   1ca7c:	6039      	str	r1, [r7, #0]
    const uint8_t expected_response[4] = { 0x04, 0x11, 0x33, 0x43 };
   1ca7e:	230c      	movs	r3, #12
   1ca80:	18fa      	adds	r2, r7, r3
   1ca82:	4b18      	ldr	r3, [pc, #96]	; (1cae4 <hal_check_wake+0x70>)
   1ca84:	0010      	movs	r0, r2
   1ca86:	0019      	movs	r1, r3
   1ca88:	2304      	movs	r3, #4
   1ca8a:	001a      	movs	r2, r3
   1ca8c:	f008 fe2f 	bl	256ee <memcpy>
    uint8_t selftest_fail_resp[4] = { 0x04, 0x07, 0xC4, 0x40 };
   1ca90:	2308      	movs	r3, #8
   1ca92:	18fa      	adds	r2, r7, r3
   1ca94:	4b14      	ldr	r3, [pc, #80]	; (1cae8 <hal_check_wake+0x74>)
   1ca96:	0010      	movs	r0, r2
   1ca98:	0019      	movs	r1, r3
   1ca9a:	2304      	movs	r3, #4
   1ca9c:	001a      	movs	r2, r3
   1ca9e:	f008 fe26 	bl	256ee <memcpy>

    if (response_size != 4)
   1caa2:	683b      	ldr	r3, [r7, #0]
   1caa4:	2b04      	cmp	r3, #4
   1caa6:	d001      	beq.n	1caac <hal_check_wake+0x38>
    {
        return ATCA_WAKE_FAILED;
   1caa8:	23d0      	movs	r3, #208	; 0xd0
   1caaa:	e016      	b.n	1cada <hal_check_wake+0x66>
    }
    if (memcmp(response, expected_response, 4) == 0)
   1caac:	230c      	movs	r3, #12
   1caae:	18f9      	adds	r1, r7, r3
   1cab0:	687b      	ldr	r3, [r7, #4]
   1cab2:	2204      	movs	r2, #4
   1cab4:	0018      	movs	r0, r3
   1cab6:	f008 fe0b 	bl	256d0 <memcmp>
   1caba:	1e03      	subs	r3, r0, #0
   1cabc:	d101      	bne.n	1cac2 <hal_check_wake+0x4e>
    {
        return ATCA_SUCCESS;
   1cabe:	2300      	movs	r3, #0
   1cac0:	e00b      	b.n	1cada <hal_check_wake+0x66>
    }
    if (memcmp(response, selftest_fail_resp, 4) == 0)
   1cac2:	2308      	movs	r3, #8
   1cac4:	18f9      	adds	r1, r7, r3
   1cac6:	687b      	ldr	r3, [r7, #4]
   1cac8:	2204      	movs	r2, #4
   1caca:	0018      	movs	r0, r3
   1cacc:	f008 fe00 	bl	256d0 <memcmp>
   1cad0:	1e03      	subs	r3, r0, #0
   1cad2:	d101      	bne.n	1cad8 <hal_check_wake+0x64>
    {
        return ATCA_STATUS_SELFTEST_ERROR;
   1cad4:	23d7      	movs	r3, #215	; 0xd7
   1cad6:	e000      	b.n	1cada <hal_check_wake+0x66>
    }
    return ATCA_WAKE_FAILED;
   1cad8:	23d0      	movs	r3, #208	; 0xd0
   1cada:	0018      	movs	r0, r3
   1cadc:	46bd      	mov	sp, r7
   1cade:	b004      	add	sp, #16
   1cae0:	bd80      	pop	{r7, pc}
   1cae2:	46c0      	nop			; (mov r8, r8)
   1cae4:	0002e498 	.word	0x0002e498
   1cae8:	0002e49c 	.word	0x0002e49c

0001caec <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   1caec:	b580      	push	{r7, lr}
   1caee:	b084      	sub	sp, #16
   1caf0:	af00      	add	r7, sp, #0
   1caf2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1caf4:	687b      	ldr	r3, [r7, #4]
   1caf6:	681b      	ldr	r3, [r3, #0]
   1caf8:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1cafa:	68fb      	ldr	r3, [r7, #12]
   1cafc:	69db      	ldr	r3, [r3, #28]
   1cafe:	2207      	movs	r2, #7
   1cb00:	4013      	ands	r3, r2
   1cb02:	1e5a      	subs	r2, r3, #1
   1cb04:	4193      	sbcs	r3, r2
   1cb06:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1cb08:	0018      	movs	r0, r3
   1cb0a:	46bd      	mov	sp, r7
   1cb0c:	b004      	add	sp, #16
   1cb0e:	bd80      	pop	{r7, pc}

0001cb10 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   1cb10:	b580      	push	{r7, lr}
   1cb12:	b082      	sub	sp, #8
   1cb14:	af00      	add	r7, sp, #0
   1cb16:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1cb18:	46c0      	nop			; (mov r8, r8)
   1cb1a:	687b      	ldr	r3, [r7, #4]
   1cb1c:	0018      	movs	r0, r3
   1cb1e:	f7ff ffe5 	bl	1caec <i2c_master_is_syncing>
   1cb22:	1e03      	subs	r3, r0, #0
   1cb24:	d1f9      	bne.n	1cb1a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1cb26:	46c0      	nop			; (mov r8, r8)
   1cb28:	46bd      	mov	sp, r7
   1cb2a:	b002      	add	sp, #8
   1cb2c:	bd80      	pop	{r7, pc}
   1cb2e:	46c0      	nop			; (mov r8, r8)

0001cb30 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   1cb30:	b580      	push	{r7, lr}
   1cb32:	b082      	sub	sp, #8
   1cb34:	af00      	add	r7, sp, #0
   1cb36:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   1cb38:	687b      	ldr	r3, [r7, #4]
   1cb3a:	2264      	movs	r2, #100	; 0x64
   1cb3c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1cb3e:	687b      	ldr	r3, [r7, #4]
   1cb40:	4a1b      	ldr	r2, [pc, #108]	; (1cbb0 <i2c_master_get_config_defaults+0x80>)
   1cb42:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   1cb44:	687b      	ldr	r3, [r7, #4]
   1cb46:	2200      	movs	r2, #0
   1cb48:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   1cb4a:	687b      	ldr	r3, [r7, #4]
   1cb4c:	2200      	movs	r2, #0
   1cb4e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   1cb50:	687b      	ldr	r3, [r7, #4]
   1cb52:	2200      	movs	r2, #0
   1cb54:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1cb56:	687b      	ldr	r3, [r7, #4]
   1cb58:	2280      	movs	r2, #128	; 0x80
   1cb5a:	0392      	lsls	r2, r2, #14
   1cb5c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   1cb5e:	687b      	ldr	r3, [r7, #4]
   1cb60:	2201      	movs	r2, #1
   1cb62:	4252      	negs	r2, r2
   1cb64:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   1cb66:	687b      	ldr	r3, [r7, #4]
   1cb68:	2201      	movs	r2, #1
   1cb6a:	4252      	negs	r2, r2
   1cb6c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1cb6e:	687b      	ldr	r3, [r7, #4]
   1cb70:	2200      	movs	r2, #0
   1cb72:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1cb74:	687b      	ldr	r3, [r7, #4]
   1cb76:	2200      	movs	r2, #0
   1cb78:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   1cb7a:	687b      	ldr	r3, [r7, #4]
   1cb7c:	2224      	movs	r2, #36	; 0x24
   1cb7e:	2100      	movs	r1, #0
   1cb80:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   1cb82:	687b      	ldr	r3, [r7, #4]
   1cb84:	2200      	movs	r2, #0
   1cb86:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   1cb88:	687b      	ldr	r3, [r7, #4]
   1cb8a:	222c      	movs	r2, #44	; 0x2c
   1cb8c:	2100      	movs	r1, #0
   1cb8e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   1cb90:	687b      	ldr	r3, [r7, #4]
   1cb92:	222d      	movs	r2, #45	; 0x2d
   1cb94:	2100      	movs	r1, #0
   1cb96:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   1cb98:	687b      	ldr	r3, [r7, #4]
   1cb9a:	222e      	movs	r2, #46	; 0x2e
   1cb9c:	2100      	movs	r1, #0
   1cb9e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   1cba0:	687b      	ldr	r3, [r7, #4]
   1cba2:	22d7      	movs	r2, #215	; 0xd7
   1cba4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   1cba6:	46c0      	nop			; (mov r8, r8)
   1cba8:	46bd      	mov	sp, r7
   1cbaa:	b002      	add	sp, #8
   1cbac:	bd80      	pop	{r7, pc}
   1cbae:	46c0      	nop			; (mov r8, r8)
   1cbb0:	00000d48 	.word	0x00000d48

0001cbb4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   1cbb4:	b580      	push	{r7, lr}
   1cbb6:	b084      	sub	sp, #16
   1cbb8:	af00      	add	r7, sp, #0
   1cbba:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1cbbc:	687b      	ldr	r3, [r7, #4]
   1cbbe:	681b      	ldr	r3, [r3, #0]
   1cbc0:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   1cbc2:	2300      	movs	r3, #0
   1cbc4:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   1cbc6:	687b      	ldr	r3, [r7, #4]
   1cbc8:	0018      	movs	r0, r3
   1cbca:	f7ff ffa1 	bl	1cb10 <_i2c_master_wait_for_sync>

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1cbce:	68bb      	ldr	r3, [r7, #8]
   1cbd0:	681b      	ldr	r3, [r3, #0]
   1cbd2:	2202      	movs	r2, #2
   1cbd4:	431a      	orrs	r2, r3
   1cbd6:	68bb      	ldr	r3, [r7, #8]
   1cbd8:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1cbda:	e00c      	b.n	1cbf6 <i2c_master_enable+0x42>
		timeout_counter++;
   1cbdc:	68fb      	ldr	r3, [r7, #12]
   1cbde:	3301      	adds	r3, #1
   1cbe0:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   1cbe2:	687b      	ldr	r3, [r7, #4]
   1cbe4:	88db      	ldrh	r3, [r3, #6]
   1cbe6:	001a      	movs	r2, r3
   1cbe8:	68fb      	ldr	r3, [r7, #12]
   1cbea:	429a      	cmp	r2, r3
   1cbec:	d803      	bhi.n	1cbf6 <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   1cbee:	68bb      	ldr	r3, [r7, #8]
   1cbf0:	2210      	movs	r2, #16
   1cbf2:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   1cbf4:	e006      	b.n	1cc04 <i2c_master_enable+0x50>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1cbf6:	68bb      	ldr	r3, [r7, #8]
   1cbf8:	8b5b      	ldrh	r3, [r3, #26]
   1cbfa:	b29b      	uxth	r3, r3
   1cbfc:	001a      	movs	r2, r3
   1cbfe:	2310      	movs	r3, #16
   1cc00:	4013      	ands	r3, r2
   1cc02:	d0eb      	beq.n	1cbdc <i2c_master_enable+0x28>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
   1cc04:	46bd      	mov	sp, r7
   1cc06:	b004      	add	sp, #16
   1cc08:	bd80      	pop	{r7, pc}
   1cc0a:	46c0      	nop			; (mov r8, r8)

0001cc0c <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   1cc0c:	b580      	push	{r7, lr}
   1cc0e:	b084      	sub	sp, #16
   1cc10:	af00      	add	r7, sp, #0
   1cc12:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1cc14:	687b      	ldr	r3, [r7, #4]
   1cc16:	681b      	ldr	r3, [r3, #0]
   1cc18:	60fb      	str	r3, [r7, #12]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   1cc1a:	687b      	ldr	r3, [r7, #4]
   1cc1c:	0018      	movs	r0, r3
   1cc1e:	f7ff ff77 	bl	1cb10 <_i2c_master_wait_for_sync>

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   1cc22:	68fb      	ldr	r3, [r7, #12]
   1cc24:	2283      	movs	r2, #131	; 0x83
   1cc26:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1cc28:	68fb      	ldr	r3, [r7, #12]
   1cc2a:	2283      	movs	r2, #131	; 0x83
   1cc2c:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   1cc2e:	68fb      	ldr	r3, [r7, #12]
   1cc30:	681b      	ldr	r3, [r3, #0]
   1cc32:	2202      	movs	r2, #2
   1cc34:	4393      	bics	r3, r2
   1cc36:	001a      	movs	r2, r3
   1cc38:	68fb      	ldr	r3, [r7, #12]
   1cc3a:	601a      	str	r2, [r3, #0]

}
   1cc3c:	46c0      	nop			; (mov r8, r8)
   1cc3e:	46bd      	mov	sp, r7
   1cc40:	b004      	add	sp, #16
   1cc42:	bd80      	pop	{r7, pc}

0001cc44 <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
   1cc44:	b580      	push	{r7, lr}
   1cc46:	b084      	sub	sp, #16
   1cc48:	af00      	add	r7, sp, #0
   1cc4a:	6078      	str	r0, [r7, #4]
   1cc4c:	6039      	str	r1, [r7, #0]
    if (cfg->atcai2c.bus >= MAX_I2C_BUSES)
   1cc4e:	683b      	ldr	r3, [r7, #0]
   1cc50:	795b      	ldrb	r3, [r3, #5]
   1cc52:	2b05      	cmp	r3, #5
   1cc54:	d901      	bls.n	1cc5a <hal_i2c_init+0x16>
    {
        return ATCA_COMM_FAIL;
   1cc56:	23f0      	movs	r3, #240	; 0xf0
   1cc58:	e062      	b.n	1cd20 <hal_i2c_init+0xdc>
    }
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
   1cc5a:	683b      	ldr	r3, [r7, #0]
   1cc5c:	795b      	ldrb	r3, [r3, #5]
   1cc5e:	001a      	movs	r2, r3
   1cc60:	0013      	movs	r3, r2
   1cc62:	005b      	lsls	r3, r3, #1
   1cc64:	189b      	adds	r3, r3, r2
   1cc66:	00db      	lsls	r3, r3, #3
   1cc68:	4a2f      	ldr	r2, [pc, #188]	; (1cd28 <hal_i2c_init+0xe4>)
   1cc6a:	189b      	adds	r3, r3, r2
   1cc6c:	60fb      	str	r3, [r7, #12]

    if (data->ref_ct <= 0)
   1cc6e:	68fb      	ldr	r3, [r7, #12]
   1cc70:	691b      	ldr	r3, [r3, #16]
   1cc72:	2b00      	cmp	r3, #0
   1cc74:	dc4b      	bgt.n	1cd0e <hal_i2c_init+0xca>
    {
        i2c_master_get_config_defaults(&config_i2c_master);
   1cc76:	4b2d      	ldr	r3, [pc, #180]	; (1cd2c <hal_i2c_init+0xe8>)
   1cc78:	0018      	movs	r0, r3
   1cc7a:	f7ff ff59 	bl	1cb30 <i2c_master_get_config_defaults>
        config_i2c_master.unknown_bus_state_timeout = 500;
   1cc7e:	4b2b      	ldr	r3, [pc, #172]	; (1cd2c <hal_i2c_init+0xe8>)
   1cc80:	22fa      	movs	r2, #250	; 0xfa
   1cc82:	0052      	lsls	r2, r2, #1
   1cc84:	829a      	strh	r2, [r3, #20]
        config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
   1cc86:	683b      	ldr	r3, [r7, #0]
   1cc88:	689a      	ldr	r2, [r3, #8]
   1cc8a:	23fa      	movs	r3, #250	; 0xfa
   1cc8c:	0099      	lsls	r1, r3, #2
   1cc8e:	0010      	movs	r0, r2
   1cc90:	f006 fc04 	bl	2349c <__aeabi_uidiv>
   1cc94:	0003      	movs	r3, r0
   1cc96:	001a      	movs	r2, r3
   1cc98:	4b24      	ldr	r3, [pc, #144]	; (1cd2c <hal_i2c_init+0xe8>)
   1cc9a:	601a      	str	r2, [r3, #0]

        switch (cfg->atcai2c.bus)
   1cc9c:	683b      	ldr	r3, [r7, #0]
   1cc9e:	795b      	ldrb	r3, [r3, #5]
   1cca0:	2b05      	cmp	r3, #5
   1cca2:	d81c      	bhi.n	1ccde <hal_i2c_init+0x9a>
   1cca4:	009a      	lsls	r2, r3, #2
   1cca6:	4b22      	ldr	r3, [pc, #136]	; (1cd30 <hal_i2c_init+0xec>)
   1cca8:	18d3      	adds	r3, r2, r3
   1ccaa:	681b      	ldr	r3, [r3, #0]
   1ccac:	469f      	mov	pc, r3
        {
        case 0:
            data->i2c_sercom = SERCOM0;
   1ccae:	68fb      	ldr	r3, [r7, #12]
   1ccb0:	4a20      	ldr	r2, [pc, #128]	; (1cd34 <hal_i2c_init+0xf0>)
   1ccb2:	601a      	str	r2, [r3, #0]
#ifdef __SAMD21G18A__
            config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
            config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
#endif
            break;
   1ccb4:	e015      	b.n	1cce2 <hal_i2c_init+0x9e>
        case 1:
            data->i2c_sercom = SERCOM1;
   1ccb6:	68fb      	ldr	r3, [r7, #12]
   1ccb8:	4a1f      	ldr	r2, [pc, #124]	; (1cd38 <hal_i2c_init+0xf4>)
   1ccba:	601a      	str	r2, [r3, #0]
#ifdef __SAMR21G18A__
            config_i2c_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
            config_i2c_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
#endif
            break;
   1ccbc:	e011      	b.n	1cce2 <hal_i2c_init+0x9e>
        case 2:
            data->i2c_sercom = SERCOM2;
   1ccbe:	68fb      	ldr	r3, [r7, #12]
   1ccc0:	4a1e      	ldr	r2, [pc, #120]	; (1cd3c <hal_i2c_init+0xf8>)
   1ccc2:	601a      	str	r2, [r3, #0]
            break;
   1ccc4:	e00d      	b.n	1cce2 <hal_i2c_init+0x9e>
        case 3:
            data->i2c_sercom = SERCOM3;
   1ccc6:	68fb      	ldr	r3, [r7, #12]
   1ccc8:	4a1d      	ldr	r2, [pc, #116]	; (1cd40 <hal_i2c_init+0xfc>)
   1ccca:	601a      	str	r2, [r3, #0]
            break;
   1cccc:	e009      	b.n	1cce2 <hal_i2c_init+0x9e>
        case 4:
            data->i2c_sercom = SERCOM4;
   1ccce:	68fb      	ldr	r3, [r7, #12]
   1ccd0:	4a1c      	ldr	r2, [pc, #112]	; (1cd44 <hal_i2c_init+0x100>)
   1ccd2:	601a      	str	r2, [r3, #0]
            break;
   1ccd4:	e005      	b.n	1cce2 <hal_i2c_init+0x9e>
        case 5:
            data->i2c_sercom = SERCOM5;
   1ccd6:	68fb      	ldr	r3, [r7, #12]
   1ccd8:	4a1b      	ldr	r2, [pc, #108]	; (1cd48 <hal_i2c_init+0x104>)
   1ccda:	601a      	str	r2, [r3, #0]
            break;
   1ccdc:	e001      	b.n	1cce2 <hal_i2c_init+0x9e>
        default:
            return ATCA_COMM_FAIL;
   1ccde:	23f0      	movs	r3, #240	; 0xf0
   1cce0:	e01e      	b.n	1cd20 <hal_i2c_init+0xdc>
        }

        i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
   1cce2:	68fb      	ldr	r3, [r7, #12]
   1cce4:	1d18      	adds	r0, r3, #4
   1cce6:	68fb      	ldr	r3, [r7, #12]
   1cce8:	681b      	ldr	r3, [r3, #0]
   1ccea:	4a10      	ldr	r2, [pc, #64]	; (1cd2c <hal_i2c_init+0xe8>)
   1ccec:	0019      	movs	r1, r3
   1ccee:	f7e4 fb47 	bl	1380 <i2c_master_init>
        i2c_master_enable(&data->i2c_master_instance);
   1ccf2:	68fb      	ldr	r3, [r7, #12]
   1ccf4:	3304      	adds	r3, #4
   1ccf6:	0018      	movs	r0, r3
   1ccf8:	f7ff ff5c 	bl	1cbb4 <i2c_master_enable>

        // store this for use during the release phase
        data->bus_index = cfg->atcai2c.bus;
   1ccfc:	683b      	ldr	r3, [r7, #0]
   1ccfe:	795b      	ldrb	r3, [r3, #5]
   1cd00:	001a      	movs	r2, r3
   1cd02:	68fb      	ldr	r3, [r7, #12]
   1cd04:	615a      	str	r2, [r3, #20]
        // buses are shared, this is the first instance
        data->ref_ct = 1;
   1cd06:	68fb      	ldr	r3, [r7, #12]
   1cd08:	2201      	movs	r2, #1
   1cd0a:	611a      	str	r2, [r3, #16]
   1cd0c:	e004      	b.n	1cd18 <hal_i2c_init+0xd4>
    }
    else
    {
        // Bus is already is use, increment reference counter
        data->ref_ct++;
   1cd0e:	68fb      	ldr	r3, [r7, #12]
   1cd10:	691b      	ldr	r3, [r3, #16]
   1cd12:	1c5a      	adds	r2, r3, #1
   1cd14:	68fb      	ldr	r3, [r7, #12]
   1cd16:	611a      	str	r2, [r3, #16]
    }

    ((ATCAHAL_t*)hal)->hal_data = data;
   1cd18:	687b      	ldr	r3, [r7, #4]
   1cd1a:	68fa      	ldr	r2, [r7, #12]
   1cd1c:	621a      	str	r2, [r3, #32]

    return ATCA_SUCCESS;
   1cd1e:	2300      	movs	r3, #0
}
   1cd20:	0018      	movs	r0, r3
   1cd22:	46bd      	mov	sp, r7
   1cd24:	b004      	add	sp, #16
   1cd26:	bd80      	pop	{r7, pc}
   1cd28:	200003b4 	.word	0x200003b4
   1cd2c:	20000444 	.word	0x20000444
   1cd30:	0002e4a0 	.word	0x0002e4a0
   1cd34:	42000800 	.word	0x42000800
   1cd38:	42000c00 	.word	0x42000c00
   1cd3c:	42001000 	.word	0x42001000
   1cd40:	42001400 	.word	0x42001400
   1cd44:	42001800 	.word	0x42001800
   1cd48:	42001c00 	.word	0x42001c00

0001cd4c <hal_i2c_post_init>:
/** \brief HAL implementation of I2C post init
 * \param[in] iface  instance
 * \return ATCA_SUCCESS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
   1cd4c:	b580      	push	{r7, lr}
   1cd4e:	b082      	sub	sp, #8
   1cd50:	af00      	add	r7, sp, #0
   1cd52:	6078      	str	r0, [r7, #4]
    return ATCA_SUCCESS;
   1cd54:	2300      	movs	r3, #0
}
   1cd56:	0018      	movs	r0, r3
   1cd58:	46bd      	mov	sp, r7
   1cd5a:	b002      	add	sp, #8
   1cd5c:	bd80      	pop	{r7, pc}
   1cd5e:	46c0      	nop			; (mov r8, r8)

0001cd60 <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
   1cd60:	b580      	push	{r7, lr}
   1cd62:	b088      	sub	sp, #32
   1cd64:	af00      	add	r7, sp, #0
   1cd66:	60f8      	str	r0, [r7, #12]
   1cd68:	60b9      	str	r1, [r7, #8]
   1cd6a:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   1cd6c:	68fb      	ldr	r3, [r7, #12]
   1cd6e:	0018      	movs	r0, r3
   1cd70:	f7ff fac0 	bl	1c2f4 <atgetifacecfg>
   1cd74:	0003      	movs	r3, r0
   1cd76:	61fb      	str	r3, [r7, #28]

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   1cd78:	69fb      	ldr	r3, [r7, #28]
   1cd7a:	791b      	ldrb	r3, [r3, #4]

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);

    struct i2c_master_packet packet = {
   1cd7c:	085b      	lsrs	r3, r3, #1
   1cd7e:	b2db      	uxtb	r3, r3
   1cd80:	b29a      	uxth	r2, r3
   1cd82:	2310      	movs	r3, #16
   1cd84:	18fb      	adds	r3, r7, r3
   1cd86:	801a      	strh	r2, [r3, #0]
   1cd88:	687b      	ldr	r3, [r7, #4]
   1cd8a:	b29a      	uxth	r2, r3
   1cd8c:	2310      	movs	r3, #16
   1cd8e:	18fb      	adds	r3, r7, r3
   1cd90:	805a      	strh	r2, [r3, #2]
   1cd92:	2310      	movs	r3, #16
   1cd94:	18fb      	adds	r3, r7, r3
   1cd96:	68ba      	ldr	r2, [r7, #8]
   1cd98:	605a      	str	r2, [r3, #4]
   1cd9a:	2310      	movs	r3, #16
   1cd9c:	18fb      	adds	r3, r7, r3
   1cd9e:	2200      	movs	r2, #0
   1cda0:	721a      	strb	r2, [r3, #8]
   1cda2:	2310      	movs	r3, #16
   1cda4:	18fb      	adds	r3, r7, r3
   1cda6:	2200      	movs	r2, #0
   1cda8:	725a      	strb	r2, [r3, #9]
   1cdaa:	2310      	movs	r3, #16
   1cdac:	18fb      	adds	r3, r7, r3
   1cdae:	2200      	movs	r2, #0
   1cdb0:	729a      	strb	r2, [r3, #10]

    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format
    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
   1cdb2:	68bb      	ldr	r3, [r7, #8]
   1cdb4:	2203      	movs	r2, #3
   1cdb6:	701a      	strb	r2, [r3, #0]
    txlength++;         // account for word address value byte.
   1cdb8:	687b      	ldr	r3, [r7, #4]
   1cdba:	3301      	adds	r3, #1
   1cdbc:	607b      	str	r3, [r7, #4]
    packet.data_length = txlength;
   1cdbe:	687b      	ldr	r3, [r7, #4]
   1cdc0:	b29a      	uxth	r2, r3
   1cdc2:	2310      	movs	r3, #16
   1cdc4:	18fb      	adds	r3, r7, r3
   1cdc6:	805a      	strh	r2, [r3, #2]

    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
   1cdc8:	69fb      	ldr	r3, [r7, #28]
   1cdca:	795b      	ldrb	r3, [r3, #5]
   1cdcc:	001a      	movs	r2, r3
   1cdce:	0013      	movs	r3, r2
   1cdd0:	005b      	lsls	r3, r3, #1
   1cdd2:	189b      	adds	r3, r3, r2
   1cdd4:	00db      	lsls	r3, r3, #3
   1cdd6:	4a09      	ldr	r2, [pc, #36]	; (1cdfc <hal_i2c_send+0x9c>)
   1cdd8:	189b      	adds	r3, r3, r2
   1cdda:	3304      	adds	r3, #4
   1cddc:	2210      	movs	r2, #16
   1cdde:	18ba      	adds	r2, r7, r2
   1cde0:	0011      	movs	r1, r2
   1cde2:	0018      	movs	r0, r3
   1cde4:	f7e4 fdc4 	bl	1970 <i2c_master_write_packet_wait>
   1cde8:	1e03      	subs	r3, r0, #0
   1cdea:	d001      	beq.n	1cdf0 <hal_i2c_send+0x90>
    {
        return ATCA_COMM_FAIL;
   1cdec:	23f0      	movs	r3, #240	; 0xf0
   1cdee:	e000      	b.n	1cdf2 <hal_i2c_send+0x92>
    }

    return ATCA_SUCCESS;
   1cdf0:	2300      	movs	r3, #0
}
   1cdf2:	0018      	movs	r0, r3
   1cdf4:	46bd      	mov	sp, r7
   1cdf6:	b008      	add	sp, #32
   1cdf8:	bd80      	pop	{r7, pc}
   1cdfa:	46c0      	nop			; (mov r8, r8)
   1cdfc:	200003b4 	.word	0x200003b4

0001ce00 <hal_i2c_receive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
   1ce00:	b580      	push	{r7, lr}
   1ce02:	b08c      	sub	sp, #48	; 0x30
   1ce04:	af00      	add	r7, sp, #0
   1ce06:	60f8      	str	r0, [r7, #12]
   1ce08:	60b9      	str	r1, [r7, #8]
   1ce0a:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   1ce0c:	68fb      	ldr	r3, [r7, #12]
   1ce0e:	0018      	movs	r0, r3
   1ce10:	f7ff fa70 	bl	1c2f4 <atgetifacecfg>
   1ce14:	0003      	movs	r3, r0
   1ce16:	627b      	str	r3, [r7, #36]	; 0x24
    int retries = cfg->rx_retries;
   1ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ce1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ce1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int status = !ATCA_SUCCESS;
   1ce1e:	2301      	movs	r3, #1
   1ce20:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t rxdata_max_size = *rxlength;
   1ce22:	2322      	movs	r3, #34	; 0x22
   1ce24:	18fb      	adds	r3, r7, r3
   1ce26:	687a      	ldr	r2, [r7, #4]
   1ce28:	8812      	ldrh	r2, [r2, #0]
   1ce2a:	801a      	strh	r2, [r3, #0]

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   1ce2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ce2e:	791b      	ldrb	r3, [r3, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    int retries = cfg->rx_retries;
    int status = !ATCA_SUCCESS;
    uint16_t rxdata_max_size = *rxlength;

    struct i2c_master_packet packet = {
   1ce30:	085b      	lsrs	r3, r3, #1
   1ce32:	b2db      	uxtb	r3, r3
   1ce34:	b29a      	uxth	r2, r3
   1ce36:	2314      	movs	r3, #20
   1ce38:	18fb      	adds	r3, r7, r3
   1ce3a:	801a      	strh	r2, [r3, #0]
   1ce3c:	2314      	movs	r3, #20
   1ce3e:	18fb      	adds	r3, r7, r3
   1ce40:	2201      	movs	r2, #1
   1ce42:	805a      	strh	r2, [r3, #2]
   1ce44:	2314      	movs	r3, #20
   1ce46:	18fb      	adds	r3, r7, r3
   1ce48:	68ba      	ldr	r2, [r7, #8]
   1ce4a:	605a      	str	r2, [r3, #4]
   1ce4c:	2314      	movs	r3, #20
   1ce4e:	18fb      	adds	r3, r7, r3
   1ce50:	2200      	movs	r2, #0
   1ce52:	721a      	strb	r2, [r3, #8]
   1ce54:	2314      	movs	r3, #20
   1ce56:	18fb      	adds	r3, r7, r3
   1ce58:	2200      	movs	r2, #0
   1ce5a:	725a      	strb	r2, [r3, #9]
   1ce5c:	2314      	movs	r3, #20
   1ce5e:	18fb      	adds	r3, r7, r3
   1ce60:	2200      	movs	r2, #0
   1ce62:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    *rxlength = 0;
   1ce64:	687b      	ldr	r3, [r7, #4]
   1ce66:	2200      	movs	r2, #0
   1ce68:	801a      	strh	r2, [r3, #0]
    if (rxdata_max_size < 1)
   1ce6a:	2322      	movs	r3, #34	; 0x22
   1ce6c:	18fb      	adds	r3, r7, r3
   1ce6e:	881b      	ldrh	r3, [r3, #0]
   1ce70:	2b00      	cmp	r3, #0
   1ce72:	d118      	bne.n	1cea6 <hal_i2c_receive+0xa6>
    {
        return ATCA_SMALL_BUFFER;
   1ce74:	23ed      	movs	r3, #237	; 0xed
   1ce76:	e064      	b.n	1cf42 <hal_i2c_receive+0x142>
    }

    while (retries-- > 0 && status != ATCA_SUCCESS)
    {
        if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
   1ce78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ce7a:	795b      	ldrb	r3, [r3, #5]
   1ce7c:	001a      	movs	r2, r3
   1ce7e:	0013      	movs	r3, r2
   1ce80:	005b      	lsls	r3, r3, #1
   1ce82:	189b      	adds	r3, r3, r2
   1ce84:	00db      	lsls	r3, r3, #3
   1ce86:	4a31      	ldr	r2, [pc, #196]	; (1cf4c <hal_i2c_receive+0x14c>)
   1ce88:	189b      	adds	r3, r3, r2
   1ce8a:	3304      	adds	r3, #4
   1ce8c:	2214      	movs	r2, #20
   1ce8e:	18ba      	adds	r2, r7, r2
   1ce90:	0011      	movs	r1, r2
   1ce92:	0018      	movs	r0, r3
   1ce94:	f7e4 fca2 	bl	17dc <i2c_master_read_packet_wait>
   1ce98:	1e03      	subs	r3, r0, #0
   1ce9a:	d002      	beq.n	1cea2 <hal_i2c_receive+0xa2>
        {
            status = ATCA_COMM_FAIL;
   1ce9c:	23f0      	movs	r3, #240	; 0xf0
   1ce9e:	62bb      	str	r3, [r7, #40]	; 0x28
   1cea0:	e001      	b.n	1cea6 <hal_i2c_receive+0xa6>
        }
        else
        {
            status = ATCA_SUCCESS;
   1cea2:	2300      	movs	r3, #0
   1cea4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (rxdata_max_size < 1)
    {
        return ATCA_SMALL_BUFFER;
    }

    while (retries-- > 0 && status != ATCA_SUCCESS)
   1cea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cea8:	1e5a      	subs	r2, r3, #1
   1ceaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   1ceac:	2b00      	cmp	r3, #0
   1ceae:	dd02      	ble.n	1ceb6 <hal_i2c_receive+0xb6>
   1ceb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ceb2:	2b00      	cmp	r3, #0
   1ceb4:	d1e0      	bne.n	1ce78 <hal_i2c_receive+0x78>
        else
        {
            status = ATCA_SUCCESS;
        }
    }
    if (status != ATCA_SUCCESS)
   1ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ceb8:	2b00      	cmp	r3, #0
   1ceba:	d002      	beq.n	1cec2 <hal_i2c_receive+0xc2>
    {
        return status;
   1cebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cebe:	b2db      	uxtb	r3, r3
   1cec0:	e03f      	b.n	1cf42 <hal_i2c_receive+0x142>
    }
    if (rxdata[0] < ATCA_RSP_SIZE_MIN)
   1cec2:	68bb      	ldr	r3, [r7, #8]
   1cec4:	781b      	ldrb	r3, [r3, #0]
   1cec6:	2b03      	cmp	r3, #3
   1cec8:	d801      	bhi.n	1cece <hal_i2c_receive+0xce>
    {
        return ATCA_INVALID_SIZE;
   1ceca:	23e4      	movs	r3, #228	; 0xe4
   1cecc:	e039      	b.n	1cf42 <hal_i2c_receive+0x142>
    }
    if (rxdata[0] > rxdata_max_size)
   1cece:	68bb      	ldr	r3, [r7, #8]
   1ced0:	781b      	ldrb	r3, [r3, #0]
   1ced2:	b29b      	uxth	r3, r3
   1ced4:	2222      	movs	r2, #34	; 0x22
   1ced6:	18ba      	adds	r2, r7, r2
   1ced8:	8812      	ldrh	r2, [r2, #0]
   1ceda:	429a      	cmp	r2, r3
   1cedc:	d201      	bcs.n	1cee2 <hal_i2c_receive+0xe2>
    {
        return ATCA_SMALL_BUFFER;
   1cede:	23ed      	movs	r3, #237	; 0xed
   1cee0:	e02f      	b.n	1cf42 <hal_i2c_receive+0x142>
    }

    //Update receive length with first byte received and set to read rest of the data
    packet.data_length = rxdata[0] - 1;
   1cee2:	68bb      	ldr	r3, [r7, #8]
   1cee4:	781b      	ldrb	r3, [r3, #0]
   1cee6:	b29b      	uxth	r3, r3
   1cee8:	3b01      	subs	r3, #1
   1ceea:	b29a      	uxth	r2, r3
   1ceec:	2314      	movs	r3, #20
   1ceee:	18fb      	adds	r3, r7, r3
   1cef0:	805a      	strh	r2, [r3, #2]
    packet.data = &rxdata[1];
   1cef2:	68bb      	ldr	r3, [r7, #8]
   1cef4:	1c5a      	adds	r2, r3, #1
   1cef6:	2314      	movs	r3, #20
   1cef8:	18fb      	adds	r3, r7, r3
   1cefa:	605a      	str	r2, [r3, #4]

    if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
   1cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cefe:	795b      	ldrb	r3, [r3, #5]
   1cf00:	001a      	movs	r2, r3
   1cf02:	0013      	movs	r3, r2
   1cf04:	005b      	lsls	r3, r3, #1
   1cf06:	189b      	adds	r3, r3, r2
   1cf08:	00db      	lsls	r3, r3, #3
   1cf0a:	4a10      	ldr	r2, [pc, #64]	; (1cf4c <hal_i2c_receive+0x14c>)
   1cf0c:	189b      	adds	r3, r3, r2
   1cf0e:	3304      	adds	r3, #4
   1cf10:	2214      	movs	r2, #20
   1cf12:	18ba      	adds	r2, r7, r2
   1cf14:	0011      	movs	r1, r2
   1cf16:	0018      	movs	r0, r3
   1cf18:	f7e4 fc60 	bl	17dc <i2c_master_read_packet_wait>
   1cf1c:	1e03      	subs	r3, r0, #0
   1cf1e:	d002      	beq.n	1cf26 <hal_i2c_receive+0x126>
    {
        status = ATCA_COMM_FAIL;
   1cf20:	23f0      	movs	r3, #240	; 0xf0
   1cf22:	62bb      	str	r3, [r7, #40]	; 0x28
   1cf24:	e001      	b.n	1cf2a <hal_i2c_receive+0x12a>
    }
    else
    {
        status = ATCA_SUCCESS;
   1cf26:	2300      	movs	r3, #0
   1cf28:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (status != ATCA_SUCCESS)
   1cf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cf2c:	2b00      	cmp	r3, #0
   1cf2e:	d002      	beq.n	1cf36 <hal_i2c_receive+0x136>
    {
        return status;
   1cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cf32:	b2db      	uxtb	r3, r3
   1cf34:	e005      	b.n	1cf42 <hal_i2c_receive+0x142>
    }

    *rxlength = rxdata[0];
   1cf36:	68bb      	ldr	r3, [r7, #8]
   1cf38:	781b      	ldrb	r3, [r3, #0]
   1cf3a:	b29a      	uxth	r2, r3
   1cf3c:	687b      	ldr	r3, [r7, #4]
   1cf3e:	801a      	strh	r2, [r3, #0]

    return ATCA_SUCCESS;
   1cf40:	2300      	movs	r3, #0
}
   1cf42:	0018      	movs	r0, r3
   1cf44:	46bd      	mov	sp, r7
   1cf46:	b00c      	add	sp, #48	; 0x30
   1cf48:	bd80      	pop	{r7, pc}
   1cf4a:	46c0      	nop			; (mov r8, r8)
   1cf4c:	200003b4 	.word	0x200003b4

0001cf50 <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
   1cf50:	b580      	push	{r7, lr}
   1cf52:	b084      	sub	sp, #16
   1cf54:	af00      	add	r7, sp, #0
   1cf56:	6078      	str	r0, [r7, #4]
   1cf58:	6039      	str	r1, [r7, #0]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   1cf5a:	687b      	ldr	r3, [r7, #4]
   1cf5c:	0018      	movs	r0, r3
   1cf5e:	f7ff f9c9 	bl	1c2f4 <atgetifacecfg>
   1cf62:	0003      	movs	r3, r0
   1cf64:	60fb      	str	r3, [r7, #12]
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
   1cf66:	68fb      	ldr	r3, [r7, #12]
   1cf68:	795b      	ldrb	r3, [r3, #5]
   1cf6a:	001a      	movs	r2, r3
   1cf6c:	0013      	movs	r3, r2
   1cf6e:	005b      	lsls	r3, r3, #1
   1cf70:	189b      	adds	r3, r3, r2
   1cf72:	00db      	lsls	r3, r3, #3
   1cf74:	4a12      	ldr	r2, [pc, #72]	; (1cfc0 <change_i2c_speed+0x70>)
   1cf76:	189b      	adds	r3, r3, r2
   1cf78:	60bb      	str	r3, [r7, #8]

    i2c_master_disable(&data->i2c_master_instance);
   1cf7a:	68bb      	ldr	r3, [r7, #8]
   1cf7c:	3304      	adds	r3, #4
   1cf7e:	0018      	movs	r0, r3
   1cf80:	f7ff fe44 	bl	1cc0c <i2c_master_disable>
    config_i2c_master.buffer_timeout = 10000;
   1cf84:	4b0f      	ldr	r3, [pc, #60]	; (1cfc4 <change_i2c_speed+0x74>)
   1cf86:	4a10      	ldr	r2, [pc, #64]	; (1cfc8 <change_i2c_speed+0x78>)
   1cf88:	82da      	strh	r2, [r3, #22]
    config_i2c_master.baud_rate = speed / 1000;
   1cf8a:	683a      	ldr	r2, [r7, #0]
   1cf8c:	23fa      	movs	r3, #250	; 0xfa
   1cf8e:	0099      	lsls	r1, r3, #2
   1cf90:	0010      	movs	r0, r2
   1cf92:	f006 fa83 	bl	2349c <__aeabi_uidiv>
   1cf96:	0003      	movs	r3, r0
   1cf98:	001a      	movs	r2, r3
   1cf9a:	4b0a      	ldr	r3, [pc, #40]	; (1cfc4 <change_i2c_speed+0x74>)
   1cf9c:	601a      	str	r2, [r3, #0]
    i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
   1cf9e:	68bb      	ldr	r3, [r7, #8]
   1cfa0:	1d18      	adds	r0, r3, #4
   1cfa2:	68bb      	ldr	r3, [r7, #8]
   1cfa4:	681b      	ldr	r3, [r3, #0]
   1cfa6:	4a07      	ldr	r2, [pc, #28]	; (1cfc4 <change_i2c_speed+0x74>)
   1cfa8:	0019      	movs	r1, r3
   1cfaa:	f7e4 f9e9 	bl	1380 <i2c_master_init>
    i2c_master_enable(&data->i2c_master_instance);
   1cfae:	68bb      	ldr	r3, [r7, #8]
   1cfb0:	3304      	adds	r3, #4
   1cfb2:	0018      	movs	r0, r3
   1cfb4:	f7ff fdfe 	bl	1cbb4 <i2c_master_enable>
}
   1cfb8:	46c0      	nop			; (mov r8, r8)
   1cfba:	46bd      	mov	sp, r7
   1cfbc:	b004      	add	sp, #16
   1cfbe:	bd80      	pop	{r7, pc}
   1cfc0:	200003b4 	.word	0x200003b4
   1cfc4:	20000444 	.word	0x20000444
   1cfc8:	00002710 	.word	0x00002710

0001cfcc <hal_i2c_wake>:
 * \param[in] iface  interface to logical device to wakeup
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
   1cfcc:	b580      	push	{r7, lr}
   1cfce:	b08a      	sub	sp, #40	; 0x28
   1cfd0:	af00      	add	r7, sp, #0
   1cfd2:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   1cfd4:	687b      	ldr	r3, [r7, #4]
   1cfd6:	0018      	movs	r0, r3
   1cfd8:	f7ff f98c 	bl	1c2f4 <atgetifacecfg>
   1cfdc:	0003      	movs	r3, r0
   1cfde:	61fb      	str	r3, [r7, #28]
    int retries = cfg->rx_retries;
   1cfe0:	69fb      	ldr	r3, [r7, #28]
   1cfe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cfe4:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t bdrt = cfg->atcai2c.baud;
   1cfe6:	69fb      	ldr	r3, [r7, #28]
   1cfe8:	689b      	ldr	r3, [r3, #8]
   1cfea:	61bb      	str	r3, [r7, #24]
    int status = !STATUS_OK;
   1cfec:	2301      	movs	r3, #1
   1cfee:	623b      	str	r3, [r7, #32]
    uint8_t data[4];

    if (bdrt != 100000)    // if not already at 100KHz, change it
   1cff0:	69bb      	ldr	r3, [r7, #24]
   1cff2:	4a3e      	ldr	r2, [pc, #248]	; (1d0ec <hal_i2c_wake+0x120>)
   1cff4:	4293      	cmp	r3, r2
   1cff6:	d005      	beq.n	1d004 <hal_i2c_wake+0x38>
    {
        change_i2c_speed(iface, 100000);
   1cff8:	4a3c      	ldr	r2, [pc, #240]	; (1d0ec <hal_i2c_wake+0x120>)
   1cffa:	687b      	ldr	r3, [r7, #4]
   1cffc:	0011      	movs	r1, r2
   1cffe:	0018      	movs	r0, r3
   1d000:	f7ff ffa6 	bl	1cf50 <change_i2c_speed>
    }

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
   1d004:	2308      	movs	r3, #8
   1d006:	18fb      	adds	r3, r7, r3
   1d008:	2200      	movs	r2, #0
   1d00a:	801a      	strh	r2, [r3, #0]
   1d00c:	2308      	movs	r3, #8
   1d00e:	18fb      	adds	r3, r7, r3
   1d010:	2200      	movs	r2, #0
   1d012:	805a      	strh	r2, [r3, #2]
   1d014:	2308      	movs	r3, #8
   1d016:	18fb      	adds	r3, r7, r3
   1d018:	2214      	movs	r2, #20
   1d01a:	18ba      	adds	r2, r7, r2
   1d01c:	605a      	str	r2, [r3, #4]
   1d01e:	2308      	movs	r3, #8
   1d020:	18fb      	adds	r3, r7, r3
   1d022:	2200      	movs	r2, #0
   1d024:	721a      	strb	r2, [r3, #8]
   1d026:	2308      	movs	r3, #8
   1d028:	18fb      	adds	r3, r7, r3
   1d02a:	2200      	movs	r2, #0
   1d02c:	725a      	strb	r2, [r3, #9]
   1d02e:	2308      	movs	r3, #8
   1d030:	18fb      	adds	r3, r7, r3
   1d032:	2200      	movs	r2, #0
   1d034:	729a      	strb	r2, [r3, #10]
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    // part will NACK, so don't check for status
    i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
   1d036:	69fb      	ldr	r3, [r7, #28]
   1d038:	795b      	ldrb	r3, [r3, #5]
   1d03a:	001a      	movs	r2, r3
   1d03c:	0013      	movs	r3, r2
   1d03e:	005b      	lsls	r3, r3, #1
   1d040:	189b      	adds	r3, r3, r2
   1d042:	00db      	lsls	r3, r3, #3
   1d044:	4a2a      	ldr	r2, [pc, #168]	; (1d0f0 <hal_i2c_wake+0x124>)
   1d046:	189b      	adds	r3, r3, r2
   1d048:	3304      	adds	r3, #4
   1d04a:	2208      	movs	r2, #8
   1d04c:	18ba      	adds	r2, r7, r2
   1d04e:	0011      	movs	r1, r2
   1d050:	0018      	movs	r0, r3
   1d052:	f7e4 fc8d 	bl	1970 <i2c_master_write_packet_wait>

    // wait tWHI + tWLO which is configured based on device type and configuration structure
    atca_delay_us(cfg->wake_delay);
   1d056:	69fb      	ldr	r3, [r7, #28]
   1d058:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1d05a:	0018      	movs	r0, r3
   1d05c:	f000 f8f6 	bl	1d24c <atca_delay_us>

    packet.address = cfg->atcai2c.slave_address >> 1;
   1d060:	69fb      	ldr	r3, [r7, #28]
   1d062:	791b      	ldrb	r3, [r3, #4]
   1d064:	085b      	lsrs	r3, r3, #1
   1d066:	b2db      	uxtb	r3, r3
   1d068:	b29a      	uxth	r2, r3
   1d06a:	2308      	movs	r3, #8
   1d06c:	18fb      	adds	r3, r7, r3
   1d06e:	801a      	strh	r2, [r3, #0]
    packet.data_length = 4;
   1d070:	2308      	movs	r3, #8
   1d072:	18fb      	adds	r3, r7, r3
   1d074:	2204      	movs	r2, #4
   1d076:	805a      	strh	r2, [r3, #2]
    packet.data = data;
   1d078:	2308      	movs	r3, #8
   1d07a:	18fb      	adds	r3, r7, r3
   1d07c:	2214      	movs	r2, #20
   1d07e:	18ba      	adds	r2, r7, r2
   1d080:	605a      	str	r2, [r3, #4]

    while (retries-- > 0 && status != STATUS_OK)
   1d082:	e011      	b.n	1d0a8 <hal_i2c_wake+0xdc>
    {
        status = i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
   1d084:	69fb      	ldr	r3, [r7, #28]
   1d086:	795b      	ldrb	r3, [r3, #5]
   1d088:	001a      	movs	r2, r3
   1d08a:	0013      	movs	r3, r2
   1d08c:	005b      	lsls	r3, r3, #1
   1d08e:	189b      	adds	r3, r3, r2
   1d090:	00db      	lsls	r3, r3, #3
   1d092:	4a17      	ldr	r2, [pc, #92]	; (1d0f0 <hal_i2c_wake+0x124>)
   1d094:	189b      	adds	r3, r3, r2
   1d096:	3304      	adds	r3, #4
   1d098:	2208      	movs	r2, #8
   1d09a:	18ba      	adds	r2, r7, r2
   1d09c:	0011      	movs	r1, r2
   1d09e:	0018      	movs	r0, r3
   1d0a0:	f7e4 fb9c 	bl	17dc <i2c_master_read_packet_wait>
   1d0a4:	0003      	movs	r3, r0
   1d0a6:	623b      	str	r3, [r7, #32]

    packet.address = cfg->atcai2c.slave_address >> 1;
    packet.data_length = 4;
    packet.data = data;

    while (retries-- > 0 && status != STATUS_OK)
   1d0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d0aa:	1e5a      	subs	r2, r3, #1
   1d0ac:	627a      	str	r2, [r7, #36]	; 0x24
   1d0ae:	2b00      	cmp	r3, #0
   1d0b0:	dd02      	ble.n	1d0b8 <hal_i2c_wake+0xec>
   1d0b2:	6a3b      	ldr	r3, [r7, #32]
   1d0b4:	2b00      	cmp	r3, #0
   1d0b6:	d1e5      	bne.n	1d084 <hal_i2c_wake+0xb8>
    {
        status = i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    }

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
   1d0b8:	69bb      	ldr	r3, [r7, #24]
   1d0ba:	4a0c      	ldr	r2, [pc, #48]	; (1d0ec <hal_i2c_wake+0x120>)
   1d0bc:	4293      	cmp	r3, r2
   1d0be:	d005      	beq.n	1d0cc <hal_i2c_wake+0x100>
    {
        change_i2c_speed(iface, bdrt);
   1d0c0:	69ba      	ldr	r2, [r7, #24]
   1d0c2:	687b      	ldr	r3, [r7, #4]
   1d0c4:	0011      	movs	r1, r2
   1d0c6:	0018      	movs	r0, r3
   1d0c8:	f7ff ff42 	bl	1cf50 <change_i2c_speed>
    }

    if (status != STATUS_OK)
   1d0cc:	6a3b      	ldr	r3, [r7, #32]
   1d0ce:	2b00      	cmp	r3, #0
   1d0d0:	d001      	beq.n	1d0d6 <hal_i2c_wake+0x10a>
    {
        return ATCA_COMM_FAIL;
   1d0d2:	23f0      	movs	r3, #240	; 0xf0
   1d0d4:	e006      	b.n	1d0e4 <hal_i2c_wake+0x118>
    }

    return hal_check_wake(data, 4);
   1d0d6:	2314      	movs	r3, #20
   1d0d8:	18fb      	adds	r3, r7, r3
   1d0da:	2104      	movs	r1, #4
   1d0dc:	0018      	movs	r0, r3
   1d0de:	f7ff fcc9 	bl	1ca74 <hal_check_wake>
   1d0e2:	0003      	movs	r3, r0
}
   1d0e4:	0018      	movs	r0, r3
   1d0e6:	46bd      	mov	sp, r7
   1d0e8:	b00a      	add	sp, #40	; 0x28
   1d0ea:	bd80      	pop	{r7, pc}
   1d0ec:	000186a0 	.word	0x000186a0
   1d0f0:	200003b4 	.word	0x200003b4

0001d0f4 <hal_i2c_idle>:
 * \param[in] iface  interface to logical device to idle
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
   1d0f4:	b580      	push	{r7, lr}
   1d0f6:	b088      	sub	sp, #32
   1d0f8:	af00      	add	r7, sp, #0
   1d0fa:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   1d0fc:	687b      	ldr	r3, [r7, #4]
   1d0fe:	0018      	movs	r0, r3
   1d100:	f7ff f8f8 	bl	1c2f4 <atgetifacecfg>
   1d104:	0003      	movs	r3, r0
   1d106:	61fb      	str	r3, [r7, #28]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   1d108:	69fb      	ldr	r3, [r7, #28]
   1d10a:	791b      	ldrb	r3, [r3, #4]
ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    uint8_t data[4];

    struct i2c_master_packet packet = {
   1d10c:	085b      	lsrs	r3, r3, #1
   1d10e:	b2db      	uxtb	r3, r3
   1d110:	b29a      	uxth	r2, r3
   1d112:	230c      	movs	r3, #12
   1d114:	18fb      	adds	r3, r7, r3
   1d116:	801a      	strh	r2, [r3, #0]
   1d118:	230c      	movs	r3, #12
   1d11a:	18fb      	adds	r3, r7, r3
   1d11c:	2201      	movs	r2, #1
   1d11e:	805a      	strh	r2, [r3, #2]
   1d120:	230c      	movs	r3, #12
   1d122:	18fb      	adds	r3, r7, r3
   1d124:	2218      	movs	r2, #24
   1d126:	18ba      	adds	r2, r7, r2
   1d128:	605a      	str	r2, [r3, #4]
   1d12a:	230c      	movs	r3, #12
   1d12c:	18fb      	adds	r3, r7, r3
   1d12e:	2200      	movs	r2, #0
   1d130:	721a      	strb	r2, [r3, #8]
   1d132:	230c      	movs	r3, #12
   1d134:	18fb      	adds	r3, r7, r3
   1d136:	2200      	movs	r2, #0
   1d138:	725a      	strb	r2, [r3, #9]
   1d13a:	230c      	movs	r3, #12
   1d13c:	18fb      	adds	r3, r7, r3
   1d13e:	2200      	movs	r2, #0
   1d140:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
   1d142:	2318      	movs	r3, #24
   1d144:	18fb      	adds	r3, r7, r3
   1d146:	2202      	movs	r2, #2
   1d148:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
   1d14a:	69fb      	ldr	r3, [r7, #28]
   1d14c:	795b      	ldrb	r3, [r3, #5]
   1d14e:	001a      	movs	r2, r3
   1d150:	0013      	movs	r3, r2
   1d152:	005b      	lsls	r3, r3, #1
   1d154:	189b      	adds	r3, r3, r2
   1d156:	00db      	lsls	r3, r3, #3
   1d158:	4a08      	ldr	r2, [pc, #32]	; (1d17c <hal_i2c_idle+0x88>)
   1d15a:	189b      	adds	r3, r3, r2
   1d15c:	3304      	adds	r3, #4
   1d15e:	220c      	movs	r2, #12
   1d160:	18ba      	adds	r2, r7, r2
   1d162:	0011      	movs	r1, r2
   1d164:	0018      	movs	r0, r3
   1d166:	f7e4 fc03 	bl	1970 <i2c_master_write_packet_wait>
   1d16a:	1e03      	subs	r3, r0, #0
   1d16c:	d001      	beq.n	1d172 <hal_i2c_idle+0x7e>
    {
        return ATCA_COMM_FAIL;
   1d16e:	23f0      	movs	r3, #240	; 0xf0
   1d170:	e000      	b.n	1d174 <hal_i2c_idle+0x80>
    }

    return ATCA_SUCCESS;
   1d172:	2300      	movs	r3, #0

}
   1d174:	0018      	movs	r0, r3
   1d176:	46bd      	mov	sp, r7
   1d178:	b008      	add	sp, #32
   1d17a:	bd80      	pop	{r7, pc}
   1d17c:	200003b4 	.word	0x200003b4

0001d180 <hal_i2c_sleep>:
 * \param[in] iface  interface to logical device to sleep
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
   1d180:	b580      	push	{r7, lr}
   1d182:	b088      	sub	sp, #32
   1d184:	af00      	add	r7, sp, #0
   1d186:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   1d188:	687b      	ldr	r3, [r7, #4]
   1d18a:	0018      	movs	r0, r3
   1d18c:	f7ff f8b2 	bl	1c2f4 <atgetifacecfg>
   1d190:	0003      	movs	r3, r0
   1d192:	61fb      	str	r3, [r7, #28]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   1d194:	69fb      	ldr	r3, [r7, #28]
   1d196:	791b      	ldrb	r3, [r3, #4]
ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    uint8_t data[4];

    struct i2c_master_packet packet = {
   1d198:	085b      	lsrs	r3, r3, #1
   1d19a:	b2db      	uxtb	r3, r3
   1d19c:	b29a      	uxth	r2, r3
   1d19e:	230c      	movs	r3, #12
   1d1a0:	18fb      	adds	r3, r7, r3
   1d1a2:	801a      	strh	r2, [r3, #0]
   1d1a4:	230c      	movs	r3, #12
   1d1a6:	18fb      	adds	r3, r7, r3
   1d1a8:	2201      	movs	r2, #1
   1d1aa:	805a      	strh	r2, [r3, #2]
   1d1ac:	230c      	movs	r3, #12
   1d1ae:	18fb      	adds	r3, r7, r3
   1d1b0:	2218      	movs	r2, #24
   1d1b2:	18ba      	adds	r2, r7, r2
   1d1b4:	605a      	str	r2, [r3, #4]
   1d1b6:	230c      	movs	r3, #12
   1d1b8:	18fb      	adds	r3, r7, r3
   1d1ba:	2200      	movs	r2, #0
   1d1bc:	721a      	strb	r2, [r3, #8]
   1d1be:	230c      	movs	r3, #12
   1d1c0:	18fb      	adds	r3, r7, r3
   1d1c2:	2200      	movs	r2, #0
   1d1c4:	725a      	strb	r2, [r3, #9]
   1d1c6:	230c      	movs	r3, #12
   1d1c8:	18fb      	adds	r3, r7, r3
   1d1ca:	2200      	movs	r2, #0
   1d1cc:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
   1d1ce:	2318      	movs	r3, #24
   1d1d0:	18fb      	adds	r3, r7, r3
   1d1d2:	2201      	movs	r2, #1
   1d1d4:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
   1d1d6:	69fb      	ldr	r3, [r7, #28]
   1d1d8:	795b      	ldrb	r3, [r3, #5]
   1d1da:	001a      	movs	r2, r3
   1d1dc:	0013      	movs	r3, r2
   1d1de:	005b      	lsls	r3, r3, #1
   1d1e0:	189b      	adds	r3, r3, r2
   1d1e2:	00db      	lsls	r3, r3, #3
   1d1e4:	4a08      	ldr	r2, [pc, #32]	; (1d208 <hal_i2c_sleep+0x88>)
   1d1e6:	189b      	adds	r3, r3, r2
   1d1e8:	3304      	adds	r3, #4
   1d1ea:	220c      	movs	r2, #12
   1d1ec:	18ba      	adds	r2, r7, r2
   1d1ee:	0011      	movs	r1, r2
   1d1f0:	0018      	movs	r0, r3
   1d1f2:	f7e4 fbbd 	bl	1970 <i2c_master_write_packet_wait>
   1d1f6:	1e03      	subs	r3, r0, #0
   1d1f8:	d001      	beq.n	1d1fe <hal_i2c_sleep+0x7e>
    {
        return ATCA_COMM_FAIL;
   1d1fa:	23f0      	movs	r3, #240	; 0xf0
   1d1fc:	e000      	b.n	1d200 <hal_i2c_sleep+0x80>
    }

    return ATCA_SUCCESS;
   1d1fe:	2300      	movs	r3, #0
}
   1d200:	0018      	movs	r0, r3
   1d202:	46bd      	mov	sp, r7
   1d204:	b008      	add	sp, #32
   1d206:	bd80      	pop	{r7, pc}
   1d208:	200003b4 	.word	0x200003b4

0001d20c <hal_i2c_release>:
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 * return ATCA_SUCCESS
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
   1d20c:	b580      	push	{r7, lr}
   1d20e:	b084      	sub	sp, #16
   1d210:	af00      	add	r7, sp, #0
   1d212:	6078      	str	r0, [r7, #4]
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;
   1d214:	687b      	ldr	r3, [r7, #4]
   1d216:	60fb      	str	r3, [r7, #12]

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0)
   1d218:	68fb      	ldr	r3, [r7, #12]
   1d21a:	2b00      	cmp	r3, #0
   1d21c:	d010      	beq.n	1d240 <hal_i2c_release+0x34>
   1d21e:	68fb      	ldr	r3, [r7, #12]
   1d220:	691b      	ldr	r3, [r3, #16]
   1d222:	1e5a      	subs	r2, r3, #1
   1d224:	68fb      	ldr	r3, [r7, #12]
   1d226:	611a      	str	r2, [r3, #16]
   1d228:	68fb      	ldr	r3, [r7, #12]
   1d22a:	691b      	ldr	r3, [r3, #16]
   1d22c:	2b00      	cmp	r3, #0
   1d22e:	dc07      	bgt.n	1d240 <hal_i2c_release+0x34>
    {
        i2c_master_reset(&(hal->i2c_master_instance));
   1d230:	68fb      	ldr	r3, [r7, #12]
   1d232:	3304      	adds	r3, #4
   1d234:	0018      	movs	r0, r3
   1d236:	f7e4 f8fd 	bl	1434 <i2c_master_reset>
        hal->ref_ct = 0;
   1d23a:	68fb      	ldr	r3, [r7, #12]
   1d23c:	2200      	movs	r2, #0
   1d23e:	611a      	str	r2, [r3, #16]
    }

    return ATCA_SUCCESS;
   1d240:	2300      	movs	r3, #0
}
   1d242:	0018      	movs	r0, r3
   1d244:	46bd      	mov	sp, r7
   1d246:	b004      	add	sp, #16
   1d248:	bd80      	pop	{r7, pc}
   1d24a:	46c0      	nop			; (mov r8, r8)

0001d24c <atca_delay_us>:
/** \brief This function delays for a number of microseconds.
 *
 * \param[in] delay number of 0.001 milliseconds to delay
 */
void atca_delay_us(uint32_t delay)
{
   1d24c:	b580      	push	{r7, lr}
   1d24e:	b082      	sub	sp, #8
   1d250:	af00      	add	r7, sp, #0
   1d252:	6078      	str	r0, [r7, #4]
    // use ASF supplied delay
    delay_us(delay);
   1d254:	687b      	ldr	r3, [r7, #4]
   1d256:	2b00      	cmp	r3, #0
   1d258:	d004      	beq.n	1d264 <atca_delay_us+0x18>
   1d25a:	687b      	ldr	r3, [r7, #4]
   1d25c:	0018      	movs	r0, r3
   1d25e:	f7e2 ffe7 	bl	230 <delay_cycles_us>
}
   1d262:	e002      	b.n	1d26a <atca_delay_us+0x1e>
 * \param[in] delay number of 0.001 milliseconds to delay
 */
void atca_delay_us(uint32_t delay)
{
    // use ASF supplied delay
    delay_us(delay);
   1d264:	2001      	movs	r0, #1
   1d266:	f7e2 ffe3 	bl	230 <delay_cycles_us>
}
   1d26a:	46c0      	nop			; (mov r8, r8)
   1d26c:	46bd      	mov	sp, r7
   1d26e:	b002      	add	sp, #8
   1d270:	bd80      	pop	{r7, pc}
   1d272:	46c0      	nop			; (mov r8, r8)

0001d274 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
   1d274:	b580      	push	{r7, lr}
   1d276:	b082      	sub	sp, #8
   1d278:	af00      	add	r7, sp, #0
   1d27a:	6078      	str	r0, [r7, #4]
    // use ASF supplied delay
    delay_ms(delay);
   1d27c:	687b      	ldr	r3, [r7, #4]
   1d27e:	2b00      	cmp	r3, #0
   1d280:	d004      	beq.n	1d28c <atca_delay_ms+0x18>
   1d282:	687b      	ldr	r3, [r7, #4]
   1d284:	0018      	movs	r0, r3
   1d286:	f7e2 ffe9 	bl	25c <delay_cycles_ms>
}
   1d28a:	e002      	b.n	1d292 <atca_delay_ms+0x1e>

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    // use ASF supplied delay
    delay_ms(delay);
   1d28c:	2001      	movs	r0, #1
   1d28e:	f7e2 ffcf 	bl	230 <delay_cycles_us>
}
   1d292:	46c0      	nop			; (mov r8, r8)
   1d294:	46bd      	mov	sp, r7
   1d296:	b002      	add	sp, #8
   1d298:	bd80      	pop	{r7, pc}
   1d29a:	46c0      	nop			; (mov r8, r8)

0001d29c <atcac_sw_sha1_init>:
 * \param[in] ctx  Hash context
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha1_init(atcac_sha1_ctx* ctx)
{
   1d29c:	b580      	push	{r7, lr}
   1d29e:	b082      	sub	sp, #8
   1d2a0:	af00      	add	r7, sp, #0
   1d2a2:	6078      	str	r0, [r7, #4]
    if (sizeof(CL_HashContext) > sizeof(atcac_sha1_ctx))
    {
        return ATCA_ASSERT_FAILURE;  // atcac_sha1_ctx isn't large enough for this implementation
    }
    CL_hashInit((CL_HashContext*)ctx);
   1d2a4:	687b      	ldr	r3, [r7, #4]
   1d2a6:	0018      	movs	r0, r3
   1d2a8:	f000 f8e4 	bl	1d474 <CL_hashInit>

    return ATCA_SUCCESS;
   1d2ac:	2300      	movs	r3, #0
}
   1d2ae:	0018      	movs	r0, r3
   1d2b0:	46bd      	mov	sp, r7
   1d2b2:	b002      	add	sp, #8
   1d2b4:	bd80      	pop	{r7, pc}
   1d2b6:	46c0      	nop			; (mov r8, r8)

0001d2b8 <atcac_sw_sha1_update>:
    \param[in] data       Data to be added to the hash
    \param[in] data_size  Data size in bytes
    \return ATCA_SUCCESS
 */
int atcac_sw_sha1_update(atcac_sha1_ctx* ctx, const uint8_t* data, size_t data_size)
{
   1d2b8:	b580      	push	{r7, lr}
   1d2ba:	b084      	sub	sp, #16
   1d2bc:	af00      	add	r7, sp, #0
   1d2be:	60f8      	str	r0, [r7, #12]
   1d2c0:	60b9      	str	r1, [r7, #8]
   1d2c2:	607a      	str	r2, [r7, #4]
    CL_hashUpdate((CL_HashContext*)ctx, data, (int)data_size);
   1d2c4:	687a      	ldr	r2, [r7, #4]
   1d2c6:	68b9      	ldr	r1, [r7, #8]
   1d2c8:	68fb      	ldr	r3, [r7, #12]
   1d2ca:	0018      	movs	r0, r3
   1d2cc:	f000 f8ea 	bl	1d4a4 <CL_hashUpdate>

    return ATCA_SUCCESS;
   1d2d0:	2300      	movs	r3, #0
}
   1d2d2:	0018      	movs	r0, r3
   1d2d4:	46bd      	mov	sp, r7
   1d2d6:	b004      	add	sp, #16
   1d2d8:	bd80      	pop	{r7, pc}
   1d2da:	46c0      	nop			; (mov r8, r8)

0001d2dc <atcac_sw_sha1_finish>:
 * \param[in]  ctx     Hash context
 * \param[out] digest  Digest is returned here (20 bytes)
 * \return ATCA_SUCCESS
 */
int atcac_sw_sha1_finish(atcac_sha1_ctx* ctx, uint8_t digest[ATCA_SHA1_DIGEST_SIZE])
{
   1d2dc:	b580      	push	{r7, lr}
   1d2de:	b082      	sub	sp, #8
   1d2e0:	af00      	add	r7, sp, #0
   1d2e2:	6078      	str	r0, [r7, #4]
   1d2e4:	6039      	str	r1, [r7, #0]
    CL_hashFinal((CL_HashContext*)ctx, digest);
   1d2e6:	683a      	ldr	r2, [r7, #0]
   1d2e8:	687b      	ldr	r3, [r7, #4]
   1d2ea:	0011      	movs	r1, r2
   1d2ec:	0018      	movs	r0, r3
   1d2ee:	f000 f965 	bl	1d5bc <CL_hashFinal>

    return ATCA_SUCCESS;
   1d2f2:	2300      	movs	r3, #0
}
   1d2f4:	0018      	movs	r0, r3
   1d2f6:	46bd      	mov	sp, r7
   1d2f8:	b002      	add	sp, #8
   1d2fa:	bd80      	pop	{r7, pc}

0001d2fc <atcac_sw_sha1>:
 * \param[in]  data_size  Data size in bytes
 * \param[out] digest     Digest is returned here (20 bytes)
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
int atcac_sw_sha1(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA1_DIGEST_SIZE])
{
   1d2fc:	b580      	push	{r7, lr}
   1d2fe:	b0a6      	sub	sp, #152	; 0x98
   1d300:	af00      	add	r7, sp, #0
   1d302:	60f8      	str	r0, [r7, #12]
   1d304:	60b9      	str	r1, [r7, #8]
   1d306:	607a      	str	r2, [r7, #4]
    int ret;
    atcac_sha1_ctx ctx;

    ret = atcac_sw_sha1_init(&ctx);
   1d308:	2314      	movs	r3, #20
   1d30a:	18fb      	adds	r3, r7, r3
   1d30c:	0018      	movs	r0, r3
   1d30e:	f7ff ffc5 	bl	1d29c <atcac_sw_sha1_init>
   1d312:	0003      	movs	r3, r0
   1d314:	2294      	movs	r2, #148	; 0x94
   1d316:	18ba      	adds	r2, r7, r2
   1d318:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   1d31a:	2394      	movs	r3, #148	; 0x94
   1d31c:	18fb      	adds	r3, r7, r3
   1d31e:	681b      	ldr	r3, [r3, #0]
   1d320:	2b00      	cmp	r3, #0
   1d322:	d003      	beq.n	1d32c <atcac_sw_sha1+0x30>
    {
        return ret;
   1d324:	2394      	movs	r3, #148	; 0x94
   1d326:	18fb      	adds	r3, r7, r3
   1d328:	681b      	ldr	r3, [r3, #0]
   1d32a:	e028      	b.n	1d37e <atcac_sw_sha1+0x82>
    }

    ret = atcac_sw_sha1_update(&ctx, data, data_size);
   1d32c:	68ba      	ldr	r2, [r7, #8]
   1d32e:	68f9      	ldr	r1, [r7, #12]
   1d330:	2314      	movs	r3, #20
   1d332:	18fb      	adds	r3, r7, r3
   1d334:	0018      	movs	r0, r3
   1d336:	f7ff ffbf 	bl	1d2b8 <atcac_sw_sha1_update>
   1d33a:	0003      	movs	r3, r0
   1d33c:	2294      	movs	r2, #148	; 0x94
   1d33e:	18ba      	adds	r2, r7, r2
   1d340:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   1d342:	2394      	movs	r3, #148	; 0x94
   1d344:	18fb      	adds	r3, r7, r3
   1d346:	681b      	ldr	r3, [r3, #0]
   1d348:	2b00      	cmp	r3, #0
   1d34a:	d003      	beq.n	1d354 <atcac_sw_sha1+0x58>
    {
        return ret;
   1d34c:	2394      	movs	r3, #148	; 0x94
   1d34e:	18fb      	adds	r3, r7, r3
   1d350:	681b      	ldr	r3, [r3, #0]
   1d352:	e014      	b.n	1d37e <atcac_sw_sha1+0x82>
    }

    ret = atcac_sw_sha1_finish(&ctx, digest);
   1d354:	687a      	ldr	r2, [r7, #4]
   1d356:	2314      	movs	r3, #20
   1d358:	18fb      	adds	r3, r7, r3
   1d35a:	0011      	movs	r1, r2
   1d35c:	0018      	movs	r0, r3
   1d35e:	f7ff ffbd 	bl	1d2dc <atcac_sw_sha1_finish>
   1d362:	0003      	movs	r3, r0
   1d364:	2294      	movs	r2, #148	; 0x94
   1d366:	18ba      	adds	r2, r7, r2
   1d368:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   1d36a:	2394      	movs	r3, #148	; 0x94
   1d36c:	18fb      	adds	r3, r7, r3
   1d36e:	681b      	ldr	r3, [r3, #0]
   1d370:	2b00      	cmp	r3, #0
   1d372:	d003      	beq.n	1d37c <atcac_sw_sha1+0x80>
    {
        return ret;
   1d374:	2394      	movs	r3, #148	; 0x94
   1d376:	18fb      	adds	r3, r7, r3
   1d378:	681b      	ldr	r3, [r3, #0]
   1d37a:	e000      	b.n	1d37e <atcac_sw_sha1+0x82>
    }

    return ATCA_SUCCESS;
   1d37c:	2300      	movs	r3, #0
   1d37e:	0018      	movs	r0, r3
   1d380:	46bd      	mov	sp, r7
   1d382:	b026      	add	sp, #152	; 0x98
   1d384:	bd80      	pop	{r7, pc}
   1d386:	46c0      	nop			; (mov r8, r8)

0001d388 <atcac_sw_sha2_256_init>:
 * \param[in] ctx  ptr to context data structure
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256_init(atcac_sha2_256_ctx* ctx)
{
   1d388:	b580      	push	{r7, lr}
   1d38a:	b082      	sub	sp, #8
   1d38c:	af00      	add	r7, sp, #0
   1d38e:	6078      	str	r0, [r7, #4]
    if (sizeof(sw_sha256_ctx) > sizeof(atcac_sha2_256_ctx))
    {
        return ATCA_ASSERT_FAILURE;  // atcac_sha1_ctx isn't large enough for this implementation
    }
    sw_sha256_init((sw_sha256_ctx*)ctx);
   1d390:	687b      	ldr	r3, [r7, #4]
   1d392:	0018      	movs	r0, r3
   1d394:	f000 fe4a 	bl	1e02c <sw_sha256_init>

    return ATCA_SUCCESS;
   1d398:	2300      	movs	r3, #0
}
   1d39a:	0018      	movs	r0, r3
   1d39c:	46bd      	mov	sp, r7
   1d39e:	b002      	add	sp, #8
   1d3a0:	bd80      	pop	{r7, pc}
   1d3a2:	46c0      	nop			; (mov r8, r8)

0001d3a4 <atcac_sw_sha2_256_update>:
    \param[in] data_size  size amount of data to hash in the given block, in bytes
    \return ATCA_SUCCESS
 */

int atcac_sw_sha2_256_update(atcac_sha2_256_ctx* ctx, const uint8_t* data, size_t data_size)
{
   1d3a4:	b580      	push	{r7, lr}
   1d3a6:	b084      	sub	sp, #16
   1d3a8:	af00      	add	r7, sp, #0
   1d3aa:	60f8      	str	r0, [r7, #12]
   1d3ac:	60b9      	str	r1, [r7, #8]
   1d3ae:	607a      	str	r2, [r7, #4]
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
   1d3b0:	687a      	ldr	r2, [r7, #4]
   1d3b2:	68b9      	ldr	r1, [r7, #8]
   1d3b4:	68fb      	ldr	r3, [r7, #12]
   1d3b6:	0018      	movs	r0, r3
   1d3b8:	f000 fe5a 	bl	1e070 <sw_sha256_update>

    return ATCA_SUCCESS;
   1d3bc:	2300      	movs	r3, #0
}
   1d3be:	0018      	movs	r0, r3
   1d3c0:	46bd      	mov	sp, r7
   1d3c2:	b004      	add	sp, #16
   1d3c4:	bd80      	pop	{r7, pc}
   1d3c6:	46c0      	nop			; (mov r8, r8)

0001d3c8 <atcac_sw_sha2_256_finish>:
 * \param[out] digest  receives the computed digest of the SHA 256
 * \return ATCA_SUCCESS
 */

int atcac_sw_sha2_256_finish(atcac_sha2_256_ctx* ctx, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
   1d3c8:	b580      	push	{r7, lr}
   1d3ca:	b082      	sub	sp, #8
   1d3cc:	af00      	add	r7, sp, #0
   1d3ce:	6078      	str	r0, [r7, #4]
   1d3d0:	6039      	str	r1, [r7, #0]
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
   1d3d2:	683a      	ldr	r2, [r7, #0]
   1d3d4:	687b      	ldr	r3, [r7, #4]
   1d3d6:	0011      	movs	r1, r2
   1d3d8:	0018      	movs	r0, r3
   1d3da:	f000 fea7 	bl	1e12c <sw_sha256_final>

    return ATCA_SUCCESS;
   1d3de:	2300      	movs	r3, #0
}
   1d3e0:	0018      	movs	r0, r3
   1d3e2:	46bd      	mov	sp, r7
   1d3e4:	b002      	add	sp, #8
   1d3e6:	bd80      	pop	{r7, pc}

0001d3e8 <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
   1d3e8:	b580      	push	{r7, lr}
   1d3ea:	b0b6      	sub	sp, #216	; 0xd8
   1d3ec:	af00      	add	r7, sp, #0
   1d3ee:	60f8      	str	r0, [r7, #12]
   1d3f0:	60b9      	str	r1, [r7, #8]
   1d3f2:	607a      	str	r2, [r7, #4]
    int ret;
    atcac_sha2_256_ctx ctx;

    ret = atcac_sw_sha2_256_init(&ctx);
   1d3f4:	2314      	movs	r3, #20
   1d3f6:	18fb      	adds	r3, r7, r3
   1d3f8:	0018      	movs	r0, r3
   1d3fa:	f7ff ffc5 	bl	1d388 <atcac_sw_sha2_256_init>
   1d3fe:	0003      	movs	r3, r0
   1d400:	22d4      	movs	r2, #212	; 0xd4
   1d402:	18ba      	adds	r2, r7, r2
   1d404:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   1d406:	23d4      	movs	r3, #212	; 0xd4
   1d408:	18fb      	adds	r3, r7, r3
   1d40a:	681b      	ldr	r3, [r3, #0]
   1d40c:	2b00      	cmp	r3, #0
   1d40e:	d003      	beq.n	1d418 <atcac_sw_sha2_256+0x30>
    {
        return ret;
   1d410:	23d4      	movs	r3, #212	; 0xd4
   1d412:	18fb      	adds	r3, r7, r3
   1d414:	681b      	ldr	r3, [r3, #0]
   1d416:	e028      	b.n	1d46a <atcac_sw_sha2_256+0x82>
    }

    ret = atcac_sw_sha2_256_update(&ctx, data, data_size);
   1d418:	68ba      	ldr	r2, [r7, #8]
   1d41a:	68f9      	ldr	r1, [r7, #12]
   1d41c:	2314      	movs	r3, #20
   1d41e:	18fb      	adds	r3, r7, r3
   1d420:	0018      	movs	r0, r3
   1d422:	f7ff ffbf 	bl	1d3a4 <atcac_sw_sha2_256_update>
   1d426:	0003      	movs	r3, r0
   1d428:	22d4      	movs	r2, #212	; 0xd4
   1d42a:	18ba      	adds	r2, r7, r2
   1d42c:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   1d42e:	23d4      	movs	r3, #212	; 0xd4
   1d430:	18fb      	adds	r3, r7, r3
   1d432:	681b      	ldr	r3, [r3, #0]
   1d434:	2b00      	cmp	r3, #0
   1d436:	d003      	beq.n	1d440 <atcac_sw_sha2_256+0x58>
    {
        return ret;
   1d438:	23d4      	movs	r3, #212	; 0xd4
   1d43a:	18fb      	adds	r3, r7, r3
   1d43c:	681b      	ldr	r3, [r3, #0]
   1d43e:	e014      	b.n	1d46a <atcac_sw_sha2_256+0x82>
    }

    ret = atcac_sw_sha2_256_finish(&ctx, digest);
   1d440:	687a      	ldr	r2, [r7, #4]
   1d442:	2314      	movs	r3, #20
   1d444:	18fb      	adds	r3, r7, r3
   1d446:	0011      	movs	r1, r2
   1d448:	0018      	movs	r0, r3
   1d44a:	f7ff ffbd 	bl	1d3c8 <atcac_sw_sha2_256_finish>
   1d44e:	0003      	movs	r3, r0
   1d450:	22d4      	movs	r2, #212	; 0xd4
   1d452:	18ba      	adds	r2, r7, r2
   1d454:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   1d456:	23d4      	movs	r3, #212	; 0xd4
   1d458:	18fb      	adds	r3, r7, r3
   1d45a:	681b      	ldr	r3, [r3, #0]
   1d45c:	2b00      	cmp	r3, #0
   1d45e:	d003      	beq.n	1d468 <atcac_sw_sha2_256+0x80>
    {
        return ret;
   1d460:	23d4      	movs	r3, #212	; 0xd4
   1d462:	18fb      	adds	r3, r7, r3
   1d464:	681b      	ldr	r3, [r3, #0]
   1d466:	e000      	b.n	1d46a <atcac_sw_sha2_256+0x82>
    }

    return ATCA_SUCCESS;
   1d468:	2300      	movs	r3, #0
   1d46a:	0018      	movs	r0, r3
   1d46c:	46bd      	mov	sp, r7
   1d46e:	b036      	add	sp, #216	; 0xd8
   1d470:	bd80      	pop	{r7, pc}
   1d472:	46c0      	nop			; (mov r8, r8)

0001d474 <CL_hashInit>:
 * \brief Initialize context for performing SHA1 hash in software.
 *
 * \param[in] ctx  Hash context
 */
void CL_hashInit(CL_HashContext *ctx)
{
   1d474:	b580      	push	{r7, lr}
   1d476:	b082      	sub	sp, #8
   1d478:	af00      	add	r7, sp, #0
   1d47a:	6078      	str	r0, [r7, #4]
        0x10325476,
        0xc3d2e1f0
    };

    // Initialize context
    memset(ctx, 0, sizeof(*ctx));
   1d47c:	687b      	ldr	r3, [r7, #4]
   1d47e:	225c      	movs	r2, #92	; 0x5c
   1d480:	2100      	movs	r1, #0
   1d482:	0018      	movs	r0, r3
   1d484:	f008 f951 	bl	2572a <memset>
    memcpy_P(ctx->h, hashContext_h_init, sizeof(ctx->h));
   1d488:	687a      	ldr	r2, [r7, #4]
   1d48a:	4b05      	ldr	r3, [pc, #20]	; (1d4a0 <CL_hashInit+0x2c>)
   1d48c:	0010      	movs	r0, r2
   1d48e:	0019      	movs	r1, r3
   1d490:	2314      	movs	r3, #20
   1d492:	001a      	movs	r2, r3
   1d494:	f008 f92b 	bl	256ee <memcpy>
}
   1d498:	46c0      	nop			; (mov r8, r8)
   1d49a:	46bd      	mov	sp, r7
   1d49c:	b002      	add	sp, #8
   1d49e:	bd80      	pop	{r7, pc}
   1d4a0:	0002e4b8 	.word	0x0002e4b8

0001d4a4 <CL_hashUpdate>:
 * \param[in] src     Data to be added to the hash
 * \param[in] nbytes  Data size in bytes
 */

void CL_hashUpdate(CL_HashContext *ctx, const U8 *src, int nbytes)
{
   1d4a4:	b580      	push	{r7, lr}
   1d4a6:	b086      	sub	sp, #24
   1d4a8:	af00      	add	r7, sp, #0
   1d4aa:	60f8      	str	r0, [r7, #12]
   1d4ac:	60b9      	str	r1, [r7, #8]
   1d4ae:	607a      	str	r2, [r7, #4]
    // assert may not be active in release versions.
    //
    //assert(sizeof(Buf64) == 64);

    // Get number of free bytes in the buf
    freeBytes = (U8)(ctx->byteCount);
   1d4b0:	68fb      	ldr	r3, [r7, #12]
   1d4b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1d4b4:	2316      	movs	r3, #22
   1d4b6:	18fb      	adds	r3, r7, r3
   1d4b8:	701a      	strb	r2, [r3, #0]
    freeBytes &= 63;
   1d4ba:	2316      	movs	r3, #22
   1d4bc:	18fb      	adds	r3, r7, r3
   1d4be:	2216      	movs	r2, #22
   1d4c0:	18ba      	adds	r2, r7, r2
   1d4c2:	7812      	ldrb	r2, [r2, #0]
   1d4c4:	213f      	movs	r1, #63	; 0x3f
   1d4c6:	400a      	ands	r2, r1
   1d4c8:	701a      	strb	r2, [r3, #0]
    freeBytes = (U8)(64 - freeBytes);
   1d4ca:	2316      	movs	r3, #22
   1d4cc:	18fb      	adds	r3, r7, r3
   1d4ce:	2216      	movs	r2, #22
   1d4d0:	18ba      	adds	r2, r7, r2
   1d4d2:	7812      	ldrb	r2, [r2, #0]
   1d4d4:	2140      	movs	r1, #64	; 0x40
   1d4d6:	1a8a      	subs	r2, r1, r2
   1d4d8:	701a      	strb	r2, [r3, #0]

    while (nbytes > 0)
   1d4da:	e068      	b.n	1d5ae <CL_hashUpdate+0x10a>
    {

        // Get i, number of bytes to transfer from src
        i = freeBytes;
   1d4dc:	2317      	movs	r3, #23
   1d4de:	18fb      	adds	r3, r7, r3
   1d4e0:	2216      	movs	r2, #22
   1d4e2:	18ba      	adds	r2, r7, r2
   1d4e4:	7812      	ldrb	r2, [r2, #0]
   1d4e6:	701a      	strb	r2, [r3, #0]
        if (nbytes < i)
   1d4e8:	2317      	movs	r3, #23
   1d4ea:	18fb      	adds	r3, r7, r3
   1d4ec:	781a      	ldrb	r2, [r3, #0]
   1d4ee:	687b      	ldr	r3, [r7, #4]
   1d4f0:	429a      	cmp	r2, r3
   1d4f2:	dd03      	ble.n	1d4fc <CL_hashUpdate+0x58>
        {
            i = (U8)nbytes;
   1d4f4:	2317      	movs	r3, #23
   1d4f6:	18fb      	adds	r3, r7, r3
   1d4f8:	687a      	ldr	r2, [r7, #4]
   1d4fa:	701a      	strb	r2, [r3, #0]
        }

        // Copy src bytes to buf
        if (i == 64)
   1d4fc:	2317      	movs	r3, #23
   1d4fe:	18fb      	adds	r3, r7, r3
   1d500:	781b      	ldrb	r3, [r3, #0]
   1d502:	2b40      	cmp	r3, #64	; 0x40
   1d504:	d10a      	bne.n	1d51c <CL_hashUpdate+0x78>
        {
            // This seems to be much faster on IAR than memcpy().
            *(Buf64*)(ctx->buf) = *(Buf64*)src;
   1d506:	68fb      	ldr	r3, [r7, #12]
   1d508:	3314      	adds	r3, #20
   1d50a:	001a      	movs	r2, r3
   1d50c:	68bb      	ldr	r3, [r7, #8]
   1d50e:	0010      	movs	r0, r2
   1d510:	0019      	movs	r1, r3
   1d512:	2340      	movs	r3, #64	; 0x40
   1d514:	001a      	movs	r2, r3
   1d516:	f008 f8ea 	bl	256ee <memcpy>
   1d51a:	e00f      	b.n	1d53c <CL_hashUpdate+0x98>
        }
        else
        {
            // Have to use memcpy, size is other than 64 bytes.
            memcpy(((U8*)ctx->buf) + 64 - freeBytes, src, i);
   1d51c:	68fb      	ldr	r3, [r7, #12]
   1d51e:	3314      	adds	r3, #20
   1d520:	001a      	movs	r2, r3
   1d522:	2316      	movs	r3, #22
   1d524:	18fb      	adds	r3, r7, r3
   1d526:	781b      	ldrb	r3, [r3, #0]
   1d528:	2140      	movs	r1, #64	; 0x40
   1d52a:	1acb      	subs	r3, r1, r3
   1d52c:	18d0      	adds	r0, r2, r3
   1d52e:	2317      	movs	r3, #23
   1d530:	18fb      	adds	r3, r7, r3
   1d532:	781a      	ldrb	r2, [r3, #0]
   1d534:	68bb      	ldr	r3, [r7, #8]
   1d536:	0019      	movs	r1, r3
   1d538:	f008 f8d9 	bl	256ee <memcpy>
        }

        // Adjust for transferred bytes
        src += i;
   1d53c:	2317      	movs	r3, #23
   1d53e:	18fb      	adds	r3, r7, r3
   1d540:	781b      	ldrb	r3, [r3, #0]
   1d542:	68ba      	ldr	r2, [r7, #8]
   1d544:	18d3      	adds	r3, r2, r3
   1d546:	60bb      	str	r3, [r7, #8]
        nbytes -= i;
   1d548:	2317      	movs	r3, #23
   1d54a:	18fb      	adds	r3, r7, r3
   1d54c:	781b      	ldrb	r3, [r3, #0]
   1d54e:	687a      	ldr	r2, [r7, #4]
   1d550:	1ad3      	subs	r3, r2, r3
   1d552:	607b      	str	r3, [r7, #4]
        freeBytes -= i;
   1d554:	2316      	movs	r3, #22
   1d556:	18fb      	adds	r3, r7, r3
   1d558:	2216      	movs	r2, #22
   1d55a:	18b9      	adds	r1, r7, r2
   1d55c:	2217      	movs	r2, #23
   1d55e:	18ba      	adds	r2, r7, r2
   1d560:	7809      	ldrb	r1, [r1, #0]
   1d562:	7812      	ldrb	r2, [r2, #0]
   1d564:	1a8a      	subs	r2, r1, r2
   1d566:	701a      	strb	r2, [r3, #0]

        // Do SHA crunch if buf is full
        if (freeBytes == 0)
   1d568:	2316      	movs	r3, #22
   1d56a:	18fb      	adds	r3, r7, r3
   1d56c:	781b      	ldrb	r3, [r3, #0]
   1d56e:	2b00      	cmp	r3, #0
   1d570:	d106      	bne.n	1d580 <CL_hashUpdate+0xdc>
        {
            shaEngine(ctx->buf, ctx->h);
   1d572:	68fb      	ldr	r3, [r7, #12]
   1d574:	3314      	adds	r3, #20
   1d576:	68fa      	ldr	r2, [r7, #12]
   1d578:	0011      	movs	r1, r2
   1d57a:	0018      	movs	r0, r3
   1d57c:	f000 f90c 	bl	1d798 <shaEngine>
        }

        // Update 64-bit byte count
        temp32 = (ctx->byteCount += i);
   1d580:	68fb      	ldr	r3, [r7, #12]
   1d582:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1d584:	2317      	movs	r3, #23
   1d586:	18fb      	adds	r3, r7, r3
   1d588:	781b      	ldrb	r3, [r3, #0]
   1d58a:	18d2      	adds	r2, r2, r3
   1d58c:	68fb      	ldr	r3, [r7, #12]
   1d58e:	655a      	str	r2, [r3, #84]	; 0x54
   1d590:	68fb      	ldr	r3, [r7, #12]
   1d592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1d594:	613b      	str	r3, [r7, #16]
        if (temp32 == 0)
   1d596:	693b      	ldr	r3, [r7, #16]
   1d598:	2b00      	cmp	r3, #0
   1d59a:	d104      	bne.n	1d5a6 <CL_hashUpdate+0x102>
        {
            ++ctx->byteCountHi;
   1d59c:	68fb      	ldr	r3, [r7, #12]
   1d59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1d5a0:	1c5a      	adds	r2, r3, #1
   1d5a2:	68fb      	ldr	r3, [r7, #12]
   1d5a4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        // Set up for next iteration
        freeBytes = 64;
   1d5a6:	2316      	movs	r3, #22
   1d5a8:	18fb      	adds	r3, r7, r3
   1d5aa:	2240      	movs	r2, #64	; 0x40
   1d5ac:	701a      	strb	r2, [r3, #0]
    // Get number of free bytes in the buf
    freeBytes = (U8)(ctx->byteCount);
    freeBytes &= 63;
    freeBytes = (U8)(64 - freeBytes);

    while (nbytes > 0)
   1d5ae:	687b      	ldr	r3, [r7, #4]
   1d5b0:	2b00      	cmp	r3, #0
   1d5b2:	dc93      	bgt.n	1d4dc <CL_hashUpdate+0x38>
        }

        // Set up for next iteration
        freeBytes = 64;
    }
}
   1d5b4:	46c0      	nop			; (mov r8, r8)
   1d5b6:	46bd      	mov	sp, r7
   1d5b8:	b006      	add	sp, #24
   1d5ba:	bd80      	pop	{r7, pc}

0001d5bc <CL_hashFinal>:
/** \brief Complete the SHA1 hash in software and return the digest.
 * \param[in]  ctx   Hash context
 * \param[out] dest  Digest is returned here (20 bytes)
 */
void CL_hashFinal(CL_HashContext *ctx, U8 *dest)
{
   1d5bc:	b580      	push	{r7, lr}
   1d5be:	b086      	sub	sp, #24
   1d5c0:	af00      	add	r7, sp, #0
   1d5c2:	6078      	str	r0, [r7, #4]
   1d5c4:	6039      	str	r1, [r7, #0]
    U8 nbytes;
    U32 temp;
    U8 *ptr;

    /* Append pad byte, clear trailing bytes */
    nbytes = (U8)(ctx->byteCount) & 63;
   1d5c6:	687b      	ldr	r3, [r7, #4]
   1d5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1d5ca:	b2da      	uxtb	r2, r3
   1d5cc:	230b      	movs	r3, #11
   1d5ce:	18fb      	adds	r3, r7, r3
   1d5d0:	213f      	movs	r1, #63	; 0x3f
   1d5d2:	400a      	ands	r2, r1
   1d5d4:	701a      	strb	r2, [r3, #0]
    ((U8*)ctx->buf)[nbytes] = 0x80;
   1d5d6:	687b      	ldr	r3, [r7, #4]
   1d5d8:	3314      	adds	r3, #20
   1d5da:	001a      	movs	r2, r3
   1d5dc:	230b      	movs	r3, #11
   1d5de:	18fb      	adds	r3, r7, r3
   1d5e0:	781b      	ldrb	r3, [r3, #0]
   1d5e2:	18d3      	adds	r3, r2, r3
   1d5e4:	2280      	movs	r2, #128	; 0x80
   1d5e6:	701a      	strb	r2, [r3, #0]
    for (i = (nbytes + 1); i < 64; i++)
   1d5e8:	2317      	movs	r3, #23
   1d5ea:	18fb      	adds	r3, r7, r3
   1d5ec:	220b      	movs	r2, #11
   1d5ee:	18ba      	adds	r2, r7, r2
   1d5f0:	7812      	ldrb	r2, [r2, #0]
   1d5f2:	3201      	adds	r2, #1
   1d5f4:	701a      	strb	r2, [r3, #0]
   1d5f6:	e00f      	b.n	1d618 <CL_hashFinal+0x5c>
    {
        ((U8*)ctx->buf)[i] = 0;
   1d5f8:	687b      	ldr	r3, [r7, #4]
   1d5fa:	3314      	adds	r3, #20
   1d5fc:	001a      	movs	r2, r3
   1d5fe:	2317      	movs	r3, #23
   1d600:	18fb      	adds	r3, r7, r3
   1d602:	781b      	ldrb	r3, [r3, #0]
   1d604:	18d3      	adds	r3, r2, r3
   1d606:	2200      	movs	r2, #0
   1d608:	701a      	strb	r2, [r3, #0]
    U8 *ptr;

    /* Append pad byte, clear trailing bytes */
    nbytes = (U8)(ctx->byteCount) & 63;
    ((U8*)ctx->buf)[nbytes] = 0x80;
    for (i = (nbytes + 1); i < 64; i++)
   1d60a:	2317      	movs	r3, #23
   1d60c:	18fb      	adds	r3, r7, r3
   1d60e:	781a      	ldrb	r2, [r3, #0]
   1d610:	2317      	movs	r3, #23
   1d612:	18fb      	adds	r3, r7, r3
   1d614:	3201      	adds	r2, #1
   1d616:	701a      	strb	r2, [r3, #0]
   1d618:	2317      	movs	r3, #23
   1d61a:	18fb      	adds	r3, r7, r3
   1d61c:	781b      	ldrb	r3, [r3, #0]
   1d61e:	2b3f      	cmp	r3, #63	; 0x3f
   1d620:	d9ea      	bls.n	1d5f8 <CL_hashFinal+0x3c>

    /*
       If no room for an 8-byte count at end of buf, digest the buf,
       then clear it
     */
    if (nbytes > (64 - 9))
   1d622:	230b      	movs	r3, #11
   1d624:	18fb      	adds	r3, r7, r3
   1d626:	781b      	ldrb	r3, [r3, #0]
   1d628:	2b37      	cmp	r3, #55	; 0x37
   1d62a:	d90d      	bls.n	1d648 <CL_hashFinal+0x8c>
    {
        shaEngine(ctx->buf, ctx->h);
   1d62c:	687b      	ldr	r3, [r7, #4]
   1d62e:	3314      	adds	r3, #20
   1d630:	687a      	ldr	r2, [r7, #4]
   1d632:	0011      	movs	r1, r2
   1d634:	0018      	movs	r0, r3
   1d636:	f000 f8af 	bl	1d798 <shaEngine>
        memset(ctx->buf, 0, 64);
   1d63a:	687b      	ldr	r3, [r7, #4]
   1d63c:	3314      	adds	r3, #20
   1d63e:	2240      	movs	r2, #64	; 0x40
   1d640:	2100      	movs	r1, #0
   1d642:	0018      	movs	r0, r3
   1d644:	f008 f871 	bl	2572a <memset>
    /*
       Put the 8-byte bit count at end of buf.  We have been tracking
       bytes, not bits, so we left-shift our byte count by 3 as we do
       this.
     */
    temp = ctx->byteCount << 3; // low 4 bytes of bit count
   1d648:	687b      	ldr	r3, [r7, #4]
   1d64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1d64c:	00db      	lsls	r3, r3, #3
   1d64e:	613b      	str	r3, [r7, #16]
    ptr = &((U8*)ctx->buf)[63]; // point to low byte of bit count
   1d650:	687b      	ldr	r3, [r7, #4]
   1d652:	3314      	adds	r3, #20
   1d654:	333f      	adds	r3, #63	; 0x3f
   1d656:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
   1d658:	2317      	movs	r3, #23
   1d65a:	18fb      	adds	r3, r7, r3
   1d65c:	2200      	movs	r2, #0
   1d65e:	701a      	strb	r2, [r3, #0]
   1d660:	e00f      	b.n	1d682 <CL_hashFinal+0xc6>
    {
        *ptr-- = (U8)temp;
   1d662:	68fb      	ldr	r3, [r7, #12]
   1d664:	1e5a      	subs	r2, r3, #1
   1d666:	60fa      	str	r2, [r7, #12]
   1d668:	693a      	ldr	r2, [r7, #16]
   1d66a:	b2d2      	uxtb	r2, r2
   1d66c:	701a      	strb	r2, [r3, #0]
        temp >>= 8;
   1d66e:	693b      	ldr	r3, [r7, #16]
   1d670:	0a1b      	lsrs	r3, r3, #8
   1d672:	613b      	str	r3, [r7, #16]
       bytes, not bits, so we left-shift our byte count by 3 as we do
       this.
     */
    temp = ctx->byteCount << 3; // low 4 bytes of bit count
    ptr = &((U8*)ctx->buf)[63]; // point to low byte of bit count
    for (i = 0; i < 4; i++)
   1d674:	2317      	movs	r3, #23
   1d676:	18fb      	adds	r3, r7, r3
   1d678:	781a      	ldrb	r2, [r3, #0]
   1d67a:	2317      	movs	r3, #23
   1d67c:	18fb      	adds	r3, r7, r3
   1d67e:	3201      	adds	r2, #1
   1d680:	701a      	strb	r2, [r3, #0]
   1d682:	2317      	movs	r3, #23
   1d684:	18fb      	adds	r3, r7, r3
   1d686:	781b      	ldrb	r3, [r3, #0]
   1d688:	2b03      	cmp	r3, #3
   1d68a:	d9ea      	bls.n	1d662 <CL_hashFinal+0xa6>
    {
        *ptr-- = (U8)temp;
        temp >>= 8;
    }
    //
    temp = ctx->byteCountHi << 3;
   1d68c:	687b      	ldr	r3, [r7, #4]
   1d68e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1d690:	00db      	lsls	r3, r3, #3
   1d692:	613b      	str	r3, [r7, #16]
    temp |= ctx->byteCount >> (32 - 3); // high 4 bytes of bit count
   1d694:	687b      	ldr	r3, [r7, #4]
   1d696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1d698:	0f5b      	lsrs	r3, r3, #29
   1d69a:	693a      	ldr	r2, [r7, #16]
   1d69c:	4313      	orrs	r3, r2
   1d69e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < 4; i++)
   1d6a0:	2317      	movs	r3, #23
   1d6a2:	18fb      	adds	r3, r7, r3
   1d6a4:	2200      	movs	r2, #0
   1d6a6:	701a      	strb	r2, [r3, #0]
   1d6a8:	e00f      	b.n	1d6ca <CL_hashFinal+0x10e>
    {
        *ptr-- = (U8)temp;
   1d6aa:	68fb      	ldr	r3, [r7, #12]
   1d6ac:	1e5a      	subs	r2, r3, #1
   1d6ae:	60fa      	str	r2, [r7, #12]
   1d6b0:	693a      	ldr	r2, [r7, #16]
   1d6b2:	b2d2      	uxtb	r2, r2
   1d6b4:	701a      	strb	r2, [r3, #0]
        temp >>= 8;
   1d6b6:	693b      	ldr	r3, [r7, #16]
   1d6b8:	0a1b      	lsrs	r3, r3, #8
   1d6ba:	613b      	str	r3, [r7, #16]
        temp >>= 8;
    }
    //
    temp = ctx->byteCountHi << 3;
    temp |= ctx->byteCount >> (32 - 3); // high 4 bytes of bit count
    for (i = 0; i < 4; i++)
   1d6bc:	2317      	movs	r3, #23
   1d6be:	18fb      	adds	r3, r7, r3
   1d6c0:	781a      	ldrb	r2, [r3, #0]
   1d6c2:	2317      	movs	r3, #23
   1d6c4:	18fb      	adds	r3, r7, r3
   1d6c6:	3201      	adds	r2, #1
   1d6c8:	701a      	strb	r2, [r3, #0]
   1d6ca:	2317      	movs	r3, #23
   1d6cc:	18fb      	adds	r3, r7, r3
   1d6ce:	781b      	ldrb	r3, [r3, #0]
   1d6d0:	2b03      	cmp	r3, #3
   1d6d2:	d9ea      	bls.n	1d6aa <CL_hashFinal+0xee>
        temp >>= 8;
    }
    //show("final SHA crunch", ctx->buf, 64);

    /* Final digestion */
    shaEngine(ctx->buf, ctx->h);
   1d6d4:	687b      	ldr	r3, [r7, #4]
   1d6d6:	3314      	adds	r3, #20
   1d6d8:	687a      	ldr	r2, [r7, #4]
   1d6da:	0011      	movs	r1, r2
   1d6dc:	0018      	movs	r0, r3
   1d6de:	f000 f85b 	bl	1d798 <shaEngine>

    /* Unpack chaining variables to dest bytes. */
    memcpy(dest, ctx->h, 20);
   1d6e2:	6879      	ldr	r1, [r7, #4]
   1d6e4:	683b      	ldr	r3, [r7, #0]
   1d6e6:	2214      	movs	r2, #20
   1d6e8:	0018      	movs	r0, r3
   1d6ea:	f008 f800 	bl	256ee <memcpy>
    for (i = 0; i < 5; i++)
   1d6ee:	2317      	movs	r3, #23
   1d6f0:	18fb      	adds	r3, r7, r3
   1d6f2:	2200      	movs	r2, #0
   1d6f4:	701a      	strb	r2, [r3, #0]
   1d6f6:	e045      	b.n	1d784 <CL_hashFinal+0x1c8>
    {
        dest[i * 4 + 0] = (ctx->h[i] >> 24) & 0xFF;
   1d6f8:	2317      	movs	r3, #23
   1d6fa:	18fb      	adds	r3, r7, r3
   1d6fc:	781b      	ldrb	r3, [r3, #0]
   1d6fe:	009b      	lsls	r3, r3, #2
   1d700:	001a      	movs	r2, r3
   1d702:	683b      	ldr	r3, [r7, #0]
   1d704:	189b      	adds	r3, r3, r2
   1d706:	2217      	movs	r2, #23
   1d708:	18ba      	adds	r2, r7, r2
   1d70a:	7811      	ldrb	r1, [r2, #0]
   1d70c:	687a      	ldr	r2, [r7, #4]
   1d70e:	0089      	lsls	r1, r1, #2
   1d710:	588a      	ldr	r2, [r1, r2]
   1d712:	0e12      	lsrs	r2, r2, #24
   1d714:	b2d2      	uxtb	r2, r2
   1d716:	701a      	strb	r2, [r3, #0]
        dest[i * 4 + 1] = (ctx->h[i] >> 16) & 0xFF;
   1d718:	2317      	movs	r3, #23
   1d71a:	18fb      	adds	r3, r7, r3
   1d71c:	781b      	ldrb	r3, [r3, #0]
   1d71e:	009b      	lsls	r3, r3, #2
   1d720:	3301      	adds	r3, #1
   1d722:	683a      	ldr	r2, [r7, #0]
   1d724:	18d3      	adds	r3, r2, r3
   1d726:	2217      	movs	r2, #23
   1d728:	18ba      	adds	r2, r7, r2
   1d72a:	7811      	ldrb	r1, [r2, #0]
   1d72c:	687a      	ldr	r2, [r7, #4]
   1d72e:	0089      	lsls	r1, r1, #2
   1d730:	588a      	ldr	r2, [r1, r2]
   1d732:	0c12      	lsrs	r2, r2, #16
   1d734:	b2d2      	uxtb	r2, r2
   1d736:	701a      	strb	r2, [r3, #0]
        dest[i * 4 + 2] = (ctx->h[i] >>  8) & 0xFF;
   1d738:	2317      	movs	r3, #23
   1d73a:	18fb      	adds	r3, r7, r3
   1d73c:	781b      	ldrb	r3, [r3, #0]
   1d73e:	009b      	lsls	r3, r3, #2
   1d740:	3302      	adds	r3, #2
   1d742:	683a      	ldr	r2, [r7, #0]
   1d744:	18d3      	adds	r3, r2, r3
   1d746:	2217      	movs	r2, #23
   1d748:	18ba      	adds	r2, r7, r2
   1d74a:	7811      	ldrb	r1, [r2, #0]
   1d74c:	687a      	ldr	r2, [r7, #4]
   1d74e:	0089      	lsls	r1, r1, #2
   1d750:	588a      	ldr	r2, [r1, r2]
   1d752:	0a12      	lsrs	r2, r2, #8
   1d754:	b2d2      	uxtb	r2, r2
   1d756:	701a      	strb	r2, [r3, #0]
        dest[i * 4 + 3] = (ctx->h[i] >>  0) & 0xFF;
   1d758:	2317      	movs	r3, #23
   1d75a:	18fb      	adds	r3, r7, r3
   1d75c:	781b      	ldrb	r3, [r3, #0]
   1d75e:	009b      	lsls	r3, r3, #2
   1d760:	3303      	adds	r3, #3
   1d762:	683a      	ldr	r2, [r7, #0]
   1d764:	18d3      	adds	r3, r2, r3
   1d766:	2217      	movs	r2, #23
   1d768:	18ba      	adds	r2, r7, r2
   1d76a:	7811      	ldrb	r1, [r2, #0]
   1d76c:	687a      	ldr	r2, [r7, #4]
   1d76e:	0089      	lsls	r1, r1, #2
   1d770:	588a      	ldr	r2, [r1, r2]
   1d772:	b2d2      	uxtb	r2, r2
   1d774:	701a      	strb	r2, [r3, #0]
    /* Final digestion */
    shaEngine(ctx->buf, ctx->h);

    /* Unpack chaining variables to dest bytes. */
    memcpy(dest, ctx->h, 20);
    for (i = 0; i < 5; i++)
   1d776:	2317      	movs	r3, #23
   1d778:	18fb      	adds	r3, r7, r3
   1d77a:	781a      	ldrb	r2, [r3, #0]
   1d77c:	2317      	movs	r3, #23
   1d77e:	18fb      	adds	r3, r7, r3
   1d780:	3201      	adds	r2, #1
   1d782:	701a      	strb	r2, [r3, #0]
   1d784:	2317      	movs	r3, #23
   1d786:	18fb      	adds	r3, r7, r3
   1d788:	781b      	ldrb	r3, [r3, #0]
   1d78a:	2b04      	cmp	r3, #4
   1d78c:	d9b4      	bls.n	1d6f8 <CL_hashFinal+0x13c>
        dest[i * 4 + 0] = (ctx->h[i] >> 24) & 0xFF;
        dest[i * 4 + 1] = (ctx->h[i] >> 16) & 0xFF;
        dest[i * 4 + 2] = (ctx->h[i] >>  8) & 0xFF;
        dest[i * 4 + 3] = (ctx->h[i] >>  0) & 0xFF;
    }
}
   1d78e:	46c0      	nop			; (mov r8, r8)
   1d790:	46bd      	mov	sp, r7
   1d792:	b006      	add	sp, #24
   1d794:	bd80      	pop	{r7, pc}
   1d796:	46c0      	nop			; (mov r8, r8)

0001d798 <shaEngine>:
    CL_hashUpdate(&ctx, msg, msgBytes);
    CL_hashFinal(&ctx, dest);
}

void shaEngine(U32 *buf, U32 *h)
{
   1d798:	b580      	push	{r7, lr}
   1d79a:	b08c      	sub	sp, #48	; 0x30
   1d79c:	af00      	add	r7, sp, #0
   1d79e:	6078      	str	r0, [r7, #4]
   1d7a0:	6039      	str	r1, [r7, #0]
       hardware SHA engine.
     */

    U8 t;
    U32 a, b, c, d, e;
    U32 temp = 0;
   1d7a2:	2300      	movs	r3, #0
   1d7a4:	617b      	str	r3, [r7, #20]
    U8 *p;
    U32 *w = (U32*)buf;
   1d7a6:	687b      	ldr	r3, [r7, #4]
   1d7a8:	60fb      	str	r3, [r7, #12]
    /*
       Pack first 64 bytes of buf into w[0,...,15].  Within a word,
       bytes are big-endian.  Do this in place -- buf[0,...,63]
       overlays w[0,...,15].
     */
    p = (U8*)w;
   1d7aa:	68fb      	ldr	r3, [r7, #12]
   1d7ac:	613b      	str	r3, [r7, #16]
    for (t = 0; t < 16; t++)
   1d7ae:	232f      	movs	r3, #47	; 0x2f
   1d7b0:	18fb      	adds	r3, r7, r3
   1d7b2:	2200      	movs	r2, #0
   1d7b4:	701a      	strb	r2, [r3, #0]
   1d7b6:	e02e      	b.n	1d816 <shaEngine+0x7e>
    {
        temp = (temp << 8) | *p++;
   1d7b8:	697b      	ldr	r3, [r7, #20]
   1d7ba:	021a      	lsls	r2, r3, #8
   1d7bc:	693b      	ldr	r3, [r7, #16]
   1d7be:	1c59      	adds	r1, r3, #1
   1d7c0:	6139      	str	r1, [r7, #16]
   1d7c2:	781b      	ldrb	r3, [r3, #0]
   1d7c4:	4313      	orrs	r3, r2
   1d7c6:	617b      	str	r3, [r7, #20]
        temp = (temp << 8) | *p++;
   1d7c8:	697b      	ldr	r3, [r7, #20]
   1d7ca:	021a      	lsls	r2, r3, #8
   1d7cc:	693b      	ldr	r3, [r7, #16]
   1d7ce:	1c59      	adds	r1, r3, #1
   1d7d0:	6139      	str	r1, [r7, #16]
   1d7d2:	781b      	ldrb	r3, [r3, #0]
   1d7d4:	4313      	orrs	r3, r2
   1d7d6:	617b      	str	r3, [r7, #20]
        temp = (temp << 8) | *p++;
   1d7d8:	697b      	ldr	r3, [r7, #20]
   1d7da:	021a      	lsls	r2, r3, #8
   1d7dc:	693b      	ldr	r3, [r7, #16]
   1d7de:	1c59      	adds	r1, r3, #1
   1d7e0:	6139      	str	r1, [r7, #16]
   1d7e2:	781b      	ldrb	r3, [r3, #0]
   1d7e4:	4313      	orrs	r3, r2
   1d7e6:	617b      	str	r3, [r7, #20]
        temp = (temp << 8) | *p++;
   1d7e8:	697b      	ldr	r3, [r7, #20]
   1d7ea:	021a      	lsls	r2, r3, #8
   1d7ec:	693b      	ldr	r3, [r7, #16]
   1d7ee:	1c59      	adds	r1, r3, #1
   1d7f0:	6139      	str	r1, [r7, #16]
   1d7f2:	781b      	ldrb	r3, [r3, #0]
   1d7f4:	4313      	orrs	r3, r2
   1d7f6:	617b      	str	r3, [r7, #20]
        w[t] = temp;
   1d7f8:	232f      	movs	r3, #47	; 0x2f
   1d7fa:	18fb      	adds	r3, r7, r3
   1d7fc:	781b      	ldrb	r3, [r3, #0]
   1d7fe:	009b      	lsls	r3, r3, #2
   1d800:	68fa      	ldr	r2, [r7, #12]
   1d802:	18d3      	adds	r3, r2, r3
   1d804:	697a      	ldr	r2, [r7, #20]
   1d806:	601a      	str	r2, [r3, #0]
       Pack first 64 bytes of buf into w[0,...,15].  Within a word,
       bytes are big-endian.  Do this in place -- buf[0,...,63]
       overlays w[0,...,15].
     */
    p = (U8*)w;
    for (t = 0; t < 16; t++)
   1d808:	232f      	movs	r3, #47	; 0x2f
   1d80a:	18fb      	adds	r3, r7, r3
   1d80c:	781a      	ldrb	r2, [r3, #0]
   1d80e:	232f      	movs	r3, #47	; 0x2f
   1d810:	18fb      	adds	r3, r7, r3
   1d812:	3201      	adds	r2, #1
   1d814:	701a      	strb	r2, [r3, #0]
   1d816:	232f      	movs	r3, #47	; 0x2f
   1d818:	18fb      	adds	r3, r7, r3
   1d81a:	781b      	ldrb	r3, [r3, #0]
   1d81c:	2b0f      	cmp	r3, #15
   1d81e:	d9cb      	bls.n	1d7b8 <shaEngine+0x20>
    //temp = (temp << 8) | *p++;
    //h[t] = temp;
    //}

    /* Copy the chaining variables to a, b, c, d, e */
    a = h[0];
   1d820:	683b      	ldr	r3, [r7, #0]
   1d822:	681b      	ldr	r3, [r3, #0]
   1d824:	62bb      	str	r3, [r7, #40]	; 0x28
    b = h[1];
   1d826:	683b      	ldr	r3, [r7, #0]
   1d828:	685b      	ldr	r3, [r3, #4]
   1d82a:	627b      	str	r3, [r7, #36]	; 0x24
    c = h[2];
   1d82c:	683b      	ldr	r3, [r7, #0]
   1d82e:	689b      	ldr	r3, [r3, #8]
   1d830:	623b      	str	r3, [r7, #32]
    d = h[3];
   1d832:	683b      	ldr	r3, [r7, #0]
   1d834:	68db      	ldr	r3, [r3, #12]
   1d836:	61fb      	str	r3, [r7, #28]
    e = h[4];
   1d838:	683b      	ldr	r3, [r7, #0]
   1d83a:	691b      	ldr	r3, [r3, #16]
   1d83c:	61bb      	str	r3, [r7, #24]

    /* Now do the 80 rounds */
    for (t = 0; t < 80; t++)
   1d83e:	232f      	movs	r3, #47	; 0x2f
   1d840:	18fb      	adds	r3, r7, r3
   1d842:	2200      	movs	r2, #0
   1d844:	701a      	strb	r2, [r3, #0]
   1d846:	e0b3      	b.n	1d9b0 <shaEngine+0x218>
    {

        temp = a;
   1d848:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d84a:	617b      	str	r3, [r7, #20]
        leftRotate(temp, 5);
   1d84c:	697b      	ldr	r3, [r7, #20]
   1d84e:	221b      	movs	r2, #27
   1d850:	41d3      	rors	r3, r2
   1d852:	617b      	str	r3, [r7, #20]
        temp += e;
   1d854:	697a      	ldr	r2, [r7, #20]
   1d856:	69bb      	ldr	r3, [r7, #24]
   1d858:	18d3      	adds	r3, r2, r3
   1d85a:	617b      	str	r3, [r7, #20]
        temp += w[t & 0xf];
   1d85c:	232f      	movs	r3, #47	; 0x2f
   1d85e:	18fb      	adds	r3, r7, r3
   1d860:	781b      	ldrb	r3, [r3, #0]
   1d862:	220f      	movs	r2, #15
   1d864:	4013      	ands	r3, r2
   1d866:	009b      	lsls	r3, r3, #2
   1d868:	68fa      	ldr	r2, [r7, #12]
   1d86a:	18d3      	adds	r3, r2, r3
   1d86c:	681b      	ldr	r3, [r3, #0]
   1d86e:	697a      	ldr	r2, [r7, #20]
   1d870:	18d3      	adds	r3, r2, r3
   1d872:	617b      	str	r3, [r7, #20]

        if (t < 20)
   1d874:	232f      	movs	r3, #47	; 0x2f
   1d876:	18fb      	adds	r3, r7, r3
   1d878:	781b      	ldrb	r3, [r3, #0]
   1d87a:	2b13      	cmp	r3, #19
   1d87c:	d810      	bhi.n	1d8a0 <shaEngine+0x108>
        {
            temp += (b & c) | (~b & d);
   1d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d880:	6a3a      	ldr	r2, [r7, #32]
   1d882:	401a      	ands	r2, r3
   1d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d886:	43db      	mvns	r3, r3
   1d888:	69f9      	ldr	r1, [r7, #28]
   1d88a:	400b      	ands	r3, r1
   1d88c:	4313      	orrs	r3, r2
   1d88e:	697a      	ldr	r2, [r7, #20]
   1d890:	18d3      	adds	r3, r2, r3
   1d892:	617b      	str	r3, [r7, #20]
            temp += 0x5a827999L;
   1d894:	697b      	ldr	r3, [r7, #20]
   1d896:	4a5e      	ldr	r2, [pc, #376]	; (1da10 <shaEngine+0x278>)
   1d898:	4694      	mov	ip, r2
   1d89a:	4463      	add	r3, ip
   1d89c:	617b      	str	r3, [r7, #20]
   1d89e:	e036      	b.n	1d90e <shaEngine+0x176>
        }
        else if (t < 40)
   1d8a0:	232f      	movs	r3, #47	; 0x2f
   1d8a2:	18fb      	adds	r3, r7, r3
   1d8a4:	781b      	ldrb	r3, [r3, #0]
   1d8a6:	2b27      	cmp	r3, #39	; 0x27
   1d8a8:	d80d      	bhi.n	1d8c6 <shaEngine+0x12e>
        {
            temp += b ^ c ^ d;
   1d8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d8ac:	6a3b      	ldr	r3, [r7, #32]
   1d8ae:	405a      	eors	r2, r3
   1d8b0:	69fb      	ldr	r3, [r7, #28]
   1d8b2:	4053      	eors	r3, r2
   1d8b4:	697a      	ldr	r2, [r7, #20]
   1d8b6:	18d3      	adds	r3, r2, r3
   1d8b8:	617b      	str	r3, [r7, #20]
            temp += 0x6ed9eba1L;
   1d8ba:	697b      	ldr	r3, [r7, #20]
   1d8bc:	4a55      	ldr	r2, [pc, #340]	; (1da14 <shaEngine+0x27c>)
   1d8be:	4694      	mov	ip, r2
   1d8c0:	4463      	add	r3, ip
   1d8c2:	617b      	str	r3, [r7, #20]
   1d8c4:	e023      	b.n	1d90e <shaEngine+0x176>
        }
        else if (t < 60)
   1d8c6:	232f      	movs	r3, #47	; 0x2f
   1d8c8:	18fb      	adds	r3, r7, r3
   1d8ca:	781b      	ldrb	r3, [r3, #0]
   1d8cc:	2b3b      	cmp	r3, #59	; 0x3b
   1d8ce:	d811      	bhi.n	1d8f4 <shaEngine+0x15c>
        {
            temp += (b & c) | (b & d) | (c & d);
   1d8d0:	6a3a      	ldr	r2, [r7, #32]
   1d8d2:	69fb      	ldr	r3, [r7, #28]
   1d8d4:	4313      	orrs	r3, r2
   1d8d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d8d8:	401a      	ands	r2, r3
   1d8da:	6a3b      	ldr	r3, [r7, #32]
   1d8dc:	69f9      	ldr	r1, [r7, #28]
   1d8de:	400b      	ands	r3, r1
   1d8e0:	4313      	orrs	r3, r2
   1d8e2:	697a      	ldr	r2, [r7, #20]
   1d8e4:	18d3      	adds	r3, r2, r3
   1d8e6:	617b      	str	r3, [r7, #20]
            temp += 0x8f1bbcdcL;
   1d8e8:	697b      	ldr	r3, [r7, #20]
   1d8ea:	4a4b      	ldr	r2, [pc, #300]	; (1da18 <shaEngine+0x280>)
   1d8ec:	4694      	mov	ip, r2
   1d8ee:	4463      	add	r3, ip
   1d8f0:	617b      	str	r3, [r7, #20]
   1d8f2:	e00c      	b.n	1d90e <shaEngine+0x176>
        }
        else
        {
            temp += b ^ c ^ d;
   1d8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d8f6:	6a3b      	ldr	r3, [r7, #32]
   1d8f8:	405a      	eors	r2, r3
   1d8fa:	69fb      	ldr	r3, [r7, #28]
   1d8fc:	4053      	eors	r3, r2
   1d8fe:	697a      	ldr	r2, [r7, #20]
   1d900:	18d3      	adds	r3, r2, r3
   1d902:	617b      	str	r3, [r7, #20]
            temp += 0xca62c1d6L;
   1d904:	697b      	ldr	r3, [r7, #20]
   1d906:	4a45      	ldr	r2, [pc, #276]	; (1da1c <shaEngine+0x284>)
   1d908:	4694      	mov	ip, r2
   1d90a:	4463      	add	r3, ip
   1d90c:	617b      	str	r3, [r7, #20]
        }

        e = d;
   1d90e:	69fb      	ldr	r3, [r7, #28]
   1d910:	61bb      	str	r3, [r7, #24]
        d = c;
   1d912:	6a3b      	ldr	r3, [r7, #32]
   1d914:	61fb      	str	r3, [r7, #28]
        c = b; leftRotate(c, 30);
   1d916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d918:	623b      	str	r3, [r7, #32]
   1d91a:	6a3b      	ldr	r3, [r7, #32]
   1d91c:	2202      	movs	r2, #2
   1d91e:	41d3      	rors	r3, r2
   1d920:	623b      	str	r3, [r7, #32]
        b = a;
   1d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d924:	627b      	str	r3, [r7, #36]	; 0x24
        a = temp;
   1d926:	697b      	ldr	r3, [r7, #20]
   1d928:	62bb      	str	r3, [r7, #40]	; 0x28

        temp = w[t & 0xf] ^ w[(t - 3) & 0xf] ^ w[(t - 8) & 0xf] ^ w[(t - 14) & 0xf];
   1d92a:	232f      	movs	r3, #47	; 0x2f
   1d92c:	18fb      	adds	r3, r7, r3
   1d92e:	781b      	ldrb	r3, [r3, #0]
   1d930:	220f      	movs	r2, #15
   1d932:	4013      	ands	r3, r2
   1d934:	009b      	lsls	r3, r3, #2
   1d936:	68fa      	ldr	r2, [r7, #12]
   1d938:	18d3      	adds	r3, r2, r3
   1d93a:	681a      	ldr	r2, [r3, #0]
   1d93c:	232f      	movs	r3, #47	; 0x2f
   1d93e:	18fb      	adds	r3, r7, r3
   1d940:	781b      	ldrb	r3, [r3, #0]
   1d942:	3b03      	subs	r3, #3
   1d944:	0019      	movs	r1, r3
   1d946:	230f      	movs	r3, #15
   1d948:	400b      	ands	r3, r1
   1d94a:	009b      	lsls	r3, r3, #2
   1d94c:	68f9      	ldr	r1, [r7, #12]
   1d94e:	18cb      	adds	r3, r1, r3
   1d950:	681b      	ldr	r3, [r3, #0]
   1d952:	405a      	eors	r2, r3
   1d954:	232f      	movs	r3, #47	; 0x2f
   1d956:	18fb      	adds	r3, r7, r3
   1d958:	781b      	ldrb	r3, [r3, #0]
   1d95a:	3b08      	subs	r3, #8
   1d95c:	0019      	movs	r1, r3
   1d95e:	230f      	movs	r3, #15
   1d960:	400b      	ands	r3, r1
   1d962:	009b      	lsls	r3, r3, #2
   1d964:	68f9      	ldr	r1, [r7, #12]
   1d966:	18cb      	adds	r3, r1, r3
   1d968:	681b      	ldr	r3, [r3, #0]
   1d96a:	405a      	eors	r2, r3
   1d96c:	232f      	movs	r3, #47	; 0x2f
   1d96e:	18fb      	adds	r3, r7, r3
   1d970:	781b      	ldrb	r3, [r3, #0]
   1d972:	3b0e      	subs	r3, #14
   1d974:	0019      	movs	r1, r3
   1d976:	230f      	movs	r3, #15
   1d978:	400b      	ands	r3, r1
   1d97a:	009b      	lsls	r3, r3, #2
   1d97c:	68f9      	ldr	r1, [r7, #12]
   1d97e:	18cb      	adds	r3, r1, r3
   1d980:	681b      	ldr	r3, [r3, #0]
   1d982:	4053      	eors	r3, r2
   1d984:	617b      	str	r3, [r7, #20]
        leftRotate(temp, 1);
   1d986:	697b      	ldr	r3, [r7, #20]
   1d988:	221f      	movs	r2, #31
   1d98a:	41d3      	rors	r3, r2
   1d98c:	617b      	str	r3, [r7, #20]
        w[t & 0xf] = temp;
   1d98e:	232f      	movs	r3, #47	; 0x2f
   1d990:	18fb      	adds	r3, r7, r3
   1d992:	781b      	ldrb	r3, [r3, #0]
   1d994:	220f      	movs	r2, #15
   1d996:	4013      	ands	r3, r2
   1d998:	009b      	lsls	r3, r3, #2
   1d99a:	68fa      	ldr	r2, [r7, #12]
   1d99c:	18d3      	adds	r3, r2, r3
   1d99e:	697a      	ldr	r2, [r7, #20]
   1d9a0:	601a      	str	r2, [r3, #0]
    c = h[2];
    d = h[3];
    e = h[4];

    /* Now do the 80 rounds */
    for (t = 0; t < 80; t++)
   1d9a2:	232f      	movs	r3, #47	; 0x2f
   1d9a4:	18fb      	adds	r3, r7, r3
   1d9a6:	781a      	ldrb	r2, [r3, #0]
   1d9a8:	232f      	movs	r3, #47	; 0x2f
   1d9aa:	18fb      	adds	r3, r7, r3
   1d9ac:	3201      	adds	r2, #1
   1d9ae:	701a      	strb	r2, [r3, #0]
   1d9b0:	232f      	movs	r3, #47	; 0x2f
   1d9b2:	18fb      	adds	r3, r7, r3
   1d9b4:	781b      	ldrb	r3, [r3, #0]
   1d9b6:	2b4f      	cmp	r3, #79	; 0x4f
   1d9b8:	d800      	bhi.n	1d9bc <shaEngine+0x224>
   1d9ba:	e745      	b.n	1d848 <shaEngine+0xb0>
        w[t & 0xf] = temp;

    }

    /* Update the chaining variables */
    h[0] += a;
   1d9bc:	683b      	ldr	r3, [r7, #0]
   1d9be:	681a      	ldr	r2, [r3, #0]
   1d9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d9c2:	18d2      	adds	r2, r2, r3
   1d9c4:	683b      	ldr	r3, [r7, #0]
   1d9c6:	601a      	str	r2, [r3, #0]
    h[1] += b;
   1d9c8:	683b      	ldr	r3, [r7, #0]
   1d9ca:	3304      	adds	r3, #4
   1d9cc:	683a      	ldr	r2, [r7, #0]
   1d9ce:	3204      	adds	r2, #4
   1d9d0:	6811      	ldr	r1, [r2, #0]
   1d9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d9d4:	188a      	adds	r2, r1, r2
   1d9d6:	601a      	str	r2, [r3, #0]
    h[2] += c;
   1d9d8:	683b      	ldr	r3, [r7, #0]
   1d9da:	3308      	adds	r3, #8
   1d9dc:	683a      	ldr	r2, [r7, #0]
   1d9de:	3208      	adds	r2, #8
   1d9e0:	6811      	ldr	r1, [r2, #0]
   1d9e2:	6a3a      	ldr	r2, [r7, #32]
   1d9e4:	188a      	adds	r2, r1, r2
   1d9e6:	601a      	str	r2, [r3, #0]
    h[3] += d;
   1d9e8:	683b      	ldr	r3, [r7, #0]
   1d9ea:	330c      	adds	r3, #12
   1d9ec:	683a      	ldr	r2, [r7, #0]
   1d9ee:	320c      	adds	r2, #12
   1d9f0:	6811      	ldr	r1, [r2, #0]
   1d9f2:	69fa      	ldr	r2, [r7, #28]
   1d9f4:	188a      	adds	r2, r1, r2
   1d9f6:	601a      	str	r2, [r3, #0]
    h[4] += e;
   1d9f8:	683b      	ldr	r3, [r7, #0]
   1d9fa:	3310      	adds	r3, #16
   1d9fc:	683a      	ldr	r2, [r7, #0]
   1d9fe:	3210      	adds	r2, #16
   1da00:	6811      	ldr	r1, [r2, #0]
   1da02:	69ba      	ldr	r2, [r7, #24]
   1da04:	188a      	adds	r2, r1, r2
   1da06:	601a      	str	r2, [r3, #0]
    //p[1] = (U8)temp; temp >>= 8;
    //p[0] = (U8)temp;
    //p += 4;
    //}

   1da08:	46c0      	nop			; (mov r8, r8)
   1da0a:	46bd      	mov	sp, r7
   1da0c:	b00c      	add	sp, #48	; 0x30
   1da0e:	bd80      	pop	{r7, pc}
   1da10:	5a827999 	.word	0x5a827999
   1da14:	6ed9eba1 	.word	0x6ed9eba1
   1da18:	8f1bbcdc 	.word	0x8f1bbcdc
   1da1c:	ca62c1d6 	.word	0xca62c1d6

0001da20 <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
   1da20:	b580      	push	{r7, lr}
   1da22:	b0d8      	sub	sp, #352	; 0x160
   1da24:	af00      	add	r7, sp, #0
   1da26:	60f8      	str	r0, [r7, #12]
   1da28:	60b9      	str	r1, [r7, #8]
   1da2a:	607a      	str	r2, [r7, #4]
    int i = 0;
   1da2c:	2300      	movs	r3, #0
   1da2e:	22ae      	movs	r2, #174	; 0xae
   1da30:	0052      	lsls	r2, r2, #1
   1da32:	18ba      	adds	r2, r7, r2
   1da34:	6013      	str	r3, [r2, #0]
    uint32_t block = 0;
   1da36:	2300      	movs	r3, #0
   1da38:	22ac      	movs	r2, #172	; 0xac
   1da3a:	0052      	lsls	r2, r2, #1
   1da3c:	18ba      	adds	r2, r7, r2
   1da3e:	6013      	str	r3, [r2, #0]
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
   1da40:	2300      	movs	r3, #0
   1da42:	22ac      	movs	r2, #172	; 0xac
   1da44:	0052      	lsls	r2, r2, #1
   1da46:	18ba      	adds	r2, r7, r2
   1da48:	6013      	str	r3, [r2, #0]
   1da4a:	e2dd      	b.n	1e008 <sw_sha256_process+0x5e8>
        uint32_t word_value;
        uint32_t s0, s1;
        uint32_t t1, t2;
        uint32_t maj, ch;
        uint32_t rotate_register[8];
        const uint8_t* cur_msg_block = &blocks[block * SHA256_BLOCK_SIZE];
   1da4c:	23ac      	movs	r3, #172	; 0xac
   1da4e:	005b      	lsls	r3, r3, #1
   1da50:	18fb      	adds	r3, r7, r3
   1da52:	681b      	ldr	r3, [r3, #0]
   1da54:	019b      	lsls	r3, r3, #6
   1da56:	68ba      	ldr	r2, [r7, #8]
   1da58:	18d3      	adds	r3, r2, r3
   1da5a:	22a8      	movs	r2, #168	; 0xa8
   1da5c:	0052      	lsls	r2, r2, #1
   1da5e:	18ba      	adds	r2, r7, r2
   1da60:	6013      	str	r3, [r2, #0]

        // Swap word bytes
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
   1da62:	2300      	movs	r3, #0
   1da64:	22ae      	movs	r2, #174	; 0xae
   1da66:	0052      	lsls	r2, r2, #1
   1da68:	18ba      	adds	r2, r7, r2
   1da6a:	6013      	str	r3, [r2, #0]
   1da6c:	e063      	b.n	1db36 <sw_sha256_process+0x116>
        {
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
   1da6e:	23ae      	movs	r3, #174	; 0xae
   1da70:	005b      	lsls	r3, r3, #1
   1da72:	18fb      	adds	r3, r7, r3
   1da74:	681b      	ldr	r3, [r3, #0]
   1da76:	3303      	adds	r3, #3
   1da78:	22ae      	movs	r2, #174	; 0xae
   1da7a:	0052      	lsls	r2, r2, #1
   1da7c:	18ba      	adds	r2, r7, r2
   1da7e:	6812      	ldr	r2, [r2, #0]
   1da80:	21a8      	movs	r1, #168	; 0xa8
   1da82:	0049      	lsls	r1, r1, #1
   1da84:	1879      	adds	r1, r7, r1
   1da86:	6809      	ldr	r1, [r1, #0]
   1da88:	188a      	adds	r2, r1, r2
   1da8a:	7811      	ldrb	r1, [r2, #0]
   1da8c:	4a92      	ldr	r2, [pc, #584]	; (1dcd8 <sw_sha256_process+0x2b8>)
   1da8e:	20b0      	movs	r0, #176	; 0xb0
   1da90:	0040      	lsls	r0, r0, #1
   1da92:	4684      	mov	ip, r0
   1da94:	44bc      	add	ip, r7
   1da96:	4462      	add	r2, ip
   1da98:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
   1da9a:	23ae      	movs	r3, #174	; 0xae
   1da9c:	005b      	lsls	r3, r3, #1
   1da9e:	18fb      	adds	r3, r7, r3
   1daa0:	681b      	ldr	r3, [r3, #0]
   1daa2:	3302      	adds	r3, #2
   1daa4:	22ae      	movs	r2, #174	; 0xae
   1daa6:	0052      	lsls	r2, r2, #1
   1daa8:	18ba      	adds	r2, r7, r2
   1daaa:	6812      	ldr	r2, [r2, #0]
   1daac:	3201      	adds	r2, #1
   1daae:	21a8      	movs	r1, #168	; 0xa8
   1dab0:	0049      	lsls	r1, r1, #1
   1dab2:	1879      	adds	r1, r7, r1
   1dab4:	6809      	ldr	r1, [r1, #0]
   1dab6:	188a      	adds	r2, r1, r2
   1dab8:	7811      	ldrb	r1, [r2, #0]
   1daba:	4a87      	ldr	r2, [pc, #540]	; (1dcd8 <sw_sha256_process+0x2b8>)
   1dabc:	20b0      	movs	r0, #176	; 0xb0
   1dabe:	0040      	lsls	r0, r0, #1
   1dac0:	4684      	mov	ip, r0
   1dac2:	44bc      	add	ip, r7
   1dac4:	4462      	add	r2, ip
   1dac6:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
   1dac8:	23ae      	movs	r3, #174	; 0xae
   1daca:	005b      	lsls	r3, r3, #1
   1dacc:	18fb      	adds	r3, r7, r3
   1dace:	681b      	ldr	r3, [r3, #0]
   1dad0:	3301      	adds	r3, #1
   1dad2:	22ae      	movs	r2, #174	; 0xae
   1dad4:	0052      	lsls	r2, r2, #1
   1dad6:	18ba      	adds	r2, r7, r2
   1dad8:	6812      	ldr	r2, [r2, #0]
   1dada:	3202      	adds	r2, #2
   1dadc:	21a8      	movs	r1, #168	; 0xa8
   1dade:	0049      	lsls	r1, r1, #1
   1dae0:	1879      	adds	r1, r7, r1
   1dae2:	6809      	ldr	r1, [r1, #0]
   1dae4:	188a      	adds	r2, r1, r2
   1dae6:	7811      	ldrb	r1, [r2, #0]
   1dae8:	4a7b      	ldr	r2, [pc, #492]	; (1dcd8 <sw_sha256_process+0x2b8>)
   1daea:	20b0      	movs	r0, #176	; 0xb0
   1daec:	0040      	lsls	r0, r0, #1
   1daee:	4684      	mov	ip, r0
   1daf0:	44bc      	add	ip, r7
   1daf2:	4462      	add	r2, ip
   1daf4:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
   1daf6:	23ae      	movs	r3, #174	; 0xae
   1daf8:	005b      	lsls	r3, r3, #1
   1dafa:	18fb      	adds	r3, r7, r3
   1dafc:	681b      	ldr	r3, [r3, #0]
   1dafe:	3303      	adds	r3, #3
   1db00:	22a8      	movs	r2, #168	; 0xa8
   1db02:	0052      	lsls	r2, r2, #1
   1db04:	18ba      	adds	r2, r7, r2
   1db06:	6812      	ldr	r2, [r2, #0]
   1db08:	18d3      	adds	r3, r2, r3
   1db0a:	7819      	ldrb	r1, [r3, #0]
   1db0c:	4b72      	ldr	r3, [pc, #456]	; (1dcd8 <sw_sha256_process+0x2b8>)
   1db0e:	22b0      	movs	r2, #176	; 0xb0
   1db10:	0052      	lsls	r2, r2, #1
   1db12:	18ba      	adds	r2, r7, r2
   1db14:	18d2      	adds	r2, r2, r3
   1db16:	23ae      	movs	r3, #174	; 0xae
   1db18:	005b      	lsls	r3, r3, #1
   1db1a:	18fb      	adds	r3, r7, r3
   1db1c:	681b      	ldr	r3, [r3, #0]
   1db1e:	18d3      	adds	r3, r2, r3
   1db20:	1c0a      	adds	r2, r1, #0
   1db22:	701a      	strb	r2, [r3, #0]
        uint32_t maj, ch;
        uint32_t rotate_register[8];
        const uint8_t* cur_msg_block = &blocks[block * SHA256_BLOCK_SIZE];

        // Swap word bytes
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
   1db24:	23ae      	movs	r3, #174	; 0xae
   1db26:	005b      	lsls	r3, r3, #1
   1db28:	18fb      	adds	r3, r7, r3
   1db2a:	681b      	ldr	r3, [r3, #0]
   1db2c:	3304      	adds	r3, #4
   1db2e:	22ae      	movs	r2, #174	; 0xae
   1db30:	0052      	lsls	r2, r2, #1
   1db32:	18ba      	adds	r2, r7, r2
   1db34:	6013      	str	r3, [r2, #0]
   1db36:	23ae      	movs	r3, #174	; 0xae
   1db38:	005b      	lsls	r3, r3, #1
   1db3a:	18fb      	adds	r3, r7, r3
   1db3c:	681b      	ldr	r3, [r3, #0]
   1db3e:	2b3f      	cmp	r3, #63	; 0x3f
   1db40:	dd95      	ble.n	1da6e <sw_sha256_process+0x4e>
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
        }

        w_index = 16;
   1db42:	2310      	movs	r3, #16
   1db44:	22aa      	movs	r2, #170	; 0xaa
   1db46:	0052      	lsls	r2, r2, #1
   1db48:	18ba      	adds	r2, r7, r2
   1db4a:	6013      	str	r3, [r2, #0]
        while (w_index < SHA256_BLOCK_SIZE)
   1db4c:	e08d      	b.n	1dc6a <sw_sha256_process+0x24a>
        {
            // right rotate for 32-bit variable in C: (value >> places) | (value << 32 - places)
            word_value = w_union.w_word[w_index - 15];
   1db4e:	23aa      	movs	r3, #170	; 0xaa
   1db50:	005b      	lsls	r3, r3, #1
   1db52:	18fb      	adds	r3, r7, r3
   1db54:	681b      	ldr	r3, [r3, #0]
   1db56:	3b0f      	subs	r3, #15
   1db58:	001a      	movs	r2, r3
   1db5a:	4b5f      	ldr	r3, [pc, #380]	; (1dcd8 <sw_sha256_process+0x2b8>)
   1db5c:	21b0      	movs	r1, #176	; 0xb0
   1db5e:	0049      	lsls	r1, r1, #1
   1db60:	468c      	mov	ip, r1
   1db62:	44bc      	add	ip, r7
   1db64:	4463      	add	r3, ip
   1db66:	0092      	lsls	r2, r2, #2
   1db68:	58d3      	ldr	r3, [r2, r3]
   1db6a:	22a6      	movs	r2, #166	; 0xa6
   1db6c:	0052      	lsls	r2, r2, #1
   1db6e:	18ba      	adds	r2, r7, r2
   1db70:	6013      	str	r3, [r2, #0]
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
   1db72:	23a6      	movs	r3, #166	; 0xa6
   1db74:	005b      	lsls	r3, r3, #1
   1db76:	18fb      	adds	r3, r7, r3
   1db78:	681b      	ldr	r3, [r3, #0]
   1db7a:	2207      	movs	r2, #7
   1db7c:	41d3      	rors	r3, r2
   1db7e:	001a      	movs	r2, r3
   1db80:	23a6      	movs	r3, #166	; 0xa6
   1db82:	005b      	lsls	r3, r3, #1
   1db84:	18fb      	adds	r3, r7, r3
   1db86:	681b      	ldr	r3, [r3, #0]
   1db88:	2112      	movs	r1, #18
   1db8a:	41cb      	rors	r3, r1
   1db8c:	405a      	eors	r2, r3
   1db8e:	23a6      	movs	r3, #166	; 0xa6
   1db90:	005b      	lsls	r3, r3, #1
   1db92:	18fb      	adds	r3, r7, r3
   1db94:	681b      	ldr	r3, [r3, #0]
   1db96:	08db      	lsrs	r3, r3, #3
   1db98:	4053      	eors	r3, r2
   1db9a:	22a4      	movs	r2, #164	; 0xa4
   1db9c:	0052      	lsls	r2, r2, #1
   1db9e:	18ba      	adds	r2, r7, r2
   1dba0:	6013      	str	r3, [r2, #0]

            word_value = w_union.w_word[w_index - 2];
   1dba2:	23aa      	movs	r3, #170	; 0xaa
   1dba4:	005b      	lsls	r3, r3, #1
   1dba6:	18fb      	adds	r3, r7, r3
   1dba8:	681b      	ldr	r3, [r3, #0]
   1dbaa:	1e9a      	subs	r2, r3, #2
   1dbac:	4b4a      	ldr	r3, [pc, #296]	; (1dcd8 <sw_sha256_process+0x2b8>)
   1dbae:	21b0      	movs	r1, #176	; 0xb0
   1dbb0:	0049      	lsls	r1, r1, #1
   1dbb2:	468c      	mov	ip, r1
   1dbb4:	44bc      	add	ip, r7
   1dbb6:	4463      	add	r3, ip
   1dbb8:	0092      	lsls	r2, r2, #2
   1dbba:	58d3      	ldr	r3, [r2, r3]
   1dbbc:	22a6      	movs	r2, #166	; 0xa6
   1dbbe:	0052      	lsls	r2, r2, #1
   1dbc0:	18ba      	adds	r2, r7, r2
   1dbc2:	6013      	str	r3, [r2, #0]
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
   1dbc4:	23a6      	movs	r3, #166	; 0xa6
   1dbc6:	005b      	lsls	r3, r3, #1
   1dbc8:	18fb      	adds	r3, r7, r3
   1dbca:	681b      	ldr	r3, [r3, #0]
   1dbcc:	2211      	movs	r2, #17
   1dbce:	41d3      	rors	r3, r2
   1dbd0:	001a      	movs	r2, r3
   1dbd2:	23a6      	movs	r3, #166	; 0xa6
   1dbd4:	005b      	lsls	r3, r3, #1
   1dbd6:	18fb      	adds	r3, r7, r3
   1dbd8:	681b      	ldr	r3, [r3, #0]
   1dbda:	2113      	movs	r1, #19
   1dbdc:	41cb      	rors	r3, r1
   1dbde:	405a      	eors	r2, r3
   1dbe0:	23a6      	movs	r3, #166	; 0xa6
   1dbe2:	005b      	lsls	r3, r3, #1
   1dbe4:	18fb      	adds	r3, r7, r3
   1dbe6:	681b      	ldr	r3, [r3, #0]
   1dbe8:	0a9b      	lsrs	r3, r3, #10
   1dbea:	4053      	eors	r3, r2
   1dbec:	22a2      	movs	r2, #162	; 0xa2
   1dbee:	0052      	lsls	r2, r2, #1
   1dbf0:	18ba      	adds	r2, r7, r2
   1dbf2:	6013      	str	r3, [r2, #0]

            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
   1dbf4:	23aa      	movs	r3, #170	; 0xaa
   1dbf6:	005b      	lsls	r3, r3, #1
   1dbf8:	18fb      	adds	r3, r7, r3
   1dbfa:	681b      	ldr	r3, [r3, #0]
   1dbfc:	3b10      	subs	r3, #16
   1dbfe:	001a      	movs	r2, r3
   1dc00:	4b35      	ldr	r3, [pc, #212]	; (1dcd8 <sw_sha256_process+0x2b8>)
   1dc02:	21b0      	movs	r1, #176	; 0xb0
   1dc04:	0049      	lsls	r1, r1, #1
   1dc06:	468c      	mov	ip, r1
   1dc08:	44bc      	add	ip, r7
   1dc0a:	4463      	add	r3, ip
   1dc0c:	0092      	lsls	r2, r2, #2
   1dc0e:	58d2      	ldr	r2, [r2, r3]
   1dc10:	23a4      	movs	r3, #164	; 0xa4
   1dc12:	005b      	lsls	r3, r3, #1
   1dc14:	18fb      	adds	r3, r7, r3
   1dc16:	681b      	ldr	r3, [r3, #0]
   1dc18:	18d2      	adds	r2, r2, r3
   1dc1a:	23aa      	movs	r3, #170	; 0xaa
   1dc1c:	005b      	lsls	r3, r3, #1
   1dc1e:	18fb      	adds	r3, r7, r3
   1dc20:	681b      	ldr	r3, [r3, #0]
   1dc22:	1fd9      	subs	r1, r3, #7
   1dc24:	4b2c      	ldr	r3, [pc, #176]	; (1dcd8 <sw_sha256_process+0x2b8>)
   1dc26:	20b0      	movs	r0, #176	; 0xb0
   1dc28:	0040      	lsls	r0, r0, #1
   1dc2a:	4684      	mov	ip, r0
   1dc2c:	44bc      	add	ip, r7
   1dc2e:	4463      	add	r3, ip
   1dc30:	0089      	lsls	r1, r1, #2
   1dc32:	58cb      	ldr	r3, [r1, r3]
   1dc34:	18d2      	adds	r2, r2, r3
   1dc36:	23a2      	movs	r3, #162	; 0xa2
   1dc38:	005b      	lsls	r3, r3, #1
   1dc3a:	18fb      	adds	r3, r7, r3
   1dc3c:	681b      	ldr	r3, [r3, #0]
   1dc3e:	18d1      	adds	r1, r2, r3
   1dc40:	4b25      	ldr	r3, [pc, #148]	; (1dcd8 <sw_sha256_process+0x2b8>)
   1dc42:	22b0      	movs	r2, #176	; 0xb0
   1dc44:	0052      	lsls	r2, r2, #1
   1dc46:	4694      	mov	ip, r2
   1dc48:	44bc      	add	ip, r7
   1dc4a:	4463      	add	r3, ip
   1dc4c:	22aa      	movs	r2, #170	; 0xaa
   1dc4e:	0052      	lsls	r2, r2, #1
   1dc50:	18ba      	adds	r2, r7, r2
   1dc52:	6812      	ldr	r2, [r2, #0]
   1dc54:	0092      	lsls	r2, r2, #2
   1dc56:	50d1      	str	r1, [r2, r3]

            w_index++;
   1dc58:	23aa      	movs	r3, #170	; 0xaa
   1dc5a:	005b      	lsls	r3, r3, #1
   1dc5c:	18fb      	adds	r3, r7, r3
   1dc5e:	681b      	ldr	r3, [r3, #0]
   1dc60:	3301      	adds	r3, #1
   1dc62:	22aa      	movs	r2, #170	; 0xaa
   1dc64:	0052      	lsls	r2, r2, #1
   1dc66:	18ba      	adds	r2, r7, r2
   1dc68:	6013      	str	r3, [r2, #0]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
        }

        w_index = 16;
        while (w_index < SHA256_BLOCK_SIZE)
   1dc6a:	23aa      	movs	r3, #170	; 0xaa
   1dc6c:	005b      	lsls	r3, r3, #1
   1dc6e:	18fb      	adds	r3, r7, r3
   1dc70:	681b      	ldr	r3, [r3, #0]
   1dc72:	2b3f      	cmp	r3, #63	; 0x3f
   1dc74:	d800      	bhi.n	1dc78 <sw_sha256_process+0x258>
   1dc76:	e76a      	b.n	1db4e <sw_sha256_process+0x12e>

            w_index++;
        }

        // Initialize hash value for this chunk.
        for (i = 0; i < 8; i++)
   1dc78:	2300      	movs	r3, #0
   1dc7a:	22ae      	movs	r2, #174	; 0xae
   1dc7c:	0052      	lsls	r2, r2, #1
   1dc7e:	18ba      	adds	r2, r7, r2
   1dc80:	6013      	str	r3, [r2, #0]
   1dc82:	e01c      	b.n	1dcbe <sw_sha256_process+0x29e>
        {
            rotate_register[i] = ctx->hash[i];
   1dc84:	68fb      	ldr	r3, [r7, #12]
   1dc86:	22ae      	movs	r2, #174	; 0xae
   1dc88:	0052      	lsls	r2, r2, #1
   1dc8a:	18ba      	adds	r2, r7, r2
   1dc8c:	6812      	ldr	r2, [r2, #0]
   1dc8e:	3222      	adds	r2, #34	; 0x22
   1dc90:	0092      	lsls	r2, r2, #2
   1dc92:	58d1      	ldr	r1, [r2, r3]
   1dc94:	4b11      	ldr	r3, [pc, #68]	; (1dcdc <sw_sha256_process+0x2bc>)
   1dc96:	22b0      	movs	r2, #176	; 0xb0
   1dc98:	0052      	lsls	r2, r2, #1
   1dc9a:	4694      	mov	ip, r2
   1dc9c:	44bc      	add	ip, r7
   1dc9e:	4463      	add	r3, ip
   1dca0:	22ae      	movs	r2, #174	; 0xae
   1dca2:	0052      	lsls	r2, r2, #1
   1dca4:	18ba      	adds	r2, r7, r2
   1dca6:	6812      	ldr	r2, [r2, #0]
   1dca8:	0092      	lsls	r2, r2, #2
   1dcaa:	50d1      	str	r1, [r2, r3]

            w_index++;
        }

        // Initialize hash value for this chunk.
        for (i = 0; i < 8; i++)
   1dcac:	23ae      	movs	r3, #174	; 0xae
   1dcae:	005b      	lsls	r3, r3, #1
   1dcb0:	18fb      	adds	r3, r7, r3
   1dcb2:	681b      	ldr	r3, [r3, #0]
   1dcb4:	3301      	adds	r3, #1
   1dcb6:	22ae      	movs	r2, #174	; 0xae
   1dcb8:	0052      	lsls	r2, r2, #1
   1dcba:	18ba      	adds	r2, r7, r2
   1dcbc:	6013      	str	r3, [r2, #0]
   1dcbe:	23ae      	movs	r3, #174	; 0xae
   1dcc0:	005b      	lsls	r3, r3, #1
   1dcc2:	18fb      	adds	r3, r7, r3
   1dcc4:	681b      	ldr	r3, [r3, #0]
   1dcc6:	2b07      	cmp	r3, #7
   1dcc8:	dddc      	ble.n	1dc84 <sw_sha256_process+0x264>
        {
            rotate_register[i] = ctx->hash[i];
        }

        // hash calculation loop
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
   1dcca:	2300      	movs	r3, #0
   1dccc:	22ae      	movs	r2, #174	; 0xae
   1dcce:	0052      	lsls	r2, r2, #1
   1dcd0:	18ba      	adds	r2, r7, r2
   1dcd2:	6013      	str	r3, [r2, #0]
   1dcd4:	e156      	b.n	1df84 <sw_sha256_process+0x564>
   1dcd6:	46c0      	nop			; (mov r8, r8)
   1dcd8:	fffffed4 	.word	0xfffffed4
   1dcdc:	fffffeb4 	.word	0xfffffeb4
        {
            s0 = rotate_right(rotate_register[0], 2)
   1dce0:	4bcf      	ldr	r3, [pc, #828]	; (1e020 <sw_sha256_process+0x600>)
   1dce2:	22b0      	movs	r2, #176	; 0xb0
   1dce4:	0052      	lsls	r2, r2, #1
   1dce6:	4694      	mov	ip, r2
   1dce8:	44bc      	add	ip, r7
   1dcea:	4463      	add	r3, ip
   1dcec:	681b      	ldr	r3, [r3, #0]
   1dcee:	2202      	movs	r2, #2
   1dcf0:	41d3      	rors	r3, r2
   1dcf2:	001a      	movs	r2, r3
                 ^ rotate_right(rotate_register[0], 13)
   1dcf4:	4bca      	ldr	r3, [pc, #808]	; (1e020 <sw_sha256_process+0x600>)
   1dcf6:	21b0      	movs	r1, #176	; 0xb0
   1dcf8:	0049      	lsls	r1, r1, #1
   1dcfa:	468c      	mov	ip, r1
   1dcfc:	44bc      	add	ip, r7
   1dcfe:	4463      	add	r3, ip
   1dd00:	681b      	ldr	r3, [r3, #0]
   1dd02:	210d      	movs	r1, #13
   1dd04:	41cb      	rors	r3, r1
   1dd06:	405a      	eors	r2, r3
                 ^ rotate_right(rotate_register[0], 22);
   1dd08:	4bc5      	ldr	r3, [pc, #788]	; (1e020 <sw_sha256_process+0x600>)
   1dd0a:	21b0      	movs	r1, #176	; 0xb0
   1dd0c:	0049      	lsls	r1, r1, #1
   1dd0e:	468c      	mov	ip, r1
   1dd10:	44bc      	add	ip, r7
   1dd12:	4463      	add	r3, ip
   1dd14:	681b      	ldr	r3, [r3, #0]
   1dd16:	2116      	movs	r1, #22
   1dd18:	41cb      	rors	r3, r1
        }

        // hash calculation loop
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
        {
            s0 = rotate_right(rotate_register[0], 2)
   1dd1a:	4053      	eors	r3, r2
   1dd1c:	22a4      	movs	r2, #164	; 0xa4
   1dd1e:	0052      	lsls	r2, r2, #1
   1dd20:	18ba      	adds	r2, r7, r2
   1dd22:	6013      	str	r3, [r2, #0]
                 ^ rotate_right(rotate_register[0], 13)
                 ^ rotate_right(rotate_register[0], 22);
            maj = (rotate_register[0] & rotate_register[1])
   1dd24:	4bbe      	ldr	r3, [pc, #760]	; (1e020 <sw_sha256_process+0x600>)
   1dd26:	22b0      	movs	r2, #176	; 0xb0
   1dd28:	0052      	lsls	r2, r2, #1
   1dd2a:	4694      	mov	ip, r2
   1dd2c:	44bc      	add	ip, r7
   1dd2e:	4463      	add	r3, ip
   1dd30:	681a      	ldr	r2, [r3, #0]
   1dd32:	4bbb      	ldr	r3, [pc, #748]	; (1e020 <sw_sha256_process+0x600>)
   1dd34:	21b0      	movs	r1, #176	; 0xb0
   1dd36:	0049      	lsls	r1, r1, #1
   1dd38:	468c      	mov	ip, r1
   1dd3a:	44bc      	add	ip, r7
   1dd3c:	4463      	add	r3, ip
   1dd3e:	685b      	ldr	r3, [r3, #4]
   1dd40:	401a      	ands	r2, r3
                  ^ (rotate_register[0] & rotate_register[2])
   1dd42:	4bb7      	ldr	r3, [pc, #732]	; (1e020 <sw_sha256_process+0x600>)
   1dd44:	21b0      	movs	r1, #176	; 0xb0
   1dd46:	0049      	lsls	r1, r1, #1
   1dd48:	468c      	mov	ip, r1
   1dd4a:	44bc      	add	ip, r7
   1dd4c:	4463      	add	r3, ip
   1dd4e:	6819      	ldr	r1, [r3, #0]
   1dd50:	4bb3      	ldr	r3, [pc, #716]	; (1e020 <sw_sha256_process+0x600>)
   1dd52:	20b0      	movs	r0, #176	; 0xb0
   1dd54:	0040      	lsls	r0, r0, #1
   1dd56:	4684      	mov	ip, r0
   1dd58:	44bc      	add	ip, r7
   1dd5a:	4463      	add	r3, ip
   1dd5c:	689b      	ldr	r3, [r3, #8]
   1dd5e:	400b      	ands	r3, r1
   1dd60:	405a      	eors	r2, r3
                  ^ (rotate_register[1] & rotate_register[2]);
   1dd62:	4baf      	ldr	r3, [pc, #700]	; (1e020 <sw_sha256_process+0x600>)
   1dd64:	21b0      	movs	r1, #176	; 0xb0
   1dd66:	0049      	lsls	r1, r1, #1
   1dd68:	468c      	mov	ip, r1
   1dd6a:	44bc      	add	ip, r7
   1dd6c:	4463      	add	r3, ip
   1dd6e:	6859      	ldr	r1, [r3, #4]
   1dd70:	4bab      	ldr	r3, [pc, #684]	; (1e020 <sw_sha256_process+0x600>)
   1dd72:	20b0      	movs	r0, #176	; 0xb0
   1dd74:	0040      	lsls	r0, r0, #1
   1dd76:	4684      	mov	ip, r0
   1dd78:	44bc      	add	ip, r7
   1dd7a:	4463      	add	r3, ip
   1dd7c:	689b      	ldr	r3, [r3, #8]
   1dd7e:	400b      	ands	r3, r1
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
        {
            s0 = rotate_right(rotate_register[0], 2)
                 ^ rotate_right(rotate_register[0], 13)
                 ^ rotate_right(rotate_register[0], 22);
            maj = (rotate_register[0] & rotate_register[1])
   1dd80:	4053      	eors	r3, r2
   1dd82:	22a0      	movs	r2, #160	; 0xa0
   1dd84:	0052      	lsls	r2, r2, #1
   1dd86:	18ba      	adds	r2, r7, r2
   1dd88:	6013      	str	r3, [r2, #0]
                  ^ (rotate_register[0] & rotate_register[2])
                  ^ (rotate_register[1] & rotate_register[2]);
            t2 = s0 + maj;
   1dd8a:	23a4      	movs	r3, #164	; 0xa4
   1dd8c:	005b      	lsls	r3, r3, #1
   1dd8e:	18fb      	adds	r3, r7, r3
   1dd90:	681a      	ldr	r2, [r3, #0]
   1dd92:	23a0      	movs	r3, #160	; 0xa0
   1dd94:	005b      	lsls	r3, r3, #1
   1dd96:	18fb      	adds	r3, r7, r3
   1dd98:	681b      	ldr	r3, [r3, #0]
   1dd9a:	18d3      	adds	r3, r2, r3
   1dd9c:	229e      	movs	r2, #158	; 0x9e
   1dd9e:	0052      	lsls	r2, r2, #1
   1dda0:	18ba      	adds	r2, r7, r2
   1dda2:	6013      	str	r3, [r2, #0]
            s1 = rotate_right(rotate_register[4], 6)
   1dda4:	4b9e      	ldr	r3, [pc, #632]	; (1e020 <sw_sha256_process+0x600>)
   1dda6:	22b0      	movs	r2, #176	; 0xb0
   1dda8:	0052      	lsls	r2, r2, #1
   1ddaa:	4694      	mov	ip, r2
   1ddac:	44bc      	add	ip, r7
   1ddae:	4463      	add	r3, ip
   1ddb0:	691b      	ldr	r3, [r3, #16]
   1ddb2:	2206      	movs	r2, #6
   1ddb4:	41d3      	rors	r3, r2
   1ddb6:	001a      	movs	r2, r3
                 ^ rotate_right(rotate_register[4], 11)
   1ddb8:	4b99      	ldr	r3, [pc, #612]	; (1e020 <sw_sha256_process+0x600>)
   1ddba:	21b0      	movs	r1, #176	; 0xb0
   1ddbc:	0049      	lsls	r1, r1, #1
   1ddbe:	468c      	mov	ip, r1
   1ddc0:	44bc      	add	ip, r7
   1ddc2:	4463      	add	r3, ip
   1ddc4:	691b      	ldr	r3, [r3, #16]
   1ddc6:	210b      	movs	r1, #11
   1ddc8:	41cb      	rors	r3, r1
   1ddca:	405a      	eors	r2, r3
                 ^ rotate_right(rotate_register[4], 25);
   1ddcc:	4b94      	ldr	r3, [pc, #592]	; (1e020 <sw_sha256_process+0x600>)
   1ddce:	21b0      	movs	r1, #176	; 0xb0
   1ddd0:	0049      	lsls	r1, r1, #1
   1ddd2:	468c      	mov	ip, r1
   1ddd4:	44bc      	add	ip, r7
   1ddd6:	4463      	add	r3, ip
   1ddd8:	691b      	ldr	r3, [r3, #16]
   1ddda:	2119      	movs	r1, #25
   1dddc:	41cb      	rors	r3, r1
                 ^ rotate_right(rotate_register[0], 22);
            maj = (rotate_register[0] & rotate_register[1])
                  ^ (rotate_register[0] & rotate_register[2])
                  ^ (rotate_register[1] & rotate_register[2]);
            t2 = s0 + maj;
            s1 = rotate_right(rotate_register[4], 6)
   1ddde:	4053      	eors	r3, r2
   1dde0:	22a2      	movs	r2, #162	; 0xa2
   1dde2:	0052      	lsls	r2, r2, #1
   1dde4:	18ba      	adds	r2, r7, r2
   1dde6:	6013      	str	r3, [r2, #0]
                 ^ rotate_right(rotate_register[4], 11)
                 ^ rotate_right(rotate_register[4], 25);
            ch = (rotate_register[4] & rotate_register[5])
   1dde8:	4b8d      	ldr	r3, [pc, #564]	; (1e020 <sw_sha256_process+0x600>)
   1ddea:	22b0      	movs	r2, #176	; 0xb0
   1ddec:	0052      	lsls	r2, r2, #1
   1ddee:	4694      	mov	ip, r2
   1ddf0:	44bc      	add	ip, r7
   1ddf2:	4463      	add	r3, ip
   1ddf4:	691a      	ldr	r2, [r3, #16]
   1ddf6:	4b8a      	ldr	r3, [pc, #552]	; (1e020 <sw_sha256_process+0x600>)
   1ddf8:	21b0      	movs	r1, #176	; 0xb0
   1ddfa:	0049      	lsls	r1, r1, #1
   1ddfc:	468c      	mov	ip, r1
   1ddfe:	44bc      	add	ip, r7
   1de00:	4463      	add	r3, ip
   1de02:	695b      	ldr	r3, [r3, #20]
   1de04:	401a      	ands	r2, r3
                 ^ (~rotate_register[4] & rotate_register[6]);
   1de06:	4b86      	ldr	r3, [pc, #536]	; (1e020 <sw_sha256_process+0x600>)
   1de08:	21b0      	movs	r1, #176	; 0xb0
   1de0a:	0049      	lsls	r1, r1, #1
   1de0c:	468c      	mov	ip, r1
   1de0e:	44bc      	add	ip, r7
   1de10:	4463      	add	r3, ip
   1de12:	691b      	ldr	r3, [r3, #16]
   1de14:	43d9      	mvns	r1, r3
   1de16:	4b82      	ldr	r3, [pc, #520]	; (1e020 <sw_sha256_process+0x600>)
   1de18:	20b0      	movs	r0, #176	; 0xb0
   1de1a:	0040      	lsls	r0, r0, #1
   1de1c:	4684      	mov	ip, r0
   1de1e:	44bc      	add	ip, r7
   1de20:	4463      	add	r3, ip
   1de22:	699b      	ldr	r3, [r3, #24]
   1de24:	400b      	ands	r3, r1
                  ^ (rotate_register[1] & rotate_register[2]);
            t2 = s0 + maj;
            s1 = rotate_right(rotate_register[4], 6)
                 ^ rotate_right(rotate_register[4], 11)
                 ^ rotate_right(rotate_register[4], 25);
            ch = (rotate_register[4] & rotate_register[5])
   1de26:	4053      	eors	r3, r2
   1de28:	229c      	movs	r2, #156	; 0x9c
   1de2a:	0052      	lsls	r2, r2, #1
   1de2c:	18ba      	adds	r2, r7, r2
   1de2e:	6013      	str	r3, [r2, #0]
                 ^ (~rotate_register[4] & rotate_register[6]);
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
   1de30:	4b7b      	ldr	r3, [pc, #492]	; (1e020 <sw_sha256_process+0x600>)
   1de32:	22b0      	movs	r2, #176	; 0xb0
   1de34:	0052      	lsls	r2, r2, #1
   1de36:	4694      	mov	ip, r2
   1de38:	44bc      	add	ip, r7
   1de3a:	4463      	add	r3, ip
   1de3c:	69da      	ldr	r2, [r3, #28]
   1de3e:	23a2      	movs	r3, #162	; 0xa2
   1de40:	005b      	lsls	r3, r3, #1
   1de42:	18fb      	adds	r3, r7, r3
   1de44:	681b      	ldr	r3, [r3, #0]
   1de46:	18d2      	adds	r2, r2, r3
   1de48:	239c      	movs	r3, #156	; 0x9c
   1de4a:	005b      	lsls	r3, r3, #1
   1de4c:	18fb      	adds	r3, r7, r3
   1de4e:	681b      	ldr	r3, [r3, #0]
   1de50:	18d2      	adds	r2, r2, r3
   1de52:	4b74      	ldr	r3, [pc, #464]	; (1e024 <sw_sha256_process+0x604>)
   1de54:	21ae      	movs	r1, #174	; 0xae
   1de56:	0049      	lsls	r1, r1, #1
   1de58:	1879      	adds	r1, r7, r1
   1de5a:	6809      	ldr	r1, [r1, #0]
   1de5c:	0089      	lsls	r1, r1, #2
   1de5e:	58cb      	ldr	r3, [r1, r3]
   1de60:	18d2      	adds	r2, r2, r3
   1de62:	4b71      	ldr	r3, [pc, #452]	; (1e028 <sw_sha256_process+0x608>)
   1de64:	21b0      	movs	r1, #176	; 0xb0
   1de66:	0049      	lsls	r1, r1, #1
   1de68:	468c      	mov	ip, r1
   1de6a:	44bc      	add	ip, r7
   1de6c:	4463      	add	r3, ip
   1de6e:	21ae      	movs	r1, #174	; 0xae
   1de70:	0049      	lsls	r1, r1, #1
   1de72:	1879      	adds	r1, r7, r1
   1de74:	6809      	ldr	r1, [r1, #0]
   1de76:	0089      	lsls	r1, r1, #2
   1de78:	58cb      	ldr	r3, [r1, r3]
   1de7a:	18d3      	adds	r3, r2, r3
   1de7c:	229a      	movs	r2, #154	; 0x9a
   1de7e:	0052      	lsls	r2, r2, #1
   1de80:	18ba      	adds	r2, r7, r2
   1de82:	6013      	str	r3, [r2, #0]

            rotate_register[7] = rotate_register[6];
   1de84:	4b66      	ldr	r3, [pc, #408]	; (1e020 <sw_sha256_process+0x600>)
   1de86:	22b0      	movs	r2, #176	; 0xb0
   1de88:	0052      	lsls	r2, r2, #1
   1de8a:	4694      	mov	ip, r2
   1de8c:	44bc      	add	ip, r7
   1de8e:	4463      	add	r3, ip
   1de90:	699a      	ldr	r2, [r3, #24]
   1de92:	4b63      	ldr	r3, [pc, #396]	; (1e020 <sw_sha256_process+0x600>)
   1de94:	21b0      	movs	r1, #176	; 0xb0
   1de96:	0049      	lsls	r1, r1, #1
   1de98:	468c      	mov	ip, r1
   1de9a:	44bc      	add	ip, r7
   1de9c:	4463      	add	r3, ip
   1de9e:	61da      	str	r2, [r3, #28]
            rotate_register[6] = rotate_register[5];
   1dea0:	4b5f      	ldr	r3, [pc, #380]	; (1e020 <sw_sha256_process+0x600>)
   1dea2:	22b0      	movs	r2, #176	; 0xb0
   1dea4:	0052      	lsls	r2, r2, #1
   1dea6:	4694      	mov	ip, r2
   1dea8:	44bc      	add	ip, r7
   1deaa:	4463      	add	r3, ip
   1deac:	695a      	ldr	r2, [r3, #20]
   1deae:	4b5c      	ldr	r3, [pc, #368]	; (1e020 <sw_sha256_process+0x600>)
   1deb0:	21b0      	movs	r1, #176	; 0xb0
   1deb2:	0049      	lsls	r1, r1, #1
   1deb4:	468c      	mov	ip, r1
   1deb6:	44bc      	add	ip, r7
   1deb8:	4463      	add	r3, ip
   1deba:	619a      	str	r2, [r3, #24]
            rotate_register[5] = rotate_register[4];
   1debc:	4b58      	ldr	r3, [pc, #352]	; (1e020 <sw_sha256_process+0x600>)
   1debe:	22b0      	movs	r2, #176	; 0xb0
   1dec0:	0052      	lsls	r2, r2, #1
   1dec2:	4694      	mov	ip, r2
   1dec4:	44bc      	add	ip, r7
   1dec6:	4463      	add	r3, ip
   1dec8:	691a      	ldr	r2, [r3, #16]
   1deca:	4b55      	ldr	r3, [pc, #340]	; (1e020 <sw_sha256_process+0x600>)
   1decc:	21b0      	movs	r1, #176	; 0xb0
   1dece:	0049      	lsls	r1, r1, #1
   1ded0:	468c      	mov	ip, r1
   1ded2:	44bc      	add	ip, r7
   1ded4:	4463      	add	r3, ip
   1ded6:	615a      	str	r2, [r3, #20]
            rotate_register[4] = rotate_register[3] + t1;
   1ded8:	4b51      	ldr	r3, [pc, #324]	; (1e020 <sw_sha256_process+0x600>)
   1deda:	22b0      	movs	r2, #176	; 0xb0
   1dedc:	0052      	lsls	r2, r2, #1
   1dede:	4694      	mov	ip, r2
   1dee0:	44bc      	add	ip, r7
   1dee2:	4463      	add	r3, ip
   1dee4:	68da      	ldr	r2, [r3, #12]
   1dee6:	239a      	movs	r3, #154	; 0x9a
   1dee8:	005b      	lsls	r3, r3, #1
   1deea:	18fb      	adds	r3, r7, r3
   1deec:	681b      	ldr	r3, [r3, #0]
   1deee:	18d2      	adds	r2, r2, r3
   1def0:	4b4b      	ldr	r3, [pc, #300]	; (1e020 <sw_sha256_process+0x600>)
   1def2:	21b0      	movs	r1, #176	; 0xb0
   1def4:	0049      	lsls	r1, r1, #1
   1def6:	468c      	mov	ip, r1
   1def8:	44bc      	add	ip, r7
   1defa:	4463      	add	r3, ip
   1defc:	611a      	str	r2, [r3, #16]
            rotate_register[3] = rotate_register[2];
   1defe:	4b48      	ldr	r3, [pc, #288]	; (1e020 <sw_sha256_process+0x600>)
   1df00:	22b0      	movs	r2, #176	; 0xb0
   1df02:	0052      	lsls	r2, r2, #1
   1df04:	4694      	mov	ip, r2
   1df06:	44bc      	add	ip, r7
   1df08:	4463      	add	r3, ip
   1df0a:	689a      	ldr	r2, [r3, #8]
   1df0c:	4b44      	ldr	r3, [pc, #272]	; (1e020 <sw_sha256_process+0x600>)
   1df0e:	21b0      	movs	r1, #176	; 0xb0
   1df10:	0049      	lsls	r1, r1, #1
   1df12:	468c      	mov	ip, r1
   1df14:	44bc      	add	ip, r7
   1df16:	4463      	add	r3, ip
   1df18:	60da      	str	r2, [r3, #12]
            rotate_register[2] = rotate_register[1];
   1df1a:	4b41      	ldr	r3, [pc, #260]	; (1e020 <sw_sha256_process+0x600>)
   1df1c:	22b0      	movs	r2, #176	; 0xb0
   1df1e:	0052      	lsls	r2, r2, #1
   1df20:	4694      	mov	ip, r2
   1df22:	44bc      	add	ip, r7
   1df24:	4463      	add	r3, ip
   1df26:	685a      	ldr	r2, [r3, #4]
   1df28:	4b3d      	ldr	r3, [pc, #244]	; (1e020 <sw_sha256_process+0x600>)
   1df2a:	21b0      	movs	r1, #176	; 0xb0
   1df2c:	0049      	lsls	r1, r1, #1
   1df2e:	468c      	mov	ip, r1
   1df30:	44bc      	add	ip, r7
   1df32:	4463      	add	r3, ip
   1df34:	609a      	str	r2, [r3, #8]
            rotate_register[1] = rotate_register[0];
   1df36:	4b3a      	ldr	r3, [pc, #232]	; (1e020 <sw_sha256_process+0x600>)
   1df38:	22b0      	movs	r2, #176	; 0xb0
   1df3a:	0052      	lsls	r2, r2, #1
   1df3c:	4694      	mov	ip, r2
   1df3e:	44bc      	add	ip, r7
   1df40:	4463      	add	r3, ip
   1df42:	681a      	ldr	r2, [r3, #0]
   1df44:	4b36      	ldr	r3, [pc, #216]	; (1e020 <sw_sha256_process+0x600>)
   1df46:	21b0      	movs	r1, #176	; 0xb0
   1df48:	0049      	lsls	r1, r1, #1
   1df4a:	468c      	mov	ip, r1
   1df4c:	44bc      	add	ip, r7
   1df4e:	4463      	add	r3, ip
   1df50:	605a      	str	r2, [r3, #4]
            rotate_register[0] = t1 + t2;
   1df52:	239a      	movs	r3, #154	; 0x9a
   1df54:	005b      	lsls	r3, r3, #1
   1df56:	18fb      	adds	r3, r7, r3
   1df58:	681a      	ldr	r2, [r3, #0]
   1df5a:	239e      	movs	r3, #158	; 0x9e
   1df5c:	005b      	lsls	r3, r3, #1
   1df5e:	18fb      	adds	r3, r7, r3
   1df60:	681b      	ldr	r3, [r3, #0]
   1df62:	18d2      	adds	r2, r2, r3
   1df64:	4b2e      	ldr	r3, [pc, #184]	; (1e020 <sw_sha256_process+0x600>)
   1df66:	21b0      	movs	r1, #176	; 0xb0
   1df68:	0049      	lsls	r1, r1, #1
   1df6a:	468c      	mov	ip, r1
   1df6c:	44bc      	add	ip, r7
   1df6e:	4463      	add	r3, ip
   1df70:	601a      	str	r2, [r3, #0]
        {
            rotate_register[i] = ctx->hash[i];
        }

        // hash calculation loop
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
   1df72:	23ae      	movs	r3, #174	; 0xae
   1df74:	005b      	lsls	r3, r3, #1
   1df76:	18fb      	adds	r3, r7, r3
   1df78:	681b      	ldr	r3, [r3, #0]
   1df7a:	3301      	adds	r3, #1
   1df7c:	22ae      	movs	r2, #174	; 0xae
   1df7e:	0052      	lsls	r2, r2, #1
   1df80:	18ba      	adds	r2, r7, r2
   1df82:	6013      	str	r3, [r2, #0]
   1df84:	23ae      	movs	r3, #174	; 0xae
   1df86:	005b      	lsls	r3, r3, #1
   1df88:	18fb      	adds	r3, r7, r3
   1df8a:	681b      	ldr	r3, [r3, #0]
   1df8c:	2b3f      	cmp	r3, #63	; 0x3f
   1df8e:	dc00      	bgt.n	1df92 <sw_sha256_process+0x572>
   1df90:	e6a6      	b.n	1dce0 <sw_sha256_process+0x2c0>
            rotate_register[1] = rotate_register[0];
            rotate_register[0] = t1 + t2;
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
   1df92:	2300      	movs	r3, #0
   1df94:	22ae      	movs	r2, #174	; 0xae
   1df96:	0052      	lsls	r2, r2, #1
   1df98:	18ba      	adds	r2, r7, r2
   1df9a:	6013      	str	r3, [r2, #0]
   1df9c:	e025      	b.n	1dfea <sw_sha256_process+0x5ca>
        {
            ctx->hash[i] += rotate_register[i];
   1df9e:	68fb      	ldr	r3, [r7, #12]
   1dfa0:	22ae      	movs	r2, #174	; 0xae
   1dfa2:	0052      	lsls	r2, r2, #1
   1dfa4:	18ba      	adds	r2, r7, r2
   1dfa6:	6812      	ldr	r2, [r2, #0]
   1dfa8:	3222      	adds	r2, #34	; 0x22
   1dfaa:	0092      	lsls	r2, r2, #2
   1dfac:	58d2      	ldr	r2, [r2, r3]
   1dfae:	4b1c      	ldr	r3, [pc, #112]	; (1e020 <sw_sha256_process+0x600>)
   1dfb0:	21b0      	movs	r1, #176	; 0xb0
   1dfb2:	0049      	lsls	r1, r1, #1
   1dfb4:	468c      	mov	ip, r1
   1dfb6:	44bc      	add	ip, r7
   1dfb8:	4463      	add	r3, ip
   1dfba:	21ae      	movs	r1, #174	; 0xae
   1dfbc:	0049      	lsls	r1, r1, #1
   1dfbe:	1879      	adds	r1, r7, r1
   1dfc0:	6809      	ldr	r1, [r1, #0]
   1dfc2:	0089      	lsls	r1, r1, #2
   1dfc4:	58cb      	ldr	r3, [r1, r3]
   1dfc6:	18d1      	adds	r1, r2, r3
   1dfc8:	68fb      	ldr	r3, [r7, #12]
   1dfca:	22ae      	movs	r2, #174	; 0xae
   1dfcc:	0052      	lsls	r2, r2, #1
   1dfce:	18ba      	adds	r2, r7, r2
   1dfd0:	6812      	ldr	r2, [r2, #0]
   1dfd2:	3222      	adds	r2, #34	; 0x22
   1dfd4:	0092      	lsls	r2, r2, #2
   1dfd6:	50d1      	str	r1, [r2, r3]
            rotate_register[1] = rotate_register[0];
            rotate_register[0] = t1 + t2;
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
   1dfd8:	23ae      	movs	r3, #174	; 0xae
   1dfda:	005b      	lsls	r3, r3, #1
   1dfdc:	18fb      	adds	r3, r7, r3
   1dfde:	681b      	ldr	r3, [r3, #0]
   1dfe0:	3301      	adds	r3, #1
   1dfe2:	22ae      	movs	r2, #174	; 0xae
   1dfe4:	0052      	lsls	r2, r2, #1
   1dfe6:	18ba      	adds	r2, r7, r2
   1dfe8:	6013      	str	r3, [r2, #0]
   1dfea:	23ae      	movs	r3, #174	; 0xae
   1dfec:	005b      	lsls	r3, r3, #1
   1dfee:	18fb      	adds	r3, r7, r3
   1dff0:	681b      	ldr	r3, [r3, #0]
   1dff2:	2b07      	cmp	r3, #7
   1dff4:	ddd3      	ble.n	1df9e <sw_sha256_process+0x57e>
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
   1dff6:	23ac      	movs	r3, #172	; 0xac
   1dff8:	005b      	lsls	r3, r3, #1
   1dffa:	18fb      	adds	r3, r7, r3
   1dffc:	681b      	ldr	r3, [r3, #0]
   1dffe:	3301      	adds	r3, #1
   1e000:	22ac      	movs	r2, #172	; 0xac
   1e002:	0052      	lsls	r2, r2, #1
   1e004:	18ba      	adds	r2, r7, r2
   1e006:	6013      	str	r3, [r2, #0]
   1e008:	23ac      	movs	r3, #172	; 0xac
   1e00a:	005b      	lsls	r3, r3, #1
   1e00c:	18fb      	adds	r3, r7, r3
   1e00e:	681a      	ldr	r2, [r3, #0]
   1e010:	687b      	ldr	r3, [r7, #4]
   1e012:	429a      	cmp	r2, r3
   1e014:	d200      	bcs.n	1e018 <sw_sha256_process+0x5f8>
   1e016:	e519      	b.n	1da4c <sw_sha256_process+0x2c>
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
        }
    }
}
   1e018:	46c0      	nop			; (mov r8, r8)
   1e01a:	46bd      	mov	sp, r7
   1e01c:	b058      	add	sp, #352	; 0x160
   1e01e:	bd80      	pop	{r7, pc}
   1e020:	fffffeb4 	.word	0xfffffeb4
   1e024:	0002e4cc 	.word	0x0002e4cc
   1e028:	fffffed4 	.word	0xfffffed4

0001e02c <sw_sha256_init>:
 *
 * \param[in] ctx          SHA256 hash context
 */

void sw_sha256_init(sw_sha256_ctx* ctx)
{
   1e02c:	b580      	push	{r7, lr}
   1e02e:	b084      	sub	sp, #16
   1e030:	af00      	add	r7, sp, #0
   1e032:	6078      	str	r0, [r7, #4]
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
   1e034:	687b      	ldr	r3, [r7, #4]
   1e036:	22a8      	movs	r2, #168	; 0xa8
   1e038:	2100      	movs	r1, #0
   1e03a:	0018      	movs	r0, r3
   1e03c:	f007 fb75 	bl	2572a <memset>
    for (i = 0; i < 8; i++)
   1e040:	2300      	movs	r3, #0
   1e042:	60fb      	str	r3, [r7, #12]
   1e044:	e00b      	b.n	1e05e <sw_sha256_init+0x32>
    {
        ctx->hash[i] = hash_init[i];
   1e046:	4b09      	ldr	r3, [pc, #36]	; (1e06c <sw_sha256_init+0x40>)
   1e048:	68fa      	ldr	r2, [r7, #12]
   1e04a:	0092      	lsls	r2, r2, #2
   1e04c:	58d1      	ldr	r1, [r2, r3]
   1e04e:	687b      	ldr	r3, [r7, #4]
   1e050:	68fa      	ldr	r2, [r7, #12]
   1e052:	3222      	adds	r2, #34	; 0x22
   1e054:	0092      	lsls	r2, r2, #2
   1e056:	50d1      	str	r1, [r2, r3]
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    for (i = 0; i < 8; i++)
   1e058:	68fb      	ldr	r3, [r7, #12]
   1e05a:	3301      	adds	r3, #1
   1e05c:	60fb      	str	r3, [r7, #12]
   1e05e:	68fb      	ldr	r3, [r7, #12]
   1e060:	2b07      	cmp	r3, #7
   1e062:	ddf0      	ble.n	1e046 <sw_sha256_init+0x1a>
    {
        ctx->hash[i] = hash_init[i];
    }
}
   1e064:	46c0      	nop			; (mov r8, r8)
   1e066:	46bd      	mov	sp, r7
   1e068:	b004      	add	sp, #16
   1e06a:	bd80      	pop	{r7, pc}
   1e06c:	0002e5cc 	.word	0x0002e5cc

0001e070 <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
   1e070:	b580      	push	{r7, lr}
   1e072:	b088      	sub	sp, #32
   1e074:	af00      	add	r7, sp, #0
   1e076:	60f8      	str	r0, [r7, #12]
   1e078:	60b9      	str	r1, [r7, #8]
   1e07a:	607a      	str	r2, [r7, #4]
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
   1e07c:	68fb      	ldr	r3, [r7, #12]
   1e07e:	685b      	ldr	r3, [r3, #4]
   1e080:	2240      	movs	r2, #64	; 0x40
   1e082:	1ad3      	subs	r3, r2, r3
   1e084:	61fb      	str	r3, [r7, #28]
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
   1e086:	69fa      	ldr	r2, [r7, #28]
   1e088:	687b      	ldr	r3, [r7, #4]
   1e08a:	4293      	cmp	r3, r2
   1e08c:	d900      	bls.n	1e090 <sw_sha256_update+0x20>
   1e08e:	0013      	movs	r3, r2
   1e090:	61bb      	str	r3, [r7, #24]

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
   1e092:	68fb      	ldr	r3, [r7, #12]
   1e094:	685b      	ldr	r3, [r3, #4]
   1e096:	3308      	adds	r3, #8
   1e098:	68fa      	ldr	r2, [r7, #12]
   1e09a:	18d3      	adds	r3, r2, r3
   1e09c:	69ba      	ldr	r2, [r7, #24]
   1e09e:	68b9      	ldr	r1, [r7, #8]
   1e0a0:	0018      	movs	r0, r3
   1e0a2:	f007 fb24 	bl	256ee <memcpy>

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
   1e0a6:	68fb      	ldr	r3, [r7, #12]
   1e0a8:	685a      	ldr	r2, [r3, #4]
   1e0aa:	687b      	ldr	r3, [r7, #4]
   1e0ac:	18d3      	adds	r3, r2, r3
   1e0ae:	2b3f      	cmp	r3, #63	; 0x3f
   1e0b0:	d806      	bhi.n	1e0c0 <sw_sha256_update+0x50>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
   1e0b2:	68fb      	ldr	r3, [r7, #12]
   1e0b4:	685a      	ldr	r2, [r3, #4]
   1e0b6:	687b      	ldr	r3, [r7, #4]
   1e0b8:	18d2      	adds	r2, r2, r3
   1e0ba:	68fb      	ldr	r3, [r7, #12]
   1e0bc:	605a      	str	r2, [r3, #4]
        return;
   1e0be:	e031      	b.n	1e124 <sw_sha256_update+0xb4>
    }

    // Process the current block
    sw_sha256_process(ctx, ctx->block, 1);
   1e0c0:	68fb      	ldr	r3, [r7, #12]
   1e0c2:	3308      	adds	r3, #8
   1e0c4:	0019      	movs	r1, r3
   1e0c6:	68fb      	ldr	r3, [r7, #12]
   1e0c8:	2201      	movs	r2, #1
   1e0ca:	0018      	movs	r0, r3
   1e0cc:	f7ff fca8 	bl	1da20 <sw_sha256_process>

    // Process any additional blocks
    msg_size -= copy_size; // Adjust to the remaining message bytes
   1e0d0:	687a      	ldr	r2, [r7, #4]
   1e0d2:	69bb      	ldr	r3, [r7, #24]
   1e0d4:	1ad3      	subs	r3, r2, r3
   1e0d6:	607b      	str	r3, [r7, #4]
    block_count = msg_size / SHA256_BLOCK_SIZE;
   1e0d8:	687b      	ldr	r3, [r7, #4]
   1e0da:	099b      	lsrs	r3, r3, #6
   1e0dc:	617b      	str	r3, [r7, #20]
    sw_sha256_process(ctx, &msg[copy_size], block_count);
   1e0de:	68ba      	ldr	r2, [r7, #8]
   1e0e0:	69bb      	ldr	r3, [r7, #24]
   1e0e2:	18d1      	adds	r1, r2, r3
   1e0e4:	697a      	ldr	r2, [r7, #20]
   1e0e6:	68fb      	ldr	r3, [r7, #12]
   1e0e8:	0018      	movs	r0, r3
   1e0ea:	f7ff fc99 	bl	1da20 <sw_sha256_process>

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
   1e0ee:	68fb      	ldr	r3, [r7, #12]
   1e0f0:	681a      	ldr	r2, [r3, #0]
   1e0f2:	697b      	ldr	r3, [r7, #20]
   1e0f4:	3301      	adds	r3, #1
   1e0f6:	019b      	lsls	r3, r3, #6
   1e0f8:	18d2      	adds	r2, r2, r3
   1e0fa:	68fb      	ldr	r3, [r7, #12]
   1e0fc:	601a      	str	r2, [r3, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
   1e0fe:	687b      	ldr	r3, [r7, #4]
   1e100:	223f      	movs	r2, #63	; 0x3f
   1e102:	401a      	ands	r2, r3
   1e104:	68fb      	ldr	r3, [r7, #12]
   1e106:	605a      	str	r2, [r3, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
   1e108:	68fb      	ldr	r3, [r7, #12]
   1e10a:	3308      	adds	r3, #8
   1e10c:	0018      	movs	r0, r3
   1e10e:	697b      	ldr	r3, [r7, #20]
   1e110:	019a      	lsls	r2, r3, #6
   1e112:	69bb      	ldr	r3, [r7, #24]
   1e114:	18d3      	adds	r3, r2, r3
   1e116:	68ba      	ldr	r2, [r7, #8]
   1e118:	18d1      	adds	r1, r2, r3
   1e11a:	68fb      	ldr	r3, [r7, #12]
   1e11c:	685b      	ldr	r3, [r3, #4]
   1e11e:	001a      	movs	r2, r3
   1e120:	f007 fae5 	bl	256ee <memcpy>
}
   1e124:	46bd      	mov	sp, r7
   1e126:	b008      	add	sp, #32
   1e128:	bd80      	pop	{r7, pc}
   1e12a:	46c0      	nop			; (mov r8, r8)

0001e12c <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
   1e12c:	b580      	push	{r7, lr}
   1e12e:	b086      	sub	sp, #24
   1e130:	af00      	add	r7, sp, #0
   1e132:	6078      	str	r0, [r7, #4]
   1e134:	6039      	str	r1, [r7, #0]
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
   1e136:	687b      	ldr	r3, [r7, #4]
   1e138:	681a      	ldr	r2, [r3, #0]
   1e13a:	687b      	ldr	r3, [r7, #4]
   1e13c:	685b      	ldr	r3, [r3, #4]
   1e13e:	18d2      	adds	r2, r2, r3
   1e140:	687b      	ldr	r3, [r7, #4]
   1e142:	601a      	str	r2, [r3, #0]
    msg_size_bits = ctx->total_msg_size * 8;
   1e144:	687b      	ldr	r3, [r7, #4]
   1e146:	681b      	ldr	r3, [r3, #0]
   1e148:	00db      	lsls	r3, r3, #3
   1e14a:	60fb      	str	r3, [r7, #12]

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
   1e14c:	687b      	ldr	r3, [r7, #4]
   1e14e:	685b      	ldr	r3, [r3, #4]
   1e150:	2209      	movs	r2, #9
   1e152:	4252      	negs	r2, r2
   1e154:	1ad3      	subs	r3, r2, r3
   1e156:	223f      	movs	r2, #63	; 0x3f
   1e158:	4013      	ands	r3, r2
   1e15a:	60bb      	str	r3, [r7, #8]

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
   1e15c:	687b      	ldr	r3, [r7, #4]
   1e15e:	685b      	ldr	r3, [r3, #4]
   1e160:	1c59      	adds	r1, r3, #1
   1e162:	687a      	ldr	r2, [r7, #4]
   1e164:	6051      	str	r1, [r2, #4]
   1e166:	687a      	ldr	r2, [r7, #4]
   1e168:	18d3      	adds	r3, r2, r3
   1e16a:	2280      	movs	r2, #128	; 0x80
   1e16c:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
   1e16e:	687b      	ldr	r3, [r7, #4]
   1e170:	685b      	ldr	r3, [r3, #4]
   1e172:	3308      	adds	r3, #8
   1e174:	687a      	ldr	r2, [r7, #4]
   1e176:	18d0      	adds	r0, r2, r3
   1e178:	68bb      	ldr	r3, [r7, #8]
   1e17a:	3304      	adds	r3, #4
   1e17c:	001a      	movs	r2, r3
   1e17e:	2100      	movs	r1, #0
   1e180:	f007 fad3 	bl	2572a <memset>
    ctx->block_size += pad_zero_count + 4;
   1e184:	687b      	ldr	r3, [r7, #4]
   1e186:	685a      	ldr	r2, [r3, #4]
   1e188:	68bb      	ldr	r3, [r7, #8]
   1e18a:	18d3      	adds	r3, r2, r3
   1e18c:	1d1a      	adds	r2, r3, #4
   1e18e:	687b      	ldr	r3, [r7, #4]
   1e190:	605a      	str	r2, [r3, #4]

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
   1e192:	687b      	ldr	r3, [r7, #4]
   1e194:	685b      	ldr	r3, [r3, #4]
   1e196:	1c59      	adds	r1, r3, #1
   1e198:	687a      	ldr	r2, [r7, #4]
   1e19a:	6051      	str	r1, [r2, #4]
   1e19c:	68fa      	ldr	r2, [r7, #12]
   1e19e:	0e12      	lsrs	r2, r2, #24
   1e1a0:	b2d1      	uxtb	r1, r2
   1e1a2:	687a      	ldr	r2, [r7, #4]
   1e1a4:	18d3      	adds	r3, r2, r3
   1e1a6:	1c0a      	adds	r2, r1, #0
   1e1a8:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
   1e1aa:	687b      	ldr	r3, [r7, #4]
   1e1ac:	685b      	ldr	r3, [r3, #4]
   1e1ae:	1c59      	adds	r1, r3, #1
   1e1b0:	687a      	ldr	r2, [r7, #4]
   1e1b2:	6051      	str	r1, [r2, #4]
   1e1b4:	68fa      	ldr	r2, [r7, #12]
   1e1b6:	0c12      	lsrs	r2, r2, #16
   1e1b8:	b2d1      	uxtb	r1, r2
   1e1ba:	687a      	ldr	r2, [r7, #4]
   1e1bc:	18d3      	adds	r3, r2, r3
   1e1be:	1c0a      	adds	r2, r1, #0
   1e1c0:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
   1e1c2:	687b      	ldr	r3, [r7, #4]
   1e1c4:	685b      	ldr	r3, [r3, #4]
   1e1c6:	1c59      	adds	r1, r3, #1
   1e1c8:	687a      	ldr	r2, [r7, #4]
   1e1ca:	6051      	str	r1, [r2, #4]
   1e1cc:	68fa      	ldr	r2, [r7, #12]
   1e1ce:	0a12      	lsrs	r2, r2, #8
   1e1d0:	b2d1      	uxtb	r1, r2
   1e1d2:	687a      	ldr	r2, [r7, #4]
   1e1d4:	18d3      	adds	r3, r2, r3
   1e1d6:	1c0a      	adds	r2, r1, #0
   1e1d8:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
   1e1da:	687b      	ldr	r3, [r7, #4]
   1e1dc:	685b      	ldr	r3, [r3, #4]
   1e1de:	1c59      	adds	r1, r3, #1
   1e1e0:	687a      	ldr	r2, [r7, #4]
   1e1e2:	6051      	str	r1, [r2, #4]
   1e1e4:	68fa      	ldr	r2, [r7, #12]
   1e1e6:	b2d1      	uxtb	r1, r2
   1e1e8:	687a      	ldr	r2, [r7, #4]
   1e1ea:	18d3      	adds	r3, r2, r3
   1e1ec:	1c0a      	adds	r2, r1, #0
   1e1ee:	721a      	strb	r2, [r3, #8]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
   1e1f0:	687b      	ldr	r3, [r7, #4]
   1e1f2:	3308      	adds	r3, #8
   1e1f4:	0019      	movs	r1, r3
   1e1f6:	687b      	ldr	r3, [r7, #4]
   1e1f8:	685b      	ldr	r3, [r3, #4]
   1e1fa:	099a      	lsrs	r2, r3, #6
   1e1fc:	687b      	ldr	r3, [r7, #4]
   1e1fe:	0018      	movs	r0, r3
   1e200:	f7ff fc0e 	bl	1da20 <sw_sha256_process>

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
   1e204:	2300      	movs	r3, #0
   1e206:	617b      	str	r3, [r7, #20]
   1e208:	e023      	b.n	1e252 <sw_sha256_final+0x126>
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
   1e20a:	2303      	movs	r3, #3
   1e20c:	613b      	str	r3, [r7, #16]
   1e20e:	e01a      	b.n	1e246 <sw_sha256_final+0x11a>
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
   1e210:	697b      	ldr	r3, [r7, #20]
   1e212:	009a      	lsls	r2, r3, #2
   1e214:	693b      	ldr	r3, [r7, #16]
   1e216:	18d3      	adds	r3, r2, r3
   1e218:	683a      	ldr	r2, [r7, #0]
   1e21a:	18d3      	adds	r3, r2, r3
   1e21c:	687a      	ldr	r2, [r7, #4]
   1e21e:	6979      	ldr	r1, [r7, #20]
   1e220:	3122      	adds	r1, #34	; 0x22
   1e222:	0089      	lsls	r1, r1, #2
   1e224:	588a      	ldr	r2, [r1, r2]
   1e226:	b2d2      	uxtb	r2, r2
   1e228:	701a      	strb	r2, [r3, #0]

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
   1e22a:	693b      	ldr	r3, [r7, #16]
   1e22c:	3b01      	subs	r3, #1
   1e22e:	613b      	str	r3, [r7, #16]
   1e230:	687b      	ldr	r3, [r7, #4]
   1e232:	697a      	ldr	r2, [r7, #20]
   1e234:	3222      	adds	r2, #34	; 0x22
   1e236:	0092      	lsls	r2, r2, #2
   1e238:	58d3      	ldr	r3, [r2, r3]
   1e23a:	0a19      	lsrs	r1, r3, #8
   1e23c:	687b      	ldr	r3, [r7, #4]
   1e23e:	697a      	ldr	r2, [r7, #20]
   1e240:	3222      	adds	r2, #34	; 0x22
   1e242:	0092      	lsls	r2, r2, #2
   1e244:	50d1      	str	r1, [r2, r3]
   1e246:	693b      	ldr	r3, [r7, #16]
   1e248:	2b00      	cmp	r3, #0
   1e24a:	dae1      	bge.n	1e210 <sw_sha256_final+0xe4>

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
   1e24c:	697b      	ldr	r3, [r7, #20]
   1e24e:	3301      	adds	r3, #1
   1e250:	617b      	str	r3, [r7, #20]
   1e252:	697b      	ldr	r3, [r7, #20]
   1e254:	2b07      	cmp	r3, #7
   1e256:	ddd8      	ble.n	1e20a <sw_sha256_final+0xde>
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
        }
    }
}
   1e258:	46c0      	nop			; (mov r8, r8)
   1e25a:	46bd      	mov	sp, r7
   1e25c:	b006      	add	sp, #24
   1e25e:	bd80      	pop	{r7, pc}

0001e260 <atcacert_date_enc>:

int atcacert_date_enc(atcacert_date_format_t   format,
                      const atcacert_tm_utc_t* timestamp,
                      uint8_t*                 formatted_date,
                      size_t*                  formatted_date_size)
{
   1e260:	b580      	push	{r7, lr}
   1e262:	b084      	sub	sp, #16
   1e264:	af00      	add	r7, sp, #0
   1e266:	60b9      	str	r1, [r7, #8]
   1e268:	607a      	str	r2, [r7, #4]
   1e26a:	603b      	str	r3, [r7, #0]
   1e26c:	230f      	movs	r3, #15
   1e26e:	18fb      	adds	r3, r7, r3
   1e270:	1c02      	adds	r2, r0, #0
   1e272:	701a      	strb	r2, [r3, #0]
    if (timestamp == NULL || formatted_date_size == NULL || format < 0 || format >= sizeof(ATCACERT_DATE_FORMAT_SIZES) / sizeof(ATCACERT_DATE_FORMAT_SIZES[0]))
   1e274:	68bb      	ldr	r3, [r7, #8]
   1e276:	2b00      	cmp	r3, #0
   1e278:	d007      	beq.n	1e28a <atcacert_date_enc+0x2a>
   1e27a:	683b      	ldr	r3, [r7, #0]
   1e27c:	2b00      	cmp	r3, #0
   1e27e:	d004      	beq.n	1e28a <atcacert_date_enc+0x2a>
   1e280:	230f      	movs	r3, #15
   1e282:	18fb      	adds	r3, r7, r3
   1e284:	781b      	ldrb	r3, [r3, #0]
   1e286:	2b04      	cmp	r3, #4
   1e288:	d901      	bls.n	1e28e <atcacert_date_enc+0x2e>
    {
        return ATCACERT_E_BAD_PARAMS;
   1e28a:	2302      	movs	r3, #2
   1e28c:	e056      	b.n	1e33c <atcacert_date_enc+0xdc>
    }

    if (formatted_date != NULL && *formatted_date_size < ATCACERT_DATE_FORMAT_SIZES[format])
   1e28e:	687b      	ldr	r3, [r7, #4]
   1e290:	2b00      	cmp	r3, #0
   1e292:	d013      	beq.n	1e2bc <atcacert_date_enc+0x5c>
   1e294:	683b      	ldr	r3, [r7, #0]
   1e296:	681a      	ldr	r2, [r3, #0]
   1e298:	230f      	movs	r3, #15
   1e29a:	18fb      	adds	r3, r7, r3
   1e29c:	7819      	ldrb	r1, [r3, #0]
   1e29e:	4b29      	ldr	r3, [pc, #164]	; (1e344 <atcacert_date_enc+0xe4>)
   1e2a0:	0089      	lsls	r1, r1, #2
   1e2a2:	58cb      	ldr	r3, [r1, r3]
   1e2a4:	429a      	cmp	r2, r3
   1e2a6:	d209      	bcs.n	1e2bc <atcacert_date_enc+0x5c>
    {
        *formatted_date_size = ATCACERT_DATE_FORMAT_SIZES[format];
   1e2a8:	230f      	movs	r3, #15
   1e2aa:	18fb      	adds	r3, r7, r3
   1e2ac:	781a      	ldrb	r2, [r3, #0]
   1e2ae:	4b25      	ldr	r3, [pc, #148]	; (1e344 <atcacert_date_enc+0xe4>)
   1e2b0:	0092      	lsls	r2, r2, #2
   1e2b2:	58d2      	ldr	r2, [r2, r3]
   1e2b4:	683b      	ldr	r3, [r7, #0]
   1e2b6:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
   1e2b8:	2303      	movs	r3, #3
   1e2ba:	e03f      	b.n	1e33c <atcacert_date_enc+0xdc>
    }
    *formatted_date_size = ATCACERT_DATE_FORMAT_SIZES[format];
   1e2bc:	230f      	movs	r3, #15
   1e2be:	18fb      	adds	r3, r7, r3
   1e2c0:	781a      	ldrb	r2, [r3, #0]
   1e2c2:	4b20      	ldr	r3, [pc, #128]	; (1e344 <atcacert_date_enc+0xe4>)
   1e2c4:	0092      	lsls	r2, r2, #2
   1e2c6:	58d2      	ldr	r2, [r2, r3]
   1e2c8:	683b      	ldr	r3, [r7, #0]
   1e2ca:	601a      	str	r2, [r3, #0]
    if (formatted_date == NULL)
   1e2cc:	687b      	ldr	r3, [r7, #4]
   1e2ce:	2b00      	cmp	r3, #0
   1e2d0:	d101      	bne.n	1e2d6 <atcacert_date_enc+0x76>
    {
        return ATCACERT_E_SUCCESS;  // Caller just wanted
   1e2d2:	2300      	movs	r3, #0
   1e2d4:	e032      	b.n	1e33c <atcacert_date_enc+0xdc>

    }
    switch (format)
   1e2d6:	230f      	movs	r3, #15
   1e2d8:	18fb      	adds	r3, r7, r3
   1e2da:	781b      	ldrb	r3, [r3, #0]
   1e2dc:	2b04      	cmp	r3, #4
   1e2de:	d82c      	bhi.n	1e33a <atcacert_date_enc+0xda>
   1e2e0:	009a      	lsls	r2, r3, #2
   1e2e2:	4b19      	ldr	r3, [pc, #100]	; (1e348 <atcacert_date_enc+0xe8>)
   1e2e4:	18d3      	adds	r3, r2, r3
   1e2e6:	681b      	ldr	r3, [r3, #0]
   1e2e8:	469f      	mov	pc, r3
    {
    case DATEFMT_ISO8601_SEP:     return atcacert_date_enc_iso8601_sep(timestamp, formatted_date);
   1e2ea:	687a      	ldr	r2, [r7, #4]
   1e2ec:	68bb      	ldr	r3, [r7, #8]
   1e2ee:	0011      	movs	r1, r2
   1e2f0:	0018      	movs	r0, r3
   1e2f2:	f000 f9cd 	bl	1e690 <atcacert_date_enc_iso8601_sep>
   1e2f6:	0003      	movs	r3, r0
   1e2f8:	e020      	b.n	1e33c <atcacert_date_enc+0xdc>
    case DATEFMT_RFC5280_UTC:     return atcacert_date_enc_rfc5280_utc(timestamp, formatted_date);
   1e2fa:	687a      	ldr	r2, [r7, #4]
   1e2fc:	68bb      	ldr	r3, [r7, #8]
   1e2fe:	0011      	movs	r1, r2
   1e300:	0018      	movs	r0, r3
   1e302:	f000 fb3b 	bl	1e97c <atcacert_date_enc_rfc5280_utc>
   1e306:	0003      	movs	r3, r0
   1e308:	e018      	b.n	1e33c <atcacert_date_enc+0xdc>
    case DATEFMT_POSIX_UINT32_BE: return atcacert_date_enc_posix_uint32_be(timestamp, formatted_date);
   1e30a:	687a      	ldr	r2, [r7, #4]
   1e30c:	68bb      	ldr	r3, [r7, #8]
   1e30e:	0011      	movs	r1, r2
   1e310:	0018      	movs	r0, r3
   1e312:	f000 ffcf 	bl	1f2b4 <atcacert_date_enc_posix_uint32_be>
   1e316:	0003      	movs	r3, r0
   1e318:	e010      	b.n	1e33c <atcacert_date_enc+0xdc>
    case DATEFMT_POSIX_UINT32_LE: return atcacert_date_enc_posix_uint32_le(timestamp, formatted_date);
   1e31a:	687a      	ldr	r2, [r7, #4]
   1e31c:	68bb      	ldr	r3, [r7, #8]
   1e31e:	0011      	movs	r1, r2
   1e320:	0018      	movs	r0, r3
   1e322:	f001 f83d 	bl	1f3a0 <atcacert_date_enc_posix_uint32_le>
   1e326:	0003      	movs	r3, r0
   1e328:	e008      	b.n	1e33c <atcacert_date_enc+0xdc>
    case DATEFMT_RFC5280_GEN:     return atcacert_date_enc_rfc5280_gen(timestamp, formatted_date);
   1e32a:	687a      	ldr	r2, [r7, #4]
   1e32c:	68bb      	ldr	r3, [r7, #8]
   1e32e:	0011      	movs	r1, r2
   1e330:	0018      	movs	r0, r3
   1e332:	f000 fc89 	bl	1ec48 <atcacert_date_enc_rfc5280_gen>
   1e336:	0003      	movs	r3, r0
   1e338:	e000      	b.n	1e33c <atcacert_date_enc+0xdc>
    default: return ATCACERT_E_BAD_PARAMS;
   1e33a:	2302      	movs	r3, #2
    }

    return ATCACERT_E_BAD_PARAMS;
}
   1e33c:	0018      	movs	r0, r3
   1e33e:	46bd      	mov	sp, r7
   1e340:	b004      	add	sp, #16
   1e342:	bd80      	pop	{r7, pc}
   1e344:	0002e5ec 	.word	0x0002e5ec
   1e348:	0002e600 	.word	0x0002e600

0001e34c <atcacert_date_dec>:

int atcacert_date_dec(atcacert_date_format_t format,
                      const uint8_t*         formatted_date,
                      size_t                 formatted_date_size,
                      atcacert_tm_utc_t*     timestamp)
{
   1e34c:	b580      	push	{r7, lr}
   1e34e:	b084      	sub	sp, #16
   1e350:	af00      	add	r7, sp, #0
   1e352:	60b9      	str	r1, [r7, #8]
   1e354:	607a      	str	r2, [r7, #4]
   1e356:	603b      	str	r3, [r7, #0]
   1e358:	230f      	movs	r3, #15
   1e35a:	18fb      	adds	r3, r7, r3
   1e35c:	1c02      	adds	r2, r0, #0
   1e35e:	701a      	strb	r2, [r3, #0]
    if (formatted_date == NULL || timestamp == NULL || format < 0 || format >= sizeof(ATCACERT_DATE_FORMAT_SIZES) / sizeof(ATCACERT_DATE_FORMAT_SIZES[0]))
   1e360:	68bb      	ldr	r3, [r7, #8]
   1e362:	2b00      	cmp	r3, #0
   1e364:	d007      	beq.n	1e376 <atcacert_date_dec+0x2a>
   1e366:	683b      	ldr	r3, [r7, #0]
   1e368:	2b00      	cmp	r3, #0
   1e36a:	d004      	beq.n	1e376 <atcacert_date_dec+0x2a>
   1e36c:	230f      	movs	r3, #15
   1e36e:	18fb      	adds	r3, r7, r3
   1e370:	781b      	ldrb	r3, [r3, #0]
   1e372:	2b04      	cmp	r3, #4
   1e374:	d901      	bls.n	1e37a <atcacert_date_dec+0x2e>
    {
        return ATCACERT_E_BAD_PARAMS;
   1e376:	2302      	movs	r3, #2
   1e378:	e03d      	b.n	1e3f6 <atcacert_date_dec+0xaa>
    }

    if (formatted_date_size < ATCACERT_DATE_FORMAT_SIZES[format])
   1e37a:	230f      	movs	r3, #15
   1e37c:	18fb      	adds	r3, r7, r3
   1e37e:	781a      	ldrb	r2, [r3, #0]
   1e380:	4b1f      	ldr	r3, [pc, #124]	; (1e400 <atcacert_date_dec+0xb4>)
   1e382:	0092      	lsls	r2, r2, #2
   1e384:	58d2      	ldr	r2, [r2, r3]
   1e386:	687b      	ldr	r3, [r7, #4]
   1e388:	429a      	cmp	r2, r3
   1e38a:	d901      	bls.n	1e390 <atcacert_date_dec+0x44>
    {
        return ATCACERT_E_DECODING_ERROR;  // Not enough data to parse this date format
   1e38c:	2304      	movs	r3, #4
   1e38e:	e032      	b.n	1e3f6 <atcacert_date_dec+0xaa>

    }
    switch (format)
   1e390:	230f      	movs	r3, #15
   1e392:	18fb      	adds	r3, r7, r3
   1e394:	781b      	ldrb	r3, [r3, #0]
   1e396:	2b04      	cmp	r3, #4
   1e398:	d82c      	bhi.n	1e3f4 <atcacert_date_dec+0xa8>
   1e39a:	009a      	lsls	r2, r3, #2
   1e39c:	4b19      	ldr	r3, [pc, #100]	; (1e404 <atcacert_date_dec+0xb8>)
   1e39e:	18d3      	adds	r3, r2, r3
   1e3a0:	681b      	ldr	r3, [r3, #0]
   1e3a2:	469f      	mov	pc, r3
    {
    case DATEFMT_ISO8601_SEP:     return atcacert_date_dec_iso8601_sep(formatted_date, timestamp);
   1e3a4:	683a      	ldr	r2, [r7, #0]
   1e3a6:	68bb      	ldr	r3, [r7, #8]
   1e3a8:	0011      	movs	r1, r2
   1e3aa:	0018      	movs	r0, r3
   1e3ac:	f000 fa24 	bl	1e7f8 <atcacert_date_dec_iso8601_sep>
   1e3b0:	0003      	movs	r3, r0
   1e3b2:	e020      	b.n	1e3f6 <atcacert_date_dec+0xaa>
    case DATEFMT_RFC5280_UTC:     return atcacert_date_dec_rfc5280_utc(formatted_date, timestamp);
   1e3b4:	683a      	ldr	r2, [r7, #0]
   1e3b6:	68bb      	ldr	r3, [r7, #8]
   1e3b8:	0011      	movs	r1, r2
   1e3ba:	0018      	movs	r0, r3
   1e3bc:	f000 fb96 	bl	1eaec <atcacert_date_dec_rfc5280_utc>
   1e3c0:	0003      	movs	r3, r0
   1e3c2:	e018      	b.n	1e3f6 <atcacert_date_dec+0xaa>
    case DATEFMT_POSIX_UINT32_BE: return atcacert_date_dec_posix_uint32_be(formatted_date, timestamp);
   1e3c4:	683a      	ldr	r2, [r7, #0]
   1e3c6:	68bb      	ldr	r3, [r7, #8]
   1e3c8:	0011      	movs	r1, r2
   1e3ca:	0018      	movs	r0, r3
   1e3cc:	f000 ffbc 	bl	1f348 <atcacert_date_dec_posix_uint32_be>
   1e3d0:	0003      	movs	r3, r0
   1e3d2:	e010      	b.n	1e3f6 <atcacert_date_dec+0xaa>
    case DATEFMT_POSIX_UINT32_LE: return atcacert_date_dec_posix_uint32_le(formatted_date, timestamp);
   1e3d4:	683a      	ldr	r2, [r7, #0]
   1e3d6:	68bb      	ldr	r3, [r7, #8]
   1e3d8:	0011      	movs	r1, r2
   1e3da:	0018      	movs	r0, r3
   1e3dc:	f001 f81a 	bl	1f414 <atcacert_date_dec_posix_uint32_le>
   1e3e0:	0003      	movs	r3, r0
   1e3e2:	e008      	b.n	1e3f6 <atcacert_date_dec+0xaa>
    case DATEFMT_RFC5280_GEN:     return atcacert_date_dec_rfc5280_gen(formatted_date, timestamp);
   1e3e4:	683a      	ldr	r2, [r7, #0]
   1e3e6:	68bb      	ldr	r3, [r7, #8]
   1e3e8:	0011      	movs	r1, r2
   1e3ea:	0018      	movs	r0, r3
   1e3ec:	f000 fcc8 	bl	1ed80 <atcacert_date_dec_rfc5280_gen>
   1e3f0:	0003      	movs	r3, r0
   1e3f2:	e000      	b.n	1e3f6 <atcacert_date_dec+0xaa>
    default: return ATCACERT_E_BAD_PARAMS;
   1e3f4:	2302      	movs	r3, #2
    }

    return ATCACERT_E_SUCCESS;
}
   1e3f6:	0018      	movs	r0, r3
   1e3f8:	46bd      	mov	sp, r7
   1e3fa:	b004      	add	sp, #16
   1e3fc:	bd80      	pop	{r7, pc}
   1e3fe:	46c0      	nop			; (mov r8, r8)
   1e400:	0002e5ec 	.word	0x0002e5ec
   1e404:	0002e614 	.word	0x0002e614

0001e408 <atcacert_date_get_max_date>:

int atcacert_date_get_max_date(atcacert_date_format_t format, atcacert_tm_utc_t* timestamp)
{
   1e408:	b580      	push	{r7, lr}
   1e40a:	b082      	sub	sp, #8
   1e40c:	af00      	add	r7, sp, #0
   1e40e:	0002      	movs	r2, r0
   1e410:	6039      	str	r1, [r7, #0]
   1e412:	1dfb      	adds	r3, r7, #7
   1e414:	701a      	strb	r2, [r3, #0]

    if (timestamp == NULL || format < 0 || format >= sizeof(ATCACERT_DATE_FORMAT_SIZES) / sizeof(ATCACERT_DATE_FORMAT_SIZES[0]))
   1e416:	683b      	ldr	r3, [r7, #0]
   1e418:	2b00      	cmp	r3, #0
   1e41a:	d003      	beq.n	1e424 <atcacert_date_get_max_date+0x1c>
   1e41c:	1dfb      	adds	r3, r7, #7
   1e41e:	781b      	ldrb	r3, [r3, #0]
   1e420:	2b04      	cmp	r3, #4
   1e422:	d901      	bls.n	1e428 <atcacert_date_get_max_date+0x20>
    {
        return ATCACERT_E_BAD_PARAMS;
   1e424:	2302      	movs	r3, #2
   1e426:	e06a      	b.n	1e4fe <atcacert_date_get_max_date+0xf6>
    }

    switch (format)
   1e428:	1dfb      	adds	r3, r7, #7
   1e42a:	781b      	ldrb	r3, [r3, #0]
   1e42c:	2b04      	cmp	r3, #4
   1e42e:	d863      	bhi.n	1e4f8 <atcacert_date_get_max_date+0xf0>
   1e430:	009a      	lsls	r2, r3, #2
   1e432:	4b35      	ldr	r3, [pc, #212]	; (1e508 <atcacert_date_get_max_date+0x100>)
   1e434:	18d3      	adds	r3, r2, r3
   1e436:	681b      	ldr	r3, [r3, #0]
   1e438:	469f      	mov	pc, r3
    {
    case DATEFMT_ISO8601_SEP:
        timestamp->tm_year = 9999 - 1900;
   1e43a:	683b      	ldr	r3, [r7, #0]
   1e43c:	4a33      	ldr	r2, [pc, #204]	; (1e50c <atcacert_date_get_max_date+0x104>)
   1e43e:	615a      	str	r2, [r3, #20]
        timestamp->tm_mon  = 12 - 1;
   1e440:	683b      	ldr	r3, [r7, #0]
   1e442:	220b      	movs	r2, #11
   1e444:	611a      	str	r2, [r3, #16]
        timestamp->tm_mday = 31;
   1e446:	683b      	ldr	r3, [r7, #0]
   1e448:	221f      	movs	r2, #31
   1e44a:	60da      	str	r2, [r3, #12]
        timestamp->tm_hour = 23;
   1e44c:	683b      	ldr	r3, [r7, #0]
   1e44e:	2217      	movs	r2, #23
   1e450:	609a      	str	r2, [r3, #8]
        timestamp->tm_min  = 59;
   1e452:	683b      	ldr	r3, [r7, #0]
   1e454:	223b      	movs	r2, #59	; 0x3b
   1e456:	605a      	str	r2, [r3, #4]
        timestamp->tm_sec  = 59;
   1e458:	683b      	ldr	r3, [r7, #0]
   1e45a:	223b      	movs	r2, #59	; 0x3b
   1e45c:	601a      	str	r2, [r3, #0]
        break;
   1e45e:	e04d      	b.n	1e4fc <atcacert_date_get_max_date+0xf4>

    case DATEFMT_RFC5280_UTC:
        timestamp->tm_year = 2049 - 1900;
   1e460:	683b      	ldr	r3, [r7, #0]
   1e462:	2295      	movs	r2, #149	; 0x95
   1e464:	615a      	str	r2, [r3, #20]
        timestamp->tm_mon  = 12 - 1;
   1e466:	683b      	ldr	r3, [r7, #0]
   1e468:	220b      	movs	r2, #11
   1e46a:	611a      	str	r2, [r3, #16]
        timestamp->tm_mday = 31;
   1e46c:	683b      	ldr	r3, [r7, #0]
   1e46e:	221f      	movs	r2, #31
   1e470:	60da      	str	r2, [r3, #12]
        timestamp->tm_hour = 23;
   1e472:	683b      	ldr	r3, [r7, #0]
   1e474:	2217      	movs	r2, #23
   1e476:	609a      	str	r2, [r3, #8]
        timestamp->tm_min  = 59;
   1e478:	683b      	ldr	r3, [r7, #0]
   1e47a:	223b      	movs	r2, #59	; 0x3b
   1e47c:	605a      	str	r2, [r3, #4]
        timestamp->tm_sec  = 59;
   1e47e:	683b      	ldr	r3, [r7, #0]
   1e480:	223b      	movs	r2, #59	; 0x3b
   1e482:	601a      	str	r2, [r3, #0]
        break;
   1e484:	e03a      	b.n	1e4fc <atcacert_date_get_max_date+0xf4>

    case DATEFMT_POSIX_UINT32_BE:
        timestamp->tm_year = 2106 - 1900;
   1e486:	683b      	ldr	r3, [r7, #0]
   1e488:	22ce      	movs	r2, #206	; 0xce
   1e48a:	615a      	str	r2, [r3, #20]
        timestamp->tm_mon  = 2 - 1;
   1e48c:	683b      	ldr	r3, [r7, #0]
   1e48e:	2201      	movs	r2, #1
   1e490:	611a      	str	r2, [r3, #16]
        timestamp->tm_mday = 7;
   1e492:	683b      	ldr	r3, [r7, #0]
   1e494:	2207      	movs	r2, #7
   1e496:	60da      	str	r2, [r3, #12]
        timestamp->tm_hour = 6;
   1e498:	683b      	ldr	r3, [r7, #0]
   1e49a:	2206      	movs	r2, #6
   1e49c:	609a      	str	r2, [r3, #8]
        timestamp->tm_min  = 28;
   1e49e:	683b      	ldr	r3, [r7, #0]
   1e4a0:	221c      	movs	r2, #28
   1e4a2:	605a      	str	r2, [r3, #4]
        timestamp->tm_sec  = 15;
   1e4a4:	683b      	ldr	r3, [r7, #0]
   1e4a6:	220f      	movs	r2, #15
   1e4a8:	601a      	str	r2, [r3, #0]
        break;
   1e4aa:	e027      	b.n	1e4fc <atcacert_date_get_max_date+0xf4>

    case DATEFMT_POSIX_UINT32_LE:
        timestamp->tm_year = 2106 - 1900;
   1e4ac:	683b      	ldr	r3, [r7, #0]
   1e4ae:	22ce      	movs	r2, #206	; 0xce
   1e4b0:	615a      	str	r2, [r3, #20]
        timestamp->tm_mon  = 2 - 1;
   1e4b2:	683b      	ldr	r3, [r7, #0]
   1e4b4:	2201      	movs	r2, #1
   1e4b6:	611a      	str	r2, [r3, #16]
        timestamp->tm_mday = 7;
   1e4b8:	683b      	ldr	r3, [r7, #0]
   1e4ba:	2207      	movs	r2, #7
   1e4bc:	60da      	str	r2, [r3, #12]
        timestamp->tm_hour = 6;
   1e4be:	683b      	ldr	r3, [r7, #0]
   1e4c0:	2206      	movs	r2, #6
   1e4c2:	609a      	str	r2, [r3, #8]
        timestamp->tm_min  = 28;
   1e4c4:	683b      	ldr	r3, [r7, #0]
   1e4c6:	221c      	movs	r2, #28
   1e4c8:	605a      	str	r2, [r3, #4]
        timestamp->tm_sec  = 15;
   1e4ca:	683b      	ldr	r3, [r7, #0]
   1e4cc:	220f      	movs	r2, #15
   1e4ce:	601a      	str	r2, [r3, #0]
        break;
   1e4d0:	e014      	b.n	1e4fc <atcacert_date_get_max_date+0xf4>

    case DATEFMT_RFC5280_GEN:
        timestamp->tm_year = 9999 - 1900;
   1e4d2:	683b      	ldr	r3, [r7, #0]
   1e4d4:	4a0d      	ldr	r2, [pc, #52]	; (1e50c <atcacert_date_get_max_date+0x104>)
   1e4d6:	615a      	str	r2, [r3, #20]
        timestamp->tm_mon  = 12 - 1;
   1e4d8:	683b      	ldr	r3, [r7, #0]
   1e4da:	220b      	movs	r2, #11
   1e4dc:	611a      	str	r2, [r3, #16]
        timestamp->tm_mday = 31;
   1e4de:	683b      	ldr	r3, [r7, #0]
   1e4e0:	221f      	movs	r2, #31
   1e4e2:	60da      	str	r2, [r3, #12]
        timestamp->tm_hour = 23;
   1e4e4:	683b      	ldr	r3, [r7, #0]
   1e4e6:	2217      	movs	r2, #23
   1e4e8:	609a      	str	r2, [r3, #8]
        timestamp->tm_min  = 59;
   1e4ea:	683b      	ldr	r3, [r7, #0]
   1e4ec:	223b      	movs	r2, #59	; 0x3b
   1e4ee:	605a      	str	r2, [r3, #4]
        timestamp->tm_sec  = 59;
   1e4f0:	683b      	ldr	r3, [r7, #0]
   1e4f2:	223b      	movs	r2, #59	; 0x3b
   1e4f4:	601a      	str	r2, [r3, #0]
        break;
   1e4f6:	e001      	b.n	1e4fc <atcacert_date_get_max_date+0xf4>

    default: return ATCACERT_E_BAD_PARAMS;
   1e4f8:	2302      	movs	r3, #2
   1e4fa:	e000      	b.n	1e4fe <atcacert_date_get_max_date+0xf6>
    }

    return ATCACERT_E_SUCCESS;
   1e4fc:	2300      	movs	r3, #0
}
   1e4fe:	0018      	movs	r0, r3
   1e500:	46bd      	mov	sp, r7
   1e502:	b002      	add	sp, #8
   1e504:	bd80      	pop	{r7, pc}
   1e506:	46c0      	nop			; (mov r8, r8)
   1e508:	0002e628 	.word	0x0002e628
   1e50c:	00001fa3 	.word	0x00001fa3

0001e510 <uint_to_str>:

/**
 * \brief Convert an unsigned integer to a zero padded string with no terminating null.
 */
static uint8_t* uint_to_str(uint32_t num, int width, uint8_t* str)
{
   1e510:	b580      	push	{r7, lr}
   1e512:	b086      	sub	sp, #24
   1e514:	af00      	add	r7, sp, #0
   1e516:	60f8      	str	r0, [r7, #12]
   1e518:	60b9      	str	r1, [r7, #8]
   1e51a:	607a      	str	r2, [r7, #4]
    uint8_t* ret = str + width;
   1e51c:	68bb      	ldr	r3, [r7, #8]
   1e51e:	687a      	ldr	r2, [r7, #4]
   1e520:	18d3      	adds	r3, r2, r3
   1e522:	613b      	str	r3, [r7, #16]
    int i;

    // Pre-fill the string width with zeros
    for (i = 0; i < width; i++)
   1e524:	2300      	movs	r3, #0
   1e526:	617b      	str	r3, [r7, #20]
   1e528:	e007      	b.n	1e53a <uint_to_str+0x2a>
    {
        *(str++) = '0';
   1e52a:	687b      	ldr	r3, [r7, #4]
   1e52c:	1c5a      	adds	r2, r3, #1
   1e52e:	607a      	str	r2, [r7, #4]
   1e530:	2230      	movs	r2, #48	; 0x30
   1e532:	701a      	strb	r2, [r3, #0]
{
    uint8_t* ret = str + width;
    int i;

    // Pre-fill the string width with zeros
    for (i = 0; i < width; i++)
   1e534:	697b      	ldr	r3, [r7, #20]
   1e536:	3301      	adds	r3, #1
   1e538:	617b      	str	r3, [r7, #20]
   1e53a:	697a      	ldr	r2, [r7, #20]
   1e53c:	68bb      	ldr	r3, [r7, #8]
   1e53e:	429a      	cmp	r2, r3
   1e540:	dbf3      	blt.n	1e52a <uint_to_str+0x1a>
    {
        *(str++) = '0';
    }
    // Convert the number from right to left
    for (; num; num /= 10)
   1e542:	e014      	b.n	1e56e <uint_to_str+0x5e>
    {
        *(--str) = '0' + (num % 10);
   1e544:	687b      	ldr	r3, [r7, #4]
   1e546:	3b01      	subs	r3, #1
   1e548:	607b      	str	r3, [r7, #4]
   1e54a:	68fb      	ldr	r3, [r7, #12]
   1e54c:	210a      	movs	r1, #10
   1e54e:	0018      	movs	r0, r3
   1e550:	f005 f82a 	bl	235a8 <__aeabi_uidivmod>
   1e554:	000b      	movs	r3, r1
   1e556:	b2db      	uxtb	r3, r3
   1e558:	3330      	adds	r3, #48	; 0x30
   1e55a:	b2da      	uxtb	r2, r3
   1e55c:	687b      	ldr	r3, [r7, #4]
   1e55e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < width; i++)
    {
        *(str++) = '0';
    }
    // Convert the number from right to left
    for (; num; num /= 10)
   1e560:	68fb      	ldr	r3, [r7, #12]
   1e562:	210a      	movs	r1, #10
   1e564:	0018      	movs	r0, r3
   1e566:	f004 ff99 	bl	2349c <__aeabi_uidiv>
   1e56a:	0003      	movs	r3, r0
   1e56c:	60fb      	str	r3, [r7, #12]
   1e56e:	68fb      	ldr	r3, [r7, #12]
   1e570:	2b00      	cmp	r3, #0
   1e572:	d1e7      	bne.n	1e544 <uint_to_str+0x34>
    {
        *(--str) = '0' + (num % 10);
    }

    return ret;
   1e574:	693b      	ldr	r3, [r7, #16]
}
   1e576:	0018      	movs	r0, r3
   1e578:	46bd      	mov	sp, r7
   1e57a:	b006      	add	sp, #24
   1e57c:	bd80      	pop	{r7, pc}
   1e57e:	46c0      	nop			; (mov r8, r8)

0001e580 <str_to_uint>:

/**
 * \brief Convert a number string as a zero padded unsigned integer back into a number
 */
static const uint8_t* str_to_uint(const uint8_t* str, int width, uint32_t* num)
{
   1e580:	b580      	push	{r7, lr}
   1e582:	b08a      	sub	sp, #40	; 0x28
   1e584:	af00      	add	r7, sp, #0
   1e586:	60f8      	str	r0, [r7, #12]
   1e588:	60b9      	str	r1, [r7, #8]
   1e58a:	607a      	str	r2, [r7, #4]
    const uint8_t* error_ret = str;
   1e58c:	68fb      	ldr	r3, [r7, #12]
   1e58e:	61bb      	str	r3, [r7, #24]
    const uint8_t* good_ret = str + width;
   1e590:	68bb      	ldr	r3, [r7, #8]
   1e592:	68fa      	ldr	r2, [r7, #12]
   1e594:	18d3      	adds	r3, r2, r3
   1e596:	617b      	str	r3, [r7, #20]
    uint32_t prev_num = 0;
   1e598:	2300      	movs	r3, #0
   1e59a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t digit_value = 1;
   1e59c:	2301      	movs	r3, #1
   1e59e:	623b      	str	r3, [r7, #32]
    int digit;

    str += width - 1;
   1e5a0:	68bb      	ldr	r3, [r7, #8]
   1e5a2:	3b01      	subs	r3, #1
   1e5a4:	68fa      	ldr	r2, [r7, #12]
   1e5a6:	18d3      	adds	r3, r2, r3
   1e5a8:	60fb      	str	r3, [r7, #12]
    *num = 0;
   1e5aa:	687b      	ldr	r3, [r7, #4]
   1e5ac:	2200      	movs	r2, #0
   1e5ae:	601a      	str	r2, [r3, #0]
    for (digit = 0; digit < width; digit++)
   1e5b0:	2300      	movs	r3, #0
   1e5b2:	61fb      	str	r3, [r7, #28]
   1e5b4:	e03e      	b.n	1e634 <str_to_uint+0xb4>
    {
        if (*str < '0' || *str > '9')
   1e5b6:	68fb      	ldr	r3, [r7, #12]
   1e5b8:	781b      	ldrb	r3, [r3, #0]
   1e5ba:	2b2f      	cmp	r3, #47	; 0x2f
   1e5bc:	d903      	bls.n	1e5c6 <str_to_uint+0x46>
   1e5be:	68fb      	ldr	r3, [r7, #12]
   1e5c0:	781b      	ldrb	r3, [r3, #0]
   1e5c2:	2b39      	cmp	r3, #57	; 0x39
   1e5c4:	d901      	bls.n	1e5ca <str_to_uint+0x4a>
        {
            return error_ret;  // Character is not a digit
   1e5c6:	69bb      	ldr	r3, [r7, #24]
   1e5c8:	e039      	b.n	1e63e <str_to_uint+0xbe>
        }
        if (digit >= 10)
   1e5ca:	69fb      	ldr	r3, [r7, #28]
   1e5cc:	2b09      	cmp	r3, #9
   1e5ce:	dd05      	ble.n	1e5dc <str_to_uint+0x5c>
        {
            if (*str != '0')
   1e5d0:	68fb      	ldr	r3, [r7, #12]
   1e5d2:	781b      	ldrb	r3, [r3, #0]
   1e5d4:	2b30      	cmp	r3, #48	; 0x30
   1e5d6:	d029      	beq.n	1e62c <str_to_uint+0xac>
            {
                return error_ret;  // Number is larger than the output can handle
   1e5d8:	69bb      	ldr	r3, [r7, #24]
   1e5da:	e030      	b.n	1e63e <str_to_uint+0xbe>
            }
            continue;
        }
        if (digit == 9 && *str > '4')
   1e5dc:	69fb      	ldr	r3, [r7, #28]
   1e5de:	2b09      	cmp	r3, #9
   1e5e0:	d105      	bne.n	1e5ee <str_to_uint+0x6e>
   1e5e2:	68fb      	ldr	r3, [r7, #12]
   1e5e4:	781b      	ldrb	r3, [r3, #0]
   1e5e6:	2b34      	cmp	r3, #52	; 0x34
   1e5e8:	d901      	bls.n	1e5ee <str_to_uint+0x6e>
        {
            return error_ret;  // Number is larger than the output can handle
   1e5ea:	69bb      	ldr	r3, [r7, #24]
   1e5ec:	e027      	b.n	1e63e <str_to_uint+0xbe>

        }
        *num += digit_value * (*str - '0');
   1e5ee:	687b      	ldr	r3, [r7, #4]
   1e5f0:	681a      	ldr	r2, [r3, #0]
   1e5f2:	68fb      	ldr	r3, [r7, #12]
   1e5f4:	781b      	ldrb	r3, [r3, #0]
   1e5f6:	3b30      	subs	r3, #48	; 0x30
   1e5f8:	0019      	movs	r1, r3
   1e5fa:	6a3b      	ldr	r3, [r7, #32]
   1e5fc:	434b      	muls	r3, r1
   1e5fe:	18d2      	adds	r2, r2, r3
   1e600:	687b      	ldr	r3, [r7, #4]
   1e602:	601a      	str	r2, [r3, #0]
        if (*num < prev_num)
   1e604:	687b      	ldr	r3, [r7, #4]
   1e606:	681a      	ldr	r2, [r3, #0]
   1e608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e60a:	429a      	cmp	r2, r3
   1e60c:	d201      	bcs.n	1e612 <str_to_uint+0x92>
        {
            return error_ret;  // Number rolled over, it is larger than the output can handle
   1e60e:	69bb      	ldr	r3, [r7, #24]
   1e610:	e015      	b.n	1e63e <str_to_uint+0xbe>

        }
        digit_value *= 10;
   1e612:	6a3a      	ldr	r2, [r7, #32]
   1e614:	0013      	movs	r3, r2
   1e616:	009b      	lsls	r3, r3, #2
   1e618:	189b      	adds	r3, r3, r2
   1e61a:	005b      	lsls	r3, r3, #1
   1e61c:	623b      	str	r3, [r7, #32]
        prev_num = *num;
   1e61e:	687b      	ldr	r3, [r7, #4]
   1e620:	681b      	ldr	r3, [r3, #0]
   1e622:	627b      	str	r3, [r7, #36]	; 0x24
        str--;
   1e624:	68fb      	ldr	r3, [r7, #12]
   1e626:	3b01      	subs	r3, #1
   1e628:	60fb      	str	r3, [r7, #12]
   1e62a:	e000      	b.n	1e62e <str_to_uint+0xae>
        {
            if (*str != '0')
            {
                return error_ret;  // Number is larger than the output can handle
            }
            continue;
   1e62c:	46c0      	nop			; (mov r8, r8)
    uint32_t digit_value = 1;
    int digit;

    str += width - 1;
    *num = 0;
    for (digit = 0; digit < width; digit++)
   1e62e:	69fb      	ldr	r3, [r7, #28]
   1e630:	3301      	adds	r3, #1
   1e632:	61fb      	str	r3, [r7, #28]
   1e634:	69fa      	ldr	r2, [r7, #28]
   1e636:	68bb      	ldr	r3, [r7, #8]
   1e638:	429a      	cmp	r2, r3
   1e63a:	dbbc      	blt.n	1e5b6 <str_to_uint+0x36>
        digit_value *= 10;
        prev_num = *num;
        str--;
    }

    return good_ret;
   1e63c:	697b      	ldr	r3, [r7, #20]
}
   1e63e:	0018      	movs	r0, r3
   1e640:	46bd      	mov	sp, r7
   1e642:	b00a      	add	sp, #40	; 0x28
   1e644:	bd80      	pop	{r7, pc}
   1e646:	46c0      	nop			; (mov r8, r8)

0001e648 <str_to_int>:
/**
 * \brief Convert a number string as a zero padded unsigned integer back into a number constrained
 *        to an integer's size.
 */
static const uint8_t* str_to_int(const uint8_t* str, int width, int* num)
{
   1e648:	b580      	push	{r7, lr}
   1e64a:	b086      	sub	sp, #24
   1e64c:	af00      	add	r7, sp, #0
   1e64e:	60f8      	str	r0, [r7, #12]
   1e650:	60b9      	str	r1, [r7, #8]
   1e652:	607a      	str	r2, [r7, #4]
    uint32_t unum = 0;
   1e654:	2300      	movs	r3, #0
   1e656:	613b      	str	r3, [r7, #16]
    const uint8_t* ret = str_to_uint(str, width, &unum);
   1e658:	2310      	movs	r3, #16
   1e65a:	18fa      	adds	r2, r7, r3
   1e65c:	68b9      	ldr	r1, [r7, #8]
   1e65e:	68fb      	ldr	r3, [r7, #12]
   1e660:	0018      	movs	r0, r3
   1e662:	f7ff ff8d 	bl	1e580 <str_to_uint>
   1e666:	0003      	movs	r3, r0
   1e668:	617b      	str	r3, [r7, #20]

    if (ret != str && unum > 2147483647UL)
   1e66a:	697a      	ldr	r2, [r7, #20]
   1e66c:	68fb      	ldr	r3, [r7, #12]
   1e66e:	429a      	cmp	r2, r3
   1e670:	d004      	beq.n	1e67c <str_to_int+0x34>
   1e672:	693b      	ldr	r3, [r7, #16]
   1e674:	2b00      	cmp	r3, #0
   1e676:	da01      	bge.n	1e67c <str_to_int+0x34>
    {
        ret = str;  // Number exceeds int32's range
   1e678:	68fb      	ldr	r3, [r7, #12]
   1e67a:	617b      	str	r3, [r7, #20]
    }
    *num = (int)unum;
   1e67c:	693b      	ldr	r3, [r7, #16]
   1e67e:	001a      	movs	r2, r3
   1e680:	687b      	ldr	r3, [r7, #4]
   1e682:	601a      	str	r2, [r3, #0]
    return ret;
   1e684:	697b      	ldr	r3, [r7, #20]
}
   1e686:	0018      	movs	r0, r3
   1e688:	46bd      	mov	sp, r7
   1e68a:	b006      	add	sp, #24
   1e68c:	bd80      	pop	{r7, pc}
   1e68e:	46c0      	nop			; (mov r8, r8)

0001e690 <atcacert_date_enc_iso8601_sep>:

int atcacert_date_enc_iso8601_sep(const atcacert_tm_utc_t* timestamp,
                                  uint8_t                  formatted_date[DATEFMT_ISO8601_SEP_SIZE])
{
   1e690:	b580      	push	{r7, lr}
   1e692:	b084      	sub	sp, #16
   1e694:	af00      	add	r7, sp, #0
   1e696:	6078      	str	r0, [r7, #4]
   1e698:	6039      	str	r1, [r7, #0]
    uint8_t* cur_pos = formatted_date;
   1e69a:	683b      	ldr	r3, [r7, #0]
   1e69c:	60fb      	str	r3, [r7, #12]
    int year = 0;
   1e69e:	2300      	movs	r3, #0
   1e6a0:	60bb      	str	r3, [r7, #8]

    if (timestamp == NULL || formatted_date == NULL)
   1e6a2:	687b      	ldr	r3, [r7, #4]
   1e6a4:	2b00      	cmp	r3, #0
   1e6a6:	d002      	beq.n	1e6ae <atcacert_date_enc_iso8601_sep+0x1e>
   1e6a8:	683b      	ldr	r3, [r7, #0]
   1e6aa:	2b00      	cmp	r3, #0
   1e6ac:	d101      	bne.n	1e6b2 <atcacert_date_enc_iso8601_sep+0x22>
    {
        return ATCACERT_E_BAD_PARAMS;
   1e6ae:	2302      	movs	r3, #2
   1e6b0:	e09a      	b.n	1e7e8 <atcacert_date_enc_iso8601_sep+0x158>
    }

    year = timestamp->tm_year + 1900;
   1e6b2:	687b      	ldr	r3, [r7, #4]
   1e6b4:	695b      	ldr	r3, [r3, #20]
   1e6b6:	4a4e      	ldr	r2, [pc, #312]	; (1e7f0 <atcacert_date_enc_iso8601_sep+0x160>)
   1e6b8:	4694      	mov	ip, r2
   1e6ba:	4463      	add	r3, ip
   1e6bc:	60bb      	str	r3, [r7, #8]

    if (year < 0 || year > 9999)
   1e6be:	68bb      	ldr	r3, [r7, #8]
   1e6c0:	2b00      	cmp	r3, #0
   1e6c2:	db03      	blt.n	1e6cc <atcacert_date_enc_iso8601_sep+0x3c>
   1e6c4:	68bb      	ldr	r3, [r7, #8]
   1e6c6:	4a4b      	ldr	r2, [pc, #300]	; (1e7f4 <atcacert_date_enc_iso8601_sep+0x164>)
   1e6c8:	4293      	cmp	r3, r2
   1e6ca:	dd01      	ble.n	1e6d0 <atcacert_date_enc_iso8601_sep+0x40>
    {
        return ATCACERT_E_INVALID_DATE;
   1e6cc:	2305      	movs	r3, #5
   1e6ce:	e08b      	b.n	1e7e8 <atcacert_date_enc_iso8601_sep+0x158>
    }
    cur_pos = uint_to_str(year, 4, cur_pos);
   1e6d0:	68bb      	ldr	r3, [r7, #8]
   1e6d2:	68fa      	ldr	r2, [r7, #12]
   1e6d4:	2104      	movs	r1, #4
   1e6d6:	0018      	movs	r0, r3
   1e6d8:	f7ff ff1a 	bl	1e510 <uint_to_str>
   1e6dc:	0003      	movs	r3, r0
   1e6de:	60fb      	str	r3, [r7, #12]

    *(cur_pos++) = '-';
   1e6e0:	68fb      	ldr	r3, [r7, #12]
   1e6e2:	1c5a      	adds	r2, r3, #1
   1e6e4:	60fa      	str	r2, [r7, #12]
   1e6e6:	222d      	movs	r2, #45	; 0x2d
   1e6e8:	701a      	strb	r2, [r3, #0]

    if (timestamp->tm_mon < 0 || timestamp->tm_mon > 11)
   1e6ea:	687b      	ldr	r3, [r7, #4]
   1e6ec:	691b      	ldr	r3, [r3, #16]
   1e6ee:	2b00      	cmp	r3, #0
   1e6f0:	db03      	blt.n	1e6fa <atcacert_date_enc_iso8601_sep+0x6a>
   1e6f2:	687b      	ldr	r3, [r7, #4]
   1e6f4:	691b      	ldr	r3, [r3, #16]
   1e6f6:	2b0b      	cmp	r3, #11
   1e6f8:	dd01      	ble.n	1e6fe <atcacert_date_enc_iso8601_sep+0x6e>
    {
        return ATCACERT_E_INVALID_DATE;
   1e6fa:	2305      	movs	r3, #5
   1e6fc:	e074      	b.n	1e7e8 <atcacert_date_enc_iso8601_sep+0x158>
    }
    cur_pos = uint_to_str(timestamp->tm_mon + 1, 2, cur_pos);
   1e6fe:	687b      	ldr	r3, [r7, #4]
   1e700:	691b      	ldr	r3, [r3, #16]
   1e702:	3301      	adds	r3, #1
   1e704:	0018      	movs	r0, r3
   1e706:	68fb      	ldr	r3, [r7, #12]
   1e708:	001a      	movs	r2, r3
   1e70a:	2102      	movs	r1, #2
   1e70c:	f7ff ff00 	bl	1e510 <uint_to_str>
   1e710:	0003      	movs	r3, r0
   1e712:	60fb      	str	r3, [r7, #12]

    *(cur_pos++) = '-';
   1e714:	68fb      	ldr	r3, [r7, #12]
   1e716:	1c5a      	adds	r2, r3, #1
   1e718:	60fa      	str	r2, [r7, #12]
   1e71a:	222d      	movs	r2, #45	; 0x2d
   1e71c:	701a      	strb	r2, [r3, #0]

    if (timestamp->tm_mday < 1 || timestamp->tm_mday > 31)
   1e71e:	687b      	ldr	r3, [r7, #4]
   1e720:	68db      	ldr	r3, [r3, #12]
   1e722:	2b00      	cmp	r3, #0
   1e724:	dd03      	ble.n	1e72e <atcacert_date_enc_iso8601_sep+0x9e>
   1e726:	687b      	ldr	r3, [r7, #4]
   1e728:	68db      	ldr	r3, [r3, #12]
   1e72a:	2b1f      	cmp	r3, #31
   1e72c:	dd01      	ble.n	1e732 <atcacert_date_enc_iso8601_sep+0xa2>
    {
        return ATCACERT_E_INVALID_DATE;
   1e72e:	2305      	movs	r3, #5
   1e730:	e05a      	b.n	1e7e8 <atcacert_date_enc_iso8601_sep+0x158>
    }
    cur_pos = uint_to_str(timestamp->tm_mday, 2, cur_pos);
   1e732:	687b      	ldr	r3, [r7, #4]
   1e734:	68db      	ldr	r3, [r3, #12]
   1e736:	0018      	movs	r0, r3
   1e738:	68fb      	ldr	r3, [r7, #12]
   1e73a:	001a      	movs	r2, r3
   1e73c:	2102      	movs	r1, #2
   1e73e:	f7ff fee7 	bl	1e510 <uint_to_str>
   1e742:	0003      	movs	r3, r0
   1e744:	60fb      	str	r3, [r7, #12]

    *(cur_pos++) = 'T';
   1e746:	68fb      	ldr	r3, [r7, #12]
   1e748:	1c5a      	adds	r2, r3, #1
   1e74a:	60fa      	str	r2, [r7, #12]
   1e74c:	2254      	movs	r2, #84	; 0x54
   1e74e:	701a      	strb	r2, [r3, #0]

    if (timestamp->tm_hour < 0 || timestamp->tm_hour > 23)
   1e750:	687b      	ldr	r3, [r7, #4]
   1e752:	689b      	ldr	r3, [r3, #8]
   1e754:	2b00      	cmp	r3, #0
   1e756:	db03      	blt.n	1e760 <atcacert_date_enc_iso8601_sep+0xd0>
   1e758:	687b      	ldr	r3, [r7, #4]
   1e75a:	689b      	ldr	r3, [r3, #8]
   1e75c:	2b17      	cmp	r3, #23
   1e75e:	dd01      	ble.n	1e764 <atcacert_date_enc_iso8601_sep+0xd4>
    {
        return ATCACERT_E_INVALID_DATE;
   1e760:	2305      	movs	r3, #5
   1e762:	e041      	b.n	1e7e8 <atcacert_date_enc_iso8601_sep+0x158>
    }
    cur_pos = uint_to_str(timestamp->tm_hour, 2, cur_pos);
   1e764:	687b      	ldr	r3, [r7, #4]
   1e766:	689b      	ldr	r3, [r3, #8]
   1e768:	0018      	movs	r0, r3
   1e76a:	68fb      	ldr	r3, [r7, #12]
   1e76c:	001a      	movs	r2, r3
   1e76e:	2102      	movs	r1, #2
   1e770:	f7ff fece 	bl	1e510 <uint_to_str>
   1e774:	0003      	movs	r3, r0
   1e776:	60fb      	str	r3, [r7, #12]

    *(cur_pos++) = ':';
   1e778:	68fb      	ldr	r3, [r7, #12]
   1e77a:	1c5a      	adds	r2, r3, #1
   1e77c:	60fa      	str	r2, [r7, #12]
   1e77e:	223a      	movs	r2, #58	; 0x3a
   1e780:	701a      	strb	r2, [r3, #0]

    if (timestamp->tm_min < 0 || timestamp->tm_min > 59)
   1e782:	687b      	ldr	r3, [r7, #4]
   1e784:	685b      	ldr	r3, [r3, #4]
   1e786:	2b00      	cmp	r3, #0
   1e788:	db03      	blt.n	1e792 <atcacert_date_enc_iso8601_sep+0x102>
   1e78a:	687b      	ldr	r3, [r7, #4]
   1e78c:	685b      	ldr	r3, [r3, #4]
   1e78e:	2b3b      	cmp	r3, #59	; 0x3b
   1e790:	dd01      	ble.n	1e796 <atcacert_date_enc_iso8601_sep+0x106>
    {
        return ATCACERT_E_INVALID_DATE;
   1e792:	2305      	movs	r3, #5
   1e794:	e028      	b.n	1e7e8 <atcacert_date_enc_iso8601_sep+0x158>
    }
    cur_pos = uint_to_str(timestamp->tm_min, 2, cur_pos);
   1e796:	687b      	ldr	r3, [r7, #4]
   1e798:	685b      	ldr	r3, [r3, #4]
   1e79a:	0018      	movs	r0, r3
   1e79c:	68fb      	ldr	r3, [r7, #12]
   1e79e:	001a      	movs	r2, r3
   1e7a0:	2102      	movs	r1, #2
   1e7a2:	f7ff feb5 	bl	1e510 <uint_to_str>
   1e7a6:	0003      	movs	r3, r0
   1e7a8:	60fb      	str	r3, [r7, #12]

    *(cur_pos++) = ':';
   1e7aa:	68fb      	ldr	r3, [r7, #12]
   1e7ac:	1c5a      	adds	r2, r3, #1
   1e7ae:	60fa      	str	r2, [r7, #12]
   1e7b0:	223a      	movs	r2, #58	; 0x3a
   1e7b2:	701a      	strb	r2, [r3, #0]

    if (timestamp->tm_sec < 0 || timestamp->tm_sec > 59)
   1e7b4:	687b      	ldr	r3, [r7, #4]
   1e7b6:	681b      	ldr	r3, [r3, #0]
   1e7b8:	2b00      	cmp	r3, #0
   1e7ba:	db03      	blt.n	1e7c4 <atcacert_date_enc_iso8601_sep+0x134>
   1e7bc:	687b      	ldr	r3, [r7, #4]
   1e7be:	681b      	ldr	r3, [r3, #0]
   1e7c0:	2b3b      	cmp	r3, #59	; 0x3b
   1e7c2:	dd01      	ble.n	1e7c8 <atcacert_date_enc_iso8601_sep+0x138>
    {
        return ATCACERT_E_INVALID_DATE;
   1e7c4:	2305      	movs	r3, #5
   1e7c6:	e00f      	b.n	1e7e8 <atcacert_date_enc_iso8601_sep+0x158>
    }
    cur_pos = uint_to_str(timestamp->tm_sec, 2, cur_pos);
   1e7c8:	687b      	ldr	r3, [r7, #4]
   1e7ca:	681b      	ldr	r3, [r3, #0]
   1e7cc:	0018      	movs	r0, r3
   1e7ce:	68fb      	ldr	r3, [r7, #12]
   1e7d0:	001a      	movs	r2, r3
   1e7d2:	2102      	movs	r1, #2
   1e7d4:	f7ff fe9c 	bl	1e510 <uint_to_str>
   1e7d8:	0003      	movs	r3, r0
   1e7da:	60fb      	str	r3, [r7, #12]

    *(cur_pos++) = 'Z';
   1e7dc:	68fb      	ldr	r3, [r7, #12]
   1e7de:	1c5a      	adds	r2, r3, #1
   1e7e0:	60fa      	str	r2, [r7, #12]
   1e7e2:	225a      	movs	r2, #90	; 0x5a
   1e7e4:	701a      	strb	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
   1e7e6:	2300      	movs	r3, #0
}
   1e7e8:	0018      	movs	r0, r3
   1e7ea:	46bd      	mov	sp, r7
   1e7ec:	b004      	add	sp, #16
   1e7ee:	bd80      	pop	{r7, pc}
   1e7f0:	0000076c 	.word	0x0000076c
   1e7f4:	0000270f 	.word	0x0000270f

0001e7f8 <atcacert_date_dec_iso8601_sep>:

int atcacert_date_dec_iso8601_sep(const uint8_t      formatted_date[DATEFMT_ISO8601_SEP_SIZE],
                                  atcacert_tm_utc_t* timestamp)
{
   1e7f8:	b580      	push	{r7, lr}
   1e7fa:	b084      	sub	sp, #16
   1e7fc:	af00      	add	r7, sp, #0
   1e7fe:	6078      	str	r0, [r7, #4]
   1e800:	6039      	str	r1, [r7, #0]
    const uint8_t* cur_pos = formatted_date;
   1e802:	687b      	ldr	r3, [r7, #4]
   1e804:	60fb      	str	r3, [r7, #12]
    const uint8_t* new_pos = NULL;
   1e806:	2300      	movs	r3, #0
   1e808:	60bb      	str	r3, [r7, #8]

    if (formatted_date == NULL || timestamp == NULL)
   1e80a:	687b      	ldr	r3, [r7, #4]
   1e80c:	2b00      	cmp	r3, #0
   1e80e:	d002      	beq.n	1e816 <atcacert_date_dec_iso8601_sep+0x1e>
   1e810:	683b      	ldr	r3, [r7, #0]
   1e812:	2b00      	cmp	r3, #0
   1e814:	d101      	bne.n	1e81a <atcacert_date_dec_iso8601_sep+0x22>
    {
        return ATCACERT_E_BAD_PARAMS;
   1e816:	2302      	movs	r3, #2
   1e818:	e0aa      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>
    }

    memset(timestamp, 0, sizeof(*timestamp));
   1e81a:	683b      	ldr	r3, [r7, #0]
   1e81c:	2218      	movs	r2, #24
   1e81e:	2100      	movs	r1, #0
   1e820:	0018      	movs	r0, r3
   1e822:	f006 ff82 	bl	2572a <memset>

    new_pos = str_to_int(cur_pos, 4, &timestamp->tm_year);
   1e826:	683b      	ldr	r3, [r7, #0]
   1e828:	3314      	adds	r3, #20
   1e82a:	001a      	movs	r2, r3
   1e82c:	68fb      	ldr	r3, [r7, #12]
   1e82e:	2104      	movs	r1, #4
   1e830:	0018      	movs	r0, r3
   1e832:	f7ff ff09 	bl	1e648 <str_to_int>
   1e836:	0003      	movs	r3, r0
   1e838:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1e83a:	68ba      	ldr	r2, [r7, #8]
   1e83c:	68fb      	ldr	r3, [r7, #12]
   1e83e:	429a      	cmp	r2, r3
   1e840:	d101      	bne.n	1e846 <atcacert_date_dec_iso8601_sep+0x4e>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1e842:	2304      	movs	r3, #4
   1e844:	e094      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>
    }
    cur_pos = new_pos;
   1e846:	68bb      	ldr	r3, [r7, #8]
   1e848:	60fb      	str	r3, [r7, #12]
    timestamp->tm_year -= 1900;
   1e84a:	683b      	ldr	r3, [r7, #0]
   1e84c:	695b      	ldr	r3, [r3, #20]
   1e84e:	4a4a      	ldr	r2, [pc, #296]	; (1e978 <atcacert_date_dec_iso8601_sep+0x180>)
   1e850:	189a      	adds	r2, r3, r2
   1e852:	683b      	ldr	r3, [r7, #0]
   1e854:	615a      	str	r2, [r3, #20]

    if (*(cur_pos++) != '-')
   1e856:	68fb      	ldr	r3, [r7, #12]
   1e858:	1c5a      	adds	r2, r3, #1
   1e85a:	60fa      	str	r2, [r7, #12]
   1e85c:	781b      	ldrb	r3, [r3, #0]
   1e85e:	2b2d      	cmp	r3, #45	; 0x2d
   1e860:	d001      	beq.n	1e866 <atcacert_date_dec_iso8601_sep+0x6e>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unexpected separator
   1e862:	2304      	movs	r3, #4
   1e864:	e084      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>

    }
    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_mon);
   1e866:	683b      	ldr	r3, [r7, #0]
   1e868:	3310      	adds	r3, #16
   1e86a:	001a      	movs	r2, r3
   1e86c:	68fb      	ldr	r3, [r7, #12]
   1e86e:	2102      	movs	r1, #2
   1e870:	0018      	movs	r0, r3
   1e872:	f7ff fee9 	bl	1e648 <str_to_int>
   1e876:	0003      	movs	r3, r0
   1e878:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1e87a:	68ba      	ldr	r2, [r7, #8]
   1e87c:	68fb      	ldr	r3, [r7, #12]
   1e87e:	429a      	cmp	r2, r3
   1e880:	d101      	bne.n	1e886 <atcacert_date_dec_iso8601_sep+0x8e>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1e882:	2304      	movs	r3, #4
   1e884:	e074      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>
    }
    cur_pos = new_pos;
   1e886:	68bb      	ldr	r3, [r7, #8]
   1e888:	60fb      	str	r3, [r7, #12]
    timestamp->tm_mon -= 1;
   1e88a:	683b      	ldr	r3, [r7, #0]
   1e88c:	691b      	ldr	r3, [r3, #16]
   1e88e:	1e5a      	subs	r2, r3, #1
   1e890:	683b      	ldr	r3, [r7, #0]
   1e892:	611a      	str	r2, [r3, #16]

    if (*(cur_pos++) != '-')
   1e894:	68fb      	ldr	r3, [r7, #12]
   1e896:	1c5a      	adds	r2, r3, #1
   1e898:	60fa      	str	r2, [r7, #12]
   1e89a:	781b      	ldrb	r3, [r3, #0]
   1e89c:	2b2d      	cmp	r3, #45	; 0x2d
   1e89e:	d001      	beq.n	1e8a4 <atcacert_date_dec_iso8601_sep+0xac>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unexpected separator
   1e8a0:	2304      	movs	r3, #4
   1e8a2:	e065      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>

    }
    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_mday);
   1e8a4:	683b      	ldr	r3, [r7, #0]
   1e8a6:	330c      	adds	r3, #12
   1e8a8:	001a      	movs	r2, r3
   1e8aa:	68fb      	ldr	r3, [r7, #12]
   1e8ac:	2102      	movs	r1, #2
   1e8ae:	0018      	movs	r0, r3
   1e8b0:	f7ff feca 	bl	1e648 <str_to_int>
   1e8b4:	0003      	movs	r3, r0
   1e8b6:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1e8b8:	68ba      	ldr	r2, [r7, #8]
   1e8ba:	68fb      	ldr	r3, [r7, #12]
   1e8bc:	429a      	cmp	r2, r3
   1e8be:	d101      	bne.n	1e8c4 <atcacert_date_dec_iso8601_sep+0xcc>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1e8c0:	2304      	movs	r3, #4
   1e8c2:	e055      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>
    }
    cur_pos = new_pos;
   1e8c4:	68bb      	ldr	r3, [r7, #8]
   1e8c6:	60fb      	str	r3, [r7, #12]

    if (*(cur_pos++) != 'T')
   1e8c8:	68fb      	ldr	r3, [r7, #12]
   1e8ca:	1c5a      	adds	r2, r3, #1
   1e8cc:	60fa      	str	r2, [r7, #12]
   1e8ce:	781b      	ldrb	r3, [r3, #0]
   1e8d0:	2b54      	cmp	r3, #84	; 0x54
   1e8d2:	d001      	beq.n	1e8d8 <atcacert_date_dec_iso8601_sep+0xe0>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unexpected separator
   1e8d4:	2304      	movs	r3, #4
   1e8d6:	e04b      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>

    }
    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_hour);
   1e8d8:	683b      	ldr	r3, [r7, #0]
   1e8da:	3308      	adds	r3, #8
   1e8dc:	001a      	movs	r2, r3
   1e8de:	68fb      	ldr	r3, [r7, #12]
   1e8e0:	2102      	movs	r1, #2
   1e8e2:	0018      	movs	r0, r3
   1e8e4:	f7ff feb0 	bl	1e648 <str_to_int>
   1e8e8:	0003      	movs	r3, r0
   1e8ea:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1e8ec:	68ba      	ldr	r2, [r7, #8]
   1e8ee:	68fb      	ldr	r3, [r7, #12]
   1e8f0:	429a      	cmp	r2, r3
   1e8f2:	d101      	bne.n	1e8f8 <atcacert_date_dec_iso8601_sep+0x100>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1e8f4:	2304      	movs	r3, #4
   1e8f6:	e03b      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>
    }
    cur_pos = new_pos;
   1e8f8:	68bb      	ldr	r3, [r7, #8]
   1e8fa:	60fb      	str	r3, [r7, #12]

    if (*(cur_pos++) != ':')
   1e8fc:	68fb      	ldr	r3, [r7, #12]
   1e8fe:	1c5a      	adds	r2, r3, #1
   1e900:	60fa      	str	r2, [r7, #12]
   1e902:	781b      	ldrb	r3, [r3, #0]
   1e904:	2b3a      	cmp	r3, #58	; 0x3a
   1e906:	d001      	beq.n	1e90c <atcacert_date_dec_iso8601_sep+0x114>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unexpected separator
   1e908:	2304      	movs	r3, #4
   1e90a:	e031      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>

    }
    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_min);
   1e90c:	683b      	ldr	r3, [r7, #0]
   1e90e:	1d1a      	adds	r2, r3, #4
   1e910:	68fb      	ldr	r3, [r7, #12]
   1e912:	2102      	movs	r1, #2
   1e914:	0018      	movs	r0, r3
   1e916:	f7ff fe97 	bl	1e648 <str_to_int>
   1e91a:	0003      	movs	r3, r0
   1e91c:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1e91e:	68ba      	ldr	r2, [r7, #8]
   1e920:	68fb      	ldr	r3, [r7, #12]
   1e922:	429a      	cmp	r2, r3
   1e924:	d101      	bne.n	1e92a <atcacert_date_dec_iso8601_sep+0x132>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1e926:	2304      	movs	r3, #4
   1e928:	e022      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>
    }
    cur_pos = new_pos;
   1e92a:	68bb      	ldr	r3, [r7, #8]
   1e92c:	60fb      	str	r3, [r7, #12]

    if (*(cur_pos++) != ':')
   1e92e:	68fb      	ldr	r3, [r7, #12]
   1e930:	1c5a      	adds	r2, r3, #1
   1e932:	60fa      	str	r2, [r7, #12]
   1e934:	781b      	ldrb	r3, [r3, #0]
   1e936:	2b3a      	cmp	r3, #58	; 0x3a
   1e938:	d001      	beq.n	1e93e <atcacert_date_dec_iso8601_sep+0x146>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unexpected separator
   1e93a:	2304      	movs	r3, #4
   1e93c:	e018      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>

    }
    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_sec);
   1e93e:	683a      	ldr	r2, [r7, #0]
   1e940:	68fb      	ldr	r3, [r7, #12]
   1e942:	2102      	movs	r1, #2
   1e944:	0018      	movs	r0, r3
   1e946:	f7ff fe7f 	bl	1e648 <str_to_int>
   1e94a:	0003      	movs	r3, r0
   1e94c:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1e94e:	68ba      	ldr	r2, [r7, #8]
   1e950:	68fb      	ldr	r3, [r7, #12]
   1e952:	429a      	cmp	r2, r3
   1e954:	d101      	bne.n	1e95a <atcacert_date_dec_iso8601_sep+0x162>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1e956:	2304      	movs	r3, #4
   1e958:	e00a      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>
    }
    cur_pos = new_pos;
   1e95a:	68bb      	ldr	r3, [r7, #8]
   1e95c:	60fb      	str	r3, [r7, #12]

    if (*(cur_pos++) != 'Z')
   1e95e:	68fb      	ldr	r3, [r7, #12]
   1e960:	1c5a      	adds	r2, r3, #1
   1e962:	60fa      	str	r2, [r7, #12]
   1e964:	781b      	ldrb	r3, [r3, #0]
   1e966:	2b5a      	cmp	r3, #90	; 0x5a
   1e968:	d001      	beq.n	1e96e <atcacert_date_dec_iso8601_sep+0x176>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unexpected UTC marker
   1e96a:	2304      	movs	r3, #4
   1e96c:	e000      	b.n	1e970 <atcacert_date_dec_iso8601_sep+0x178>

    }
    return ATCACERT_E_SUCCESS;
   1e96e:	2300      	movs	r3, #0
}
   1e970:	0018      	movs	r0, r3
   1e972:	46bd      	mov	sp, r7
   1e974:	b004      	add	sp, #16
   1e976:	bd80      	pop	{r7, pc}
   1e978:	fffff894 	.word	0xfffff894

0001e97c <atcacert_date_enc_rfc5280_utc>:

int atcacert_date_enc_rfc5280_utc(const atcacert_tm_utc_t* timestamp,
                                  uint8_t                  formatted_date[DATEFMT_RFC5280_UTC_SIZE])
{
   1e97c:	b580      	push	{r7, lr}
   1e97e:	b084      	sub	sp, #16
   1e980:	af00      	add	r7, sp, #0
   1e982:	6078      	str	r0, [r7, #4]
   1e984:	6039      	str	r1, [r7, #0]
    uint8_t* cur_pos = formatted_date;
   1e986:	683b      	ldr	r3, [r7, #0]
   1e988:	60bb      	str	r3, [r7, #8]
    int year = 0;
   1e98a:	2300      	movs	r3, #0
   1e98c:	60fb      	str	r3, [r7, #12]

    if (timestamp == NULL || formatted_date == NULL)
   1e98e:	687b      	ldr	r3, [r7, #4]
   1e990:	2b00      	cmp	r3, #0
   1e992:	d002      	beq.n	1e99a <atcacert_date_enc_rfc5280_utc+0x1e>
   1e994:	683b      	ldr	r3, [r7, #0]
   1e996:	2b00      	cmp	r3, #0
   1e998:	d101      	bne.n	1e99e <atcacert_date_enc_rfc5280_utc+0x22>
    {
        return ATCACERT_E_BAD_PARAMS;
   1e99a:	2302      	movs	r3, #2
   1e99c:	e096      	b.n	1eacc <atcacert_date_enc_rfc5280_utc+0x150>
    }

    year = timestamp->tm_year + 1900;
   1e99e:	687b      	ldr	r3, [r7, #4]
   1e9a0:	695b      	ldr	r3, [r3, #20]
   1e9a2:	4a4c      	ldr	r2, [pc, #304]	; (1ead4 <atcacert_date_enc_rfc5280_utc+0x158>)
   1e9a4:	4694      	mov	ip, r2
   1e9a6:	4463      	add	r3, ip
   1e9a8:	60fb      	str	r3, [r7, #12]

    if (year >= 1950 && year <= 1999)
   1e9aa:	68fb      	ldr	r3, [r7, #12]
   1e9ac:	4a4a      	ldr	r2, [pc, #296]	; (1ead8 <atcacert_date_enc_rfc5280_utc+0x15c>)
   1e9ae:	4293      	cmp	r3, r2
   1e9b0:	dd09      	ble.n	1e9c6 <atcacert_date_enc_rfc5280_utc+0x4a>
   1e9b2:	68fb      	ldr	r3, [r7, #12]
   1e9b4:	4a49      	ldr	r2, [pc, #292]	; (1eadc <atcacert_date_enc_rfc5280_utc+0x160>)
   1e9b6:	4293      	cmp	r3, r2
   1e9b8:	dc05      	bgt.n	1e9c6 <atcacert_date_enc_rfc5280_utc+0x4a>
    {
        year = year - 1900;
   1e9ba:	68fb      	ldr	r3, [r7, #12]
   1e9bc:	4a48      	ldr	r2, [pc, #288]	; (1eae0 <atcacert_date_enc_rfc5280_utc+0x164>)
   1e9be:	4694      	mov	ip, r2
   1e9c0:	4463      	add	r3, ip
   1e9c2:	60fb      	str	r3, [r7, #12]
   1e9c4:	e00f      	b.n	1e9e6 <atcacert_date_enc_rfc5280_utc+0x6a>
    }
    else if (year >= 2000 && year <= 2049)
   1e9c6:	68fb      	ldr	r3, [r7, #12]
   1e9c8:	4a44      	ldr	r2, [pc, #272]	; (1eadc <atcacert_date_enc_rfc5280_utc+0x160>)
   1e9ca:	4293      	cmp	r3, r2
   1e9cc:	dd09      	ble.n	1e9e2 <atcacert_date_enc_rfc5280_utc+0x66>
   1e9ce:	68fb      	ldr	r3, [r7, #12]
   1e9d0:	4a44      	ldr	r2, [pc, #272]	; (1eae4 <atcacert_date_enc_rfc5280_utc+0x168>)
   1e9d2:	4293      	cmp	r3, r2
   1e9d4:	dc05      	bgt.n	1e9e2 <atcacert_date_enc_rfc5280_utc+0x66>
    {
        year = year - 2000;
   1e9d6:	68fb      	ldr	r3, [r7, #12]
   1e9d8:	4a43      	ldr	r2, [pc, #268]	; (1eae8 <atcacert_date_enc_rfc5280_utc+0x16c>)
   1e9da:	4694      	mov	ip, r2
   1e9dc:	4463      	add	r3, ip
   1e9de:	60fb      	str	r3, [r7, #12]
   1e9e0:	e001      	b.n	1e9e6 <atcacert_date_enc_rfc5280_utc+0x6a>
    }
    else
    {
        return ATCACERT_E_INVALID_DATE;  // Year out of range for RFC2459 UTC format
   1e9e2:	2305      	movs	r3, #5
   1e9e4:	e072      	b.n	1eacc <atcacert_date_enc_rfc5280_utc+0x150>
    }
    cur_pos = uint_to_str(year, 2, cur_pos);
   1e9e6:	68fb      	ldr	r3, [r7, #12]
   1e9e8:	68ba      	ldr	r2, [r7, #8]
   1e9ea:	2102      	movs	r1, #2
   1e9ec:	0018      	movs	r0, r3
   1e9ee:	f7ff fd8f 	bl	1e510 <uint_to_str>
   1e9f2:	0003      	movs	r3, r0
   1e9f4:	60bb      	str	r3, [r7, #8]

    if (timestamp->tm_mon < 0 || timestamp->tm_mon > 11)
   1e9f6:	687b      	ldr	r3, [r7, #4]
   1e9f8:	691b      	ldr	r3, [r3, #16]
   1e9fa:	2b00      	cmp	r3, #0
   1e9fc:	db03      	blt.n	1ea06 <atcacert_date_enc_rfc5280_utc+0x8a>
   1e9fe:	687b      	ldr	r3, [r7, #4]
   1ea00:	691b      	ldr	r3, [r3, #16]
   1ea02:	2b0b      	cmp	r3, #11
   1ea04:	dd01      	ble.n	1ea0a <atcacert_date_enc_rfc5280_utc+0x8e>
    {
        return ATCACERT_E_INVALID_DATE;
   1ea06:	2305      	movs	r3, #5
   1ea08:	e060      	b.n	1eacc <atcacert_date_enc_rfc5280_utc+0x150>
    }
    cur_pos = uint_to_str(timestamp->tm_mon + 1, 2, cur_pos);
   1ea0a:	687b      	ldr	r3, [r7, #4]
   1ea0c:	691b      	ldr	r3, [r3, #16]
   1ea0e:	3301      	adds	r3, #1
   1ea10:	0018      	movs	r0, r3
   1ea12:	68bb      	ldr	r3, [r7, #8]
   1ea14:	001a      	movs	r2, r3
   1ea16:	2102      	movs	r1, #2
   1ea18:	f7ff fd7a 	bl	1e510 <uint_to_str>
   1ea1c:	0003      	movs	r3, r0
   1ea1e:	60bb      	str	r3, [r7, #8]

    if (timestamp->tm_mday < 1 || timestamp->tm_mday > 31)
   1ea20:	687b      	ldr	r3, [r7, #4]
   1ea22:	68db      	ldr	r3, [r3, #12]
   1ea24:	2b00      	cmp	r3, #0
   1ea26:	dd03      	ble.n	1ea30 <atcacert_date_enc_rfc5280_utc+0xb4>
   1ea28:	687b      	ldr	r3, [r7, #4]
   1ea2a:	68db      	ldr	r3, [r3, #12]
   1ea2c:	2b1f      	cmp	r3, #31
   1ea2e:	dd01      	ble.n	1ea34 <atcacert_date_enc_rfc5280_utc+0xb8>
    {
        return ATCACERT_E_INVALID_DATE;
   1ea30:	2305      	movs	r3, #5
   1ea32:	e04b      	b.n	1eacc <atcacert_date_enc_rfc5280_utc+0x150>
    }
    cur_pos = uint_to_str(timestamp->tm_mday, 2, cur_pos);
   1ea34:	687b      	ldr	r3, [r7, #4]
   1ea36:	68db      	ldr	r3, [r3, #12]
   1ea38:	0018      	movs	r0, r3
   1ea3a:	68bb      	ldr	r3, [r7, #8]
   1ea3c:	001a      	movs	r2, r3
   1ea3e:	2102      	movs	r1, #2
   1ea40:	f7ff fd66 	bl	1e510 <uint_to_str>
   1ea44:	0003      	movs	r3, r0
   1ea46:	60bb      	str	r3, [r7, #8]

    if (timestamp->tm_hour < 0 || timestamp->tm_hour > 23)
   1ea48:	687b      	ldr	r3, [r7, #4]
   1ea4a:	689b      	ldr	r3, [r3, #8]
   1ea4c:	2b00      	cmp	r3, #0
   1ea4e:	db03      	blt.n	1ea58 <atcacert_date_enc_rfc5280_utc+0xdc>
   1ea50:	687b      	ldr	r3, [r7, #4]
   1ea52:	689b      	ldr	r3, [r3, #8]
   1ea54:	2b17      	cmp	r3, #23
   1ea56:	dd01      	ble.n	1ea5c <atcacert_date_enc_rfc5280_utc+0xe0>
    {
        return ATCACERT_E_INVALID_DATE;
   1ea58:	2305      	movs	r3, #5
   1ea5a:	e037      	b.n	1eacc <atcacert_date_enc_rfc5280_utc+0x150>
    }
    cur_pos = uint_to_str(timestamp->tm_hour, 2, cur_pos);
   1ea5c:	687b      	ldr	r3, [r7, #4]
   1ea5e:	689b      	ldr	r3, [r3, #8]
   1ea60:	0018      	movs	r0, r3
   1ea62:	68bb      	ldr	r3, [r7, #8]
   1ea64:	001a      	movs	r2, r3
   1ea66:	2102      	movs	r1, #2
   1ea68:	f7ff fd52 	bl	1e510 <uint_to_str>
   1ea6c:	0003      	movs	r3, r0
   1ea6e:	60bb      	str	r3, [r7, #8]

    if (timestamp->tm_min < 0 || timestamp->tm_min > 59)
   1ea70:	687b      	ldr	r3, [r7, #4]
   1ea72:	685b      	ldr	r3, [r3, #4]
   1ea74:	2b00      	cmp	r3, #0
   1ea76:	db03      	blt.n	1ea80 <atcacert_date_enc_rfc5280_utc+0x104>
   1ea78:	687b      	ldr	r3, [r7, #4]
   1ea7a:	685b      	ldr	r3, [r3, #4]
   1ea7c:	2b3b      	cmp	r3, #59	; 0x3b
   1ea7e:	dd01      	ble.n	1ea84 <atcacert_date_enc_rfc5280_utc+0x108>
    {
        return ATCACERT_E_INVALID_DATE;
   1ea80:	2305      	movs	r3, #5
   1ea82:	e023      	b.n	1eacc <atcacert_date_enc_rfc5280_utc+0x150>
    }
    cur_pos = uint_to_str(timestamp->tm_min, 2, cur_pos);
   1ea84:	687b      	ldr	r3, [r7, #4]
   1ea86:	685b      	ldr	r3, [r3, #4]
   1ea88:	0018      	movs	r0, r3
   1ea8a:	68bb      	ldr	r3, [r7, #8]
   1ea8c:	001a      	movs	r2, r3
   1ea8e:	2102      	movs	r1, #2
   1ea90:	f7ff fd3e 	bl	1e510 <uint_to_str>
   1ea94:	0003      	movs	r3, r0
   1ea96:	60bb      	str	r3, [r7, #8]

    if (timestamp->tm_sec < 0 || timestamp->tm_sec > 59)
   1ea98:	687b      	ldr	r3, [r7, #4]
   1ea9a:	681b      	ldr	r3, [r3, #0]
   1ea9c:	2b00      	cmp	r3, #0
   1ea9e:	db03      	blt.n	1eaa8 <atcacert_date_enc_rfc5280_utc+0x12c>
   1eaa0:	687b      	ldr	r3, [r7, #4]
   1eaa2:	681b      	ldr	r3, [r3, #0]
   1eaa4:	2b3b      	cmp	r3, #59	; 0x3b
   1eaa6:	dd01      	ble.n	1eaac <atcacert_date_enc_rfc5280_utc+0x130>
    {
        return ATCACERT_E_INVALID_DATE;
   1eaa8:	2305      	movs	r3, #5
   1eaaa:	e00f      	b.n	1eacc <atcacert_date_enc_rfc5280_utc+0x150>
    }
    cur_pos = uint_to_str(timestamp->tm_sec, 2, cur_pos);
   1eaac:	687b      	ldr	r3, [r7, #4]
   1eaae:	681b      	ldr	r3, [r3, #0]
   1eab0:	0018      	movs	r0, r3
   1eab2:	68bb      	ldr	r3, [r7, #8]
   1eab4:	001a      	movs	r2, r3
   1eab6:	2102      	movs	r1, #2
   1eab8:	f7ff fd2a 	bl	1e510 <uint_to_str>
   1eabc:	0003      	movs	r3, r0
   1eabe:	60bb      	str	r3, [r7, #8]

    *(cur_pos++) = 'Z';
   1eac0:	68bb      	ldr	r3, [r7, #8]
   1eac2:	1c5a      	adds	r2, r3, #1
   1eac4:	60ba      	str	r2, [r7, #8]
   1eac6:	225a      	movs	r2, #90	; 0x5a
   1eac8:	701a      	strb	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
   1eaca:	2300      	movs	r3, #0
}
   1eacc:	0018      	movs	r0, r3
   1eace:	46bd      	mov	sp, r7
   1ead0:	b004      	add	sp, #16
   1ead2:	bd80      	pop	{r7, pc}
   1ead4:	0000076c 	.word	0x0000076c
   1ead8:	0000079d 	.word	0x0000079d
   1eadc:	000007cf 	.word	0x000007cf
   1eae0:	fffff894 	.word	0xfffff894
   1eae4:	00000801 	.word	0x00000801
   1eae8:	fffff830 	.word	0xfffff830

0001eaec <atcacert_date_dec_rfc5280_utc>:

int atcacert_date_dec_rfc5280_utc(const uint8_t      formatted_date[DATEFMT_RFC5280_UTC_SIZE],
                                  atcacert_tm_utc_t* timestamp)
{
   1eaec:	b580      	push	{r7, lr}
   1eaee:	b084      	sub	sp, #16
   1eaf0:	af00      	add	r7, sp, #0
   1eaf2:	6078      	str	r0, [r7, #4]
   1eaf4:	6039      	str	r1, [r7, #0]
    const uint8_t* cur_pos = formatted_date;
   1eaf6:	687b      	ldr	r3, [r7, #4]
   1eaf8:	60fb      	str	r3, [r7, #12]
    const uint8_t* new_pos = NULL;
   1eafa:	2300      	movs	r3, #0
   1eafc:	60bb      	str	r3, [r7, #8]

    if (formatted_date == NULL || timestamp == NULL)
   1eafe:	687b      	ldr	r3, [r7, #4]
   1eb00:	2b00      	cmp	r3, #0
   1eb02:	d002      	beq.n	1eb0a <atcacert_date_dec_rfc5280_utc+0x1e>
   1eb04:	683b      	ldr	r3, [r7, #0]
   1eb06:	2b00      	cmp	r3, #0
   1eb08:	d101      	bne.n	1eb0e <atcacert_date_dec_rfc5280_utc+0x22>
    {
        return ATCACERT_E_BAD_PARAMS;
   1eb0a:	2302      	movs	r3, #2
   1eb0c:	e094      	b.n	1ec38 <atcacert_date_dec_rfc5280_utc+0x14c>
    }

    memset(timestamp, 0, sizeof(*timestamp));
   1eb0e:	683b      	ldr	r3, [r7, #0]
   1eb10:	2218      	movs	r2, #24
   1eb12:	2100      	movs	r1, #0
   1eb14:	0018      	movs	r0, r3
   1eb16:	f006 fe08 	bl	2572a <memset>

    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_year);
   1eb1a:	683b      	ldr	r3, [r7, #0]
   1eb1c:	3314      	adds	r3, #20
   1eb1e:	001a      	movs	r2, r3
   1eb20:	68fb      	ldr	r3, [r7, #12]
   1eb22:	2102      	movs	r1, #2
   1eb24:	0018      	movs	r0, r3
   1eb26:	f7ff fd8f 	bl	1e648 <str_to_int>
   1eb2a:	0003      	movs	r3, r0
   1eb2c:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1eb2e:	68ba      	ldr	r2, [r7, #8]
   1eb30:	68fb      	ldr	r3, [r7, #12]
   1eb32:	429a      	cmp	r2, r3
   1eb34:	d101      	bne.n	1eb3a <atcacert_date_dec_rfc5280_utc+0x4e>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1eb36:	2304      	movs	r3, #4
   1eb38:	e07e      	b.n	1ec38 <atcacert_date_dec_rfc5280_utc+0x14c>
    }
    cur_pos = new_pos;
   1eb3a:	68bb      	ldr	r3, [r7, #8]
   1eb3c:	60fb      	str	r3, [r7, #12]
    if (timestamp->tm_year < 50)
   1eb3e:	683b      	ldr	r3, [r7, #0]
   1eb40:	695b      	ldr	r3, [r3, #20]
   1eb42:	2b31      	cmp	r3, #49	; 0x31
   1eb44:	dc07      	bgt.n	1eb56 <atcacert_date_dec_rfc5280_utc+0x6a>
    {
        timestamp->tm_year += 2000;
   1eb46:	683b      	ldr	r3, [r7, #0]
   1eb48:	695b      	ldr	r3, [r3, #20]
   1eb4a:	22fa      	movs	r2, #250	; 0xfa
   1eb4c:	00d2      	lsls	r2, r2, #3
   1eb4e:	189a      	adds	r2, r3, r2
   1eb50:	683b      	ldr	r3, [r7, #0]
   1eb52:	615a      	str	r2, [r3, #20]
   1eb54:	e005      	b.n	1eb62 <atcacert_date_dec_rfc5280_utc+0x76>
    }
    else
    {
        timestamp->tm_year += 1900;
   1eb56:	683b      	ldr	r3, [r7, #0]
   1eb58:	695b      	ldr	r3, [r3, #20]
   1eb5a:	4a39      	ldr	r2, [pc, #228]	; (1ec40 <atcacert_date_dec_rfc5280_utc+0x154>)
   1eb5c:	189a      	adds	r2, r3, r2
   1eb5e:	683b      	ldr	r3, [r7, #0]
   1eb60:	615a      	str	r2, [r3, #20]
    }
    timestamp->tm_year -= 1900;
   1eb62:	683b      	ldr	r3, [r7, #0]
   1eb64:	695b      	ldr	r3, [r3, #20]
   1eb66:	4a37      	ldr	r2, [pc, #220]	; (1ec44 <atcacert_date_dec_rfc5280_utc+0x158>)
   1eb68:	189a      	adds	r2, r3, r2
   1eb6a:	683b      	ldr	r3, [r7, #0]
   1eb6c:	615a      	str	r2, [r3, #20]

    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_mon);
   1eb6e:	683b      	ldr	r3, [r7, #0]
   1eb70:	3310      	adds	r3, #16
   1eb72:	001a      	movs	r2, r3
   1eb74:	68fb      	ldr	r3, [r7, #12]
   1eb76:	2102      	movs	r1, #2
   1eb78:	0018      	movs	r0, r3
   1eb7a:	f7ff fd65 	bl	1e648 <str_to_int>
   1eb7e:	0003      	movs	r3, r0
   1eb80:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1eb82:	68ba      	ldr	r2, [r7, #8]
   1eb84:	68fb      	ldr	r3, [r7, #12]
   1eb86:	429a      	cmp	r2, r3
   1eb88:	d101      	bne.n	1eb8e <atcacert_date_dec_rfc5280_utc+0xa2>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1eb8a:	2304      	movs	r3, #4
   1eb8c:	e054      	b.n	1ec38 <atcacert_date_dec_rfc5280_utc+0x14c>
    }
    cur_pos = new_pos;
   1eb8e:	68bb      	ldr	r3, [r7, #8]
   1eb90:	60fb      	str	r3, [r7, #12]
    timestamp->tm_mon -= 1;
   1eb92:	683b      	ldr	r3, [r7, #0]
   1eb94:	691b      	ldr	r3, [r3, #16]
   1eb96:	1e5a      	subs	r2, r3, #1
   1eb98:	683b      	ldr	r3, [r7, #0]
   1eb9a:	611a      	str	r2, [r3, #16]

    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_mday);
   1eb9c:	683b      	ldr	r3, [r7, #0]
   1eb9e:	330c      	adds	r3, #12
   1eba0:	001a      	movs	r2, r3
   1eba2:	68fb      	ldr	r3, [r7, #12]
   1eba4:	2102      	movs	r1, #2
   1eba6:	0018      	movs	r0, r3
   1eba8:	f7ff fd4e 	bl	1e648 <str_to_int>
   1ebac:	0003      	movs	r3, r0
   1ebae:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1ebb0:	68ba      	ldr	r2, [r7, #8]
   1ebb2:	68fb      	ldr	r3, [r7, #12]
   1ebb4:	429a      	cmp	r2, r3
   1ebb6:	d101      	bne.n	1ebbc <atcacert_date_dec_rfc5280_utc+0xd0>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1ebb8:	2304      	movs	r3, #4
   1ebba:	e03d      	b.n	1ec38 <atcacert_date_dec_rfc5280_utc+0x14c>
    }
    cur_pos = new_pos;
   1ebbc:	68bb      	ldr	r3, [r7, #8]
   1ebbe:	60fb      	str	r3, [r7, #12]

    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_hour);
   1ebc0:	683b      	ldr	r3, [r7, #0]
   1ebc2:	3308      	adds	r3, #8
   1ebc4:	001a      	movs	r2, r3
   1ebc6:	68fb      	ldr	r3, [r7, #12]
   1ebc8:	2102      	movs	r1, #2
   1ebca:	0018      	movs	r0, r3
   1ebcc:	f7ff fd3c 	bl	1e648 <str_to_int>
   1ebd0:	0003      	movs	r3, r0
   1ebd2:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1ebd4:	68ba      	ldr	r2, [r7, #8]
   1ebd6:	68fb      	ldr	r3, [r7, #12]
   1ebd8:	429a      	cmp	r2, r3
   1ebda:	d101      	bne.n	1ebe0 <atcacert_date_dec_rfc5280_utc+0xf4>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1ebdc:	2304      	movs	r3, #4
   1ebde:	e02b      	b.n	1ec38 <atcacert_date_dec_rfc5280_utc+0x14c>
    }
    cur_pos = new_pos;
   1ebe0:	68bb      	ldr	r3, [r7, #8]
   1ebe2:	60fb      	str	r3, [r7, #12]

    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_min);
   1ebe4:	683b      	ldr	r3, [r7, #0]
   1ebe6:	1d1a      	adds	r2, r3, #4
   1ebe8:	68fb      	ldr	r3, [r7, #12]
   1ebea:	2102      	movs	r1, #2
   1ebec:	0018      	movs	r0, r3
   1ebee:	f7ff fd2b 	bl	1e648 <str_to_int>
   1ebf2:	0003      	movs	r3, r0
   1ebf4:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1ebf6:	68ba      	ldr	r2, [r7, #8]
   1ebf8:	68fb      	ldr	r3, [r7, #12]
   1ebfa:	429a      	cmp	r2, r3
   1ebfc:	d101      	bne.n	1ec02 <atcacert_date_dec_rfc5280_utc+0x116>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1ebfe:	2304      	movs	r3, #4
   1ec00:	e01a      	b.n	1ec38 <atcacert_date_dec_rfc5280_utc+0x14c>
    }
    cur_pos = new_pos;
   1ec02:	68bb      	ldr	r3, [r7, #8]
   1ec04:	60fb      	str	r3, [r7, #12]

    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_sec);
   1ec06:	683a      	ldr	r2, [r7, #0]
   1ec08:	68fb      	ldr	r3, [r7, #12]
   1ec0a:	2102      	movs	r1, #2
   1ec0c:	0018      	movs	r0, r3
   1ec0e:	f7ff fd1b 	bl	1e648 <str_to_int>
   1ec12:	0003      	movs	r3, r0
   1ec14:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1ec16:	68ba      	ldr	r2, [r7, #8]
   1ec18:	68fb      	ldr	r3, [r7, #12]
   1ec1a:	429a      	cmp	r2, r3
   1ec1c:	d101      	bne.n	1ec22 <atcacert_date_dec_rfc5280_utc+0x136>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1ec1e:	2304      	movs	r3, #4
   1ec20:	e00a      	b.n	1ec38 <atcacert_date_dec_rfc5280_utc+0x14c>
    }
    cur_pos = new_pos;
   1ec22:	68bb      	ldr	r3, [r7, #8]
   1ec24:	60fb      	str	r3, [r7, #12]

    if (*(cur_pos++) != 'Z')
   1ec26:	68fb      	ldr	r3, [r7, #12]
   1ec28:	1c5a      	adds	r2, r3, #1
   1ec2a:	60fa      	str	r2, [r7, #12]
   1ec2c:	781b      	ldrb	r3, [r3, #0]
   1ec2e:	2b5a      	cmp	r3, #90	; 0x5a
   1ec30:	d001      	beq.n	1ec36 <atcacert_date_dec_rfc5280_utc+0x14a>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unexpected UTC marker
   1ec32:	2304      	movs	r3, #4
   1ec34:	e000      	b.n	1ec38 <atcacert_date_dec_rfc5280_utc+0x14c>

    }
    return ATCACERT_E_SUCCESS;
   1ec36:	2300      	movs	r3, #0
}
   1ec38:	0018      	movs	r0, r3
   1ec3a:	46bd      	mov	sp, r7
   1ec3c:	b004      	add	sp, #16
   1ec3e:	bd80      	pop	{r7, pc}
   1ec40:	0000076c 	.word	0x0000076c
   1ec44:	fffff894 	.word	0xfffff894

0001ec48 <atcacert_date_enc_rfc5280_gen>:

int atcacert_date_enc_rfc5280_gen(const atcacert_tm_utc_t* timestamp,
                                  uint8_t                  formatted_date[DATEFMT_RFC5280_GEN_SIZE])
{
   1ec48:	b580      	push	{r7, lr}
   1ec4a:	b084      	sub	sp, #16
   1ec4c:	af00      	add	r7, sp, #0
   1ec4e:	6078      	str	r0, [r7, #4]
   1ec50:	6039      	str	r1, [r7, #0]
    uint8_t* cur_pos = formatted_date;
   1ec52:	683b      	ldr	r3, [r7, #0]
   1ec54:	60fb      	str	r3, [r7, #12]
    int year = 0;
   1ec56:	2300      	movs	r3, #0
   1ec58:	60bb      	str	r3, [r7, #8]

    if (timestamp == NULL || formatted_date == NULL)
   1ec5a:	687b      	ldr	r3, [r7, #4]
   1ec5c:	2b00      	cmp	r3, #0
   1ec5e:	d002      	beq.n	1ec66 <atcacert_date_enc_rfc5280_gen+0x1e>
   1ec60:	683b      	ldr	r3, [r7, #0]
   1ec62:	2b00      	cmp	r3, #0
   1ec64:	d101      	bne.n	1ec6a <atcacert_date_enc_rfc5280_gen+0x22>
    {
        return ATCACERT_E_BAD_PARAMS;
   1ec66:	2302      	movs	r3, #2
   1ec68:	e081      	b.n	1ed6e <atcacert_date_enc_rfc5280_gen+0x126>
    }

    year = timestamp->tm_year + 1900;
   1ec6a:	687b      	ldr	r3, [r7, #4]
   1ec6c:	695b      	ldr	r3, [r3, #20]
   1ec6e:	4a42      	ldr	r2, [pc, #264]	; (1ed78 <atcacert_date_enc_rfc5280_gen+0x130>)
   1ec70:	4694      	mov	ip, r2
   1ec72:	4463      	add	r3, ip
   1ec74:	60bb      	str	r3, [r7, #8]

    if (year < 0 || year > 9999)
   1ec76:	68bb      	ldr	r3, [r7, #8]
   1ec78:	2b00      	cmp	r3, #0
   1ec7a:	db03      	blt.n	1ec84 <atcacert_date_enc_rfc5280_gen+0x3c>
   1ec7c:	68bb      	ldr	r3, [r7, #8]
   1ec7e:	4a3f      	ldr	r2, [pc, #252]	; (1ed7c <atcacert_date_enc_rfc5280_gen+0x134>)
   1ec80:	4293      	cmp	r3, r2
   1ec82:	dd01      	ble.n	1ec88 <atcacert_date_enc_rfc5280_gen+0x40>
    {
        return ATCACERT_E_INVALID_DATE;
   1ec84:	2305      	movs	r3, #5
   1ec86:	e072      	b.n	1ed6e <atcacert_date_enc_rfc5280_gen+0x126>
    }
    cur_pos = uint_to_str(year, 4, cur_pos);
   1ec88:	68bb      	ldr	r3, [r7, #8]
   1ec8a:	68fa      	ldr	r2, [r7, #12]
   1ec8c:	2104      	movs	r1, #4
   1ec8e:	0018      	movs	r0, r3
   1ec90:	f7ff fc3e 	bl	1e510 <uint_to_str>
   1ec94:	0003      	movs	r3, r0
   1ec96:	60fb      	str	r3, [r7, #12]

    if (timestamp->tm_mon < 0 || timestamp->tm_mon > 11)
   1ec98:	687b      	ldr	r3, [r7, #4]
   1ec9a:	691b      	ldr	r3, [r3, #16]
   1ec9c:	2b00      	cmp	r3, #0
   1ec9e:	db03      	blt.n	1eca8 <atcacert_date_enc_rfc5280_gen+0x60>
   1eca0:	687b      	ldr	r3, [r7, #4]
   1eca2:	691b      	ldr	r3, [r3, #16]
   1eca4:	2b0b      	cmp	r3, #11
   1eca6:	dd01      	ble.n	1ecac <atcacert_date_enc_rfc5280_gen+0x64>
    {
        return ATCACERT_E_INVALID_DATE;
   1eca8:	2305      	movs	r3, #5
   1ecaa:	e060      	b.n	1ed6e <atcacert_date_enc_rfc5280_gen+0x126>
    }
    cur_pos = uint_to_str(timestamp->tm_mon + 1, 2, cur_pos);
   1ecac:	687b      	ldr	r3, [r7, #4]
   1ecae:	691b      	ldr	r3, [r3, #16]
   1ecb0:	3301      	adds	r3, #1
   1ecb2:	0018      	movs	r0, r3
   1ecb4:	68fb      	ldr	r3, [r7, #12]
   1ecb6:	001a      	movs	r2, r3
   1ecb8:	2102      	movs	r1, #2
   1ecba:	f7ff fc29 	bl	1e510 <uint_to_str>
   1ecbe:	0003      	movs	r3, r0
   1ecc0:	60fb      	str	r3, [r7, #12]

    if (timestamp->tm_mday < 1 || timestamp->tm_mday > 31)
   1ecc2:	687b      	ldr	r3, [r7, #4]
   1ecc4:	68db      	ldr	r3, [r3, #12]
   1ecc6:	2b00      	cmp	r3, #0
   1ecc8:	dd03      	ble.n	1ecd2 <atcacert_date_enc_rfc5280_gen+0x8a>
   1ecca:	687b      	ldr	r3, [r7, #4]
   1eccc:	68db      	ldr	r3, [r3, #12]
   1ecce:	2b1f      	cmp	r3, #31
   1ecd0:	dd01      	ble.n	1ecd6 <atcacert_date_enc_rfc5280_gen+0x8e>
    {
        return ATCACERT_E_INVALID_DATE;
   1ecd2:	2305      	movs	r3, #5
   1ecd4:	e04b      	b.n	1ed6e <atcacert_date_enc_rfc5280_gen+0x126>
    }
    cur_pos = uint_to_str(timestamp->tm_mday, 2, cur_pos);
   1ecd6:	687b      	ldr	r3, [r7, #4]
   1ecd8:	68db      	ldr	r3, [r3, #12]
   1ecda:	0018      	movs	r0, r3
   1ecdc:	68fb      	ldr	r3, [r7, #12]
   1ecde:	001a      	movs	r2, r3
   1ece0:	2102      	movs	r1, #2
   1ece2:	f7ff fc15 	bl	1e510 <uint_to_str>
   1ece6:	0003      	movs	r3, r0
   1ece8:	60fb      	str	r3, [r7, #12]

    if (timestamp->tm_hour < 0 || timestamp->tm_hour > 23)
   1ecea:	687b      	ldr	r3, [r7, #4]
   1ecec:	689b      	ldr	r3, [r3, #8]
   1ecee:	2b00      	cmp	r3, #0
   1ecf0:	db03      	blt.n	1ecfa <atcacert_date_enc_rfc5280_gen+0xb2>
   1ecf2:	687b      	ldr	r3, [r7, #4]
   1ecf4:	689b      	ldr	r3, [r3, #8]
   1ecf6:	2b17      	cmp	r3, #23
   1ecf8:	dd01      	ble.n	1ecfe <atcacert_date_enc_rfc5280_gen+0xb6>
    {
        return ATCACERT_E_INVALID_DATE;
   1ecfa:	2305      	movs	r3, #5
   1ecfc:	e037      	b.n	1ed6e <atcacert_date_enc_rfc5280_gen+0x126>
    }
    cur_pos = uint_to_str(timestamp->tm_hour, 2, cur_pos);
   1ecfe:	687b      	ldr	r3, [r7, #4]
   1ed00:	689b      	ldr	r3, [r3, #8]
   1ed02:	0018      	movs	r0, r3
   1ed04:	68fb      	ldr	r3, [r7, #12]
   1ed06:	001a      	movs	r2, r3
   1ed08:	2102      	movs	r1, #2
   1ed0a:	f7ff fc01 	bl	1e510 <uint_to_str>
   1ed0e:	0003      	movs	r3, r0
   1ed10:	60fb      	str	r3, [r7, #12]

    if (timestamp->tm_min < 0 || timestamp->tm_min > 59)
   1ed12:	687b      	ldr	r3, [r7, #4]
   1ed14:	685b      	ldr	r3, [r3, #4]
   1ed16:	2b00      	cmp	r3, #0
   1ed18:	db03      	blt.n	1ed22 <atcacert_date_enc_rfc5280_gen+0xda>
   1ed1a:	687b      	ldr	r3, [r7, #4]
   1ed1c:	685b      	ldr	r3, [r3, #4]
   1ed1e:	2b3b      	cmp	r3, #59	; 0x3b
   1ed20:	dd01      	ble.n	1ed26 <atcacert_date_enc_rfc5280_gen+0xde>
    {
        return ATCACERT_E_INVALID_DATE;
   1ed22:	2305      	movs	r3, #5
   1ed24:	e023      	b.n	1ed6e <atcacert_date_enc_rfc5280_gen+0x126>
    }
    cur_pos = uint_to_str(timestamp->tm_min, 2, cur_pos);
   1ed26:	687b      	ldr	r3, [r7, #4]
   1ed28:	685b      	ldr	r3, [r3, #4]
   1ed2a:	0018      	movs	r0, r3
   1ed2c:	68fb      	ldr	r3, [r7, #12]
   1ed2e:	001a      	movs	r2, r3
   1ed30:	2102      	movs	r1, #2
   1ed32:	f7ff fbed 	bl	1e510 <uint_to_str>
   1ed36:	0003      	movs	r3, r0
   1ed38:	60fb      	str	r3, [r7, #12]

    if (timestamp->tm_sec < 0 || timestamp->tm_sec > 59)
   1ed3a:	687b      	ldr	r3, [r7, #4]
   1ed3c:	681b      	ldr	r3, [r3, #0]
   1ed3e:	2b00      	cmp	r3, #0
   1ed40:	db03      	blt.n	1ed4a <atcacert_date_enc_rfc5280_gen+0x102>
   1ed42:	687b      	ldr	r3, [r7, #4]
   1ed44:	681b      	ldr	r3, [r3, #0]
   1ed46:	2b3b      	cmp	r3, #59	; 0x3b
   1ed48:	dd01      	ble.n	1ed4e <atcacert_date_enc_rfc5280_gen+0x106>
    {
        return ATCACERT_E_INVALID_DATE;
   1ed4a:	2305      	movs	r3, #5
   1ed4c:	e00f      	b.n	1ed6e <atcacert_date_enc_rfc5280_gen+0x126>
    }
    cur_pos = uint_to_str(timestamp->tm_sec, 2, cur_pos);
   1ed4e:	687b      	ldr	r3, [r7, #4]
   1ed50:	681b      	ldr	r3, [r3, #0]
   1ed52:	0018      	movs	r0, r3
   1ed54:	68fb      	ldr	r3, [r7, #12]
   1ed56:	001a      	movs	r2, r3
   1ed58:	2102      	movs	r1, #2
   1ed5a:	f7ff fbd9 	bl	1e510 <uint_to_str>
   1ed5e:	0003      	movs	r3, r0
   1ed60:	60fb      	str	r3, [r7, #12]

    *(cur_pos++) = 'Z';
   1ed62:	68fb      	ldr	r3, [r7, #12]
   1ed64:	1c5a      	adds	r2, r3, #1
   1ed66:	60fa      	str	r2, [r7, #12]
   1ed68:	225a      	movs	r2, #90	; 0x5a
   1ed6a:	701a      	strb	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
   1ed6c:	2300      	movs	r3, #0
}
   1ed6e:	0018      	movs	r0, r3
   1ed70:	46bd      	mov	sp, r7
   1ed72:	b004      	add	sp, #16
   1ed74:	bd80      	pop	{r7, pc}
   1ed76:	46c0      	nop			; (mov r8, r8)
   1ed78:	0000076c 	.word	0x0000076c
   1ed7c:	0000270f 	.word	0x0000270f

0001ed80 <atcacert_date_dec_rfc5280_gen>:

int atcacert_date_dec_rfc5280_gen(const uint8_t      formatted_date[DATEFMT_RFC5280_GEN_SIZE],
                                  atcacert_tm_utc_t* timestamp)
{
   1ed80:	b580      	push	{r7, lr}
   1ed82:	b084      	sub	sp, #16
   1ed84:	af00      	add	r7, sp, #0
   1ed86:	6078      	str	r0, [r7, #4]
   1ed88:	6039      	str	r1, [r7, #0]
    const uint8_t* cur_pos = formatted_date;
   1ed8a:	687b      	ldr	r3, [r7, #4]
   1ed8c:	60fb      	str	r3, [r7, #12]
    const uint8_t* new_pos = NULL;
   1ed8e:	2300      	movs	r3, #0
   1ed90:	60bb      	str	r3, [r7, #8]

    if (formatted_date == NULL || timestamp == NULL)
   1ed92:	687b      	ldr	r3, [r7, #4]
   1ed94:	2b00      	cmp	r3, #0
   1ed96:	d002      	beq.n	1ed9e <atcacert_date_dec_rfc5280_gen+0x1e>
   1ed98:	683b      	ldr	r3, [r7, #0]
   1ed9a:	2b00      	cmp	r3, #0
   1ed9c:	d101      	bne.n	1eda2 <atcacert_date_dec_rfc5280_gen+0x22>
    {
        return ATCACERT_E_BAD_PARAMS;
   1ed9e:	2302      	movs	r3, #2
   1eda0:	e082      	b.n	1eea8 <atcacert_date_dec_rfc5280_gen+0x128>
    }

    memset(timestamp, 0, sizeof(*timestamp));
   1eda2:	683b      	ldr	r3, [r7, #0]
   1eda4:	2218      	movs	r2, #24
   1eda6:	2100      	movs	r1, #0
   1eda8:	0018      	movs	r0, r3
   1edaa:	f006 fcbe 	bl	2572a <memset>

    new_pos = str_to_int(cur_pos, 4, &timestamp->tm_year);
   1edae:	683b      	ldr	r3, [r7, #0]
   1edb0:	3314      	adds	r3, #20
   1edb2:	001a      	movs	r2, r3
   1edb4:	68fb      	ldr	r3, [r7, #12]
   1edb6:	2104      	movs	r1, #4
   1edb8:	0018      	movs	r0, r3
   1edba:	f7ff fc45 	bl	1e648 <str_to_int>
   1edbe:	0003      	movs	r3, r0
   1edc0:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1edc2:	68ba      	ldr	r2, [r7, #8]
   1edc4:	68fb      	ldr	r3, [r7, #12]
   1edc6:	429a      	cmp	r2, r3
   1edc8:	d101      	bne.n	1edce <atcacert_date_dec_rfc5280_gen+0x4e>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1edca:	2304      	movs	r3, #4
   1edcc:	e06c      	b.n	1eea8 <atcacert_date_dec_rfc5280_gen+0x128>
    }
    cur_pos = new_pos;
   1edce:	68bb      	ldr	r3, [r7, #8]
   1edd0:	60fb      	str	r3, [r7, #12]
    timestamp->tm_year -= 1900;
   1edd2:	683b      	ldr	r3, [r7, #0]
   1edd4:	695b      	ldr	r3, [r3, #20]
   1edd6:	4a36      	ldr	r2, [pc, #216]	; (1eeb0 <atcacert_date_dec_rfc5280_gen+0x130>)
   1edd8:	189a      	adds	r2, r3, r2
   1edda:	683b      	ldr	r3, [r7, #0]
   1eddc:	615a      	str	r2, [r3, #20]

    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_mon);
   1edde:	683b      	ldr	r3, [r7, #0]
   1ede0:	3310      	adds	r3, #16
   1ede2:	001a      	movs	r2, r3
   1ede4:	68fb      	ldr	r3, [r7, #12]
   1ede6:	2102      	movs	r1, #2
   1ede8:	0018      	movs	r0, r3
   1edea:	f7ff fc2d 	bl	1e648 <str_to_int>
   1edee:	0003      	movs	r3, r0
   1edf0:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1edf2:	68ba      	ldr	r2, [r7, #8]
   1edf4:	68fb      	ldr	r3, [r7, #12]
   1edf6:	429a      	cmp	r2, r3
   1edf8:	d101      	bne.n	1edfe <atcacert_date_dec_rfc5280_gen+0x7e>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1edfa:	2304      	movs	r3, #4
   1edfc:	e054      	b.n	1eea8 <atcacert_date_dec_rfc5280_gen+0x128>
    }
    cur_pos = new_pos;
   1edfe:	68bb      	ldr	r3, [r7, #8]
   1ee00:	60fb      	str	r3, [r7, #12]
    timestamp->tm_mon -= 1;
   1ee02:	683b      	ldr	r3, [r7, #0]
   1ee04:	691b      	ldr	r3, [r3, #16]
   1ee06:	1e5a      	subs	r2, r3, #1
   1ee08:	683b      	ldr	r3, [r7, #0]
   1ee0a:	611a      	str	r2, [r3, #16]

    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_mday);
   1ee0c:	683b      	ldr	r3, [r7, #0]
   1ee0e:	330c      	adds	r3, #12
   1ee10:	001a      	movs	r2, r3
   1ee12:	68fb      	ldr	r3, [r7, #12]
   1ee14:	2102      	movs	r1, #2
   1ee16:	0018      	movs	r0, r3
   1ee18:	f7ff fc16 	bl	1e648 <str_to_int>
   1ee1c:	0003      	movs	r3, r0
   1ee1e:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1ee20:	68ba      	ldr	r2, [r7, #8]
   1ee22:	68fb      	ldr	r3, [r7, #12]
   1ee24:	429a      	cmp	r2, r3
   1ee26:	d101      	bne.n	1ee2c <atcacert_date_dec_rfc5280_gen+0xac>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1ee28:	2304      	movs	r3, #4
   1ee2a:	e03d      	b.n	1eea8 <atcacert_date_dec_rfc5280_gen+0x128>
    }
    cur_pos = new_pos;
   1ee2c:	68bb      	ldr	r3, [r7, #8]
   1ee2e:	60fb      	str	r3, [r7, #12]

    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_hour);
   1ee30:	683b      	ldr	r3, [r7, #0]
   1ee32:	3308      	adds	r3, #8
   1ee34:	001a      	movs	r2, r3
   1ee36:	68fb      	ldr	r3, [r7, #12]
   1ee38:	2102      	movs	r1, #2
   1ee3a:	0018      	movs	r0, r3
   1ee3c:	f7ff fc04 	bl	1e648 <str_to_int>
   1ee40:	0003      	movs	r3, r0
   1ee42:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1ee44:	68ba      	ldr	r2, [r7, #8]
   1ee46:	68fb      	ldr	r3, [r7, #12]
   1ee48:	429a      	cmp	r2, r3
   1ee4a:	d101      	bne.n	1ee50 <atcacert_date_dec_rfc5280_gen+0xd0>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1ee4c:	2304      	movs	r3, #4
   1ee4e:	e02b      	b.n	1eea8 <atcacert_date_dec_rfc5280_gen+0x128>
    }
    cur_pos = new_pos;
   1ee50:	68bb      	ldr	r3, [r7, #8]
   1ee52:	60fb      	str	r3, [r7, #12]

    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_min);
   1ee54:	683b      	ldr	r3, [r7, #0]
   1ee56:	1d1a      	adds	r2, r3, #4
   1ee58:	68fb      	ldr	r3, [r7, #12]
   1ee5a:	2102      	movs	r1, #2
   1ee5c:	0018      	movs	r0, r3
   1ee5e:	f7ff fbf3 	bl	1e648 <str_to_int>
   1ee62:	0003      	movs	r3, r0
   1ee64:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1ee66:	68ba      	ldr	r2, [r7, #8]
   1ee68:	68fb      	ldr	r3, [r7, #12]
   1ee6a:	429a      	cmp	r2, r3
   1ee6c:	d101      	bne.n	1ee72 <atcacert_date_dec_rfc5280_gen+0xf2>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1ee6e:	2304      	movs	r3, #4
   1ee70:	e01a      	b.n	1eea8 <atcacert_date_dec_rfc5280_gen+0x128>
    }
    cur_pos = new_pos;
   1ee72:	68bb      	ldr	r3, [r7, #8]
   1ee74:	60fb      	str	r3, [r7, #12]

    new_pos = str_to_int(cur_pos, 2, &timestamp->tm_sec);
   1ee76:	683a      	ldr	r2, [r7, #0]
   1ee78:	68fb      	ldr	r3, [r7, #12]
   1ee7a:	2102      	movs	r1, #2
   1ee7c:	0018      	movs	r0, r3
   1ee7e:	f7ff fbe3 	bl	1e648 <str_to_int>
   1ee82:	0003      	movs	r3, r0
   1ee84:	60bb      	str	r3, [r7, #8]
    if (new_pos == cur_pos)
   1ee86:	68ba      	ldr	r2, [r7, #8]
   1ee88:	68fb      	ldr	r3, [r7, #12]
   1ee8a:	429a      	cmp	r2, r3
   1ee8c:	d101      	bne.n	1ee92 <atcacert_date_dec_rfc5280_gen+0x112>
    {
        return ATCACERT_E_DECODING_ERROR;  // There was a problem converting the string to a number
   1ee8e:	2304      	movs	r3, #4
   1ee90:	e00a      	b.n	1eea8 <atcacert_date_dec_rfc5280_gen+0x128>
    }
    cur_pos = new_pos;
   1ee92:	68bb      	ldr	r3, [r7, #8]
   1ee94:	60fb      	str	r3, [r7, #12]

    if (*(cur_pos++) != 'Z')
   1ee96:	68fb      	ldr	r3, [r7, #12]
   1ee98:	1c5a      	adds	r2, r3, #1
   1ee9a:	60fa      	str	r2, [r7, #12]
   1ee9c:	781b      	ldrb	r3, [r3, #0]
   1ee9e:	2b5a      	cmp	r3, #90	; 0x5a
   1eea0:	d001      	beq.n	1eea6 <atcacert_date_dec_rfc5280_gen+0x126>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unexpected UTC marker
   1eea2:	2304      	movs	r3, #4
   1eea4:	e000      	b.n	1eea8 <atcacert_date_dec_rfc5280_gen+0x128>

    }
    return ATCACERT_E_SUCCESS;
   1eea6:	2300      	movs	r3, #0
}
   1eea8:	0018      	movs	r0, r3
   1eeaa:	46bd      	mov	sp, r7
   1eeac:	b004      	add	sp, #16
   1eeae:	bd80      	pop	{r7, pc}
   1eeb0:	fffff894 	.word	0xfffff894

0001eeb4 <is_leap_year>:

static int is_leap_year(int year)
{
   1eeb4:	b580      	push	{r7, lr}
   1eeb6:	b082      	sub	sp, #8
   1eeb8:	af00      	add	r7, sp, #0
   1eeba:	6078      	str	r0, [r7, #4]
    return (year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0));
   1eebc:	687a      	ldr	r2, [r7, #4]
   1eebe:	23c8      	movs	r3, #200	; 0xc8
   1eec0:	0059      	lsls	r1, r3, #1
   1eec2:	0010      	movs	r0, r2
   1eec4:	f004 fc5a 	bl	2377c <__aeabi_idivmod>
   1eec8:	1e0b      	subs	r3, r1, #0
   1eeca:	d00a      	beq.n	1eee2 <is_leap_year+0x2e>
   1eecc:	687b      	ldr	r3, [r7, #4]
   1eece:	2203      	movs	r2, #3
   1eed0:	4013      	ands	r3, r2
   1eed2:	d108      	bne.n	1eee6 <is_leap_year+0x32>
   1eed4:	687b      	ldr	r3, [r7, #4]
   1eed6:	2164      	movs	r1, #100	; 0x64
   1eed8:	0018      	movs	r0, r3
   1eeda:	f004 fc4f 	bl	2377c <__aeabi_idivmod>
   1eede:	1e0b      	subs	r3, r1, #0
   1eee0:	d001      	beq.n	1eee6 <is_leap_year+0x32>
   1eee2:	2301      	movs	r3, #1
   1eee4:	e000      	b.n	1eee8 <is_leap_year+0x34>
   1eee6:	2300      	movs	r3, #0
}
   1eee8:	0018      	movs	r0, r3
   1eeea:	46bd      	mov	sp, r7
   1eeec:	b002      	add	sp, #8
   1eeee:	bd80      	pop	{r7, pc}

0001eef0 <get_year_secs>:

static uint32_t get_year_secs(int year)
{
   1eef0:	b580      	push	{r7, lr}
   1eef2:	b082      	sub	sp, #8
   1eef4:	af00      	add	r7, sp, #0
   1eef6:	6078      	str	r0, [r7, #4]
    if (is_leap_year(year))
   1eef8:	687b      	ldr	r3, [r7, #4]
   1eefa:	0018      	movs	r0, r3
   1eefc:	f7ff ffda 	bl	1eeb4 <is_leap_year>
   1ef00:	1e03      	subs	r3, r0, #0
   1ef02:	d001      	beq.n	1ef08 <get_year_secs+0x18>
    {
        return (31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + 31) * 86400;
   1ef04:	4b03      	ldr	r3, [pc, #12]	; (1ef14 <get_year_secs+0x24>)
   1ef06:	e000      	b.n	1ef0a <get_year_secs+0x1a>
    }
    else
    {
        return (31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + 31) * 86400;
   1ef08:	4b03      	ldr	r3, [pc, #12]	; (1ef18 <get_year_secs+0x28>)
    }
}
   1ef0a:	0018      	movs	r0, r3
   1ef0c:	46bd      	mov	sp, r7
   1ef0e:	b002      	add	sp, #8
   1ef10:	bd80      	pop	{r7, pc}
   1ef12:	46c0      	nop			; (mov r8, r8)
   1ef14:	01e28500 	.word	0x01e28500
   1ef18:	01e13380 	.word	0x01e13380

0001ef1c <get_month_secs>:

static uint32_t get_month_secs(int year, int mon)
{
   1ef1c:	b580      	push	{r7, lr}
   1ef1e:	b082      	sub	sp, #8
   1ef20:	af00      	add	r7, sp, #0
   1ef22:	6078      	str	r0, [r7, #4]
   1ef24:	6039      	str	r1, [r7, #0]
    static const uint32_t month_secs[] = { 2678400, 2419200, 2678400, 2592000, 2678400, 2592000, 2678400, 2678400, 2592000, 2678400, 2592000, 2678400 };

    if (mon == 1 && is_leap_year(year))
   1ef26:	683b      	ldr	r3, [r7, #0]
   1ef28:	2b01      	cmp	r3, #1
   1ef2a:	d107      	bne.n	1ef3c <get_month_secs+0x20>
   1ef2c:	687b      	ldr	r3, [r7, #4]
   1ef2e:	0018      	movs	r0, r3
   1ef30:	f7ff ffc0 	bl	1eeb4 <is_leap_year>
   1ef34:	1e03      	subs	r3, r0, #0
   1ef36:	d001      	beq.n	1ef3c <get_month_secs+0x20>
    {
        return 2505600;
   1ef38:	4b07      	ldr	r3, [pc, #28]	; (1ef58 <get_month_secs+0x3c>)
   1ef3a:	e008      	b.n	1ef4e <get_month_secs+0x32>
    }
    else if (mon < 12)
   1ef3c:	683b      	ldr	r3, [r7, #0]
   1ef3e:	2b0b      	cmp	r3, #11
   1ef40:	dc04      	bgt.n	1ef4c <get_month_secs+0x30>
    {
        return month_secs[mon];
   1ef42:	4b06      	ldr	r3, [pc, #24]	; (1ef5c <get_month_secs+0x40>)
   1ef44:	683a      	ldr	r2, [r7, #0]
   1ef46:	0092      	lsls	r2, r2, #2
   1ef48:	58d3      	ldr	r3, [r2, r3]
   1ef4a:	e000      	b.n	1ef4e <get_month_secs+0x32>
    }
    else
    {
        return 0;
   1ef4c:	2300      	movs	r3, #0
    }
}
   1ef4e:	0018      	movs	r0, r3
   1ef50:	46bd      	mov	sp, r7
   1ef52:	b002      	add	sp, #8
   1ef54:	bd80      	pop	{r7, pc}
   1ef56:	46c0      	nop			; (mov r8, r8)
   1ef58:	00263b80 	.word	0x00263b80
   1ef5c:	0002e63c 	.word	0x0002e63c

0001ef60 <atcacert_gmtime32>:

static atcacert_tm_utc_t *atcacert_gmtime32(const uint32_t *posix_time, atcacert_tm_utc_t *result)
{
   1ef60:	b590      	push	{r4, r7, lr}
   1ef62:	b085      	sub	sp, #20
   1ef64:	af00      	add	r7, sp, #0
   1ef66:	6078      	str	r0, [r7, #4]
   1ef68:	6039      	str	r1, [r7, #0]
    uint32_t secs_remaining = *posix_time;
   1ef6a:	687b      	ldr	r3, [r7, #4]
   1ef6c:	681b      	ldr	r3, [r3, #0]
   1ef6e:	60fb      	str	r3, [r7, #12]
    uint32_t secs = 0;
   1ef70:	2300      	movs	r3, #0
   1ef72:	60bb      	str	r3, [r7, #8]

    result->tm_year = 1970;
   1ef74:	683b      	ldr	r3, [r7, #0]
   1ef76:	4a50      	ldr	r2, [pc, #320]	; (1f0b8 <atcacert_gmtime32+0x158>)
   1ef78:	615a      	str	r2, [r3, #20]
    result->tm_mon = 0;
   1ef7a:	683b      	ldr	r3, [r7, #0]
   1ef7c:	2200      	movs	r2, #0
   1ef7e:	611a      	str	r2, [r3, #16]
    result->tm_mday = 1;
   1ef80:	683b      	ldr	r3, [r7, #0]
   1ef82:	2201      	movs	r2, #1
   1ef84:	60da      	str	r2, [r3, #12]
    result->tm_hour = 0;
   1ef86:	683b      	ldr	r3, [r7, #0]
   1ef88:	2200      	movs	r2, #0
   1ef8a:	609a      	str	r2, [r3, #8]
    result->tm_min = 0;
   1ef8c:	683b      	ldr	r3, [r7, #0]
   1ef8e:	2200      	movs	r2, #0
   1ef90:	605a      	str	r2, [r3, #4]
    result->tm_sec = 0;
   1ef92:	683b      	ldr	r3, [r7, #0]
   1ef94:	2200      	movs	r2, #0
   1ef96:	601a      	str	r2, [r3, #0]

    secs = get_year_secs(result->tm_year);
   1ef98:	683b      	ldr	r3, [r7, #0]
   1ef9a:	695b      	ldr	r3, [r3, #20]
   1ef9c:	0018      	movs	r0, r3
   1ef9e:	f7ff ffa7 	bl	1eef0 <get_year_secs>
   1efa2:	0003      	movs	r3, r0
   1efa4:	60bb      	str	r3, [r7, #8]
    while (secs_remaining >= secs)
   1efa6:	e00f      	b.n	1efc8 <atcacert_gmtime32+0x68>
    {
        result->tm_year++;
   1efa8:	683b      	ldr	r3, [r7, #0]
   1efaa:	695b      	ldr	r3, [r3, #20]
   1efac:	1c5a      	adds	r2, r3, #1
   1efae:	683b      	ldr	r3, [r7, #0]
   1efb0:	615a      	str	r2, [r3, #20]
        secs_remaining -= secs;
   1efb2:	68fa      	ldr	r2, [r7, #12]
   1efb4:	68bb      	ldr	r3, [r7, #8]
   1efb6:	1ad3      	subs	r3, r2, r3
   1efb8:	60fb      	str	r3, [r7, #12]
        secs = get_year_secs(result->tm_year);
   1efba:	683b      	ldr	r3, [r7, #0]
   1efbc:	695b      	ldr	r3, [r3, #20]
   1efbe:	0018      	movs	r0, r3
   1efc0:	f7ff ff96 	bl	1eef0 <get_year_secs>
   1efc4:	0003      	movs	r3, r0
   1efc6:	60bb      	str	r3, [r7, #8]
    result->tm_hour = 0;
    result->tm_min = 0;
    result->tm_sec = 0;

    secs = get_year_secs(result->tm_year);
    while (secs_remaining >= secs)
   1efc8:	68fa      	ldr	r2, [r7, #12]
   1efca:	68bb      	ldr	r3, [r7, #8]
   1efcc:	429a      	cmp	r2, r3
   1efce:	d2eb      	bcs.n	1efa8 <atcacert_gmtime32+0x48>
        result->tm_year++;
        secs_remaining -= secs;
        secs = get_year_secs(result->tm_year);
    }

    secs = get_month_secs(result->tm_year, result->tm_mon);
   1efd0:	683b      	ldr	r3, [r7, #0]
   1efd2:	695a      	ldr	r2, [r3, #20]
   1efd4:	683b      	ldr	r3, [r7, #0]
   1efd6:	691b      	ldr	r3, [r3, #16]
   1efd8:	0019      	movs	r1, r3
   1efda:	0010      	movs	r0, r2
   1efdc:	f7ff ff9e 	bl	1ef1c <get_month_secs>
   1efe0:	0003      	movs	r3, r0
   1efe2:	60bb      	str	r3, [r7, #8]
    while (secs_remaining >= secs)
   1efe4:	e012      	b.n	1f00c <atcacert_gmtime32+0xac>
    {
        result->tm_mon++;
   1efe6:	683b      	ldr	r3, [r7, #0]
   1efe8:	691b      	ldr	r3, [r3, #16]
   1efea:	1c5a      	adds	r2, r3, #1
   1efec:	683b      	ldr	r3, [r7, #0]
   1efee:	611a      	str	r2, [r3, #16]
        secs_remaining -= secs;
   1eff0:	68fa      	ldr	r2, [r7, #12]
   1eff2:	68bb      	ldr	r3, [r7, #8]
   1eff4:	1ad3      	subs	r3, r2, r3
   1eff6:	60fb      	str	r3, [r7, #12]
        secs = get_month_secs(result->tm_year, result->tm_mon);
   1eff8:	683b      	ldr	r3, [r7, #0]
   1effa:	695a      	ldr	r2, [r3, #20]
   1effc:	683b      	ldr	r3, [r7, #0]
   1effe:	691b      	ldr	r3, [r3, #16]
   1f000:	0019      	movs	r1, r3
   1f002:	0010      	movs	r0, r2
   1f004:	f7ff ff8a 	bl	1ef1c <get_month_secs>
   1f008:	0003      	movs	r3, r0
   1f00a:	60bb      	str	r3, [r7, #8]
        secs_remaining -= secs;
        secs = get_year_secs(result->tm_year);
    }

    secs = get_month_secs(result->tm_year, result->tm_mon);
    while (secs_remaining >= secs)
   1f00c:	68fa      	ldr	r2, [r7, #12]
   1f00e:	68bb      	ldr	r3, [r7, #8]
   1f010:	429a      	cmp	r2, r3
   1f012:	d2e8      	bcs.n	1efe6 <atcacert_gmtime32+0x86>
        result->tm_mon++;
        secs_remaining -= secs;
        secs = get_month_secs(result->tm_year, result->tm_mon);
    }

    result->tm_year -= 1900;
   1f014:	683b      	ldr	r3, [r7, #0]
   1f016:	695b      	ldr	r3, [r3, #20]
   1f018:	4a28      	ldr	r2, [pc, #160]	; (1f0bc <atcacert_gmtime32+0x15c>)
   1f01a:	189a      	adds	r2, r3, r2
   1f01c:	683b      	ldr	r3, [r7, #0]
   1f01e:	615a      	str	r2, [r3, #20]

    result->tm_mday += secs_remaining / 86400;
   1f020:	683b      	ldr	r3, [r7, #0]
   1f022:	68db      	ldr	r3, [r3, #12]
   1f024:	001c      	movs	r4, r3
   1f026:	68fb      	ldr	r3, [r7, #12]
   1f028:	4925      	ldr	r1, [pc, #148]	; (1f0c0 <atcacert_gmtime32+0x160>)
   1f02a:	0018      	movs	r0, r3
   1f02c:	f004 fa36 	bl	2349c <__aeabi_uidiv>
   1f030:	0003      	movs	r3, r0
   1f032:	18e3      	adds	r3, r4, r3
   1f034:	001a      	movs	r2, r3
   1f036:	683b      	ldr	r3, [r7, #0]
   1f038:	60da      	str	r2, [r3, #12]
    secs_remaining %= 86400;
   1f03a:	68fb      	ldr	r3, [r7, #12]
   1f03c:	4920      	ldr	r1, [pc, #128]	; (1f0c0 <atcacert_gmtime32+0x160>)
   1f03e:	0018      	movs	r0, r3
   1f040:	f004 fab2 	bl	235a8 <__aeabi_uidivmod>
   1f044:	000b      	movs	r3, r1
   1f046:	60fb      	str	r3, [r7, #12]

    result->tm_hour += secs_remaining / 3600;
   1f048:	683b      	ldr	r3, [r7, #0]
   1f04a:	689b      	ldr	r3, [r3, #8]
   1f04c:	001c      	movs	r4, r3
   1f04e:	68fa      	ldr	r2, [r7, #12]
   1f050:	23e1      	movs	r3, #225	; 0xe1
   1f052:	0119      	lsls	r1, r3, #4
   1f054:	0010      	movs	r0, r2
   1f056:	f004 fa21 	bl	2349c <__aeabi_uidiv>
   1f05a:	0003      	movs	r3, r0
   1f05c:	18e3      	adds	r3, r4, r3
   1f05e:	001a      	movs	r2, r3
   1f060:	683b      	ldr	r3, [r7, #0]
   1f062:	609a      	str	r2, [r3, #8]
    secs_remaining %= 3600;
   1f064:	68fa      	ldr	r2, [r7, #12]
   1f066:	23e1      	movs	r3, #225	; 0xe1
   1f068:	0119      	lsls	r1, r3, #4
   1f06a:	0010      	movs	r0, r2
   1f06c:	f004 fa9c 	bl	235a8 <__aeabi_uidivmod>
   1f070:	000b      	movs	r3, r1
   1f072:	60fb      	str	r3, [r7, #12]

    result->tm_min += secs_remaining / 60;
   1f074:	683b      	ldr	r3, [r7, #0]
   1f076:	685b      	ldr	r3, [r3, #4]
   1f078:	001c      	movs	r4, r3
   1f07a:	68fb      	ldr	r3, [r7, #12]
   1f07c:	213c      	movs	r1, #60	; 0x3c
   1f07e:	0018      	movs	r0, r3
   1f080:	f004 fa0c 	bl	2349c <__aeabi_uidiv>
   1f084:	0003      	movs	r3, r0
   1f086:	18e3      	adds	r3, r4, r3
   1f088:	001a      	movs	r2, r3
   1f08a:	683b      	ldr	r3, [r7, #0]
   1f08c:	605a      	str	r2, [r3, #4]
    secs_remaining %= 60;
   1f08e:	68fb      	ldr	r3, [r7, #12]
   1f090:	213c      	movs	r1, #60	; 0x3c
   1f092:	0018      	movs	r0, r3
   1f094:	f004 fa88 	bl	235a8 <__aeabi_uidivmod>
   1f098:	000b      	movs	r3, r1
   1f09a:	60fb      	str	r3, [r7, #12]

    result->tm_sec += secs_remaining;
   1f09c:	683b      	ldr	r3, [r7, #0]
   1f09e:	681b      	ldr	r3, [r3, #0]
   1f0a0:	001a      	movs	r2, r3
   1f0a2:	68fb      	ldr	r3, [r7, #12]
   1f0a4:	18d3      	adds	r3, r2, r3
   1f0a6:	001a      	movs	r2, r3
   1f0a8:	683b      	ldr	r3, [r7, #0]
   1f0aa:	601a      	str	r2, [r3, #0]

    return result;
   1f0ac:	683b      	ldr	r3, [r7, #0]
}
   1f0ae:	0018      	movs	r0, r3
   1f0b0:	46bd      	mov	sp, r7
   1f0b2:	b005      	add	sp, #20
   1f0b4:	bd90      	pop	{r4, r7, pc}
   1f0b6:	46c0      	nop			; (mov r8, r8)
   1f0b8:	000007b2 	.word	0x000007b2
   1f0bc:	fffff894 	.word	0xfffff894
   1f0c0:	00015180 	.word	0x00015180

0001f0c4 <atcacert_mkgmtime32>:

static uint32_t atcacert_mkgmtime32(const atcacert_tm_utc_t *timeptr)
{
   1f0c4:	b580      	push	{r7, lr}
   1f0c6:	b086      	sub	sp, #24
   1f0c8:	af00      	add	r7, sp, #0
   1f0ca:	6078      	str	r0, [r7, #4]
    uint32_t posix_time = 0;
   1f0cc:	2300      	movs	r3, #0
   1f0ce:	617b      	str	r3, [r7, #20]
    int cur_value = 0;
   1f0d0:	2300      	movs	r3, #0
   1f0d2:	613b      	str	r3, [r7, #16]
    int year = timeptr->tm_year + 1900;
   1f0d4:	687b      	ldr	r3, [r7, #4]
   1f0d6:	695b      	ldr	r3, [r3, #20]
   1f0d8:	4a28      	ldr	r2, [pc, #160]	; (1f17c <atcacert_mkgmtime32+0xb8>)
   1f0da:	4694      	mov	ip, r2
   1f0dc:	4463      	add	r3, ip
   1f0de:	60fb      	str	r3, [r7, #12]

    cur_value = year - 1;
   1f0e0:	68fb      	ldr	r3, [r7, #12]
   1f0e2:	3b01      	subs	r3, #1
   1f0e4:	613b      	str	r3, [r7, #16]
    while (cur_value >= 1970)
   1f0e6:	e009      	b.n	1f0fc <atcacert_mkgmtime32+0x38>
    {
        posix_time += get_year_secs(cur_value--);
   1f0e8:	693b      	ldr	r3, [r7, #16]
   1f0ea:	1e5a      	subs	r2, r3, #1
   1f0ec:	613a      	str	r2, [r7, #16]
   1f0ee:	0018      	movs	r0, r3
   1f0f0:	f7ff fefe 	bl	1eef0 <get_year_secs>
   1f0f4:	0002      	movs	r2, r0
   1f0f6:	697b      	ldr	r3, [r7, #20]
   1f0f8:	189b      	adds	r3, r3, r2
   1f0fa:	617b      	str	r3, [r7, #20]
    uint32_t posix_time = 0;
    int cur_value = 0;
    int year = timeptr->tm_year + 1900;

    cur_value = year - 1;
    while (cur_value >= 1970)
   1f0fc:	693b      	ldr	r3, [r7, #16]
   1f0fe:	4a20      	ldr	r2, [pc, #128]	; (1f180 <atcacert_mkgmtime32+0xbc>)
   1f100:	4293      	cmp	r3, r2
   1f102:	dcf1      	bgt.n	1f0e8 <atcacert_mkgmtime32+0x24>
    {
        posix_time += get_year_secs(cur_value--);
    }

    cur_value = timeptr->tm_mon - 1;
   1f104:	687b      	ldr	r3, [r7, #4]
   1f106:	691b      	ldr	r3, [r3, #16]
   1f108:	3b01      	subs	r3, #1
   1f10a:	613b      	str	r3, [r7, #16]
    while (cur_value >= 0)
   1f10c:	e00b      	b.n	1f126 <atcacert_mkgmtime32+0x62>
    {
        posix_time += get_month_secs(year, cur_value--);
   1f10e:	693b      	ldr	r3, [r7, #16]
   1f110:	1e5a      	subs	r2, r3, #1
   1f112:	613a      	str	r2, [r7, #16]
   1f114:	68fa      	ldr	r2, [r7, #12]
   1f116:	0019      	movs	r1, r3
   1f118:	0010      	movs	r0, r2
   1f11a:	f7ff feff 	bl	1ef1c <get_month_secs>
   1f11e:	0002      	movs	r2, r0
   1f120:	697b      	ldr	r3, [r7, #20]
   1f122:	189b      	adds	r3, r3, r2
   1f124:	617b      	str	r3, [r7, #20]
    {
        posix_time += get_year_secs(cur_value--);
    }

    cur_value = timeptr->tm_mon - 1;
    while (cur_value >= 0)
   1f126:	693b      	ldr	r3, [r7, #16]
   1f128:	2b00      	cmp	r3, #0
   1f12a:	daf0      	bge.n	1f10e <atcacert_mkgmtime32+0x4a>
    {
        posix_time += get_month_secs(year, cur_value--);
    }

    posix_time += (uint32_t)(timeptr->tm_mday - 1) * 86400;
   1f12c:	687b      	ldr	r3, [r7, #4]
   1f12e:	68db      	ldr	r3, [r3, #12]
   1f130:	3b01      	subs	r3, #1
   1f132:	001a      	movs	r2, r3
   1f134:	4b13      	ldr	r3, [pc, #76]	; (1f184 <atcacert_mkgmtime32+0xc0>)
   1f136:	4353      	muls	r3, r2
   1f138:	697a      	ldr	r2, [r7, #20]
   1f13a:	18d3      	adds	r3, r2, r3
   1f13c:	617b      	str	r3, [r7, #20]
    posix_time += (uint32_t)timeptr->tm_hour * 3600;
   1f13e:	687b      	ldr	r3, [r7, #4]
   1f140:	689b      	ldr	r3, [r3, #8]
   1f142:	001a      	movs	r2, r3
   1f144:	23e1      	movs	r3, #225	; 0xe1
   1f146:	011b      	lsls	r3, r3, #4
   1f148:	4353      	muls	r3, r2
   1f14a:	697a      	ldr	r2, [r7, #20]
   1f14c:	18d3      	adds	r3, r2, r3
   1f14e:	617b      	str	r3, [r7, #20]
    posix_time += (uint32_t)timeptr->tm_min * 60;
   1f150:	687b      	ldr	r3, [r7, #4]
   1f152:	685b      	ldr	r3, [r3, #4]
   1f154:	001a      	movs	r2, r3
   1f156:	0013      	movs	r3, r2
   1f158:	011b      	lsls	r3, r3, #4
   1f15a:	1a9b      	subs	r3, r3, r2
   1f15c:	009b      	lsls	r3, r3, #2
   1f15e:	001a      	movs	r2, r3
   1f160:	697b      	ldr	r3, [r7, #20]
   1f162:	189b      	adds	r3, r3, r2
   1f164:	617b      	str	r3, [r7, #20]
    posix_time += (uint32_t)timeptr->tm_sec;
   1f166:	687b      	ldr	r3, [r7, #4]
   1f168:	681b      	ldr	r3, [r3, #0]
   1f16a:	001a      	movs	r2, r3
   1f16c:	697b      	ldr	r3, [r7, #20]
   1f16e:	189b      	adds	r3, r3, r2
   1f170:	617b      	str	r3, [r7, #20]

    return posix_time;
   1f172:	697b      	ldr	r3, [r7, #20]
}
   1f174:	0018      	movs	r0, r3
   1f176:	46bd      	mov	sp, r7
   1f178:	b006      	add	sp, #24
   1f17a:	bd80      	pop	{r7, pc}
   1f17c:	0000076c 	.word	0x0000076c
   1f180:	000007b1 	.word	0x000007b1
   1f184:	00015180 	.word	0x00015180

0001f188 <atcacert_date_enc_posix_uint32>:

static int atcacert_date_enc_posix_uint32(const atcacert_tm_utc_t* timestamp, uint32_t* posix_uint32)
{
   1f188:	b580      	push	{r7, lr}
   1f18a:	b084      	sub	sp, #16
   1f18c:	af00      	add	r7, sp, #0
   1f18e:	6078      	str	r0, [r7, #4]
   1f190:	6039      	str	r1, [r7, #0]
    //atcacert_tm_utc_t timestamp_nc;
    //time_t posix_time = 0;
    int year = 0;
   1f192:	2300      	movs	r3, #0
   1f194:	60fb      	str	r3, [r7, #12]

    if (timestamp == NULL || posix_uint32 == NULL)
   1f196:	687b      	ldr	r3, [r7, #4]
   1f198:	2b00      	cmp	r3, #0
   1f19a:	d002      	beq.n	1f1a2 <atcacert_date_enc_posix_uint32+0x1a>
   1f19c:	683b      	ldr	r3, [r7, #0]
   1f19e:	2b00      	cmp	r3, #0
   1f1a0:	d101      	bne.n	1f1a6 <atcacert_date_enc_posix_uint32+0x1e>
    {
        return ATCACERT_E_BAD_PARAMS;
   1f1a2:	2302      	movs	r3, #2
   1f1a4:	e07b      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
    }

    year = timestamp->tm_year + 1900;
   1f1a6:	687b      	ldr	r3, [r7, #4]
   1f1a8:	695b      	ldr	r3, [r3, #20]
   1f1aa:	4a3f      	ldr	r2, [pc, #252]	; (1f2a8 <atcacert_date_enc_posix_uint32+0x120>)
   1f1ac:	4694      	mov	ip, r2
   1f1ae:	4463      	add	r3, ip
   1f1b0:	60fb      	str	r3, [r7, #12]

    if (year > 2106 || year < 1970)
   1f1b2:	68fb      	ldr	r3, [r7, #12]
   1f1b4:	4a3d      	ldr	r2, [pc, #244]	; (1f2ac <atcacert_date_enc_posix_uint32+0x124>)
   1f1b6:	4293      	cmp	r3, r2
   1f1b8:	dc03      	bgt.n	1f1c2 <atcacert_date_enc_posix_uint32+0x3a>
   1f1ba:	68fb      	ldr	r3, [r7, #12]
   1f1bc:	4a3c      	ldr	r2, [pc, #240]	; (1f2b0 <atcacert_date_enc_posix_uint32+0x128>)
   1f1be:	4293      	cmp	r3, r2
   1f1c0:	dc01      	bgt.n	1f1c6 <atcacert_date_enc_posix_uint32+0x3e>
    {
        return ATCACERT_E_INVALID_DATE;  //Timestamp out of range for POSIX time.
   1f1c2:	2305      	movs	r3, #5
   1f1c4:	e06b      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
    }
    if (timestamp->tm_mon < 0 || timestamp->tm_mon > 11)
   1f1c6:	687b      	ldr	r3, [r7, #4]
   1f1c8:	691b      	ldr	r3, [r3, #16]
   1f1ca:	2b00      	cmp	r3, #0
   1f1cc:	db03      	blt.n	1f1d6 <atcacert_date_enc_posix_uint32+0x4e>
   1f1ce:	687b      	ldr	r3, [r7, #4]
   1f1d0:	691b      	ldr	r3, [r3, #16]
   1f1d2:	2b0b      	cmp	r3, #11
   1f1d4:	dd01      	ble.n	1f1da <atcacert_date_enc_posix_uint32+0x52>
    {
        return ATCACERT_E_INVALID_DATE;
   1f1d6:	2305      	movs	r3, #5
   1f1d8:	e061      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
    }
    if (timestamp->tm_mday < 1 || timestamp->tm_mday > 31)
   1f1da:	687b      	ldr	r3, [r7, #4]
   1f1dc:	68db      	ldr	r3, [r3, #12]
   1f1de:	2b00      	cmp	r3, #0
   1f1e0:	dd03      	ble.n	1f1ea <atcacert_date_enc_posix_uint32+0x62>
   1f1e2:	687b      	ldr	r3, [r7, #4]
   1f1e4:	68db      	ldr	r3, [r3, #12]
   1f1e6:	2b1f      	cmp	r3, #31
   1f1e8:	dd01      	ble.n	1f1ee <atcacert_date_enc_posix_uint32+0x66>
    {
        return ATCACERT_E_INVALID_DATE;
   1f1ea:	2305      	movs	r3, #5
   1f1ec:	e057      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
    }
    if (timestamp->tm_hour < 0 || timestamp->tm_hour > 23)
   1f1ee:	687b      	ldr	r3, [r7, #4]
   1f1f0:	689b      	ldr	r3, [r3, #8]
   1f1f2:	2b00      	cmp	r3, #0
   1f1f4:	db03      	blt.n	1f1fe <atcacert_date_enc_posix_uint32+0x76>
   1f1f6:	687b      	ldr	r3, [r7, #4]
   1f1f8:	689b      	ldr	r3, [r3, #8]
   1f1fa:	2b17      	cmp	r3, #23
   1f1fc:	dd01      	ble.n	1f202 <atcacert_date_enc_posix_uint32+0x7a>
    {
        return ATCACERT_E_INVALID_DATE;
   1f1fe:	2305      	movs	r3, #5
   1f200:	e04d      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
    }
    if (timestamp->tm_min < 0 || timestamp->tm_min > 59)
   1f202:	687b      	ldr	r3, [r7, #4]
   1f204:	685b      	ldr	r3, [r3, #4]
   1f206:	2b00      	cmp	r3, #0
   1f208:	db03      	blt.n	1f212 <atcacert_date_enc_posix_uint32+0x8a>
   1f20a:	687b      	ldr	r3, [r7, #4]
   1f20c:	685b      	ldr	r3, [r3, #4]
   1f20e:	2b3b      	cmp	r3, #59	; 0x3b
   1f210:	dd01      	ble.n	1f216 <atcacert_date_enc_posix_uint32+0x8e>
    {
        return ATCACERT_E_INVALID_DATE;
   1f212:	2305      	movs	r3, #5
   1f214:	e043      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
    }
    if (timestamp->tm_sec < 0 || timestamp->tm_sec > 59)
   1f216:	687b      	ldr	r3, [r7, #4]
   1f218:	681b      	ldr	r3, [r3, #0]
   1f21a:	2b00      	cmp	r3, #0
   1f21c:	db03      	blt.n	1f226 <atcacert_date_enc_posix_uint32+0x9e>
   1f21e:	687b      	ldr	r3, [r7, #4]
   1f220:	681b      	ldr	r3, [r3, #0]
   1f222:	2b3b      	cmp	r3, #59	; 0x3b
   1f224:	dd01      	ble.n	1f22a <atcacert_date_enc_posix_uint32+0xa2>
    {
        return ATCACERT_E_INVALID_DATE;
   1f226:	2305      	movs	r3, #5
   1f228:	e039      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
    }
    // Check for date past max date for POSIX time
    if (year == 2106)
   1f22a:	68fb      	ldr	r3, [r7, #12]
   1f22c:	4a1f      	ldr	r2, [pc, #124]	; (1f2ac <atcacert_date_enc_posix_uint32+0x124>)
   1f22e:	4293      	cmp	r3, r2
   1f230:	d12d      	bne.n	1f28e <atcacert_date_enc_posix_uint32+0x106>
    {
        if (timestamp->tm_mon > 1)
   1f232:	687b      	ldr	r3, [r7, #4]
   1f234:	691b      	ldr	r3, [r3, #16]
   1f236:	2b01      	cmp	r3, #1
   1f238:	dd01      	ble.n	1f23e <atcacert_date_enc_posix_uint32+0xb6>
        {
            return ATCACERT_E_INVALID_DATE;
   1f23a:	2305      	movs	r3, #5
   1f23c:	e02f      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
        }
        if (timestamp->tm_mon == 1)
   1f23e:	687b      	ldr	r3, [r7, #4]
   1f240:	691b      	ldr	r3, [r3, #16]
   1f242:	2b01      	cmp	r3, #1
   1f244:	d123      	bne.n	1f28e <atcacert_date_enc_posix_uint32+0x106>
        {
            if (timestamp->tm_mday > 7)
   1f246:	687b      	ldr	r3, [r7, #4]
   1f248:	68db      	ldr	r3, [r3, #12]
   1f24a:	2b07      	cmp	r3, #7
   1f24c:	dd01      	ble.n	1f252 <atcacert_date_enc_posix_uint32+0xca>
            {
                return ATCACERT_E_INVALID_DATE;
   1f24e:	2305      	movs	r3, #5
   1f250:	e025      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
            }
            if (timestamp->tm_mday == 7)
   1f252:	687b      	ldr	r3, [r7, #4]
   1f254:	68db      	ldr	r3, [r3, #12]
   1f256:	2b07      	cmp	r3, #7
   1f258:	d119      	bne.n	1f28e <atcacert_date_enc_posix_uint32+0x106>
            {
                if (timestamp->tm_hour > 6)
   1f25a:	687b      	ldr	r3, [r7, #4]
   1f25c:	689b      	ldr	r3, [r3, #8]
   1f25e:	2b06      	cmp	r3, #6
   1f260:	dd01      	ble.n	1f266 <atcacert_date_enc_posix_uint32+0xde>
                {
                    return ATCACERT_E_INVALID_DATE;
   1f262:	2305      	movs	r3, #5
   1f264:	e01b      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
                }
                if (timestamp->tm_hour == 6)
   1f266:	687b      	ldr	r3, [r7, #4]
   1f268:	689b      	ldr	r3, [r3, #8]
   1f26a:	2b06      	cmp	r3, #6
   1f26c:	d10f      	bne.n	1f28e <atcacert_date_enc_posix_uint32+0x106>
                {
                    if (timestamp->tm_min > 28)
   1f26e:	687b      	ldr	r3, [r7, #4]
   1f270:	685b      	ldr	r3, [r3, #4]
   1f272:	2b1c      	cmp	r3, #28
   1f274:	dd01      	ble.n	1f27a <atcacert_date_enc_posix_uint32+0xf2>
                    {
                        return ATCACERT_E_INVALID_DATE;
   1f276:	2305      	movs	r3, #5
   1f278:	e011      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
                    }
                    if (timestamp->tm_min == 28)
   1f27a:	687b      	ldr	r3, [r7, #4]
   1f27c:	685b      	ldr	r3, [r3, #4]
   1f27e:	2b1c      	cmp	r3, #28
   1f280:	d105      	bne.n	1f28e <atcacert_date_enc_posix_uint32+0x106>
                    {
                        if (timestamp->tm_sec > 14)
   1f282:	687b      	ldr	r3, [r7, #4]
   1f284:	681b      	ldr	r3, [r3, #0]
   1f286:	2b0e      	cmp	r3, #14
   1f288:	dd01      	ble.n	1f28e <atcacert_date_enc_posix_uint32+0x106>
                        {
                            return ATCACERT_E_INVALID_DATE;
   1f28a:	2305      	movs	r3, #5
   1f28c:	e007      	b.n	1f29e <atcacert_date_enc_posix_uint32+0x116>
//		return ATCACERT_E_INVALID_DATE;
//#endif
//
//	*posix_uint32 = (uint32_t)posix_time;

    *posix_uint32 = atcacert_mkgmtime32(timestamp);
   1f28e:	687b      	ldr	r3, [r7, #4]
   1f290:	0018      	movs	r0, r3
   1f292:	f7ff ff17 	bl	1f0c4 <atcacert_mkgmtime32>
   1f296:	0002      	movs	r2, r0
   1f298:	683b      	ldr	r3, [r7, #0]
   1f29a:	601a      	str	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
   1f29c:	2300      	movs	r3, #0
}
   1f29e:	0018      	movs	r0, r3
   1f2a0:	46bd      	mov	sp, r7
   1f2a2:	b004      	add	sp, #16
   1f2a4:	bd80      	pop	{r7, pc}
   1f2a6:	46c0      	nop			; (mov r8, r8)
   1f2a8:	0000076c 	.word	0x0000076c
   1f2ac:	0000083a 	.word	0x0000083a
   1f2b0:	000007b1 	.word	0x000007b1

0001f2b4 <atcacert_date_enc_posix_uint32_be>:

int atcacert_date_enc_posix_uint32_be(const atcacert_tm_utc_t* timestamp,
                                      uint8_t                  formatted_date[DATEFMT_POSIX_UINT32_BE_SIZE])
{
   1f2b4:	b580      	push	{r7, lr}
   1f2b6:	b084      	sub	sp, #16
   1f2b8:	af00      	add	r7, sp, #0
   1f2ba:	6078      	str	r0, [r7, #4]
   1f2bc:	6039      	str	r1, [r7, #0]
    uint32_t posix_uint32 = 0;
   1f2be:	2300      	movs	r3, #0
   1f2c0:	60bb      	str	r3, [r7, #8]
    int ret = 0;
   1f2c2:	2300      	movs	r3, #0
   1f2c4:	60fb      	str	r3, [r7, #12]

    if (timestamp == NULL || formatted_date == NULL)
   1f2c6:	687b      	ldr	r3, [r7, #4]
   1f2c8:	2b00      	cmp	r3, #0
   1f2ca:	d002      	beq.n	1f2d2 <atcacert_date_enc_posix_uint32_be+0x1e>
   1f2cc:	683b      	ldr	r3, [r7, #0]
   1f2ce:	2b00      	cmp	r3, #0
   1f2d0:	d101      	bne.n	1f2d6 <atcacert_date_enc_posix_uint32_be+0x22>
    {
        return ATCACERT_E_BAD_PARAMS;
   1f2d2:	2302      	movs	r3, #2
   1f2d4:	e024      	b.n	1f320 <atcacert_date_enc_posix_uint32_be+0x6c>
    }

    ret = atcacert_date_enc_posix_uint32(timestamp, &posix_uint32);
   1f2d6:	2308      	movs	r3, #8
   1f2d8:	18fa      	adds	r2, r7, r3
   1f2da:	687b      	ldr	r3, [r7, #4]
   1f2dc:	0011      	movs	r1, r2
   1f2de:	0018      	movs	r0, r3
   1f2e0:	f7ff ff52 	bl	1f188 <atcacert_date_enc_posix_uint32>
   1f2e4:	0003      	movs	r3, r0
   1f2e6:	60fb      	str	r3, [r7, #12]
    if (ret != ATCACERT_E_SUCCESS)
   1f2e8:	68fb      	ldr	r3, [r7, #12]
   1f2ea:	2b00      	cmp	r3, #0
   1f2ec:	d001      	beq.n	1f2f2 <atcacert_date_enc_posix_uint32_be+0x3e>
    {
        return ret;
   1f2ee:	68fb      	ldr	r3, [r7, #12]
   1f2f0:	e016      	b.n	1f320 <atcacert_date_enc_posix_uint32_be+0x6c>
    }

    formatted_date[0] = (uint8_t)((posix_uint32 >> 24) & 0xFF);
   1f2f2:	68bb      	ldr	r3, [r7, #8]
   1f2f4:	0e1b      	lsrs	r3, r3, #24
   1f2f6:	b2da      	uxtb	r2, r3
   1f2f8:	683b      	ldr	r3, [r7, #0]
   1f2fa:	701a      	strb	r2, [r3, #0]
    formatted_date[1] = (uint8_t)((posix_uint32 >> 16) & 0xFF);
   1f2fc:	683b      	ldr	r3, [r7, #0]
   1f2fe:	3301      	adds	r3, #1
   1f300:	68ba      	ldr	r2, [r7, #8]
   1f302:	0c12      	lsrs	r2, r2, #16
   1f304:	b2d2      	uxtb	r2, r2
   1f306:	701a      	strb	r2, [r3, #0]
    formatted_date[2] = (uint8_t)((posix_uint32 >> 8) & 0xFF);
   1f308:	683b      	ldr	r3, [r7, #0]
   1f30a:	3302      	adds	r3, #2
   1f30c:	68ba      	ldr	r2, [r7, #8]
   1f30e:	0a12      	lsrs	r2, r2, #8
   1f310:	b2d2      	uxtb	r2, r2
   1f312:	701a      	strb	r2, [r3, #0]
    formatted_date[3] = (uint8_t)((posix_uint32 >> 0) & 0xFF);
   1f314:	683b      	ldr	r3, [r7, #0]
   1f316:	3303      	adds	r3, #3
   1f318:	68ba      	ldr	r2, [r7, #8]
   1f31a:	b2d2      	uxtb	r2, r2
   1f31c:	701a      	strb	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
   1f31e:	2300      	movs	r3, #0
}
   1f320:	0018      	movs	r0, r3
   1f322:	46bd      	mov	sp, r7
   1f324:	b004      	add	sp, #16
   1f326:	bd80      	pop	{r7, pc}

0001f328 <atcacert_date_dec_posix_uint32>:

static int atcacert_date_dec_posix_uint32(uint32_t           posix_uint32,
                                          atcacert_tm_utc_t* timestamp)
{
   1f328:	b580      	push	{r7, lr}
   1f32a:	b082      	sub	sp, #8
   1f32c:	af00      	add	r7, sp, #0
   1f32e:	6078      	str	r0, [r7, #4]
   1f330:	6039      	str	r1, [r7, #0]
//	memset(timestamp, 0, sizeof(*timestamp));
//	ret = gmtime_r(&posix_time, timestamp);
//	if (ret == NULL)
//		return ATCACERT_E_DECODING_ERROR; // Failed to convert to timestamp structure
//#endif
    atcacert_gmtime32(&posix_uint32, timestamp);
   1f332:	683a      	ldr	r2, [r7, #0]
   1f334:	1d3b      	adds	r3, r7, #4
   1f336:	0011      	movs	r1, r2
   1f338:	0018      	movs	r0, r3
   1f33a:	f7ff fe11 	bl	1ef60 <atcacert_gmtime32>

    return ATCACERT_E_SUCCESS;
   1f33e:	2300      	movs	r3, #0
}
   1f340:	0018      	movs	r0, r3
   1f342:	46bd      	mov	sp, r7
   1f344:	b002      	add	sp, #8
   1f346:	bd80      	pop	{r7, pc}

0001f348 <atcacert_date_dec_posix_uint32_be>:

int atcacert_date_dec_posix_uint32_be(const uint8_t      formatted_date[DATEFMT_POSIX_UINT32_BE_SIZE],
                                      atcacert_tm_utc_t* timestamp)
{
   1f348:	b580      	push	{r7, lr}
   1f34a:	b084      	sub	sp, #16
   1f34c:	af00      	add	r7, sp, #0
   1f34e:	6078      	str	r0, [r7, #4]
   1f350:	6039      	str	r1, [r7, #0]
    uint32_t posix_uint32 = 0;
   1f352:	2300      	movs	r3, #0
   1f354:	60fb      	str	r3, [r7, #12]

    if (formatted_date == NULL || timestamp == NULL)
   1f356:	687b      	ldr	r3, [r7, #4]
   1f358:	2b00      	cmp	r3, #0
   1f35a:	d002      	beq.n	1f362 <atcacert_date_dec_posix_uint32_be+0x1a>
   1f35c:	683b      	ldr	r3, [r7, #0]
   1f35e:	2b00      	cmp	r3, #0
   1f360:	d101      	bne.n	1f366 <atcacert_date_dec_posix_uint32_be+0x1e>
    {
        return ATCACERT_E_BAD_PARAMS;
   1f362:	2302      	movs	r3, #2
   1f364:	e018      	b.n	1f398 <atcacert_date_dec_posix_uint32_be+0x50>
    }

    posix_uint32 =
        ((uint32_t)formatted_date[0] << 24) |
   1f366:	687b      	ldr	r3, [r7, #4]
   1f368:	781b      	ldrb	r3, [r3, #0]
   1f36a:	061a      	lsls	r2, r3, #24
        ((uint32_t)formatted_date[1] << 16) |
   1f36c:	687b      	ldr	r3, [r7, #4]
   1f36e:	3301      	adds	r3, #1
   1f370:	781b      	ldrb	r3, [r3, #0]
   1f372:	041b      	lsls	r3, r3, #16
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    posix_uint32 =
        ((uint32_t)formatted_date[0] << 24) |
   1f374:	431a      	orrs	r2, r3
        ((uint32_t)formatted_date[1] << 16) |
        ((uint32_t)formatted_date[2] << 8) |
   1f376:	687b      	ldr	r3, [r7, #4]
   1f378:	3302      	adds	r3, #2
   1f37a:	781b      	ldrb	r3, [r3, #0]
   1f37c:	021b      	lsls	r3, r3, #8
        return ATCACERT_E_BAD_PARAMS;
    }

    posix_uint32 =
        ((uint32_t)formatted_date[0] << 24) |
        ((uint32_t)formatted_date[1] << 16) |
   1f37e:	4313      	orrs	r3, r2
        ((uint32_t)formatted_date[2] << 8) |
        ((uint32_t)formatted_date[3]);
   1f380:	687a      	ldr	r2, [r7, #4]
   1f382:	3203      	adds	r2, #3
   1f384:	7812      	ldrb	r2, [r2, #0]
    if (formatted_date == NULL || timestamp == NULL)
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    posix_uint32 =
   1f386:	4313      	orrs	r3, r2
   1f388:	60fb      	str	r3, [r7, #12]
        ((uint32_t)formatted_date[0] << 24) |
        ((uint32_t)formatted_date[1] << 16) |
        ((uint32_t)formatted_date[2] << 8) |
        ((uint32_t)formatted_date[3]);

    return atcacert_date_dec_posix_uint32(posix_uint32, timestamp);
   1f38a:	683a      	ldr	r2, [r7, #0]
   1f38c:	68fb      	ldr	r3, [r7, #12]
   1f38e:	0011      	movs	r1, r2
   1f390:	0018      	movs	r0, r3
   1f392:	f7ff ffc9 	bl	1f328 <atcacert_date_dec_posix_uint32>
   1f396:	0003      	movs	r3, r0
}
   1f398:	0018      	movs	r0, r3
   1f39a:	46bd      	mov	sp, r7
   1f39c:	b004      	add	sp, #16
   1f39e:	bd80      	pop	{r7, pc}

0001f3a0 <atcacert_date_enc_posix_uint32_le>:

int atcacert_date_enc_posix_uint32_le(const atcacert_tm_utc_t* timestamp,
                                      uint8_t                  formatted_date[DATEFMT_POSIX_UINT32_LE_SIZE])
{
   1f3a0:	b580      	push	{r7, lr}
   1f3a2:	b084      	sub	sp, #16
   1f3a4:	af00      	add	r7, sp, #0
   1f3a6:	6078      	str	r0, [r7, #4]
   1f3a8:	6039      	str	r1, [r7, #0]
    uint32_t posix_uint32 = 0;
   1f3aa:	2300      	movs	r3, #0
   1f3ac:	60bb      	str	r3, [r7, #8]
    int ret = 0;
   1f3ae:	2300      	movs	r3, #0
   1f3b0:	60fb      	str	r3, [r7, #12]

    if (timestamp == NULL || formatted_date == NULL)
   1f3b2:	687b      	ldr	r3, [r7, #4]
   1f3b4:	2b00      	cmp	r3, #0
   1f3b6:	d002      	beq.n	1f3be <atcacert_date_enc_posix_uint32_le+0x1e>
   1f3b8:	683b      	ldr	r3, [r7, #0]
   1f3ba:	2b00      	cmp	r3, #0
   1f3bc:	d101      	bne.n	1f3c2 <atcacert_date_enc_posix_uint32_le+0x22>
    {
        return ATCACERT_E_BAD_PARAMS;
   1f3be:	2302      	movs	r3, #2
   1f3c0:	e024      	b.n	1f40c <atcacert_date_enc_posix_uint32_le+0x6c>
    }

    ret = atcacert_date_enc_posix_uint32(timestamp, &posix_uint32);
   1f3c2:	2308      	movs	r3, #8
   1f3c4:	18fa      	adds	r2, r7, r3
   1f3c6:	687b      	ldr	r3, [r7, #4]
   1f3c8:	0011      	movs	r1, r2
   1f3ca:	0018      	movs	r0, r3
   1f3cc:	f7ff fedc 	bl	1f188 <atcacert_date_enc_posix_uint32>
   1f3d0:	0003      	movs	r3, r0
   1f3d2:	60fb      	str	r3, [r7, #12]
    if (ret != ATCACERT_E_SUCCESS)
   1f3d4:	68fb      	ldr	r3, [r7, #12]
   1f3d6:	2b00      	cmp	r3, #0
   1f3d8:	d001      	beq.n	1f3de <atcacert_date_enc_posix_uint32_le+0x3e>
    {
        return ret;
   1f3da:	68fb      	ldr	r3, [r7, #12]
   1f3dc:	e016      	b.n	1f40c <atcacert_date_enc_posix_uint32_le+0x6c>
    }

    formatted_date[0] = (uint8_t)((posix_uint32 >> 0) & 0xFF);
   1f3de:	68bb      	ldr	r3, [r7, #8]
   1f3e0:	b2da      	uxtb	r2, r3
   1f3e2:	683b      	ldr	r3, [r7, #0]
   1f3e4:	701a      	strb	r2, [r3, #0]
    formatted_date[1] = (uint8_t)((posix_uint32 >> 8) & 0xFF);
   1f3e6:	683b      	ldr	r3, [r7, #0]
   1f3e8:	3301      	adds	r3, #1
   1f3ea:	68ba      	ldr	r2, [r7, #8]
   1f3ec:	0a12      	lsrs	r2, r2, #8
   1f3ee:	b2d2      	uxtb	r2, r2
   1f3f0:	701a      	strb	r2, [r3, #0]
    formatted_date[2] = (uint8_t)((posix_uint32 >> 16) & 0xFF);
   1f3f2:	683b      	ldr	r3, [r7, #0]
   1f3f4:	3302      	adds	r3, #2
   1f3f6:	68ba      	ldr	r2, [r7, #8]
   1f3f8:	0c12      	lsrs	r2, r2, #16
   1f3fa:	b2d2      	uxtb	r2, r2
   1f3fc:	701a      	strb	r2, [r3, #0]
    formatted_date[3] = (uint8_t)((posix_uint32 >> 24) & 0xFF);
   1f3fe:	683b      	ldr	r3, [r7, #0]
   1f400:	3303      	adds	r3, #3
   1f402:	68ba      	ldr	r2, [r7, #8]
   1f404:	0e12      	lsrs	r2, r2, #24
   1f406:	b2d2      	uxtb	r2, r2
   1f408:	701a      	strb	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
   1f40a:	2300      	movs	r3, #0
}
   1f40c:	0018      	movs	r0, r3
   1f40e:	46bd      	mov	sp, r7
   1f410:	b004      	add	sp, #16
   1f412:	bd80      	pop	{r7, pc}

0001f414 <atcacert_date_dec_posix_uint32_le>:

int atcacert_date_dec_posix_uint32_le(const uint8_t      formatted_date[DATEFMT_POSIX_UINT32_LE_SIZE],
                                      atcacert_tm_utc_t* timestamp)
{
   1f414:	b580      	push	{r7, lr}
   1f416:	b084      	sub	sp, #16
   1f418:	af00      	add	r7, sp, #0
   1f41a:	6078      	str	r0, [r7, #4]
   1f41c:	6039      	str	r1, [r7, #0]
    uint32_t posix_uint32 = 0;
   1f41e:	2300      	movs	r3, #0
   1f420:	60fb      	str	r3, [r7, #12]

    if (formatted_date == NULL || timestamp == NULL)
   1f422:	687b      	ldr	r3, [r7, #4]
   1f424:	2b00      	cmp	r3, #0
   1f426:	d002      	beq.n	1f42e <atcacert_date_dec_posix_uint32_le+0x1a>
   1f428:	683b      	ldr	r3, [r7, #0]
   1f42a:	2b00      	cmp	r3, #0
   1f42c:	d101      	bne.n	1f432 <atcacert_date_dec_posix_uint32_le+0x1e>
    {
        return ATCACERT_E_BAD_PARAMS;
   1f42e:	2302      	movs	r3, #2
   1f430:	e018      	b.n	1f464 <atcacert_date_dec_posix_uint32_le+0x50>
    }

    posix_uint32 =
        ((uint32_t)formatted_date[3] << 24) |
   1f432:	687b      	ldr	r3, [r7, #4]
   1f434:	3303      	adds	r3, #3
   1f436:	781b      	ldrb	r3, [r3, #0]
   1f438:	061a      	lsls	r2, r3, #24
        ((uint32_t)formatted_date[2] << 16) |
   1f43a:	687b      	ldr	r3, [r7, #4]
   1f43c:	3302      	adds	r3, #2
   1f43e:	781b      	ldrb	r3, [r3, #0]
   1f440:	041b      	lsls	r3, r3, #16
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    posix_uint32 =
        ((uint32_t)formatted_date[3] << 24) |
   1f442:	431a      	orrs	r2, r3
        ((uint32_t)formatted_date[2] << 16) |
        ((uint32_t)formatted_date[1] << 8) |
   1f444:	687b      	ldr	r3, [r7, #4]
   1f446:	3301      	adds	r3, #1
   1f448:	781b      	ldrb	r3, [r3, #0]
   1f44a:	021b      	lsls	r3, r3, #8
        return ATCACERT_E_BAD_PARAMS;
    }

    posix_uint32 =
        ((uint32_t)formatted_date[3] << 24) |
        ((uint32_t)formatted_date[2] << 16) |
   1f44c:	4313      	orrs	r3, r2
        ((uint32_t)formatted_date[1] << 8) |
        ((uint32_t)formatted_date[0]);
   1f44e:	687a      	ldr	r2, [r7, #4]
   1f450:	7812      	ldrb	r2, [r2, #0]
    if (formatted_date == NULL || timestamp == NULL)
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    posix_uint32 =
   1f452:	4313      	orrs	r3, r2
   1f454:	60fb      	str	r3, [r7, #12]
        ((uint32_t)formatted_date[3] << 24) |
        ((uint32_t)formatted_date[2] << 16) |
        ((uint32_t)formatted_date[1] << 8) |
        ((uint32_t)formatted_date[0]);

    return atcacert_date_dec_posix_uint32(posix_uint32, timestamp);
   1f456:	683a      	ldr	r2, [r7, #0]
   1f458:	68fb      	ldr	r3, [r7, #12]
   1f45a:	0011      	movs	r1, r2
   1f45c:	0018      	movs	r0, r3
   1f45e:	f7ff ff63 	bl	1f328 <atcacert_date_dec_posix_uint32>
   1f462:	0003      	movs	r3, r0
}
   1f464:	0018      	movs	r0, r3
   1f466:	46bd      	mov	sp, r7
   1f468:	b004      	add	sp, #16
   1f46a:	bd80      	pop	{r7, pc}

0001f46c <atcacert_date_enc_compcert>:

int atcacert_date_enc_compcert(const atcacert_tm_utc_t* issue_date,
                               uint8_t                  expire_years,
                               uint8_t                  enc_dates[3])
{
   1f46c:	b580      	push	{r7, lr}
   1f46e:	b084      	sub	sp, #16
   1f470:	af00      	add	r7, sp, #0
   1f472:	60f8      	str	r0, [r7, #12]
   1f474:	607a      	str	r2, [r7, #4]
   1f476:	230b      	movs	r3, #11
   1f478:	18fb      	adds	r3, r7, r3
   1f47a:	1c0a      	adds	r2, r1, #0
   1f47c:	701a      	strb	r2, [r3, #0]
     * |         |       |         |         | Years   |
     * +---------+-------+---------+---------+---------+
     *
     * Minutes and seconds are always zero.
     */
    if (issue_date == NULL || enc_dates == NULL)
   1f47e:	68fb      	ldr	r3, [r7, #12]
   1f480:	2b00      	cmp	r3, #0
   1f482:	d002      	beq.n	1f48a <atcacert_date_enc_compcert+0x1e>
   1f484:	687b      	ldr	r3, [r7, #4]
   1f486:	2b00      	cmp	r3, #0
   1f488:	d101      	bne.n	1f48e <atcacert_date_enc_compcert+0x22>
    {
        return ATCACERT_E_BAD_PARAMS;
   1f48a:	2302      	movs	r3, #2
   1f48c:	e0c5      	b.n	1f61a <atcacert_date_enc_compcert+0x1ae>
    }

    if ((issue_date->tm_year + 1900) < 2000 || (issue_date->tm_year + 1900) > 2031)
   1f48e:	68fb      	ldr	r3, [r7, #12]
   1f490:	695b      	ldr	r3, [r3, #20]
   1f492:	4a64      	ldr	r2, [pc, #400]	; (1f624 <atcacert_date_enc_compcert+0x1b8>)
   1f494:	4694      	mov	ip, r2
   1f496:	4463      	add	r3, ip
   1f498:	4a63      	ldr	r2, [pc, #396]	; (1f628 <atcacert_date_enc_compcert+0x1bc>)
   1f49a:	4293      	cmp	r3, r2
   1f49c:	dd07      	ble.n	1f4ae <atcacert_date_enc_compcert+0x42>
   1f49e:	68fb      	ldr	r3, [r7, #12]
   1f4a0:	695b      	ldr	r3, [r3, #20]
   1f4a2:	4a60      	ldr	r2, [pc, #384]	; (1f624 <atcacert_date_enc_compcert+0x1b8>)
   1f4a4:	4694      	mov	ip, r2
   1f4a6:	4463      	add	r3, ip
   1f4a8:	4a60      	ldr	r2, [pc, #384]	; (1f62c <atcacert_date_enc_compcert+0x1c0>)
   1f4aa:	4293      	cmp	r3, r2
   1f4ac:	dd01      	ble.n	1f4b2 <atcacert_date_enc_compcert+0x46>
    {
        return ATCACERT_E_INVALID_DATE;
   1f4ae:	2305      	movs	r3, #5
   1f4b0:	e0b3      	b.n	1f61a <atcacert_date_enc_compcert+0x1ae>
    }
    if (issue_date->tm_mon < 0 || issue_date->tm_mon > 11)
   1f4b2:	68fb      	ldr	r3, [r7, #12]
   1f4b4:	691b      	ldr	r3, [r3, #16]
   1f4b6:	2b00      	cmp	r3, #0
   1f4b8:	db03      	blt.n	1f4c2 <atcacert_date_enc_compcert+0x56>
   1f4ba:	68fb      	ldr	r3, [r7, #12]
   1f4bc:	691b      	ldr	r3, [r3, #16]
   1f4be:	2b0b      	cmp	r3, #11
   1f4c0:	dd01      	ble.n	1f4c6 <atcacert_date_enc_compcert+0x5a>
    {
        return ATCACERT_E_INVALID_DATE;
   1f4c2:	2305      	movs	r3, #5
   1f4c4:	e0a9      	b.n	1f61a <atcacert_date_enc_compcert+0x1ae>
    }
    if (issue_date->tm_mday < 1 || issue_date->tm_mday > 31)
   1f4c6:	68fb      	ldr	r3, [r7, #12]
   1f4c8:	68db      	ldr	r3, [r3, #12]
   1f4ca:	2b00      	cmp	r3, #0
   1f4cc:	dd03      	ble.n	1f4d6 <atcacert_date_enc_compcert+0x6a>
   1f4ce:	68fb      	ldr	r3, [r7, #12]
   1f4d0:	68db      	ldr	r3, [r3, #12]
   1f4d2:	2b1f      	cmp	r3, #31
   1f4d4:	dd01      	ble.n	1f4da <atcacert_date_enc_compcert+0x6e>
    {
        return ATCACERT_E_INVALID_DATE;
   1f4d6:	2305      	movs	r3, #5
   1f4d8:	e09f      	b.n	1f61a <atcacert_date_enc_compcert+0x1ae>
    }
    if (issue_date->tm_hour < 0 || issue_date->tm_hour > 23)
   1f4da:	68fb      	ldr	r3, [r7, #12]
   1f4dc:	689b      	ldr	r3, [r3, #8]
   1f4de:	2b00      	cmp	r3, #0
   1f4e0:	db03      	blt.n	1f4ea <atcacert_date_enc_compcert+0x7e>
   1f4e2:	68fb      	ldr	r3, [r7, #12]
   1f4e4:	689b      	ldr	r3, [r3, #8]
   1f4e6:	2b17      	cmp	r3, #23
   1f4e8:	dd01      	ble.n	1f4ee <atcacert_date_enc_compcert+0x82>
    {
        return ATCACERT_E_INVALID_DATE;
   1f4ea:	2305      	movs	r3, #5
   1f4ec:	e095      	b.n	1f61a <atcacert_date_enc_compcert+0x1ae>
    }
    if (expire_years > 31)
   1f4ee:	230b      	movs	r3, #11
   1f4f0:	18fb      	adds	r3, r7, r3
   1f4f2:	781b      	ldrb	r3, [r3, #0]
   1f4f4:	2b1f      	cmp	r3, #31
   1f4f6:	d901      	bls.n	1f4fc <atcacert_date_enc_compcert+0x90>
    {
        return ATCACERT_E_INVALID_DATE;
   1f4f8:	2305      	movs	r3, #5
   1f4fa:	e08e      	b.n	1f61a <atcacert_date_enc_compcert+0x1ae>
    }

    memset(enc_dates, 0, 3);
   1f4fc:	687b      	ldr	r3, [r7, #4]
   1f4fe:	2203      	movs	r2, #3
   1f500:	2100      	movs	r1, #0
   1f502:	0018      	movs	r0, r3
   1f504:	f006 f911 	bl	2572a <memset>

    enc_dates[0] = (enc_dates[0] & 0x07) | (((issue_date->tm_year + 1900 - 2000) & 0x1F) << 3);
   1f508:	687b      	ldr	r3, [r7, #4]
   1f50a:	781b      	ldrb	r3, [r3, #0]
   1f50c:	b25b      	sxtb	r3, r3
   1f50e:	2207      	movs	r2, #7
   1f510:	4013      	ands	r3, r2
   1f512:	b25a      	sxtb	r2, r3
   1f514:	68fb      	ldr	r3, [r7, #12]
   1f516:	695b      	ldr	r3, [r3, #20]
   1f518:	3b64      	subs	r3, #100	; 0x64
   1f51a:	00db      	lsls	r3, r3, #3
   1f51c:	b25b      	sxtb	r3, r3
   1f51e:	4313      	orrs	r3, r2
   1f520:	b25b      	sxtb	r3, r3
   1f522:	b2da      	uxtb	r2, r3
   1f524:	687b      	ldr	r3, [r7, #4]
   1f526:	701a      	strb	r2, [r3, #0]
    enc_dates[0] = (enc_dates[0] & 0xF8) | (((issue_date->tm_mon + 1) & 0x0F) >> 1);
   1f528:	687b      	ldr	r3, [r7, #4]
   1f52a:	781b      	ldrb	r3, [r3, #0]
   1f52c:	b25b      	sxtb	r3, r3
   1f52e:	2207      	movs	r2, #7
   1f530:	4393      	bics	r3, r2
   1f532:	b25a      	sxtb	r2, r3
   1f534:	68fb      	ldr	r3, [r7, #12]
   1f536:	691b      	ldr	r3, [r3, #16]
   1f538:	3301      	adds	r3, #1
   1f53a:	105b      	asrs	r3, r3, #1
   1f53c:	b25b      	sxtb	r3, r3
   1f53e:	2107      	movs	r1, #7
   1f540:	400b      	ands	r3, r1
   1f542:	b25b      	sxtb	r3, r3
   1f544:	4313      	orrs	r3, r2
   1f546:	b25b      	sxtb	r3, r3
   1f548:	b2da      	uxtb	r2, r3
   1f54a:	687b      	ldr	r3, [r7, #4]
   1f54c:	701a      	strb	r2, [r3, #0]
    enc_dates[1] = (enc_dates[1] & 0x7F) | (((issue_date->tm_mon + 1) & 0x0F) << 7);
   1f54e:	687b      	ldr	r3, [r7, #4]
   1f550:	1c5a      	adds	r2, r3, #1
   1f552:	687b      	ldr	r3, [r7, #4]
   1f554:	3301      	adds	r3, #1
   1f556:	781b      	ldrb	r3, [r3, #0]
   1f558:	b25b      	sxtb	r3, r3
   1f55a:	217f      	movs	r1, #127	; 0x7f
   1f55c:	400b      	ands	r3, r1
   1f55e:	b259      	sxtb	r1, r3
   1f560:	68fb      	ldr	r3, [r7, #12]
   1f562:	691b      	ldr	r3, [r3, #16]
   1f564:	3301      	adds	r3, #1
   1f566:	01db      	lsls	r3, r3, #7
   1f568:	b25b      	sxtb	r3, r3
   1f56a:	207f      	movs	r0, #127	; 0x7f
   1f56c:	4383      	bics	r3, r0
   1f56e:	b25b      	sxtb	r3, r3
   1f570:	430b      	orrs	r3, r1
   1f572:	b25b      	sxtb	r3, r3
   1f574:	b2db      	uxtb	r3, r3
   1f576:	7013      	strb	r3, [r2, #0]
    enc_dates[1] = (enc_dates[1] & 0x83) | ((issue_date->tm_mday & 0x1F) << 2);
   1f578:	687b      	ldr	r3, [r7, #4]
   1f57a:	1c5a      	adds	r2, r3, #1
   1f57c:	687b      	ldr	r3, [r7, #4]
   1f57e:	3301      	adds	r3, #1
   1f580:	781b      	ldrb	r3, [r3, #0]
   1f582:	b25b      	sxtb	r3, r3
   1f584:	217c      	movs	r1, #124	; 0x7c
   1f586:	438b      	bics	r3, r1
   1f588:	b259      	sxtb	r1, r3
   1f58a:	68fb      	ldr	r3, [r7, #12]
   1f58c:	68db      	ldr	r3, [r3, #12]
   1f58e:	009b      	lsls	r3, r3, #2
   1f590:	b25b      	sxtb	r3, r3
   1f592:	207c      	movs	r0, #124	; 0x7c
   1f594:	4003      	ands	r3, r0
   1f596:	b25b      	sxtb	r3, r3
   1f598:	430b      	orrs	r3, r1
   1f59a:	b25b      	sxtb	r3, r3
   1f59c:	b2db      	uxtb	r3, r3
   1f59e:	7013      	strb	r3, [r2, #0]
    enc_dates[1] = (enc_dates[1] & 0xFC) | ((issue_date->tm_hour & 0x1F) >> 3);
   1f5a0:	687b      	ldr	r3, [r7, #4]
   1f5a2:	1c5a      	adds	r2, r3, #1
   1f5a4:	687b      	ldr	r3, [r7, #4]
   1f5a6:	3301      	adds	r3, #1
   1f5a8:	781b      	ldrb	r3, [r3, #0]
   1f5aa:	b25b      	sxtb	r3, r3
   1f5ac:	2103      	movs	r1, #3
   1f5ae:	438b      	bics	r3, r1
   1f5b0:	b259      	sxtb	r1, r3
   1f5b2:	68fb      	ldr	r3, [r7, #12]
   1f5b4:	689b      	ldr	r3, [r3, #8]
   1f5b6:	10db      	asrs	r3, r3, #3
   1f5b8:	b25b      	sxtb	r3, r3
   1f5ba:	2003      	movs	r0, #3
   1f5bc:	4003      	ands	r3, r0
   1f5be:	b25b      	sxtb	r3, r3
   1f5c0:	430b      	orrs	r3, r1
   1f5c2:	b25b      	sxtb	r3, r3
   1f5c4:	b2db      	uxtb	r3, r3
   1f5c6:	7013      	strb	r3, [r2, #0]
    enc_dates[2] = (enc_dates[2] & 0x1F) | ((issue_date->tm_hour & 0x1F) << 5);
   1f5c8:	687b      	ldr	r3, [r7, #4]
   1f5ca:	1c9a      	adds	r2, r3, #2
   1f5cc:	687b      	ldr	r3, [r7, #4]
   1f5ce:	3302      	adds	r3, #2
   1f5d0:	781b      	ldrb	r3, [r3, #0]
   1f5d2:	b25b      	sxtb	r3, r3
   1f5d4:	211f      	movs	r1, #31
   1f5d6:	400b      	ands	r3, r1
   1f5d8:	b259      	sxtb	r1, r3
   1f5da:	68fb      	ldr	r3, [r7, #12]
   1f5dc:	689b      	ldr	r3, [r3, #8]
   1f5de:	015b      	lsls	r3, r3, #5
   1f5e0:	b25b      	sxtb	r3, r3
   1f5e2:	201f      	movs	r0, #31
   1f5e4:	4383      	bics	r3, r0
   1f5e6:	b25b      	sxtb	r3, r3
   1f5e8:	430b      	orrs	r3, r1
   1f5ea:	b25b      	sxtb	r3, r3
   1f5ec:	b2db      	uxtb	r3, r3
   1f5ee:	7013      	strb	r3, [r2, #0]
    enc_dates[2] = (enc_dates[2] & 0xE0) | (expire_years & 0x1F);
   1f5f0:	687b      	ldr	r3, [r7, #4]
   1f5f2:	3302      	adds	r3, #2
   1f5f4:	687a      	ldr	r2, [r7, #4]
   1f5f6:	3202      	adds	r2, #2
   1f5f8:	7812      	ldrb	r2, [r2, #0]
   1f5fa:	b252      	sxtb	r2, r2
   1f5fc:	211f      	movs	r1, #31
   1f5fe:	438a      	bics	r2, r1
   1f600:	b251      	sxtb	r1, r2
   1f602:	220b      	movs	r2, #11
   1f604:	18ba      	adds	r2, r7, r2
   1f606:	7812      	ldrb	r2, [r2, #0]
   1f608:	b252      	sxtb	r2, r2
   1f60a:	201f      	movs	r0, #31
   1f60c:	4002      	ands	r2, r0
   1f60e:	b252      	sxtb	r2, r2
   1f610:	430a      	orrs	r2, r1
   1f612:	b252      	sxtb	r2, r2
   1f614:	b2d2      	uxtb	r2, r2
   1f616:	701a      	strb	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
   1f618:	2300      	movs	r3, #0
}
   1f61a:	0018      	movs	r0, r3
   1f61c:	46bd      	mov	sp, r7
   1f61e:	b004      	add	sp, #16
   1f620:	bd80      	pop	{r7, pc}
   1f622:	46c0      	nop			; (mov r8, r8)
   1f624:	0000076c 	.word	0x0000076c
   1f628:	000007cf 	.word	0x000007cf
   1f62c:	000007ef 	.word	0x000007ef

0001f630 <atcacert_date_dec_compcert>:

int atcacert_date_dec_compcert(const uint8_t          enc_dates[3],
                               atcacert_date_format_t expire_date_format,
                               atcacert_tm_utc_t*     issue_date,
                               atcacert_tm_utc_t*     expire_date)
{
   1f630:	b580      	push	{r7, lr}
   1f632:	b086      	sub	sp, #24
   1f634:	af00      	add	r7, sp, #0
   1f636:	60f8      	str	r0, [r7, #12]
   1f638:	607a      	str	r2, [r7, #4]
   1f63a:	603b      	str	r3, [r7, #0]
   1f63c:	230b      	movs	r3, #11
   1f63e:	18fb      	adds	r3, r7, r3
   1f640:	1c0a      	adds	r2, r1, #0
   1f642:	701a      	strb	r2, [r3, #0]
    int ret = ATCACERT_E_SUCCESS;
   1f644:	2300      	movs	r3, #0
   1f646:	617b      	str	r3, [r7, #20]
    uint8_t expire_years = 0;
   1f648:	2313      	movs	r3, #19
   1f64a:	18fb      	adds	r3, r7, r3
   1f64c:	2200      	movs	r2, #0
   1f64e:	701a      	strb	r2, [r3, #0]
     * +---------+-------+---------+---------+---------+
     *
     * Minutes and seconds are always zero.
     */

    if (enc_dates == NULL || issue_date == NULL || expire_date == NULL || expire_date_format < 0 || expire_date_format >= sizeof(ATCACERT_DATE_FORMAT_SIZES) / sizeof(ATCACERT_DATE_FORMAT_SIZES[0]))
   1f650:	68fb      	ldr	r3, [r7, #12]
   1f652:	2b00      	cmp	r3, #0
   1f654:	d00a      	beq.n	1f66c <atcacert_date_dec_compcert+0x3c>
   1f656:	687b      	ldr	r3, [r7, #4]
   1f658:	2b00      	cmp	r3, #0
   1f65a:	d007      	beq.n	1f66c <atcacert_date_dec_compcert+0x3c>
   1f65c:	683b      	ldr	r3, [r7, #0]
   1f65e:	2b00      	cmp	r3, #0
   1f660:	d004      	beq.n	1f66c <atcacert_date_dec_compcert+0x3c>
   1f662:	230b      	movs	r3, #11
   1f664:	18fb      	adds	r3, r7, r3
   1f666:	781b      	ldrb	r3, [r3, #0]
   1f668:	2b04      	cmp	r3, #4
   1f66a:	d901      	bls.n	1f670 <atcacert_date_dec_compcert+0x40>
    {
        return ATCACERT_E_BAD_PARAMS;
   1f66c:	2302      	movs	r3, #2
   1f66e:	e069      	b.n	1f744 <atcacert_date_dec_compcert+0x114>
    }

    memset(issue_date, 0, sizeof(*issue_date));
   1f670:	687b      	ldr	r3, [r7, #4]
   1f672:	2218      	movs	r2, #24
   1f674:	2100      	movs	r1, #0
   1f676:	0018      	movs	r0, r3
   1f678:	f006 f857 	bl	2572a <memset>
    memset(expire_date, 0, sizeof(*expire_date));
   1f67c:	683b      	ldr	r3, [r7, #0]
   1f67e:	2218      	movs	r2, #24
   1f680:	2100      	movs	r1, #0
   1f682:	0018      	movs	r0, r3
   1f684:	f006 f851 	bl	2572a <memset>

    issue_date->tm_year = (enc_dates[0] >> 3) + 2000 - 1900;
   1f688:	68fb      	ldr	r3, [r7, #12]
   1f68a:	781b      	ldrb	r3, [r3, #0]
   1f68c:	08db      	lsrs	r3, r3, #3
   1f68e:	b2db      	uxtb	r3, r3
   1f690:	3364      	adds	r3, #100	; 0x64
   1f692:	001a      	movs	r2, r3
   1f694:	687b      	ldr	r3, [r7, #4]
   1f696:	615a      	str	r2, [r3, #20]
    issue_date->tm_mon  = (((enc_dates[0] & 0x07) << 1) | ((enc_dates[1] & 0x80) >> 7)) - 1;
   1f698:	68fb      	ldr	r3, [r7, #12]
   1f69a:	781b      	ldrb	r3, [r3, #0]
   1f69c:	005b      	lsls	r3, r3, #1
   1f69e:	220e      	movs	r2, #14
   1f6a0:	4013      	ands	r3, r2
   1f6a2:	68fa      	ldr	r2, [r7, #12]
   1f6a4:	3201      	adds	r2, #1
   1f6a6:	7812      	ldrb	r2, [r2, #0]
   1f6a8:	09d2      	lsrs	r2, r2, #7
   1f6aa:	b2d2      	uxtb	r2, r2
   1f6ac:	4313      	orrs	r3, r2
   1f6ae:	1e5a      	subs	r2, r3, #1
   1f6b0:	687b      	ldr	r3, [r7, #4]
   1f6b2:	611a      	str	r2, [r3, #16]
    issue_date->tm_mday = ((enc_dates[1] & 0x7C) >> 2);
   1f6b4:	68fb      	ldr	r3, [r7, #12]
   1f6b6:	3301      	adds	r3, #1
   1f6b8:	781b      	ldrb	r3, [r3, #0]
   1f6ba:	109b      	asrs	r3, r3, #2
   1f6bc:	221f      	movs	r2, #31
   1f6be:	401a      	ands	r2, r3
   1f6c0:	687b      	ldr	r3, [r7, #4]
   1f6c2:	60da      	str	r2, [r3, #12]
    issue_date->tm_hour = ((enc_dates[1] & 0x03) << 3) | ((enc_dates[2] & 0xE0) >> 5);
   1f6c4:	68fb      	ldr	r3, [r7, #12]
   1f6c6:	3301      	adds	r3, #1
   1f6c8:	781b      	ldrb	r3, [r3, #0]
   1f6ca:	00db      	lsls	r3, r3, #3
   1f6cc:	2218      	movs	r2, #24
   1f6ce:	4013      	ands	r3, r2
   1f6d0:	68fa      	ldr	r2, [r7, #12]
   1f6d2:	3202      	adds	r2, #2
   1f6d4:	7812      	ldrb	r2, [r2, #0]
   1f6d6:	0952      	lsrs	r2, r2, #5
   1f6d8:	b2d2      	uxtb	r2, r2
   1f6da:	431a      	orrs	r2, r3
   1f6dc:	687b      	ldr	r3, [r7, #4]
   1f6de:	609a      	str	r2, [r3, #8]

    expire_years = (enc_dates[2] & 0x1F);
   1f6e0:	68fb      	ldr	r3, [r7, #12]
   1f6e2:	3302      	adds	r3, #2
   1f6e4:	781a      	ldrb	r2, [r3, #0]
   1f6e6:	2313      	movs	r3, #19
   1f6e8:	18fb      	adds	r3, r7, r3
   1f6ea:	211f      	movs	r1, #31
   1f6ec:	400a      	ands	r2, r1
   1f6ee:	701a      	strb	r2, [r3, #0]

    if (expire_years != 0)
   1f6f0:	2313      	movs	r3, #19
   1f6f2:	18fb      	adds	r3, r7, r3
   1f6f4:	781b      	ldrb	r3, [r3, #0]
   1f6f6:	2b00      	cmp	r3, #0
   1f6f8:	d014      	beq.n	1f724 <atcacert_date_dec_compcert+0xf4>
    {
        expire_date->tm_year = issue_date->tm_year + expire_years;
   1f6fa:	687b      	ldr	r3, [r7, #4]
   1f6fc:	695a      	ldr	r2, [r3, #20]
   1f6fe:	2313      	movs	r3, #19
   1f700:	18fb      	adds	r3, r7, r3
   1f702:	781b      	ldrb	r3, [r3, #0]
   1f704:	18d2      	adds	r2, r2, r3
   1f706:	683b      	ldr	r3, [r7, #0]
   1f708:	615a      	str	r2, [r3, #20]
        expire_date->tm_mon  = issue_date->tm_mon;
   1f70a:	687b      	ldr	r3, [r7, #4]
   1f70c:	691a      	ldr	r2, [r3, #16]
   1f70e:	683b      	ldr	r3, [r7, #0]
   1f710:	611a      	str	r2, [r3, #16]
        expire_date->tm_mday = issue_date->tm_mday;
   1f712:	687b      	ldr	r3, [r7, #4]
   1f714:	68da      	ldr	r2, [r3, #12]
   1f716:	683b      	ldr	r3, [r7, #0]
   1f718:	60da      	str	r2, [r3, #12]
        expire_date->tm_hour = issue_date->tm_hour;
   1f71a:	687b      	ldr	r3, [r7, #4]
   1f71c:	689a      	ldr	r2, [r3, #8]
   1f71e:	683b      	ldr	r3, [r7, #0]
   1f720:	609a      	str	r2, [r3, #8]
   1f722:	e00e      	b.n	1f742 <atcacert_date_dec_compcert+0x112>
    }
    else
    {
        // Expire years of 0, means no expiration. Set to max date for the given expiration date format.
        ret = atcacert_date_get_max_date(expire_date_format, expire_date);
   1f724:	683a      	ldr	r2, [r7, #0]
   1f726:	230b      	movs	r3, #11
   1f728:	18fb      	adds	r3, r7, r3
   1f72a:	781b      	ldrb	r3, [r3, #0]
   1f72c:	0011      	movs	r1, r2
   1f72e:	0018      	movs	r0, r3
   1f730:	f7fe fe6a 	bl	1e408 <atcacert_date_get_max_date>
   1f734:	0003      	movs	r3, r0
   1f736:	617b      	str	r3, [r7, #20]
        if (ret != ATCACERT_E_SUCCESS)
   1f738:	697b      	ldr	r3, [r7, #20]
   1f73a:	2b00      	cmp	r3, #0
   1f73c:	d001      	beq.n	1f742 <atcacert_date_dec_compcert+0x112>
        {
            return ret;
   1f73e:	697b      	ldr	r3, [r7, #20]
   1f740:	e000      	b.n	1f744 <atcacert_date_dec_compcert+0x114>
        }
    }

    return ATCACERT_E_SUCCESS;
   1f742:	2300      	movs	r3, #0
   1f744:	0018      	movs	r0, r3
   1f746:	46bd      	mov	sp, r7
   1f748:	b006      	add	sp, #24
   1f74a:	bd80      	pop	{r7, pc}

0001f74c <atcacert_merge_device_loc>:
int atcacert_merge_device_loc(atcacert_device_loc_t*       device_locs,
                              size_t*                      device_locs_count,
                              size_t                       device_locs_max_count,
                              const atcacert_device_loc_t* device_loc,
                              size_t                       block_size)
{
   1f74c:	b590      	push	{r4, r7, lr}
   1f74e:	b08b      	sub	sp, #44	; 0x2c
   1f750:	af00      	add	r7, sp, #0
   1f752:	60f8      	str	r0, [r7, #12]
   1f754:	60b9      	str	r1, [r7, #8]
   1f756:	607a      	str	r2, [r7, #4]
   1f758:	603b      	str	r3, [r7, #0]
    size_t i = 0;
   1f75a:	2300      	movs	r3, #0
   1f75c:	627b      	str	r3, [r7, #36]	; 0x24
    size_t new_offset;
    size_t new_end;

    if (device_locs == NULL || device_locs_count == NULL || device_loc == NULL || block_size <= 0)
   1f75e:	68fb      	ldr	r3, [r7, #12]
   1f760:	2b00      	cmp	r3, #0
   1f762:	d008      	beq.n	1f776 <atcacert_merge_device_loc+0x2a>
   1f764:	68bb      	ldr	r3, [r7, #8]
   1f766:	2b00      	cmp	r3, #0
   1f768:	d005      	beq.n	1f776 <atcacert_merge_device_loc+0x2a>
   1f76a:	683b      	ldr	r3, [r7, #0]
   1f76c:	2b00      	cmp	r3, #0
   1f76e:	d002      	beq.n	1f776 <atcacert_merge_device_loc+0x2a>
   1f770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f772:	2b00      	cmp	r3, #0
   1f774:	d101      	bne.n	1f77a <atcacert_merge_device_loc+0x2e>
    {
        return ATCACERT_E_BAD_PARAMS;
   1f776:	2302      	movs	r3, #2
   1f778:	e161      	b.n	1fa3e <atcacert_merge_device_loc+0x2f2>
    }

    if (device_loc->zone == DEVZONE_NONE || device_loc->count == 0)
   1f77a:	683b      	ldr	r3, [r7, #0]
   1f77c:	781b      	ldrb	r3, [r3, #0]
   1f77e:	2b07      	cmp	r3, #7
   1f780:	d007      	beq.n	1f792 <atcacert_merge_device_loc+0x46>
   1f782:	683b      	ldr	r3, [r7, #0]
   1f784:	795a      	ldrb	r2, [r3, #5]
   1f786:	799b      	ldrb	r3, [r3, #6]
   1f788:	021b      	lsls	r3, r3, #8
   1f78a:	4313      	orrs	r3, r2
   1f78c:	b29b      	uxth	r3, r3
   1f78e:	2b00      	cmp	r3, #0
   1f790:	d101      	bne.n	1f796 <atcacert_merge_device_loc+0x4a>
    {
        return ATCACERT_E_SUCCESS;                                                                      // New device location doesn't exist
   1f792:	2300      	movs	r3, #0
   1f794:	e153      	b.n	1fa3e <atcacert_merge_device_loc+0x2f2>

    }
    new_offset = (device_loc->offset / block_size) * block_size;                                        // Round down to block_size
   1f796:	683b      	ldr	r3, [r7, #0]
   1f798:	78da      	ldrb	r2, [r3, #3]
   1f79a:	791b      	ldrb	r3, [r3, #4]
   1f79c:	021b      	lsls	r3, r3, #8
   1f79e:	4313      	orrs	r3, r2
   1f7a0:	b29b      	uxth	r3, r3
   1f7a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1f7a4:	0018      	movs	r0, r3
   1f7a6:	f003 fe79 	bl	2349c <__aeabi_uidiv>
   1f7aa:	0003      	movs	r3, r0
   1f7ac:	001a      	movs	r2, r3
   1f7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f7b0:	4353      	muls	r3, r2
   1f7b2:	623b      	str	r3, [r7, #32]
    new_end = device_loc->offset + device_loc->count;
   1f7b4:	683b      	ldr	r3, [r7, #0]
   1f7b6:	78da      	ldrb	r2, [r3, #3]
   1f7b8:	791b      	ldrb	r3, [r3, #4]
   1f7ba:	021b      	lsls	r3, r3, #8
   1f7bc:	4313      	orrs	r3, r2
   1f7be:	b29b      	uxth	r3, r3
   1f7c0:	0019      	movs	r1, r3
   1f7c2:	683b      	ldr	r3, [r7, #0]
   1f7c4:	795a      	ldrb	r2, [r3, #5]
   1f7c6:	799b      	ldrb	r3, [r3, #6]
   1f7c8:	021b      	lsls	r3, r3, #8
   1f7ca:	4313      	orrs	r3, r2
   1f7cc:	b29b      	uxth	r3, r3
   1f7ce:	18cb      	adds	r3, r1, r3
   1f7d0:	61fb      	str	r3, [r7, #28]
    new_end = ((new_end % block_size) ? new_end / block_size + 1 : new_end / block_size) * block_size;  // Round up to block size
   1f7d2:	69fb      	ldr	r3, [r7, #28]
   1f7d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1f7d6:	0018      	movs	r0, r3
   1f7d8:	f003 fee6 	bl	235a8 <__aeabi_uidivmod>
   1f7dc:	1e0b      	subs	r3, r1, #0
   1f7de:	d006      	beq.n	1f7ee <atcacert_merge_device_loc+0xa2>
   1f7e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1f7e2:	69f8      	ldr	r0, [r7, #28]
   1f7e4:	f003 fe5a 	bl	2349c <__aeabi_uidiv>
   1f7e8:	0003      	movs	r3, r0
   1f7ea:	3301      	adds	r3, #1
   1f7ec:	e004      	b.n	1f7f8 <atcacert_merge_device_loc+0xac>
   1f7ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1f7f0:	69f8      	ldr	r0, [r7, #28]
   1f7f2:	f003 fe53 	bl	2349c <__aeabi_uidiv>
   1f7f6:	0003      	movs	r3, r0
   1f7f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f7fa:	4353      	muls	r3, r2
   1f7fc:	61fb      	str	r3, [r7, #28]

    // Try to merge with an existing device location
    for (i = 0; i < *device_locs_count; ++i)
   1f7fe:	2300      	movs	r3, #0
   1f800:	627b      	str	r3, [r7, #36]	; 0x24
   1f802:	e0b8      	b.n	1f976 <atcacert_merge_device_loc+0x22a>
    {
        atcacert_device_loc_t* cur_device_loc = &device_locs[i];
   1f804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f806:	0013      	movs	r3, r2
   1f808:	00db      	lsls	r3, r3, #3
   1f80a:	1a9b      	subs	r3, r3, r2
   1f80c:	68fa      	ldr	r2, [r7, #12]
   1f80e:	18d3      	adds	r3, r2, r3
   1f810:	61bb      	str	r3, [r7, #24]
        size_t cur_end = cur_device_loc->offset + cur_device_loc->count;
   1f812:	69bb      	ldr	r3, [r7, #24]
   1f814:	78da      	ldrb	r2, [r3, #3]
   1f816:	791b      	ldrb	r3, [r3, #4]
   1f818:	021b      	lsls	r3, r3, #8
   1f81a:	4313      	orrs	r3, r2
   1f81c:	b29b      	uxth	r3, r3
   1f81e:	0019      	movs	r1, r3
   1f820:	69bb      	ldr	r3, [r7, #24]
   1f822:	795a      	ldrb	r2, [r3, #5]
   1f824:	799b      	ldrb	r3, [r3, #6]
   1f826:	021b      	lsls	r3, r3, #8
   1f828:	4313      	orrs	r3, r2
   1f82a:	b29b      	uxth	r3, r3
   1f82c:	18cb      	adds	r3, r1, r3
   1f82e:	617b      	str	r3, [r7, #20]

        if (device_loc->zone != cur_device_loc->zone)
   1f830:	683b      	ldr	r3, [r7, #0]
   1f832:	781a      	ldrb	r2, [r3, #0]
   1f834:	69bb      	ldr	r3, [r7, #24]
   1f836:	781b      	ldrb	r3, [r3, #0]
   1f838:	429a      	cmp	r2, r3
   1f83a:	d000      	beq.n	1f83e <atcacert_merge_device_loc+0xf2>
   1f83c:	e091      	b.n	1f962 <atcacert_merge_device_loc+0x216>
        {
            continue;   // Not the same zone, can't merge
        }
        if (device_loc->zone == DEVZONE_DATA && device_loc->slot != cur_device_loc->slot)
   1f83e:	683b      	ldr	r3, [r7, #0]
   1f840:	781b      	ldrb	r3, [r3, #0]
   1f842:	2b02      	cmp	r3, #2
   1f844:	d106      	bne.n	1f854 <atcacert_merge_device_loc+0x108>
   1f846:	683b      	ldr	r3, [r7, #0]
   1f848:	785a      	ldrb	r2, [r3, #1]
   1f84a:	69bb      	ldr	r3, [r7, #24]
   1f84c:	785b      	ldrb	r3, [r3, #1]
   1f84e:	429a      	cmp	r2, r3
   1f850:	d000      	beq.n	1f854 <atcacert_merge_device_loc+0x108>
   1f852:	e088      	b.n	1f966 <atcacert_merge_device_loc+0x21a>
        {
            continue;   // Not the same slot, can't merge
        }
        if (device_loc->zone == DEVZONE_DATA && device_loc->is_genkey != cur_device_loc->is_genkey)
   1f854:	683b      	ldr	r3, [r7, #0]
   1f856:	781b      	ldrb	r3, [r3, #0]
   1f858:	2b02      	cmp	r3, #2
   1f85a:	d106      	bne.n	1f86a <atcacert_merge_device_loc+0x11e>
   1f85c:	683b      	ldr	r3, [r7, #0]
   1f85e:	789a      	ldrb	r2, [r3, #2]
   1f860:	69bb      	ldr	r3, [r7, #24]
   1f862:	789b      	ldrb	r3, [r3, #2]
   1f864:	429a      	cmp	r2, r3
   1f866:	d000      	beq.n	1f86a <atcacert_merge_device_loc+0x11e>
   1f868:	e07f      	b.n	1f96a <atcacert_merge_device_loc+0x21e>
        {
            continue;   // Not the same read method, can't merge.
        }
        if (new_end < cur_device_loc->offset || new_offset > cur_end)
   1f86a:	69bb      	ldr	r3, [r7, #24]
   1f86c:	78da      	ldrb	r2, [r3, #3]
   1f86e:	791b      	ldrb	r3, [r3, #4]
   1f870:	021b      	lsls	r3, r3, #8
   1f872:	4313      	orrs	r3, r2
   1f874:	b29b      	uxth	r3, r3
   1f876:	001a      	movs	r2, r3
   1f878:	69fb      	ldr	r3, [r7, #28]
   1f87a:	429a      	cmp	r2, r3
   1f87c:	d900      	bls.n	1f880 <atcacert_merge_device_loc+0x134>
   1f87e:	e076      	b.n	1f96e <atcacert_merge_device_loc+0x222>
   1f880:	6a3a      	ldr	r2, [r7, #32]
   1f882:	697b      	ldr	r3, [r7, #20]
   1f884:	429a      	cmp	r2, r3
   1f886:	d872      	bhi.n	1f96e <atcacert_merge_device_loc+0x222>
        {
            continue;   // Same zone, but non-continuous areas

        }
        if (device_loc->offset < cur_device_loc->offset)
   1f888:	683b      	ldr	r3, [r7, #0]
   1f88a:	78da      	ldrb	r2, [r3, #3]
   1f88c:	791b      	ldrb	r3, [r3, #4]
   1f88e:	021b      	lsls	r3, r3, #8
   1f890:	4313      	orrs	r3, r2
   1f892:	b29a      	uxth	r2, r3
   1f894:	69bb      	ldr	r3, [r7, #24]
   1f896:	78d9      	ldrb	r1, [r3, #3]
   1f898:	791b      	ldrb	r3, [r3, #4]
   1f89a:	021b      	lsls	r3, r3, #8
   1f89c:	430b      	orrs	r3, r1
   1f89e:	b29b      	uxth	r3, r3
   1f8a0:	429a      	cmp	r2, r3
   1f8a2:	d21a      	bcs.n	1f8da <atcacert_merge_device_loc+0x18e>
        {
            cur_device_loc->offset = device_loc->offset;
   1f8a4:	683b      	ldr	r3, [r7, #0]
   1f8a6:	78da      	ldrb	r2, [r3, #3]
   1f8a8:	791b      	ldrb	r3, [r3, #4]
   1f8aa:	021b      	lsls	r3, r3, #8
   1f8ac:	4313      	orrs	r3, r2
   1f8ae:	b29a      	uxth	r2, r3
   1f8b0:	69bb      	ldr	r3, [r7, #24]
   1f8b2:	3303      	adds	r3, #3
   1f8b4:	21ff      	movs	r1, #255	; 0xff
   1f8b6:	4011      	ands	r1, r2
   1f8b8:	000c      	movs	r4, r1
   1f8ba:	7819      	ldrb	r1, [r3, #0]
   1f8bc:	2000      	movs	r0, #0
   1f8be:	4001      	ands	r1, r0
   1f8c0:	1c08      	adds	r0, r1, #0
   1f8c2:	1c21      	adds	r1, r4, #0
   1f8c4:	4301      	orrs	r1, r0
   1f8c6:	7019      	strb	r1, [r3, #0]
   1f8c8:	0a12      	lsrs	r2, r2, #8
   1f8ca:	b290      	uxth	r0, r2
   1f8cc:	785a      	ldrb	r2, [r3, #1]
   1f8ce:	2100      	movs	r1, #0
   1f8d0:	400a      	ands	r2, r1
   1f8d2:	1c11      	adds	r1, r2, #0
   1f8d4:	1c02      	adds	r2, r0, #0
   1f8d6:	430a      	orrs	r2, r1
   1f8d8:	705a      	strb	r2, [r3, #1]
        }

        if (new_end > cur_end)
   1f8da:	69fa      	ldr	r2, [r7, #28]
   1f8dc:	697b      	ldr	r3, [r7, #20]
   1f8de:	429a      	cmp	r2, r3
   1f8e0:	d91f      	bls.n	1f922 <atcacert_merge_device_loc+0x1d6>
        {
            cur_device_loc->count = (uint16_t)(new_end - cur_device_loc->offset);
   1f8e2:	69fb      	ldr	r3, [r7, #28]
   1f8e4:	b29a      	uxth	r2, r3
   1f8e6:	69bb      	ldr	r3, [r7, #24]
   1f8e8:	78d9      	ldrb	r1, [r3, #3]
   1f8ea:	791b      	ldrb	r3, [r3, #4]
   1f8ec:	021b      	lsls	r3, r3, #8
   1f8ee:	430b      	orrs	r3, r1
   1f8f0:	b29b      	uxth	r3, r3
   1f8f2:	1ad3      	subs	r3, r2, r3
   1f8f4:	b29a      	uxth	r2, r3
   1f8f6:	69bb      	ldr	r3, [r7, #24]
   1f8f8:	3305      	adds	r3, #5
   1f8fa:	21ff      	movs	r1, #255	; 0xff
   1f8fc:	4011      	ands	r1, r2
   1f8fe:	000c      	movs	r4, r1
   1f900:	7819      	ldrb	r1, [r3, #0]
   1f902:	2000      	movs	r0, #0
   1f904:	4001      	ands	r1, r0
   1f906:	1c08      	adds	r0, r1, #0
   1f908:	1c21      	adds	r1, r4, #0
   1f90a:	4301      	orrs	r1, r0
   1f90c:	7019      	strb	r1, [r3, #0]
   1f90e:	0a12      	lsrs	r2, r2, #8
   1f910:	b290      	uxth	r0, r2
   1f912:	785a      	ldrb	r2, [r3, #1]
   1f914:	2100      	movs	r1, #0
   1f916:	400a      	ands	r2, r1
   1f918:	1c11      	adds	r1, r2, #0
   1f91a:	1c02      	adds	r2, r0, #0
   1f91c:	430a      	orrs	r2, r1
   1f91e:	705a      	strb	r2, [r3, #1]
        }
        else
        {
            cur_device_loc->count = (uint16_t)(cur_end - cur_device_loc->offset);
        }
        break;
   1f920:	e02f      	b.n	1f982 <atcacert_merge_device_loc+0x236>
        {
            cur_device_loc->count = (uint16_t)(new_end - cur_device_loc->offset);
        }
        else
        {
            cur_device_loc->count = (uint16_t)(cur_end - cur_device_loc->offset);
   1f922:	697b      	ldr	r3, [r7, #20]
   1f924:	b29a      	uxth	r2, r3
   1f926:	69bb      	ldr	r3, [r7, #24]
   1f928:	78d9      	ldrb	r1, [r3, #3]
   1f92a:	791b      	ldrb	r3, [r3, #4]
   1f92c:	021b      	lsls	r3, r3, #8
   1f92e:	430b      	orrs	r3, r1
   1f930:	b29b      	uxth	r3, r3
   1f932:	1ad3      	subs	r3, r2, r3
   1f934:	b29a      	uxth	r2, r3
   1f936:	69bb      	ldr	r3, [r7, #24]
   1f938:	3305      	adds	r3, #5
   1f93a:	21ff      	movs	r1, #255	; 0xff
   1f93c:	4011      	ands	r1, r2
   1f93e:	000c      	movs	r4, r1
   1f940:	7819      	ldrb	r1, [r3, #0]
   1f942:	2000      	movs	r0, #0
   1f944:	4001      	ands	r1, r0
   1f946:	1c08      	adds	r0, r1, #0
   1f948:	1c21      	adds	r1, r4, #0
   1f94a:	4301      	orrs	r1, r0
   1f94c:	7019      	strb	r1, [r3, #0]
   1f94e:	0a12      	lsrs	r2, r2, #8
   1f950:	b290      	uxth	r0, r2
   1f952:	785a      	ldrb	r2, [r3, #1]
   1f954:	2100      	movs	r1, #0
   1f956:	400a      	ands	r2, r1
   1f958:	1c11      	adds	r1, r2, #0
   1f95a:	1c02      	adds	r2, r0, #0
   1f95c:	430a      	orrs	r2, r1
   1f95e:	705a      	strb	r2, [r3, #1]
        }
        break;
   1f960:	e00f      	b.n	1f982 <atcacert_merge_device_loc+0x236>
        atcacert_device_loc_t* cur_device_loc = &device_locs[i];
        size_t cur_end = cur_device_loc->offset + cur_device_loc->count;

        if (device_loc->zone != cur_device_loc->zone)
        {
            continue;   // Not the same zone, can't merge
   1f962:	46c0      	nop			; (mov r8, r8)
   1f964:	e004      	b.n	1f970 <atcacert_merge_device_loc+0x224>
        }
        if (device_loc->zone == DEVZONE_DATA && device_loc->slot != cur_device_loc->slot)
        {
            continue;   // Not the same slot, can't merge
   1f966:	46c0      	nop			; (mov r8, r8)
   1f968:	e002      	b.n	1f970 <atcacert_merge_device_loc+0x224>
        }
        if (device_loc->zone == DEVZONE_DATA && device_loc->is_genkey != cur_device_loc->is_genkey)
        {
            continue;   // Not the same read method, can't merge.
   1f96a:	46c0      	nop			; (mov r8, r8)
   1f96c:	e000      	b.n	1f970 <atcacert_merge_device_loc+0x224>
        }
        if (new_end < cur_device_loc->offset || new_offset > cur_end)
        {
            continue;   // Same zone, but non-continuous areas
   1f96e:	46c0      	nop			; (mov r8, r8)
    new_offset = (device_loc->offset / block_size) * block_size;                                        // Round down to block_size
    new_end = device_loc->offset + device_loc->count;
    new_end = ((new_end % block_size) ? new_end / block_size + 1 : new_end / block_size) * block_size;  // Round up to block size

    // Try to merge with an existing device location
    for (i = 0; i < *device_locs_count; ++i)
   1f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f972:	3301      	adds	r3, #1
   1f974:	627b      	str	r3, [r7, #36]	; 0x24
   1f976:	68bb      	ldr	r3, [r7, #8]
   1f978:	681a      	ldr	r2, [r3, #0]
   1f97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f97c:	429a      	cmp	r2, r3
   1f97e:	d900      	bls.n	1f982 <atcacert_merge_device_loc+0x236>
   1f980:	e740      	b.n	1f804 <atcacert_merge_device_loc+0xb8>
            cur_device_loc->count = (uint16_t)(cur_end - cur_device_loc->offset);
        }
        break;
    }

    if (i == *device_locs_count)
   1f982:	68bb      	ldr	r3, [r7, #8]
   1f984:	681a      	ldr	r2, [r3, #0]
   1f986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f988:	429a      	cmp	r2, r3
   1f98a:	d157      	bne.n	1fa3c <atcacert_merge_device_loc+0x2f0>
    {
        // New device_loc wasn't merged into an existing one, add to the end of the list
        if (*device_locs_count >= device_locs_max_count)
   1f98c:	68bb      	ldr	r3, [r7, #8]
   1f98e:	681a      	ldr	r2, [r3, #0]
   1f990:	687b      	ldr	r3, [r7, #4]
   1f992:	429a      	cmp	r2, r3
   1f994:	d301      	bcc.n	1f99a <atcacert_merge_device_loc+0x24e>
        {
            return ATCACERT_E_BUFFER_TOO_SMALL;  // No room to add to list
   1f996:	2303      	movs	r3, #3
   1f998:	e051      	b.n	1fa3e <atcacert_merge_device_loc+0x2f2>

        }
        device_locs[*device_locs_count] = *device_loc;
   1f99a:	68bb      	ldr	r3, [r7, #8]
   1f99c:	681a      	ldr	r2, [r3, #0]
   1f99e:	0013      	movs	r3, r2
   1f9a0:	00db      	lsls	r3, r3, #3
   1f9a2:	1a9b      	subs	r3, r3, r2
   1f9a4:	68fa      	ldr	r2, [r7, #12]
   1f9a6:	18d2      	adds	r2, r2, r3
   1f9a8:	683b      	ldr	r3, [r7, #0]
   1f9aa:	0010      	movs	r0, r2
   1f9ac:	0019      	movs	r1, r3
   1f9ae:	2307      	movs	r3, #7
   1f9b0:	001a      	movs	r2, r3
   1f9b2:	f005 fe9c 	bl	256ee <memcpy>
        // Adjust for block size
        device_locs[*device_locs_count].offset = (uint16_t)new_offset;
   1f9b6:	68bb      	ldr	r3, [r7, #8]
   1f9b8:	681a      	ldr	r2, [r3, #0]
   1f9ba:	0013      	movs	r3, r2
   1f9bc:	00db      	lsls	r3, r3, #3
   1f9be:	1a9b      	subs	r3, r3, r2
   1f9c0:	68fa      	ldr	r2, [r7, #12]
   1f9c2:	18d3      	adds	r3, r2, r3
   1f9c4:	6a3a      	ldr	r2, [r7, #32]
   1f9c6:	b292      	uxth	r2, r2
   1f9c8:	3303      	adds	r3, #3
   1f9ca:	21ff      	movs	r1, #255	; 0xff
   1f9cc:	4011      	ands	r1, r2
   1f9ce:	000c      	movs	r4, r1
   1f9d0:	7819      	ldrb	r1, [r3, #0]
   1f9d2:	2000      	movs	r0, #0
   1f9d4:	4001      	ands	r1, r0
   1f9d6:	1c08      	adds	r0, r1, #0
   1f9d8:	1c21      	adds	r1, r4, #0
   1f9da:	4301      	orrs	r1, r0
   1f9dc:	7019      	strb	r1, [r3, #0]
   1f9de:	0a12      	lsrs	r2, r2, #8
   1f9e0:	b290      	uxth	r0, r2
   1f9e2:	785a      	ldrb	r2, [r3, #1]
   1f9e4:	2100      	movs	r1, #0
   1f9e6:	400a      	ands	r2, r1
   1f9e8:	1c11      	adds	r1, r2, #0
   1f9ea:	1c02      	adds	r2, r0, #0
   1f9ec:	430a      	orrs	r2, r1
   1f9ee:	705a      	strb	r2, [r3, #1]
        device_locs[*device_locs_count].count = (uint16_t)(new_end - new_offset);
   1f9f0:	68bb      	ldr	r3, [r7, #8]
   1f9f2:	681a      	ldr	r2, [r3, #0]
   1f9f4:	0013      	movs	r3, r2
   1f9f6:	00db      	lsls	r3, r3, #3
   1f9f8:	1a9b      	subs	r3, r3, r2
   1f9fa:	68fa      	ldr	r2, [r7, #12]
   1f9fc:	18d3      	adds	r3, r2, r3
   1f9fe:	69fa      	ldr	r2, [r7, #28]
   1fa00:	b291      	uxth	r1, r2
   1fa02:	6a3a      	ldr	r2, [r7, #32]
   1fa04:	b292      	uxth	r2, r2
   1fa06:	1a8a      	subs	r2, r1, r2
   1fa08:	b292      	uxth	r2, r2
   1fa0a:	3305      	adds	r3, #5
   1fa0c:	21ff      	movs	r1, #255	; 0xff
   1fa0e:	4011      	ands	r1, r2
   1fa10:	000c      	movs	r4, r1
   1fa12:	7819      	ldrb	r1, [r3, #0]
   1fa14:	2000      	movs	r0, #0
   1fa16:	4001      	ands	r1, r0
   1fa18:	1c08      	adds	r0, r1, #0
   1fa1a:	1c21      	adds	r1, r4, #0
   1fa1c:	4301      	orrs	r1, r0
   1fa1e:	7019      	strb	r1, [r3, #0]
   1fa20:	0a12      	lsrs	r2, r2, #8
   1fa22:	b290      	uxth	r0, r2
   1fa24:	785a      	ldrb	r2, [r3, #1]
   1fa26:	2100      	movs	r1, #0
   1fa28:	400a      	ands	r2, r1
   1fa2a:	1c11      	adds	r1, r2, #0
   1fa2c:	1c02      	adds	r2, r0, #0
   1fa2e:	430a      	orrs	r2, r1
   1fa30:	705a      	strb	r2, [r3, #1]
        (*device_locs_count)++;
   1fa32:	68bb      	ldr	r3, [r7, #8]
   1fa34:	681b      	ldr	r3, [r3, #0]
   1fa36:	1c5a      	adds	r2, r3, #1
   1fa38:	68bb      	ldr	r3, [r7, #8]
   1fa3a:	601a      	str	r2, [r3, #0]
    }

    return ATCACERT_E_SUCCESS;
   1fa3c:	2300      	movs	r3, #0
}
   1fa3e:	0018      	movs	r0, r3
   1fa40:	46bd      	mov	sp, r7
   1fa42:	b00b      	add	sp, #44	; 0x2c
   1fa44:	bd90      	pop	{r4, r7, pc}
   1fa46:	46c0      	nop			; (mov r8, r8)

0001fa48 <atcacert_get_device_locs>:
int atcacert_get_device_locs(const atcacert_def_t*  cert_def,
                             atcacert_device_loc_t* device_locs,
                             size_t*                device_locs_count,
                             size_t                 device_locs_max_count,
                             size_t                 block_size)
{
   1fa48:	b590      	push	{r4, r7, lr}
   1fa4a:	b08b      	sub	sp, #44	; 0x2c
   1fa4c:	af02      	add	r7, sp, #8
   1fa4e:	60f8      	str	r0, [r7, #12]
   1fa50:	60b9      	str	r1, [r7, #8]
   1fa52:	607a      	str	r2, [r7, #4]
   1fa54:	603b      	str	r3, [r7, #0]
    int ret = 0;
   1fa56:	2300      	movs	r3, #0
   1fa58:	61bb      	str	r3, [r7, #24]
    size_t i;

    if (cert_def == NULL || device_locs == NULL || device_locs_count == NULL)
   1fa5a:	68fb      	ldr	r3, [r7, #12]
   1fa5c:	2b00      	cmp	r3, #0
   1fa5e:	d005      	beq.n	1fa6c <atcacert_get_device_locs+0x24>
   1fa60:	68bb      	ldr	r3, [r7, #8]
   1fa62:	2b00      	cmp	r3, #0
   1fa64:	d002      	beq.n	1fa6c <atcacert_get_device_locs+0x24>
   1fa66:	687b      	ldr	r3, [r7, #4]
   1fa68:	2b00      	cmp	r3, #0
   1fa6a:	d101      	bne.n	1fa70 <atcacert_get_device_locs+0x28>
    {
        return ATCACERT_E_BAD_PARAMS;
   1fa6c:	2302      	movs	r3, #2
   1fa6e:	e0c7      	b.n	1fc00 <atcacert_get_device_locs+0x1b8>
    }

    ret = atcacert_merge_device_loc(
   1fa70:	68fb      	ldr	r3, [r7, #12]
   1fa72:	331a      	adds	r3, #26
   1fa74:	001c      	movs	r4, r3
   1fa76:	683a      	ldr	r2, [r7, #0]
   1fa78:	6879      	ldr	r1, [r7, #4]
   1fa7a:	68b8      	ldr	r0, [r7, #8]
   1fa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1fa7e:	9300      	str	r3, [sp, #0]
   1fa80:	0023      	movs	r3, r4
   1fa82:	f7ff fe63 	bl	1f74c <atcacert_merge_device_loc>
   1fa86:	0003      	movs	r3, r0
   1fa88:	61bb      	str	r3, [r7, #24]
        device_locs,
        device_locs_count,
        device_locs_max_count,
        &cert_def->comp_cert_dev_loc,
        block_size);
    if (ret != ATCACERT_E_SUCCESS)
   1fa8a:	69bb      	ldr	r3, [r7, #24]
   1fa8c:	2b00      	cmp	r3, #0
   1fa8e:	d001      	beq.n	1fa94 <atcacert_get_device_locs+0x4c>
    {
        return ret;
   1fa90:	69bb      	ldr	r3, [r7, #24]
   1fa92:	e0b5      	b.n	1fc00 <atcacert_get_device_locs+0x1b8>
    }

    ret = atcacert_merge_device_loc(
   1fa94:	68fb      	ldr	r3, [r7, #12]
   1fa96:	1d5c      	adds	r4, r3, #5
   1fa98:	683a      	ldr	r2, [r7, #0]
   1fa9a:	6879      	ldr	r1, [r7, #4]
   1fa9c:	68b8      	ldr	r0, [r7, #8]
   1fa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1faa0:	9300      	str	r3, [sp, #0]
   1faa2:	0023      	movs	r3, r4
   1faa4:	f7ff fe52 	bl	1f74c <atcacert_merge_device_loc>
   1faa8:	0003      	movs	r3, r0
   1faaa:	61bb      	str	r3, [r7, #24]
        device_locs,
        device_locs_count,
        device_locs_max_count,
        &cert_def->cert_sn_dev_loc,
        block_size);
    if (ret != ATCACERT_E_SUCCESS)
   1faac:	69bb      	ldr	r3, [r7, #24]
   1faae:	2b00      	cmp	r3, #0
   1fab0:	d001      	beq.n	1fab6 <atcacert_get_device_locs+0x6e>
    {
        return ret;
   1fab2:	69bb      	ldr	r3, [r7, #24]
   1fab4:	e0a4      	b.n	1fc00 <atcacert_get_device_locs+0x1b8>
    }

    ret = atcacert_merge_device_loc(
   1fab6:	68fb      	ldr	r3, [r7, #12]
   1fab8:	3313      	adds	r3, #19
   1faba:	001c      	movs	r4, r3
   1fabc:	683a      	ldr	r2, [r7, #0]
   1fabe:	6879      	ldr	r1, [r7, #4]
   1fac0:	68b8      	ldr	r0, [r7, #8]
   1fac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1fac4:	9300      	str	r3, [sp, #0]
   1fac6:	0023      	movs	r3, r4
   1fac8:	f7ff fe40 	bl	1f74c <atcacert_merge_device_loc>
   1facc:	0003      	movs	r3, r0
   1face:	61bb      	str	r3, [r7, #24]
        device_locs,
        device_locs_count,
        device_locs_max_count,
        &cert_def->public_key_dev_loc,
        block_size);
    if (ret != ATCACERT_E_SUCCESS)
   1fad0:	69bb      	ldr	r3, [r7, #24]
   1fad2:	2b00      	cmp	r3, #0
   1fad4:	d001      	beq.n	1fada <atcacert_get_device_locs+0x92>
    {
        return ret;
   1fad6:	69bb      	ldr	r3, [r7, #24]
   1fad8:	e092      	b.n	1fc00 <atcacert_get_device_locs+0x1b8>
    }

    if (cert_def->cert_elements_count > 0 && cert_def->cert_elements == NULL)
   1fada:	68fb      	ldr	r3, [r7, #12]
   1fadc:	2245      	movs	r2, #69	; 0x45
   1fade:	5c9b      	ldrb	r3, [r3, r2]
   1fae0:	2b00      	cmp	r3, #0
   1fae2:	d011      	beq.n	1fb08 <atcacert_get_device_locs+0xc0>
   1fae4:	68fb      	ldr	r3, [r7, #12]
   1fae6:	2241      	movs	r2, #65	; 0x41
   1fae8:	5c9a      	ldrb	r2, [r3, r2]
   1faea:	2142      	movs	r1, #66	; 0x42
   1faec:	5c59      	ldrb	r1, [r3, r1]
   1faee:	0209      	lsls	r1, r1, #8
   1faf0:	430a      	orrs	r2, r1
   1faf2:	2143      	movs	r1, #67	; 0x43
   1faf4:	5c59      	ldrb	r1, [r3, r1]
   1faf6:	0409      	lsls	r1, r1, #16
   1faf8:	430a      	orrs	r2, r1
   1fafa:	2144      	movs	r1, #68	; 0x44
   1fafc:	5c5b      	ldrb	r3, [r3, r1]
   1fafe:	061b      	lsls	r3, r3, #24
   1fb00:	4313      	orrs	r3, r2
   1fb02:	d101      	bne.n	1fb08 <atcacert_get_device_locs+0xc0>
    {
        return ATCACERT_E_BAD_CERT;  // Cert def is in an invalid state
   1fb04:	230a      	movs	r3, #10
   1fb06:	e07b      	b.n	1fc00 <atcacert_get_device_locs+0x1b8>

    }
    for (i = 0; i < cert_def->cert_elements_count; i++)
   1fb08:	2300      	movs	r3, #0
   1fb0a:	61fb      	str	r3, [r7, #28]
   1fb0c:	e02a      	b.n	1fb64 <atcacert_get_device_locs+0x11c>
    {
        ret = atcacert_merge_device_loc(
            device_locs,
            device_locs_count,
            device_locs_max_count,
            &cert_def->cert_elements[i].device_loc,
   1fb0e:	68fb      	ldr	r3, [r7, #12]
   1fb10:	2241      	movs	r2, #65	; 0x41
   1fb12:	5c9a      	ldrb	r2, [r3, r2]
   1fb14:	2142      	movs	r1, #66	; 0x42
   1fb16:	5c59      	ldrb	r1, [r3, r1]
   1fb18:	0209      	lsls	r1, r1, #8
   1fb1a:	430a      	orrs	r2, r1
   1fb1c:	2143      	movs	r1, #67	; 0x43
   1fb1e:	5c59      	ldrb	r1, [r3, r1]
   1fb20:	0409      	lsls	r1, r1, #16
   1fb22:	430a      	orrs	r2, r1
   1fb24:	2144      	movs	r1, #68	; 0x44
   1fb26:	5c5b      	ldrb	r3, [r3, r1]
   1fb28:	061b      	lsls	r3, r3, #24
   1fb2a:	4313      	orrs	r3, r2
   1fb2c:	0019      	movs	r1, r3
   1fb2e:	69fa      	ldr	r2, [r7, #28]
   1fb30:	0013      	movs	r3, r2
   1fb32:	005b      	lsls	r3, r3, #1
   1fb34:	189b      	adds	r3, r3, r2
   1fb36:	00da      	lsls	r2, r3, #3
   1fb38:	189b      	adds	r3, r3, r2
   1fb3a:	18cb      	adds	r3, r1, r3
        return ATCACERT_E_BAD_CERT;  // Cert def is in an invalid state

    }
    for (i = 0; i < cert_def->cert_elements_count; i++)
    {
        ret = atcacert_merge_device_loc(
   1fb3c:	3310      	adds	r3, #16
   1fb3e:	001c      	movs	r4, r3
   1fb40:	683a      	ldr	r2, [r7, #0]
   1fb42:	6879      	ldr	r1, [r7, #4]
   1fb44:	68b8      	ldr	r0, [r7, #8]
   1fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1fb48:	9300      	str	r3, [sp, #0]
   1fb4a:	0023      	movs	r3, r4
   1fb4c:	f7ff fdfe 	bl	1f74c <atcacert_merge_device_loc>
   1fb50:	0003      	movs	r3, r0
   1fb52:	61bb      	str	r3, [r7, #24]
            device_locs,
            device_locs_count,
            device_locs_max_count,
            &cert_def->cert_elements[i].device_loc,
            block_size);
        if (ret != ATCACERT_E_SUCCESS)
   1fb54:	69bb      	ldr	r3, [r7, #24]
   1fb56:	2b00      	cmp	r3, #0
   1fb58:	d001      	beq.n	1fb5e <atcacert_get_device_locs+0x116>
        {
            return ret;
   1fb5a:	69bb      	ldr	r3, [r7, #24]
   1fb5c:	e050      	b.n	1fc00 <atcacert_get_device_locs+0x1b8>
    if (cert_def->cert_elements_count > 0 && cert_def->cert_elements == NULL)
    {
        return ATCACERT_E_BAD_CERT;  // Cert def is in an invalid state

    }
    for (i = 0; i < cert_def->cert_elements_count; i++)
   1fb5e:	69fb      	ldr	r3, [r7, #28]
   1fb60:	3301      	adds	r3, #1
   1fb62:	61fb      	str	r3, [r7, #28]
   1fb64:	68fb      	ldr	r3, [r7, #12]
   1fb66:	2245      	movs	r2, #69	; 0x45
   1fb68:	5c9b      	ldrb	r3, [r3, r2]
   1fb6a:	001a      	movs	r2, r3
   1fb6c:	69fb      	ldr	r3, [r7, #28]
   1fb6e:	429a      	cmp	r2, r3
   1fb70:	d8cd      	bhi.n	1fb0e <atcacert_get_device_locs+0xc6>
            return ret;
        }
    }

    // Add the device SN to the list if the cert serial number scheme requires it
    if (cert_def->sn_source == SNSRC_DEVICE_SN
   1fb72:	68fb      	ldr	r3, [r7, #12]
   1fb74:	791b      	ldrb	r3, [r3, #4]
   1fb76:	2b08      	cmp	r3, #8
   1fb78:	d00b      	beq.n	1fb92 <atcacert_get_device_locs+0x14a>
        || cert_def->sn_source == SNSRC_DEVICE_SN_HASH
   1fb7a:	68fb      	ldr	r3, [r7, #12]
   1fb7c:	791b      	ldrb	r3, [r3, #4]
   1fb7e:	2b0b      	cmp	r3, #11
   1fb80:	d007      	beq.n	1fb92 <atcacert_get_device_locs+0x14a>
        || cert_def->sn_source == SNSRC_DEVICE_SN_HASH_POS
   1fb82:	68fb      	ldr	r3, [r7, #12]
   1fb84:	791b      	ldrb	r3, [r3, #4]
   1fb86:	2b0d      	cmp	r3, #13
   1fb88:	d003      	beq.n	1fb92 <atcacert_get_device_locs+0x14a>
        || cert_def->sn_source == SNSRC_DEVICE_SN_HASH_RAW)
   1fb8a:	68fb      	ldr	r3, [r7, #12]
   1fb8c:	791b      	ldrb	r3, [r3, #4]
   1fb8e:	2b0f      	cmp	r3, #15
   1fb90:	d135      	bne.n	1fbfe <atcacert_get_device_locs+0x1b6>
    {
        // Device SN is config zone bytes 0-3 and 8-12
        atcacert_device_loc_t device_sn_loc = {
   1fb92:	2310      	movs	r3, #16
   1fb94:	18fb      	adds	r3, r7, r3
   1fb96:	2200      	movs	r2, #0
   1fb98:	701a      	strb	r2, [r3, #0]
   1fb9a:	2310      	movs	r3, #16
   1fb9c:	18fb      	adds	r3, r7, r3
   1fb9e:	2200      	movs	r2, #0
   1fba0:	705a      	strb	r2, [r3, #1]
   1fba2:	2310      	movs	r3, #16
   1fba4:	18fb      	adds	r3, r7, r3
   1fba6:	2200      	movs	r2, #0
   1fba8:	709a      	strb	r2, [r3, #2]
   1fbaa:	2310      	movs	r3, #16
   1fbac:	18fb      	adds	r3, r7, r3
   1fbae:	3303      	adds	r3, #3
   1fbb0:	781a      	ldrb	r2, [r3, #0]
   1fbb2:	2100      	movs	r1, #0
   1fbb4:	400a      	ands	r2, r1
   1fbb6:	701a      	strb	r2, [r3, #0]
   1fbb8:	785a      	ldrb	r2, [r3, #1]
   1fbba:	2100      	movs	r1, #0
   1fbbc:	400a      	ands	r2, r1
   1fbbe:	705a      	strb	r2, [r3, #1]
   1fbc0:	2310      	movs	r3, #16
   1fbc2:	18fb      	adds	r3, r7, r3
   1fbc4:	3305      	adds	r3, #5
   1fbc6:	781a      	ldrb	r2, [r3, #0]
   1fbc8:	2100      	movs	r1, #0
   1fbca:	400a      	ands	r2, r1
   1fbcc:	1c11      	adds	r1, r2, #0
   1fbce:	220d      	movs	r2, #13
   1fbd0:	430a      	orrs	r2, r1
   1fbd2:	701a      	strb	r2, [r3, #0]
   1fbd4:	785a      	ldrb	r2, [r3, #1]
   1fbd6:	2100      	movs	r1, #0
   1fbd8:	400a      	ands	r2, r1
   1fbda:	705a      	strb	r2, [r3, #1]
            .is_genkey  = FALSE,         // Ignored
            .offset     = 0,
            .count      = 13
        };

        ret = atcacert_merge_device_loc(
   1fbdc:	2310      	movs	r3, #16
   1fbde:	18fc      	adds	r4, r7, r3
   1fbe0:	683a      	ldr	r2, [r7, #0]
   1fbe2:	6879      	ldr	r1, [r7, #4]
   1fbe4:	68b8      	ldr	r0, [r7, #8]
   1fbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1fbe8:	9300      	str	r3, [sp, #0]
   1fbea:	0023      	movs	r3, r4
   1fbec:	f7ff fdae 	bl	1f74c <atcacert_merge_device_loc>
   1fbf0:	0003      	movs	r3, r0
   1fbf2:	61bb      	str	r3, [r7, #24]
            device_locs,
            device_locs_count,
            device_locs_max_count,
            &device_sn_loc,
            block_size);
        if (ret != ATCACERT_E_SUCCESS)
   1fbf4:	69bb      	ldr	r3, [r7, #24]
   1fbf6:	2b00      	cmp	r3, #0
   1fbf8:	d001      	beq.n	1fbfe <atcacert_get_device_locs+0x1b6>
        {
            return ret;
   1fbfa:	69bb      	ldr	r3, [r7, #24]
   1fbfc:	e000      	b.n	1fc00 <atcacert_get_device_locs+0x1b8>
        }
    }

    return ATCACERT_E_SUCCESS;
   1fbfe:	2300      	movs	r3, #0
}
   1fc00:	0018      	movs	r0, r3
   1fc02:	46bd      	mov	sp, r7
   1fc04:	b009      	add	sp, #36	; 0x24
   1fc06:	bd90      	pop	{r4, r7, pc}

0001fc08 <atcacert_is_device_loc_match>:

static const uint8_t* atcacert_is_device_loc_match(const atcacert_device_loc_t* device_loc_dest,
                                                   const atcacert_device_loc_t* device_loc_src,
                                                   const uint8_t*               src_data)
{
   1fc08:	b580      	push	{r7, lr}
   1fc0a:	b086      	sub	sp, #24
   1fc0c:	af00      	add	r7, sp, #0
   1fc0e:	60f8      	str	r0, [r7, #12]
   1fc10:	60b9      	str	r1, [r7, #8]
   1fc12:	607a      	str	r2, [r7, #4]
    size_t dest_end = device_loc_dest->offset + device_loc_dest->count;
   1fc14:	68fb      	ldr	r3, [r7, #12]
   1fc16:	78da      	ldrb	r2, [r3, #3]
   1fc18:	791b      	ldrb	r3, [r3, #4]
   1fc1a:	021b      	lsls	r3, r3, #8
   1fc1c:	4313      	orrs	r3, r2
   1fc1e:	b29b      	uxth	r3, r3
   1fc20:	0019      	movs	r1, r3
   1fc22:	68fb      	ldr	r3, [r7, #12]
   1fc24:	795a      	ldrb	r2, [r3, #5]
   1fc26:	799b      	ldrb	r3, [r3, #6]
   1fc28:	021b      	lsls	r3, r3, #8
   1fc2a:	4313      	orrs	r3, r2
   1fc2c:	b29b      	uxth	r3, r3
   1fc2e:	18cb      	adds	r3, r1, r3
   1fc30:	617b      	str	r3, [r7, #20]
    size_t src_end = device_loc_src->offset + device_loc_src->count;
   1fc32:	68bb      	ldr	r3, [r7, #8]
   1fc34:	78da      	ldrb	r2, [r3, #3]
   1fc36:	791b      	ldrb	r3, [r3, #4]
   1fc38:	021b      	lsls	r3, r3, #8
   1fc3a:	4313      	orrs	r3, r2
   1fc3c:	b29b      	uxth	r3, r3
   1fc3e:	0019      	movs	r1, r3
   1fc40:	68bb      	ldr	r3, [r7, #8]
   1fc42:	795a      	ldrb	r2, [r3, #5]
   1fc44:	799b      	ldrb	r3, [r3, #6]
   1fc46:	021b      	lsls	r3, r3, #8
   1fc48:	4313      	orrs	r3, r2
   1fc4a:	b29b      	uxth	r3, r3
   1fc4c:	18cb      	adds	r3, r1, r3
   1fc4e:	613b      	str	r3, [r7, #16]

    if (device_loc_dest->zone == DEVZONE_NONE || device_loc_dest->count <= 0)
   1fc50:	68fb      	ldr	r3, [r7, #12]
   1fc52:	781b      	ldrb	r3, [r3, #0]
   1fc54:	2b07      	cmp	r3, #7
   1fc56:	d007      	beq.n	1fc68 <atcacert_is_device_loc_match+0x60>
   1fc58:	68fb      	ldr	r3, [r7, #12]
   1fc5a:	795a      	ldrb	r2, [r3, #5]
   1fc5c:	799b      	ldrb	r3, [r3, #6]
   1fc5e:	021b      	lsls	r3, r3, #8
   1fc60:	4313      	orrs	r3, r2
   1fc62:	b29b      	uxth	r3, r3
   1fc64:	2b00      	cmp	r3, #0
   1fc66:	d101      	bne.n	1fc6c <atcacert_is_device_loc_match+0x64>
    {
        return NULL;    // device_loc_dest is a null location
   1fc68:	2300      	movs	r3, #0
   1fc6a:	e052      	b.n	1fd12 <atcacert_is_device_loc_match+0x10a>
    }
    if (device_loc_src->zone == DEVZONE_NONE || device_loc_src->count <= 0)
   1fc6c:	68bb      	ldr	r3, [r7, #8]
   1fc6e:	781b      	ldrb	r3, [r3, #0]
   1fc70:	2b07      	cmp	r3, #7
   1fc72:	d007      	beq.n	1fc84 <atcacert_is_device_loc_match+0x7c>
   1fc74:	68bb      	ldr	r3, [r7, #8]
   1fc76:	795a      	ldrb	r2, [r3, #5]
   1fc78:	799b      	ldrb	r3, [r3, #6]
   1fc7a:	021b      	lsls	r3, r3, #8
   1fc7c:	4313      	orrs	r3, r2
   1fc7e:	b29b      	uxth	r3, r3
   1fc80:	2b00      	cmp	r3, #0
   1fc82:	d101      	bne.n	1fc88 <atcacert_is_device_loc_match+0x80>
    {
        return NULL;    // device_loc_src is a null location
   1fc84:	2300      	movs	r3, #0
   1fc86:	e044      	b.n	1fd12 <atcacert_is_device_loc_match+0x10a>
    }
    if (device_loc_dest->zone != device_loc_src->zone)
   1fc88:	68fb      	ldr	r3, [r7, #12]
   1fc8a:	781a      	ldrb	r2, [r3, #0]
   1fc8c:	68bb      	ldr	r3, [r7, #8]
   1fc8e:	781b      	ldrb	r3, [r3, #0]
   1fc90:	429a      	cmp	r2, r3
   1fc92:	d001      	beq.n	1fc98 <atcacert_is_device_loc_match+0x90>
    {
        return NULL;
   1fc94:	2300      	movs	r3, #0
   1fc96:	e03c      	b.n	1fd12 <atcacert_is_device_loc_match+0x10a>
    }
    if (device_loc_dest->zone == DEVZONE_DATA && device_loc_dest->slot != device_loc_src->slot)
   1fc98:	68fb      	ldr	r3, [r7, #12]
   1fc9a:	781b      	ldrb	r3, [r3, #0]
   1fc9c:	2b02      	cmp	r3, #2
   1fc9e:	d107      	bne.n	1fcb0 <atcacert_is_device_loc_match+0xa8>
   1fca0:	68fb      	ldr	r3, [r7, #12]
   1fca2:	785a      	ldrb	r2, [r3, #1]
   1fca4:	68bb      	ldr	r3, [r7, #8]
   1fca6:	785b      	ldrb	r3, [r3, #1]
   1fca8:	429a      	cmp	r2, r3
   1fcaa:	d001      	beq.n	1fcb0 <atcacert_is_device_loc_match+0xa8>
    {
        return NULL;
   1fcac:	2300      	movs	r3, #0
   1fcae:	e030      	b.n	1fd12 <atcacert_is_device_loc_match+0x10a>
    }
    if (device_loc_dest->zone == DEVZONE_DATA && device_loc_dest->is_genkey != device_loc_src->is_genkey)
   1fcb0:	68fb      	ldr	r3, [r7, #12]
   1fcb2:	781b      	ldrb	r3, [r3, #0]
   1fcb4:	2b02      	cmp	r3, #2
   1fcb6:	d107      	bne.n	1fcc8 <atcacert_is_device_loc_match+0xc0>
   1fcb8:	68fb      	ldr	r3, [r7, #12]
   1fcba:	789a      	ldrb	r2, [r3, #2]
   1fcbc:	68bb      	ldr	r3, [r7, #8]
   1fcbe:	789b      	ldrb	r3, [r3, #2]
   1fcc0:	429a      	cmp	r2, r3
   1fcc2:	d001      	beq.n	1fcc8 <atcacert_is_device_loc_match+0xc0>
    {
        return NULL;
   1fcc4:	2300      	movs	r3, #0
   1fcc6:	e024      	b.n	1fd12 <atcacert_is_device_loc_match+0x10a>
    }

    if (device_loc_dest->offset < device_loc_src->offset || dest_end > src_end)
   1fcc8:	68fb      	ldr	r3, [r7, #12]
   1fcca:	78da      	ldrb	r2, [r3, #3]
   1fccc:	791b      	ldrb	r3, [r3, #4]
   1fcce:	021b      	lsls	r3, r3, #8
   1fcd0:	4313      	orrs	r3, r2
   1fcd2:	b29a      	uxth	r2, r3
   1fcd4:	68bb      	ldr	r3, [r7, #8]
   1fcd6:	78d9      	ldrb	r1, [r3, #3]
   1fcd8:	791b      	ldrb	r3, [r3, #4]
   1fcda:	021b      	lsls	r3, r3, #8
   1fcdc:	430b      	orrs	r3, r1
   1fcde:	b29b      	uxth	r3, r3
   1fce0:	429a      	cmp	r2, r3
   1fce2:	d303      	bcc.n	1fcec <atcacert_is_device_loc_match+0xe4>
   1fce4:	697a      	ldr	r2, [r7, #20]
   1fce6:	693b      	ldr	r3, [r7, #16]
   1fce8:	429a      	cmp	r2, r3
   1fcea:	d901      	bls.n	1fcf0 <atcacert_is_device_loc_match+0xe8>
    {
        return NULL;
   1fcec:	2300      	movs	r3, #0
   1fcee:	e010      	b.n	1fd12 <atcacert_is_device_loc_match+0x10a>
    }

    // device_loc_dest is encompassed by device_loc_src, return a pointer to the data for device_loc_dest
    return src_data + (device_loc_dest->offset - device_loc_src->offset);
   1fcf0:	68fb      	ldr	r3, [r7, #12]
   1fcf2:	78da      	ldrb	r2, [r3, #3]
   1fcf4:	791b      	ldrb	r3, [r3, #4]
   1fcf6:	021b      	lsls	r3, r3, #8
   1fcf8:	4313      	orrs	r3, r2
   1fcfa:	b29b      	uxth	r3, r3
   1fcfc:	0019      	movs	r1, r3
   1fcfe:	68bb      	ldr	r3, [r7, #8]
   1fd00:	78da      	ldrb	r2, [r3, #3]
   1fd02:	791b      	ldrb	r3, [r3, #4]
   1fd04:	021b      	lsls	r3, r3, #8
   1fd06:	4313      	orrs	r3, r2
   1fd08:	b29b      	uxth	r3, r3
   1fd0a:	1acb      	subs	r3, r1, r3
   1fd0c:	001a      	movs	r2, r3
   1fd0e:	687b      	ldr	r3, [r7, #4]
   1fd10:	189b      	adds	r3, r3, r2
}
   1fd12:	0018      	movs	r0, r3
   1fd14:	46bd      	mov	sp, r7
   1fd16:	b006      	add	sp, #24
   1fd18:	bd80      	pop	{r7, pc}
   1fd1a:	46c0      	nop			; (mov r8, r8)

0001fd1c <get_effective_offset>:

static int get_effective_offset(const atcacert_def_t* cert_def, const uint8_t* cert, size_t ref_offset)
{
   1fd1c:	b580      	push	{r7, lr}
   1fd1e:	b086      	sub	sp, #24
   1fd20:	af00      	add	r7, sp, #0
   1fd22:	60f8      	str	r0, [r7, #12]
   1fd24:	60b9      	str	r1, [r7, #8]
   1fd26:	607a      	str	r2, [r7, #4]
    size_t sn_offset = 0;
   1fd28:	2300      	movs	r3, #0
   1fd2a:	617b      	str	r3, [r7, #20]

    if (cert_def->type != CERTTYPE_X509 || cert_def->sn_source != SNSRC_STORED_DYNAMIC)
   1fd2c:	68fb      	ldr	r3, [r7, #12]
   1fd2e:	781b      	ldrb	r3, [r3, #0]
   1fd30:	2b00      	cmp	r3, #0
   1fd32:	d103      	bne.n	1fd3c <get_effective_offset+0x20>
   1fd34:	68fb      	ldr	r3, [r7, #12]
   1fd36:	791b      	ldrb	r3, [r3, #4]
   1fd38:	2b07      	cmp	r3, #7
   1fd3a:	d001      	beq.n	1fd40 <get_effective_offset+0x24>
    {
        return 0;
   1fd3c:	2300      	movs	r3, #0
   1fd3e:	e027      	b.n	1fd90 <get_effective_offset+0x74>
    }

    sn_offset = cert_def->std_cert_elements[STDCERT_CERT_SN].offset;
   1fd40:	68fb      	ldr	r3, [r7, #12]
   1fd42:	2235      	movs	r2, #53	; 0x35
   1fd44:	5c9a      	ldrb	r2, [r3, r2]
   1fd46:	2136      	movs	r1, #54	; 0x36
   1fd48:	5c5b      	ldrb	r3, [r3, r1]
   1fd4a:	021b      	lsls	r3, r3, #8
   1fd4c:	4313      	orrs	r3, r2
   1fd4e:	b29b      	uxth	r3, r3
   1fd50:	617b      	str	r3, [r7, #20]
    if (ref_offset <= sn_offset)
   1fd52:	687a      	ldr	r2, [r7, #4]
   1fd54:	697b      	ldr	r3, [r7, #20]
   1fd56:	429a      	cmp	r2, r3
   1fd58:	d801      	bhi.n	1fd5e <get_effective_offset+0x42>
    {
        return 0;
   1fd5a:	2300      	movs	r3, #0
   1fd5c:	e018      	b.n	1fd90 <get_effective_offset+0x74>
    }

    return (int)cert[sn_offset] - (int)cert_def->cert_template[sn_offset];
   1fd5e:	68ba      	ldr	r2, [r7, #8]
   1fd60:	697b      	ldr	r3, [r7, #20]
   1fd62:	18d3      	adds	r3, r2, r3
   1fd64:	781b      	ldrb	r3, [r3, #0]
   1fd66:	0018      	movs	r0, r3
   1fd68:	68fb      	ldr	r3, [r7, #12]
   1fd6a:	2246      	movs	r2, #70	; 0x46
   1fd6c:	5c9a      	ldrb	r2, [r3, r2]
   1fd6e:	2147      	movs	r1, #71	; 0x47
   1fd70:	5c59      	ldrb	r1, [r3, r1]
   1fd72:	0209      	lsls	r1, r1, #8
   1fd74:	430a      	orrs	r2, r1
   1fd76:	2148      	movs	r1, #72	; 0x48
   1fd78:	5c59      	ldrb	r1, [r3, r1]
   1fd7a:	0409      	lsls	r1, r1, #16
   1fd7c:	430a      	orrs	r2, r1
   1fd7e:	2149      	movs	r1, #73	; 0x49
   1fd80:	5c5b      	ldrb	r3, [r3, r1]
   1fd82:	061b      	lsls	r3, r3, #24
   1fd84:	4313      	orrs	r3, r2
   1fd86:	001a      	movs	r2, r3
   1fd88:	697b      	ldr	r3, [r7, #20]
   1fd8a:	18d3      	adds	r3, r2, r3
   1fd8c:	781b      	ldrb	r3, [r3, #0]
   1fd8e:	1ac3      	subs	r3, r0, r3
}
   1fd90:	0018      	movs	r0, r3
   1fd92:	46bd      	mov	sp, r7
   1fd94:	b006      	add	sp, #24
   1fd96:	bd80      	pop	{r7, pc}

0001fd98 <atcacert_cert_build_start>:
int atcacert_cert_build_start(atcacert_build_state_t* build_state,
                              const atcacert_def_t*   cert_def,
                              uint8_t*                cert,
                              size_t*                 cert_size,
                              const uint8_t           ca_public_key[64])
{
   1fd98:	b5b0      	push	{r4, r5, r7, lr}
   1fd9a:	b098      	sub	sp, #96	; 0x60
   1fd9c:	af02      	add	r7, sp, #8
   1fd9e:	60f8      	str	r0, [r7, #12]
   1fda0:	60b9      	str	r1, [r7, #8]
   1fda2:	607a      	str	r2, [r7, #4]
   1fda4:	603b      	str	r3, [r7, #0]
    int ret = 0;
   1fda6:	2300      	movs	r3, #0
   1fda8:	657b      	str	r3, [r7, #84]	; 0x54

    if (build_state == NULL || cert_def == NULL || cert == NULL || cert_size == NULL)
   1fdaa:	68fb      	ldr	r3, [r7, #12]
   1fdac:	2b00      	cmp	r3, #0
   1fdae:	d008      	beq.n	1fdc2 <atcacert_cert_build_start+0x2a>
   1fdb0:	68bb      	ldr	r3, [r7, #8]
   1fdb2:	2b00      	cmp	r3, #0
   1fdb4:	d005      	beq.n	1fdc2 <atcacert_cert_build_start+0x2a>
   1fdb6:	687b      	ldr	r3, [r7, #4]
   1fdb8:	2b00      	cmp	r3, #0
   1fdba:	d002      	beq.n	1fdc2 <atcacert_cert_build_start+0x2a>
   1fdbc:	683b      	ldr	r3, [r7, #0]
   1fdbe:	2b00      	cmp	r3, #0
   1fdc0:	d101      	bne.n	1fdc6 <atcacert_cert_build_start+0x2e>
    {
        return ATCACERT_E_BAD_PARAMS;
   1fdc2:	2302      	movs	r3, #2
   1fdc4:	e1c9      	b.n	2015a <atcacert_cert_build_start+0x3c2>
    }

    memset(build_state, 0, sizeof(*build_state));
   1fdc6:	68fb      	ldr	r3, [r7, #12]
   1fdc8:	221a      	movs	r2, #26
   1fdca:	2100      	movs	r1, #0
   1fdcc:	0018      	movs	r0, r3
   1fdce:	f005 fcac 	bl	2572a <memset>

    build_state->cert_def      = cert_def;
   1fdd2:	68fb      	ldr	r3, [r7, #12]
   1fdd4:	2208      	movs	r2, #8
   1fdd6:	18ba      	adds	r2, r7, r2
   1fdd8:	7810      	ldrb	r0, [r2, #0]
   1fdda:	781a      	ldrb	r2, [r3, #0]
   1fddc:	2100      	movs	r1, #0
   1fdde:	400a      	ands	r2, r1
   1fde0:	1c11      	adds	r1, r2, #0
   1fde2:	1c02      	adds	r2, r0, #0
   1fde4:	430a      	orrs	r2, r1
   1fde6:	701a      	strb	r2, [r3, #0]
   1fde8:	2209      	movs	r2, #9
   1fdea:	18ba      	adds	r2, r7, r2
   1fdec:	7810      	ldrb	r0, [r2, #0]
   1fdee:	785a      	ldrb	r2, [r3, #1]
   1fdf0:	2100      	movs	r1, #0
   1fdf2:	400a      	ands	r2, r1
   1fdf4:	1c11      	adds	r1, r2, #0
   1fdf6:	1c02      	adds	r2, r0, #0
   1fdf8:	430a      	orrs	r2, r1
   1fdfa:	705a      	strb	r2, [r3, #1]
   1fdfc:	220a      	movs	r2, #10
   1fdfe:	18ba      	adds	r2, r7, r2
   1fe00:	7810      	ldrb	r0, [r2, #0]
   1fe02:	789a      	ldrb	r2, [r3, #2]
   1fe04:	2100      	movs	r1, #0
   1fe06:	400a      	ands	r2, r1
   1fe08:	1c11      	adds	r1, r2, #0
   1fe0a:	1c02      	adds	r2, r0, #0
   1fe0c:	430a      	orrs	r2, r1
   1fe0e:	709a      	strb	r2, [r3, #2]
   1fe10:	220b      	movs	r2, #11
   1fe12:	18ba      	adds	r2, r7, r2
   1fe14:	7810      	ldrb	r0, [r2, #0]
   1fe16:	78da      	ldrb	r2, [r3, #3]
   1fe18:	2100      	movs	r1, #0
   1fe1a:	400a      	ands	r2, r1
   1fe1c:	1c11      	adds	r1, r2, #0
   1fe1e:	1c02      	adds	r2, r0, #0
   1fe20:	430a      	orrs	r2, r1
   1fe22:	70da      	strb	r2, [r3, #3]
    build_state->cert          = cert;
   1fe24:	68fb      	ldr	r3, [r7, #12]
   1fe26:	1d3a      	adds	r2, r7, #4
   1fe28:	7810      	ldrb	r0, [r2, #0]
   1fe2a:	791a      	ldrb	r2, [r3, #4]
   1fe2c:	2100      	movs	r1, #0
   1fe2e:	400a      	ands	r2, r1
   1fe30:	1c11      	adds	r1, r2, #0
   1fe32:	1c02      	adds	r2, r0, #0
   1fe34:	430a      	orrs	r2, r1
   1fe36:	711a      	strb	r2, [r3, #4]
   1fe38:	1d7a      	adds	r2, r7, #5
   1fe3a:	7810      	ldrb	r0, [r2, #0]
   1fe3c:	795a      	ldrb	r2, [r3, #5]
   1fe3e:	2100      	movs	r1, #0
   1fe40:	400a      	ands	r2, r1
   1fe42:	1c11      	adds	r1, r2, #0
   1fe44:	1c02      	adds	r2, r0, #0
   1fe46:	430a      	orrs	r2, r1
   1fe48:	715a      	strb	r2, [r3, #5]
   1fe4a:	1dba      	adds	r2, r7, #6
   1fe4c:	7810      	ldrb	r0, [r2, #0]
   1fe4e:	799a      	ldrb	r2, [r3, #6]
   1fe50:	2100      	movs	r1, #0
   1fe52:	400a      	ands	r2, r1
   1fe54:	1c11      	adds	r1, r2, #0
   1fe56:	1c02      	adds	r2, r0, #0
   1fe58:	430a      	orrs	r2, r1
   1fe5a:	719a      	strb	r2, [r3, #6]
   1fe5c:	1dfa      	adds	r2, r7, #7
   1fe5e:	7810      	ldrb	r0, [r2, #0]
   1fe60:	79da      	ldrb	r2, [r3, #7]
   1fe62:	2100      	movs	r1, #0
   1fe64:	400a      	ands	r2, r1
   1fe66:	1c11      	adds	r1, r2, #0
   1fe68:	1c02      	adds	r2, r0, #0
   1fe6a:	430a      	orrs	r2, r1
   1fe6c:	71da      	strb	r2, [r3, #7]
    build_state->cert_size     = cert_size;
   1fe6e:	68fb      	ldr	r3, [r7, #12]
   1fe70:	003a      	movs	r2, r7
   1fe72:	7810      	ldrb	r0, [r2, #0]
   1fe74:	7a1a      	ldrb	r2, [r3, #8]
   1fe76:	2100      	movs	r1, #0
   1fe78:	400a      	ands	r2, r1
   1fe7a:	1c11      	adds	r1, r2, #0
   1fe7c:	1c02      	adds	r2, r0, #0
   1fe7e:	430a      	orrs	r2, r1
   1fe80:	721a      	strb	r2, [r3, #8]
   1fe82:	1c7a      	adds	r2, r7, #1
   1fe84:	7810      	ldrb	r0, [r2, #0]
   1fe86:	7a5a      	ldrb	r2, [r3, #9]
   1fe88:	2100      	movs	r1, #0
   1fe8a:	400a      	ands	r2, r1
   1fe8c:	1c11      	adds	r1, r2, #0
   1fe8e:	1c02      	adds	r2, r0, #0
   1fe90:	430a      	orrs	r2, r1
   1fe92:	725a      	strb	r2, [r3, #9]
   1fe94:	1cba      	adds	r2, r7, #2
   1fe96:	7810      	ldrb	r0, [r2, #0]
   1fe98:	7a9a      	ldrb	r2, [r3, #10]
   1fe9a:	2100      	movs	r1, #0
   1fe9c:	400a      	ands	r2, r1
   1fe9e:	1c11      	adds	r1, r2, #0
   1fea0:	1c02      	adds	r2, r0, #0
   1fea2:	430a      	orrs	r2, r1
   1fea4:	729a      	strb	r2, [r3, #10]
   1fea6:	1cfa      	adds	r2, r7, #3
   1fea8:	7810      	ldrb	r0, [r2, #0]
   1feaa:	7ada      	ldrb	r2, [r3, #11]
   1feac:	2100      	movs	r1, #0
   1feae:	400a      	ands	r2, r1
   1feb0:	1c11      	adds	r1, r2, #0
   1feb2:	1c02      	adds	r2, r0, #0
   1feb4:	430a      	orrs	r2, r1
   1feb6:	72da      	strb	r2, [r3, #11]
    build_state->max_cert_size = *cert_size;
   1feb8:	683b      	ldr	r3, [r7, #0]
   1feba:	681a      	ldr	r2, [r3, #0]
   1febc:	68fb      	ldr	r3, [r7, #12]
   1febe:	21ff      	movs	r1, #255	; 0xff
   1fec0:	4011      	ands	r1, r2
   1fec2:	000c      	movs	r4, r1
   1fec4:	7b19      	ldrb	r1, [r3, #12]
   1fec6:	2000      	movs	r0, #0
   1fec8:	4001      	ands	r1, r0
   1feca:	1c08      	adds	r0, r1, #0
   1fecc:	1c21      	adds	r1, r4, #0
   1fece:	4301      	orrs	r1, r0
   1fed0:	7319      	strb	r1, [r3, #12]
   1fed2:	0a11      	lsrs	r1, r2, #8
   1fed4:	20ff      	movs	r0, #255	; 0xff
   1fed6:	4001      	ands	r1, r0
   1fed8:	000c      	movs	r4, r1
   1feda:	7b59      	ldrb	r1, [r3, #13]
   1fedc:	2000      	movs	r0, #0
   1fede:	4001      	ands	r1, r0
   1fee0:	1c08      	adds	r0, r1, #0
   1fee2:	1c21      	adds	r1, r4, #0
   1fee4:	4301      	orrs	r1, r0
   1fee6:	7359      	strb	r1, [r3, #13]
   1fee8:	0c11      	lsrs	r1, r2, #16
   1feea:	20ff      	movs	r0, #255	; 0xff
   1feec:	4001      	ands	r1, r0
   1feee:	000c      	movs	r4, r1
   1fef0:	7b99      	ldrb	r1, [r3, #14]
   1fef2:	2000      	movs	r0, #0
   1fef4:	4001      	ands	r1, r0
   1fef6:	1c08      	adds	r0, r1, #0
   1fef8:	1c21      	adds	r1, r4, #0
   1fefa:	4301      	orrs	r1, r0
   1fefc:	7399      	strb	r1, [r3, #14]
   1fefe:	0e10      	lsrs	r0, r2, #24
   1ff00:	7bda      	ldrb	r2, [r3, #15]
   1ff02:	2100      	movs	r1, #0
   1ff04:	400a      	ands	r2, r1
   1ff06:	1c11      	adds	r1, r2, #0
   1ff08:	1c02      	adds	r2, r0, #0
   1ff0a:	430a      	orrs	r2, r1
   1ff0c:	73da      	strb	r2, [r3, #15]
    build_state->is_device_sn  = FALSE;
   1ff0e:	68fb      	ldr	r3, [r7, #12]
   1ff10:	2200      	movs	r2, #0
   1ff12:	741a      	strb	r2, [r3, #16]

    if (build_state->max_cert_size < build_state->cert_def->cert_template_size)
   1ff14:	68fb      	ldr	r3, [r7, #12]
   1ff16:	7b1a      	ldrb	r2, [r3, #12]
   1ff18:	7b59      	ldrb	r1, [r3, #13]
   1ff1a:	0209      	lsls	r1, r1, #8
   1ff1c:	430a      	orrs	r2, r1
   1ff1e:	7b99      	ldrb	r1, [r3, #14]
   1ff20:	0409      	lsls	r1, r1, #16
   1ff22:	430a      	orrs	r2, r1
   1ff24:	7bdb      	ldrb	r3, [r3, #15]
   1ff26:	061b      	lsls	r3, r3, #24
   1ff28:	4313      	orrs	r3, r2
   1ff2a:	0018      	movs	r0, r3
   1ff2c:	68fb      	ldr	r3, [r7, #12]
   1ff2e:	781a      	ldrb	r2, [r3, #0]
   1ff30:	7859      	ldrb	r1, [r3, #1]
   1ff32:	0209      	lsls	r1, r1, #8
   1ff34:	430a      	orrs	r2, r1
   1ff36:	7899      	ldrb	r1, [r3, #2]
   1ff38:	0409      	lsls	r1, r1, #16
   1ff3a:	430a      	orrs	r2, r1
   1ff3c:	78db      	ldrb	r3, [r3, #3]
   1ff3e:	061b      	lsls	r3, r3, #24
   1ff40:	4313      	orrs	r3, r2
   1ff42:	224a      	movs	r2, #74	; 0x4a
   1ff44:	5c9a      	ldrb	r2, [r3, r2]
   1ff46:	214b      	movs	r1, #75	; 0x4b
   1ff48:	5c5b      	ldrb	r3, [r3, r1]
   1ff4a:	021b      	lsls	r3, r3, #8
   1ff4c:	4313      	orrs	r3, r2
   1ff4e:	b29b      	uxth	r3, r3
   1ff50:	4298      	cmp	r0, r3
   1ff52:	d220      	bcs.n	1ff96 <atcacert_cert_build_start+0x1fe>
    {
        *build_state->cert_size = build_state->cert_def->cert_template_size;
   1ff54:	68fb      	ldr	r3, [r7, #12]
   1ff56:	7a1a      	ldrb	r2, [r3, #8]
   1ff58:	7a59      	ldrb	r1, [r3, #9]
   1ff5a:	0209      	lsls	r1, r1, #8
   1ff5c:	430a      	orrs	r2, r1
   1ff5e:	7a99      	ldrb	r1, [r3, #10]
   1ff60:	0409      	lsls	r1, r1, #16
   1ff62:	430a      	orrs	r2, r1
   1ff64:	7adb      	ldrb	r3, [r3, #11]
   1ff66:	061b      	lsls	r3, r3, #24
   1ff68:	4313      	orrs	r3, r2
   1ff6a:	001a      	movs	r2, r3
   1ff6c:	68fb      	ldr	r3, [r7, #12]
   1ff6e:	7819      	ldrb	r1, [r3, #0]
   1ff70:	7858      	ldrb	r0, [r3, #1]
   1ff72:	0200      	lsls	r0, r0, #8
   1ff74:	4301      	orrs	r1, r0
   1ff76:	7898      	ldrb	r0, [r3, #2]
   1ff78:	0400      	lsls	r0, r0, #16
   1ff7a:	4301      	orrs	r1, r0
   1ff7c:	78db      	ldrb	r3, [r3, #3]
   1ff7e:	061b      	lsls	r3, r3, #24
   1ff80:	430b      	orrs	r3, r1
   1ff82:	214a      	movs	r1, #74	; 0x4a
   1ff84:	5c59      	ldrb	r1, [r3, r1]
   1ff86:	204b      	movs	r0, #75	; 0x4b
   1ff88:	5c1b      	ldrb	r3, [r3, r0]
   1ff8a:	021b      	lsls	r3, r3, #8
   1ff8c:	430b      	orrs	r3, r1
   1ff8e:	b29b      	uxth	r3, r3
   1ff90:	6013      	str	r3, [r2, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL; // cert buffer is too small to contain the template
   1ff92:	2303      	movs	r3, #3
   1ff94:	e0e1      	b.n	2015a <atcacert_cert_build_start+0x3c2>
    }

    // Initialize the cert buffer with the cert template
    *build_state->cert_size = build_state->cert_def->cert_template_size;
   1ff96:	68fb      	ldr	r3, [r7, #12]
   1ff98:	7a1a      	ldrb	r2, [r3, #8]
   1ff9a:	7a59      	ldrb	r1, [r3, #9]
   1ff9c:	0209      	lsls	r1, r1, #8
   1ff9e:	430a      	orrs	r2, r1
   1ffa0:	7a99      	ldrb	r1, [r3, #10]
   1ffa2:	0409      	lsls	r1, r1, #16
   1ffa4:	430a      	orrs	r2, r1
   1ffa6:	7adb      	ldrb	r3, [r3, #11]
   1ffa8:	061b      	lsls	r3, r3, #24
   1ffaa:	4313      	orrs	r3, r2
   1ffac:	001a      	movs	r2, r3
   1ffae:	68fb      	ldr	r3, [r7, #12]
   1ffb0:	7819      	ldrb	r1, [r3, #0]
   1ffb2:	7858      	ldrb	r0, [r3, #1]
   1ffb4:	0200      	lsls	r0, r0, #8
   1ffb6:	4301      	orrs	r1, r0
   1ffb8:	7898      	ldrb	r0, [r3, #2]
   1ffba:	0400      	lsls	r0, r0, #16
   1ffbc:	4301      	orrs	r1, r0
   1ffbe:	78db      	ldrb	r3, [r3, #3]
   1ffc0:	061b      	lsls	r3, r3, #24
   1ffc2:	430b      	orrs	r3, r1
   1ffc4:	214a      	movs	r1, #74	; 0x4a
   1ffc6:	5c59      	ldrb	r1, [r3, r1]
   1ffc8:	204b      	movs	r0, #75	; 0x4b
   1ffca:	5c1b      	ldrb	r3, [r3, r0]
   1ffcc:	021b      	lsls	r3, r3, #8
   1ffce:	430b      	orrs	r3, r1
   1ffd0:	b29b      	uxth	r3, r3
   1ffd2:	6013      	str	r3, [r2, #0]
    memcpy(build_state->cert, build_state->cert_def->cert_template, build_state->cert_def->cert_template_size);
   1ffd4:	68fb      	ldr	r3, [r7, #12]
   1ffd6:	791a      	ldrb	r2, [r3, #4]
   1ffd8:	7959      	ldrb	r1, [r3, #5]
   1ffda:	0209      	lsls	r1, r1, #8
   1ffdc:	430a      	orrs	r2, r1
   1ffde:	7999      	ldrb	r1, [r3, #6]
   1ffe0:	0409      	lsls	r1, r1, #16
   1ffe2:	430a      	orrs	r2, r1
   1ffe4:	79db      	ldrb	r3, [r3, #7]
   1ffe6:	061b      	lsls	r3, r3, #24
   1ffe8:	4313      	orrs	r3, r2
   1ffea:	0018      	movs	r0, r3
   1ffec:	68fb      	ldr	r3, [r7, #12]
   1ffee:	781a      	ldrb	r2, [r3, #0]
   1fff0:	7859      	ldrb	r1, [r3, #1]
   1fff2:	0209      	lsls	r1, r1, #8
   1fff4:	430a      	orrs	r2, r1
   1fff6:	7899      	ldrb	r1, [r3, #2]
   1fff8:	0409      	lsls	r1, r1, #16
   1fffa:	430a      	orrs	r2, r1
   1fffc:	78db      	ldrb	r3, [r3, #3]
   1fffe:	061b      	lsls	r3, r3, #24
   20000:	4313      	orrs	r3, r2
   20002:	2246      	movs	r2, #70	; 0x46
   20004:	5c9a      	ldrb	r2, [r3, r2]
   20006:	2147      	movs	r1, #71	; 0x47
   20008:	5c59      	ldrb	r1, [r3, r1]
   2000a:	0209      	lsls	r1, r1, #8
   2000c:	430a      	orrs	r2, r1
   2000e:	2148      	movs	r1, #72	; 0x48
   20010:	5c59      	ldrb	r1, [r3, r1]
   20012:	0409      	lsls	r1, r1, #16
   20014:	430a      	orrs	r2, r1
   20016:	2149      	movs	r1, #73	; 0x49
   20018:	5c5b      	ldrb	r3, [r3, r1]
   2001a:	061b      	lsls	r3, r3, #24
   2001c:	4313      	orrs	r3, r2
   2001e:	001c      	movs	r4, r3
   20020:	68fb      	ldr	r3, [r7, #12]
   20022:	781a      	ldrb	r2, [r3, #0]
   20024:	7859      	ldrb	r1, [r3, #1]
   20026:	0209      	lsls	r1, r1, #8
   20028:	430a      	orrs	r2, r1
   2002a:	7899      	ldrb	r1, [r3, #2]
   2002c:	0409      	lsls	r1, r1, #16
   2002e:	430a      	orrs	r2, r1
   20030:	78db      	ldrb	r3, [r3, #3]
   20032:	061b      	lsls	r3, r3, #24
   20034:	4313      	orrs	r3, r2
   20036:	224a      	movs	r2, #74	; 0x4a
   20038:	5c9a      	ldrb	r2, [r3, r2]
   2003a:	214b      	movs	r1, #75	; 0x4b
   2003c:	5c5b      	ldrb	r3, [r3, r1]
   2003e:	021b      	lsls	r3, r3, #8
   20040:	4313      	orrs	r3, r2
   20042:	b29b      	uxth	r3, r3
   20044:	001a      	movs	r2, r3
   20046:	0021      	movs	r1, r4
   20048:	f005 fb51 	bl	256ee <memcpy>

    if (build_state->cert_def->type == CERTTYPE_X509)
   2004c:	68fb      	ldr	r3, [r7, #12]
   2004e:	781a      	ldrb	r2, [r3, #0]
   20050:	7859      	ldrb	r1, [r3, #1]
   20052:	0209      	lsls	r1, r1, #8
   20054:	430a      	orrs	r2, r1
   20056:	7899      	ldrb	r1, [r3, #2]
   20058:	0409      	lsls	r1, r1, #16
   2005a:	430a      	orrs	r2, r1
   2005c:	78db      	ldrb	r3, [r3, #3]
   2005e:	061b      	lsls	r3, r3, #24
   20060:	4313      	orrs	r3, r2
   20062:	781b      	ldrb	r3, [r3, #0]
   20064:	2b00      	cmp	r3, #0
   20066:	d145      	bne.n	200f4 <atcacert_cert_build_start+0x35c>
    {
        // Set a fake signature that should result in the largest X.509 cert. This will ensure
        // the cert buffer is large enough early in the cert rebuilding process.
        uint8_t large_sig[64];
        memset(large_sig, 0xFF, sizeof(large_sig));
   20068:	2314      	movs	r3, #20
   2006a:	18fb      	adds	r3, r7, r3
   2006c:	2240      	movs	r2, #64	; 0x40
   2006e:	21ff      	movs	r1, #255	; 0xff
   20070:	0018      	movs	r0, r3
   20072:	f005 fb5a 	bl	2572a <memset>
        ret = atcacert_set_signature(
   20076:	68fb      	ldr	r3, [r7, #12]
   20078:	781a      	ldrb	r2, [r3, #0]
   2007a:	7859      	ldrb	r1, [r3, #1]
   2007c:	0209      	lsls	r1, r1, #8
   2007e:	430a      	orrs	r2, r1
   20080:	7899      	ldrb	r1, [r3, #2]
   20082:	0409      	lsls	r1, r1, #16
   20084:	430a      	orrs	r2, r1
   20086:	78db      	ldrb	r3, [r3, #3]
   20088:	061b      	lsls	r3, r3, #24
   2008a:	4313      	orrs	r3, r2
   2008c:	0018      	movs	r0, r3
   2008e:	68fb      	ldr	r3, [r7, #12]
   20090:	791a      	ldrb	r2, [r3, #4]
   20092:	7959      	ldrb	r1, [r3, #5]
   20094:	0209      	lsls	r1, r1, #8
   20096:	430a      	orrs	r2, r1
   20098:	7999      	ldrb	r1, [r3, #6]
   2009a:	0409      	lsls	r1, r1, #16
   2009c:	430a      	orrs	r2, r1
   2009e:	79db      	ldrb	r3, [r3, #7]
   200a0:	061b      	lsls	r3, r3, #24
   200a2:	4313      	orrs	r3, r2
   200a4:	001c      	movs	r4, r3
   200a6:	68fb      	ldr	r3, [r7, #12]
   200a8:	7a1a      	ldrb	r2, [r3, #8]
   200aa:	7a59      	ldrb	r1, [r3, #9]
   200ac:	0209      	lsls	r1, r1, #8
   200ae:	430a      	orrs	r2, r1
   200b0:	7a99      	ldrb	r1, [r3, #10]
   200b2:	0409      	lsls	r1, r1, #16
   200b4:	430a      	orrs	r2, r1
   200b6:	7adb      	ldrb	r3, [r3, #11]
   200b8:	061b      	lsls	r3, r3, #24
   200ba:	4313      	orrs	r3, r2
   200bc:	001d      	movs	r5, r3
   200be:	68fb      	ldr	r3, [r7, #12]
   200c0:	7b1a      	ldrb	r2, [r3, #12]
   200c2:	7b59      	ldrb	r1, [r3, #13]
   200c4:	0209      	lsls	r1, r1, #8
   200c6:	430a      	orrs	r2, r1
   200c8:	7b99      	ldrb	r1, [r3, #14]
   200ca:	0409      	lsls	r1, r1, #16
   200cc:	430a      	orrs	r2, r1
   200ce:	7bdb      	ldrb	r3, [r3, #15]
   200d0:	061b      	lsls	r3, r3, #24
   200d2:	4313      	orrs	r3, r2
   200d4:	001a      	movs	r2, r3
   200d6:	2314      	movs	r3, #20
   200d8:	18fb      	adds	r3, r7, r3
   200da:	9300      	str	r3, [sp, #0]
   200dc:	0013      	movs	r3, r2
   200de:	002a      	movs	r2, r5
   200e0:	0021      	movs	r1, r4
   200e2:	f000 fe67 	bl	20db4 <atcacert_set_signature>
   200e6:	0003      	movs	r3, r0
   200e8:	657b      	str	r3, [r7, #84]	; 0x54
            build_state->cert_def,
            build_state->cert,
            build_state->cert_size,
            build_state->max_cert_size,
            large_sig);
        if (ret != ATCACERT_E_SUCCESS)
   200ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   200ec:	2b00      	cmp	r3, #0
   200ee:	d001      	beq.n	200f4 <atcacert_cert_build_start+0x35c>
        {
            return ret;
   200f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   200f2:	e032      	b.n	2015a <atcacert_cert_build_start+0x3c2>
        }
    }

    if (ca_public_key != NULL)
   200f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   200f6:	2b00      	cmp	r3, #0
   200f8:	d02e      	beq.n	20158 <atcacert_cert_build_start+0x3c0>
    {
        // Set the authority key ID
        ret = atcacert_set_auth_key_id(
   200fa:	68fb      	ldr	r3, [r7, #12]
   200fc:	781a      	ldrb	r2, [r3, #0]
   200fe:	7859      	ldrb	r1, [r3, #1]
   20100:	0209      	lsls	r1, r1, #8
   20102:	430a      	orrs	r2, r1
   20104:	7899      	ldrb	r1, [r3, #2]
   20106:	0409      	lsls	r1, r1, #16
   20108:	430a      	orrs	r2, r1
   2010a:	78db      	ldrb	r3, [r3, #3]
   2010c:	061b      	lsls	r3, r3, #24
   2010e:	4313      	orrs	r3, r2
   20110:	0018      	movs	r0, r3
   20112:	68fb      	ldr	r3, [r7, #12]
   20114:	791a      	ldrb	r2, [r3, #4]
   20116:	7959      	ldrb	r1, [r3, #5]
   20118:	0209      	lsls	r1, r1, #8
   2011a:	430a      	orrs	r2, r1
   2011c:	7999      	ldrb	r1, [r3, #6]
   2011e:	0409      	lsls	r1, r1, #16
   20120:	430a      	orrs	r2, r1
   20122:	79db      	ldrb	r3, [r3, #7]
   20124:	061b      	lsls	r3, r3, #24
   20126:	4313      	orrs	r3, r2
   20128:	001c      	movs	r4, r3
            build_state->cert_def,
            build_state->cert,
            *build_state->cert_size,
   2012a:	68fb      	ldr	r3, [r7, #12]
   2012c:	7a1a      	ldrb	r2, [r3, #8]
   2012e:	7a59      	ldrb	r1, [r3, #9]
   20130:	0209      	lsls	r1, r1, #8
   20132:	430a      	orrs	r2, r1
   20134:	7a99      	ldrb	r1, [r3, #10]
   20136:	0409      	lsls	r1, r1, #16
   20138:	430a      	orrs	r2, r1
   2013a:	7adb      	ldrb	r3, [r3, #11]
   2013c:	061b      	lsls	r3, r3, #24
   2013e:	4313      	orrs	r3, r2
    }

    if (ca_public_key != NULL)
    {
        // Set the authority key ID
        ret = atcacert_set_auth_key_id(
   20140:	681a      	ldr	r2, [r3, #0]
   20142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20144:	0021      	movs	r1, r4
   20146:	f001 fc75 	bl	21a34 <atcacert_set_auth_key_id>
   2014a:	0003      	movs	r3, r0
   2014c:	657b      	str	r3, [r7, #84]	; 0x54
            build_state->cert_def,
            build_state->cert,
            *build_state->cert_size,
            ca_public_key);
        if (ret != ATCACERT_E_SUCCESS)
   2014e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20150:	2b00      	cmp	r3, #0
   20152:	d001      	beq.n	20158 <atcacert_cert_build_start+0x3c0>
        {
            return ret;
   20154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20156:	e000      	b.n	2015a <atcacert_cert_build_start+0x3c2>
        }
    }

    return ATCACERT_E_SUCCESS;
   20158:	2300      	movs	r3, #0
}
   2015a:	0018      	movs	r0, r3
   2015c:	46bd      	mov	sp, r7
   2015e:	b016      	add	sp, #88	; 0x58
   20160:	bdb0      	pop	{r4, r5, r7, pc}
   20162:	46c0      	nop			; (mov r8, r8)

00020164 <atcacert_cert_build_process>:

int atcacert_cert_build_process(atcacert_build_state_t*      build_state,
                                const atcacert_device_loc_t* device_loc,
                                const uint8_t*               device_data)
{
   20164:	b5f0      	push	{r4, r5, r6, r7, lr}
   20166:	b09b      	sub	sp, #108	; 0x6c
   20168:	af02      	add	r7, sp, #8
   2016a:	60f8      	str	r0, [r7, #12]
   2016c:	60b9      	str	r1, [r7, #8]
   2016e:	607a      	str	r2, [r7, #4]
    int ret = 0;
   20170:	2300      	movs	r3, #0
   20172:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t i = 0;
   20174:	2300      	movs	r3, #0
   20176:	65bb      	str	r3, [r7, #88]	; 0x58
    const uint8_t* data = NULL;
   20178:	2300      	movs	r3, #0
   2017a:	657b      	str	r3, [r7, #84]	; 0x54
        .is_genkey  = FALSE,
        .offset     = 0,
        .count      = 13
    };

    if (build_state == NULL || device_loc == NULL || device_data == NULL)
   2017c:	68fb      	ldr	r3, [r7, #12]
   2017e:	2b00      	cmp	r3, #0
   20180:	d005      	beq.n	2018e <atcacert_cert_build_process+0x2a>
   20182:	68bb      	ldr	r3, [r7, #8]
   20184:	2b00      	cmp	r3, #0
   20186:	d002      	beq.n	2018e <atcacert_cert_build_process+0x2a>
   20188:	687b      	ldr	r3, [r7, #4]
   2018a:	2b00      	cmp	r3, #0
   2018c:	d101      	bne.n	20192 <atcacert_cert_build_process+0x2e>
    {
        return ATCACERT_E_BAD_PARAMS;
   2018e:	2302      	movs	r3, #2
   20190:	e2cb      	b.n	2072a <atcacert_cert_build_process+0x5c6>
    }

    data = atcacert_is_device_loc_match(&build_state->cert_def->cert_sn_dev_loc, device_loc, device_data);
   20192:	68fb      	ldr	r3, [r7, #12]
   20194:	781a      	ldrb	r2, [r3, #0]
   20196:	7859      	ldrb	r1, [r3, #1]
   20198:	0209      	lsls	r1, r1, #8
   2019a:	430a      	orrs	r2, r1
   2019c:	7899      	ldrb	r1, [r3, #2]
   2019e:	0409      	lsls	r1, r1, #16
   201a0:	430a      	orrs	r2, r1
   201a2:	78db      	ldrb	r3, [r3, #3]
   201a4:	061b      	lsls	r3, r3, #24
   201a6:	4313      	orrs	r3, r2
   201a8:	3305      	adds	r3, #5
   201aa:	687a      	ldr	r2, [r7, #4]
   201ac:	68b9      	ldr	r1, [r7, #8]
   201ae:	0018      	movs	r0, r3
   201b0:	f7ff fd2a 	bl	1fc08 <atcacert_is_device_loc_match>
   201b4:	0003      	movs	r3, r0
   201b6:	657b      	str	r3, [r7, #84]	; 0x54
    if (data != NULL)
   201b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   201ba:	2b00      	cmp	r3, #0
   201bc:	d04e      	beq.n	2025c <atcacert_cert_build_process+0xf8>
    {
        ret = atcacert_set_cert_sn(
   201be:	68fb      	ldr	r3, [r7, #12]
   201c0:	781a      	ldrb	r2, [r3, #0]
   201c2:	7859      	ldrb	r1, [r3, #1]
   201c4:	0209      	lsls	r1, r1, #8
   201c6:	430a      	orrs	r2, r1
   201c8:	7899      	ldrb	r1, [r3, #2]
   201ca:	0409      	lsls	r1, r1, #16
   201cc:	430a      	orrs	r2, r1
   201ce:	78db      	ldrb	r3, [r3, #3]
   201d0:	061b      	lsls	r3, r3, #24
   201d2:	4313      	orrs	r3, r2
   201d4:	0018      	movs	r0, r3
   201d6:	68fb      	ldr	r3, [r7, #12]
   201d8:	791a      	ldrb	r2, [r3, #4]
   201da:	7959      	ldrb	r1, [r3, #5]
   201dc:	0209      	lsls	r1, r1, #8
   201de:	430a      	orrs	r2, r1
   201e0:	7999      	ldrb	r1, [r3, #6]
   201e2:	0409      	lsls	r1, r1, #16
   201e4:	430a      	orrs	r2, r1
   201e6:	79db      	ldrb	r3, [r3, #7]
   201e8:	061b      	lsls	r3, r3, #24
   201ea:	4313      	orrs	r3, r2
   201ec:	001c      	movs	r4, r3
   201ee:	68fb      	ldr	r3, [r7, #12]
   201f0:	7a1a      	ldrb	r2, [r3, #8]
   201f2:	7a59      	ldrb	r1, [r3, #9]
   201f4:	0209      	lsls	r1, r1, #8
   201f6:	430a      	orrs	r2, r1
   201f8:	7a99      	ldrb	r1, [r3, #10]
   201fa:	0409      	lsls	r1, r1, #16
   201fc:	430a      	orrs	r2, r1
   201fe:	7adb      	ldrb	r3, [r3, #11]
   20200:	061b      	lsls	r3, r3, #24
   20202:	4313      	orrs	r3, r2
   20204:	001d      	movs	r5, r3
   20206:	68fb      	ldr	r3, [r7, #12]
   20208:	7b1a      	ldrb	r2, [r3, #12]
   2020a:	7b59      	ldrb	r1, [r3, #13]
   2020c:	0209      	lsls	r1, r1, #8
   2020e:	430a      	orrs	r2, r1
   20210:	7b99      	ldrb	r1, [r3, #14]
   20212:	0409      	lsls	r1, r1, #16
   20214:	430a      	orrs	r2, r1
   20216:	7bdb      	ldrb	r3, [r3, #15]
   20218:	061b      	lsls	r3, r3, #24
   2021a:	4313      	orrs	r3, r2
   2021c:	001e      	movs	r6, r3
            build_state->cert_def,
            build_state->cert,
            build_state->cert_size,
            build_state->max_cert_size,
            data,
            build_state->cert_def->cert_sn_dev_loc.count);
   2021e:	68fb      	ldr	r3, [r7, #12]
   20220:	781a      	ldrb	r2, [r3, #0]
   20222:	7859      	ldrb	r1, [r3, #1]
   20224:	0209      	lsls	r1, r1, #8
   20226:	430a      	orrs	r2, r1
   20228:	7899      	ldrb	r1, [r3, #2]
   2022a:	0409      	lsls	r1, r1, #16
   2022c:	430a      	orrs	r2, r1
   2022e:	78db      	ldrb	r3, [r3, #3]
   20230:	061b      	lsls	r3, r3, #24
   20232:	4313      	orrs	r3, r2
   20234:	7a9a      	ldrb	r2, [r3, #10]
   20236:	7adb      	ldrb	r3, [r3, #11]
   20238:	021b      	lsls	r3, r3, #8
   2023a:	4313      	orrs	r3, r2
   2023c:	b29b      	uxth	r3, r3
    }

    data = atcacert_is_device_loc_match(&build_state->cert_def->cert_sn_dev_loc, device_loc, device_data);
    if (data != NULL)
    {
        ret = atcacert_set_cert_sn(
   2023e:	9301      	str	r3, [sp, #4]
   20240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20242:	9300      	str	r3, [sp, #0]
   20244:	0033      	movs	r3, r6
   20246:	002a      	movs	r2, r5
   20248:	0021      	movs	r1, r4
   2024a:	f001 f907 	bl	2145c <atcacert_set_cert_sn>
   2024e:	0003      	movs	r3, r0
   20250:	65fb      	str	r3, [r7, #92]	; 0x5c
            build_state->cert,
            build_state->cert_size,
            build_state->max_cert_size,
            data,
            build_state->cert_def->cert_sn_dev_loc.count);
        if (ret != ATCACERT_E_SUCCESS)
   20252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   20254:	2b00      	cmp	r3, #0
   20256:	d001      	beq.n	2025c <atcacert_cert_build_process+0xf8>
        {
            return ret;
   20258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2025a:	e266      	b.n	2072a <atcacert_cert_build_process+0x5c6>
        }
    }

    data = atcacert_is_device_loc_match(&build_state->cert_def->public_key_dev_loc, device_loc, device_data);
   2025c:	68fb      	ldr	r3, [r7, #12]
   2025e:	781a      	ldrb	r2, [r3, #0]
   20260:	7859      	ldrb	r1, [r3, #1]
   20262:	0209      	lsls	r1, r1, #8
   20264:	430a      	orrs	r2, r1
   20266:	7899      	ldrb	r1, [r3, #2]
   20268:	0409      	lsls	r1, r1, #16
   2026a:	430a      	orrs	r2, r1
   2026c:	78db      	ldrb	r3, [r3, #3]
   2026e:	061b      	lsls	r3, r3, #24
   20270:	4313      	orrs	r3, r2
   20272:	3313      	adds	r3, #19
   20274:	687a      	ldr	r2, [r7, #4]
   20276:	68b9      	ldr	r1, [r7, #8]
   20278:	0018      	movs	r0, r3
   2027a:	f7ff fcc5 	bl	1fc08 <atcacert_is_device_loc_match>
   2027e:	0003      	movs	r3, r0
   20280:	657b      	str	r3, [r7, #84]	; 0x54
    if (data != NULL)
   20282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20284:	2b00      	cmp	r3, #0
   20286:	d100      	bne.n	2028a <atcacert_cert_build_process+0x126>
   20288:	e088      	b.n	2039c <atcacert_cert_build_process+0x238>
    {
        if (build_state->cert_def->public_key_dev_loc.count == 72)
   2028a:	68fb      	ldr	r3, [r7, #12]
   2028c:	781a      	ldrb	r2, [r3, #0]
   2028e:	7859      	ldrb	r1, [r3, #1]
   20290:	0209      	lsls	r1, r1, #8
   20292:	430a      	orrs	r2, r1
   20294:	7899      	ldrb	r1, [r3, #2]
   20296:	0409      	lsls	r1, r1, #16
   20298:	430a      	orrs	r2, r1
   2029a:	78db      	ldrb	r3, [r3, #3]
   2029c:	061b      	lsls	r3, r3, #24
   2029e:	4313      	orrs	r3, r2
   202a0:	7e1a      	ldrb	r2, [r3, #24]
   202a2:	7e5b      	ldrb	r3, [r3, #25]
   202a4:	021b      	lsls	r3, r3, #8
   202a6:	4313      	orrs	r3, r2
   202a8:	b29b      	uxth	r3, r3
   202aa:	2b48      	cmp	r3, #72	; 0x48
   202ac:	d132      	bne.n	20314 <atcacert_cert_build_process+0x1b0>
        {
            // Public key is formatted with padding bytes in front of the X and Y components
            atcacert_public_key_remove_padding(data, public_key);
   202ae:	2314      	movs	r3, #20
   202b0:	18fa      	adds	r2, r7, r3
   202b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   202b4:	0011      	movs	r1, r2
   202b6:	0018      	movs	r0, r3
   202b8:	f001 ff14 	bl	220e4 <atcacert_public_key_remove_padding>
            ret = atcacert_set_subj_public_key(
   202bc:	68fb      	ldr	r3, [r7, #12]
   202be:	781a      	ldrb	r2, [r3, #0]
   202c0:	7859      	ldrb	r1, [r3, #1]
   202c2:	0209      	lsls	r1, r1, #8
   202c4:	430a      	orrs	r2, r1
   202c6:	7899      	ldrb	r1, [r3, #2]
   202c8:	0409      	lsls	r1, r1, #16
   202ca:	430a      	orrs	r2, r1
   202cc:	78db      	ldrb	r3, [r3, #3]
   202ce:	061b      	lsls	r3, r3, #24
   202d0:	4313      	orrs	r3, r2
   202d2:	0018      	movs	r0, r3
   202d4:	68fb      	ldr	r3, [r7, #12]
   202d6:	791a      	ldrb	r2, [r3, #4]
   202d8:	7959      	ldrb	r1, [r3, #5]
   202da:	0209      	lsls	r1, r1, #8
   202dc:	430a      	orrs	r2, r1
   202de:	7999      	ldrb	r1, [r3, #6]
   202e0:	0409      	lsls	r1, r1, #16
   202e2:	430a      	orrs	r2, r1
   202e4:	79db      	ldrb	r3, [r3, #7]
   202e6:	061b      	lsls	r3, r3, #24
   202e8:	4313      	orrs	r3, r2
   202ea:	001c      	movs	r4, r3
                build_state->cert_def,
                build_state->cert,
                *build_state->cert_size,
   202ec:	68fb      	ldr	r3, [r7, #12]
   202ee:	7a1a      	ldrb	r2, [r3, #8]
   202f0:	7a59      	ldrb	r1, [r3, #9]
   202f2:	0209      	lsls	r1, r1, #8
   202f4:	430a      	orrs	r2, r1
   202f6:	7a99      	ldrb	r1, [r3, #10]
   202f8:	0409      	lsls	r1, r1, #16
   202fa:	430a      	orrs	r2, r1
   202fc:	7adb      	ldrb	r3, [r3, #11]
   202fe:	061b      	lsls	r3, r3, #24
   20300:	4313      	orrs	r3, r2
    {
        if (build_state->cert_def->public_key_dev_loc.count == 72)
        {
            // Public key is formatted with padding bytes in front of the X and Y components
            atcacert_public_key_remove_padding(data, public_key);
            ret = atcacert_set_subj_public_key(
   20302:	681a      	ldr	r2, [r3, #0]
   20304:	2314      	movs	r3, #20
   20306:	18fb      	adds	r3, r7, r3
   20308:	0021      	movs	r1, r4
   2030a:	f000 fcdf 	bl	20ccc <atcacert_set_subj_public_key>
   2030e:	0003      	movs	r3, r0
   20310:	65fb      	str	r3, [r7, #92]	; 0x5c
   20312:	e03e      	b.n	20392 <atcacert_cert_build_process+0x22e>
                build_state->cert_def,
                build_state->cert,
                *build_state->cert_size,
                public_key);
        }
        else if (build_state->cert_def->public_key_dev_loc.count == 64)
   20314:	68fb      	ldr	r3, [r7, #12]
   20316:	781a      	ldrb	r2, [r3, #0]
   20318:	7859      	ldrb	r1, [r3, #1]
   2031a:	0209      	lsls	r1, r1, #8
   2031c:	430a      	orrs	r2, r1
   2031e:	7899      	ldrb	r1, [r3, #2]
   20320:	0409      	lsls	r1, r1, #16
   20322:	430a      	orrs	r2, r1
   20324:	78db      	ldrb	r3, [r3, #3]
   20326:	061b      	lsls	r3, r3, #24
   20328:	4313      	orrs	r3, r2
   2032a:	7e1a      	ldrb	r2, [r3, #24]
   2032c:	7e5b      	ldrb	r3, [r3, #25]
   2032e:	021b      	lsls	r3, r3, #8
   20330:	4313      	orrs	r3, r2
   20332:	b29b      	uxth	r3, r3
   20334:	2b40      	cmp	r3, #64	; 0x40
   20336:	d12a      	bne.n	2038e <atcacert_cert_build_process+0x22a>
        {
            ret = atcacert_set_subj_public_key(
   20338:	68fb      	ldr	r3, [r7, #12]
   2033a:	781a      	ldrb	r2, [r3, #0]
   2033c:	7859      	ldrb	r1, [r3, #1]
   2033e:	0209      	lsls	r1, r1, #8
   20340:	430a      	orrs	r2, r1
   20342:	7899      	ldrb	r1, [r3, #2]
   20344:	0409      	lsls	r1, r1, #16
   20346:	430a      	orrs	r2, r1
   20348:	78db      	ldrb	r3, [r3, #3]
   2034a:	061b      	lsls	r3, r3, #24
   2034c:	4313      	orrs	r3, r2
   2034e:	0018      	movs	r0, r3
   20350:	68fb      	ldr	r3, [r7, #12]
   20352:	791a      	ldrb	r2, [r3, #4]
   20354:	7959      	ldrb	r1, [r3, #5]
   20356:	0209      	lsls	r1, r1, #8
   20358:	430a      	orrs	r2, r1
   2035a:	7999      	ldrb	r1, [r3, #6]
   2035c:	0409      	lsls	r1, r1, #16
   2035e:	430a      	orrs	r2, r1
   20360:	79db      	ldrb	r3, [r3, #7]
   20362:	061b      	lsls	r3, r3, #24
   20364:	4313      	orrs	r3, r2
   20366:	001c      	movs	r4, r3
                build_state->cert_def,
                build_state->cert,
                *build_state->cert_size,
   20368:	68fb      	ldr	r3, [r7, #12]
   2036a:	7a1a      	ldrb	r2, [r3, #8]
   2036c:	7a59      	ldrb	r1, [r3, #9]
   2036e:	0209      	lsls	r1, r1, #8
   20370:	430a      	orrs	r2, r1
   20372:	7a99      	ldrb	r1, [r3, #10]
   20374:	0409      	lsls	r1, r1, #16
   20376:	430a      	orrs	r2, r1
   20378:	7adb      	ldrb	r3, [r3, #11]
   2037a:	061b      	lsls	r3, r3, #24
   2037c:	4313      	orrs	r3, r2
                *build_state->cert_size,
                public_key);
        }
        else if (build_state->cert_def->public_key_dev_loc.count == 64)
        {
            ret = atcacert_set_subj_public_key(
   2037e:	681a      	ldr	r2, [r3, #0]
   20380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20382:	0021      	movs	r1, r4
   20384:	f000 fca2 	bl	20ccc <atcacert_set_subj_public_key>
   20388:	0003      	movs	r3, r0
   2038a:	65fb      	str	r3, [r7, #92]	; 0x5c
   2038c:	e001      	b.n	20392 <atcacert_cert_build_process+0x22e>
                *build_state->cert_size,
                data);
        }
        else
        {
            return ATCACERT_E_BAD_CERT; // Unexpected public key size
   2038e:	230a      	movs	r3, #10
   20390:	e1cb      	b.n	2072a <atcacert_cert_build_process+0x5c6>

        }
        if (ret != ATCACERT_E_SUCCESS)
   20392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   20394:	2b00      	cmp	r3, #0
   20396:	d001      	beq.n	2039c <atcacert_cert_build_process+0x238>
        {
            return ret;
   20398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2039a:	e1c6      	b.n	2072a <atcacert_cert_build_process+0x5c6>
        }
    }

    data = atcacert_is_device_loc_match(&build_state->cert_def->comp_cert_dev_loc, device_loc, device_data);
   2039c:	68fb      	ldr	r3, [r7, #12]
   2039e:	781a      	ldrb	r2, [r3, #0]
   203a0:	7859      	ldrb	r1, [r3, #1]
   203a2:	0209      	lsls	r1, r1, #8
   203a4:	430a      	orrs	r2, r1
   203a6:	7899      	ldrb	r1, [r3, #2]
   203a8:	0409      	lsls	r1, r1, #16
   203aa:	430a      	orrs	r2, r1
   203ac:	78db      	ldrb	r3, [r3, #3]
   203ae:	061b      	lsls	r3, r3, #24
   203b0:	4313      	orrs	r3, r2
   203b2:	331a      	adds	r3, #26
   203b4:	687a      	ldr	r2, [r7, #4]
   203b6:	68b9      	ldr	r1, [r7, #8]
   203b8:	0018      	movs	r0, r3
   203ba:	f7ff fc25 	bl	1fc08 <atcacert_is_device_loc_match>
   203be:	0003      	movs	r3, r0
   203c0:	657b      	str	r3, [r7, #84]	; 0x54
    if (data != NULL)
   203c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   203c4:	2b00      	cmp	r3, #0
   203c6:	d052      	beq.n	2046e <atcacert_cert_build_process+0x30a>
    {
        if (build_state->cert_def->comp_cert_dev_loc.count != 72)
   203c8:	68fb      	ldr	r3, [r7, #12]
   203ca:	781a      	ldrb	r2, [r3, #0]
   203cc:	7859      	ldrb	r1, [r3, #1]
   203ce:	0209      	lsls	r1, r1, #8
   203d0:	430a      	orrs	r2, r1
   203d2:	7899      	ldrb	r1, [r3, #2]
   203d4:	0409      	lsls	r1, r1, #16
   203d6:	430a      	orrs	r2, r1
   203d8:	78db      	ldrb	r3, [r3, #3]
   203da:	061b      	lsls	r3, r3, #24
   203dc:	4313      	orrs	r3, r2
   203de:	7fda      	ldrb	r2, [r3, #31]
   203e0:	2120      	movs	r1, #32
   203e2:	5c5b      	ldrb	r3, [r3, r1]
   203e4:	021b      	lsls	r3, r3, #8
   203e6:	4313      	orrs	r3, r2
   203e8:	b29b      	uxth	r3, r3
   203ea:	2b48      	cmp	r3, #72	; 0x48
   203ec:	d001      	beq.n	203f2 <atcacert_cert_build_process+0x28e>
        {
            return ATCACERT_E_BAD_CERT;  // Unexpected compressed certificate size
   203ee:	230a      	movs	r3, #10
   203f0:	e19b      	b.n	2072a <atcacert_cert_build_process+0x5c6>

        }
        ret = atcacert_set_comp_cert(
   203f2:	68fb      	ldr	r3, [r7, #12]
   203f4:	781a      	ldrb	r2, [r3, #0]
   203f6:	7859      	ldrb	r1, [r3, #1]
   203f8:	0209      	lsls	r1, r1, #8
   203fa:	430a      	orrs	r2, r1
   203fc:	7899      	ldrb	r1, [r3, #2]
   203fe:	0409      	lsls	r1, r1, #16
   20400:	430a      	orrs	r2, r1
   20402:	78db      	ldrb	r3, [r3, #3]
   20404:	061b      	lsls	r3, r3, #24
   20406:	4313      	orrs	r3, r2
   20408:	0018      	movs	r0, r3
   2040a:	68fb      	ldr	r3, [r7, #12]
   2040c:	791a      	ldrb	r2, [r3, #4]
   2040e:	7959      	ldrb	r1, [r3, #5]
   20410:	0209      	lsls	r1, r1, #8
   20412:	430a      	orrs	r2, r1
   20414:	7999      	ldrb	r1, [r3, #6]
   20416:	0409      	lsls	r1, r1, #16
   20418:	430a      	orrs	r2, r1
   2041a:	79db      	ldrb	r3, [r3, #7]
   2041c:	061b      	lsls	r3, r3, #24
   2041e:	4313      	orrs	r3, r2
   20420:	001c      	movs	r4, r3
   20422:	68fb      	ldr	r3, [r7, #12]
   20424:	7a1a      	ldrb	r2, [r3, #8]
   20426:	7a59      	ldrb	r1, [r3, #9]
   20428:	0209      	lsls	r1, r1, #8
   2042a:	430a      	orrs	r2, r1
   2042c:	7a99      	ldrb	r1, [r3, #10]
   2042e:	0409      	lsls	r1, r1, #16
   20430:	430a      	orrs	r2, r1
   20432:	7adb      	ldrb	r3, [r3, #11]
   20434:	061b      	lsls	r3, r3, #24
   20436:	4313      	orrs	r3, r2
   20438:	001d      	movs	r5, r3
   2043a:	68fb      	ldr	r3, [r7, #12]
   2043c:	7b1a      	ldrb	r2, [r3, #12]
   2043e:	7b59      	ldrb	r1, [r3, #13]
   20440:	0209      	lsls	r1, r1, #8
   20442:	430a      	orrs	r2, r1
   20444:	7b99      	ldrb	r1, [r3, #14]
   20446:	0409      	lsls	r1, r1, #16
   20448:	430a      	orrs	r2, r1
   2044a:	7bdb      	ldrb	r3, [r3, #15]
   2044c:	061b      	lsls	r3, r3, #24
   2044e:	4313      	orrs	r3, r2
   20450:	001a      	movs	r2, r3
   20452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20454:	9300      	str	r3, [sp, #0]
   20456:	0013      	movs	r3, r2
   20458:	002a      	movs	r2, r5
   2045a:	0021      	movs	r1, r4
   2045c:	f001 fb26 	bl	21aac <atcacert_set_comp_cert>
   20460:	0003      	movs	r3, r0
   20462:	65fb      	str	r3, [r7, #92]	; 0x5c
            build_state->cert_def,
            build_state->cert,
            build_state->cert_size,
            build_state->max_cert_size,
            data);
        if (ret != ATCACERT_E_SUCCESS)
   20464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   20466:	2b00      	cmp	r3, #0
   20468:	d001      	beq.n	2046e <atcacert_cert_build_process+0x30a>
        {
            return ret;
   2046a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2046c:	e15d      	b.n	2072a <atcacert_cert_build_process+0x5c6>
        }
    }

    if (build_state->cert_def->cert_elements_count > 0 && build_state->cert_def->cert_elements == NULL)
   2046e:	68fb      	ldr	r3, [r7, #12]
   20470:	781a      	ldrb	r2, [r3, #0]
   20472:	7859      	ldrb	r1, [r3, #1]
   20474:	0209      	lsls	r1, r1, #8
   20476:	430a      	orrs	r2, r1
   20478:	7899      	ldrb	r1, [r3, #2]
   2047a:	0409      	lsls	r1, r1, #16
   2047c:	430a      	orrs	r2, r1
   2047e:	78db      	ldrb	r3, [r3, #3]
   20480:	061b      	lsls	r3, r3, #24
   20482:	4313      	orrs	r3, r2
   20484:	001a      	movs	r2, r3
   20486:	2345      	movs	r3, #69	; 0x45
   20488:	5cd3      	ldrb	r3, [r2, r3]
   2048a:	2b00      	cmp	r3, #0
   2048c:	d01b      	beq.n	204c6 <atcacert_cert_build_process+0x362>
   2048e:	68fb      	ldr	r3, [r7, #12]
   20490:	781a      	ldrb	r2, [r3, #0]
   20492:	7859      	ldrb	r1, [r3, #1]
   20494:	0209      	lsls	r1, r1, #8
   20496:	430a      	orrs	r2, r1
   20498:	7899      	ldrb	r1, [r3, #2]
   2049a:	0409      	lsls	r1, r1, #16
   2049c:	430a      	orrs	r2, r1
   2049e:	78db      	ldrb	r3, [r3, #3]
   204a0:	061b      	lsls	r3, r3, #24
   204a2:	4313      	orrs	r3, r2
   204a4:	2241      	movs	r2, #65	; 0x41
   204a6:	5c9a      	ldrb	r2, [r3, r2]
   204a8:	2142      	movs	r1, #66	; 0x42
   204aa:	5c59      	ldrb	r1, [r3, r1]
   204ac:	0209      	lsls	r1, r1, #8
   204ae:	430a      	orrs	r2, r1
   204b0:	2143      	movs	r1, #67	; 0x43
   204b2:	5c59      	ldrb	r1, [r3, r1]
   204b4:	0409      	lsls	r1, r1, #16
   204b6:	430a      	orrs	r2, r1
   204b8:	2144      	movs	r1, #68	; 0x44
   204ba:	5c5b      	ldrb	r3, [r3, r1]
   204bc:	061b      	lsls	r3, r3, #24
   204be:	4313      	orrs	r3, r2
   204c0:	d101      	bne.n	204c6 <atcacert_cert_build_process+0x362>
    {
        return ATCACERT_E_BAD_CERT;
   204c2:	230a      	movs	r3, #10
   204c4:	e131      	b.n	2072a <atcacert_cert_build_process+0x5c6>
    }
    for (i = 0; i < build_state->cert_def->cert_elements_count; i++)
   204c6:	2300      	movs	r3, #0
   204c8:	65bb      	str	r3, [r7, #88]	; 0x58
   204ca:	e0fc      	b.n	206c6 <atcacert_cert_build_process+0x562>
    {
        data = atcacert_is_device_loc_match(&build_state->cert_def->cert_elements[i].device_loc, device_loc, device_data);
   204cc:	68fb      	ldr	r3, [r7, #12]
   204ce:	781a      	ldrb	r2, [r3, #0]
   204d0:	7859      	ldrb	r1, [r3, #1]
   204d2:	0209      	lsls	r1, r1, #8
   204d4:	430a      	orrs	r2, r1
   204d6:	7899      	ldrb	r1, [r3, #2]
   204d8:	0409      	lsls	r1, r1, #16
   204da:	430a      	orrs	r2, r1
   204dc:	78db      	ldrb	r3, [r3, #3]
   204de:	061b      	lsls	r3, r3, #24
   204e0:	4313      	orrs	r3, r2
   204e2:	2241      	movs	r2, #65	; 0x41
   204e4:	5c9a      	ldrb	r2, [r3, r2]
   204e6:	2142      	movs	r1, #66	; 0x42
   204e8:	5c59      	ldrb	r1, [r3, r1]
   204ea:	0209      	lsls	r1, r1, #8
   204ec:	430a      	orrs	r2, r1
   204ee:	2143      	movs	r1, #67	; 0x43
   204f0:	5c59      	ldrb	r1, [r3, r1]
   204f2:	0409      	lsls	r1, r1, #16
   204f4:	430a      	orrs	r2, r1
   204f6:	2144      	movs	r1, #68	; 0x44
   204f8:	5c5b      	ldrb	r3, [r3, r1]
   204fa:	061b      	lsls	r3, r3, #24
   204fc:	4313      	orrs	r3, r2
   204fe:	0019      	movs	r1, r3
   20500:	6dba      	ldr	r2, [r7, #88]	; 0x58
   20502:	0013      	movs	r3, r2
   20504:	005b      	lsls	r3, r3, #1
   20506:	189b      	adds	r3, r3, r2
   20508:	00da      	lsls	r2, r3, #3
   2050a:	189b      	adds	r3, r3, r2
   2050c:	18cb      	adds	r3, r1, r3
   2050e:	3310      	adds	r3, #16
   20510:	687a      	ldr	r2, [r7, #4]
   20512:	68b9      	ldr	r1, [r7, #8]
   20514:	0018      	movs	r0, r3
   20516:	f7ff fb77 	bl	1fc08 <atcacert_is_device_loc_match>
   2051a:	0003      	movs	r3, r0
   2051c:	657b      	str	r3, [r7, #84]	; 0x54
        if (data != NULL)
   2051e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20520:	2b00      	cmp	r3, #0
   20522:	d100      	bne.n	20526 <atcacert_cert_build_process+0x3c2>
   20524:	e0cc      	b.n	206c0 <atcacert_cert_build_process+0x55c>
        {
            if (build_state->cert_def->cert_elements[i].device_loc.count != build_state->cert_def->cert_elements[i].cert_loc.count)
   20526:	68fb      	ldr	r3, [r7, #12]
   20528:	781a      	ldrb	r2, [r3, #0]
   2052a:	7859      	ldrb	r1, [r3, #1]
   2052c:	0209      	lsls	r1, r1, #8
   2052e:	430a      	orrs	r2, r1
   20530:	7899      	ldrb	r1, [r3, #2]
   20532:	0409      	lsls	r1, r1, #16
   20534:	430a      	orrs	r2, r1
   20536:	78db      	ldrb	r3, [r3, #3]
   20538:	061b      	lsls	r3, r3, #24
   2053a:	4313      	orrs	r3, r2
   2053c:	2241      	movs	r2, #65	; 0x41
   2053e:	5c9a      	ldrb	r2, [r3, r2]
   20540:	2142      	movs	r1, #66	; 0x42
   20542:	5c59      	ldrb	r1, [r3, r1]
   20544:	0209      	lsls	r1, r1, #8
   20546:	430a      	orrs	r2, r1
   20548:	2143      	movs	r1, #67	; 0x43
   2054a:	5c59      	ldrb	r1, [r3, r1]
   2054c:	0409      	lsls	r1, r1, #16
   2054e:	430a      	orrs	r2, r1
   20550:	2144      	movs	r1, #68	; 0x44
   20552:	5c5b      	ldrb	r3, [r3, r1]
   20554:	061b      	lsls	r3, r3, #24
   20556:	4313      	orrs	r3, r2
   20558:	0019      	movs	r1, r3
   2055a:	6dba      	ldr	r2, [r7, #88]	; 0x58
   2055c:	0013      	movs	r3, r2
   2055e:	005b      	lsls	r3, r3, #1
   20560:	189b      	adds	r3, r3, r2
   20562:	00da      	lsls	r2, r3, #3
   20564:	189b      	adds	r3, r3, r2
   20566:	18cb      	adds	r3, r1, r3
   20568:	7d5a      	ldrb	r2, [r3, #21]
   2056a:	7d9b      	ldrb	r3, [r3, #22]
   2056c:	021b      	lsls	r3, r3, #8
   2056e:	4313      	orrs	r3, r2
   20570:	b299      	uxth	r1, r3
   20572:	68fb      	ldr	r3, [r7, #12]
   20574:	781a      	ldrb	r2, [r3, #0]
   20576:	7858      	ldrb	r0, [r3, #1]
   20578:	0200      	lsls	r0, r0, #8
   2057a:	4302      	orrs	r2, r0
   2057c:	7898      	ldrb	r0, [r3, #2]
   2057e:	0400      	lsls	r0, r0, #16
   20580:	4302      	orrs	r2, r0
   20582:	78db      	ldrb	r3, [r3, #3]
   20584:	061b      	lsls	r3, r3, #24
   20586:	4313      	orrs	r3, r2
   20588:	2241      	movs	r2, #65	; 0x41
   2058a:	5c9a      	ldrb	r2, [r3, r2]
   2058c:	2042      	movs	r0, #66	; 0x42
   2058e:	5c18      	ldrb	r0, [r3, r0]
   20590:	0200      	lsls	r0, r0, #8
   20592:	4302      	orrs	r2, r0
   20594:	2043      	movs	r0, #67	; 0x43
   20596:	5c18      	ldrb	r0, [r3, r0]
   20598:	0400      	lsls	r0, r0, #16
   2059a:	4302      	orrs	r2, r0
   2059c:	2044      	movs	r0, #68	; 0x44
   2059e:	5c1b      	ldrb	r3, [r3, r0]
   205a0:	061b      	lsls	r3, r3, #24
   205a2:	4313      	orrs	r3, r2
   205a4:	0018      	movs	r0, r3
   205a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
   205a8:	0013      	movs	r3, r2
   205aa:	005b      	lsls	r3, r3, #1
   205ac:	189b      	adds	r3, r3, r2
   205ae:	00da      	lsls	r2, r3, #3
   205b0:	189b      	adds	r3, r3, r2
   205b2:	18c3      	adds	r3, r0, r3
   205b4:	7e5a      	ldrb	r2, [r3, #25]
   205b6:	7e9b      	ldrb	r3, [r3, #26]
   205b8:	021b      	lsls	r3, r3, #8
   205ba:	4313      	orrs	r3, r2
   205bc:	b29b      	uxth	r3, r3
   205be:	4299      	cmp	r1, r3
   205c0:	d001      	beq.n	205c6 <atcacert_cert_build_process+0x462>
            {
                return ATCACERT_E_BAD_CERT;
   205c2:	230a      	movs	r3, #10
   205c4:	e0b1      	b.n	2072a <atcacert_cert_build_process+0x5c6>
            }
            ret = atcacert_set_cert_element(
   205c6:	68fb      	ldr	r3, [r7, #12]
   205c8:	781a      	ldrb	r2, [r3, #0]
   205ca:	7859      	ldrb	r1, [r3, #1]
   205cc:	0209      	lsls	r1, r1, #8
   205ce:	430a      	orrs	r2, r1
   205d0:	7899      	ldrb	r1, [r3, #2]
   205d2:	0409      	lsls	r1, r1, #16
   205d4:	430a      	orrs	r2, r1
   205d6:	78db      	ldrb	r3, [r3, #3]
   205d8:	061b      	lsls	r3, r3, #24
   205da:	4313      	orrs	r3, r2
   205dc:	001d      	movs	r5, r3
                build_state->cert_def,
                &build_state->cert_def->cert_elements[i].cert_loc,
   205de:	68fb      	ldr	r3, [r7, #12]
   205e0:	781a      	ldrb	r2, [r3, #0]
   205e2:	7859      	ldrb	r1, [r3, #1]
   205e4:	0209      	lsls	r1, r1, #8
   205e6:	430a      	orrs	r2, r1
   205e8:	7899      	ldrb	r1, [r3, #2]
   205ea:	0409      	lsls	r1, r1, #16
   205ec:	430a      	orrs	r2, r1
   205ee:	78db      	ldrb	r3, [r3, #3]
   205f0:	061b      	lsls	r3, r3, #24
   205f2:	4313      	orrs	r3, r2
   205f4:	2241      	movs	r2, #65	; 0x41
   205f6:	5c9a      	ldrb	r2, [r3, r2]
   205f8:	2142      	movs	r1, #66	; 0x42
   205fa:	5c59      	ldrb	r1, [r3, r1]
   205fc:	0209      	lsls	r1, r1, #8
   205fe:	430a      	orrs	r2, r1
   20600:	2143      	movs	r1, #67	; 0x43
   20602:	5c59      	ldrb	r1, [r3, r1]
   20604:	0409      	lsls	r1, r1, #16
   20606:	430a      	orrs	r2, r1
   20608:	2144      	movs	r1, #68	; 0x44
   2060a:	5c5b      	ldrb	r3, [r3, r1]
   2060c:	061b      	lsls	r3, r3, #24
   2060e:	4313      	orrs	r3, r2
   20610:	0019      	movs	r1, r3
   20612:	6dba      	ldr	r2, [r7, #88]	; 0x58
   20614:	0013      	movs	r3, r2
   20616:	005b      	lsls	r3, r3, #1
   20618:	189b      	adds	r3, r3, r2
   2061a:	00da      	lsls	r2, r3, #3
   2061c:	189b      	adds	r3, r3, r2
   2061e:	18cb      	adds	r3, r1, r3
        {
            if (build_state->cert_def->cert_elements[i].device_loc.count != build_state->cert_def->cert_elements[i].cert_loc.count)
            {
                return ATCACERT_E_BAD_CERT;
            }
            ret = atcacert_set_cert_element(
   20620:	3317      	adds	r3, #23
   20622:	0018      	movs	r0, r3
   20624:	68fb      	ldr	r3, [r7, #12]
   20626:	791a      	ldrb	r2, [r3, #4]
   20628:	7959      	ldrb	r1, [r3, #5]
   2062a:	0209      	lsls	r1, r1, #8
   2062c:	430a      	orrs	r2, r1
   2062e:	7999      	ldrb	r1, [r3, #6]
   20630:	0409      	lsls	r1, r1, #16
   20632:	430a      	orrs	r2, r1
   20634:	79db      	ldrb	r3, [r3, #7]
   20636:	061b      	lsls	r3, r3, #24
   20638:	4313      	orrs	r3, r2
   2063a:	001e      	movs	r6, r3
                build_state->cert_def,
                &build_state->cert_def->cert_elements[i].cert_loc,
                build_state->cert,
                *build_state->cert_size,
   2063c:	68fb      	ldr	r3, [r7, #12]
   2063e:	7a1a      	ldrb	r2, [r3, #8]
   20640:	7a59      	ldrb	r1, [r3, #9]
   20642:	0209      	lsls	r1, r1, #8
   20644:	430a      	orrs	r2, r1
   20646:	7a99      	ldrb	r1, [r3, #10]
   20648:	0409      	lsls	r1, r1, #16
   2064a:	430a      	orrs	r2, r1
   2064c:	7adb      	ldrb	r3, [r3, #11]
   2064e:	061b      	lsls	r3, r3, #24
   20650:	4313      	orrs	r3, r2
        {
            if (build_state->cert_def->cert_elements[i].device_loc.count != build_state->cert_def->cert_elements[i].cert_loc.count)
            {
                return ATCACERT_E_BAD_CERT;
            }
            ret = atcacert_set_cert_element(
   20652:	681c      	ldr	r4, [r3, #0]
                build_state->cert_def,
                &build_state->cert_def->cert_elements[i].cert_loc,
                build_state->cert,
                *build_state->cert_size,
                data,
                build_state->cert_def->cert_elements[i].cert_loc.count);
   20654:	68fb      	ldr	r3, [r7, #12]
   20656:	781a      	ldrb	r2, [r3, #0]
   20658:	7859      	ldrb	r1, [r3, #1]
   2065a:	0209      	lsls	r1, r1, #8
   2065c:	430a      	orrs	r2, r1
   2065e:	7899      	ldrb	r1, [r3, #2]
   20660:	0409      	lsls	r1, r1, #16
   20662:	430a      	orrs	r2, r1
   20664:	78db      	ldrb	r3, [r3, #3]
   20666:	061b      	lsls	r3, r3, #24
   20668:	4313      	orrs	r3, r2
   2066a:	2241      	movs	r2, #65	; 0x41
   2066c:	5c9a      	ldrb	r2, [r3, r2]
   2066e:	2142      	movs	r1, #66	; 0x42
   20670:	5c59      	ldrb	r1, [r3, r1]
   20672:	0209      	lsls	r1, r1, #8
   20674:	430a      	orrs	r2, r1
   20676:	2143      	movs	r1, #67	; 0x43
   20678:	5c59      	ldrb	r1, [r3, r1]
   2067a:	0409      	lsls	r1, r1, #16
   2067c:	430a      	orrs	r2, r1
   2067e:	2144      	movs	r1, #68	; 0x44
   20680:	5c5b      	ldrb	r3, [r3, r1]
   20682:	061b      	lsls	r3, r3, #24
   20684:	4313      	orrs	r3, r2
   20686:	0019      	movs	r1, r3
   20688:	6dba      	ldr	r2, [r7, #88]	; 0x58
   2068a:	0013      	movs	r3, r2
   2068c:	005b      	lsls	r3, r3, #1
   2068e:	189b      	adds	r3, r3, r2
   20690:	00da      	lsls	r2, r3, #3
   20692:	189b      	adds	r3, r3, r2
   20694:	18cb      	adds	r3, r1, r3
   20696:	7e5a      	ldrb	r2, [r3, #25]
   20698:	7e9b      	ldrb	r3, [r3, #26]
   2069a:	021b      	lsls	r3, r3, #8
   2069c:	4313      	orrs	r3, r2
   2069e:	b29b      	uxth	r3, r3
        {
            if (build_state->cert_def->cert_elements[i].device_loc.count != build_state->cert_def->cert_elements[i].cert_loc.count)
            {
                return ATCACERT_E_BAD_CERT;
            }
            ret = atcacert_set_cert_element(
   206a0:	9301      	str	r3, [sp, #4]
   206a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   206a4:	9300      	str	r3, [sp, #0]
   206a6:	0023      	movs	r3, r4
   206a8:	0032      	movs	r2, r6
   206aa:	0001      	movs	r1, r0
   206ac:	0028      	movs	r0, r5
   206ae:	f001 fbe9 	bl	21e84 <atcacert_set_cert_element>
   206b2:	0003      	movs	r3, r0
   206b4:	65fb      	str	r3, [r7, #92]	; 0x5c
                &build_state->cert_def->cert_elements[i].cert_loc,
                build_state->cert,
                *build_state->cert_size,
                data,
                build_state->cert_def->cert_elements[i].cert_loc.count);
            if (ret != ATCACERT_E_SUCCESS)
   206b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   206b8:	2b00      	cmp	r3, #0
   206ba:	d001      	beq.n	206c0 <atcacert_cert_build_process+0x55c>
            {
                return ret;
   206bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   206be:	e034      	b.n	2072a <atcacert_cert_build_process+0x5c6>

    if (build_state->cert_def->cert_elements_count > 0 && build_state->cert_def->cert_elements == NULL)
    {
        return ATCACERT_E_BAD_CERT;
    }
    for (i = 0; i < build_state->cert_def->cert_elements_count; i++)
   206c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   206c2:	3301      	adds	r3, #1
   206c4:	65bb      	str	r3, [r7, #88]	; 0x58
   206c6:	68fb      	ldr	r3, [r7, #12]
   206c8:	781a      	ldrb	r2, [r3, #0]
   206ca:	7859      	ldrb	r1, [r3, #1]
   206cc:	0209      	lsls	r1, r1, #8
   206ce:	430a      	orrs	r2, r1
   206d0:	7899      	ldrb	r1, [r3, #2]
   206d2:	0409      	lsls	r1, r1, #16
   206d4:	430a      	orrs	r2, r1
   206d6:	78db      	ldrb	r3, [r3, #3]
   206d8:	061b      	lsls	r3, r3, #24
   206da:	4313      	orrs	r3, r2
   206dc:	001a      	movs	r2, r3
   206de:	2345      	movs	r3, #69	; 0x45
   206e0:	5cd3      	ldrb	r3, [r2, r3]
   206e2:	001a      	movs	r2, r3
   206e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   206e6:	429a      	cmp	r2, r3
   206e8:	d900      	bls.n	206ec <atcacert_cert_build_process+0x588>
   206ea:	e6ef      	b.n	204cc <atcacert_cert_build_process+0x368>
                return ret;
            }
        }
    }

    data = atcacert_is_device_loc_match(&device_sn_dev_loc, device_loc, device_data);
   206ec:	687a      	ldr	r2, [r7, #4]
   206ee:	68b9      	ldr	r1, [r7, #8]
   206f0:	4b10      	ldr	r3, [pc, #64]	; (20734 <atcacert_cert_build_process+0x5d0>)
   206f2:	0018      	movs	r0, r3
   206f4:	f7ff fa88 	bl	1fc08 <atcacert_is_device_loc_match>
   206f8:	0003      	movs	r3, r0
   206fa:	657b      	str	r3, [r7, #84]	; 0x54
    if (data != NULL)
   206fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   206fe:	2b00      	cmp	r3, #0
   20700:	d012      	beq.n	20728 <atcacert_cert_build_process+0x5c4>
    {
        // Get the device SN
        build_state->is_device_sn = TRUE;
   20702:	68fb      	ldr	r3, [r7, #12]
   20704:	2201      	movs	r2, #1
   20706:	741a      	strb	r2, [r3, #16]
        memcpy(&build_state->device_sn[0], &data[0], 4);
   20708:	68fb      	ldr	r3, [r7, #12]
   2070a:	3311      	adds	r3, #17
   2070c:	6d79      	ldr	r1, [r7, #84]	; 0x54
   2070e:	2204      	movs	r2, #4
   20710:	0018      	movs	r0, r3
   20712:	f004 ffec 	bl	256ee <memcpy>
        memcpy(&build_state->device_sn[4], &data[8], 5);
   20716:	68fb      	ldr	r3, [r7, #12]
   20718:	3315      	adds	r3, #21
   2071a:	0018      	movs	r0, r3
   2071c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2071e:	3308      	adds	r3, #8
   20720:	2205      	movs	r2, #5
   20722:	0019      	movs	r1, r3
   20724:	f004 ffe3 	bl	256ee <memcpy>
    }

    return ATCACERT_E_SUCCESS;
   20728:	2300      	movs	r3, #0
}
   2072a:	0018      	movs	r0, r3
   2072c:	46bd      	mov	sp, r7
   2072e:	b019      	add	sp, #100	; 0x64
   20730:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20732:	46c0      	nop			; (mov r8, r8)
   20734:	0002e68c 	.word	0x0002e68c

00020738 <atcacert_cert_build_finish>:

int atcacert_cert_build_finish(atcacert_build_state_t* build_state)
{
   20738:	b590      	push	{r4, r7, lr}
   2073a:	b085      	sub	sp, #20
   2073c:	af00      	add	r7, sp, #0
   2073e:	6078      	str	r0, [r7, #4]
    int ret = 0;
   20740:	2300      	movs	r3, #0
   20742:	60bb      	str	r3, [r7, #8]
    const uint8_t* device_sn = NULL;
   20744:	2300      	movs	r3, #0
   20746:	60fb      	str	r3, [r7, #12]

    if (build_state == NULL)
   20748:	687b      	ldr	r3, [r7, #4]
   2074a:	2b00      	cmp	r3, #0
   2074c:	d101      	bne.n	20752 <atcacert_cert_build_finish+0x1a>
    {
        return ATCACERT_E_BAD_PARAMS;
   2074e:	2302      	movs	r3, #2
   20750:	e036      	b.n	207c0 <atcacert_cert_build_finish+0x88>
    }

    if (build_state->is_device_sn)
   20752:	687b      	ldr	r3, [r7, #4]
   20754:	7c1b      	ldrb	r3, [r3, #16]
   20756:	2b00      	cmp	r3, #0
   20758:	d002      	beq.n	20760 <atcacert_cert_build_finish+0x28>
    {
        device_sn = build_state->device_sn;
   2075a:	687b      	ldr	r3, [r7, #4]
   2075c:	3311      	adds	r3, #17
   2075e:	60fb      	str	r3, [r7, #12]
    }

    ret = atcacert_gen_cert_sn(build_state->cert_def, build_state->cert, *build_state->cert_size, device_sn);
   20760:	687b      	ldr	r3, [r7, #4]
   20762:	781a      	ldrb	r2, [r3, #0]
   20764:	7859      	ldrb	r1, [r3, #1]
   20766:	0209      	lsls	r1, r1, #8
   20768:	430a      	orrs	r2, r1
   2076a:	7899      	ldrb	r1, [r3, #2]
   2076c:	0409      	lsls	r1, r1, #16
   2076e:	430a      	orrs	r2, r1
   20770:	78db      	ldrb	r3, [r3, #3]
   20772:	061b      	lsls	r3, r3, #24
   20774:	4313      	orrs	r3, r2
   20776:	0018      	movs	r0, r3
   20778:	687b      	ldr	r3, [r7, #4]
   2077a:	791a      	ldrb	r2, [r3, #4]
   2077c:	7959      	ldrb	r1, [r3, #5]
   2077e:	0209      	lsls	r1, r1, #8
   20780:	430a      	orrs	r2, r1
   20782:	7999      	ldrb	r1, [r3, #6]
   20784:	0409      	lsls	r1, r1, #16
   20786:	430a      	orrs	r2, r1
   20788:	79db      	ldrb	r3, [r3, #7]
   2078a:	061b      	lsls	r3, r3, #24
   2078c:	4313      	orrs	r3, r2
   2078e:	001c      	movs	r4, r3
   20790:	687b      	ldr	r3, [r7, #4]
   20792:	7a1a      	ldrb	r2, [r3, #8]
   20794:	7a59      	ldrb	r1, [r3, #9]
   20796:	0209      	lsls	r1, r1, #8
   20798:	430a      	orrs	r2, r1
   2079a:	7a99      	ldrb	r1, [r3, #10]
   2079c:	0409      	lsls	r1, r1, #16
   2079e:	430a      	orrs	r2, r1
   207a0:	7adb      	ldrb	r3, [r3, #11]
   207a2:	061b      	lsls	r3, r3, #24
   207a4:	4313      	orrs	r3, r2
   207a6:	681a      	ldr	r2, [r3, #0]
   207a8:	68fb      	ldr	r3, [r7, #12]
   207aa:	0021      	movs	r1, r4
   207ac:	f000 ff5e 	bl	2166c <atcacert_gen_cert_sn>
   207b0:	0003      	movs	r3, r0
   207b2:	60bb      	str	r3, [r7, #8]
    if (ret != ATCACERT_E_SUCCESS)
   207b4:	68bb      	ldr	r3, [r7, #8]
   207b6:	2b00      	cmp	r3, #0
   207b8:	d001      	beq.n	207be <atcacert_cert_build_finish+0x86>
    {
        return ret;
   207ba:	68bb      	ldr	r3, [r7, #8]
   207bc:	e000      	b.n	207c0 <atcacert_cert_build_finish+0x88>
    }

    return ret;
   207be:	68bb      	ldr	r3, [r7, #8]
}
   207c0:	0018      	movs	r0, r3
   207c2:	46bd      	mov	sp, r7
   207c4:	b005      	add	sp, #20
   207c6:	bd90      	pop	{r4, r7, pc}

000207c8 <atcacert_is_device_loc_overlap>:

int atcacert_is_device_loc_overlap(const atcacert_device_loc_t* device_loc1,
                                   const atcacert_device_loc_t* device_loc2)
{
   207c8:	b580      	push	{r7, lr}
   207ca:	b082      	sub	sp, #8
   207cc:	af00      	add	r7, sp, #0
   207ce:	6078      	str	r0, [r7, #4]
   207d0:	6039      	str	r1, [r7, #0]
    if (device_loc1->zone != device_loc2->zone)
   207d2:	687b      	ldr	r3, [r7, #4]
   207d4:	781a      	ldrb	r2, [r3, #0]
   207d6:	683b      	ldr	r3, [r7, #0]
   207d8:	781b      	ldrb	r3, [r3, #0]
   207da:	429a      	cmp	r2, r3
   207dc:	d001      	beq.n	207e2 <atcacert_is_device_loc_overlap+0x1a>
    {
        return FALSE;   // Zones don't match, can't overlap
   207de:	2300      	movs	r3, #0
   207e0:	e047      	b.n	20872 <atcacert_is_device_loc_overlap+0xaa>
    }
    if (device_loc1->zone == DEVZONE_DATA && device_loc1->slot != device_loc2->slot)
   207e2:	687b      	ldr	r3, [r7, #4]
   207e4:	781b      	ldrb	r3, [r3, #0]
   207e6:	2b02      	cmp	r3, #2
   207e8:	d107      	bne.n	207fa <atcacert_is_device_loc_overlap+0x32>
   207ea:	687b      	ldr	r3, [r7, #4]
   207ec:	785a      	ldrb	r2, [r3, #1]
   207ee:	683b      	ldr	r3, [r7, #0]
   207f0:	785b      	ldrb	r3, [r3, #1]
   207f2:	429a      	cmp	r2, r3
   207f4:	d001      	beq.n	207fa <atcacert_is_device_loc_overlap+0x32>
    {
        return FALSE;   // Data zone, slots don't match, can't overlap
   207f6:	2300      	movs	r3, #0
   207f8:	e03b      	b.n	20872 <atcacert_is_device_loc_overlap+0xaa>
    }
    if (device_loc1->zone == DEVZONE_DATA && device_loc1->is_genkey != device_loc2->is_genkey)
   207fa:	687b      	ldr	r3, [r7, #4]
   207fc:	781b      	ldrb	r3, [r3, #0]
   207fe:	2b02      	cmp	r3, #2
   20800:	d107      	bne.n	20812 <atcacert_is_device_loc_overlap+0x4a>
   20802:	687b      	ldr	r3, [r7, #4]
   20804:	789a      	ldrb	r2, [r3, #2]
   20806:	683b      	ldr	r3, [r7, #0]
   20808:	789b      	ldrb	r3, [r3, #2]
   2080a:	429a      	cmp	r2, r3
   2080c:	d001      	beq.n	20812 <atcacert_is_device_loc_overlap+0x4a>
    {
        return FALSE;   // Data zone, same slot, but read method doesn't match, can't overlap
   2080e:	2300      	movs	r3, #0
   20810:	e02f      	b.n	20872 <atcacert_is_device_loc_overlap+0xaa>

    }
    return !(   device_loc1->offset + device_loc1->count <= device_loc2->offset
   20812:	687b      	ldr	r3, [r7, #4]
   20814:	78da      	ldrb	r2, [r3, #3]
   20816:	791b      	ldrb	r3, [r3, #4]
   20818:	021b      	lsls	r3, r3, #8
   2081a:	4313      	orrs	r3, r2
   2081c:	b29b      	uxth	r3, r3
   2081e:	0019      	movs	r1, r3
   20820:	687b      	ldr	r3, [r7, #4]
   20822:	795a      	ldrb	r2, [r3, #5]
   20824:	799b      	ldrb	r3, [r3, #6]
   20826:	021b      	lsls	r3, r3, #8
   20828:	4313      	orrs	r3, r2
   2082a:	b29b      	uxth	r3, r3
   2082c:	18ca      	adds	r2, r1, r3
   2082e:	683b      	ldr	r3, [r7, #0]
   20830:	78d9      	ldrb	r1, [r3, #3]
   20832:	791b      	ldrb	r3, [r3, #4]
   20834:	021b      	lsls	r3, r3, #8
   20836:	430b      	orrs	r3, r1
   20838:	b29b      	uxth	r3, r3
   2083a:	429a      	cmp	r2, r3
   2083c:	dd18      	ble.n	20870 <atcacert_is_device_loc_overlap+0xa8>
                || device_loc1->offset >= device_loc2->offset + device_loc2->count);
   2083e:	687b      	ldr	r3, [r7, #4]
   20840:	78da      	ldrb	r2, [r3, #3]
   20842:	791b      	ldrb	r3, [r3, #4]
   20844:	021b      	lsls	r3, r3, #8
   20846:	4313      	orrs	r3, r2
   20848:	b29b      	uxth	r3, r3
   2084a:	0019      	movs	r1, r3
   2084c:	683b      	ldr	r3, [r7, #0]
   2084e:	78da      	ldrb	r2, [r3, #3]
   20850:	791b      	ldrb	r3, [r3, #4]
   20852:	021b      	lsls	r3, r3, #8
   20854:	4313      	orrs	r3, r2
   20856:	b29b      	uxth	r3, r3
   20858:	0018      	movs	r0, r3
   2085a:	683b      	ldr	r3, [r7, #0]
   2085c:	795a      	ldrb	r2, [r3, #5]
   2085e:	799b      	ldrb	r3, [r3, #6]
   20860:	021b      	lsls	r3, r3, #8
   20862:	4313      	orrs	r3, r2
   20864:	b29b      	uxth	r3, r3
   20866:	18c3      	adds	r3, r0, r3
    if (device_loc1->zone == DEVZONE_DATA && device_loc1->is_genkey != device_loc2->is_genkey)
    {
        return FALSE;   // Data zone, same slot, but read method doesn't match, can't overlap

    }
    return !(   device_loc1->offset + device_loc1->count <= device_loc2->offset
   20868:	4299      	cmp	r1, r3
   2086a:	da01      	bge.n	20870 <atcacert_is_device_loc_overlap+0xa8>
   2086c:	2301      	movs	r3, #1
   2086e:	e000      	b.n	20872 <atcacert_is_device_loc_overlap+0xaa>
   20870:	2300      	movs	r3, #0
                || device_loc1->offset >= device_loc2->offset + device_loc2->count);
}
   20872:	0018      	movs	r0, r3
   20874:	46bd      	mov	sp, r7
   20876:	b002      	add	sp, #8
   20878:	bd80      	pop	{r7, pc}
   2087a:	46c0      	nop			; (mov r8, r8)

0002087c <atcacert_copy_device_loc_data>:

static void atcacert_copy_device_loc_data(const atcacert_device_loc_t* device_loc_src,
                                          const uint8_t*               data_src,
                                          const atcacert_device_loc_t* device_loc_dest,
                                          uint8_t*                     data_dest)
{
   2087c:	b580      	push	{r7, lr}
   2087e:	b086      	sub	sp, #24
   20880:	af00      	add	r7, sp, #0
   20882:	60f8      	str	r0, [r7, #12]
   20884:	60b9      	str	r1, [r7, #8]
   20886:	607a      	str	r2, [r7, #4]
   20888:	603b      	str	r3, [r7, #0]
    size_t offset = ATCACERT_MAX(device_loc_src->offset, device_loc_dest->offset);
   2088a:	68fb      	ldr	r3, [r7, #12]
   2088c:	78da      	ldrb	r2, [r3, #3]
   2088e:	791b      	ldrb	r3, [r3, #4]
   20890:	021b      	lsls	r3, r3, #8
   20892:	4313      	orrs	r3, r2
   20894:	b299      	uxth	r1, r3
   20896:	687b      	ldr	r3, [r7, #4]
   20898:	78da      	ldrb	r2, [r3, #3]
   2089a:	791b      	ldrb	r3, [r3, #4]
   2089c:	021b      	lsls	r3, r3, #8
   2089e:	4313      	orrs	r3, r2
   208a0:	b29b      	uxth	r3, r3
   208a2:	1c18      	adds	r0, r3, #0
   208a4:	b28a      	uxth	r2, r1
   208a6:	b283      	uxth	r3, r0
   208a8:	429a      	cmp	r2, r3
   208aa:	d200      	bcs.n	208ae <atcacert_copy_device_loc_data+0x32>
   208ac:	1c01      	adds	r1, r0, #0
   208ae:	b28b      	uxth	r3, r1
   208b0:	617b      	str	r3, [r7, #20]
    size_t end    = ATCACERT_MIN(device_loc_src->offset + device_loc_src->count, device_loc_dest->offset + device_loc_dest->count);
   208b2:	687b      	ldr	r3, [r7, #4]
   208b4:	78da      	ldrb	r2, [r3, #3]
   208b6:	791b      	ldrb	r3, [r3, #4]
   208b8:	021b      	lsls	r3, r3, #8
   208ba:	4313      	orrs	r3, r2
   208bc:	b29b      	uxth	r3, r3
   208be:	0019      	movs	r1, r3
   208c0:	687b      	ldr	r3, [r7, #4]
   208c2:	795a      	ldrb	r2, [r3, #5]
   208c4:	799b      	ldrb	r3, [r3, #6]
   208c6:	021b      	lsls	r3, r3, #8
   208c8:	4313      	orrs	r3, r2
   208ca:	b29b      	uxth	r3, r3
   208cc:	18c9      	adds	r1, r1, r3
   208ce:	68fb      	ldr	r3, [r7, #12]
   208d0:	78da      	ldrb	r2, [r3, #3]
   208d2:	791b      	ldrb	r3, [r3, #4]
   208d4:	021b      	lsls	r3, r3, #8
   208d6:	4313      	orrs	r3, r2
   208d8:	b29b      	uxth	r3, r3
   208da:	0018      	movs	r0, r3
   208dc:	68fb      	ldr	r3, [r7, #12]
   208de:	795a      	ldrb	r2, [r3, #5]
   208e0:	799b      	ldrb	r3, [r3, #6]
   208e2:	021b      	lsls	r3, r3, #8
   208e4:	4313      	orrs	r3, r2
   208e6:	b29b      	uxth	r3, r3
   208e8:	18c2      	adds	r2, r0, r3
   208ea:	000b      	movs	r3, r1
   208ec:	4293      	cmp	r3, r2
   208ee:	dd00      	ble.n	208f2 <atcacert_copy_device_loc_data+0x76>
   208f0:	0013      	movs	r3, r2
   208f2:	613b      	str	r3, [r7, #16]

    memcpy(&data_dest[offset - device_loc_dest->offset], &data_src[offset - device_loc_src->offset], end - offset);
   208f4:	687b      	ldr	r3, [r7, #4]
   208f6:	78da      	ldrb	r2, [r3, #3]
   208f8:	791b      	ldrb	r3, [r3, #4]
   208fa:	021b      	lsls	r3, r3, #8
   208fc:	4313      	orrs	r3, r2
   208fe:	b29b      	uxth	r3, r3
   20900:	001a      	movs	r2, r3
   20902:	697b      	ldr	r3, [r7, #20]
   20904:	1a9b      	subs	r3, r3, r2
   20906:	683a      	ldr	r2, [r7, #0]
   20908:	18d0      	adds	r0, r2, r3
   2090a:	68fb      	ldr	r3, [r7, #12]
   2090c:	78da      	ldrb	r2, [r3, #3]
   2090e:	791b      	ldrb	r3, [r3, #4]
   20910:	021b      	lsls	r3, r3, #8
   20912:	4313      	orrs	r3, r2
   20914:	b29b      	uxth	r3, r3
   20916:	001a      	movs	r2, r3
   20918:	697b      	ldr	r3, [r7, #20]
   2091a:	1a9b      	subs	r3, r3, r2
   2091c:	68ba      	ldr	r2, [r7, #8]
   2091e:	18d1      	adds	r1, r2, r3
   20920:	693a      	ldr	r2, [r7, #16]
   20922:	697b      	ldr	r3, [r7, #20]
   20924:	1ad3      	subs	r3, r2, r3
   20926:	001a      	movs	r2, r3
   20928:	f004 fee1 	bl	256ee <memcpy>
}
   2092c:	46c0      	nop			; (mov r8, r8)
   2092e:	46bd      	mov	sp, r7
   20930:	b006      	add	sp, #24
   20932:	bd80      	pop	{r7, pc}

00020934 <atcacert_get_device_data>:
int atcacert_get_device_data(const atcacert_def_t*        cert_def,
                             const uint8_t*               cert,
                             size_t                       cert_size,
                             const atcacert_device_loc_t* device_loc,
                             uint8_t*                     device_data)
{
   20934:	b590      	push	{r4, r7, lr}
   20936:	b0cb      	sub	sp, #300	; 0x12c
   20938:	af02      	add	r7, sp, #8
   2093a:	60f8      	str	r0, [r7, #12]
   2093c:	60b9      	str	r1, [r7, #8]
   2093e:	607a      	str	r2, [r7, #4]
   20940:	603b      	str	r3, [r7, #0]
    int ret = 0;
   20942:	2300      	movs	r3, #0
   20944:	228c      	movs	r2, #140	; 0x8c
   20946:	0052      	lsls	r2, r2, #1
   20948:	18ba      	adds	r2, r7, r2
   2094a:	6013      	str	r3, [r2, #0]
    int i = 0;
   2094c:	2300      	movs	r3, #0
   2094e:	228e      	movs	r2, #142	; 0x8e
   20950:	0052      	lsls	r2, r2, #1
   20952:	18ba      	adds	r2, r7, r2
   20954:	6013      	str	r3, [r2, #0]
    uint8_t temp_buf[256]; // Must be at least 72 bytes
    size_t temp_buf_size = sizeof(temp_buf);
   20956:	2380      	movs	r3, #128	; 0x80
   20958:	005b      	lsls	r3, r3, #1
   2095a:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert == NULL || device_loc == NULL || device_data == NULL)
   2095c:	68fb      	ldr	r3, [r7, #12]
   2095e:	2b00      	cmp	r3, #0
   20960:	d00b      	beq.n	2097a <atcacert_get_device_data+0x46>
   20962:	68bb      	ldr	r3, [r7, #8]
   20964:	2b00      	cmp	r3, #0
   20966:	d008      	beq.n	2097a <atcacert_get_device_data+0x46>
   20968:	683b      	ldr	r3, [r7, #0]
   2096a:	2b00      	cmp	r3, #0
   2096c:	d005      	beq.n	2097a <atcacert_get_device_data+0x46>
   2096e:	2398      	movs	r3, #152	; 0x98
   20970:	005b      	lsls	r3, r3, #1
   20972:	18fb      	adds	r3, r7, r3
   20974:	681b      	ldr	r3, [r3, #0]
   20976:	2b00      	cmp	r3, #0
   20978:	d101      	bne.n	2097e <atcacert_get_device_data+0x4a>
    {
        return ATCACERT_E_BAD_PARAMS;
   2097a:	2302      	movs	r3, #2
   2097c:	e1a1      	b.n	20cc2 <atcacert_get_device_data+0x38e>
    }

    // Certificate serial number
    if (atcacert_is_device_loc_overlap(&cert_def->cert_sn_dev_loc, device_loc))
   2097e:	68fb      	ldr	r3, [r7, #12]
   20980:	3305      	adds	r3, #5
   20982:	683a      	ldr	r2, [r7, #0]
   20984:	0011      	movs	r1, r2
   20986:	0018      	movs	r0, r3
   20988:	f7ff ff1e 	bl	207c8 <atcacert_is_device_loc_overlap>
   2098c:	1e03      	subs	r3, r0, #0
   2098e:	d025      	beq.n	209dc <atcacert_get_device_data+0xa8>
    {
        ret = atcacert_get_cert_sn(cert_def, cert, cert_size, temp_buf, &temp_buf_size);
   20990:	2318      	movs	r3, #24
   20992:	18fc      	adds	r4, r7, r3
   20994:	687a      	ldr	r2, [r7, #4]
   20996:	68b9      	ldr	r1, [r7, #8]
   20998:	68f8      	ldr	r0, [r7, #12]
   2099a:	2314      	movs	r3, #20
   2099c:	18fb      	adds	r3, r7, r3
   2099e:	9300      	str	r3, [sp, #0]
   209a0:	0023      	movs	r3, r4
   209a2:	f000 fffb 	bl	2199c <atcacert_get_cert_sn>
   209a6:	0003      	movs	r3, r0
   209a8:	228c      	movs	r2, #140	; 0x8c
   209aa:	0052      	lsls	r2, r2, #1
   209ac:	18ba      	adds	r2, r7, r2
   209ae:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   209b0:	238c      	movs	r3, #140	; 0x8c
   209b2:	005b      	lsls	r3, r3, #1
   209b4:	18fb      	adds	r3, r7, r3
   209b6:	681b      	ldr	r3, [r3, #0]
   209b8:	2b00      	cmp	r3, #0
   209ba:	d004      	beq.n	209c6 <atcacert_get_device_data+0x92>
        {
            return ret;
   209bc:	238c      	movs	r3, #140	; 0x8c
   209be:	005b      	lsls	r3, r3, #1
   209c0:	18fb      	adds	r3, r7, r3
   209c2:	681b      	ldr	r3, [r3, #0]
   209c4:	e17d      	b.n	20cc2 <atcacert_get_device_data+0x38e>
        }
        atcacert_copy_device_loc_data(&cert_def->cert_sn_dev_loc, temp_buf, device_loc, device_data);
   209c6:	68fb      	ldr	r3, [r7, #12]
   209c8:	1d58      	adds	r0, r3, #5
   209ca:	2398      	movs	r3, #152	; 0x98
   209cc:	005b      	lsls	r3, r3, #1
   209ce:	18fb      	adds	r3, r7, r3
   209d0:	681b      	ldr	r3, [r3, #0]
   209d2:	683a      	ldr	r2, [r7, #0]
   209d4:	2118      	movs	r1, #24
   209d6:	1879      	adds	r1, r7, r1
   209d8:	f7ff ff50 	bl	2087c <atcacert_copy_device_loc_data>
    }

    // Subject public key
    if (atcacert_is_device_loc_overlap(&cert_def->public_key_dev_loc, device_loc))
   209dc:	68fb      	ldr	r3, [r7, #12]
   209de:	3313      	adds	r3, #19
   209e0:	683a      	ldr	r2, [r7, #0]
   209e2:	0011      	movs	r1, r2
   209e4:	0018      	movs	r0, r3
   209e6:	f7ff feef 	bl	207c8 <atcacert_is_device_loc_overlap>
   209ea:	1e03      	subs	r3, r0, #0
   209ec:	d03d      	beq.n	20a6a <atcacert_get_device_data+0x136>
    {
        ret = atcacert_get_subj_public_key(cert_def, cert, cert_size, temp_buf);
   209ee:	2318      	movs	r3, #24
   209f0:	18fb      	adds	r3, r7, r3
   209f2:	687a      	ldr	r2, [r7, #4]
   209f4:	68b9      	ldr	r1, [r7, #8]
   209f6:	68f8      	ldr	r0, [r7, #12]
   209f8:	f000 f9b8 	bl	20d6c <atcacert_get_subj_public_key>
   209fc:	0003      	movs	r3, r0
   209fe:	228c      	movs	r2, #140	; 0x8c
   20a00:	0052      	lsls	r2, r2, #1
   20a02:	18ba      	adds	r2, r7, r2
   20a04:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   20a06:	238c      	movs	r3, #140	; 0x8c
   20a08:	005b      	lsls	r3, r3, #1
   20a0a:	18fb      	adds	r3, r7, r3
   20a0c:	681b      	ldr	r3, [r3, #0]
   20a0e:	2b00      	cmp	r3, #0
   20a10:	d004      	beq.n	20a1c <atcacert_get_device_data+0xe8>
        {
            return ret;
   20a12:	238c      	movs	r3, #140	; 0x8c
   20a14:	005b      	lsls	r3, r3, #1
   20a16:	18fb      	adds	r3, r7, r3
   20a18:	681b      	ldr	r3, [r3, #0]
   20a1a:	e152      	b.n	20cc2 <atcacert_get_device_data+0x38e>
        }
        if (cert_def->public_key_dev_loc.count == 72)
   20a1c:	68fb      	ldr	r3, [r7, #12]
   20a1e:	7e1a      	ldrb	r2, [r3, #24]
   20a20:	7e5b      	ldrb	r3, [r3, #25]
   20a22:	021b      	lsls	r3, r3, #8
   20a24:	4313      	orrs	r3, r2
   20a26:	b29b      	uxth	r3, r3
   20a28:	2b48      	cmp	r3, #72	; 0x48
   20a2a:	d108      	bne.n	20a3e <atcacert_get_device_data+0x10a>
        {
            // Public key is formatted with padding bytes in front of the X and Y components
            atcacert_public_key_add_padding(temp_buf, temp_buf);
   20a2c:	2318      	movs	r3, #24
   20a2e:	18fa      	adds	r2, r7, r3
   20a30:	2318      	movs	r3, #24
   20a32:	18fb      	adds	r3, r7, r3
   20a34:	0011      	movs	r1, r2
   20a36:	0018      	movs	r0, r3
   20a38:	f001 fb2e 	bl	22098 <atcacert_public_key_add_padding>
   20a3c:	e009      	b.n	20a52 <atcacert_get_device_data+0x11e>
        }
        else if (cert_def->public_key_dev_loc.count != 64)
   20a3e:	68fb      	ldr	r3, [r7, #12]
   20a40:	7e1a      	ldrb	r2, [r3, #24]
   20a42:	7e5b      	ldrb	r3, [r3, #25]
   20a44:	021b      	lsls	r3, r3, #8
   20a46:	4313      	orrs	r3, r2
   20a48:	b29b      	uxth	r3, r3
   20a4a:	2b40      	cmp	r3, #64	; 0x40
   20a4c:	d001      	beq.n	20a52 <atcacert_get_device_data+0x11e>
        {
            return ATCACERT_E_BAD_CERT;  // Unexpected public key size
   20a4e:	230a      	movs	r3, #10
   20a50:	e137      	b.n	20cc2 <atcacert_get_device_data+0x38e>
        }
        atcacert_copy_device_loc_data(&cert_def->public_key_dev_loc, temp_buf, device_loc, device_data);
   20a52:	68fb      	ldr	r3, [r7, #12]
   20a54:	3313      	adds	r3, #19
   20a56:	0018      	movs	r0, r3
   20a58:	2398      	movs	r3, #152	; 0x98
   20a5a:	005b      	lsls	r3, r3, #1
   20a5c:	18fb      	adds	r3, r7, r3
   20a5e:	681b      	ldr	r3, [r3, #0]
   20a60:	683a      	ldr	r2, [r7, #0]
   20a62:	2118      	movs	r1, #24
   20a64:	1879      	adds	r1, r7, r1
   20a66:	f7ff ff09 	bl	2087c <atcacert_copy_device_loc_data>
    }

    // Compressed certificate
    if (atcacert_is_device_loc_overlap(&cert_def->comp_cert_dev_loc, device_loc))
   20a6a:	68fb      	ldr	r3, [r7, #12]
   20a6c:	331a      	adds	r3, #26
   20a6e:	683a      	ldr	r2, [r7, #0]
   20a70:	0011      	movs	r1, r2
   20a72:	0018      	movs	r0, r3
   20a74:	f7ff fea8 	bl	207c8 <atcacert_is_device_loc_overlap>
   20a78:	1e03      	subs	r3, r0, #0
   20a7a:	d02d      	beq.n	20ad8 <atcacert_get_device_data+0x1a4>
    {
        ret = atcacert_get_comp_cert(cert_def, cert, cert_size, temp_buf);
   20a7c:	2318      	movs	r3, #24
   20a7e:	18fb      	adds	r3, r7, r3
   20a80:	687a      	ldr	r2, [r7, #4]
   20a82:	68b9      	ldr	r1, [r7, #8]
   20a84:	68f8      	ldr	r0, [r7, #12]
   20a86:	f001 f8cb 	bl	21c20 <atcacert_get_comp_cert>
   20a8a:	0003      	movs	r3, r0
   20a8c:	228c      	movs	r2, #140	; 0x8c
   20a8e:	0052      	lsls	r2, r2, #1
   20a90:	18ba      	adds	r2, r7, r2
   20a92:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   20a94:	238c      	movs	r3, #140	; 0x8c
   20a96:	005b      	lsls	r3, r3, #1
   20a98:	18fb      	adds	r3, r7, r3
   20a9a:	681b      	ldr	r3, [r3, #0]
   20a9c:	2b00      	cmp	r3, #0
   20a9e:	d004      	beq.n	20aaa <atcacert_get_device_data+0x176>
        {
            return ret;
   20aa0:	238c      	movs	r3, #140	; 0x8c
   20aa2:	005b      	lsls	r3, r3, #1
   20aa4:	18fb      	adds	r3, r7, r3
   20aa6:	681b      	ldr	r3, [r3, #0]
   20aa8:	e10b      	b.n	20cc2 <atcacert_get_device_data+0x38e>
        }
        if (cert_def->comp_cert_dev_loc.count != 72)
   20aaa:	68fb      	ldr	r3, [r7, #12]
   20aac:	7fda      	ldrb	r2, [r3, #31]
   20aae:	2120      	movs	r1, #32
   20ab0:	5c5b      	ldrb	r3, [r3, r1]
   20ab2:	021b      	lsls	r3, r3, #8
   20ab4:	4313      	orrs	r3, r2
   20ab6:	b29b      	uxth	r3, r3
   20ab8:	2b48      	cmp	r3, #72	; 0x48
   20aba:	d001      	beq.n	20ac0 <atcacert_get_device_data+0x18c>
        {
            return ATCACERT_E_BAD_CERT;  // Unexpected compressed certificate size
   20abc:	230a      	movs	r3, #10
   20abe:	e100      	b.n	20cc2 <atcacert_get_device_data+0x38e>
        }
        atcacert_copy_device_loc_data(&cert_def->comp_cert_dev_loc, temp_buf, device_loc, device_data);
   20ac0:	68fb      	ldr	r3, [r7, #12]
   20ac2:	331a      	adds	r3, #26
   20ac4:	0018      	movs	r0, r3
   20ac6:	2398      	movs	r3, #152	; 0x98
   20ac8:	005b      	lsls	r3, r3, #1
   20aca:	18fb      	adds	r3, r7, r3
   20acc:	681b      	ldr	r3, [r3, #0]
   20ace:	683a      	ldr	r2, [r7, #0]
   20ad0:	2118      	movs	r1, #24
   20ad2:	1879      	adds	r1, r7, r1
   20ad4:	f7ff fed2 	bl	2087c <atcacert_copy_device_loc_data>
    }

    // Additional custom certificate elements
    if (cert_def->cert_elements_count > 0 && cert_def->cert_elements == NULL)
   20ad8:	68fb      	ldr	r3, [r7, #12]
   20ada:	2245      	movs	r2, #69	; 0x45
   20adc:	5c9b      	ldrb	r3, [r3, r2]
   20ade:	2b00      	cmp	r3, #0
   20ae0:	d011      	beq.n	20b06 <atcacert_get_device_data+0x1d2>
   20ae2:	68fb      	ldr	r3, [r7, #12]
   20ae4:	2241      	movs	r2, #65	; 0x41
   20ae6:	5c9a      	ldrb	r2, [r3, r2]
   20ae8:	2142      	movs	r1, #66	; 0x42
   20aea:	5c59      	ldrb	r1, [r3, r1]
   20aec:	0209      	lsls	r1, r1, #8
   20aee:	430a      	orrs	r2, r1
   20af0:	2143      	movs	r1, #67	; 0x43
   20af2:	5c59      	ldrb	r1, [r3, r1]
   20af4:	0409      	lsls	r1, r1, #16
   20af6:	430a      	orrs	r2, r1
   20af8:	2144      	movs	r1, #68	; 0x44
   20afa:	5c5b      	ldrb	r3, [r3, r1]
   20afc:	061b      	lsls	r3, r3, #24
   20afe:	4313      	orrs	r3, r2
   20b00:	d101      	bne.n	20b06 <atcacert_get_device_data+0x1d2>
    {
        return ATCACERT_E_BAD_CERT;
   20b02:	230a      	movs	r3, #10
   20b04:	e0dd      	b.n	20cc2 <atcacert_get_device_data+0x38e>
    }
    for (i = 0; i < cert_def->cert_elements_count; i++)
   20b06:	2300      	movs	r3, #0
   20b08:	228e      	movs	r2, #142	; 0x8e
   20b0a:	0052      	lsls	r2, r2, #1
   20b0c:	18ba      	adds	r2, r7, r2
   20b0e:	6013      	str	r3, [r2, #0]
   20b10:	e0cb      	b.n	20caa <atcacert_get_device_data+0x376>
    {
        if (atcacert_is_device_loc_overlap(&cert_def->cert_elements[i].device_loc, device_loc))
   20b12:	68fb      	ldr	r3, [r7, #12]
   20b14:	2241      	movs	r2, #65	; 0x41
   20b16:	5c9a      	ldrb	r2, [r3, r2]
   20b18:	2142      	movs	r1, #66	; 0x42
   20b1a:	5c59      	ldrb	r1, [r3, r1]
   20b1c:	0209      	lsls	r1, r1, #8
   20b1e:	430a      	orrs	r2, r1
   20b20:	2143      	movs	r1, #67	; 0x43
   20b22:	5c59      	ldrb	r1, [r3, r1]
   20b24:	0409      	lsls	r1, r1, #16
   20b26:	430a      	orrs	r2, r1
   20b28:	2144      	movs	r1, #68	; 0x44
   20b2a:	5c5b      	ldrb	r3, [r3, r1]
   20b2c:	061b      	lsls	r3, r3, #24
   20b2e:	4313      	orrs	r3, r2
   20b30:	0019      	movs	r1, r3
   20b32:	238e      	movs	r3, #142	; 0x8e
   20b34:	005b      	lsls	r3, r3, #1
   20b36:	18fb      	adds	r3, r7, r3
   20b38:	681a      	ldr	r2, [r3, #0]
   20b3a:	0013      	movs	r3, r2
   20b3c:	005b      	lsls	r3, r3, #1
   20b3e:	189b      	adds	r3, r3, r2
   20b40:	00da      	lsls	r2, r3, #3
   20b42:	189b      	adds	r3, r3, r2
   20b44:	18cb      	adds	r3, r1, r3
   20b46:	3310      	adds	r3, #16
   20b48:	683a      	ldr	r2, [r7, #0]
   20b4a:	0011      	movs	r1, r2
   20b4c:	0018      	movs	r0, r3
   20b4e:	f7ff fe3b 	bl	207c8 <atcacert_is_device_loc_overlap>
   20b52:	1e03      	subs	r3, r0, #0
   20b54:	d100      	bne.n	20b58 <atcacert_get_device_data+0x224>
   20b56:	e09f      	b.n	20c98 <atcacert_get_device_data+0x364>
        {
            if (sizeof(temp_buf) < cert_def->cert_elements[i].device_loc.count)
   20b58:	68fb      	ldr	r3, [r7, #12]
   20b5a:	2241      	movs	r2, #65	; 0x41
   20b5c:	5c9a      	ldrb	r2, [r3, r2]
   20b5e:	2142      	movs	r1, #66	; 0x42
   20b60:	5c59      	ldrb	r1, [r3, r1]
   20b62:	0209      	lsls	r1, r1, #8
   20b64:	430a      	orrs	r2, r1
   20b66:	2143      	movs	r1, #67	; 0x43
   20b68:	5c59      	ldrb	r1, [r3, r1]
   20b6a:	0409      	lsls	r1, r1, #16
   20b6c:	430a      	orrs	r2, r1
   20b6e:	2144      	movs	r1, #68	; 0x44
   20b70:	5c5b      	ldrb	r3, [r3, r1]
   20b72:	061b      	lsls	r3, r3, #24
   20b74:	4313      	orrs	r3, r2
   20b76:	0019      	movs	r1, r3
   20b78:	238e      	movs	r3, #142	; 0x8e
   20b7a:	005b      	lsls	r3, r3, #1
   20b7c:	18fb      	adds	r3, r7, r3
   20b7e:	681a      	ldr	r2, [r3, #0]
   20b80:	0013      	movs	r3, r2
   20b82:	005b      	lsls	r3, r3, #1
   20b84:	189b      	adds	r3, r3, r2
   20b86:	00da      	lsls	r2, r3, #3
   20b88:	189b      	adds	r3, r3, r2
   20b8a:	18cb      	adds	r3, r1, r3
   20b8c:	7d5a      	ldrb	r2, [r3, #21]
   20b8e:	7d9b      	ldrb	r3, [r3, #22]
   20b90:	021b      	lsls	r3, r3, #8
   20b92:	4313      	orrs	r3, r2
   20b94:	b29a      	uxth	r2, r3
   20b96:	2380      	movs	r3, #128	; 0x80
   20b98:	005b      	lsls	r3, r3, #1
   20b9a:	429a      	cmp	r2, r3
   20b9c:	d901      	bls.n	20ba2 <atcacert_get_device_data+0x26e>
            {
                return ATCACERT_E_BUFFER_TOO_SMALL;
   20b9e:	2303      	movs	r3, #3
   20ba0:	e08f      	b.n	20cc2 <atcacert_get_device_data+0x38e>
            }
            ret = atcacert_get_cert_element(
                cert_def,
                &cert_def->cert_elements[i].cert_loc,
   20ba2:	68fb      	ldr	r3, [r7, #12]
   20ba4:	2241      	movs	r2, #65	; 0x41
   20ba6:	5c9a      	ldrb	r2, [r3, r2]
   20ba8:	2142      	movs	r1, #66	; 0x42
   20baa:	5c59      	ldrb	r1, [r3, r1]
   20bac:	0209      	lsls	r1, r1, #8
   20bae:	430a      	orrs	r2, r1
   20bb0:	2143      	movs	r1, #67	; 0x43
   20bb2:	5c59      	ldrb	r1, [r3, r1]
   20bb4:	0409      	lsls	r1, r1, #16
   20bb6:	430a      	orrs	r2, r1
   20bb8:	2144      	movs	r1, #68	; 0x44
   20bba:	5c5b      	ldrb	r3, [r3, r1]
   20bbc:	061b      	lsls	r3, r3, #24
   20bbe:	4313      	orrs	r3, r2
   20bc0:	0019      	movs	r1, r3
   20bc2:	238e      	movs	r3, #142	; 0x8e
   20bc4:	005b      	lsls	r3, r3, #1
   20bc6:	18fb      	adds	r3, r7, r3
   20bc8:	681a      	ldr	r2, [r3, #0]
   20bca:	0013      	movs	r3, r2
   20bcc:	005b      	lsls	r3, r3, #1
   20bce:	189b      	adds	r3, r3, r2
   20bd0:	00da      	lsls	r2, r3, #3
   20bd2:	189b      	adds	r3, r3, r2
   20bd4:	18cb      	adds	r3, r1, r3
        {
            if (sizeof(temp_buf) < cert_def->cert_elements[i].device_loc.count)
            {
                return ATCACERT_E_BUFFER_TOO_SMALL;
            }
            ret = atcacert_get_cert_element(
   20bd6:	3317      	adds	r3, #23
   20bd8:	001c      	movs	r4, r3
                cert_def,
                &cert_def->cert_elements[i].cert_loc,
                cert,
                cert_size,
                temp_buf,
                cert_def->cert_elements[i].device_loc.count);
   20bda:	68fb      	ldr	r3, [r7, #12]
   20bdc:	2241      	movs	r2, #65	; 0x41
   20bde:	5c9a      	ldrb	r2, [r3, r2]
   20be0:	2142      	movs	r1, #66	; 0x42
   20be2:	5c59      	ldrb	r1, [r3, r1]
   20be4:	0209      	lsls	r1, r1, #8
   20be6:	430a      	orrs	r2, r1
   20be8:	2143      	movs	r1, #67	; 0x43
   20bea:	5c59      	ldrb	r1, [r3, r1]
   20bec:	0409      	lsls	r1, r1, #16
   20bee:	430a      	orrs	r2, r1
   20bf0:	2144      	movs	r1, #68	; 0x44
   20bf2:	5c5b      	ldrb	r3, [r3, r1]
   20bf4:	061b      	lsls	r3, r3, #24
   20bf6:	4313      	orrs	r3, r2
   20bf8:	0019      	movs	r1, r3
   20bfa:	238e      	movs	r3, #142	; 0x8e
   20bfc:	005b      	lsls	r3, r3, #1
   20bfe:	18fb      	adds	r3, r7, r3
   20c00:	681a      	ldr	r2, [r3, #0]
   20c02:	0013      	movs	r3, r2
   20c04:	005b      	lsls	r3, r3, #1
   20c06:	189b      	adds	r3, r3, r2
   20c08:	00da      	lsls	r2, r3, #3
   20c0a:	189b      	adds	r3, r3, r2
   20c0c:	18cb      	adds	r3, r1, r3
   20c0e:	7d5a      	ldrb	r2, [r3, #21]
   20c10:	7d9b      	ldrb	r3, [r3, #22]
   20c12:	021b      	lsls	r3, r3, #8
   20c14:	4313      	orrs	r3, r2
   20c16:	b29b      	uxth	r3, r3
        {
            if (sizeof(temp_buf) < cert_def->cert_elements[i].device_loc.count)
            {
                return ATCACERT_E_BUFFER_TOO_SMALL;
            }
            ret = atcacert_get_cert_element(
   20c18:	6879      	ldr	r1, [r7, #4]
   20c1a:	68ba      	ldr	r2, [r7, #8]
   20c1c:	68f8      	ldr	r0, [r7, #12]
   20c1e:	9301      	str	r3, [sp, #4]
   20c20:	2318      	movs	r3, #24
   20c22:	18fb      	adds	r3, r7, r3
   20c24:	9300      	str	r3, [sp, #0]
   20c26:	000b      	movs	r3, r1
   20c28:	0021      	movs	r1, r4
   20c2a:	f001 f9a7 	bl	21f7c <atcacert_get_cert_element>
   20c2e:	0003      	movs	r3, r0
   20c30:	228c      	movs	r2, #140	; 0x8c
   20c32:	0052      	lsls	r2, r2, #1
   20c34:	18ba      	adds	r2, r7, r2
   20c36:	6013      	str	r3, [r2, #0]
                &cert_def->cert_elements[i].cert_loc,
                cert,
                cert_size,
                temp_buf,
                cert_def->cert_elements[i].device_loc.count);
            if (ret != ATCACERT_E_SUCCESS)
   20c38:	238c      	movs	r3, #140	; 0x8c
   20c3a:	005b      	lsls	r3, r3, #1
   20c3c:	18fb      	adds	r3, r7, r3
   20c3e:	681b      	ldr	r3, [r3, #0]
   20c40:	2b00      	cmp	r3, #0
   20c42:	d004      	beq.n	20c4e <atcacert_get_device_data+0x31a>
            {
                return ret;
   20c44:	238c      	movs	r3, #140	; 0x8c
   20c46:	005b      	lsls	r3, r3, #1
   20c48:	18fb      	adds	r3, r7, r3
   20c4a:	681b      	ldr	r3, [r3, #0]
   20c4c:	e039      	b.n	20cc2 <atcacert_get_device_data+0x38e>
            }
            atcacert_copy_device_loc_data(&cert_def->cert_elements[i].device_loc, temp_buf, device_loc, device_data);
   20c4e:	68fb      	ldr	r3, [r7, #12]
   20c50:	2241      	movs	r2, #65	; 0x41
   20c52:	5c9a      	ldrb	r2, [r3, r2]
   20c54:	2142      	movs	r1, #66	; 0x42
   20c56:	5c59      	ldrb	r1, [r3, r1]
   20c58:	0209      	lsls	r1, r1, #8
   20c5a:	430a      	orrs	r2, r1
   20c5c:	2143      	movs	r1, #67	; 0x43
   20c5e:	5c59      	ldrb	r1, [r3, r1]
   20c60:	0409      	lsls	r1, r1, #16
   20c62:	430a      	orrs	r2, r1
   20c64:	2144      	movs	r1, #68	; 0x44
   20c66:	5c5b      	ldrb	r3, [r3, r1]
   20c68:	061b      	lsls	r3, r3, #24
   20c6a:	4313      	orrs	r3, r2
   20c6c:	0019      	movs	r1, r3
   20c6e:	238e      	movs	r3, #142	; 0x8e
   20c70:	005b      	lsls	r3, r3, #1
   20c72:	18fb      	adds	r3, r7, r3
   20c74:	681a      	ldr	r2, [r3, #0]
   20c76:	0013      	movs	r3, r2
   20c78:	005b      	lsls	r3, r3, #1
   20c7a:	189b      	adds	r3, r3, r2
   20c7c:	00da      	lsls	r2, r3, #3
   20c7e:	189b      	adds	r3, r3, r2
   20c80:	18cb      	adds	r3, r1, r3
   20c82:	3310      	adds	r3, #16
   20c84:	0018      	movs	r0, r3
   20c86:	2398      	movs	r3, #152	; 0x98
   20c88:	005b      	lsls	r3, r3, #1
   20c8a:	18fb      	adds	r3, r7, r3
   20c8c:	681b      	ldr	r3, [r3, #0]
   20c8e:	683a      	ldr	r2, [r7, #0]
   20c90:	2118      	movs	r1, #24
   20c92:	1879      	adds	r1, r7, r1
   20c94:	f7ff fdf2 	bl	2087c <atcacert_copy_device_loc_data>
    // Additional custom certificate elements
    if (cert_def->cert_elements_count > 0 && cert_def->cert_elements == NULL)
    {
        return ATCACERT_E_BAD_CERT;
    }
    for (i = 0; i < cert_def->cert_elements_count; i++)
   20c98:	238e      	movs	r3, #142	; 0x8e
   20c9a:	005b      	lsls	r3, r3, #1
   20c9c:	18fb      	adds	r3, r7, r3
   20c9e:	681b      	ldr	r3, [r3, #0]
   20ca0:	3301      	adds	r3, #1
   20ca2:	228e      	movs	r2, #142	; 0x8e
   20ca4:	0052      	lsls	r2, r2, #1
   20ca6:	18ba      	adds	r2, r7, r2
   20ca8:	6013      	str	r3, [r2, #0]
   20caa:	68fb      	ldr	r3, [r7, #12]
   20cac:	2245      	movs	r2, #69	; 0x45
   20cae:	5c9b      	ldrb	r3, [r3, r2]
   20cb0:	001a      	movs	r2, r3
   20cb2:	238e      	movs	r3, #142	; 0x8e
   20cb4:	005b      	lsls	r3, r3, #1
   20cb6:	18fb      	adds	r3, r7, r3
   20cb8:	681b      	ldr	r3, [r3, #0]
   20cba:	429a      	cmp	r2, r3
   20cbc:	dd00      	ble.n	20cc0 <atcacert_get_device_data+0x38c>
   20cbe:	e728      	b.n	20b12 <atcacert_get_device_data+0x1de>
            }
            atcacert_copy_device_loc_data(&cert_def->cert_elements[i].device_loc, temp_buf, device_loc, device_data);
        }
    }

    return ATCACERT_E_SUCCESS;
   20cc0:	2300      	movs	r3, #0
}
   20cc2:	0018      	movs	r0, r3
   20cc4:	46bd      	mov	sp, r7
   20cc6:	b049      	add	sp, #292	; 0x124
   20cc8:	bd90      	pop	{r4, r7, pc}
   20cca:	46c0      	nop			; (mov r8, r8)

00020ccc <atcacert_set_subj_public_key>:

int atcacert_set_subj_public_key(const atcacert_def_t* cert_def,
                                 uint8_t*              cert,
                                 size_t                cert_size,
                                 const uint8_t         subj_public_key[64])
{
   20ccc:	b590      	push	{r4, r7, lr}
   20cce:	b08d      	sub	sp, #52	; 0x34
   20cd0:	af02      	add	r7, sp, #8
   20cd2:	60f8      	str	r0, [r7, #12]
   20cd4:	60b9      	str	r1, [r7, #8]
   20cd6:	607a      	str	r2, [r7, #4]
   20cd8:	603b      	str	r3, [r7, #0]
    int ret = 0;
   20cda:	2300      	movs	r3, #0
   20cdc:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t key_id[20];

    if (cert_def == NULL || cert == NULL || subj_public_key == NULL)
   20cde:	68fb      	ldr	r3, [r7, #12]
   20ce0:	2b00      	cmp	r3, #0
   20ce2:	d005      	beq.n	20cf0 <atcacert_set_subj_public_key+0x24>
   20ce4:	68bb      	ldr	r3, [r7, #8]
   20ce6:	2b00      	cmp	r3, #0
   20ce8:	d002      	beq.n	20cf0 <atcacert_set_subj_public_key+0x24>
   20cea:	683b      	ldr	r3, [r7, #0]
   20cec:	2b00      	cmp	r3, #0
   20cee:	d101      	bne.n	20cf4 <atcacert_set_subj_public_key+0x28>
    {
        return ATCACERT_E_BAD_PARAMS;
   20cf0:	2302      	movs	r3, #2
   20cf2:	e037      	b.n	20d64 <atcacert_set_subj_public_key+0x98>
    }

    ret = atcacert_set_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_PUBLIC_KEY], cert, cert_size, subj_public_key, 64);
   20cf4:	68fb      	ldr	r3, [r7, #12]
   20cf6:	3321      	adds	r3, #33	; 0x21
   20cf8:	0019      	movs	r1, r3
   20cfa:	687c      	ldr	r4, [r7, #4]
   20cfc:	68ba      	ldr	r2, [r7, #8]
   20cfe:	68f8      	ldr	r0, [r7, #12]
   20d00:	2340      	movs	r3, #64	; 0x40
   20d02:	9301      	str	r3, [sp, #4]
   20d04:	683b      	ldr	r3, [r7, #0]
   20d06:	9300      	str	r3, [sp, #0]
   20d08:	0023      	movs	r3, r4
   20d0a:	f001 f8bb 	bl	21e84 <atcacert_set_cert_element>
   20d0e:	0003      	movs	r3, r0
   20d10:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
   20d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d14:	2b00      	cmp	r3, #0
   20d16:	d001      	beq.n	20d1c <atcacert_set_subj_public_key+0x50>
    {
        return ret;
   20d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d1a:	e023      	b.n	20d64 <atcacert_set_subj_public_key+0x98>
    }

    ret = atcacert_get_key_id(subj_public_key, key_id);
   20d1c:	2310      	movs	r3, #16
   20d1e:	18fa      	adds	r2, r7, r3
   20d20:	683b      	ldr	r3, [r7, #0]
   20d22:	0011      	movs	r1, r2
   20d24:	0018      	movs	r0, r3
   20d26:	f001 f991 	bl	2204c <atcacert_get_key_id>
   20d2a:	0003      	movs	r3, r0
   20d2c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
   20d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d30:	2b00      	cmp	r3, #0
   20d32:	d001      	beq.n	20d38 <atcacert_set_subj_public_key+0x6c>
    {
        return ret;
   20d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d36:	e015      	b.n	20d64 <atcacert_set_subj_public_key+0x98>
    }

    ret = atcacert_set_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_SUBJ_KEY_ID], cert, cert_size, key_id, 20);
   20d38:	68fb      	ldr	r3, [r7, #12]
   20d3a:	333d      	adds	r3, #61	; 0x3d
   20d3c:	0019      	movs	r1, r3
   20d3e:	687c      	ldr	r4, [r7, #4]
   20d40:	68ba      	ldr	r2, [r7, #8]
   20d42:	68f8      	ldr	r0, [r7, #12]
   20d44:	2314      	movs	r3, #20
   20d46:	9301      	str	r3, [sp, #4]
   20d48:	2310      	movs	r3, #16
   20d4a:	18fb      	adds	r3, r7, r3
   20d4c:	9300      	str	r3, [sp, #0]
   20d4e:	0023      	movs	r3, r4
   20d50:	f001 f898 	bl	21e84 <atcacert_set_cert_element>
   20d54:	0003      	movs	r3, r0
   20d56:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
   20d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d5a:	2b00      	cmp	r3, #0
   20d5c:	d001      	beq.n	20d62 <atcacert_set_subj_public_key+0x96>
    {
        return ret;
   20d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d60:	e000      	b.n	20d64 <atcacert_set_subj_public_key+0x98>
    }

    return ATCACERT_E_SUCCESS;
   20d62:	2300      	movs	r3, #0
}
   20d64:	0018      	movs	r0, r3
   20d66:	46bd      	mov	sp, r7
   20d68:	b00b      	add	sp, #44	; 0x2c
   20d6a:	bd90      	pop	{r4, r7, pc}

00020d6c <atcacert_get_subj_public_key>:

int atcacert_get_subj_public_key(const atcacert_def_t* cert_def,
                                 const uint8_t*        cert,
                                 size_t                cert_size,
                                 uint8_t               subj_public_key[64])
{
   20d6c:	b590      	push	{r4, r7, lr}
   20d6e:	b087      	sub	sp, #28
   20d70:	af02      	add	r7, sp, #8
   20d72:	60f8      	str	r0, [r7, #12]
   20d74:	60b9      	str	r1, [r7, #8]
   20d76:	607a      	str	r2, [r7, #4]
   20d78:	603b      	str	r3, [r7, #0]
    if (cert_def == NULL || cert == NULL || subj_public_key == NULL)
   20d7a:	68fb      	ldr	r3, [r7, #12]
   20d7c:	2b00      	cmp	r3, #0
   20d7e:	d005      	beq.n	20d8c <atcacert_get_subj_public_key+0x20>
   20d80:	68bb      	ldr	r3, [r7, #8]
   20d82:	2b00      	cmp	r3, #0
   20d84:	d002      	beq.n	20d8c <atcacert_get_subj_public_key+0x20>
   20d86:	683b      	ldr	r3, [r7, #0]
   20d88:	2b00      	cmp	r3, #0
   20d8a:	d101      	bne.n	20d90 <atcacert_get_subj_public_key+0x24>
    {
        return ATCACERT_E_BAD_PARAMS;
   20d8c:	2302      	movs	r3, #2
   20d8e:	e00d      	b.n	20dac <atcacert_get_subj_public_key+0x40>
    }

    return atcacert_get_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_PUBLIC_KEY], cert, cert_size, subj_public_key, 64);
   20d90:	68fb      	ldr	r3, [r7, #12]
   20d92:	3321      	adds	r3, #33	; 0x21
   20d94:	0019      	movs	r1, r3
   20d96:	687c      	ldr	r4, [r7, #4]
   20d98:	68ba      	ldr	r2, [r7, #8]
   20d9a:	68f8      	ldr	r0, [r7, #12]
   20d9c:	2340      	movs	r3, #64	; 0x40
   20d9e:	9301      	str	r3, [sp, #4]
   20da0:	683b      	ldr	r3, [r7, #0]
   20da2:	9300      	str	r3, [sp, #0]
   20da4:	0023      	movs	r3, r4
   20da6:	f001 f8e9 	bl	21f7c <atcacert_get_cert_element>
   20daa:	0003      	movs	r3, r0
}
   20dac:	0018      	movs	r0, r3
   20dae:	46bd      	mov	sp, r7
   20db0:	b005      	add	sp, #20
   20db2:	bd90      	pop	{r4, r7, pc}

00020db4 <atcacert_set_signature>:
int atcacert_set_signature(const atcacert_def_t* cert_def,
                           uint8_t*              cert,
                           size_t*               cert_size,
                           size_t                max_cert_size,
                           const uint8_t         signature[64])
{
   20db4:	b590      	push	{r4, r7, lr}
   20db6:	b08d      	sub	sp, #52	; 0x34
   20db8:	af02      	add	r7, sp, #8
   20dba:	60f8      	str	r0, [r7, #12]
   20dbc:	60b9      	str	r1, [r7, #8]
   20dbe:	607a      	str	r2, [r7, #4]
   20dc0:	603b      	str	r3, [r7, #0]
    int ret = 0;
   20dc2:	2300      	movs	r3, #0
   20dc4:	627b      	str	r3, [r7, #36]	; 0x24
    size_t cur_der_sig_size;
    size_t new_der_sig_size;
    size_t old_cert_der_length_size;
    uint32_t new_cert_length;

    if (cert_def == NULL || cert == NULL || cert_size == NULL || signature == NULL)
   20dc6:	68fb      	ldr	r3, [r7, #12]
   20dc8:	2b00      	cmp	r3, #0
   20dca:	d008      	beq.n	20dde <atcacert_set_signature+0x2a>
   20dcc:	68bb      	ldr	r3, [r7, #8]
   20dce:	2b00      	cmp	r3, #0
   20dd0:	d005      	beq.n	20dde <atcacert_set_signature+0x2a>
   20dd2:	687b      	ldr	r3, [r7, #4]
   20dd4:	2b00      	cmp	r3, #0
   20dd6:	d002      	beq.n	20dde <atcacert_set_signature+0x2a>
   20dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20dda:	2b00      	cmp	r3, #0
   20ddc:	d101      	bne.n	20de2 <atcacert_set_signature+0x2e>
    {
        return ATCACERT_E_BAD_PARAMS;
   20dde:	2302      	movs	r3, #2
   20de0:	e08d      	b.n	20efe <atcacert_set_signature+0x14a>
    }

    sig_offset = cert_def->std_cert_elements[STDCERT_SIGNATURE].offset;
   20de2:	2322      	movs	r3, #34	; 0x22
   20de4:	18fa      	adds	r2, r7, r3
   20de6:	68fb      	ldr	r3, [r7, #12]
   20de8:	2125      	movs	r1, #37	; 0x25
   20dea:	5c59      	ldrb	r1, [r3, r1]
   20dec:	2026      	movs	r0, #38	; 0x26
   20dee:	5c1b      	ldrb	r3, [r3, r0]
   20df0:	021b      	lsls	r3, r3, #8
   20df2:	430b      	orrs	r3, r1
   20df4:	8013      	strh	r3, [r2, #0]
    sig_offset += get_effective_offset(cert_def, cert, sig_offset);
   20df6:	2322      	movs	r3, #34	; 0x22
   20df8:	18fb      	adds	r3, r7, r3
   20dfa:	881a      	ldrh	r2, [r3, #0]
   20dfc:	68b9      	ldr	r1, [r7, #8]
   20dfe:	68fb      	ldr	r3, [r7, #12]
   20e00:	0018      	movs	r0, r3
   20e02:	f7fe ff8b 	bl	1fd1c <get_effective_offset>
   20e06:	0003      	movs	r3, r0
   20e08:	b299      	uxth	r1, r3
   20e0a:	2322      	movs	r3, #34	; 0x22
   20e0c:	18fb      	adds	r3, r7, r3
   20e0e:	2222      	movs	r2, #34	; 0x22
   20e10:	18ba      	adds	r2, r7, r2
   20e12:	8812      	ldrh	r2, [r2, #0]
   20e14:	188a      	adds	r2, r1, r2
   20e16:	801a      	strh	r2, [r3, #0]

    // Non X.509 signatures are treated like normal certificate elements
    if (cert_def->type != CERTTYPE_X509)
   20e18:	68fb      	ldr	r3, [r7, #12]
   20e1a:	781b      	ldrb	r3, [r3, #0]
   20e1c:	2b00      	cmp	r3, #0
   20e1e:	d00f      	beq.n	20e40 <atcacert_set_signature+0x8c>
    {
        return atcacert_set_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_SIGNATURE], cert, *cert_size, signature, 64);
   20e20:	68fb      	ldr	r3, [r7, #12]
   20e22:	3325      	adds	r3, #37	; 0x25
   20e24:	0019      	movs	r1, r3
   20e26:	687b      	ldr	r3, [r7, #4]
   20e28:	681c      	ldr	r4, [r3, #0]
   20e2a:	68ba      	ldr	r2, [r7, #8]
   20e2c:	68f8      	ldr	r0, [r7, #12]
   20e2e:	2340      	movs	r3, #64	; 0x40
   20e30:	9301      	str	r3, [sp, #4]
   20e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20e34:	9300      	str	r3, [sp, #0]
   20e36:	0023      	movs	r3, r4
   20e38:	f001 f824 	bl	21e84 <atcacert_set_cert_element>
   20e3c:	0003      	movs	r3, r0
   20e3e:	e05e      	b.n	20efe <atcacert_set_signature+0x14a>
    }

    if (sig_offset >= *cert_size)
   20e40:	2322      	movs	r3, #34	; 0x22
   20e42:	18fb      	adds	r3, r7, r3
   20e44:	881a      	ldrh	r2, [r3, #0]
   20e46:	687b      	ldr	r3, [r7, #4]
   20e48:	681b      	ldr	r3, [r3, #0]
   20e4a:	429a      	cmp	r2, r3
   20e4c:	d301      	bcc.n	20e52 <atcacert_set_signature+0x9e>
    {
        return ATCACERT_E_ELEM_OUT_OF_BOUNDS;  // Signature element is shown as past the end of the certificate
   20e4e:	2309      	movs	r3, #9
   20e50:	e055      	b.n	20efe <atcacert_set_signature+0x14a>

    }
    // Current size of the signature is from its offset to the end of the cert
    cur_der_sig_size = *cert_size - sig_offset;
   20e52:	687b      	ldr	r3, [r7, #4]
   20e54:	681a      	ldr	r2, [r3, #0]
   20e56:	2322      	movs	r3, #34	; 0x22
   20e58:	18fb      	adds	r3, r7, r3
   20e5a:	881b      	ldrh	r3, [r3, #0]
   20e5c:	1ad3      	subs	r3, r2, r3
   20e5e:	61fb      	str	r3, [r7, #28]

    // Find the size of buffer available for the new DER signature
    new_der_sig_size = max_cert_size - sig_offset;
   20e60:	2322      	movs	r3, #34	; 0x22
   20e62:	18fb      	adds	r3, r7, r3
   20e64:	881b      	ldrh	r3, [r3, #0]
   20e66:	683a      	ldr	r2, [r7, #0]
   20e68:	1ad3      	subs	r3, r2, r3
   20e6a:	61bb      	str	r3, [r7, #24]

    // Set the new signature
    ret = atcacert_der_enc_ecdsa_sig_value(signature, &cert[sig_offset], &new_der_sig_size);
   20e6c:	2322      	movs	r3, #34	; 0x22
   20e6e:	18fb      	adds	r3, r7, r3
   20e70:	881b      	ldrh	r3, [r3, #0]
   20e72:	68ba      	ldr	r2, [r7, #8]
   20e74:	18d1      	adds	r1, r2, r3
   20e76:	2318      	movs	r3, #24
   20e78:	18fa      	adds	r2, r7, r3
   20e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20e7c:	0018      	movs	r0, r3
   20e7e:	f001 fb83 	bl	22588 <atcacert_der_enc_ecdsa_sig_value>
   20e82:	0003      	movs	r3, r0
   20e84:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
   20e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20e88:	2b00      	cmp	r3, #0
   20e8a:	d00d      	beq.n	20ea8 <atcacert_set_signature+0xf4>
    {
        if (ret == ATCACERT_E_BUFFER_TOO_SMALL)
   20e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20e8e:	2b03      	cmp	r3, #3
   20e90:	d108      	bne.n	20ea4 <atcacert_set_signature+0xf0>
        {
            *cert_size += (int)new_der_sig_size - (int)cur_der_sig_size;  // Report the size needed
   20e92:	687b      	ldr	r3, [r7, #4]
   20e94:	681b      	ldr	r3, [r3, #0]
   20e96:	69ba      	ldr	r2, [r7, #24]
   20e98:	0011      	movs	r1, r2
   20e9a:	69fa      	ldr	r2, [r7, #28]
   20e9c:	1a8a      	subs	r2, r1, r2
   20e9e:	189a      	adds	r2, r3, r2
   20ea0:	687b      	ldr	r3, [r7, #4]
   20ea2:	601a      	str	r2, [r3, #0]
        }
        return ret;
   20ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20ea6:	e02a      	b.n	20efe <atcacert_set_signature+0x14a>
    }

    *cert_size += (int)new_der_sig_size - (int)cur_der_sig_size;
   20ea8:	687b      	ldr	r3, [r7, #4]
   20eaa:	681b      	ldr	r3, [r3, #0]
   20eac:	69ba      	ldr	r2, [r7, #24]
   20eae:	0011      	movs	r1, r2
   20eb0:	69fa      	ldr	r2, [r7, #28]
   20eb2:	1a8a      	subs	r2, r1, r2
   20eb4:	189a      	adds	r2, r3, r2
   20eb6:	687b      	ldr	r3, [r7, #4]
   20eb8:	601a      	str	r2, [r3, #0]

    old_cert_der_length_size = *cert_size - 1;
   20eba:	687b      	ldr	r3, [r7, #4]
   20ebc:	681b      	ldr	r3, [r3, #0]
   20ebe:	3b01      	subs	r3, #1
   20ec0:	617b      	str	r3, [r7, #20]
    ret = atcacert_der_adjust_length(
   20ec2:	68bb      	ldr	r3, [r7, #8]
   20ec4:	1c58      	adds	r0, r3, #1
        &cert[1],
        &old_cert_der_length_size,
        (int)new_der_sig_size - (int)cur_der_sig_size,
   20ec6:	69bb      	ldr	r3, [r7, #24]
   20ec8:	001a      	movs	r2, r3
   20eca:	69fb      	ldr	r3, [r7, #28]
    }

    *cert_size += (int)new_der_sig_size - (int)cur_der_sig_size;

    old_cert_der_length_size = *cert_size - 1;
    ret = atcacert_der_adjust_length(
   20ecc:	1ad2      	subs	r2, r2, r3
   20ece:	2310      	movs	r3, #16
   20ed0:	18fb      	adds	r3, r7, r3
   20ed2:	2114      	movs	r1, #20
   20ed4:	1879      	adds	r1, r7, r1
   20ed6:	f001 f9e3 	bl	222a0 <atcacert_der_adjust_length>
   20eda:	0003      	movs	r3, r0
   20edc:	627b      	str	r3, [r7, #36]	; 0x24
        &cert[1],
        &old_cert_der_length_size,
        (int)new_der_sig_size - (int)cur_der_sig_size,
        &new_cert_length);
    if (ret != ATCACERT_E_SUCCESS)
   20ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20ee0:	2b00      	cmp	r3, #0
   20ee2:	d001      	beq.n	20ee8 <atcacert_set_signature+0x134>
    {
        return ret;
   20ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20ee6:	e00a      	b.n	20efe <atcacert_set_signature+0x14a>
    }

    // Tag, length, value
    if (1 + old_cert_der_length_size + new_cert_length != *cert_size)
   20ee8:	697a      	ldr	r2, [r7, #20]
   20eea:	693b      	ldr	r3, [r7, #16]
   20eec:	18d3      	adds	r3, r2, r3
   20eee:	1c5a      	adds	r2, r3, #1
   20ef0:	687b      	ldr	r3, [r7, #4]
   20ef2:	681b      	ldr	r3, [r3, #0]
   20ef4:	429a      	cmp	r2, r3
   20ef6:	d001      	beq.n	20efc <atcacert_set_signature+0x148>
    {
        return ATCACERT_E_BAD_CERT;
   20ef8:	230a      	movs	r3, #10
   20efa:	e000      	b.n	20efe <atcacert_set_signature+0x14a>
    }

    return ATCACERT_E_SUCCESS;
   20efc:	2300      	movs	r3, #0
}
   20efe:	0018      	movs	r0, r3
   20f00:	46bd      	mov	sp, r7
   20f02:	b00b      	add	sp, #44	; 0x2c
   20f04:	bd90      	pop	{r4, r7, pc}
   20f06:	46c0      	nop			; (mov r8, r8)

00020f08 <atcacert_get_signature>:

int atcacert_get_signature(const atcacert_def_t* cert_def,
                           const uint8_t*        cert,
                           size_t                cert_size,
                           uint8_t               signature[64])
{
   20f08:	b590      	push	{r4, r7, lr}
   20f0a:	b089      	sub	sp, #36	; 0x24
   20f0c:	af02      	add	r7, sp, #8
   20f0e:	60f8      	str	r0, [r7, #12]
   20f10:	60b9      	str	r1, [r7, #8]
   20f12:	607a      	str	r2, [r7, #4]
   20f14:	603b      	str	r3, [r7, #0]
    uint16_t sig_offset;
    size_t der_sig_size = 0;
   20f16:	2300      	movs	r3, #0
   20f18:	613b      	str	r3, [r7, #16]

    if (cert_def == NULL || cert == NULL || signature == NULL)
   20f1a:	68fb      	ldr	r3, [r7, #12]
   20f1c:	2b00      	cmp	r3, #0
   20f1e:	d005      	beq.n	20f2c <atcacert_get_signature+0x24>
   20f20:	68bb      	ldr	r3, [r7, #8]
   20f22:	2b00      	cmp	r3, #0
   20f24:	d002      	beq.n	20f2c <atcacert_get_signature+0x24>
   20f26:	683b      	ldr	r3, [r7, #0]
   20f28:	2b00      	cmp	r3, #0
   20f2a:	d101      	bne.n	20f30 <atcacert_get_signature+0x28>
    {
        return ATCACERT_E_BAD_PARAMS;
   20f2c:	2302      	movs	r3, #2
   20f2e:	e047      	b.n	20fc0 <atcacert_get_signature+0xb8>
    }

    sig_offset = cert_def->std_cert_elements[STDCERT_SIGNATURE].offset;
   20f30:	2316      	movs	r3, #22
   20f32:	18fa      	adds	r2, r7, r3
   20f34:	68fb      	ldr	r3, [r7, #12]
   20f36:	2125      	movs	r1, #37	; 0x25
   20f38:	5c59      	ldrb	r1, [r3, r1]
   20f3a:	2026      	movs	r0, #38	; 0x26
   20f3c:	5c1b      	ldrb	r3, [r3, r0]
   20f3e:	021b      	lsls	r3, r3, #8
   20f40:	430b      	orrs	r3, r1
   20f42:	8013      	strh	r3, [r2, #0]
    sig_offset += get_effective_offset(cert_def, cert, sig_offset);
   20f44:	2316      	movs	r3, #22
   20f46:	18fb      	adds	r3, r7, r3
   20f48:	881a      	ldrh	r2, [r3, #0]
   20f4a:	68b9      	ldr	r1, [r7, #8]
   20f4c:	68fb      	ldr	r3, [r7, #12]
   20f4e:	0018      	movs	r0, r3
   20f50:	f7fe fee4 	bl	1fd1c <get_effective_offset>
   20f54:	0003      	movs	r3, r0
   20f56:	b299      	uxth	r1, r3
   20f58:	2316      	movs	r3, #22
   20f5a:	18fb      	adds	r3, r7, r3
   20f5c:	2216      	movs	r2, #22
   20f5e:	18ba      	adds	r2, r7, r2
   20f60:	8812      	ldrh	r2, [r2, #0]
   20f62:	188a      	adds	r2, r1, r2
   20f64:	801a      	strh	r2, [r3, #0]

    // Non X.509 signatures are treated like normal certificate elements
    if (cert_def->type != CERTTYPE_X509)
   20f66:	68fb      	ldr	r3, [r7, #12]
   20f68:	781b      	ldrb	r3, [r3, #0]
   20f6a:	2b00      	cmp	r3, #0
   20f6c:	d00e      	beq.n	20f8c <atcacert_get_signature+0x84>
    {
        return atcacert_get_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_SIGNATURE], cert, cert_size, signature, 64);
   20f6e:	68fb      	ldr	r3, [r7, #12]
   20f70:	3325      	adds	r3, #37	; 0x25
   20f72:	0019      	movs	r1, r3
   20f74:	687c      	ldr	r4, [r7, #4]
   20f76:	68ba      	ldr	r2, [r7, #8]
   20f78:	68f8      	ldr	r0, [r7, #12]
   20f7a:	2340      	movs	r3, #64	; 0x40
   20f7c:	9301      	str	r3, [sp, #4]
   20f7e:	683b      	ldr	r3, [r7, #0]
   20f80:	9300      	str	r3, [sp, #0]
   20f82:	0023      	movs	r3, r4
   20f84:	f000 fffa 	bl	21f7c <atcacert_get_cert_element>
   20f88:	0003      	movs	r3, r0
   20f8a:	e019      	b.n	20fc0 <atcacert_get_signature+0xb8>
    }

    if (sig_offset >= cert_size)
   20f8c:	2316      	movs	r3, #22
   20f8e:	18fb      	adds	r3, r7, r3
   20f90:	881a      	ldrh	r2, [r3, #0]
   20f92:	687b      	ldr	r3, [r7, #4]
   20f94:	429a      	cmp	r2, r3
   20f96:	d301      	bcc.n	20f9c <atcacert_get_signature+0x94>
    {
        return ATCACERT_E_ELEM_OUT_OF_BOUNDS;  // Signature element is shown as past the end of the certificate
   20f98:	2309      	movs	r3, #9
   20f9a:	e011      	b.n	20fc0 <atcacert_get_signature+0xb8>

    }
    der_sig_size = cert_size - sig_offset;
   20f9c:	2316      	movs	r3, #22
   20f9e:	18fb      	adds	r3, r7, r3
   20fa0:	881b      	ldrh	r3, [r3, #0]
   20fa2:	687a      	ldr	r2, [r7, #4]
   20fa4:	1ad3      	subs	r3, r2, r3
   20fa6:	613b      	str	r3, [r7, #16]
    return atcacert_der_dec_ecdsa_sig_value(&cert[sig_offset], &der_sig_size, signature);
   20fa8:	2316      	movs	r3, #22
   20faa:	18fb      	adds	r3, r7, r3
   20fac:	881b      	ldrh	r3, [r3, #0]
   20fae:	68ba      	ldr	r2, [r7, #8]
   20fb0:	18d3      	adds	r3, r2, r3
   20fb2:	683a      	ldr	r2, [r7, #0]
   20fb4:	2110      	movs	r1, #16
   20fb6:	1879      	adds	r1, r7, r1
   20fb8:	0018      	movs	r0, r3
   20fba:	f001 fb7d 	bl	226b8 <atcacert_der_dec_ecdsa_sig_value>
   20fbe:	0003      	movs	r3, r0
}
   20fc0:	0018      	movs	r0, r3
   20fc2:	46bd      	mov	sp, r7
   20fc4:	b007      	add	sp, #28
   20fc6:	bd90      	pop	{r4, r7, pc}

00020fc8 <atcacert_set_issue_date>:

int atcacert_set_issue_date(const atcacert_def_t*    cert_def,
                            uint8_t*                 cert,
                            size_t                   cert_size,
                            const atcacert_tm_utc_t* timestamp)
{
   20fc8:	b590      	push	{r4, r7, lr}
   20fca:	b08f      	sub	sp, #60	; 0x3c
   20fcc:	af02      	add	r7, sp, #8
   20fce:	60f8      	str	r0, [r7, #12]
   20fd0:	60b9      	str	r1, [r7, #8]
   20fd2:	607a      	str	r2, [r7, #4]
   20fd4:	603b      	str	r3, [r7, #0]
    int ret = 0;
   20fd6:	2300      	movs	r3, #0
   20fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t formatted_date[DATEFMT_MAX_SIZE];
    size_t formatted_date_size = sizeof(formatted_date);
   20fda:	2314      	movs	r3, #20
   20fdc:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert == NULL || timestamp == NULL)
   20fde:	68fb      	ldr	r3, [r7, #12]
   20fe0:	2b00      	cmp	r3, #0
   20fe2:	d005      	beq.n	20ff0 <atcacert_set_issue_date+0x28>
   20fe4:	68bb      	ldr	r3, [r7, #8]
   20fe6:	2b00      	cmp	r3, #0
   20fe8:	d002      	beq.n	20ff0 <atcacert_set_issue_date+0x28>
   20fea:	683b      	ldr	r3, [r7, #0]
   20fec:	2b00      	cmp	r3, #0
   20fee:	d101      	bne.n	20ff4 <atcacert_set_issue_date+0x2c>
    {
        return ATCACERT_E_BAD_PARAMS;
   20ff0:	2302      	movs	r3, #2
   20ff2:	e031      	b.n	21058 <atcacert_set_issue_date+0x90>
    }

    if (cert_def->std_cert_elements[STDCERT_ISSUE_DATE].count == 0)
   20ff4:	68fb      	ldr	r3, [r7, #12]
   20ff6:	222b      	movs	r2, #43	; 0x2b
   20ff8:	5c9a      	ldrb	r2, [r3, r2]
   20ffa:	212c      	movs	r1, #44	; 0x2c
   20ffc:	5c5b      	ldrb	r3, [r3, r1]
   20ffe:	021b      	lsls	r3, r3, #8
   21000:	4313      	orrs	r3, r2
   21002:	b29b      	uxth	r3, r3
   21004:	2b00      	cmp	r3, #0
   21006:	d101      	bne.n	2100c <atcacert_set_issue_date+0x44>
    {
        return ATCACERT_E_SUCCESS;  // No issue date to be set
   21008:	2300      	movs	r3, #0
   2100a:	e025      	b.n	21058 <atcacert_set_issue_date+0x90>

    }
    ret = atcacert_date_enc(cert_def->issue_date_format, timestamp, formatted_date, &formatted_date_size);
   2100c:	68fb      	ldr	r3, [r7, #12]
   2100e:	7b18      	ldrb	r0, [r3, #12]
   21010:	2314      	movs	r3, #20
   21012:	18fb      	adds	r3, r7, r3
   21014:	2218      	movs	r2, #24
   21016:	18ba      	adds	r2, r7, r2
   21018:	6839      	ldr	r1, [r7, #0]
   2101a:	f7fd f921 	bl	1e260 <atcacert_date_enc>
   2101e:	0003      	movs	r3, r0
   21020:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != ATCACERT_E_SUCCESS)
   21022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21024:	2b00      	cmp	r3, #0
   21026:	d001      	beq.n	2102c <atcacert_set_issue_date+0x64>
    {
        return ret;
   21028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2102a:	e015      	b.n	21058 <atcacert_set_issue_date+0x90>
    }

    ret = atcacert_set_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_ISSUE_DATE], cert, cert_size, formatted_date, formatted_date_size);
   2102c:	68fb      	ldr	r3, [r7, #12]
   2102e:	3329      	adds	r3, #41	; 0x29
   21030:	0019      	movs	r1, r3
   21032:	697b      	ldr	r3, [r7, #20]
   21034:	687c      	ldr	r4, [r7, #4]
   21036:	68ba      	ldr	r2, [r7, #8]
   21038:	68f8      	ldr	r0, [r7, #12]
   2103a:	9301      	str	r3, [sp, #4]
   2103c:	2318      	movs	r3, #24
   2103e:	18fb      	adds	r3, r7, r3
   21040:	9300      	str	r3, [sp, #0]
   21042:	0023      	movs	r3, r4
   21044:	f000 ff1e 	bl	21e84 <atcacert_set_cert_element>
   21048:	0003      	movs	r3, r0
   2104a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != ATCACERT_E_SUCCESS)
   2104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2104e:	2b00      	cmp	r3, #0
   21050:	d001      	beq.n	21056 <atcacert_set_issue_date+0x8e>
    {
        return ret;
   21052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21054:	e000      	b.n	21058 <atcacert_set_issue_date+0x90>
    }

    return ATCACERT_E_SUCCESS;
   21056:	2300      	movs	r3, #0
}
   21058:	0018      	movs	r0, r3
   2105a:	46bd      	mov	sp, r7
   2105c:	b00d      	add	sp, #52	; 0x34
   2105e:	bd90      	pop	{r4, r7, pc}

00021060 <atcacert_get_issue_date>:

int atcacert_get_issue_date(const atcacert_def_t* cert_def,
                            const uint8_t*        cert,
                            size_t                cert_size,
                            atcacert_tm_utc_t*    timestamp)
{
   21060:	b590      	push	{r4, r7, lr}
   21062:	b08f      	sub	sp, #60	; 0x3c
   21064:	af02      	add	r7, sp, #8
   21066:	60f8      	str	r0, [r7, #12]
   21068:	60b9      	str	r1, [r7, #8]
   2106a:	607a      	str	r2, [r7, #4]
   2106c:	603b      	str	r3, [r7, #0]
    int ret = 0;
   2106e:	2300      	movs	r3, #0
   21070:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t formatted_date[DATEFMT_MAX_SIZE];
    size_t formatted_date_size = sizeof(formatted_date);
   21072:	2314      	movs	r3, #20
   21074:	62bb      	str	r3, [r7, #40]	; 0x28

    if (cert_def == NULL || cert == NULL || timestamp == NULL)
   21076:	68fb      	ldr	r3, [r7, #12]
   21078:	2b00      	cmp	r3, #0
   2107a:	d005      	beq.n	21088 <atcacert_get_issue_date+0x28>
   2107c:	68bb      	ldr	r3, [r7, #8]
   2107e:	2b00      	cmp	r3, #0
   21080:	d002      	beq.n	21088 <atcacert_get_issue_date+0x28>
   21082:	683b      	ldr	r3, [r7, #0]
   21084:	2b00      	cmp	r3, #0
   21086:	d101      	bne.n	2108c <atcacert_get_issue_date+0x2c>
    {
        return ATCACERT_E_BAD_PARAMS;
   21088:	2302      	movs	r3, #2
   2108a:	e036      	b.n	210fa <atcacert_get_issue_date+0x9a>
    }

    if (cert_def->issue_date_format > sizeof(ATCACERT_DATE_FORMAT_SIZES) / sizeof(ATCACERT_DATE_FORMAT_SIZES[0]))
   2108c:	68fb      	ldr	r3, [r7, #12]
   2108e:	7b1b      	ldrb	r3, [r3, #12]
   21090:	2b05      	cmp	r3, #5
   21092:	d901      	bls.n	21098 <atcacert_get_issue_date+0x38>
    {
        return ATCACERT_E_ERROR;  // Format is out of range
   21094:	2301      	movs	r3, #1
   21096:	e030      	b.n	210fa <atcacert_get_issue_date+0x9a>

    }
    formatted_date_size = ATCACERT_DATE_FORMAT_SIZES[cert_def->issue_date_format];
   21098:	68fb      	ldr	r3, [r7, #12]
   2109a:	7b1b      	ldrb	r3, [r3, #12]
   2109c:	001a      	movs	r2, r3
   2109e:	4b19      	ldr	r3, [pc, #100]	; (21104 <atcacert_get_issue_date+0xa4>)
   210a0:	0092      	lsls	r2, r2, #2
   210a2:	58d3      	ldr	r3, [r2, r3]
   210a4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (formatted_date_size > sizeof(formatted_date))
   210a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   210a8:	2b14      	cmp	r3, #20
   210aa:	d901      	bls.n	210b0 <atcacert_get_issue_date+0x50>
    {
        return ATCACERT_E_ERROR;  // DATEFMT_MAX_SIZE is wrong
   210ac:	2301      	movs	r3, #1
   210ae:	e024      	b.n	210fa <atcacert_get_issue_date+0x9a>

    }
    ret = atcacert_get_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_ISSUE_DATE], cert, cert_size, formatted_date, formatted_date_size);
   210b0:	68fb      	ldr	r3, [r7, #12]
   210b2:	3329      	adds	r3, #41	; 0x29
   210b4:	0019      	movs	r1, r3
   210b6:	687c      	ldr	r4, [r7, #4]
   210b8:	68ba      	ldr	r2, [r7, #8]
   210ba:	68f8      	ldr	r0, [r7, #12]
   210bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   210be:	9301      	str	r3, [sp, #4]
   210c0:	2314      	movs	r3, #20
   210c2:	18fb      	adds	r3, r7, r3
   210c4:	9300      	str	r3, [sp, #0]
   210c6:	0023      	movs	r3, r4
   210c8:	f000 ff58 	bl	21f7c <atcacert_get_cert_element>
   210cc:	0003      	movs	r3, r0
   210ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != ATCACERT_E_SUCCESS)
   210d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   210d2:	2b00      	cmp	r3, #0
   210d4:	d001      	beq.n	210da <atcacert_get_issue_date+0x7a>
    {
        return ret;
   210d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   210d8:	e00f      	b.n	210fa <atcacert_get_issue_date+0x9a>
    }

    ret = atcacert_date_dec(cert_def->issue_date_format, formatted_date, formatted_date_size, timestamp);
   210da:	68fb      	ldr	r3, [r7, #12]
   210dc:	7b18      	ldrb	r0, [r3, #12]
   210de:	683b      	ldr	r3, [r7, #0]
   210e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   210e2:	2114      	movs	r1, #20
   210e4:	1879      	adds	r1, r7, r1
   210e6:	f7fd f931 	bl	1e34c <atcacert_date_dec>
   210ea:	0003      	movs	r3, r0
   210ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != ATCACERT_E_SUCCESS)
   210ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   210f0:	2b00      	cmp	r3, #0
   210f2:	d001      	beq.n	210f8 <atcacert_get_issue_date+0x98>
    {
        return ret;
   210f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   210f6:	e000      	b.n	210fa <atcacert_get_issue_date+0x9a>
    }

    return ATCACERT_E_SUCCESS;
   210f8:	2300      	movs	r3, #0
}
   210fa:	0018      	movs	r0, r3
   210fc:	46bd      	mov	sp, r7
   210fe:	b00d      	add	sp, #52	; 0x34
   21100:	bd90      	pop	{r4, r7, pc}
   21102:	46c0      	nop			; (mov r8, r8)
   21104:	0002e5ec 	.word	0x0002e5ec

00021108 <atcacert_set_expire_date>:

int atcacert_set_expire_date(const atcacert_def_t*    cert_def,
                             uint8_t*                 cert,
                             size_t                   cert_size,
                             const atcacert_tm_utc_t* timestamp)
{
   21108:	b590      	push	{r4, r7, lr}
   2110a:	b08f      	sub	sp, #60	; 0x3c
   2110c:	af02      	add	r7, sp, #8
   2110e:	60f8      	str	r0, [r7, #12]
   21110:	60b9      	str	r1, [r7, #8]
   21112:	607a      	str	r2, [r7, #4]
   21114:	603b      	str	r3, [r7, #0]
    int ret = 0;
   21116:	2300      	movs	r3, #0
   21118:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t formatted_date[DATEFMT_MAX_SIZE];
    size_t formatted_date_size = sizeof(formatted_date);
   2111a:	2314      	movs	r3, #20
   2111c:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert == NULL || timestamp == NULL)
   2111e:	68fb      	ldr	r3, [r7, #12]
   21120:	2b00      	cmp	r3, #0
   21122:	d005      	beq.n	21130 <atcacert_set_expire_date+0x28>
   21124:	68bb      	ldr	r3, [r7, #8]
   21126:	2b00      	cmp	r3, #0
   21128:	d002      	beq.n	21130 <atcacert_set_expire_date+0x28>
   2112a:	683b      	ldr	r3, [r7, #0]
   2112c:	2b00      	cmp	r3, #0
   2112e:	d101      	bne.n	21134 <atcacert_set_expire_date+0x2c>
    {
        return ATCACERT_E_BAD_PARAMS;
   21130:	2302      	movs	r3, #2
   21132:	e031      	b.n	21198 <atcacert_set_expire_date+0x90>
    }

    if (cert_def->std_cert_elements[STDCERT_EXPIRE_DATE].count == 0)
   21134:	68fb      	ldr	r3, [r7, #12]
   21136:	222f      	movs	r2, #47	; 0x2f
   21138:	5c9a      	ldrb	r2, [r3, r2]
   2113a:	2130      	movs	r1, #48	; 0x30
   2113c:	5c5b      	ldrb	r3, [r3, r1]
   2113e:	021b      	lsls	r3, r3, #8
   21140:	4313      	orrs	r3, r2
   21142:	b29b      	uxth	r3, r3
   21144:	2b00      	cmp	r3, #0
   21146:	d101      	bne.n	2114c <atcacert_set_expire_date+0x44>
    {
        return ATCACERT_E_SUCCESS;  // No expire date to be set
   21148:	2300      	movs	r3, #0
   2114a:	e025      	b.n	21198 <atcacert_set_expire_date+0x90>

    }
    ret = atcacert_date_enc(cert_def->expire_date_format, timestamp, formatted_date, &formatted_date_size);
   2114c:	68fb      	ldr	r3, [r7, #12]
   2114e:	7b58      	ldrb	r0, [r3, #13]
   21150:	2314      	movs	r3, #20
   21152:	18fb      	adds	r3, r7, r3
   21154:	2218      	movs	r2, #24
   21156:	18ba      	adds	r2, r7, r2
   21158:	6839      	ldr	r1, [r7, #0]
   2115a:	f7fd f881 	bl	1e260 <atcacert_date_enc>
   2115e:	0003      	movs	r3, r0
   21160:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != ATCACERT_E_SUCCESS)
   21162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21164:	2b00      	cmp	r3, #0
   21166:	d001      	beq.n	2116c <atcacert_set_expire_date+0x64>
    {
        return ret;
   21168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2116a:	e015      	b.n	21198 <atcacert_set_expire_date+0x90>
    }

    ret = atcacert_set_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_EXPIRE_DATE], cert, cert_size, formatted_date, formatted_date_size);
   2116c:	68fb      	ldr	r3, [r7, #12]
   2116e:	332d      	adds	r3, #45	; 0x2d
   21170:	0019      	movs	r1, r3
   21172:	697b      	ldr	r3, [r7, #20]
   21174:	687c      	ldr	r4, [r7, #4]
   21176:	68ba      	ldr	r2, [r7, #8]
   21178:	68f8      	ldr	r0, [r7, #12]
   2117a:	9301      	str	r3, [sp, #4]
   2117c:	2318      	movs	r3, #24
   2117e:	18fb      	adds	r3, r7, r3
   21180:	9300      	str	r3, [sp, #0]
   21182:	0023      	movs	r3, r4
   21184:	f000 fe7e 	bl	21e84 <atcacert_set_cert_element>
   21188:	0003      	movs	r3, r0
   2118a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != ATCACERT_E_SUCCESS)
   2118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2118e:	2b00      	cmp	r3, #0
   21190:	d001      	beq.n	21196 <atcacert_set_expire_date+0x8e>
    {
        return ret;
   21192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21194:	e000      	b.n	21198 <atcacert_set_expire_date+0x90>
    }

    return ATCACERT_E_SUCCESS;
   21196:	2300      	movs	r3, #0
}
   21198:	0018      	movs	r0, r3
   2119a:	46bd      	mov	sp, r7
   2119c:	b00d      	add	sp, #52	; 0x34
   2119e:	bd90      	pop	{r4, r7, pc}

000211a0 <uint8_to_hex>:

    return ATCACERT_E_SUCCESS;
}

static void uint8_to_hex(uint8_t num, uint8_t* hex_str)
{
   211a0:	b580      	push	{r7, lr}
   211a2:	b084      	sub	sp, #16
   211a4:	af00      	add	r7, sp, #0
   211a6:	0002      	movs	r2, r0
   211a8:	6039      	str	r1, [r7, #0]
   211aa:	1dfb      	adds	r3, r7, #7
   211ac:	701a      	strb	r2, [r3, #0]
    uint8_t nibble = (num >> 4) & 0x0F;
   211ae:	230f      	movs	r3, #15
   211b0:	18fb      	adds	r3, r7, r3
   211b2:	1dfa      	adds	r2, r7, #7
   211b4:	7812      	ldrb	r2, [r2, #0]
   211b6:	0912      	lsrs	r2, r2, #4
   211b8:	701a      	strb	r2, [r3, #0]

    if (nibble < 10)
   211ba:	230f      	movs	r3, #15
   211bc:	18fb      	adds	r3, r7, r3
   211be:	781b      	ldrb	r3, [r3, #0]
   211c0:	2b09      	cmp	r3, #9
   211c2:	d809      	bhi.n	211d8 <uint8_to_hex+0x38>
    {
        *(hex_str++) = '0' + nibble;
   211c4:	683b      	ldr	r3, [r7, #0]
   211c6:	1c5a      	adds	r2, r3, #1
   211c8:	603a      	str	r2, [r7, #0]
   211ca:	220f      	movs	r2, #15
   211cc:	18ba      	adds	r2, r7, r2
   211ce:	7812      	ldrb	r2, [r2, #0]
   211d0:	3230      	adds	r2, #48	; 0x30
   211d2:	b2d2      	uxtb	r2, r2
   211d4:	701a      	strb	r2, [r3, #0]
   211d6:	e008      	b.n	211ea <uint8_to_hex+0x4a>
    }
    else
    {
        *(hex_str++) = 'A' + (nibble - 10);
   211d8:	683b      	ldr	r3, [r7, #0]
   211da:	1c5a      	adds	r2, r3, #1
   211dc:	603a      	str	r2, [r7, #0]
   211de:	220f      	movs	r2, #15
   211e0:	18ba      	adds	r2, r7, r2
   211e2:	7812      	ldrb	r2, [r2, #0]
   211e4:	3237      	adds	r2, #55	; 0x37
   211e6:	b2d2      	uxtb	r2, r2
   211e8:	701a      	strb	r2, [r3, #0]
    }
    nibble = num & 0x0F;
   211ea:	230f      	movs	r3, #15
   211ec:	18fb      	adds	r3, r7, r3
   211ee:	1dfa      	adds	r2, r7, #7
   211f0:	7812      	ldrb	r2, [r2, #0]
   211f2:	210f      	movs	r1, #15
   211f4:	400a      	ands	r2, r1
   211f6:	701a      	strb	r2, [r3, #0]
    if (nibble < 10)
   211f8:	230f      	movs	r3, #15
   211fa:	18fb      	adds	r3, r7, r3
   211fc:	781b      	ldrb	r3, [r3, #0]
   211fe:	2b09      	cmp	r3, #9
   21200:	d809      	bhi.n	21216 <uint8_to_hex+0x76>
    {
        *(hex_str++) = '0' + nibble;
   21202:	683b      	ldr	r3, [r7, #0]
   21204:	1c5a      	adds	r2, r3, #1
   21206:	603a      	str	r2, [r7, #0]
   21208:	220f      	movs	r2, #15
   2120a:	18ba      	adds	r2, r7, r2
   2120c:	7812      	ldrb	r2, [r2, #0]
   2120e:	3230      	adds	r2, #48	; 0x30
   21210:	b2d2      	uxtb	r2, r2
   21212:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        *(hex_str++) = 'A' + (nibble - 10);
    }
}
   21214:	e008      	b.n	21228 <uint8_to_hex+0x88>
    {
        *(hex_str++) = '0' + nibble;
    }
    else
    {
        *(hex_str++) = 'A' + (nibble - 10);
   21216:	683b      	ldr	r3, [r7, #0]
   21218:	1c5a      	adds	r2, r3, #1
   2121a:	603a      	str	r2, [r7, #0]
   2121c:	220f      	movs	r2, #15
   2121e:	18ba      	adds	r2, r7, r2
   21220:	7812      	ldrb	r2, [r2, #0]
   21222:	3237      	adds	r2, #55	; 0x37
   21224:	b2d2      	uxtb	r2, r2
   21226:	701a      	strb	r2, [r3, #0]
    }
}
   21228:	46c0      	nop			; (mov r8, r8)
   2122a:	46bd      	mov	sp, r7
   2122c:	b004      	add	sp, #16
   2122e:	bd80      	pop	{r7, pc}

00021230 <atcacert_set_signer_id>:

int atcacert_set_signer_id(const atcacert_def_t* cert_def,
                           uint8_t*              cert,
                           size_t                cert_size,
                           const uint8_t         signer_id[2])
{
   21230:	b590      	push	{r4, r7, lr}
   21232:	b089      	sub	sp, #36	; 0x24
   21234:	af02      	add	r7, sp, #8
   21236:	60f8      	str	r0, [r7, #12]
   21238:	60b9      	str	r1, [r7, #8]
   2123a:	607a      	str	r2, [r7, #4]
   2123c:	603b      	str	r3, [r7, #0]
    uint8_t hex_str[4];

    if (cert_def == NULL || cert == NULL || signer_id == NULL)
   2123e:	68fb      	ldr	r3, [r7, #12]
   21240:	2b00      	cmp	r3, #0
   21242:	d005      	beq.n	21250 <atcacert_set_signer_id+0x20>
   21244:	68bb      	ldr	r3, [r7, #8]
   21246:	2b00      	cmp	r3, #0
   21248:	d002      	beq.n	21250 <atcacert_set_signer_id+0x20>
   2124a:	683b      	ldr	r3, [r7, #0]
   2124c:	2b00      	cmp	r3, #0
   2124e:	d101      	bne.n	21254 <atcacert_set_signer_id+0x24>
    {
        return ATCACERT_E_BAD_PARAMS;
   21250:	2302      	movs	r3, #2
   21252:	e020      	b.n	21296 <atcacert_set_signer_id+0x66>
    }

    uint8_to_hex(signer_id[0], &hex_str[0]);
   21254:	683b      	ldr	r3, [r7, #0]
   21256:	781b      	ldrb	r3, [r3, #0]
   21258:	2214      	movs	r2, #20
   2125a:	18ba      	adds	r2, r7, r2
   2125c:	0011      	movs	r1, r2
   2125e:	0018      	movs	r0, r3
   21260:	f7ff ff9e 	bl	211a0 <uint8_to_hex>
    uint8_to_hex(signer_id[1], &hex_str[2]);
   21264:	683b      	ldr	r3, [r7, #0]
   21266:	3301      	adds	r3, #1
   21268:	781a      	ldrb	r2, [r3, #0]
   2126a:	2314      	movs	r3, #20
   2126c:	18fb      	adds	r3, r7, r3
   2126e:	3302      	adds	r3, #2
   21270:	0019      	movs	r1, r3
   21272:	0010      	movs	r0, r2
   21274:	f7ff ff94 	bl	211a0 <uint8_to_hex>

    return atcacert_set_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_SIGNER_ID], cert, cert_size, hex_str, 4);
   21278:	68fb      	ldr	r3, [r7, #12]
   2127a:	3331      	adds	r3, #49	; 0x31
   2127c:	0019      	movs	r1, r3
   2127e:	687c      	ldr	r4, [r7, #4]
   21280:	68ba      	ldr	r2, [r7, #8]
   21282:	68f8      	ldr	r0, [r7, #12]
   21284:	2304      	movs	r3, #4
   21286:	9301      	str	r3, [sp, #4]
   21288:	2314      	movs	r3, #20
   2128a:	18fb      	adds	r3, r7, r3
   2128c:	9300      	str	r3, [sp, #0]
   2128e:	0023      	movs	r3, r4
   21290:	f000 fdf8 	bl	21e84 <atcacert_set_cert_element>
   21294:	0003      	movs	r3, r0
}
   21296:	0018      	movs	r0, r3
   21298:	46bd      	mov	sp, r7
   2129a:	b007      	add	sp, #28
   2129c:	bd90      	pop	{r4, r7, pc}
   2129e:	46c0      	nop			; (mov r8, r8)

000212a0 <hex_to_uint8>:

static int hex_to_uint8(const uint8_t hex_str[2], uint8_t* num)
{
   212a0:	b580      	push	{r7, lr}
   212a2:	b082      	sub	sp, #8
   212a4:	af00      	add	r7, sp, #0
   212a6:	6078      	str	r0, [r7, #4]
   212a8:	6039      	str	r1, [r7, #0]
    *num = 0;
   212aa:	683b      	ldr	r3, [r7, #0]
   212ac:	2200      	movs	r2, #0
   212ae:	701a      	strb	r2, [r3, #0]

    if (hex_str[0] >= '0' && hex_str[0] <= '9')
   212b0:	687b      	ldr	r3, [r7, #4]
   212b2:	781b      	ldrb	r3, [r3, #0]
   212b4:	2b2f      	cmp	r3, #47	; 0x2f
   212b6:	d910      	bls.n	212da <hex_to_uint8+0x3a>
   212b8:	687b      	ldr	r3, [r7, #4]
   212ba:	781b      	ldrb	r3, [r3, #0]
   212bc:	2b39      	cmp	r3, #57	; 0x39
   212be:	d80c      	bhi.n	212da <hex_to_uint8+0x3a>
    {
        *num += (hex_str[0] - '0') << 4;
   212c0:	683b      	ldr	r3, [r7, #0]
   212c2:	781a      	ldrb	r2, [r3, #0]
   212c4:	687b      	ldr	r3, [r7, #4]
   212c6:	781b      	ldrb	r3, [r3, #0]
   212c8:	3b30      	subs	r3, #48	; 0x30
   212ca:	b2db      	uxtb	r3, r3
   212cc:	011b      	lsls	r3, r3, #4
   212ce:	b2db      	uxtb	r3, r3
   212d0:	18d3      	adds	r3, r2, r3
   212d2:	b2da      	uxtb	r2, r3
   212d4:	683b      	ldr	r3, [r7, #0]
   212d6:	701a      	strb	r2, [r3, #0]
   212d8:	e02b      	b.n	21332 <hex_to_uint8+0x92>
    }
    else if (hex_str[0] >= 'A' && hex_str[0] <= 'F')
   212da:	687b      	ldr	r3, [r7, #4]
   212dc:	781b      	ldrb	r3, [r3, #0]
   212de:	2b40      	cmp	r3, #64	; 0x40
   212e0:	d910      	bls.n	21304 <hex_to_uint8+0x64>
   212e2:	687b      	ldr	r3, [r7, #4]
   212e4:	781b      	ldrb	r3, [r3, #0]
   212e6:	2b46      	cmp	r3, #70	; 0x46
   212e8:	d80c      	bhi.n	21304 <hex_to_uint8+0x64>
    {
        *num += (hex_str[0] - 'A' + 10) << 4;
   212ea:	683b      	ldr	r3, [r7, #0]
   212ec:	781a      	ldrb	r2, [r3, #0]
   212ee:	687b      	ldr	r3, [r7, #4]
   212f0:	781b      	ldrb	r3, [r3, #0]
   212f2:	3b37      	subs	r3, #55	; 0x37
   212f4:	b2db      	uxtb	r3, r3
   212f6:	011b      	lsls	r3, r3, #4
   212f8:	b2db      	uxtb	r3, r3
   212fa:	18d3      	adds	r3, r2, r3
   212fc:	b2da      	uxtb	r2, r3
   212fe:	683b      	ldr	r3, [r7, #0]
   21300:	701a      	strb	r2, [r3, #0]
   21302:	e016      	b.n	21332 <hex_to_uint8+0x92>
    }
    else if (hex_str[0] >= 'a' && hex_str[0] <= 'f')
   21304:	687b      	ldr	r3, [r7, #4]
   21306:	781b      	ldrb	r3, [r3, #0]
   21308:	2b60      	cmp	r3, #96	; 0x60
   2130a:	d910      	bls.n	2132e <hex_to_uint8+0x8e>
   2130c:	687b      	ldr	r3, [r7, #4]
   2130e:	781b      	ldrb	r3, [r3, #0]
   21310:	2b66      	cmp	r3, #102	; 0x66
   21312:	d80c      	bhi.n	2132e <hex_to_uint8+0x8e>
    {
        *num += (hex_str[0] - 'a' + 10) << 4;
   21314:	683b      	ldr	r3, [r7, #0]
   21316:	781a      	ldrb	r2, [r3, #0]
   21318:	687b      	ldr	r3, [r7, #4]
   2131a:	781b      	ldrb	r3, [r3, #0]
   2131c:	3b57      	subs	r3, #87	; 0x57
   2131e:	b2db      	uxtb	r3, r3
   21320:	011b      	lsls	r3, r3, #4
   21322:	b2db      	uxtb	r3, r3
   21324:	18d3      	adds	r3, r2, r3
   21326:	b2da      	uxtb	r2, r3
   21328:	683b      	ldr	r3, [r7, #0]
   2132a:	701a      	strb	r2, [r3, #0]
   2132c:	e001      	b.n	21332 <hex_to_uint8+0x92>
    }
    else
    {
        return ATCACERT_E_DECODING_ERROR;
   2132e:	2304      	movs	r3, #4
   21330:	e044      	b.n	213bc <hex_to_uint8+0x11c>
    }

    if (hex_str[1] >= '0' && hex_str[1] <= '9')
   21332:	687b      	ldr	r3, [r7, #4]
   21334:	3301      	adds	r3, #1
   21336:	781b      	ldrb	r3, [r3, #0]
   21338:	2b2f      	cmp	r3, #47	; 0x2f
   2133a:	d910      	bls.n	2135e <hex_to_uint8+0xbe>
   2133c:	687b      	ldr	r3, [r7, #4]
   2133e:	3301      	adds	r3, #1
   21340:	781b      	ldrb	r3, [r3, #0]
   21342:	2b39      	cmp	r3, #57	; 0x39
   21344:	d80b      	bhi.n	2135e <hex_to_uint8+0xbe>
    {
        *num += (hex_str[1] - '0');
   21346:	683b      	ldr	r3, [r7, #0]
   21348:	781a      	ldrb	r2, [r3, #0]
   2134a:	687b      	ldr	r3, [r7, #4]
   2134c:	3301      	adds	r3, #1
   2134e:	781b      	ldrb	r3, [r3, #0]
   21350:	18d3      	adds	r3, r2, r3
   21352:	b2db      	uxtb	r3, r3
   21354:	3b30      	subs	r3, #48	; 0x30
   21356:	b2da      	uxtb	r2, r3
   21358:	683b      	ldr	r3, [r7, #0]
   2135a:	701a      	strb	r2, [r3, #0]
   2135c:	e02d      	b.n	213ba <hex_to_uint8+0x11a>
    }
    else if (hex_str[1] >= 'A' && hex_str[1] <= 'F')
   2135e:	687b      	ldr	r3, [r7, #4]
   21360:	3301      	adds	r3, #1
   21362:	781b      	ldrb	r3, [r3, #0]
   21364:	2b40      	cmp	r3, #64	; 0x40
   21366:	d910      	bls.n	2138a <hex_to_uint8+0xea>
   21368:	687b      	ldr	r3, [r7, #4]
   2136a:	3301      	adds	r3, #1
   2136c:	781b      	ldrb	r3, [r3, #0]
   2136e:	2b46      	cmp	r3, #70	; 0x46
   21370:	d80b      	bhi.n	2138a <hex_to_uint8+0xea>
    {
        *num += (hex_str[1] - 'A' + 10);
   21372:	683b      	ldr	r3, [r7, #0]
   21374:	781a      	ldrb	r2, [r3, #0]
   21376:	687b      	ldr	r3, [r7, #4]
   21378:	3301      	adds	r3, #1
   2137a:	781b      	ldrb	r3, [r3, #0]
   2137c:	18d3      	adds	r3, r2, r3
   2137e:	b2db      	uxtb	r3, r3
   21380:	3b37      	subs	r3, #55	; 0x37
   21382:	b2da      	uxtb	r2, r3
   21384:	683b      	ldr	r3, [r7, #0]
   21386:	701a      	strb	r2, [r3, #0]
   21388:	e017      	b.n	213ba <hex_to_uint8+0x11a>
    }
    else if (hex_str[1] >= 'a' && hex_str[1] <= 'f')
   2138a:	687b      	ldr	r3, [r7, #4]
   2138c:	3301      	adds	r3, #1
   2138e:	781b      	ldrb	r3, [r3, #0]
   21390:	2b60      	cmp	r3, #96	; 0x60
   21392:	d910      	bls.n	213b6 <hex_to_uint8+0x116>
   21394:	687b      	ldr	r3, [r7, #4]
   21396:	3301      	adds	r3, #1
   21398:	781b      	ldrb	r3, [r3, #0]
   2139a:	2b66      	cmp	r3, #102	; 0x66
   2139c:	d80b      	bhi.n	213b6 <hex_to_uint8+0x116>
    {
        *num += (hex_str[1] - 'a' + 10);
   2139e:	683b      	ldr	r3, [r7, #0]
   213a0:	781a      	ldrb	r2, [r3, #0]
   213a2:	687b      	ldr	r3, [r7, #4]
   213a4:	3301      	adds	r3, #1
   213a6:	781b      	ldrb	r3, [r3, #0]
   213a8:	18d3      	adds	r3, r2, r3
   213aa:	b2db      	uxtb	r3, r3
   213ac:	3b57      	subs	r3, #87	; 0x57
   213ae:	b2da      	uxtb	r2, r3
   213b0:	683b      	ldr	r3, [r7, #0]
   213b2:	701a      	strb	r2, [r3, #0]
   213b4:	e001      	b.n	213ba <hex_to_uint8+0x11a>
    }
    else
    {
        return ATCACERT_E_DECODING_ERROR;
   213b6:	2304      	movs	r3, #4
   213b8:	e000      	b.n	213bc <hex_to_uint8+0x11c>
    }

    return ATCACERT_E_SUCCESS;
   213ba:	2300      	movs	r3, #0
}
   213bc:	0018      	movs	r0, r3
   213be:	46bd      	mov	sp, r7
   213c0:	b002      	add	sp, #8
   213c2:	bd80      	pop	{r7, pc}

000213c4 <atcacert_get_signer_id>:

int atcacert_get_signer_id(const atcacert_def_t* cert_def,
                           const uint8_t*        cert,
                           size_t                cert_size,
                           uint8_t               signer_id[2])
{
   213c4:	b590      	push	{r4, r7, lr}
   213c6:	b089      	sub	sp, #36	; 0x24
   213c8:	af02      	add	r7, sp, #8
   213ca:	60f8      	str	r0, [r7, #12]
   213cc:	60b9      	str	r1, [r7, #8]
   213ce:	607a      	str	r2, [r7, #4]
   213d0:	603b      	str	r3, [r7, #0]
    int ret = 0;
   213d2:	2300      	movs	r3, #0
   213d4:	617b      	str	r3, [r7, #20]
    uint8_t hex_str[4];

    if (cert_def == NULL || cert == NULL || signer_id == NULL)
   213d6:	68fb      	ldr	r3, [r7, #12]
   213d8:	2b00      	cmp	r3, #0
   213da:	d005      	beq.n	213e8 <atcacert_get_signer_id+0x24>
   213dc:	68bb      	ldr	r3, [r7, #8]
   213de:	2b00      	cmp	r3, #0
   213e0:	d002      	beq.n	213e8 <atcacert_get_signer_id+0x24>
   213e2:	683b      	ldr	r3, [r7, #0]
   213e4:	2b00      	cmp	r3, #0
   213e6:	d101      	bne.n	213ec <atcacert_get_signer_id+0x28>
    {
        return ATCACERT_E_BAD_PARAMS;
   213e8:	2302      	movs	r3, #2
   213ea:	e033      	b.n	21454 <atcacert_get_signer_id+0x90>
    }

    ret = atcacert_get_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_SIGNER_ID], cert, cert_size, hex_str, 4);
   213ec:	68fb      	ldr	r3, [r7, #12]
   213ee:	3331      	adds	r3, #49	; 0x31
   213f0:	0019      	movs	r1, r3
   213f2:	687c      	ldr	r4, [r7, #4]
   213f4:	68ba      	ldr	r2, [r7, #8]
   213f6:	68f8      	ldr	r0, [r7, #12]
   213f8:	2304      	movs	r3, #4
   213fa:	9301      	str	r3, [sp, #4]
   213fc:	2310      	movs	r3, #16
   213fe:	18fb      	adds	r3, r7, r3
   21400:	9300      	str	r3, [sp, #0]
   21402:	0023      	movs	r3, r4
   21404:	f000 fdba 	bl	21f7c <atcacert_get_cert_element>
   21408:	0003      	movs	r3, r0
   2140a:	617b      	str	r3, [r7, #20]
    if (ret != ATCACERT_E_SUCCESS)
   2140c:	697b      	ldr	r3, [r7, #20]
   2140e:	2b00      	cmp	r3, #0
   21410:	d001      	beq.n	21416 <atcacert_get_signer_id+0x52>
    {
        return ret;
   21412:	697b      	ldr	r3, [r7, #20]
   21414:	e01e      	b.n	21454 <atcacert_get_signer_id+0x90>
    }

    ret = hex_to_uint8(&hex_str[0], &signer_id[0]);
   21416:	683a      	ldr	r2, [r7, #0]
   21418:	2310      	movs	r3, #16
   2141a:	18fb      	adds	r3, r7, r3
   2141c:	0011      	movs	r1, r2
   2141e:	0018      	movs	r0, r3
   21420:	f7ff ff3e 	bl	212a0 <hex_to_uint8>
   21424:	0003      	movs	r3, r0
   21426:	617b      	str	r3, [r7, #20]
    if (ret != ATCACERT_E_SUCCESS)
   21428:	697b      	ldr	r3, [r7, #20]
   2142a:	2b00      	cmp	r3, #0
   2142c:	d001      	beq.n	21432 <atcacert_get_signer_id+0x6e>
    {
        return ret;
   2142e:	697b      	ldr	r3, [r7, #20]
   21430:	e010      	b.n	21454 <atcacert_get_signer_id+0x90>
    }

    ret = hex_to_uint8(&hex_str[2], &signer_id[1]);
   21432:	683b      	ldr	r3, [r7, #0]
   21434:	1c5a      	adds	r2, r3, #1
   21436:	2310      	movs	r3, #16
   21438:	18fb      	adds	r3, r7, r3
   2143a:	3302      	adds	r3, #2
   2143c:	0011      	movs	r1, r2
   2143e:	0018      	movs	r0, r3
   21440:	f7ff ff2e 	bl	212a0 <hex_to_uint8>
   21444:	0003      	movs	r3, r0
   21446:	617b      	str	r3, [r7, #20]
    if (ret != ATCACERT_E_SUCCESS)
   21448:	697b      	ldr	r3, [r7, #20]
   2144a:	2b00      	cmp	r3, #0
   2144c:	d001      	beq.n	21452 <atcacert_get_signer_id+0x8e>
    {
        return ret;
   2144e:	697b      	ldr	r3, [r7, #20]
   21450:	e000      	b.n	21454 <atcacert_get_signer_id+0x90>
    }

    return ATCACERT_E_SUCCESS;
   21452:	2300      	movs	r3, #0
}
   21454:	0018      	movs	r0, r3
   21456:	46bd      	mov	sp, r7
   21458:	b007      	add	sp, #28
   2145a:	bd90      	pop	{r4, r7, pc}

0002145c <atcacert_set_cert_sn>:
                         uint8_t*              cert,
                         size_t*               cert_size,
                         size_t                max_cert_size,
                         const uint8_t*        cert_sn,
                         size_t                cert_sn_size)
{
   2145c:	b5b0      	push	{r4, r5, r7, lr}
   2145e:	b08e      	sub	sp, #56	; 0x38
   21460:	af02      	add	r7, sp, #8
   21462:	60f8      	str	r0, [r7, #12]
   21464:	60b9      	str	r1, [r7, #8]
   21466:	607a      	str	r2, [r7, #4]
   21468:	603b      	str	r3, [r7, #0]
    if (cert_def == NULL || cert == NULL || cert_size == NULL || cert_sn == NULL)
   2146a:	68fb      	ldr	r3, [r7, #12]
   2146c:	2b00      	cmp	r3, #0
   2146e:	d008      	beq.n	21482 <atcacert_set_cert_sn+0x26>
   21470:	68bb      	ldr	r3, [r7, #8]
   21472:	2b00      	cmp	r3, #0
   21474:	d005      	beq.n	21482 <atcacert_set_cert_sn+0x26>
   21476:	687b      	ldr	r3, [r7, #4]
   21478:	2b00      	cmp	r3, #0
   2147a:	d002      	beq.n	21482 <atcacert_set_cert_sn+0x26>
   2147c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2147e:	2b00      	cmp	r3, #0
   21480:	d101      	bne.n	21486 <atcacert_set_cert_sn+0x2a>
    {
        return ATCACERT_E_BAD_PARAMS;
   21482:	2302      	movs	r3, #2
   21484:	e0ed      	b.n	21662 <atcacert_set_cert_sn+0x206>
    }

    if (cert_def->type == CERTTYPE_X509 && cert_def->sn_source == SNSRC_STORED_DYNAMIC)
   21486:	68fb      	ldr	r3, [r7, #12]
   21488:	781b      	ldrb	r3, [r3, #0]
   2148a:	2b00      	cmp	r3, #0
   2148c:	d000      	beq.n	21490 <atcacert_set_cert_sn+0x34>
   2148e:	e0d9      	b.n	21644 <atcacert_set_cert_sn+0x1e8>
   21490:	68fb      	ldr	r3, [r7, #12]
   21492:	791b      	ldrb	r3, [r3, #4]
   21494:	2b07      	cmp	r3, #7
   21496:	d000      	beq.n	2149a <atcacert_set_cert_sn+0x3e>
   21498:	e0d4      	b.n	21644 <atcacert_set_cert_sn+0x1e8>
    {
        // The SN includes the header length, indicating this is a variable length SN
        const atcacert_cert_loc_t* sn_cert_loc = &cert_def->std_cert_elements[STDCERT_CERT_SN];
   2149a:	68fb      	ldr	r3, [r7, #12]
   2149c:	3335      	adds	r3, #53	; 0x35
   2149e:	62fb      	str	r3, [r7, #44]	; 0x2c
        int sn_offset = (int)cert[sn_cert_loc->offset] - (int)cert_def->cert_template[sn_cert_loc->offset];
   214a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   214a2:	781a      	ldrb	r2, [r3, #0]
   214a4:	785b      	ldrb	r3, [r3, #1]
   214a6:	021b      	lsls	r3, r3, #8
   214a8:	4313      	orrs	r3, r2
   214aa:	b29b      	uxth	r3, r3
   214ac:	001a      	movs	r2, r3
   214ae:	68bb      	ldr	r3, [r7, #8]
   214b0:	189b      	adds	r3, r3, r2
   214b2:	781b      	ldrb	r3, [r3, #0]
   214b4:	0018      	movs	r0, r3
   214b6:	68fb      	ldr	r3, [r7, #12]
   214b8:	2246      	movs	r2, #70	; 0x46
   214ba:	5c9a      	ldrb	r2, [r3, r2]
   214bc:	2147      	movs	r1, #71	; 0x47
   214be:	5c59      	ldrb	r1, [r3, r1]
   214c0:	0209      	lsls	r1, r1, #8
   214c2:	430a      	orrs	r2, r1
   214c4:	2148      	movs	r1, #72	; 0x48
   214c6:	5c59      	ldrb	r1, [r3, r1]
   214c8:	0409      	lsls	r1, r1, #16
   214ca:	430a      	orrs	r2, r1
   214cc:	2149      	movs	r1, #73	; 0x49
   214ce:	5c5b      	ldrb	r3, [r3, r1]
   214d0:	061b      	lsls	r3, r3, #24
   214d2:	4313      	orrs	r3, r2
   214d4:	0019      	movs	r1, r3
   214d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   214d8:	781a      	ldrb	r2, [r3, #0]
   214da:	785b      	ldrb	r3, [r3, #1]
   214dc:	021b      	lsls	r3, r3, #8
   214de:	4313      	orrs	r3, r2
   214e0:	b29b      	uxth	r3, r3
   214e2:	18cb      	adds	r3, r1, r3
   214e4:	781b      	ldrb	r3, [r3, #0]
   214e6:	1ac3      	subs	r3, r0, r3
   214e8:	62bb      	str	r3, [r7, #40]	; 0x28

        if (sn_offset != 0)
   214ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   214ec:	2b00      	cmp	r3, #0
   214ee:	d100      	bne.n	214f2 <atcacert_set_cert_sn+0x96>
   214f0:	e08b      	b.n	2160a <atcacert_set_cert_sn+0x1ae>
        {
            int ret = 0;
   214f2:	2300      	movs	r3, #0
   214f4:	627b      	str	r3, [r7, #36]	; 0x24
            size_t der_len_offset = 0;
   214f6:	2300      	movs	r3, #0
   214f8:	623b      	str	r3, [r7, #32]
            size_t cert_der_len = 0;
   214fa:	2300      	movs	r3, #0
   214fc:	61fb      	str	r3, [r7, #28]
            uint32_t cert_len = 0;
   214fe:	2300      	movs	r3, #0
   21500:	61bb      	str	r3, [r7, #24]
            size_t tbs_der_len = 0;
   21502:	2300      	movs	r3, #0
   21504:	617b      	str	r3, [r7, #20]

            // The SN field has changed size
            if (*cert_size + sn_offset > max_cert_size)
   21506:	687b      	ldr	r3, [r7, #4]
   21508:	681a      	ldr	r2, [r3, #0]
   2150a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2150c:	18d2      	adds	r2, r2, r3
   2150e:	683b      	ldr	r3, [r7, #0]
   21510:	429a      	cmp	r2, r3
   21512:	d901      	bls.n	21518 <atcacert_set_cert_sn+0xbc>
            {
                return ATCACERT_E_BUFFER_TOO_SMALL;  // Cert buffer is too small for resizing
   21514:	2303      	movs	r3, #3
   21516:	e0a4      	b.n	21662 <atcacert_set_cert_sn+0x206>
            }
            // Shift everything after the serial number to accommodate its new size
            memmove(
                &cert[sn_cert_loc->offset + sn_cert_loc->count],
   21518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2151a:	781a      	ldrb	r2, [r3, #0]
   2151c:	785b      	ldrb	r3, [r3, #1]
   2151e:	021b      	lsls	r3, r3, #8
   21520:	4313      	orrs	r3, r2
   21522:	b29b      	uxth	r3, r3
   21524:	0019      	movs	r1, r3
   21526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21528:	789a      	ldrb	r2, [r3, #2]
   2152a:	78db      	ldrb	r3, [r3, #3]
   2152c:	021b      	lsls	r3, r3, #8
   2152e:	4313      	orrs	r3, r2
   21530:	b29b      	uxth	r3, r3
   21532:	18cb      	adds	r3, r1, r3
            if (*cert_size + sn_offset > max_cert_size)
            {
                return ATCACERT_E_BUFFER_TOO_SMALL;  // Cert buffer is too small for resizing
            }
            // Shift everything after the serial number to accommodate its new size
            memmove(
   21534:	001a      	movs	r2, r3
   21536:	68bb      	ldr	r3, [r7, #8]
   21538:	1898      	adds	r0, r3, r2
                &cert[sn_cert_loc->offset + sn_cert_loc->count],
                &cert[sn_cert_loc->offset + sn_cert_loc->count + sn_offset],
   2153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2153c:	781a      	ldrb	r2, [r3, #0]
   2153e:	785b      	ldrb	r3, [r3, #1]
   21540:	021b      	lsls	r3, r3, #8
   21542:	4313      	orrs	r3, r2
   21544:	b29b      	uxth	r3, r3
   21546:	0019      	movs	r1, r3
   21548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2154a:	789a      	ldrb	r2, [r3, #2]
   2154c:	78db      	ldrb	r3, [r3, #3]
   2154e:	021b      	lsls	r3, r3, #8
   21550:	4313      	orrs	r3, r2
   21552:	b29b      	uxth	r3, r3
   21554:	18ca      	adds	r2, r1, r3
   21556:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21558:	18d3      	adds	r3, r2, r3
            if (*cert_size + sn_offset > max_cert_size)
            {
                return ATCACERT_E_BUFFER_TOO_SMALL;  // Cert buffer is too small for resizing
            }
            // Shift everything after the serial number to accommodate its new size
            memmove(
   2155a:	001a      	movs	r2, r3
   2155c:	68bb      	ldr	r3, [r7, #8]
   2155e:	189c      	adds	r4, r3, r2
                &cert[sn_cert_loc->offset + sn_cert_loc->count],
                &cert[sn_cert_loc->offset + sn_cert_loc->count + sn_offset],
                *cert_size - (sn_cert_loc->offset + sn_cert_loc->count));
   21560:	687b      	ldr	r3, [r7, #4]
   21562:	681a      	ldr	r2, [r3, #0]
   21564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21566:	7819      	ldrb	r1, [r3, #0]
   21568:	785b      	ldrb	r3, [r3, #1]
   2156a:	021b      	lsls	r3, r3, #8
   2156c:	430b      	orrs	r3, r1
   2156e:	b29b      	uxth	r3, r3
   21570:	001d      	movs	r5, r3
   21572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21574:	7899      	ldrb	r1, [r3, #2]
   21576:	78db      	ldrb	r3, [r3, #3]
   21578:	021b      	lsls	r3, r3, #8
   2157a:	430b      	orrs	r3, r1
   2157c:	b29b      	uxth	r3, r3
   2157e:	18eb      	adds	r3, r5, r3
            if (*cert_size + sn_offset > max_cert_size)
            {
                return ATCACERT_E_BUFFER_TOO_SMALL;  // Cert buffer is too small for resizing
            }
            // Shift everything after the serial number to accommodate its new size
            memmove(
   21580:	1ad3      	subs	r3, r2, r3
   21582:	001a      	movs	r2, r3
   21584:	0021      	movs	r1, r4
   21586:	f004 f8bb 	bl	25700 <memmove>
                &cert[sn_cert_loc->offset + sn_cert_loc->count],
                &cert[sn_cert_loc->offset + sn_cert_loc->count + sn_offset],
                *cert_size - (sn_cert_loc->offset + sn_cert_loc->count));
            *cert_size += sn_offset;
   2158a:	687b      	ldr	r3, [r7, #4]
   2158c:	681a      	ldr	r2, [r3, #0]
   2158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21590:	18d2      	adds	r2, r2, r3
   21592:	687b      	ldr	r3, [r7, #4]
   21594:	601a      	str	r2, [r3, #0]

            // Adjust cert header length
            der_len_offset = 1;                         // Right after first sequence tag
   21596:	2301      	movs	r3, #1
   21598:	623b      	str	r3, [r7, #32]
            cert_der_len = *cert_size - der_len_offset; // Indicate how much buffer it has to work with
   2159a:	687b      	ldr	r3, [r7, #4]
   2159c:	681a      	ldr	r2, [r3, #0]
   2159e:	6a3b      	ldr	r3, [r7, #32]
   215a0:	1ad3      	subs	r3, r2, r3
   215a2:	61fb      	str	r3, [r7, #28]
            ret = atcacert_der_adjust_length(
   215a4:	68ba      	ldr	r2, [r7, #8]
   215a6:	6a3b      	ldr	r3, [r7, #32]
   215a8:	18d0      	adds	r0, r2, r3
   215aa:	2318      	movs	r3, #24
   215ac:	18fb      	adds	r3, r7, r3
   215ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
   215b0:	211c      	movs	r1, #28
   215b2:	1879      	adds	r1, r7, r1
   215b4:	f000 fe74 	bl	222a0 <atcacert_der_adjust_length>
   215b8:	0003      	movs	r3, r0
   215ba:	627b      	str	r3, [r7, #36]	; 0x24
                &cert[der_len_offset],
                &cert_der_len,
                sn_offset,
                &cert_len);
            if (ret != 0)
   215bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   215be:	2b00      	cmp	r3, #0
   215c0:	d001      	beq.n	215c6 <atcacert_set_cert_sn+0x16a>
            {
                return ret;
   215c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   215c4:	e04d      	b.n	21662 <atcacert_set_cert_sn+0x206>
            }
            if (1 + cert_der_len + cert_len != *cert_size)
   215c6:	69fa      	ldr	r2, [r7, #28]
   215c8:	69bb      	ldr	r3, [r7, #24]
   215ca:	18d3      	adds	r3, r2, r3
   215cc:	1c5a      	adds	r2, r3, #1
   215ce:	687b      	ldr	r3, [r7, #4]
   215d0:	681b      	ldr	r3, [r3, #0]
   215d2:	429a      	cmp	r2, r3
   215d4:	d001      	beq.n	215da <atcacert_set_cert_sn+0x17e>
            {
                return ATCACERT_E_BAD_CERT;            // Cert was malformed
   215d6:	230a      	movs	r3, #10
   215d8:	e043      	b.n	21662 <atcacert_set_cert_sn+0x206>

            }
            der_len_offset = 1 + cert_der_len + 1;     // cert Tag (1), cert len, TBS tag (1)
   215da:	69fb      	ldr	r3, [r7, #28]
   215dc:	3302      	adds	r3, #2
   215de:	623b      	str	r3, [r7, #32]
            tbs_der_len = *cert_size - der_len_offset; // Indicate how much buffer it has to work with:
   215e0:	687b      	ldr	r3, [r7, #4]
   215e2:	681a      	ldr	r2, [r3, #0]
   215e4:	6a3b      	ldr	r3, [r7, #32]
   215e6:	1ad3      	subs	r3, r2, r3
   215e8:	617b      	str	r3, [r7, #20]
            ret = atcacert_der_adjust_length(
   215ea:	68ba      	ldr	r2, [r7, #8]
   215ec:	6a3b      	ldr	r3, [r7, #32]
   215ee:	18d0      	adds	r0, r2, r3
   215f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   215f2:	2314      	movs	r3, #20
   215f4:	18f9      	adds	r1, r7, r3
   215f6:	2300      	movs	r3, #0
   215f8:	f000 fe52 	bl	222a0 <atcacert_der_adjust_length>
   215fc:	0003      	movs	r3, r0
   215fe:	627b      	str	r3, [r7, #36]	; 0x24
                &cert[der_len_offset],
                &tbs_der_len,
                sn_offset,
                NULL);
            if (ret != 0)
   21600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21602:	2b00      	cmp	r3, #0
   21604:	d001      	beq.n	2160a <atcacert_set_cert_sn+0x1ae>
            {
                return ret;
   21606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21608:	e02b      	b.n	21662 <atcacert_set_cert_sn+0x206>
            }
        }

        if ((size_t)(cert[sn_cert_loc->offset] + 1) > cert_sn_size)
   2160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2160c:	781a      	ldrb	r2, [r3, #0]
   2160e:	785b      	ldrb	r3, [r3, #1]
   21610:	021b      	lsls	r3, r3, #8
   21612:	4313      	orrs	r3, r2
   21614:	b29b      	uxth	r3, r3
   21616:	001a      	movs	r2, r3
   21618:	68bb      	ldr	r3, [r7, #8]
   2161a:	189b      	adds	r3, r3, r2
   2161c:	781b      	ldrb	r3, [r3, #0]
   2161e:	3301      	adds	r3, #1
   21620:	001a      	movs	r2, r3
   21622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   21624:	429a      	cmp	r2, r3
   21626:	d901      	bls.n	2162c <atcacert_set_cert_sn+0x1d0>
        {
            return ATCACERT_E_BAD_PARAMS;
   21628:	2302      	movs	r3, #2
   2162a:	e01a      	b.n	21662 <atcacert_set_cert_sn+0x206>
        }
        cert_sn_size = cert[sn_cert_loc->offset] + 1;
   2162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2162e:	781a      	ldrb	r2, [r3, #0]
   21630:	785b      	ldrb	r3, [r3, #1]
   21632:	021b      	lsls	r3, r3, #8
   21634:	4313      	orrs	r3, r2
   21636:	b29b      	uxth	r3, r3
   21638:	001a      	movs	r2, r3
   2163a:	68bb      	ldr	r3, [r7, #8]
   2163c:	189b      	adds	r3, r3, r2
   2163e:	781b      	ldrb	r3, [r3, #0]
   21640:	3301      	adds	r3, #1
   21642:	647b      	str	r3, [r7, #68]	; 0x44

        // Update Cert
    }

    return atcacert_set_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_CERT_SN], cert, *cert_size, cert_sn, cert_sn_size);
   21644:	68fb      	ldr	r3, [r7, #12]
   21646:	3335      	adds	r3, #53	; 0x35
   21648:	0019      	movs	r1, r3
   2164a:	687b      	ldr	r3, [r7, #4]
   2164c:	681c      	ldr	r4, [r3, #0]
   2164e:	68ba      	ldr	r2, [r7, #8]
   21650:	68f8      	ldr	r0, [r7, #12]
   21652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   21654:	9301      	str	r3, [sp, #4]
   21656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21658:	9300      	str	r3, [sp, #0]
   2165a:	0023      	movs	r3, r4
   2165c:	f000 fc12 	bl	21e84 <atcacert_set_cert_element>
   21660:	0003      	movs	r3, r0
}
   21662:	0018      	movs	r0, r3
   21664:	46bd      	mov	sp, r7
   21666:	b00c      	add	sp, #48	; 0x30
   21668:	bdb0      	pop	{r4, r5, r7, pc}
   2166a:	46c0      	nop			; (mov r8, r8)

0002166c <atcacert_gen_cert_sn>:

int atcacert_gen_cert_sn(const atcacert_def_t* cert_def,
                         uint8_t*              cert,
                         size_t                cert_size,
                         const uint8_t         device_sn[9])
{
   2166c:	b590      	push	{r4, r7, lr}
   2166e:	b0a9      	sub	sp, #164	; 0xa4
   21670:	af02      	add	r7, sp, #8
   21672:	60f8      	str	r0, [r7, #12]
   21674:	60b9      	str	r1, [r7, #8]
   21676:	607a      	str	r2, [r7, #4]
   21678:	603b      	str	r3, [r7, #0]
    int ret = 0;
   2167a:	2300      	movs	r3, #0
   2167c:	2290      	movs	r2, #144	; 0x90
   2167e:	18ba      	adds	r2, r7, r2
   21680:	6013      	str	r3, [r2, #0]
    size_t sn_size = 0;
   21682:	2300      	movs	r3, #0
   21684:	2294      	movs	r2, #148	; 0x94
   21686:	18ba      	adds	r2, r7, r2
   21688:	6013      	str	r3, [r2, #0]
    uint8_t msg[64 + 3];
    uint8_t sn[32];
    atcacert_tm_utc_t issue_date;

    if (cert_def == NULL || cert == NULL)
   2168a:	68fb      	ldr	r3, [r7, #12]
   2168c:	2b00      	cmp	r3, #0
   2168e:	d002      	beq.n	21696 <atcacert_gen_cert_sn+0x2a>
   21690:	68bb      	ldr	r3, [r7, #8]
   21692:	2b00      	cmp	r3, #0
   21694:	d101      	bne.n	2169a <atcacert_gen_cert_sn+0x2e>
    {
        return ATCACERT_E_BAD_PARAMS;
   21696:	2302      	movs	r3, #2
   21698:	e179      	b.n	2198e <atcacert_gen_cert_sn+0x322>
    }

    if (cert_def->sn_source == SNSRC_STORED || cert_def->sn_source == SNSRC_STORED_DYNAMIC || cert_def->std_cert_elements[STDCERT_CERT_SN].count == 0)
   2169a:	68fb      	ldr	r3, [r7, #12]
   2169c:	791b      	ldrb	r3, [r3, #4]
   2169e:	2b00      	cmp	r3, #0
   216a0:	d00d      	beq.n	216be <atcacert_gen_cert_sn+0x52>
   216a2:	68fb      	ldr	r3, [r7, #12]
   216a4:	791b      	ldrb	r3, [r3, #4]
   216a6:	2b07      	cmp	r3, #7
   216a8:	d009      	beq.n	216be <atcacert_gen_cert_sn+0x52>
   216aa:	68fb      	ldr	r3, [r7, #12]
   216ac:	2237      	movs	r2, #55	; 0x37
   216ae:	5c9a      	ldrb	r2, [r3, r2]
   216b0:	2138      	movs	r1, #56	; 0x38
   216b2:	5c5b      	ldrb	r3, [r3, r1]
   216b4:	021b      	lsls	r3, r3, #8
   216b6:	4313      	orrs	r3, r2
   216b8:	b29b      	uxth	r3, r3
   216ba:	2b00      	cmp	r3, #0
   216bc:	d101      	bne.n	216c2 <atcacert_gen_cert_sn+0x56>
    {
        return ATCACERT_E_SUCCESS;  // Certificate serial number is not generated or not in the certificate
   216be:	2300      	movs	r3, #0
   216c0:	e165      	b.n	2198e <atcacert_gen_cert_sn+0x322>

    }
    switch (cert_def->sn_source)
   216c2:	68fb      	ldr	r3, [r7, #12]
   216c4:	791b      	ldrb	r3, [r3, #4]
   216c6:	3b08      	subs	r3, #8
   216c8:	2b07      	cmp	r3, #7
   216ca:	d900      	bls.n	216ce <atcacert_gen_cert_sn+0x62>
   216cc:	e147      	b.n	2195e <atcacert_gen_cert_sn+0x2f2>
   216ce:	009a      	lsls	r2, r3, #2
   216d0:	4bb1      	ldr	r3, [pc, #708]	; (21998 <atcacert_gen_cert_sn+0x32c>)
   216d2:	18d3      	adds	r3, r2, r3
   216d4:	681b      	ldr	r3, [r3, #0]
   216d6:	469f      	mov	pc, r3
    {
    case SNSRC_DEVICE_SN:     // Cert serial number is 0x40(MSB) + 9-byte device serial number. Only applies to device certificates.
        if (device_sn == NULL)
   216d8:	683b      	ldr	r3, [r7, #0]
   216da:	2b00      	cmp	r3, #0
   216dc:	d101      	bne.n	216e2 <atcacert_gen_cert_sn+0x76>
        {
            return ATCACERT_E_BAD_PARAMS;
   216de:	2302      	movs	r3, #2
   216e0:	e155      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        }
        sn_size = 1 + 9;
   216e2:	230a      	movs	r3, #10
   216e4:	2294      	movs	r2, #148	; 0x94
   216e6:	18ba      	adds	r2, r7, r2
   216e8:	6013      	str	r3, [r2, #0]
        sn[0] = 0x40;
   216ea:	232c      	movs	r3, #44	; 0x2c
   216ec:	18fb      	adds	r3, r7, r3
   216ee:	2240      	movs	r2, #64	; 0x40
   216f0:	701a      	strb	r2, [r3, #0]
        memcpy(&sn[1], device_sn, 9);
   216f2:	6839      	ldr	r1, [r7, #0]
   216f4:	232c      	movs	r3, #44	; 0x2c
   216f6:	18fb      	adds	r3, r7, r3
   216f8:	3301      	adds	r3, #1
   216fa:	2209      	movs	r2, #9
   216fc:	0018      	movs	r0, r3
   216fe:	f003 fff6 	bl	256ee <memcpy>
        break;
   21702:	e133      	b.n	2196c <atcacert_gen_cert_sn+0x300>

    case SNSRC_SIGNER_ID:     // Cert serial number is 0x40(MSB) + 2-byte signer ID. Only applies to signer certificates.
        sn_size = 1 + 2;
   21704:	2303      	movs	r3, #3
   21706:	2294      	movs	r2, #148	; 0x94
   21708:	18ba      	adds	r2, r7, r2
   2170a:	6013      	str	r3, [r2, #0]
        sn[0] = 0x40;
   2170c:	232c      	movs	r3, #44	; 0x2c
   2170e:	18fb      	adds	r3, r7, r3
   21710:	2240      	movs	r2, #64	; 0x40
   21712:	701a      	strb	r2, [r3, #0]
        ret = atcacert_get_signer_id(cert_def, cert, cert_size, &sn[1]);
   21714:	232c      	movs	r3, #44	; 0x2c
   21716:	18fb      	adds	r3, r7, r3
   21718:	3301      	adds	r3, #1
   2171a:	687a      	ldr	r2, [r7, #4]
   2171c:	68b9      	ldr	r1, [r7, #8]
   2171e:	68f8      	ldr	r0, [r7, #12]
   21720:	f7ff fe50 	bl	213c4 <atcacert_get_signer_id>
   21724:	0003      	movs	r3, r0
   21726:	2290      	movs	r2, #144	; 0x90
   21728:	18ba      	adds	r2, r7, r2
   2172a:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   2172c:	2390      	movs	r3, #144	; 0x90
   2172e:	18fb      	adds	r3, r7, r3
   21730:	681b      	ldr	r3, [r3, #0]
   21732:	2b00      	cmp	r3, #0
   21734:	d100      	bne.n	21738 <atcacert_gen_cert_sn+0xcc>
   21736:	e114      	b.n	21962 <atcacert_gen_cert_sn+0x2f6>
        {
            return ret;
   21738:	2390      	movs	r3, #144	; 0x90
   2173a:	18fb      	adds	r3, r7, r3
   2173c:	681b      	ldr	r3, [r3, #0]
   2173e:	e126      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        break;

    case SNSRC_PUB_KEY_HASH_RAW:     // Cert serial number is the SHA256(Subject public key + Encoded dates)
    case SNSRC_PUB_KEY_HASH_POS:
    case SNSRC_PUB_KEY_HASH:
        if (cert_def->std_cert_elements[STDCERT_CERT_SN].count > 32)
   21740:	68fb      	ldr	r3, [r7, #12]
   21742:	2237      	movs	r2, #55	; 0x37
   21744:	5c9a      	ldrb	r2, [r3, r2]
   21746:	2138      	movs	r1, #56	; 0x38
   21748:	5c5b      	ldrb	r3, [r3, r1]
   2174a:	021b      	lsls	r3, r3, #8
   2174c:	4313      	orrs	r3, r2
   2174e:	b29b      	uxth	r3, r3
   21750:	2b20      	cmp	r3, #32
   21752:	d901      	bls.n	21758 <atcacert_gen_cert_sn+0xec>
        {
            return ATCACERT_E_UNEXPECTED_ELEM_SIZE;
   21754:	2307      	movs	r3, #7
   21756:	e11a      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        }
        sn_size = cert_def->std_cert_elements[STDCERT_CERT_SN].count;
   21758:	68fb      	ldr	r3, [r7, #12]
   2175a:	2237      	movs	r2, #55	; 0x37
   2175c:	5c9a      	ldrb	r2, [r3, r2]
   2175e:	2138      	movs	r1, #56	; 0x38
   21760:	5c5b      	ldrb	r3, [r3, r1]
   21762:	021b      	lsls	r3, r3, #8
   21764:	4313      	orrs	r3, r2
   21766:	b29b      	uxth	r3, r3
   21768:	2294      	movs	r2, #148	; 0x94
   2176a:	18ba      	adds	r2, r7, r2
   2176c:	6013      	str	r3, [r2, #0]

        // Add public key to hash input
        ret = atcacert_get_subj_public_key(cert_def, cert, cert_size, &msg[0]);
   2176e:	234c      	movs	r3, #76	; 0x4c
   21770:	18fb      	adds	r3, r7, r3
   21772:	687a      	ldr	r2, [r7, #4]
   21774:	68b9      	ldr	r1, [r7, #8]
   21776:	68f8      	ldr	r0, [r7, #12]
   21778:	f7ff faf8 	bl	20d6c <atcacert_get_subj_public_key>
   2177c:	0003      	movs	r3, r0
   2177e:	2290      	movs	r2, #144	; 0x90
   21780:	18ba      	adds	r2, r7, r2
   21782:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   21784:	2390      	movs	r3, #144	; 0x90
   21786:	18fb      	adds	r3, r7, r3
   21788:	681b      	ldr	r3, [r3, #0]
   2178a:	2b00      	cmp	r3, #0
   2178c:	d003      	beq.n	21796 <atcacert_gen_cert_sn+0x12a>
        {
            return ret;
   2178e:	2390      	movs	r3, #144	; 0x90
   21790:	18fb      	adds	r3, r7, r3
   21792:	681b      	ldr	r3, [r3, #0]
   21794:	e0fb      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        }

        // Add compressed/encoded dates to hash input
        ret = atcacert_get_issue_date(cert_def, cert, cert_size, &issue_date);
   21796:	2314      	movs	r3, #20
   21798:	18fb      	adds	r3, r7, r3
   2179a:	687a      	ldr	r2, [r7, #4]
   2179c:	68b9      	ldr	r1, [r7, #8]
   2179e:	68f8      	ldr	r0, [r7, #12]
   217a0:	f7ff fc5e 	bl	21060 <atcacert_get_issue_date>
   217a4:	0003      	movs	r3, r0
   217a6:	2290      	movs	r2, #144	; 0x90
   217a8:	18ba      	adds	r2, r7, r2
   217aa:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   217ac:	2390      	movs	r3, #144	; 0x90
   217ae:	18fb      	adds	r3, r7, r3
   217b0:	681b      	ldr	r3, [r3, #0]
   217b2:	2b00      	cmp	r3, #0
   217b4:	d003      	beq.n	217be <atcacert_gen_cert_sn+0x152>
        {
            return ret;
   217b6:	2390      	movs	r3, #144	; 0x90
   217b8:	18fb      	adds	r3, r7, r3
   217ba:	681b      	ldr	r3, [r3, #0]
   217bc:	e0e7      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        }
        ret = atcacert_date_enc_compcert(&issue_date, cert_def->expire_years, &msg[64]);
   217be:	68fb      	ldr	r3, [r7, #12]
   217c0:	7c99      	ldrb	r1, [r3, #18]
   217c2:	234c      	movs	r3, #76	; 0x4c
   217c4:	18fb      	adds	r3, r7, r3
   217c6:	3340      	adds	r3, #64	; 0x40
   217c8:	001a      	movs	r2, r3
   217ca:	2314      	movs	r3, #20
   217cc:	18fb      	adds	r3, r7, r3
   217ce:	0018      	movs	r0, r3
   217d0:	f7fd fe4c 	bl	1f46c <atcacert_date_enc_compcert>
   217d4:	0003      	movs	r3, r0
   217d6:	2290      	movs	r2, #144	; 0x90
   217d8:	18ba      	adds	r2, r7, r2
   217da:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   217dc:	2390      	movs	r3, #144	; 0x90
   217de:	18fb      	adds	r3, r7, r3
   217e0:	681b      	ldr	r3, [r3, #0]
   217e2:	2b00      	cmp	r3, #0
   217e4:	d003      	beq.n	217ee <atcacert_gen_cert_sn+0x182>
        {
            return ret;
   217e6:	2390      	movs	r3, #144	; 0x90
   217e8:	18fb      	adds	r3, r7, r3
   217ea:	681b      	ldr	r3, [r3, #0]
   217ec:	e0cf      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        }
        ret = atcac_sw_sha2_256(msg, 64 + 3, sn);
   217ee:	232c      	movs	r3, #44	; 0x2c
   217f0:	18fa      	adds	r2, r7, r3
   217f2:	234c      	movs	r3, #76	; 0x4c
   217f4:	18fb      	adds	r3, r7, r3
   217f6:	2143      	movs	r1, #67	; 0x43
   217f8:	0018      	movs	r0, r3
   217fa:	f7fb fdf5 	bl	1d3e8 <atcac_sw_sha2_256>
   217fe:	0003      	movs	r3, r0
   21800:	2290      	movs	r2, #144	; 0x90
   21802:	18ba      	adds	r2, r7, r2
   21804:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   21806:	2390      	movs	r3, #144	; 0x90
   21808:	18fb      	adds	r3, r7, r3
   2180a:	681b      	ldr	r3, [r3, #0]
   2180c:	2b00      	cmp	r3, #0
   2180e:	d003      	beq.n	21818 <atcacert_gen_cert_sn+0x1ac>
        {
            return ret;
   21810:	2390      	movs	r3, #144	; 0x90
   21812:	18fb      	adds	r3, r7, r3
   21814:	681b      	ldr	r3, [r3, #0]
   21816:	e0ba      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        }

        if (cert_def->sn_source == SNSRC_PUB_KEY_HASH_POS || cert_def->sn_source == SNSRC_PUB_KEY_HASH)
   21818:	68fb      	ldr	r3, [r7, #12]
   2181a:	791b      	ldrb	r3, [r3, #4]
   2181c:	2b0c      	cmp	r3, #12
   2181e:	d003      	beq.n	21828 <atcacert_gen_cert_sn+0x1bc>
   21820:	68fb      	ldr	r3, [r7, #12]
   21822:	791b      	ldrb	r3, [r3, #4]
   21824:	2b0a      	cmp	r3, #10
   21826:	d108      	bne.n	2183a <atcacert_gen_cert_sn+0x1ce>
        {
            sn[0] &= 0x7F;      // Ensure the SN is positive
   21828:	232c      	movs	r3, #44	; 0x2c
   2182a:	18fb      	adds	r3, r7, r3
   2182c:	781b      	ldrb	r3, [r3, #0]
   2182e:	227f      	movs	r2, #127	; 0x7f
   21830:	4013      	ands	r3, r2
   21832:	b2da      	uxtb	r2, r3
   21834:	232c      	movs	r3, #44	; 0x2c
   21836:	18fb      	adds	r3, r7, r3
   21838:	701a      	strb	r2, [r3, #0]
        }
        if (cert_def->sn_source == SNSRC_PUB_KEY_HASH)
   2183a:	68fb      	ldr	r3, [r7, #12]
   2183c:	791b      	ldrb	r3, [r3, #4]
   2183e:	2b0a      	cmp	r3, #10
   21840:	d000      	beq.n	21844 <atcacert_gen_cert_sn+0x1d8>
   21842:	e090      	b.n	21966 <atcacert_gen_cert_sn+0x2fa>
        {
            sn[0] |= 0x40;      // Ensure the SN doesn't have any trimmable bytes
   21844:	232c      	movs	r3, #44	; 0x2c
   21846:	18fb      	adds	r3, r7, r3
   21848:	781b      	ldrb	r3, [r3, #0]
   2184a:	2240      	movs	r2, #64	; 0x40
   2184c:	4313      	orrs	r3, r2
   2184e:	b2da      	uxtb	r2, r3
   21850:	232c      	movs	r3, #44	; 0x2c
   21852:	18fb      	adds	r3, r7, r3
   21854:	701a      	strb	r2, [r3, #0]
        }
        break;
   21856:	e086      	b.n	21966 <atcacert_gen_cert_sn+0x2fa>

    case SNSRC_DEVICE_SN_HASH_RAW:     // Cert serial number is the SHA256(Device SN + Encoded dates). Only applies to device certificates.
    case SNSRC_DEVICE_SN_HASH_POS:
    case SNSRC_DEVICE_SN_HASH:
        if (device_sn == NULL)
   21858:	683b      	ldr	r3, [r7, #0]
   2185a:	2b00      	cmp	r3, #0
   2185c:	d101      	bne.n	21862 <atcacert_gen_cert_sn+0x1f6>
        {
            return ATCACERT_E_BAD_PARAMS;
   2185e:	2302      	movs	r3, #2
   21860:	e095      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        }
        if (cert_def->std_cert_elements[STDCERT_CERT_SN].count > 32)
   21862:	68fb      	ldr	r3, [r7, #12]
   21864:	2237      	movs	r2, #55	; 0x37
   21866:	5c9a      	ldrb	r2, [r3, r2]
   21868:	2138      	movs	r1, #56	; 0x38
   2186a:	5c5b      	ldrb	r3, [r3, r1]
   2186c:	021b      	lsls	r3, r3, #8
   2186e:	4313      	orrs	r3, r2
   21870:	b29b      	uxth	r3, r3
   21872:	2b20      	cmp	r3, #32
   21874:	d901      	bls.n	2187a <atcacert_gen_cert_sn+0x20e>
        {
            return ATCACERT_E_UNEXPECTED_ELEM_SIZE;
   21876:	2307      	movs	r3, #7
   21878:	e089      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        }
        sn_size = cert_def->std_cert_elements[STDCERT_CERT_SN].count;
   2187a:	68fb      	ldr	r3, [r7, #12]
   2187c:	2237      	movs	r2, #55	; 0x37
   2187e:	5c9a      	ldrb	r2, [r3, r2]
   21880:	2138      	movs	r1, #56	; 0x38
   21882:	5c5b      	ldrb	r3, [r3, r1]
   21884:	021b      	lsls	r3, r3, #8
   21886:	4313      	orrs	r3, r2
   21888:	b29b      	uxth	r3, r3
   2188a:	2294      	movs	r2, #148	; 0x94
   2188c:	18ba      	adds	r2, r7, r2
   2188e:	6013      	str	r3, [r2, #0]

        // Add device SN to the hash input
        memcpy(&msg[0], device_sn, 9);
   21890:	6839      	ldr	r1, [r7, #0]
   21892:	234c      	movs	r3, #76	; 0x4c
   21894:	18fb      	adds	r3, r7, r3
   21896:	2209      	movs	r2, #9
   21898:	0018      	movs	r0, r3
   2189a:	f003 ff28 	bl	256ee <memcpy>

        // Add compressed/encoded dates to hash input
        ret = atcacert_get_issue_date(cert_def, cert, cert_size, &issue_date);
   2189e:	2314      	movs	r3, #20
   218a0:	18fb      	adds	r3, r7, r3
   218a2:	687a      	ldr	r2, [r7, #4]
   218a4:	68b9      	ldr	r1, [r7, #8]
   218a6:	68f8      	ldr	r0, [r7, #12]
   218a8:	f7ff fbda 	bl	21060 <atcacert_get_issue_date>
   218ac:	0003      	movs	r3, r0
   218ae:	2290      	movs	r2, #144	; 0x90
   218b0:	18ba      	adds	r2, r7, r2
   218b2:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   218b4:	2390      	movs	r3, #144	; 0x90
   218b6:	18fb      	adds	r3, r7, r3
   218b8:	681b      	ldr	r3, [r3, #0]
   218ba:	2b00      	cmp	r3, #0
   218bc:	d003      	beq.n	218c6 <atcacert_gen_cert_sn+0x25a>
        {
            return ret;
   218be:	2390      	movs	r3, #144	; 0x90
   218c0:	18fb      	adds	r3, r7, r3
   218c2:	681b      	ldr	r3, [r3, #0]
   218c4:	e063      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        }
        ret = atcacert_date_enc_compcert(&issue_date, cert_def->expire_years, &msg[9]);
   218c6:	68fb      	ldr	r3, [r7, #12]
   218c8:	7c99      	ldrb	r1, [r3, #18]
   218ca:	234c      	movs	r3, #76	; 0x4c
   218cc:	18fb      	adds	r3, r7, r3
   218ce:	3309      	adds	r3, #9
   218d0:	001a      	movs	r2, r3
   218d2:	2314      	movs	r3, #20
   218d4:	18fb      	adds	r3, r7, r3
   218d6:	0018      	movs	r0, r3
   218d8:	f7fd fdc8 	bl	1f46c <atcacert_date_enc_compcert>
   218dc:	0003      	movs	r3, r0
   218de:	2290      	movs	r2, #144	; 0x90
   218e0:	18ba      	adds	r2, r7, r2
   218e2:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   218e4:	2390      	movs	r3, #144	; 0x90
   218e6:	18fb      	adds	r3, r7, r3
   218e8:	681b      	ldr	r3, [r3, #0]
   218ea:	2b00      	cmp	r3, #0
   218ec:	d003      	beq.n	218f6 <atcacert_gen_cert_sn+0x28a>
        {
            return ret;
   218ee:	2390      	movs	r3, #144	; 0x90
   218f0:	18fb      	adds	r3, r7, r3
   218f2:	681b      	ldr	r3, [r3, #0]
   218f4:	e04b      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        }
        ret = atcac_sw_sha2_256(msg, 9 + 3, sn);
   218f6:	232c      	movs	r3, #44	; 0x2c
   218f8:	18fa      	adds	r2, r7, r3
   218fa:	234c      	movs	r3, #76	; 0x4c
   218fc:	18fb      	adds	r3, r7, r3
   218fe:	210c      	movs	r1, #12
   21900:	0018      	movs	r0, r3
   21902:	f7fb fd71 	bl	1d3e8 <atcac_sw_sha2_256>
   21906:	0003      	movs	r3, r0
   21908:	2290      	movs	r2, #144	; 0x90
   2190a:	18ba      	adds	r2, r7, r2
   2190c:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   2190e:	2390      	movs	r3, #144	; 0x90
   21910:	18fb      	adds	r3, r7, r3
   21912:	681b      	ldr	r3, [r3, #0]
   21914:	2b00      	cmp	r3, #0
   21916:	d003      	beq.n	21920 <atcacert_gen_cert_sn+0x2b4>
        {
            return ret;
   21918:	2390      	movs	r3, #144	; 0x90
   2191a:	18fb      	adds	r3, r7, r3
   2191c:	681b      	ldr	r3, [r3, #0]
   2191e:	e036      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        }

        if (cert_def->sn_source == SNSRC_DEVICE_SN_HASH_POS || cert_def->sn_source == SNSRC_DEVICE_SN_HASH)
   21920:	68fb      	ldr	r3, [r7, #12]
   21922:	791b      	ldrb	r3, [r3, #4]
   21924:	2b0d      	cmp	r3, #13
   21926:	d003      	beq.n	21930 <atcacert_gen_cert_sn+0x2c4>
   21928:	68fb      	ldr	r3, [r7, #12]
   2192a:	791b      	ldrb	r3, [r3, #4]
   2192c:	2b0b      	cmp	r3, #11
   2192e:	d108      	bne.n	21942 <atcacert_gen_cert_sn+0x2d6>
        {
            sn[0] &= 0x7F;      // Ensure the SN is positive
   21930:	232c      	movs	r3, #44	; 0x2c
   21932:	18fb      	adds	r3, r7, r3
   21934:	781b      	ldrb	r3, [r3, #0]
   21936:	227f      	movs	r2, #127	; 0x7f
   21938:	4013      	ands	r3, r2
   2193a:	b2da      	uxtb	r2, r3
   2193c:	232c      	movs	r3, #44	; 0x2c
   2193e:	18fb      	adds	r3, r7, r3
   21940:	701a      	strb	r2, [r3, #0]
        }
        if (cert_def->sn_source == SNSRC_DEVICE_SN_HASH)
   21942:	68fb      	ldr	r3, [r7, #12]
   21944:	791b      	ldrb	r3, [r3, #4]
   21946:	2b0b      	cmp	r3, #11
   21948:	d10f      	bne.n	2196a <atcacert_gen_cert_sn+0x2fe>
        {
            sn[0] |= 0x40;      // Ensure the SN doesn't have any trimmable bytes
   2194a:	232c      	movs	r3, #44	; 0x2c
   2194c:	18fb      	adds	r3, r7, r3
   2194e:	781b      	ldrb	r3, [r3, #0]
   21950:	2240      	movs	r2, #64	; 0x40
   21952:	4313      	orrs	r3, r2
   21954:	b2da      	uxtb	r2, r3
   21956:	232c      	movs	r3, #44	; 0x2c
   21958:	18fb      	adds	r3, r7, r3
   2195a:	701a      	strb	r2, [r3, #0]
        }
        break;
   2195c:	e005      	b.n	2196a <atcacert_gen_cert_sn+0x2fe>

    default:
        return ATCACERT_E_BAD_PARAMS;
   2195e:	2302      	movs	r3, #2
   21960:	e015      	b.n	2198e <atcacert_gen_cert_sn+0x322>
        ret = atcacert_get_signer_id(cert_def, cert, cert_size, &sn[1]);
        if (ret != ATCACERT_E_SUCCESS)
        {
            return ret;
        }
        break;
   21962:	46c0      	nop			; (mov r8, r8)
   21964:	e002      	b.n	2196c <atcacert_gen_cert_sn+0x300>
        }
        if (cert_def->sn_source == SNSRC_PUB_KEY_HASH)
        {
            sn[0] |= 0x40;      // Ensure the SN doesn't have any trimmable bytes
        }
        break;
   21966:	46c0      	nop			; (mov r8, r8)
   21968:	e000      	b.n	2196c <atcacert_gen_cert_sn+0x300>
        }
        if (cert_def->sn_source == SNSRC_DEVICE_SN_HASH)
        {
            sn[0] |= 0x40;      // Ensure the SN doesn't have any trimmable bytes
        }
        break;
   2196a:	46c0      	nop			; (mov r8, r8)

    default:
        return ATCACERT_E_BAD_PARAMS;
    }

    return atcacert_set_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_CERT_SN], cert, cert_size, sn, sn_size);
   2196c:	68fb      	ldr	r3, [r7, #12]
   2196e:	3335      	adds	r3, #53	; 0x35
   21970:	0019      	movs	r1, r3
   21972:	687c      	ldr	r4, [r7, #4]
   21974:	68ba      	ldr	r2, [r7, #8]
   21976:	68f8      	ldr	r0, [r7, #12]
   21978:	2394      	movs	r3, #148	; 0x94
   2197a:	18fb      	adds	r3, r7, r3
   2197c:	681b      	ldr	r3, [r3, #0]
   2197e:	9301      	str	r3, [sp, #4]
   21980:	232c      	movs	r3, #44	; 0x2c
   21982:	18fb      	adds	r3, r7, r3
   21984:	9300      	str	r3, [sp, #0]
   21986:	0023      	movs	r3, r4
   21988:	f000 fa7c 	bl	21e84 <atcacert_set_cert_element>
   2198c:	0003      	movs	r3, r0
}
   2198e:	0018      	movs	r0, r3
   21990:	46bd      	mov	sp, r7
   21992:	b027      	add	sp, #156	; 0x9c
   21994:	bd90      	pop	{r4, r7, pc}
   21996:	46c0      	nop			; (mov r8, r8)
   21998:	0002e66c 	.word	0x0002e66c

0002199c <atcacert_get_cert_sn>:
int atcacert_get_cert_sn(const atcacert_def_t* cert_def,
                         const uint8_t*        cert,
                         size_t                cert_size,
                         uint8_t*              cert_sn,
                         size_t*               cert_sn_size)
{
   2199c:	b590      	push	{r4, r7, lr}
   2199e:	b087      	sub	sp, #28
   219a0:	af02      	add	r7, sp, #8
   219a2:	60f8      	str	r0, [r7, #12]
   219a4:	60b9      	str	r1, [r7, #8]
   219a6:	607a      	str	r2, [r7, #4]
   219a8:	603b      	str	r3, [r7, #0]
    if (cert_def == NULL || cert == NULL || cert_sn == NULL || cert_sn_size == NULL)
   219aa:	68fb      	ldr	r3, [r7, #12]
   219ac:	2b00      	cmp	r3, #0
   219ae:	d008      	beq.n	219c2 <atcacert_get_cert_sn+0x26>
   219b0:	68bb      	ldr	r3, [r7, #8]
   219b2:	2b00      	cmp	r3, #0
   219b4:	d005      	beq.n	219c2 <atcacert_get_cert_sn+0x26>
   219b6:	683b      	ldr	r3, [r7, #0]
   219b8:	2b00      	cmp	r3, #0
   219ba:	d002      	beq.n	219c2 <atcacert_get_cert_sn+0x26>
   219bc:	6a3b      	ldr	r3, [r7, #32]
   219be:	2b00      	cmp	r3, #0
   219c0:	d101      	bne.n	219c6 <atcacert_get_cert_sn+0x2a>
    {
        return ATCACERT_E_BAD_PARAMS;
   219c2:	2302      	movs	r3, #2
   219c4:	e032      	b.n	21a2c <atcacert_get_cert_sn+0x90>
    }

    if (*cert_sn_size < cert_def->std_cert_elements[STDCERT_CERT_SN].count)
   219c6:	6a3b      	ldr	r3, [r7, #32]
   219c8:	681a      	ldr	r2, [r3, #0]
   219ca:	68fb      	ldr	r3, [r7, #12]
   219cc:	2137      	movs	r1, #55	; 0x37
   219ce:	5c59      	ldrb	r1, [r3, r1]
   219d0:	2038      	movs	r0, #56	; 0x38
   219d2:	5c1b      	ldrb	r3, [r3, r0]
   219d4:	021b      	lsls	r3, r3, #8
   219d6:	430b      	orrs	r3, r1
   219d8:	b29b      	uxth	r3, r3
   219da:	429a      	cmp	r2, r3
   219dc:	d20c      	bcs.n	219f8 <atcacert_get_cert_sn+0x5c>
    {
        *cert_sn_size = cert_def->std_cert_elements[STDCERT_CERT_SN].count;
   219de:	68fb      	ldr	r3, [r7, #12]
   219e0:	2237      	movs	r2, #55	; 0x37
   219e2:	5c9a      	ldrb	r2, [r3, r2]
   219e4:	2138      	movs	r1, #56	; 0x38
   219e6:	5c5b      	ldrb	r3, [r3, r1]
   219e8:	021b      	lsls	r3, r3, #8
   219ea:	4313      	orrs	r3, r2
   219ec:	b29b      	uxth	r3, r3
   219ee:	001a      	movs	r2, r3
   219f0:	6a3b      	ldr	r3, [r7, #32]
   219f2:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
   219f4:	2303      	movs	r3, #3
   219f6:	e019      	b.n	21a2c <atcacert_get_cert_sn+0x90>
    }

    *cert_sn_size = cert_def->std_cert_elements[STDCERT_CERT_SN].count;
   219f8:	68fb      	ldr	r3, [r7, #12]
   219fa:	2237      	movs	r2, #55	; 0x37
   219fc:	5c9a      	ldrb	r2, [r3, r2]
   219fe:	2138      	movs	r1, #56	; 0x38
   21a00:	5c5b      	ldrb	r3, [r3, r1]
   21a02:	021b      	lsls	r3, r3, #8
   21a04:	4313      	orrs	r3, r2
   21a06:	b29b      	uxth	r3, r3
   21a08:	001a      	movs	r2, r3
   21a0a:	6a3b      	ldr	r3, [r7, #32]
   21a0c:	601a      	str	r2, [r3, #0]

    return atcacert_get_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_CERT_SN], cert, cert_size, cert_sn, *cert_sn_size);
   21a0e:	68fb      	ldr	r3, [r7, #12]
   21a10:	3335      	adds	r3, #53	; 0x35
   21a12:	0019      	movs	r1, r3
   21a14:	6a3b      	ldr	r3, [r7, #32]
   21a16:	681b      	ldr	r3, [r3, #0]
   21a18:	687c      	ldr	r4, [r7, #4]
   21a1a:	68ba      	ldr	r2, [r7, #8]
   21a1c:	68f8      	ldr	r0, [r7, #12]
   21a1e:	9301      	str	r3, [sp, #4]
   21a20:	683b      	ldr	r3, [r7, #0]
   21a22:	9300      	str	r3, [sp, #0]
   21a24:	0023      	movs	r3, r4
   21a26:	f000 faa9 	bl	21f7c <atcacert_get_cert_element>
   21a2a:	0003      	movs	r3, r0
}
   21a2c:	0018      	movs	r0, r3
   21a2e:	46bd      	mov	sp, r7
   21a30:	b005      	add	sp, #20
   21a32:	bd90      	pop	{r4, r7, pc}

00021a34 <atcacert_set_auth_key_id>:

int atcacert_set_auth_key_id(const atcacert_def_t* cert_def,
                             uint8_t*              cert,
                             size_t                cert_size,
                             const uint8_t         auth_public_key[64])
{
   21a34:	b590      	push	{r4, r7, lr}
   21a36:	b08d      	sub	sp, #52	; 0x34
   21a38:	af02      	add	r7, sp, #8
   21a3a:	60f8      	str	r0, [r7, #12]
   21a3c:	60b9      	str	r1, [r7, #8]
   21a3e:	607a      	str	r2, [r7, #4]
   21a40:	603b      	str	r3, [r7, #0]
    int ret = 0;
   21a42:	2300      	movs	r3, #0
   21a44:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t key_id[20];

    if (cert_def == NULL || cert == NULL || auth_public_key == NULL)
   21a46:	68fb      	ldr	r3, [r7, #12]
   21a48:	2b00      	cmp	r3, #0
   21a4a:	d005      	beq.n	21a58 <atcacert_set_auth_key_id+0x24>
   21a4c:	68bb      	ldr	r3, [r7, #8]
   21a4e:	2b00      	cmp	r3, #0
   21a50:	d002      	beq.n	21a58 <atcacert_set_auth_key_id+0x24>
   21a52:	683b      	ldr	r3, [r7, #0]
   21a54:	2b00      	cmp	r3, #0
   21a56:	d101      	bne.n	21a5c <atcacert_set_auth_key_id+0x28>
    {
        return ATCACERT_E_BAD_PARAMS;
   21a58:	2302      	movs	r3, #2
   21a5a:	e023      	b.n	21aa4 <atcacert_set_auth_key_id+0x70>
    }

    ret = atcacert_get_key_id(auth_public_key, key_id);
   21a5c:	2310      	movs	r3, #16
   21a5e:	18fa      	adds	r2, r7, r3
   21a60:	683b      	ldr	r3, [r7, #0]
   21a62:	0011      	movs	r1, r2
   21a64:	0018      	movs	r0, r3
   21a66:	f000 faf1 	bl	2204c <atcacert_get_key_id>
   21a6a:	0003      	movs	r3, r0
   21a6c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
   21a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21a70:	2b00      	cmp	r3, #0
   21a72:	d001      	beq.n	21a78 <atcacert_set_auth_key_id+0x44>
    {
        return ret;
   21a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21a76:	e015      	b.n	21aa4 <atcacert_set_auth_key_id+0x70>
    }

    ret = atcacert_set_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_AUTH_KEY_ID], cert, cert_size, key_id, 20);
   21a78:	68fb      	ldr	r3, [r7, #12]
   21a7a:	3339      	adds	r3, #57	; 0x39
   21a7c:	0019      	movs	r1, r3
   21a7e:	687c      	ldr	r4, [r7, #4]
   21a80:	68ba      	ldr	r2, [r7, #8]
   21a82:	68f8      	ldr	r0, [r7, #12]
   21a84:	2314      	movs	r3, #20
   21a86:	9301      	str	r3, [sp, #4]
   21a88:	2310      	movs	r3, #16
   21a8a:	18fb      	adds	r3, r7, r3
   21a8c:	9300      	str	r3, [sp, #0]
   21a8e:	0023      	movs	r3, r4
   21a90:	f000 f9f8 	bl	21e84 <atcacert_set_cert_element>
   21a94:	0003      	movs	r3, r0
   21a96:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
   21a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21a9a:	2b00      	cmp	r3, #0
   21a9c:	d001      	beq.n	21aa2 <atcacert_set_auth_key_id+0x6e>
    {
        return ret;
   21a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21aa0:	e000      	b.n	21aa4 <atcacert_set_auth_key_id+0x70>
    }

    return ATCACERT_E_SUCCESS;
   21aa2:	2300      	movs	r3, #0
}
   21aa4:	0018      	movs	r0, r3
   21aa6:	46bd      	mov	sp, r7
   21aa8:	b00b      	add	sp, #44	; 0x2c
   21aaa:	bd90      	pop	{r4, r7, pc}

00021aac <atcacert_set_comp_cert>:
int atcacert_set_comp_cert(const atcacert_def_t* cert_def,
                           uint8_t*              cert,
                           size_t*               cert_size,
                           size_t                max_cert_size,
                           const uint8_t         comp_cert[72])
{
   21aac:	b590      	push	{r4, r7, lr}
   21aae:	b097      	sub	sp, #92	; 0x5c
   21ab0:	af02      	add	r7, sp, #8
   21ab2:	60f8      	str	r0, [r7, #12]
   21ab4:	60b9      	str	r1, [r7, #8]
   21ab6:	607a      	str	r2, [r7, #4]
   21ab8:	603b      	str	r3, [r7, #0]
    int ret = 0;
   21aba:	2300      	movs	r3, #0
   21abc:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint8_t sn_source;
    uint8_t format;
    atcacert_tm_utc_t issue_date;
    atcacert_tm_utc_t expire_date;

    if (cert_def == NULL || cert == NULL || cert_size == NULL || comp_cert == NULL)
   21abe:	68fb      	ldr	r3, [r7, #12]
   21ac0:	2b00      	cmp	r3, #0
   21ac2:	d008      	beq.n	21ad6 <atcacert_set_comp_cert+0x2a>
   21ac4:	68bb      	ldr	r3, [r7, #8]
   21ac6:	2b00      	cmp	r3, #0
   21ac8:	d005      	beq.n	21ad6 <atcacert_set_comp_cert+0x2a>
   21aca:	687b      	ldr	r3, [r7, #4]
   21acc:	2b00      	cmp	r3, #0
   21ace:	d002      	beq.n	21ad6 <atcacert_set_comp_cert+0x2a>
   21ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21ad2:	2b00      	cmp	r3, #0
   21ad4:	d101      	bne.n	21ada <atcacert_set_comp_cert+0x2e>
    {
        return ATCACERT_E_BAD_PARAMS;
   21ad6:	2302      	movs	r3, #2
   21ad8:	e09e      	b.n	21c18 <atcacert_set_comp_cert+0x16c>
    }

    format = comp_cert[70] & 0x0F;
   21ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21adc:	3346      	adds	r3, #70	; 0x46
   21ade:	781a      	ldrb	r2, [r3, #0]
   21ae0:	234b      	movs	r3, #75	; 0x4b
   21ae2:	18fb      	adds	r3, r7, r3
   21ae4:	210f      	movs	r1, #15
   21ae6:	400a      	ands	r2, r1
   21ae8:	701a      	strb	r2, [r3, #0]
    if (format != 0)
   21aea:	234b      	movs	r3, #75	; 0x4b
   21aec:	18fb      	adds	r3, r7, r3
   21aee:	781b      	ldrb	r3, [r3, #0]
   21af0:	2b00      	cmp	r3, #0
   21af2:	d001      	beq.n	21af8 <atcacert_set_comp_cert+0x4c>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unknown format
   21af4:	2304      	movs	r3, #4
   21af6:	e08f      	b.n	21c18 <atcacert_set_comp_cert+0x16c>

    }
    memcpy(enc_dates, &comp_cert[64], 3);
   21af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21afa:	3340      	adds	r3, #64	; 0x40
   21afc:	2244      	movs	r2, #68	; 0x44
   21afe:	18ba      	adds	r2, r7, r2
   21b00:	0010      	movs	r0, r2
   21b02:	0019      	movs	r1, r3
   21b04:	2303      	movs	r3, #3
   21b06:	001a      	movs	r2, r3
   21b08:	f003 fdf1 	bl	256ee <memcpy>
    memcpy(signer_id, &comp_cert[67], 2);
   21b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21b0e:	3343      	adds	r3, #67	; 0x43
   21b10:	2240      	movs	r2, #64	; 0x40
   21b12:	18ba      	adds	r2, r7, r2
   21b14:	0010      	movs	r0, r2
   21b16:	0019      	movs	r1, r3
   21b18:	2302      	movs	r3, #2
   21b1a:	001a      	movs	r2, r3
   21b1c:	f003 fde7 	bl	256ee <memcpy>
    template_id = (comp_cert[69] >> 4) & 0x0F;
   21b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21b22:	3345      	adds	r3, #69	; 0x45
   21b24:	781a      	ldrb	r2, [r3, #0]
   21b26:	234a      	movs	r3, #74	; 0x4a
   21b28:	18fb      	adds	r3, r7, r3
   21b2a:	0912      	lsrs	r2, r2, #4
   21b2c:	701a      	strb	r2, [r3, #0]
    chain_id = comp_cert[69] & 0x0F;
   21b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21b30:	3345      	adds	r3, #69	; 0x45
   21b32:	781a      	ldrb	r2, [r3, #0]
   21b34:	2349      	movs	r3, #73	; 0x49
   21b36:	18fb      	adds	r3, r7, r3
   21b38:	210f      	movs	r1, #15
   21b3a:	400a      	ands	r2, r1
   21b3c:	701a      	strb	r2, [r3, #0]
    sn_source = (comp_cert[70] >> 4) & 0x0F;
   21b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21b40:	3346      	adds	r3, #70	; 0x46
   21b42:	781a      	ldrb	r2, [r3, #0]
   21b44:	2348      	movs	r3, #72	; 0x48
   21b46:	18fb      	adds	r3, r7, r3
   21b48:	0912      	lsrs	r2, r2, #4
   21b4a:	701a      	strb	r2, [r3, #0]

    if (template_id != cert_def->template_id || chain_id != cert_def->chain_id || sn_source != cert_def->sn_source)
   21b4c:	68fb      	ldr	r3, [r7, #12]
   21b4e:	785b      	ldrb	r3, [r3, #1]
   21b50:	224a      	movs	r2, #74	; 0x4a
   21b52:	18ba      	adds	r2, r7, r2
   21b54:	7812      	ldrb	r2, [r2, #0]
   21b56:	429a      	cmp	r2, r3
   21b58:	d10d      	bne.n	21b76 <atcacert_set_comp_cert+0xca>
   21b5a:	68fb      	ldr	r3, [r7, #12]
   21b5c:	789b      	ldrb	r3, [r3, #2]
   21b5e:	2249      	movs	r2, #73	; 0x49
   21b60:	18ba      	adds	r2, r7, r2
   21b62:	7812      	ldrb	r2, [r2, #0]
   21b64:	429a      	cmp	r2, r3
   21b66:	d106      	bne.n	21b76 <atcacert_set_comp_cert+0xca>
   21b68:	68fb      	ldr	r3, [r7, #12]
   21b6a:	791b      	ldrb	r3, [r3, #4]
   21b6c:	2248      	movs	r2, #72	; 0x48
   21b6e:	18ba      	adds	r2, r7, r2
   21b70:	7812      	ldrb	r2, [r2, #0]
   21b72:	429a      	cmp	r2, r3
   21b74:	d001      	beq.n	21b7a <atcacert_set_comp_cert+0xce>
    {
        return ATCACERT_E_WRONG_CERT_DEF;
   21b76:	230b      	movs	r3, #11
   21b78:	e04e      	b.n	21c18 <atcacert_set_comp_cert+0x16c>
    }

    ret = atcacert_set_signature(
   21b7a:	683c      	ldr	r4, [r7, #0]
   21b7c:	687a      	ldr	r2, [r7, #4]
   21b7e:	68b9      	ldr	r1, [r7, #8]
   21b80:	68f8      	ldr	r0, [r7, #12]
   21b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21b84:	9300      	str	r3, [sp, #0]
   21b86:	0023      	movs	r3, r4
   21b88:	f7ff f914 	bl	20db4 <atcacert_set_signature>
   21b8c:	0003      	movs	r3, r0
   21b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
        cert_def,
        cert,
        cert_size,
        max_cert_size,
        &comp_cert[0]);
    if (ret != ATCACERT_E_SUCCESS)
   21b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21b92:	2b00      	cmp	r3, #0
   21b94:	d001      	beq.n	21b9a <atcacert_set_comp_cert+0xee>
    {
        return ret;
   21b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21b98:	e03e      	b.n	21c18 <atcacert_set_comp_cert+0x16c>
    }

    ret = atcacert_date_dec_compcert(enc_dates, cert_def->expire_date_format, &issue_date, &expire_date);
   21b9a:	68fb      	ldr	r3, [r7, #12]
   21b9c:	7b59      	ldrb	r1, [r3, #13]
   21b9e:	2310      	movs	r3, #16
   21ba0:	18fb      	adds	r3, r7, r3
   21ba2:	2228      	movs	r2, #40	; 0x28
   21ba4:	18ba      	adds	r2, r7, r2
   21ba6:	2044      	movs	r0, #68	; 0x44
   21ba8:	1838      	adds	r0, r7, r0
   21baa:	f7fd fd41 	bl	1f630 <atcacert_date_dec_compcert>
   21bae:	0003      	movs	r3, r0
   21bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (ret != ATCACERT_E_SUCCESS)
   21bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21bb4:	2b00      	cmp	r3, #0
   21bb6:	d001      	beq.n	21bbc <atcacert_set_comp_cert+0x110>
    {
        return ret;
   21bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21bba:	e02d      	b.n	21c18 <atcacert_set_comp_cert+0x16c>
    }

    ret = atcacert_set_issue_date(cert_def, cert, *cert_size, &issue_date);
   21bbc:	687b      	ldr	r3, [r7, #4]
   21bbe:	681a      	ldr	r2, [r3, #0]
   21bc0:	2328      	movs	r3, #40	; 0x28
   21bc2:	18fb      	adds	r3, r7, r3
   21bc4:	68b9      	ldr	r1, [r7, #8]
   21bc6:	68f8      	ldr	r0, [r7, #12]
   21bc8:	f7ff f9fe 	bl	20fc8 <atcacert_set_issue_date>
   21bcc:	0003      	movs	r3, r0
   21bce:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (ret != ATCACERT_E_SUCCESS)
   21bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21bd2:	2b00      	cmp	r3, #0
   21bd4:	d001      	beq.n	21bda <atcacert_set_comp_cert+0x12e>
    {
        return ret;
   21bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21bd8:	e01e      	b.n	21c18 <atcacert_set_comp_cert+0x16c>
    }

    ret = atcacert_set_expire_date(cert_def, cert, *cert_size, &expire_date);
   21bda:	687b      	ldr	r3, [r7, #4]
   21bdc:	681a      	ldr	r2, [r3, #0]
   21bde:	2310      	movs	r3, #16
   21be0:	18fb      	adds	r3, r7, r3
   21be2:	68b9      	ldr	r1, [r7, #8]
   21be4:	68f8      	ldr	r0, [r7, #12]
   21be6:	f7ff fa8f 	bl	21108 <atcacert_set_expire_date>
   21bea:	0003      	movs	r3, r0
   21bec:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (ret != ATCACERT_E_SUCCESS)
   21bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21bf0:	2b00      	cmp	r3, #0
   21bf2:	d001      	beq.n	21bf8 <atcacert_set_comp_cert+0x14c>
    {
        return ret;
   21bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21bf6:	e00f      	b.n	21c18 <atcacert_set_comp_cert+0x16c>
    }

    ret = atcacert_set_signer_id(cert_def, cert, *cert_size, signer_id);
   21bf8:	687b      	ldr	r3, [r7, #4]
   21bfa:	681a      	ldr	r2, [r3, #0]
   21bfc:	2340      	movs	r3, #64	; 0x40
   21bfe:	18fb      	adds	r3, r7, r3
   21c00:	68b9      	ldr	r1, [r7, #8]
   21c02:	68f8      	ldr	r0, [r7, #12]
   21c04:	f7ff fb14 	bl	21230 <atcacert_set_signer_id>
   21c08:	0003      	movs	r3, r0
   21c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (ret != ATCACERT_E_SUCCESS)
   21c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21c0e:	2b00      	cmp	r3, #0
   21c10:	d001      	beq.n	21c16 <atcacert_set_comp_cert+0x16a>
    {
        return ret;
   21c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21c14:	e000      	b.n	21c18 <atcacert_set_comp_cert+0x16c>
    }

    return ATCACERT_E_SUCCESS;
   21c16:	2300      	movs	r3, #0
}
   21c18:	0018      	movs	r0, r3
   21c1a:	46bd      	mov	sp, r7
   21c1c:	b015      	add	sp, #84	; 0x54
   21c1e:	bd90      	pop	{r4, r7, pc}

00021c20 <atcacert_get_comp_cert>:

int atcacert_get_comp_cert(const atcacert_def_t* cert_def,
                           const uint8_t*        cert,
                           size_t                cert_size,
                           uint8_t               comp_cert[72])
{
   21c20:	b580      	push	{r7, lr}
   21c22:	b08c      	sub	sp, #48	; 0x30
   21c24:	af00      	add	r7, sp, #0
   21c26:	60f8      	str	r0, [r7, #12]
   21c28:	60b9      	str	r1, [r7, #8]
   21c2a:	607a      	str	r2, [r7, #4]
   21c2c:	603b      	str	r3, [r7, #0]
    int ret = 0;
   21c2e:	2300      	movs	r3, #0
   21c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    atcacert_tm_utc_t issue_date;

    if (cert_def == NULL || cert == NULL || comp_cert == NULL)
   21c32:	68fb      	ldr	r3, [r7, #12]
   21c34:	2b00      	cmp	r3, #0
   21c36:	d005      	beq.n	21c44 <atcacert_get_comp_cert+0x24>
   21c38:	68bb      	ldr	r3, [r7, #8]
   21c3a:	2b00      	cmp	r3, #0
   21c3c:	d002      	beq.n	21c44 <atcacert_get_comp_cert+0x24>
   21c3e:	683b      	ldr	r3, [r7, #0]
   21c40:	2b00      	cmp	r3, #0
   21c42:	d101      	bne.n	21c48 <atcacert_get_comp_cert+0x28>
    {
        return ATCACERT_E_BAD_PARAMS;
   21c44:	2302      	movs	r3, #2
   21c46:	e07c      	b.n	21d42 <atcacert_get_comp_cert+0x122>
    }

    ret = atcacert_get_signature(cert_def, cert, cert_size, &comp_cert[0]);
   21c48:	683b      	ldr	r3, [r7, #0]
   21c4a:	687a      	ldr	r2, [r7, #4]
   21c4c:	68b9      	ldr	r1, [r7, #8]
   21c4e:	68f8      	ldr	r0, [r7, #12]
   21c50:	f7ff f95a 	bl	20f08 <atcacert_get_signature>
   21c54:	0003      	movs	r3, r0
   21c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != ATCACERT_E_SUCCESS)
   21c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21c5a:	2b00      	cmp	r3, #0
   21c5c:	d001      	beq.n	21c62 <atcacert_get_comp_cert+0x42>
    {
        return ret;
   21c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21c60:	e06f      	b.n	21d42 <atcacert_get_comp_cert+0x122>
    }

    ret = atcacert_get_issue_date(cert_def, cert, cert_size, &issue_date);
   21c62:	2314      	movs	r3, #20
   21c64:	18fb      	adds	r3, r7, r3
   21c66:	687a      	ldr	r2, [r7, #4]
   21c68:	68b9      	ldr	r1, [r7, #8]
   21c6a:	68f8      	ldr	r0, [r7, #12]
   21c6c:	f7ff f9f8 	bl	21060 <atcacert_get_issue_date>
   21c70:	0003      	movs	r3, r0
   21c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret == ATCACERT_E_ELEM_MISSING)
   21c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21c76:	2b08      	cmp	r3, #8
   21c78:	d118      	bne.n	21cac <atcacert_get_comp_cert+0x8c>
    {
        // No issue date in cert, just use lowest possible date
        issue_date.tm_year = 2000 - 1900;
   21c7a:	2314      	movs	r3, #20
   21c7c:	18fb      	adds	r3, r7, r3
   21c7e:	2264      	movs	r2, #100	; 0x64
   21c80:	615a      	str	r2, [r3, #20]
        issue_date.tm_mon  = 1 - 1;
   21c82:	2314      	movs	r3, #20
   21c84:	18fb      	adds	r3, r7, r3
   21c86:	2200      	movs	r2, #0
   21c88:	611a      	str	r2, [r3, #16]
        issue_date.tm_mday = 1;
   21c8a:	2314      	movs	r3, #20
   21c8c:	18fb      	adds	r3, r7, r3
   21c8e:	2201      	movs	r2, #1
   21c90:	60da      	str	r2, [r3, #12]
        issue_date.tm_hour = 0;
   21c92:	2314      	movs	r3, #20
   21c94:	18fb      	adds	r3, r7, r3
   21c96:	2200      	movs	r2, #0
   21c98:	609a      	str	r2, [r3, #8]
        issue_date.tm_min  = 0;
   21c9a:	2314      	movs	r3, #20
   21c9c:	18fb      	adds	r3, r7, r3
   21c9e:	2200      	movs	r2, #0
   21ca0:	605a      	str	r2, [r3, #4]
        issue_date.tm_sec  = 0;
   21ca2:	2314      	movs	r3, #20
   21ca4:	18fb      	adds	r3, r7, r3
   21ca6:	2200      	movs	r2, #0
   21ca8:	601a      	str	r2, [r3, #0]
   21caa:	e004      	b.n	21cb6 <atcacert_get_comp_cert+0x96>
    }
    else if (ret != ATCACERT_E_SUCCESS)
   21cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21cae:	2b00      	cmp	r3, #0
   21cb0:	d001      	beq.n	21cb6 <atcacert_get_comp_cert+0x96>
    {
        return ret;
   21cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21cb4:	e045      	b.n	21d42 <atcacert_get_comp_cert+0x122>
    }
    ret = atcacert_date_enc_compcert(&issue_date, cert_def->expire_years, &comp_cert[64]);
   21cb6:	68fb      	ldr	r3, [r7, #12]
   21cb8:	7c99      	ldrb	r1, [r3, #18]
   21cba:	683b      	ldr	r3, [r7, #0]
   21cbc:	3340      	adds	r3, #64	; 0x40
   21cbe:	001a      	movs	r2, r3
   21cc0:	2314      	movs	r3, #20
   21cc2:	18fb      	adds	r3, r7, r3
   21cc4:	0018      	movs	r0, r3
   21cc6:	f7fd fbd1 	bl	1f46c <atcacert_date_enc_compcert>
   21cca:	0003      	movs	r3, r0
   21ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret != ATCACERT_E_SUCCESS)
   21cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21cd0:	2b00      	cmp	r3, #0
   21cd2:	d001      	beq.n	21cd8 <atcacert_get_comp_cert+0xb8>
    {
        return ret;
   21cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21cd6:	e034      	b.n	21d42 <atcacert_get_comp_cert+0x122>
    }

    ret = atcacert_get_signer_id(cert_def, cert, cert_size, &comp_cert[67]);
   21cd8:	683b      	ldr	r3, [r7, #0]
   21cda:	3343      	adds	r3, #67	; 0x43
   21cdc:	687a      	ldr	r2, [r7, #4]
   21cde:	68b9      	ldr	r1, [r7, #8]
   21ce0:	68f8      	ldr	r0, [r7, #12]
   21ce2:	f7ff fb6f 	bl	213c4 <atcacert_get_signer_id>
   21ce6:	0003      	movs	r3, r0
   21ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ret == ATCACERT_E_ELEM_MISSING)
   21cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21cec:	2b08      	cmp	r3, #8
   21cee:	d107      	bne.n	21d00 <atcacert_get_comp_cert+0xe0>
    {
        memset(&comp_cert[67], 0, 2);  // No signer ID in cert, use 0
   21cf0:	683b      	ldr	r3, [r7, #0]
   21cf2:	3343      	adds	r3, #67	; 0x43
   21cf4:	2202      	movs	r2, #2
   21cf6:	2100      	movs	r1, #0
   21cf8:	0018      	movs	r0, r3
   21cfa:	f003 fd16 	bl	2572a <memset>
   21cfe:	e004      	b.n	21d0a <atcacert_get_comp_cert+0xea>
    }
    else if (ret != ATCACERT_E_SUCCESS)
   21d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21d02:	2b00      	cmp	r3, #0
   21d04:	d001      	beq.n	21d0a <atcacert_get_comp_cert+0xea>
    {
        return ret;
   21d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21d08:	e01b      	b.n	21d42 <atcacert_get_comp_cert+0x122>
    }

    comp_cert[69] = ((cert_def->template_id & 0x0F) << 4) | (cert_def->chain_id & 0x0F);
   21d0a:	683b      	ldr	r3, [r7, #0]
   21d0c:	3345      	adds	r3, #69	; 0x45
   21d0e:	68fa      	ldr	r2, [r7, #12]
   21d10:	7852      	ldrb	r2, [r2, #1]
   21d12:	0112      	lsls	r2, r2, #4
   21d14:	b251      	sxtb	r1, r2
   21d16:	68fa      	ldr	r2, [r7, #12]
   21d18:	7892      	ldrb	r2, [r2, #2]
   21d1a:	b252      	sxtb	r2, r2
   21d1c:	200f      	movs	r0, #15
   21d1e:	4002      	ands	r2, r0
   21d20:	b252      	sxtb	r2, r2
   21d22:	430a      	orrs	r2, r1
   21d24:	b252      	sxtb	r2, r2
   21d26:	b2d2      	uxtb	r2, r2
   21d28:	701a      	strb	r2, [r3, #0]
    comp_cert[70] = ((uint8_t)(cert_def->sn_source & 0x0F) << 4) | 0;
   21d2a:	683b      	ldr	r3, [r7, #0]
   21d2c:	3346      	adds	r3, #70	; 0x46
   21d2e:	68fa      	ldr	r2, [r7, #12]
   21d30:	7912      	ldrb	r2, [r2, #4]
   21d32:	0112      	lsls	r2, r2, #4
   21d34:	b2d2      	uxtb	r2, r2
   21d36:	701a      	strb	r2, [r3, #0]
    comp_cert[71] = 0;
   21d38:	683b      	ldr	r3, [r7, #0]
   21d3a:	3347      	adds	r3, #71	; 0x47
   21d3c:	2200      	movs	r2, #0
   21d3e:	701a      	strb	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
   21d40:	2300      	movs	r3, #0
}
   21d42:	0018      	movs	r0, r3
   21d44:	46bd      	mov	sp, r7
   21d46:	b00c      	add	sp, #48	; 0x30
   21d48:	bd80      	pop	{r7, pc}
   21d4a:	46c0      	nop			; (mov r8, r8)

00021d4c <atcacert_get_tbs>:
int atcacert_get_tbs(const atcacert_def_t* cert_def,
                     const uint8_t*        cert,
                     size_t                cert_size,
                     const uint8_t**       tbs,
                     size_t*               tbs_size)
{
   21d4c:	b580      	push	{r7, lr}
   21d4e:	b086      	sub	sp, #24
   21d50:	af00      	add	r7, sp, #0
   21d52:	60f8      	str	r0, [r7, #12]
   21d54:	60b9      	str	r1, [r7, #8]
   21d56:	607a      	str	r2, [r7, #4]
   21d58:	603b      	str	r3, [r7, #0]
    int eff_offset = 0;
   21d5a:	2300      	movs	r3, #0
   21d5c:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert == NULL || tbs == NULL || tbs_size == NULL)
   21d5e:	68fb      	ldr	r3, [r7, #12]
   21d60:	2b00      	cmp	r3, #0
   21d62:	d008      	beq.n	21d76 <atcacert_get_tbs+0x2a>
   21d64:	68bb      	ldr	r3, [r7, #8]
   21d66:	2b00      	cmp	r3, #0
   21d68:	d005      	beq.n	21d76 <atcacert_get_tbs+0x2a>
   21d6a:	683b      	ldr	r3, [r7, #0]
   21d6c:	2b00      	cmp	r3, #0
   21d6e:	d002      	beq.n	21d76 <atcacert_get_tbs+0x2a>
   21d70:	6a3b      	ldr	r3, [r7, #32]
   21d72:	2b00      	cmp	r3, #0
   21d74:	d101      	bne.n	21d7a <atcacert_get_tbs+0x2e>
    {
        return ATCACERT_E_BAD_PARAMS;
   21d76:	2302      	movs	r3, #2
   21d78:	e043      	b.n	21e02 <atcacert_get_tbs+0xb6>
    }

    eff_offset = get_effective_offset(cert_def, cert, cert_def->tbs_cert_loc.offset + cert_def->tbs_cert_loc.count);
   21d7a:	68fb      	ldr	r3, [r7, #12]
   21d7c:	7b9a      	ldrb	r2, [r3, #14]
   21d7e:	7bdb      	ldrb	r3, [r3, #15]
   21d80:	021b      	lsls	r3, r3, #8
   21d82:	4313      	orrs	r3, r2
   21d84:	b29b      	uxth	r3, r3
   21d86:	0019      	movs	r1, r3
   21d88:	68fb      	ldr	r3, [r7, #12]
   21d8a:	7c1a      	ldrb	r2, [r3, #16]
   21d8c:	7c5b      	ldrb	r3, [r3, #17]
   21d8e:	021b      	lsls	r3, r3, #8
   21d90:	4313      	orrs	r3, r2
   21d92:	b29b      	uxth	r3, r3
   21d94:	18cb      	adds	r3, r1, r3
   21d96:	001a      	movs	r2, r3
   21d98:	68b9      	ldr	r1, [r7, #8]
   21d9a:	68fb      	ldr	r3, [r7, #12]
   21d9c:	0018      	movs	r0, r3
   21d9e:	f7fd ffbd 	bl	1fd1c <get_effective_offset>
   21da2:	0003      	movs	r3, r0
   21da4:	617b      	str	r3, [r7, #20]

    if ((size_t)(cert_def->tbs_cert_loc.offset + cert_def->tbs_cert_loc.count + eff_offset) > cert_size)
   21da6:	68fb      	ldr	r3, [r7, #12]
   21da8:	7b9a      	ldrb	r2, [r3, #14]
   21daa:	7bdb      	ldrb	r3, [r3, #15]
   21dac:	021b      	lsls	r3, r3, #8
   21dae:	4313      	orrs	r3, r2
   21db0:	b29b      	uxth	r3, r3
   21db2:	0019      	movs	r1, r3
   21db4:	68fb      	ldr	r3, [r7, #12]
   21db6:	7c1a      	ldrb	r2, [r3, #16]
   21db8:	7c5b      	ldrb	r3, [r3, #17]
   21dba:	021b      	lsls	r3, r3, #8
   21dbc:	4313      	orrs	r3, r2
   21dbe:	b29b      	uxth	r3, r3
   21dc0:	18ca      	adds	r2, r1, r3
   21dc2:	697b      	ldr	r3, [r7, #20]
   21dc4:	18d3      	adds	r3, r2, r3
   21dc6:	001a      	movs	r2, r3
   21dc8:	687b      	ldr	r3, [r7, #4]
   21dca:	429a      	cmp	r2, r3
   21dcc:	d901      	bls.n	21dd2 <atcacert_get_tbs+0x86>
    {
        return ATCACERT_E_BAD_CERT;
   21dce:	230a      	movs	r3, #10
   21dd0:	e017      	b.n	21e02 <atcacert_get_tbs+0xb6>
    }

    *tbs      = &cert[cert_def->tbs_cert_loc.offset];
   21dd2:	68fb      	ldr	r3, [r7, #12]
   21dd4:	7b9a      	ldrb	r2, [r3, #14]
   21dd6:	7bdb      	ldrb	r3, [r3, #15]
   21dd8:	021b      	lsls	r3, r3, #8
   21dda:	4313      	orrs	r3, r2
   21ddc:	b29b      	uxth	r3, r3
   21dde:	001a      	movs	r2, r3
   21de0:	68bb      	ldr	r3, [r7, #8]
   21de2:	189a      	adds	r2, r3, r2
   21de4:	683b      	ldr	r3, [r7, #0]
   21de6:	601a      	str	r2, [r3, #0]
    *tbs_size = cert_def->tbs_cert_loc.count + eff_offset;
   21de8:	68fb      	ldr	r3, [r7, #12]
   21dea:	7c1a      	ldrb	r2, [r3, #16]
   21dec:	7c5b      	ldrb	r3, [r3, #17]
   21dee:	021b      	lsls	r3, r3, #8
   21df0:	4313      	orrs	r3, r2
   21df2:	b29b      	uxth	r3, r3
   21df4:	001a      	movs	r2, r3
   21df6:	697b      	ldr	r3, [r7, #20]
   21df8:	18d3      	adds	r3, r2, r3
   21dfa:	001a      	movs	r2, r3
   21dfc:	6a3b      	ldr	r3, [r7, #32]
   21dfe:	601a      	str	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
   21e00:	2300      	movs	r3, #0
}
   21e02:	0018      	movs	r0, r3
   21e04:	46bd      	mov	sp, r7
   21e06:	b006      	add	sp, #24
   21e08:	bd80      	pop	{r7, pc}
   21e0a:	46c0      	nop			; (mov r8, r8)

00021e0c <atcacert_get_tbs_digest>:

int atcacert_get_tbs_digest(const atcacert_def_t* cert_def,
                            const uint8_t*        cert,
                            size_t                cert_size,
                            uint8_t               tbs_digest[32])
{
   21e0c:	b590      	push	{r4, r7, lr}
   21e0e:	b08b      	sub	sp, #44	; 0x2c
   21e10:	af02      	add	r7, sp, #8
   21e12:	60f8      	str	r0, [r7, #12]
   21e14:	60b9      	str	r1, [r7, #8]
   21e16:	607a      	str	r2, [r7, #4]
   21e18:	603b      	str	r3, [r7, #0]
    int ret = ATCACERT_E_SUCCESS;
   21e1a:	2300      	movs	r3, #0
   21e1c:	61fb      	str	r3, [r7, #28]
    const uint8_t* tbs = NULL;
   21e1e:	2300      	movs	r3, #0
   21e20:	61bb      	str	r3, [r7, #24]
    size_t tbs_size = 0;
   21e22:	2300      	movs	r3, #0
   21e24:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert == NULL || tbs_digest == NULL)
   21e26:	68fb      	ldr	r3, [r7, #12]
   21e28:	2b00      	cmp	r3, #0
   21e2a:	d005      	beq.n	21e38 <atcacert_get_tbs_digest+0x2c>
   21e2c:	68bb      	ldr	r3, [r7, #8]
   21e2e:	2b00      	cmp	r3, #0
   21e30:	d002      	beq.n	21e38 <atcacert_get_tbs_digest+0x2c>
   21e32:	683b      	ldr	r3, [r7, #0]
   21e34:	2b00      	cmp	r3, #0
   21e36:	d101      	bne.n	21e3c <atcacert_get_tbs_digest+0x30>
    {
        return ATCACERT_E_BAD_PARAMS;
   21e38:	2302      	movs	r3, #2
   21e3a:	e01f      	b.n	21e7c <atcacert_get_tbs_digest+0x70>
    }

    ret = atcacert_get_tbs(cert_def, cert, cert_size, &tbs, &tbs_size);
   21e3c:	2318      	movs	r3, #24
   21e3e:	18fc      	adds	r4, r7, r3
   21e40:	687a      	ldr	r2, [r7, #4]
   21e42:	68b9      	ldr	r1, [r7, #8]
   21e44:	68f8      	ldr	r0, [r7, #12]
   21e46:	2314      	movs	r3, #20
   21e48:	18fb      	adds	r3, r7, r3
   21e4a:	9300      	str	r3, [sp, #0]
   21e4c:	0023      	movs	r3, r4
   21e4e:	f7ff ff7d 	bl	21d4c <atcacert_get_tbs>
   21e52:	0003      	movs	r3, r0
   21e54:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
   21e56:	69fb      	ldr	r3, [r7, #28]
   21e58:	2b00      	cmp	r3, #0
   21e5a:	d001      	beq.n	21e60 <atcacert_get_tbs_digest+0x54>
    {
        return ret;
   21e5c:	69fb      	ldr	r3, [r7, #28]
   21e5e:	e00d      	b.n	21e7c <atcacert_get_tbs_digest+0x70>
    }

    ret = atcac_sw_sha2_256(tbs, tbs_size, tbs_digest);
   21e60:	69bb      	ldr	r3, [r7, #24]
   21e62:	6979      	ldr	r1, [r7, #20]
   21e64:	683a      	ldr	r2, [r7, #0]
   21e66:	0018      	movs	r0, r3
   21e68:	f7fb fabe 	bl	1d3e8 <atcac_sw_sha2_256>
   21e6c:	0003      	movs	r3, r0
   21e6e:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
   21e70:	69fb      	ldr	r3, [r7, #28]
   21e72:	2b00      	cmp	r3, #0
   21e74:	d001      	beq.n	21e7a <atcacert_get_tbs_digest+0x6e>
    {
        return ret;
   21e76:	69fb      	ldr	r3, [r7, #28]
   21e78:	e000      	b.n	21e7c <atcacert_get_tbs_digest+0x70>
    }

    return ret;
   21e7a:	69fb      	ldr	r3, [r7, #28]
}
   21e7c:	0018      	movs	r0, r3
   21e7e:	46bd      	mov	sp, r7
   21e80:	b009      	add	sp, #36	; 0x24
   21e82:	bd90      	pop	{r4, r7, pc}

00021e84 <atcacert_set_cert_element>:
                              const atcacert_cert_loc_t* cert_loc,
                              uint8_t*                   cert,
                              size_t                     cert_size,
                              const uint8_t*             data,
                              size_t                     data_size)
{
   21e84:	b580      	push	{r7, lr}
   21e86:	b086      	sub	sp, #24
   21e88:	af00      	add	r7, sp, #0
   21e8a:	60f8      	str	r0, [r7, #12]
   21e8c:	60b9      	str	r1, [r7, #8]
   21e8e:	607a      	str	r2, [r7, #4]
   21e90:	603b      	str	r3, [r7, #0]
    int eff_offset = 0;
   21e92:	2300      	movs	r3, #0
   21e94:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert_loc == NULL || cert == NULL)
   21e96:	68fb      	ldr	r3, [r7, #12]
   21e98:	2b00      	cmp	r3, #0
   21e9a:	d005      	beq.n	21ea8 <atcacert_set_cert_element+0x24>
   21e9c:	68bb      	ldr	r3, [r7, #8]
   21e9e:	2b00      	cmp	r3, #0
   21ea0:	d002      	beq.n	21ea8 <atcacert_set_cert_element+0x24>
   21ea2:	687b      	ldr	r3, [r7, #4]
   21ea4:	2b00      	cmp	r3, #0
   21ea6:	d101      	bne.n	21eac <atcacert_set_cert_element+0x28>
    {
        return ATCACERT_E_BAD_PARAMS;
   21ea8:	2302      	movs	r3, #2
   21eaa:	e062      	b.n	21f72 <atcacert_set_cert_element+0xee>
    }

    if (cert_loc->count == 0)
   21eac:	68bb      	ldr	r3, [r7, #8]
   21eae:	789a      	ldrb	r2, [r3, #2]
   21eb0:	78db      	ldrb	r3, [r3, #3]
   21eb2:	021b      	lsls	r3, r3, #8
   21eb4:	4313      	orrs	r3, r2
   21eb6:	b29b      	uxth	r3, r3
   21eb8:	2b00      	cmp	r3, #0
   21eba:	d101      	bne.n	21ec0 <atcacert_set_cert_element+0x3c>
    {
        return ATCACERT_E_SUCCESS;  // This element doesn't exist in the cert, but we treat this as a success
   21ebc:	2300      	movs	r3, #0
   21ebe:	e058      	b.n	21f72 <atcacert_set_cert_element+0xee>

    }
    if (data == NULL)
   21ec0:	6a3b      	ldr	r3, [r7, #32]
   21ec2:	2b00      	cmp	r3, #0
   21ec4:	d101      	bne.n	21eca <atcacert_set_cert_element+0x46>
    {
        return ATCACERT_E_BAD_PARAMS;
   21ec6:	2302      	movs	r3, #2
   21ec8:	e053      	b.n	21f72 <atcacert_set_cert_element+0xee>
    }

    // Don't validate for dynamic cert SN
    if (!(cert_def->type == CERTTYPE_X509 &&
   21eca:	68fb      	ldr	r3, [r7, #12]
   21ecc:	781b      	ldrb	r3, [r3, #0]
   21ece:	2b00      	cmp	r3, #0
   21ed0:	d113      	bne.n	21efa <atcacert_set_cert_element+0x76>
          cert_def->sn_source == SNSRC_STORED_DYNAMIC &&
   21ed2:	68fb      	ldr	r3, [r7, #12]
   21ed4:	791b      	ldrb	r3, [r3, #4]
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    // Don't validate for dynamic cert SN
    if (!(cert_def->type == CERTTYPE_X509 &&
   21ed6:	2b07      	cmp	r3, #7
   21ed8:	d10f      	bne.n	21efa <atcacert_set_cert_element+0x76>
          cert_def->sn_source == SNSRC_STORED_DYNAMIC &&
          cert_loc->offset == cert_def->std_cert_elements[STDCERT_CERT_SN].offset) &&
   21eda:	68bb      	ldr	r3, [r7, #8]
   21edc:	781a      	ldrb	r2, [r3, #0]
   21ede:	785b      	ldrb	r3, [r3, #1]
   21ee0:	021b      	lsls	r3, r3, #8
   21ee2:	4313      	orrs	r3, r2
   21ee4:	b29a      	uxth	r2, r3
   21ee6:	68fb      	ldr	r3, [r7, #12]
   21ee8:	2135      	movs	r1, #53	; 0x35
   21eea:	5c59      	ldrb	r1, [r3, r1]
   21eec:	2036      	movs	r0, #54	; 0x36
   21eee:	5c1b      	ldrb	r3, [r3, r0]
   21ef0:	021b      	lsls	r3, r3, #8
   21ef2:	430b      	orrs	r3, r1
   21ef4:	b29b      	uxth	r3, r3
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    // Don't validate for dynamic cert SN
    if (!(cert_def->type == CERTTYPE_X509 &&
   21ef6:	429a      	cmp	r2, r3
   21ef8:	d00b      	beq.n	21f12 <atcacert_set_cert_element+0x8e>
          cert_def->sn_source == SNSRC_STORED_DYNAMIC &&
          cert_loc->offset == cert_def->std_cert_elements[STDCERT_CERT_SN].offset) &&
        data_size != cert_loc->count)
   21efa:	68bb      	ldr	r3, [r7, #8]
   21efc:	789a      	ldrb	r2, [r3, #2]
   21efe:	78db      	ldrb	r3, [r3, #3]
   21f00:	021b      	lsls	r3, r3, #8
   21f02:	4313      	orrs	r3, r2
   21f04:	b29b      	uxth	r3, r3
   21f06:	001a      	movs	r2, r3
    }

    // Don't validate for dynamic cert SN
    if (!(cert_def->type == CERTTYPE_X509 &&
          cert_def->sn_source == SNSRC_STORED_DYNAMIC &&
          cert_loc->offset == cert_def->std_cert_elements[STDCERT_CERT_SN].offset) &&
   21f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21f0a:	429a      	cmp	r2, r3
   21f0c:	d001      	beq.n	21f12 <atcacert_set_cert_element+0x8e>
        data_size != cert_loc->count)
    {
        return ATCACERT_E_UNEXPECTED_ELEM_SIZE;
   21f0e:	2307      	movs	r3, #7
   21f10:	e02f      	b.n	21f72 <atcacert_set_cert_element+0xee>
    }

    eff_offset = get_effective_offset(cert_def, cert, cert_loc->offset);
   21f12:	68bb      	ldr	r3, [r7, #8]
   21f14:	781a      	ldrb	r2, [r3, #0]
   21f16:	785b      	ldrb	r3, [r3, #1]
   21f18:	021b      	lsls	r3, r3, #8
   21f1a:	4313      	orrs	r3, r2
   21f1c:	b29b      	uxth	r3, r3
   21f1e:	001a      	movs	r2, r3
   21f20:	6879      	ldr	r1, [r7, #4]
   21f22:	68fb      	ldr	r3, [r7, #12]
   21f24:	0018      	movs	r0, r3
   21f26:	f7fd fef9 	bl	1fd1c <get_effective_offset>
   21f2a:	0003      	movs	r3, r0
   21f2c:	617b      	str	r3, [r7, #20]

    if ((size_t)(cert_loc->offset + data_size + eff_offset) > cert_size)
   21f2e:	68bb      	ldr	r3, [r7, #8]
   21f30:	781a      	ldrb	r2, [r3, #0]
   21f32:	785b      	ldrb	r3, [r3, #1]
   21f34:	021b      	lsls	r3, r3, #8
   21f36:	4313      	orrs	r3, r2
   21f38:	b29b      	uxth	r3, r3
   21f3a:	001a      	movs	r2, r3
   21f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21f3e:	18d2      	adds	r2, r2, r3
   21f40:	697b      	ldr	r3, [r7, #20]
   21f42:	18d2      	adds	r2, r2, r3
   21f44:	683b      	ldr	r3, [r7, #0]
   21f46:	429a      	cmp	r2, r3
   21f48:	d901      	bls.n	21f4e <atcacert_set_cert_element+0xca>
    {
        return ATCACERT_E_ELEM_OUT_OF_BOUNDS;
   21f4a:	2309      	movs	r3, #9
   21f4c:	e011      	b.n	21f72 <atcacert_set_cert_element+0xee>
    }

    memcpy(&cert[cert_loc->offset + eff_offset], data, data_size);
   21f4e:	68bb      	ldr	r3, [r7, #8]
   21f50:	781a      	ldrb	r2, [r3, #0]
   21f52:	785b      	ldrb	r3, [r3, #1]
   21f54:	021b      	lsls	r3, r3, #8
   21f56:	4313      	orrs	r3, r2
   21f58:	b29b      	uxth	r3, r3
   21f5a:	001a      	movs	r2, r3
   21f5c:	697b      	ldr	r3, [r7, #20]
   21f5e:	18d3      	adds	r3, r2, r3
   21f60:	001a      	movs	r2, r3
   21f62:	687b      	ldr	r3, [r7, #4]
   21f64:	189b      	adds	r3, r3, r2
   21f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   21f68:	6a39      	ldr	r1, [r7, #32]
   21f6a:	0018      	movs	r0, r3
   21f6c:	f003 fbbf 	bl	256ee <memcpy>

    return ATCACERT_E_SUCCESS;
   21f70:	2300      	movs	r3, #0
}
   21f72:	0018      	movs	r0, r3
   21f74:	46bd      	mov	sp, r7
   21f76:	b006      	add	sp, #24
   21f78:	bd80      	pop	{r7, pc}
   21f7a:	46c0      	nop			; (mov r8, r8)

00021f7c <atcacert_get_cert_element>:
                              const atcacert_cert_loc_t* cert_loc,
                              const uint8_t*             cert,
                              size_t                     cert_size,
                              uint8_t*                   data,
                              size_t                     data_size)
{
   21f7c:	b580      	push	{r7, lr}
   21f7e:	b086      	sub	sp, #24
   21f80:	af00      	add	r7, sp, #0
   21f82:	60f8      	str	r0, [r7, #12]
   21f84:	60b9      	str	r1, [r7, #8]
   21f86:	607a      	str	r2, [r7, #4]
   21f88:	603b      	str	r3, [r7, #0]
    int eff_offset = 0;
   21f8a:	2300      	movs	r3, #0
   21f8c:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert_loc == NULL || cert == NULL || data == NULL)
   21f8e:	68fb      	ldr	r3, [r7, #12]
   21f90:	2b00      	cmp	r3, #0
   21f92:	d008      	beq.n	21fa6 <atcacert_get_cert_element+0x2a>
   21f94:	68bb      	ldr	r3, [r7, #8]
   21f96:	2b00      	cmp	r3, #0
   21f98:	d005      	beq.n	21fa6 <atcacert_get_cert_element+0x2a>
   21f9a:	687b      	ldr	r3, [r7, #4]
   21f9c:	2b00      	cmp	r3, #0
   21f9e:	d002      	beq.n	21fa6 <atcacert_get_cert_element+0x2a>
   21fa0:	6a3b      	ldr	r3, [r7, #32]
   21fa2:	2b00      	cmp	r3, #0
   21fa4:	d101      	bne.n	21faa <atcacert_get_cert_element+0x2e>
    {
        return ATCACERT_E_BAD_PARAMS;
   21fa6:	2302      	movs	r3, #2
   21fa8:	e04b      	b.n	22042 <atcacert_get_cert_element+0xc6>
    }

    if (cert_loc->count == 0)
   21faa:	68bb      	ldr	r3, [r7, #8]
   21fac:	789a      	ldrb	r2, [r3, #2]
   21fae:	78db      	ldrb	r3, [r3, #3]
   21fb0:	021b      	lsls	r3, r3, #8
   21fb2:	4313      	orrs	r3, r2
   21fb4:	b29b      	uxth	r3, r3
   21fb6:	2b00      	cmp	r3, #0
   21fb8:	d101      	bne.n	21fbe <atcacert_get_cert_element+0x42>
    {
        return ATCACERT_E_ELEM_MISSING;  // This element doesn't exist in the certificate
   21fba:	2308      	movs	r3, #8
   21fbc:	e041      	b.n	22042 <atcacert_get_cert_element+0xc6>

    }
    if (cert_loc->count != data_size)
   21fbe:	68bb      	ldr	r3, [r7, #8]
   21fc0:	789a      	ldrb	r2, [r3, #2]
   21fc2:	78db      	ldrb	r3, [r3, #3]
   21fc4:	021b      	lsls	r3, r3, #8
   21fc6:	4313      	orrs	r3, r2
   21fc8:	b29b      	uxth	r3, r3
   21fca:	001a      	movs	r2, r3
   21fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21fce:	429a      	cmp	r2, r3
   21fd0:	d001      	beq.n	21fd6 <atcacert_get_cert_element+0x5a>
    {
        return ATCACERT_E_UNEXPECTED_ELEM_SIZE;
   21fd2:	2307      	movs	r3, #7
   21fd4:	e035      	b.n	22042 <atcacert_get_cert_element+0xc6>
    }

    eff_offset = get_effective_offset(cert_def, cert, cert_loc->offset);
   21fd6:	68bb      	ldr	r3, [r7, #8]
   21fd8:	781a      	ldrb	r2, [r3, #0]
   21fda:	785b      	ldrb	r3, [r3, #1]
   21fdc:	021b      	lsls	r3, r3, #8
   21fde:	4313      	orrs	r3, r2
   21fe0:	b29b      	uxth	r3, r3
   21fe2:	001a      	movs	r2, r3
   21fe4:	6879      	ldr	r1, [r7, #4]
   21fe6:	68fb      	ldr	r3, [r7, #12]
   21fe8:	0018      	movs	r0, r3
   21fea:	f7fd fe97 	bl	1fd1c <get_effective_offset>
   21fee:	0003      	movs	r3, r0
   21ff0:	617b      	str	r3, [r7, #20]

    if ((size_t)(cert_loc->offset + cert_loc->count + eff_offset) > cert_size)
   21ff2:	68bb      	ldr	r3, [r7, #8]
   21ff4:	781a      	ldrb	r2, [r3, #0]
   21ff6:	785b      	ldrb	r3, [r3, #1]
   21ff8:	021b      	lsls	r3, r3, #8
   21ffa:	4313      	orrs	r3, r2
   21ffc:	b29b      	uxth	r3, r3
   21ffe:	0019      	movs	r1, r3
   22000:	68bb      	ldr	r3, [r7, #8]
   22002:	789a      	ldrb	r2, [r3, #2]
   22004:	78db      	ldrb	r3, [r3, #3]
   22006:	021b      	lsls	r3, r3, #8
   22008:	4313      	orrs	r3, r2
   2200a:	b29b      	uxth	r3, r3
   2200c:	18ca      	adds	r2, r1, r3
   2200e:	697b      	ldr	r3, [r7, #20]
   22010:	18d3      	adds	r3, r2, r3
   22012:	001a      	movs	r2, r3
   22014:	683b      	ldr	r3, [r7, #0]
   22016:	429a      	cmp	r2, r3
   22018:	d901      	bls.n	2201e <atcacert_get_cert_element+0xa2>
    {
        return ATCACERT_E_ELEM_OUT_OF_BOUNDS;
   2201a:	2309      	movs	r3, #9
   2201c:	e011      	b.n	22042 <atcacert_get_cert_element+0xc6>
    }

    memcpy(data, &cert[cert_loc->offset + eff_offset], data_size);
   2201e:	68bb      	ldr	r3, [r7, #8]
   22020:	781a      	ldrb	r2, [r3, #0]
   22022:	785b      	ldrb	r3, [r3, #1]
   22024:	021b      	lsls	r3, r3, #8
   22026:	4313      	orrs	r3, r2
   22028:	b29b      	uxth	r3, r3
   2202a:	001a      	movs	r2, r3
   2202c:	697b      	ldr	r3, [r7, #20]
   2202e:	18d3      	adds	r3, r2, r3
   22030:	001a      	movs	r2, r3
   22032:	687b      	ldr	r3, [r7, #4]
   22034:	1899      	adds	r1, r3, r2
   22036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22038:	6a3b      	ldr	r3, [r7, #32]
   2203a:	0018      	movs	r0, r3
   2203c:	f003 fb57 	bl	256ee <memcpy>

    return ATCACERT_E_SUCCESS;
   22040:	2300      	movs	r3, #0
}
   22042:	0018      	movs	r0, r3
   22044:	46bd      	mov	sp, r7
   22046:	b006      	add	sp, #24
   22048:	bd80      	pop	{r7, pc}
   2204a:	46c0      	nop			; (mov r8, r8)

0002204c <atcacert_get_key_id>:

int atcacert_get_key_id(const uint8_t public_key[64], uint8_t key_id[20])
{
   2204c:	b580      	push	{r7, lr}
   2204e:	b094      	sub	sp, #80	; 0x50
   22050:	af00      	add	r7, sp, #0
   22052:	6078      	str	r0, [r7, #4]
   22054:	6039      	str	r1, [r7, #0]
    uint8_t msg[65];

    if (public_key == NULL || key_id == NULL)
   22056:	687b      	ldr	r3, [r7, #4]
   22058:	2b00      	cmp	r3, #0
   2205a:	d002      	beq.n	22062 <atcacert_get_key_id+0x16>
   2205c:	683b      	ldr	r3, [r7, #0]
   2205e:	2b00      	cmp	r3, #0
   22060:	d101      	bne.n	22066 <atcacert_get_key_id+0x1a>
    {
        return ATCACERT_E_BAD_PARAMS;
   22062:	2302      	movs	r3, #2
   22064:	e013      	b.n	2208e <atcacert_get_key_id+0x42>
    }

    msg[0] = 0x04;
   22066:	230c      	movs	r3, #12
   22068:	18fb      	adds	r3, r7, r3
   2206a:	2204      	movs	r2, #4
   2206c:	701a      	strb	r2, [r3, #0]
    memcpy(&msg[1], public_key, 64);
   2206e:	6879      	ldr	r1, [r7, #4]
   22070:	230c      	movs	r3, #12
   22072:	18fb      	adds	r3, r7, r3
   22074:	3301      	adds	r3, #1
   22076:	2240      	movs	r2, #64	; 0x40
   22078:	0018      	movs	r0, r3
   2207a:	f003 fb38 	bl	256ee <memcpy>

    return atcac_sw_sha1(msg, sizeof(msg), key_id);
   2207e:	683a      	ldr	r2, [r7, #0]
   22080:	230c      	movs	r3, #12
   22082:	18fb      	adds	r3, r7, r3
   22084:	2141      	movs	r1, #65	; 0x41
   22086:	0018      	movs	r0, r3
   22088:	f7fb f938 	bl	1d2fc <atcac_sw_sha1>
   2208c:	0003      	movs	r3, r0
}
   2208e:	0018      	movs	r0, r3
   22090:	46bd      	mov	sp, r7
   22092:	b014      	add	sp, #80	; 0x50
   22094:	bd80      	pop	{r7, pc}
   22096:	46c0      	nop			; (mov r8, r8)

00022098 <atcacert_public_key_add_padding>:

void atcacert_public_key_add_padding(const uint8_t raw_key[64], uint8_t padded_key[72])
{
   22098:	b580      	push	{r7, lr}
   2209a:	b082      	sub	sp, #8
   2209c:	af00      	add	r7, sp, #0
   2209e:	6078      	str	r0, [r7, #4]
   220a0:	6039      	str	r1, [r7, #0]
    memmove(&padded_key[40], &raw_key[32], 32); // Move Y to padded position
   220a2:	683b      	ldr	r3, [r7, #0]
   220a4:	3328      	adds	r3, #40	; 0x28
   220a6:	0018      	movs	r0, r3
   220a8:	687b      	ldr	r3, [r7, #4]
   220aa:	3320      	adds	r3, #32
   220ac:	2220      	movs	r2, #32
   220ae:	0019      	movs	r1, r3
   220b0:	f003 fb26 	bl	25700 <memmove>
    memset(&padded_key[36], 0, 4);              // Add Y padding bytes
   220b4:	683b      	ldr	r3, [r7, #0]
   220b6:	3324      	adds	r3, #36	; 0x24
   220b8:	2204      	movs	r2, #4
   220ba:	2100      	movs	r1, #0
   220bc:	0018      	movs	r0, r3
   220be:	f003 fb34 	bl	2572a <memset>
    memmove(&padded_key[4], &raw_key[0], 32);   // Move X to padded position
   220c2:	683b      	ldr	r3, [r7, #0]
   220c4:	3304      	adds	r3, #4
   220c6:	6879      	ldr	r1, [r7, #4]
   220c8:	2220      	movs	r2, #32
   220ca:	0018      	movs	r0, r3
   220cc:	f003 fb18 	bl	25700 <memmove>
    memset(&padded_key[0], 0, 4);               // Add X padding bytes
   220d0:	683b      	ldr	r3, [r7, #0]
   220d2:	2204      	movs	r2, #4
   220d4:	2100      	movs	r1, #0
   220d6:	0018      	movs	r0, r3
   220d8:	f003 fb27 	bl	2572a <memset>
}
   220dc:	46c0      	nop			; (mov r8, r8)
   220de:	46bd      	mov	sp, r7
   220e0:	b002      	add	sp, #8
   220e2:	bd80      	pop	{r7, pc}

000220e4 <atcacert_public_key_remove_padding>:

void atcacert_public_key_remove_padding(const uint8_t padded_key[72], uint8_t raw_key[64])
{
   220e4:	b580      	push	{r7, lr}
   220e6:	b082      	sub	sp, #8
   220e8:	af00      	add	r7, sp, #0
   220ea:	6078      	str	r0, [r7, #4]
   220ec:	6039      	str	r1, [r7, #0]
    memmove(&raw_key[0], &padded_key[4], 32);   // Move X
   220ee:	687b      	ldr	r3, [r7, #4]
   220f0:	1d19      	adds	r1, r3, #4
   220f2:	683b      	ldr	r3, [r7, #0]
   220f4:	2220      	movs	r2, #32
   220f6:	0018      	movs	r0, r3
   220f8:	f003 fb02 	bl	25700 <memmove>
    memmove(&raw_key[32], &padded_key[40], 32); // Move Y
   220fc:	683b      	ldr	r3, [r7, #0]
   220fe:	3320      	adds	r3, #32
   22100:	0018      	movs	r0, r3
   22102:	687b      	ldr	r3, [r7, #4]
   22104:	3328      	adds	r3, #40	; 0x28
   22106:	2220      	movs	r2, #32
   22108:	0019      	movs	r1, r3
   2210a:	f003 faf9 	bl	25700 <memmove>
}
   2210e:	46c0      	nop			; (mov r8, r8)
   22110:	46bd      	mov	sp, r7
   22112:	b002      	add	sp, #8
   22114:	bd80      	pop	{r7, pc}
   22116:	46c0      	nop			; (mov r8, r8)

00022118 <atcacert_der_enc_length>:

#include "atcacert_der.h"
#include <string.h>

int atcacert_der_enc_length(uint32_t length, uint8_t* der_length, size_t* der_length_size)
{
   22118:	b580      	push	{r7, lr}
   2211a:	b086      	sub	sp, #24
   2211c:	af00      	add	r7, sp, #0
   2211e:	60f8      	str	r0, [r7, #12]
   22120:	60b9      	str	r1, [r7, #8]
   22122:	607a      	str	r2, [r7, #4]
    size_t der_length_size_calc = 0;
   22124:	2300      	movs	r3, #0
   22126:	617b      	str	r3, [r7, #20]
    int exp = sizeof(length) - 1;
   22128:	2303      	movs	r3, #3
   2212a:	613b      	str	r3, [r7, #16]

    if (der_length_size == NULL)
   2212c:	687b      	ldr	r3, [r7, #4]
   2212e:	2b00      	cmp	r3, #0
   22130:	d101      	bne.n	22136 <atcacert_der_enc_length+0x1e>
    {
        return ATCACERT_E_BAD_PARAMS;
   22132:	2302      	movs	r3, #2
   22134:	e049      	b.n	221ca <atcacert_der_enc_length+0xb2>
    }

    if (length < 0x80)
   22136:	68fb      	ldr	r3, [r7, #12]
   22138:	2b7f      	cmp	r3, #127	; 0x7f
   2213a:	d807      	bhi.n	2214c <atcacert_der_enc_length+0x34>
    {
        // The length can take the short form with only one byte
        der_length_size_calc = 1;
   2213c:	2301      	movs	r3, #1
   2213e:	617b      	str	r3, [r7, #20]
        exp = 0;
   22140:	2300      	movs	r3, #0
   22142:	613b      	str	r3, [r7, #16]
   22144:	e00b      	b.n	2215e <atcacert_der_enc_length+0x46>
        // Length is long-form, encoded as a multi-byte big-endian unsigned integer

        // Find first non-zero octet
        while (length / ((uint32_t)1 << (8 * exp)) == 0)
        {
            exp--;
   22146:	693b      	ldr	r3, [r7, #16]
   22148:	3b01      	subs	r3, #1
   2214a:	613b      	str	r3, [r7, #16]
    else
    {
        // Length is long-form, encoded as a multi-byte big-endian unsigned integer

        // Find first non-zero octet
        while (length / ((uint32_t)1 << (8 * exp)) == 0)
   2214c:	693b      	ldr	r3, [r7, #16]
   2214e:	00db      	lsls	r3, r3, #3
   22150:	68fa      	ldr	r2, [r7, #12]
   22152:	40da      	lsrs	r2, r3
   22154:	1e13      	subs	r3, r2, #0
   22156:	d0f6      	beq.n	22146 <atcacert_der_enc_length+0x2e>
        {
            exp--;
        }

        der_length_size_calc = 2 + exp;
   22158:	693b      	ldr	r3, [r7, #16]
   2215a:	3302      	adds	r3, #2
   2215c:	617b      	str	r3, [r7, #20]
    }

    if (der_length != NULL && *der_length_size < der_length_size_calc)
   2215e:	68bb      	ldr	r3, [r7, #8]
   22160:	2b00      	cmp	r3, #0
   22162:	d009      	beq.n	22178 <atcacert_der_enc_length+0x60>
   22164:	687b      	ldr	r3, [r7, #4]
   22166:	681a      	ldr	r2, [r3, #0]
   22168:	697b      	ldr	r3, [r7, #20]
   2216a:	429a      	cmp	r2, r3
   2216c:	d204      	bcs.n	22178 <atcacert_der_enc_length+0x60>
    {
        *der_length_size = der_length_size_calc;
   2216e:	687b      	ldr	r3, [r7, #4]
   22170:	697a      	ldr	r2, [r7, #20]
   22172:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
   22174:	2303      	movs	r3, #3
   22176:	e028      	b.n	221ca <atcacert_der_enc_length+0xb2>
    }

    *der_length_size = der_length_size_calc;
   22178:	687b      	ldr	r3, [r7, #4]
   2217a:	697a      	ldr	r2, [r7, #20]
   2217c:	601a      	str	r2, [r3, #0]

    if (der_length == NULL)
   2217e:	68bb      	ldr	r3, [r7, #8]
   22180:	2b00      	cmp	r3, #0
   22182:	d111      	bne.n	221a8 <atcacert_der_enc_length+0x90>
    {
        return ATCACERT_E_SUCCESS;  // Caller is only requesting the size
   22184:	2300      	movs	r3, #0
   22186:	e020      	b.n	221ca <atcacert_der_enc_length+0xb2>

    }
    // Encode length in big-endian format
    for (; exp >= 0; exp--)
    {
        der_length[der_length_size_calc - 1 - exp] = (uint8_t)((length >> (exp * 8)) & 0xFF);
   22188:	693b      	ldr	r3, [r7, #16]
   2218a:	697a      	ldr	r2, [r7, #20]
   2218c:	1ad3      	subs	r3, r2, r3
   2218e:	3b01      	subs	r3, #1
   22190:	68ba      	ldr	r2, [r7, #8]
   22192:	18d3      	adds	r3, r2, r3
   22194:	693a      	ldr	r2, [r7, #16]
   22196:	00d2      	lsls	r2, r2, #3
   22198:	68f9      	ldr	r1, [r7, #12]
   2219a:	40d1      	lsrs	r1, r2
   2219c:	000a      	movs	r2, r1
   2219e:	b2d2      	uxtb	r2, r2
   221a0:	701a      	strb	r2, [r3, #0]
    {
        return ATCACERT_E_SUCCESS;  // Caller is only requesting the size

    }
    // Encode length in big-endian format
    for (; exp >= 0; exp--)
   221a2:	693b      	ldr	r3, [r7, #16]
   221a4:	3b01      	subs	r3, #1
   221a6:	613b      	str	r3, [r7, #16]
   221a8:	693b      	ldr	r3, [r7, #16]
   221aa:	2b00      	cmp	r3, #0
   221ac:	daec      	bge.n	22188 <atcacert_der_enc_length+0x70>
    {
        der_length[der_length_size_calc - 1 - exp] = (uint8_t)((length >> (exp * 8)) & 0xFF);
    }

    if (der_length_size_calc > 1)
   221ae:	697b      	ldr	r3, [r7, #20]
   221b0:	2b01      	cmp	r3, #1
   221b2:	d909      	bls.n	221c8 <atcacert_der_enc_length+0xb0>
    {
        der_length[0] = 0x80 | (uint8_t)(der_length_size_calc - 1);  // Set number of bytes octet with long-form flag
   221b4:	697b      	ldr	r3, [r7, #20]
   221b6:	b2db      	uxtb	r3, r3
   221b8:	3b01      	subs	r3, #1
   221ba:	b2db      	uxtb	r3, r3
   221bc:	2280      	movs	r2, #128	; 0x80
   221be:	4252      	negs	r2, r2
   221c0:	4313      	orrs	r3, r2
   221c2:	b2da      	uxtb	r2, r3
   221c4:	68bb      	ldr	r3, [r7, #8]
   221c6:	701a      	strb	r2, [r3, #0]

    }
    return ATCACERT_E_SUCCESS;
   221c8:	2300      	movs	r3, #0
}
   221ca:	0018      	movs	r0, r3
   221cc:	46bd      	mov	sp, r7
   221ce:	b006      	add	sp, #24
   221d0:	bd80      	pop	{r7, pc}
   221d2:	46c0      	nop			; (mov r8, r8)

000221d4 <atcacert_der_dec_length>:

int atcacert_der_dec_length(const uint8_t* der_length, size_t* der_length_size, uint32_t* length)
{
   221d4:	b580      	push	{r7, lr}
   221d6:	b086      	sub	sp, #24
   221d8:	af00      	add	r7, sp, #0
   221da:	60f8      	str	r0, [r7, #12]
   221dc:	60b9      	str	r1, [r7, #8]
   221de:	607a      	str	r2, [r7, #4]
    if (der_length == NULL || der_length_size == NULL)
   221e0:	68fb      	ldr	r3, [r7, #12]
   221e2:	2b00      	cmp	r3, #0
   221e4:	d002      	beq.n	221ec <atcacert_der_dec_length+0x18>
   221e6:	68bb      	ldr	r3, [r7, #8]
   221e8:	2b00      	cmp	r3, #0
   221ea:	d101      	bne.n	221f0 <atcacert_der_dec_length+0x1c>
    {
        return ATCACERT_E_BAD_PARAMS;
   221ec:	2302      	movs	r3, #2
   221ee:	e053      	b.n	22298 <atcacert_der_dec_length+0xc4>
    }

    if (*der_length_size < 1)
   221f0:	68bb      	ldr	r3, [r7, #8]
   221f2:	681b      	ldr	r3, [r3, #0]
   221f4:	2b00      	cmp	r3, #0
   221f6:	d101      	bne.n	221fc <atcacert_der_dec_length+0x28>
    {
        return ATCACERT_E_DECODING_ERROR;
   221f8:	2304      	movs	r3, #4
   221fa:	e04d      	b.n	22298 <atcacert_der_dec_length+0xc4>
    }

    if (der_length[0] & 0x80)
   221fc:	68fb      	ldr	r3, [r7, #12]
   221fe:	781b      	ldrb	r3, [r3, #0]
   22200:	b25b      	sxtb	r3, r3
   22202:	2b00      	cmp	r3, #0
   22204:	da3c      	bge.n	22280 <atcacert_der_dec_length+0xac>
    {
        // Long form
        size_t num_bytes = der_length[0] & 0x7F;
   22206:	68fb      	ldr	r3, [r7, #12]
   22208:	781b      	ldrb	r3, [r3, #0]
   2220a:	001a      	movs	r2, r3
   2220c:	237f      	movs	r3, #127	; 0x7f
   2220e:	4013      	ands	r3, r2
   22210:	613b      	str	r3, [r7, #16]
        size_t i;
        if (*der_length_size < num_bytes + 1)
   22212:	68bb      	ldr	r3, [r7, #8]
   22214:	681a      	ldr	r2, [r3, #0]
   22216:	693b      	ldr	r3, [r7, #16]
   22218:	3301      	adds	r3, #1
   2221a:	429a      	cmp	r2, r3
   2221c:	d201      	bcs.n	22222 <atcacert_der_dec_length+0x4e>
        {
            return ATCACERT_E_DECODING_ERROR;   //  Invalid DER length format, not enough data.
   2221e:	2304      	movs	r3, #4
   22220:	e03a      	b.n	22298 <atcacert_der_dec_length+0xc4>
        }
        if (num_bytes == 0)
   22222:	693b      	ldr	r3, [r7, #16]
   22224:	2b00      	cmp	r3, #0
   22226:	d101      	bne.n	2222c <atcacert_der_dec_length+0x58>
        {
            return ATCACERT_E_DECODING_ERROR;   //  Invalid DER length format, indefinite length not supported.
   22228:	2304      	movs	r3, #4
   2222a:	e035      	b.n	22298 <atcacert_der_dec_length+0xc4>
        }
        if (num_bytes > sizeof(*length))
   2222c:	693b      	ldr	r3, [r7, #16]
   2222e:	2b04      	cmp	r3, #4
   22230:	d901      	bls.n	22236 <atcacert_der_dec_length+0x62>
        {
            return ATCACERT_E_DECODING_ERROR;   //  Can't parse DER length format, larger than length.
   22232:	2304      	movs	r3, #4
   22234:	e030      	b.n	22298 <atcacert_der_dec_length+0xc4>

        }
        if (length != NULL)
   22236:	687b      	ldr	r3, [r7, #4]
   22238:	2b00      	cmp	r3, #0
   2223a:	d01c      	beq.n	22276 <atcacert_der_dec_length+0xa2>
        {
            // Decode integer in big-endian format
            *length = 0;
   2223c:	687b      	ldr	r3, [r7, #4]
   2223e:	2200      	movs	r2, #0
   22240:	601a      	str	r2, [r3, #0]
            for (i = 1; i <= num_bytes; i++)
   22242:	2301      	movs	r3, #1
   22244:	617b      	str	r3, [r7, #20]
   22246:	e012      	b.n	2226e <atcacert_der_dec_length+0x9a>
            {
                *length += der_length[i] * ((uint32_t)1 << (8 * (num_bytes - i)));
   22248:	687b      	ldr	r3, [r7, #4]
   2224a:	681a      	ldr	r2, [r3, #0]
   2224c:	68f9      	ldr	r1, [r7, #12]
   2224e:	697b      	ldr	r3, [r7, #20]
   22250:	18cb      	adds	r3, r1, r3
   22252:	781b      	ldrb	r3, [r3, #0]
   22254:	0018      	movs	r0, r3
   22256:	6939      	ldr	r1, [r7, #16]
   22258:	697b      	ldr	r3, [r7, #20]
   2225a:	1acb      	subs	r3, r1, r3
   2225c:	00db      	lsls	r3, r3, #3
   2225e:	4098      	lsls	r0, r3
   22260:	0003      	movs	r3, r0
   22262:	18d2      	adds	r2, r2, r3
   22264:	687b      	ldr	r3, [r7, #4]
   22266:	601a      	str	r2, [r3, #0]
        }
        if (length != NULL)
        {
            // Decode integer in big-endian format
            *length = 0;
            for (i = 1; i <= num_bytes; i++)
   22268:	697b      	ldr	r3, [r7, #20]
   2226a:	3301      	adds	r3, #1
   2226c:	617b      	str	r3, [r7, #20]
   2226e:	697a      	ldr	r2, [r7, #20]
   22270:	693b      	ldr	r3, [r7, #16]
   22272:	429a      	cmp	r2, r3
   22274:	d9e8      	bls.n	22248 <atcacert_der_dec_length+0x74>
            {
                *length += der_length[i] * ((uint32_t)1 << (8 * (num_bytes - i)));
            }
        }
        *der_length_size = num_bytes + 1; // Return the actual number of bytes the DER length encoding used.
   22276:	693b      	ldr	r3, [r7, #16]
   22278:	1c5a      	adds	r2, r3, #1
   2227a:	68bb      	ldr	r3, [r7, #8]
   2227c:	601a      	str	r2, [r3, #0]
   2227e:	e00a      	b.n	22296 <atcacert_der_dec_length+0xc2>
    }
    else
    {
        if (length != NULL)
   22280:	687b      	ldr	r3, [r7, #4]
   22282:	2b00      	cmp	r3, #0
   22284:	d004      	beq.n	22290 <atcacert_der_dec_length+0xbc>
        {
            *length = der_length[0];
   22286:	68fb      	ldr	r3, [r7, #12]
   22288:	781b      	ldrb	r3, [r3, #0]
   2228a:	001a      	movs	r2, r3
   2228c:	687b      	ldr	r3, [r7, #4]
   2228e:	601a      	str	r2, [r3, #0]
        }
        *der_length_size = 1; // Return the actual number of bytes the DER length encoding used.
   22290:	68bb      	ldr	r3, [r7, #8]
   22292:	2201      	movs	r2, #1
   22294:	601a      	str	r2, [r3, #0]
    }

    return ATCACERT_E_SUCCESS;
   22296:	2300      	movs	r3, #0
}
   22298:	0018      	movs	r0, r3
   2229a:	46bd      	mov	sp, r7
   2229c:	b006      	add	sp, #24
   2229e:	bd80      	pop	{r7, pc}

000222a0 <atcacert_der_adjust_length>:

int atcacert_der_adjust_length(uint8_t* der_length, size_t* der_length_size, int delta_length, uint32_t* new_length)
{
   222a0:	b580      	push	{r7, lr}
   222a2:	b08a      	sub	sp, #40	; 0x28
   222a4:	af00      	add	r7, sp, #0
   222a6:	60f8      	str	r0, [r7, #12]
   222a8:	60b9      	str	r1, [r7, #8]
   222aa:	607a      	str	r2, [r7, #4]
   222ac:	603b      	str	r3, [r7, #0]
    int ret = 0;
   222ae:	2300      	movs	r3, #0
   222b0:	627b      	str	r3, [r7, #36]	; 0x24
    size_t new_der_len_size = 0;
   222b2:	2300      	movs	r3, #0
   222b4:	61fb      	str	r3, [r7, #28]
    uint32_t old_len = 0;
   222b6:	2300      	movs	r3, #0
   222b8:	61bb      	str	r3, [r7, #24]
    uint32_t new_len = 0;
   222ba:	2300      	movs	r3, #0
   222bc:	623b      	str	r3, [r7, #32]
    uint8_t new_der_length[5];

    ret = atcacert_der_dec_length(der_length, der_length_size, &old_len);
   222be:	2318      	movs	r3, #24
   222c0:	18fa      	adds	r2, r7, r3
   222c2:	68b9      	ldr	r1, [r7, #8]
   222c4:	68fb      	ldr	r3, [r7, #12]
   222c6:	0018      	movs	r0, r3
   222c8:	f7ff ff84 	bl	221d4 <atcacert_der_dec_length>
   222cc:	0003      	movs	r3, r0
   222ce:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
   222d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   222d2:	2b00      	cmp	r3, #0
   222d4:	d001      	beq.n	222da <atcacert_der_adjust_length+0x3a>
    {
        return ret;
   222d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   222d8:	e034      	b.n	22344 <atcacert_der_adjust_length+0xa4>
    }

    if (delta_length < 0 && (size_t)(-delta_length) > old_len)
   222da:	687b      	ldr	r3, [r7, #4]
   222dc:	2b00      	cmp	r3, #0
   222de:	da07      	bge.n	222f0 <atcacert_der_adjust_length+0x50>
   222e0:	687b      	ldr	r3, [r7, #4]
   222e2:	425b      	negs	r3, r3
   222e4:	001a      	movs	r2, r3
   222e6:	69bb      	ldr	r3, [r7, #24]
   222e8:	429a      	cmp	r2, r3
   222ea:	d901      	bls.n	222f0 <atcacert_der_adjust_length+0x50>
    {
        return ATCACERT_E_ERROR;
   222ec:	2301      	movs	r3, #1
   222ee:	e029      	b.n	22344 <atcacert_der_adjust_length+0xa4>
    }
    new_len = old_len + delta_length;
   222f0:	69ba      	ldr	r2, [r7, #24]
   222f2:	687b      	ldr	r3, [r7, #4]
   222f4:	18d3      	adds	r3, r2, r3
   222f6:	623b      	str	r3, [r7, #32]

    if (new_length != NULL)
   222f8:	683b      	ldr	r3, [r7, #0]
   222fa:	2b00      	cmp	r3, #0
   222fc:	d002      	beq.n	22304 <atcacert_der_adjust_length+0x64>
    {
        *new_length = new_len;
   222fe:	683b      	ldr	r3, [r7, #0]
   22300:	6a3a      	ldr	r2, [r7, #32]
   22302:	601a      	str	r2, [r3, #0]
    }

    new_der_len_size = sizeof(new_der_length);
   22304:	2305      	movs	r3, #5
   22306:	61fb      	str	r3, [r7, #28]
    ret = atcacert_der_enc_length(new_len, new_der_length, &new_der_len_size);
   22308:	231c      	movs	r3, #28
   2230a:	18fa      	adds	r2, r7, r3
   2230c:	2310      	movs	r3, #16
   2230e:	18f9      	adds	r1, r7, r3
   22310:	6a3b      	ldr	r3, [r7, #32]
   22312:	0018      	movs	r0, r3
   22314:	f7ff ff00 	bl	22118 <atcacert_der_enc_length>
   22318:	0003      	movs	r3, r0
   2231a:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
   2231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2231e:	2b00      	cmp	r3, #0
   22320:	d001      	beq.n	22326 <atcacert_der_adjust_length+0x86>
    {
        return ret;
   22322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22324:	e00e      	b.n	22344 <atcacert_der_adjust_length+0xa4>
    }

    if (*der_length_size != new_der_len_size)
   22326:	68bb      	ldr	r3, [r7, #8]
   22328:	681a      	ldr	r2, [r3, #0]
   2232a:	69fb      	ldr	r3, [r7, #28]
   2232c:	429a      	cmp	r2, r3
   2232e:	d001      	beq.n	22334 <atcacert_der_adjust_length+0x94>
    {
        return ATCACERT_E_BAD_CERT;
   22330:	230a      	movs	r3, #10
   22332:	e007      	b.n	22344 <atcacert_der_adjust_length+0xa4>
    }

    memcpy(der_length, new_der_length, new_der_len_size);
   22334:	69fa      	ldr	r2, [r7, #28]
   22336:	2310      	movs	r3, #16
   22338:	18f9      	adds	r1, r7, r3
   2233a:	68fb      	ldr	r3, [r7, #12]
   2233c:	0018      	movs	r0, r3
   2233e:	f003 f9d6 	bl	256ee <memcpy>

    return 0;
   22342:	2300      	movs	r3, #0
}
   22344:	0018      	movs	r0, r3
   22346:	46bd      	mov	sp, r7
   22348:	b00a      	add	sp, #40	; 0x28
   2234a:	bd80      	pop	{r7, pc}

0002234c <atcacert_der_enc_integer>:
int atcacert_der_enc_integer(const uint8_t* int_data,
                             size_t         int_data_size,
                             uint8_t        is_unsigned,
                             uint8_t*       der_int,
                             size_t*        der_int_size)
{
   2234c:	b580      	push	{r7, lr}
   2234e:	b08c      	sub	sp, #48	; 0x30
   22350:	af00      	add	r7, sp, #0
   22352:	60f8      	str	r0, [r7, #12]
   22354:	60b9      	str	r1, [r7, #8]
   22356:	603b      	str	r3, [r7, #0]
   22358:	1dfb      	adds	r3, r7, #7
   2235a:	701a      	strb	r2, [r3, #0]
    uint8_t der_length[5];
    size_t der_length_size = sizeof(der_length);
   2235c:	2305      	movs	r3, #5
   2235e:	617b      	str	r3, [r7, #20]
    size_t der_int_size_calc = 0;
   22360:	2300      	movs	r3, #0
   22362:	627b      	str	r3, [r7, #36]	; 0x24
    size_t trim = 0;
   22364:	2300      	movs	r3, #0
   22366:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t pad = 0;
   22368:	2300      	movs	r3, #0
   2236a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (int_data == NULL || der_int_size == NULL || int_data_size <= 0)
   2236c:	68fb      	ldr	r3, [r7, #12]
   2236e:	2b00      	cmp	r3, #0
   22370:	d005      	beq.n	2237e <atcacert_der_enc_integer+0x32>
   22372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   22374:	2b00      	cmp	r3, #0
   22376:	d002      	beq.n	2237e <atcacert_der_enc_integer+0x32>
   22378:	68bb      	ldr	r3, [r7, #8]
   2237a:	2b00      	cmp	r3, #0
   2237c:	d101      	bne.n	22382 <atcacert_der_enc_integer+0x36>
    {
        return ATCACERT_E_BAD_PARAMS;
   2237e:	2302      	movs	r3, #2
   22380:	e087      	b.n	22492 <atcacert_der_enc_integer+0x146>
    }

    if (!(is_unsigned && (int_data[0] & 0x80)))
   22382:	1dfb      	adds	r3, r7, #7
   22384:	781b      	ldrb	r3, [r3, #0]
   22386:	2b00      	cmp	r3, #0
   22388:	d008      	beq.n	2239c <atcacert_der_enc_integer+0x50>
   2238a:	68fb      	ldr	r3, [r7, #12]
   2238c:	781b      	ldrb	r3, [r3, #0]
   2238e:	b25b      	sxtb	r3, r3
   22390:	2b00      	cmp	r3, #0
   22392:	db25      	blt.n	223e0 <atcacert_der_enc_integer+0x94>
    {
        // This is not an unsigned value that needs a padding byte, trim any unnecessary bytes.
        // Trim a byte when the upper 9 bits are all 0s or all 1s.
        while (
   22394:	e002      	b.n	2239c <atcacert_der_enc_integer+0x50>
            (int_data_size - trim >= 2) && (
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
                ((int_data[trim] == 0xFF) && ((int_data[trim + 1] & 0x80) != 0))))
        {
            trim++;
   22396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22398:	3301      	adds	r3, #1
   2239a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (!(is_unsigned && (int_data[0] & 0x80)))
    {
        // This is not an unsigned value that needs a padding byte, trim any unnecessary bytes.
        // Trim a byte when the upper 9 bits are all 0s or all 1s.
        while (
            (int_data_size - trim >= 2) && (
   2239c:	68ba      	ldr	r2, [r7, #8]
   2239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   223a0:	1ad3      	subs	r3, r2, r3

    if (!(is_unsigned && (int_data[0] & 0x80)))
    {
        // This is not an unsigned value that needs a padding byte, trim any unnecessary bytes.
        // Trim a byte when the upper 9 bits are all 0s or all 1s.
        while (
   223a2:	2b01      	cmp	r3, #1
   223a4:	d91f      	bls.n	223e6 <atcacert_der_enc_integer+0x9a>
            (int_data_size - trim >= 2) && (
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
   223a6:	68fa      	ldr	r2, [r7, #12]
   223a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   223aa:	18d3      	adds	r3, r2, r3
   223ac:	781b      	ldrb	r3, [r3, #0]
    if (!(is_unsigned && (int_data[0] & 0x80)))
    {
        // This is not an unsigned value that needs a padding byte, trim any unnecessary bytes.
        // Trim a byte when the upper 9 bits are all 0s or all 1s.
        while (
            (int_data_size - trim >= 2) && (
   223ae:	2b00      	cmp	r3, #0
   223b0:	d107      	bne.n	223c2 <atcacert_der_enc_integer+0x76>
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
   223b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   223b4:	3301      	adds	r3, #1
   223b6:	68fa      	ldr	r2, [r7, #12]
   223b8:	18d3      	adds	r3, r2, r3
   223ba:	781b      	ldrb	r3, [r3, #0]
   223bc:	b25b      	sxtb	r3, r3
   223be:	2b00      	cmp	r3, #0
   223c0:	dae9      	bge.n	22396 <atcacert_der_enc_integer+0x4a>
                ((int_data[trim] == 0xFF) && ((int_data[trim + 1] & 0x80) != 0))))
   223c2:	68fa      	ldr	r2, [r7, #12]
   223c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   223c6:	18d3      	adds	r3, r2, r3
   223c8:	781b      	ldrb	r3, [r3, #0]
    {
        // This is not an unsigned value that needs a padding byte, trim any unnecessary bytes.
        // Trim a byte when the upper 9 bits are all 0s or all 1s.
        while (
            (int_data_size - trim >= 2) && (
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
   223ca:	2bff      	cmp	r3, #255	; 0xff
   223cc:	d10b      	bne.n	223e6 <atcacert_der_enc_integer+0x9a>
                ((int_data[trim] == 0xFF) && ((int_data[trim + 1] & 0x80) != 0))))
   223ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   223d0:	3301      	adds	r3, #1
   223d2:	68fa      	ldr	r2, [r7, #12]
   223d4:	18d3      	adds	r3, r2, r3
   223d6:	781b      	ldrb	r3, [r3, #0]
   223d8:	b25b      	sxtb	r3, r3
   223da:	2b00      	cmp	r3, #0
   223dc:	dbdb      	blt.n	22396 <atcacert_der_enc_integer+0x4a>
    if (int_data == NULL || der_int_size == NULL || int_data_size <= 0)
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    if (!(is_unsigned && (int_data[0] & 0x80)))
   223de:	e002      	b.n	223e6 <atcacert_der_enc_integer+0x9a>
        }
    }
    else
    {
        // Will be adding extra byte for unsigned padding so it's not interpreted as negative
        pad = 1;
   223e0:	2301      	movs	r3, #1
   223e2:	62bb      	str	r3, [r7, #40]	; 0x28
   223e4:	e000      	b.n	223e8 <atcacert_der_enc_integer+0x9c>
    if (int_data == NULL || der_int_size == NULL || int_data_size <= 0)
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    if (!(is_unsigned && (int_data[0] & 0x80)))
   223e6:	46c0      	nop			; (mov r8, r8)
    {
        // Will be adding extra byte for unsigned padding so it's not interpreted as negative
        pad = 1;
    }

    int ret = atcacert_der_enc_length((uint32_t)(int_data_size + pad - trim), der_length, &der_length_size);
   223e8:	68ba      	ldr	r2, [r7, #8]
   223ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   223ec:	18d2      	adds	r2, r2, r3
   223ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   223f0:	1ad3      	subs	r3, r2, r3
   223f2:	2214      	movs	r2, #20
   223f4:	18ba      	adds	r2, r7, r2
   223f6:	2118      	movs	r1, #24
   223f8:	1879      	adds	r1, r7, r1
   223fa:	0018      	movs	r0, r3
   223fc:	f7ff fe8c 	bl	22118 <atcacert_der_enc_length>
   22400:	0003      	movs	r3, r0
   22402:	623b      	str	r3, [r7, #32]
    if (ret != ATCACERT_E_SUCCESS)
   22404:	6a3b      	ldr	r3, [r7, #32]
   22406:	2b00      	cmp	r3, #0
   22408:	d001      	beq.n	2240e <atcacert_der_enc_integer+0xc2>
    {
        return ret;
   2240a:	6a3b      	ldr	r3, [r7, #32]
   2240c:	e041      	b.n	22492 <atcacert_der_enc_integer+0x146>
    }

    der_int_size_calc = 1 + der_length_size + int_data_size + pad - trim;
   2240e:	697a      	ldr	r2, [r7, #20]
   22410:	68bb      	ldr	r3, [r7, #8]
   22412:	18d2      	adds	r2, r2, r3
   22414:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22416:	18d2      	adds	r2, r2, r3
   22418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2241a:	1ad3      	subs	r3, r2, r3
   2241c:	3301      	adds	r3, #1
   2241e:	627b      	str	r3, [r7, #36]	; 0x24

    if (der_int != NULL && der_int_size_calc > *der_int_size)
   22420:	683b      	ldr	r3, [r7, #0]
   22422:	2b00      	cmp	r3, #0
   22424:	d009      	beq.n	2243a <atcacert_der_enc_integer+0xee>
   22426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   22428:	681a      	ldr	r2, [r3, #0]
   2242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2242c:	429a      	cmp	r2, r3
   2242e:	d204      	bcs.n	2243a <atcacert_der_enc_integer+0xee>
    {
        *der_int_size = der_int_size_calc;
   22430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   22432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22434:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
   22436:	2303      	movs	r3, #3
   22438:	e02b      	b.n	22492 <atcacert_der_enc_integer+0x146>
    }

    *der_int_size = der_int_size_calc;
   2243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2243c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2243e:	601a      	str	r2, [r3, #0]

    if (der_int == NULL)
   22440:	683b      	ldr	r3, [r7, #0]
   22442:	2b00      	cmp	r3, #0
   22444:	d101      	bne.n	2244a <atcacert_der_enc_integer+0xfe>
    {
        return ATCACERT_E_SUCCESS;                                                      // Caller just wanted the size of the encoded integer
   22446:	2300      	movs	r3, #0
   22448:	e023      	b.n	22492 <atcacert_der_enc_integer+0x146>

    }
    der_int[0] = 0x02;                                                                  // Integer tag
   2244a:	683b      	ldr	r3, [r7, #0]
   2244c:	2202      	movs	r2, #2
   2244e:	701a      	strb	r2, [r3, #0]
    memcpy(&der_int[1], der_length, der_length_size);                                   // Integer length
   22450:	683b      	ldr	r3, [r7, #0]
   22452:	3301      	adds	r3, #1
   22454:	697a      	ldr	r2, [r7, #20]
   22456:	2118      	movs	r1, #24
   22458:	1879      	adds	r1, r7, r1
   2245a:	0018      	movs	r0, r3
   2245c:	f003 f947 	bl	256ee <memcpy>
    if (pad)
   22460:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22462:	2b00      	cmp	r3, #0
   22464:	d005      	beq.n	22472 <atcacert_der_enc_integer+0x126>
    {
        der_int[der_length_size + 1] = 0;                                               // Unsigned integer value requires padding byte so it's not interpreted as negative
   22466:	697b      	ldr	r3, [r7, #20]
   22468:	3301      	adds	r3, #1
   2246a:	683a      	ldr	r2, [r7, #0]
   2246c:	18d3      	adds	r3, r2, r3
   2246e:	2200      	movs	r2, #0
   22470:	701a      	strb	r2, [r3, #0]
    }
    memcpy(&der_int[der_length_size + 1 + pad], &int_data[trim], int_data_size - trim); // Integer value
   22472:	697a      	ldr	r2, [r7, #20]
   22474:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22476:	18d3      	adds	r3, r2, r3
   22478:	3301      	adds	r3, #1
   2247a:	683a      	ldr	r2, [r7, #0]
   2247c:	18d0      	adds	r0, r2, r3
   2247e:	68fa      	ldr	r2, [r7, #12]
   22480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22482:	18d1      	adds	r1, r2, r3
   22484:	68ba      	ldr	r2, [r7, #8]
   22486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22488:	1ad3      	subs	r3, r2, r3
   2248a:	001a      	movs	r2, r3
   2248c:	f003 f92f 	bl	256ee <memcpy>

    return ATCACERT_E_SUCCESS;
   22490:	2300      	movs	r3, #0
}
   22492:	0018      	movs	r0, r3
   22494:	46bd      	mov	sp, r7
   22496:	b00c      	add	sp, #48	; 0x30
   22498:	bd80      	pop	{r7, pc}
   2249a:	46c0      	nop			; (mov r8, r8)

0002249c <atcacert_der_dec_integer>:

int atcacert_der_dec_integer(const uint8_t* der_int,
                             size_t*        der_int_size,
                             uint8_t*       int_data,
                             size_t*        int_data_size)
{
   2249c:	b580      	push	{r7, lr}
   2249e:	b088      	sub	sp, #32
   224a0:	af00      	add	r7, sp, #0
   224a2:	60f8      	str	r0, [r7, #12]
   224a4:	60b9      	str	r1, [r7, #8]
   224a6:	607a      	str	r2, [r7, #4]
   224a8:	603b      	str	r3, [r7, #0]
    int ret = 0;
   224aa:	2300      	movs	r3, #0
   224ac:	61fb      	str	r3, [r7, #28]
    size_t der_length_size = 0;
   224ae:	2300      	movs	r3, #0
   224b0:	61bb      	str	r3, [r7, #24]
    uint32_t int_data_size_calc = 0;
   224b2:	2300      	movs	r3, #0
   224b4:	617b      	str	r3, [r7, #20]

    if (der_int == NULL || der_int_size == NULL || (int_data != NULL && int_data_size == NULL))
   224b6:	68fb      	ldr	r3, [r7, #12]
   224b8:	2b00      	cmp	r3, #0
   224ba:	d008      	beq.n	224ce <atcacert_der_dec_integer+0x32>
   224bc:	68bb      	ldr	r3, [r7, #8]
   224be:	2b00      	cmp	r3, #0
   224c0:	d005      	beq.n	224ce <atcacert_der_dec_integer+0x32>
   224c2:	687b      	ldr	r3, [r7, #4]
   224c4:	2b00      	cmp	r3, #0
   224c6:	d004      	beq.n	224d2 <atcacert_der_dec_integer+0x36>
   224c8:	683b      	ldr	r3, [r7, #0]
   224ca:	2b00      	cmp	r3, #0
   224cc:	d101      	bne.n	224d2 <atcacert_der_dec_integer+0x36>
    {
        return ATCACERT_E_BAD_PARAMS;
   224ce:	2302      	movs	r3, #2
   224d0:	e056      	b.n	22580 <atcacert_der_dec_integer+0xe4>
    }

    if (*der_int_size < 1)
   224d2:	68bb      	ldr	r3, [r7, #8]
   224d4:	681b      	ldr	r3, [r3, #0]
   224d6:	2b00      	cmp	r3, #0
   224d8:	d101      	bne.n	224de <atcacert_der_dec_integer+0x42>
    {
        return ATCACERT_E_DECODING_ERROR;  // No data to decode
   224da:	2304      	movs	r3, #4
   224dc:	e050      	b.n	22580 <atcacert_der_dec_integer+0xe4>

    }
    if (der_int[0] != 0x02)
   224de:	68fb      	ldr	r3, [r7, #12]
   224e0:	781b      	ldrb	r3, [r3, #0]
   224e2:	2b02      	cmp	r3, #2
   224e4:	d001      	beq.n	224ea <atcacert_der_dec_integer+0x4e>
    {
        return ATCACERT_E_DECODING_ERROR;  // Not an integer tag
   224e6:	2304      	movs	r3, #4
   224e8:	e04a      	b.n	22580 <atcacert_der_dec_integer+0xe4>

    }
    der_length_size = *der_int_size - 1;
   224ea:	68bb      	ldr	r3, [r7, #8]
   224ec:	681b      	ldr	r3, [r3, #0]
   224ee:	3b01      	subs	r3, #1
   224f0:	61bb      	str	r3, [r7, #24]
    ret = atcacert_der_dec_length(&der_int[1], &der_length_size, &int_data_size_calc);
   224f2:	68fb      	ldr	r3, [r7, #12]
   224f4:	3301      	adds	r3, #1
   224f6:	2214      	movs	r2, #20
   224f8:	18ba      	adds	r2, r7, r2
   224fa:	2118      	movs	r1, #24
   224fc:	1879      	adds	r1, r7, r1
   224fe:	0018      	movs	r0, r3
   22500:	f7ff fe68 	bl	221d4 <atcacert_der_dec_length>
   22504:	0003      	movs	r3, r0
   22506:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
   22508:	69fb      	ldr	r3, [r7, #28]
   2250a:	2b00      	cmp	r3, #0
   2250c:	d001      	beq.n	22512 <atcacert_der_dec_integer+0x76>
    {
        return ret;
   2250e:	69fb      	ldr	r3, [r7, #28]
   22510:	e036      	b.n	22580 <atcacert_der_dec_integer+0xe4>
    }

    if (*der_int_size < (1 + der_length_size + int_data_size_calc))
   22512:	68bb      	ldr	r3, [r7, #8]
   22514:	681a      	ldr	r2, [r3, #0]
   22516:	69b9      	ldr	r1, [r7, #24]
   22518:	697b      	ldr	r3, [r7, #20]
   2251a:	18cb      	adds	r3, r1, r3
   2251c:	3301      	adds	r3, #1
   2251e:	429a      	cmp	r2, r3
   22520:	d201      	bcs.n	22526 <atcacert_der_dec_integer+0x8a>
    {
        return ATCACERT_E_DECODING_ERROR;  // Invalid DER integer, not enough data.
   22522:	2304      	movs	r3, #4
   22524:	e02c      	b.n	22580 <atcacert_der_dec_integer+0xe4>

    }
    *der_int_size = (1 + der_length_size + int_data_size_calc);
   22526:	69ba      	ldr	r2, [r7, #24]
   22528:	697b      	ldr	r3, [r7, #20]
   2252a:	18d3      	adds	r3, r2, r3
   2252c:	1c5a      	adds	r2, r3, #1
   2252e:	68bb      	ldr	r3, [r7, #8]
   22530:	601a      	str	r2, [r3, #0]

    if (int_data == NULL && int_data_size == NULL)
   22532:	687b      	ldr	r3, [r7, #4]
   22534:	2b00      	cmp	r3, #0
   22536:	d104      	bne.n	22542 <atcacert_der_dec_integer+0xa6>
   22538:	683b      	ldr	r3, [r7, #0]
   2253a:	2b00      	cmp	r3, #0
   2253c:	d101      	bne.n	22542 <atcacert_der_dec_integer+0xa6>
    {
        return ATCACERT_E_SUCCESS;  // Caller doesn't want the actual data, just the der_int_size
   2253e:	2300      	movs	r3, #0
   22540:	e01e      	b.n	22580 <atcacert_der_dec_integer+0xe4>

    }
    if (int_data != NULL && *int_data_size < int_data_size_calc)
   22542:	687b      	ldr	r3, [r7, #4]
   22544:	2b00      	cmp	r3, #0
   22546:	d009      	beq.n	2255c <atcacert_der_dec_integer+0xc0>
   22548:	683b      	ldr	r3, [r7, #0]
   2254a:	681a      	ldr	r2, [r3, #0]
   2254c:	697b      	ldr	r3, [r7, #20]
   2254e:	429a      	cmp	r2, r3
   22550:	d204      	bcs.n	2255c <atcacert_der_dec_integer+0xc0>
    {
        *int_data_size = int_data_size_calc;
   22552:	697a      	ldr	r2, [r7, #20]
   22554:	683b      	ldr	r3, [r7, #0]
   22556:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
   22558:	2303      	movs	r3, #3
   2255a:	e011      	b.n	22580 <atcacert_der_dec_integer+0xe4>
    }

    *int_data_size = int_data_size_calc;
   2255c:	697a      	ldr	r2, [r7, #20]
   2255e:	683b      	ldr	r3, [r7, #0]
   22560:	601a      	str	r2, [r3, #0]

    if (int_data == NULL)
   22562:	687b      	ldr	r3, [r7, #4]
   22564:	2b00      	cmp	r3, #0
   22566:	d101      	bne.n	2256c <atcacert_der_dec_integer+0xd0>
    {
        return ATCACERT_E_SUCCESS;  // Caller doesn't want the actual data, just the int_data_size
   22568:	2300      	movs	r3, #0
   2256a:	e009      	b.n	22580 <atcacert_der_dec_integer+0xe4>

    }
    memcpy(int_data, &der_int[1 + der_length_size], int_data_size_calc);
   2256c:	69bb      	ldr	r3, [r7, #24]
   2256e:	3301      	adds	r3, #1
   22570:	68fa      	ldr	r2, [r7, #12]
   22572:	18d1      	adds	r1, r2, r3
   22574:	697a      	ldr	r2, [r7, #20]
   22576:	687b      	ldr	r3, [r7, #4]
   22578:	0018      	movs	r0, r3
   2257a:	f003 f8b8 	bl	256ee <memcpy>

    return ATCACERT_E_SUCCESS;
   2257e:	2300      	movs	r3, #0
}
   22580:	0018      	movs	r0, r3
   22582:	46bd      	mov	sp, r7
   22584:	b008      	add	sp, #32
   22586:	bd80      	pop	{r7, pc}

00022588 <atcacert_der_enc_ecdsa_sig_value>:

int atcacert_der_enc_ecdsa_sig_value(const uint8_t raw_sig[64],
                                     uint8_t*      der_sig,
                                     size_t*       der_sig_size)
{
   22588:	b580      	push	{r7, lr}
   2258a:	b08a      	sub	sp, #40	; 0x28
   2258c:	af02      	add	r7, sp, #8
   2258e:	60f8      	str	r0, [r7, #12]
   22590:	60b9      	str	r1, [r7, #8]
   22592:	607a      	str	r2, [r7, #4]
    int ret = 0;
   22594:	2300      	movs	r3, #0
   22596:	61fb      	str	r3, [r7, #28]
    size_t r_size = 0;
   22598:	2300      	movs	r3, #0
   2259a:	617b      	str	r3, [r7, #20]
    size_t s_size = 0;
   2259c:	2300      	movs	r3, #0
   2259e:	613b      	str	r3, [r7, #16]
    size_t der_sig_size_calc = 0;
   225a0:	2300      	movs	r3, #0
   225a2:	61bb      	str	r3, [r7, #24]

    if (raw_sig == NULL || der_sig_size == NULL)
   225a4:	68fb      	ldr	r3, [r7, #12]
   225a6:	2b00      	cmp	r3, #0
   225a8:	d002      	beq.n	225b0 <atcacert_der_enc_ecdsa_sig_value+0x28>
   225aa:	687b      	ldr	r3, [r7, #4]
   225ac:	2b00      	cmp	r3, #0
   225ae:	d101      	bne.n	225b4 <atcacert_der_enc_ecdsa_sig_value+0x2c>
    {
        return ATCACERT_E_BAD_PARAMS;
   225b0:	2302      	movs	r3, #2
   225b2:	e07d      	b.n	226b0 <atcacert_der_enc_ecdsa_sig_value+0x128>
    }

    // Find size of the DER encoded R integer
    ret = atcacert_der_enc_integer(&raw_sig[0], 32, TRUE, NULL, &r_size);
   225b4:	68f8      	ldr	r0, [r7, #12]
   225b6:	2314      	movs	r3, #20
   225b8:	18fb      	adds	r3, r7, r3
   225ba:	9300      	str	r3, [sp, #0]
   225bc:	2300      	movs	r3, #0
   225be:	2201      	movs	r2, #1
   225c0:	2120      	movs	r1, #32
   225c2:	f7ff fec3 	bl	2234c <atcacert_der_enc_integer>
   225c6:	0003      	movs	r3, r0
   225c8:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
   225ca:	69fb      	ldr	r3, [r7, #28]
   225cc:	2b00      	cmp	r3, #0
   225ce:	d001      	beq.n	225d4 <atcacert_der_enc_ecdsa_sig_value+0x4c>
    {
        return ret;
   225d0:	69fb      	ldr	r3, [r7, #28]
   225d2:	e06d      	b.n	226b0 <atcacert_der_enc_ecdsa_sig_value+0x128>
    }

    // Find size of the DER encoded S integer
    ret = atcacert_der_enc_integer(&raw_sig[32], 32, TRUE, NULL, &s_size);
   225d4:	68fb      	ldr	r3, [r7, #12]
   225d6:	3320      	adds	r3, #32
   225d8:	0018      	movs	r0, r3
   225da:	2310      	movs	r3, #16
   225dc:	18fb      	adds	r3, r7, r3
   225de:	9300      	str	r3, [sp, #0]
   225e0:	2300      	movs	r3, #0
   225e2:	2201      	movs	r2, #1
   225e4:	2120      	movs	r1, #32
   225e6:	f7ff feb1 	bl	2234c <atcacert_der_enc_integer>
   225ea:	0003      	movs	r3, r0
   225ec:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
   225ee:	69fb      	ldr	r3, [r7, #28]
   225f0:	2b00      	cmp	r3, #0
   225f2:	d001      	beq.n	225f8 <atcacert_der_enc_ecdsa_sig_value+0x70>
    {
        return ret;
   225f4:	69fb      	ldr	r3, [r7, #28]
   225f6:	e05b      	b.n	226b0 <atcacert_der_enc_ecdsa_sig_value+0x128>
    }

    // This calculation assumes all DER lengths are a single byte, which is fine for 32 byte
    // R and S integers.
    der_sig_size_calc = 5 + r_size + s_size;
   225f8:	697a      	ldr	r2, [r7, #20]
   225fa:	693b      	ldr	r3, [r7, #16]
   225fc:	18d3      	adds	r3, r2, r3
   225fe:	3305      	adds	r3, #5
   22600:	61bb      	str	r3, [r7, #24]

    if (der_sig != NULL && *der_sig_size < der_sig_size_calc)
   22602:	68bb      	ldr	r3, [r7, #8]
   22604:	2b00      	cmp	r3, #0
   22606:	d009      	beq.n	2261c <atcacert_der_enc_ecdsa_sig_value+0x94>
   22608:	687b      	ldr	r3, [r7, #4]
   2260a:	681a      	ldr	r2, [r3, #0]
   2260c:	69bb      	ldr	r3, [r7, #24]
   2260e:	429a      	cmp	r2, r3
   22610:	d204      	bcs.n	2261c <atcacert_der_enc_ecdsa_sig_value+0x94>
    {
        *der_sig_size = der_sig_size_calc;
   22612:	687b      	ldr	r3, [r7, #4]
   22614:	69ba      	ldr	r2, [r7, #24]
   22616:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
   22618:	2303      	movs	r3, #3
   2261a:	e049      	b.n	226b0 <atcacert_der_enc_ecdsa_sig_value+0x128>
    }

    *der_sig_size = der_sig_size_calc;
   2261c:	687b      	ldr	r3, [r7, #4]
   2261e:	69ba      	ldr	r2, [r7, #24]
   22620:	601a      	str	r2, [r3, #0]

    if (der_sig == NULL)
   22622:	68bb      	ldr	r3, [r7, #8]
   22624:	2b00      	cmp	r3, #0
   22626:	d101      	bne.n	2262c <atcacert_der_enc_ecdsa_sig_value+0xa4>
    {
        return ATCACERT_E_SUCCESS;                  // Caller just wanted the encoded size
   22628:	2300      	movs	r3, #0
   2262a:	e041      	b.n	226b0 <atcacert_der_enc_ecdsa_sig_value+0x128>

    }
    der_sig[0] = 0x03;                              // signatureValue bit string tag
   2262c:	68bb      	ldr	r3, [r7, #8]
   2262e:	2203      	movs	r2, #3
   22630:	701a      	strb	r2, [r3, #0]
    der_sig[1] = (uint8_t)(der_sig_size_calc - 2);  // signatureValue bit string length
   22632:	68bb      	ldr	r3, [r7, #8]
   22634:	3301      	adds	r3, #1
   22636:	69ba      	ldr	r2, [r7, #24]
   22638:	b2d2      	uxtb	r2, r2
   2263a:	3a02      	subs	r2, #2
   2263c:	b2d2      	uxtb	r2, r2
   2263e:	701a      	strb	r2, [r3, #0]
    der_sig[2] = 0x00;                              // signatureValue bit string spare bits
   22640:	68bb      	ldr	r3, [r7, #8]
   22642:	3302      	adds	r3, #2
   22644:	2200      	movs	r2, #0
   22646:	701a      	strb	r2, [r3, #0]

    // signatureValue bit string value is the DER encoding of ECDSA-Sig-Value
    der_sig[3] = 0x30;                              // sequence tag
   22648:	68bb      	ldr	r3, [r7, #8]
   2264a:	3303      	adds	r3, #3
   2264c:	2230      	movs	r2, #48	; 0x30
   2264e:	701a      	strb	r2, [r3, #0]
    der_sig[4] = (uint8_t)(der_sig_size_calc - 5);  // sequence length
   22650:	68bb      	ldr	r3, [r7, #8]
   22652:	3304      	adds	r3, #4
   22654:	69ba      	ldr	r2, [r7, #24]
   22656:	b2d2      	uxtb	r2, r2
   22658:	3a05      	subs	r2, #5
   2265a:	b2d2      	uxtb	r2, r2
   2265c:	701a      	strb	r2, [r3, #0]

    // Add R integer
    ret = atcacert_der_enc_integer(&raw_sig[0], 32, TRUE, &der_sig[5], &r_size);
   2265e:	68bb      	ldr	r3, [r7, #8]
   22660:	1d5a      	adds	r2, r3, #5
   22662:	68f8      	ldr	r0, [r7, #12]
   22664:	2314      	movs	r3, #20
   22666:	18fb      	adds	r3, r7, r3
   22668:	9300      	str	r3, [sp, #0]
   2266a:	0013      	movs	r3, r2
   2266c:	2201      	movs	r2, #1
   2266e:	2120      	movs	r1, #32
   22670:	f7ff fe6c 	bl	2234c <atcacert_der_enc_integer>
   22674:	0003      	movs	r3, r0
   22676:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
   22678:	69fb      	ldr	r3, [r7, #28]
   2267a:	2b00      	cmp	r3, #0
   2267c:	d001      	beq.n	22682 <atcacert_der_enc_ecdsa_sig_value+0xfa>
    {
        return ret;
   2267e:	69fb      	ldr	r3, [r7, #28]
   22680:	e016      	b.n	226b0 <atcacert_der_enc_ecdsa_sig_value+0x128>
    }

    // Add S integer
    ret = atcacert_der_enc_integer(&raw_sig[32], 32, TRUE, &der_sig[5 + r_size], &s_size);
   22682:	68fb      	ldr	r3, [r7, #12]
   22684:	3320      	adds	r3, #32
   22686:	0018      	movs	r0, r3
   22688:	697b      	ldr	r3, [r7, #20]
   2268a:	3305      	adds	r3, #5
   2268c:	68ba      	ldr	r2, [r7, #8]
   2268e:	18d2      	adds	r2, r2, r3
   22690:	2310      	movs	r3, #16
   22692:	18fb      	adds	r3, r7, r3
   22694:	9300      	str	r3, [sp, #0]
   22696:	0013      	movs	r3, r2
   22698:	2201      	movs	r2, #1
   2269a:	2120      	movs	r1, #32
   2269c:	f7ff fe56 	bl	2234c <atcacert_der_enc_integer>
   226a0:	0003      	movs	r3, r0
   226a2:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
   226a4:	69fb      	ldr	r3, [r7, #28]
   226a6:	2b00      	cmp	r3, #0
   226a8:	d001      	beq.n	226ae <atcacert_der_enc_ecdsa_sig_value+0x126>
    {
        return ret;
   226aa:	69fb      	ldr	r3, [r7, #28]
   226ac:	e000      	b.n	226b0 <atcacert_der_enc_ecdsa_sig_value+0x128>
    }

    return ATCACERT_E_SUCCESS;
   226ae:	2300      	movs	r3, #0
}
   226b0:	0018      	movs	r0, r3
   226b2:	46bd      	mov	sp, r7
   226b4:	b008      	add	sp, #32
   226b6:	bd80      	pop	{r7, pc}

000226b8 <atcacert_der_dec_ecdsa_sig_value>:

int atcacert_der_dec_ecdsa_sig_value(const uint8_t* der_sig,
                                     size_t*        der_sig_size,
                                     uint8_t        raw_sig[64])
{
   226b8:	b580      	push	{r7, lr}
   226ba:	b096      	sub	sp, #88	; 0x58
   226bc:	af00      	add	r7, sp, #0
   226be:	60f8      	str	r0, [r7, #12]
   226c0:	60b9      	str	r1, [r7, #8]
   226c2:	607a      	str	r2, [r7, #4]
    int ret = 0;
   226c4:	2300      	movs	r3, #0
   226c6:	657b      	str	r3, [r7, #84]	; 0x54
    size_t curr_idx = 0;
   226c8:	2300      	movs	r3, #0
   226ca:	653b      	str	r3, [r7, #80]	; 0x50
    size_t dec_size = 0;
   226cc:	2300      	movs	r3, #0
   226ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t bs_length = 0;
   226d0:	2300      	movs	r3, #0
   226d2:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t seq_length = 0;
   226d4:	2300      	movs	r3, #0
   226d6:	647b      	str	r3, [r7, #68]	; 0x44
    size_t r_size = 0;
   226d8:	2300      	movs	r3, #0
   226da:	643b      	str	r3, [r7, #64]	; 0x40
    size_t s_size = 0;
   226dc:	2300      	movs	r3, #0
   226de:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint8_t int_data[33];
    size_t int_data_size = 0;
   226e0:	2300      	movs	r3, #0
   226e2:	617b      	str	r3, [r7, #20]

    if (der_sig == NULL || der_sig_size == NULL)
   226e4:	68fb      	ldr	r3, [r7, #12]
   226e6:	2b00      	cmp	r3, #0
   226e8:	d002      	beq.n	226f0 <atcacert_der_dec_ecdsa_sig_value+0x38>
   226ea:	68bb      	ldr	r3, [r7, #8]
   226ec:	2b00      	cmp	r3, #0
   226ee:	d101      	bne.n	226f4 <atcacert_der_dec_ecdsa_sig_value+0x3c>
    {
        return ATCACERT_E_BAD_PARAMS;
   226f0:	2302      	movs	r3, #2
   226f2:	e13f      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }

    if (*der_sig_size < 1)
   226f4:	68bb      	ldr	r3, [r7, #8]
   226f6:	681b      	ldr	r3, [r3, #0]
   226f8:	2b00      	cmp	r3, #0
   226fa:	d101      	bne.n	22700 <atcacert_der_dec_ecdsa_sig_value+0x48>
    {
        return ATCACERT_E_DECODING_ERROR;  // No data to decode
   226fc:	2304      	movs	r3, #4
   226fe:	e139      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>

    }
    // signatureValue bit string tag
    curr_idx = 0;
   22700:	2300      	movs	r3, #0
   22702:	653b      	str	r3, [r7, #80]	; 0x50
    if (der_sig[curr_idx] != 0x03)
   22704:	68fa      	ldr	r2, [r7, #12]
   22706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   22708:	18d3      	adds	r3, r2, r3
   2270a:	781b      	ldrb	r3, [r3, #0]
   2270c:	2b03      	cmp	r3, #3
   2270e:	d001      	beq.n	22714 <atcacert_der_dec_ecdsa_sig_value+0x5c>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unexpected tag value
   22710:	2304      	movs	r3, #4
   22712:	e12f      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    curr_idx++;
   22714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   22716:	3301      	adds	r3, #1
   22718:	653b      	str	r3, [r7, #80]	; 0x50

    // signatureValue bit string length
    dec_size = *der_sig_size - curr_idx;
   2271a:	68bb      	ldr	r3, [r7, #8]
   2271c:	681a      	ldr	r2, [r3, #0]
   2271e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   22720:	1ad3      	subs	r3, r2, r3
   22722:	64fb      	str	r3, [r7, #76]	; 0x4c
    ret = atcacert_der_dec_length(&der_sig[curr_idx], &dec_size, &bs_length);
   22724:	68fa      	ldr	r2, [r7, #12]
   22726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   22728:	18d3      	adds	r3, r2, r3
   2272a:	2248      	movs	r2, #72	; 0x48
   2272c:	18ba      	adds	r2, r7, r2
   2272e:	214c      	movs	r1, #76	; 0x4c
   22730:	1879      	adds	r1, r7, r1
   22732:	0018      	movs	r0, r3
   22734:	f7ff fd4e 	bl	221d4 <atcacert_der_dec_length>
   22738:	0003      	movs	r3, r0
   2273a:	657b      	str	r3, [r7, #84]	; 0x54
    if (ret != ATCACERT_E_SUCCESS)
   2273c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2273e:	2b00      	cmp	r3, #0
   22740:	d001      	beq.n	22746 <atcacert_der_dec_ecdsa_sig_value+0x8e>
    {
        return ret;  // Failed to decode length
   22742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   22744:	e116      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    curr_idx += dec_size;
   22746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   22748:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   2274a:	18d3      	adds	r3, r2, r3
   2274c:	653b      	str	r3, [r7, #80]	; 0x50
    if (curr_idx + bs_length > *der_sig_size)
   2274e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   22750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   22752:	18d2      	adds	r2, r2, r3
   22754:	68bb      	ldr	r3, [r7, #8]
   22756:	681b      	ldr	r3, [r3, #0]
   22758:	429a      	cmp	r2, r3
   2275a:	d901      	bls.n	22760 <atcacert_der_dec_ecdsa_sig_value+0xa8>
    {
        return ATCACERT_E_DECODING_ERROR;  // Not enough data in buffer to decode the rest
   2275c:	2304      	movs	r3, #4
   2275e:	e109      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>

    }
    // signatureValue bit string spare bits
    if (curr_idx >= *der_sig_size)
   22760:	68bb      	ldr	r3, [r7, #8]
   22762:	681a      	ldr	r2, [r3, #0]
   22764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   22766:	429a      	cmp	r2, r3
   22768:	d801      	bhi.n	2276e <atcacert_der_dec_ecdsa_sig_value+0xb6>
    {
        return ATCACERT_E_DECODING_ERROR;   // No data left
   2276a:	2304      	movs	r3, #4
   2276c:	e102      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    if (der_sig[curr_idx] != 0x00)
   2276e:	68fa      	ldr	r2, [r7, #12]
   22770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   22772:	18d3      	adds	r3, r2, r3
   22774:	781b      	ldrb	r3, [r3, #0]
   22776:	2b00      	cmp	r3, #0
   22778:	d001      	beq.n	2277e <atcacert_der_dec_ecdsa_sig_value+0xc6>
    {
        return ATCACERT_E_DECODING_ERROR;   // Unexpected spare bits value
   2277a:	2304      	movs	r3, #4
   2277c:	e0fa      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    curr_idx++;
   2277e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   22780:	3301      	adds	r3, #1
   22782:	653b      	str	r3, [r7, #80]	; 0x50

    // signatureValue bit string value is the DER encoding of ECDSA-Sig-Value

    // sequence tag
    if (curr_idx >= *der_sig_size)
   22784:	68bb      	ldr	r3, [r7, #8]
   22786:	681a      	ldr	r2, [r3, #0]
   22788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2278a:	429a      	cmp	r2, r3
   2278c:	d801      	bhi.n	22792 <atcacert_der_dec_ecdsa_sig_value+0xda>
    {
        return ATCACERT_E_DECODING_ERROR;   // No data left
   2278e:	2304      	movs	r3, #4
   22790:	e0f0      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    if (der_sig[curr_idx] != 0x30)
   22792:	68fa      	ldr	r2, [r7, #12]
   22794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   22796:	18d3      	adds	r3, r2, r3
   22798:	781b      	ldrb	r3, [r3, #0]
   2279a:	2b30      	cmp	r3, #48	; 0x30
   2279c:	d001      	beq.n	227a2 <atcacert_der_dec_ecdsa_sig_value+0xea>
    {
        return ATCACERT_E_DECODING_ERROR;   // Unexpected tag value
   2279e:	2304      	movs	r3, #4
   227a0:	e0e8      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    curr_idx++;
   227a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   227a4:	3301      	adds	r3, #1
   227a6:	653b      	str	r3, [r7, #80]	; 0x50

    // sequence length
    if (curr_idx >= *der_sig_size)
   227a8:	68bb      	ldr	r3, [r7, #8]
   227aa:	681a      	ldr	r2, [r3, #0]
   227ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   227ae:	429a      	cmp	r2, r3
   227b0:	d801      	bhi.n	227b6 <atcacert_der_dec_ecdsa_sig_value+0xfe>
    {
        return ATCACERT_E_DECODING_ERROR;  // No data left
   227b2:	2304      	movs	r3, #4
   227b4:	e0de      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    dec_size = *der_sig_size - curr_idx;
   227b6:	68bb      	ldr	r3, [r7, #8]
   227b8:	681a      	ldr	r2, [r3, #0]
   227ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   227bc:	1ad3      	subs	r3, r2, r3
   227be:	64fb      	str	r3, [r7, #76]	; 0x4c
    ret = atcacert_der_dec_length(&der_sig[curr_idx], &dec_size, &seq_length);
   227c0:	68fa      	ldr	r2, [r7, #12]
   227c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   227c4:	18d3      	adds	r3, r2, r3
   227c6:	2244      	movs	r2, #68	; 0x44
   227c8:	18ba      	adds	r2, r7, r2
   227ca:	214c      	movs	r1, #76	; 0x4c
   227cc:	1879      	adds	r1, r7, r1
   227ce:	0018      	movs	r0, r3
   227d0:	f7ff fd00 	bl	221d4 <atcacert_der_dec_length>
   227d4:	0003      	movs	r3, r0
   227d6:	657b      	str	r3, [r7, #84]	; 0x54
    if (ret != ATCACERT_E_SUCCESS)
   227d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   227da:	2b00      	cmp	r3, #0
   227dc:	d001      	beq.n	227e2 <atcacert_der_dec_ecdsa_sig_value+0x12a>
    {
        return ret;  // Failed to decode length
   227de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   227e0:	e0c8      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    curr_idx += dec_size;
   227e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   227e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   227e6:	18d3      	adds	r3, r2, r3
   227e8:	653b      	str	r3, [r7, #80]	; 0x50
    if (curr_idx + seq_length > *der_sig_size)
   227ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   227ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   227ee:	18d2      	adds	r2, r2, r3
   227f0:	68bb      	ldr	r3, [r7, #8]
   227f2:	681b      	ldr	r3, [r3, #0]
   227f4:	429a      	cmp	r2, r3
   227f6:	d901      	bls.n	227fc <atcacert_der_dec_ecdsa_sig_value+0x144>
    {
        return ATCACERT_E_DECODING_ERROR;  // Not enough data in buffer to decode the rest
   227f8:	2304      	movs	r3, #4
   227fa:	e0bb      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>

    }
    // R integer
    if (curr_idx >= *der_sig_size)
   227fc:	68bb      	ldr	r3, [r7, #8]
   227fe:	681a      	ldr	r2, [r3, #0]
   22800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   22802:	429a      	cmp	r2, r3
   22804:	d801      	bhi.n	2280a <atcacert_der_dec_ecdsa_sig_value+0x152>
    {
        return ATCACERT_E_DECODING_ERROR;  // No data left
   22806:	2304      	movs	r3, #4
   22808:	e0b4      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    r_size = *der_sig_size - curr_idx;
   2280a:	68bb      	ldr	r3, [r7, #8]
   2280c:	681a      	ldr	r2, [r3, #0]
   2280e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   22810:	1ad3      	subs	r3, r2, r3
   22812:	643b      	str	r3, [r7, #64]	; 0x40
    int_data_size = sizeof(int_data);
   22814:	2321      	movs	r3, #33	; 0x21
   22816:	617b      	str	r3, [r7, #20]
    ret = atcacert_der_dec_integer(&der_sig[curr_idx], &r_size, int_data, &int_data_size);
   22818:	68fa      	ldr	r2, [r7, #12]
   2281a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2281c:	18d0      	adds	r0, r2, r3
   2281e:	2314      	movs	r3, #20
   22820:	18fb      	adds	r3, r7, r3
   22822:	2218      	movs	r2, #24
   22824:	18ba      	adds	r2, r7, r2
   22826:	2140      	movs	r1, #64	; 0x40
   22828:	1879      	adds	r1, r7, r1
   2282a:	f7ff fe37 	bl	2249c <atcacert_der_dec_integer>
   2282e:	0003      	movs	r3, r0
   22830:	657b      	str	r3, [r7, #84]	; 0x54
    if (ret != ATCACERT_E_SUCCESS)
   22832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   22834:	2b00      	cmp	r3, #0
   22836:	d001      	beq.n	2283c <atcacert_der_dec_ecdsa_sig_value+0x184>
    {
        return ret;  // Failed to decode length
   22838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2283a:	e09b      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    curr_idx += r_size;
   2283c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2283e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   22840:	18d3      	adds	r3, r2, r3
   22842:	653b      	str	r3, [r7, #80]	; 0x50

    if (raw_sig != NULL)
   22844:	687b      	ldr	r3, [r7, #4]
   22846:	2b00      	cmp	r3, #0
   22848:	d005      	beq.n	22856 <atcacert_der_dec_ecdsa_sig_value+0x19e>
    {
        memset(raw_sig, 0, 64);  // Zero out the raw sig as the decoded integers may not touch all bytes
   2284a:	687b      	ldr	r3, [r7, #4]
   2284c:	2240      	movs	r2, #64	; 0x40
   2284e:	2100      	movs	r1, #0
   22850:	0018      	movs	r0, r3
   22852:	f002 ff6a 	bl	2572a <memset>

    }
    if (int_data_size <= 32)
   22856:	697b      	ldr	r3, [r7, #20]
   22858:	2b20      	cmp	r3, #32
   2285a:	d80e      	bhi.n	2287a <atcacert_der_dec_ecdsa_sig_value+0x1c2>
    {
        if (raw_sig != NULL)
   2285c:	687b      	ldr	r3, [r7, #4]
   2285e:	2b00      	cmp	r3, #0
   22860:	d023      	beq.n	228aa <atcacert_der_dec_ecdsa_sig_value+0x1f2>
        {
            memcpy(&raw_sig[32 - int_data_size], &int_data[0], int_data_size);
   22862:	697b      	ldr	r3, [r7, #20]
   22864:	2220      	movs	r2, #32
   22866:	1ad3      	subs	r3, r2, r3
   22868:	687a      	ldr	r2, [r7, #4]
   2286a:	18d3      	adds	r3, r2, r3
   2286c:	697a      	ldr	r2, [r7, #20]
   2286e:	2118      	movs	r1, #24
   22870:	1879      	adds	r1, r7, r1
   22872:	0018      	movs	r0, r3
   22874:	f002 ff3b 	bl	256ee <memcpy>
   22878:	e017      	b.n	228aa <atcacert_der_dec_ecdsa_sig_value+0x1f2>
        }
    }
    else if (int_data_size == 33)
   2287a:	697b      	ldr	r3, [r7, #20]
   2287c:	2b21      	cmp	r3, #33	; 0x21
   2287e:	d112      	bne.n	228a6 <atcacert_der_dec_ecdsa_sig_value+0x1ee>
    {
        if (int_data[0] != 0x00)
   22880:	2318      	movs	r3, #24
   22882:	18fb      	adds	r3, r7, r3
   22884:	781b      	ldrb	r3, [r3, #0]
   22886:	2b00      	cmp	r3, #0
   22888:	d001      	beq.n	2288e <atcacert_der_dec_ecdsa_sig_value+0x1d6>
        {
            return ATCACERT_E_DECODING_ERROR;  // R integer is too large
   2288a:	2304      	movs	r3, #4
   2288c:	e072      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
        }
        // DER integer was 0-padded to keep it positive
        if (raw_sig != NULL)
   2288e:	687b      	ldr	r3, [r7, #4]
   22890:	2b00      	cmp	r3, #0
   22892:	d00a      	beq.n	228aa <atcacert_der_dec_ecdsa_sig_value+0x1f2>
        {
            memcpy(&raw_sig[0], &int_data[1], 32);
   22894:	2318      	movs	r3, #24
   22896:	18fb      	adds	r3, r7, r3
   22898:	1c59      	adds	r1, r3, #1
   2289a:	687b      	ldr	r3, [r7, #4]
   2289c:	2220      	movs	r2, #32
   2289e:	0018      	movs	r0, r3
   228a0:	f002 ff25 	bl	256ee <memcpy>
   228a4:	e001      	b.n	228aa <atcacert_der_dec_ecdsa_sig_value+0x1f2>
        }
    }
    else
    {
        return ATCACERT_E_DECODING_ERROR; // R integer is too large
   228a6:	2304      	movs	r3, #4
   228a8:	e064      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>

    }
    // S integer
    if (curr_idx >= *der_sig_size)
   228aa:	68bb      	ldr	r3, [r7, #8]
   228ac:	681a      	ldr	r2, [r3, #0]
   228ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   228b0:	429a      	cmp	r2, r3
   228b2:	d801      	bhi.n	228b8 <atcacert_der_dec_ecdsa_sig_value+0x200>
    {
        return ATCACERT_E_DECODING_ERROR;  // No data left
   228b4:	2304      	movs	r3, #4
   228b6:	e05d      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    s_size = *der_sig_size - curr_idx;
   228b8:	68bb      	ldr	r3, [r7, #8]
   228ba:	681a      	ldr	r2, [r3, #0]
   228bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   228be:	1ad3      	subs	r3, r2, r3
   228c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    int_data_size = sizeof(int_data);
   228c2:	2321      	movs	r3, #33	; 0x21
   228c4:	617b      	str	r3, [r7, #20]
    ret = atcacert_der_dec_integer(&der_sig[curr_idx], &s_size, int_data, &int_data_size);
   228c6:	68fa      	ldr	r2, [r7, #12]
   228c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   228ca:	18d0      	adds	r0, r2, r3
   228cc:	2314      	movs	r3, #20
   228ce:	18fb      	adds	r3, r7, r3
   228d0:	2218      	movs	r2, #24
   228d2:	18ba      	adds	r2, r7, r2
   228d4:	213c      	movs	r1, #60	; 0x3c
   228d6:	1879      	adds	r1, r7, r1
   228d8:	f7ff fde0 	bl	2249c <atcacert_der_dec_integer>
   228dc:	0003      	movs	r3, r0
   228de:	657b      	str	r3, [r7, #84]	; 0x54
    if (ret != ATCACERT_E_SUCCESS)
   228e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   228e2:	2b00      	cmp	r3, #0
   228e4:	d001      	beq.n	228ea <atcacert_der_dec_ecdsa_sig_value+0x232>
    {
        return ret;  // Failed to decode length
   228e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   228e8:	e044      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
    }
    curr_idx += s_size;
   228ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   228ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   228ee:	18d3      	adds	r3, r2, r3
   228f0:	653b      	str	r3, [r7, #80]	; 0x50

    if (int_data_size <= 32)
   228f2:	697b      	ldr	r3, [r7, #20]
   228f4:	2b20      	cmp	r3, #32
   228f6:	d80e      	bhi.n	22916 <atcacert_der_dec_ecdsa_sig_value+0x25e>
    {
        if (raw_sig != NULL)
   228f8:	687b      	ldr	r3, [r7, #4]
   228fa:	2b00      	cmp	r3, #0
   228fc:	d025      	beq.n	2294a <atcacert_der_dec_ecdsa_sig_value+0x292>
        {
            memcpy(&raw_sig[64 - int_data_size], &int_data[0], int_data_size);
   228fe:	697b      	ldr	r3, [r7, #20]
   22900:	2240      	movs	r2, #64	; 0x40
   22902:	1ad3      	subs	r3, r2, r3
   22904:	687a      	ldr	r2, [r7, #4]
   22906:	18d3      	adds	r3, r2, r3
   22908:	697a      	ldr	r2, [r7, #20]
   2290a:	2118      	movs	r1, #24
   2290c:	1879      	adds	r1, r7, r1
   2290e:	0018      	movs	r0, r3
   22910:	f002 feed 	bl	256ee <memcpy>
   22914:	e019      	b.n	2294a <atcacert_der_dec_ecdsa_sig_value+0x292>
        }
    }
    else if (int_data_size == 33)
   22916:	697b      	ldr	r3, [r7, #20]
   22918:	2b21      	cmp	r3, #33	; 0x21
   2291a:	d114      	bne.n	22946 <atcacert_der_dec_ecdsa_sig_value+0x28e>
    {
        if (int_data[0] != 0x00)
   2291c:	2318      	movs	r3, #24
   2291e:	18fb      	adds	r3, r7, r3
   22920:	781b      	ldrb	r3, [r3, #0]
   22922:	2b00      	cmp	r3, #0
   22924:	d001      	beq.n	2292a <atcacert_der_dec_ecdsa_sig_value+0x272>
        {
            return ATCACERT_E_DECODING_ERROR;  // S integer is too large
   22926:	2304      	movs	r3, #4
   22928:	e024      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>
        }
        // DER integer was 0-padded to keep it positive
        if (raw_sig != NULL)
   2292a:	687b      	ldr	r3, [r7, #4]
   2292c:	2b00      	cmp	r3, #0
   2292e:	d00c      	beq.n	2294a <atcacert_der_dec_ecdsa_sig_value+0x292>
        {
            memcpy(&raw_sig[32], &int_data[1], 32);
   22930:	687b      	ldr	r3, [r7, #4]
   22932:	3320      	adds	r3, #32
   22934:	0018      	movs	r0, r3
   22936:	2318      	movs	r3, #24
   22938:	18fb      	adds	r3, r7, r3
   2293a:	3301      	adds	r3, #1
   2293c:	2220      	movs	r2, #32
   2293e:	0019      	movs	r1, r3
   22940:	f002 fed5 	bl	256ee <memcpy>
   22944:	e001      	b.n	2294a <atcacert_der_dec_ecdsa_sig_value+0x292>
        }
    }
    else
    {
        return ATCACERT_E_DECODING_ERROR; // S integer is too large
   22946:	2304      	movs	r3, #4
   22948:	e014      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>

    }
    if (seq_length != r_size + s_size)
   2294a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2294c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2294e:	18d2      	adds	r2, r2, r3
   22950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   22952:	429a      	cmp	r2, r3
   22954:	d001      	beq.n	2295a <atcacert_der_dec_ecdsa_sig_value+0x2a2>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unexpected extra data in sequence
   22956:	2304      	movs	r3, #4
   22958:	e00c      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>

    }
    if (bs_length != r_size + s_size + 3)
   2295a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2295e:	18d3      	adds	r3, r2, r3
   22960:	1cda      	adds	r2, r3, #3
   22962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   22964:	429a      	cmp	r2, r3
   22966:	d001      	beq.n	2296c <atcacert_der_dec_ecdsa_sig_value+0x2b4>
    {
        return ATCACERT_E_DECODING_ERROR;  // Unexpected extra data in bit string
   22968:	2304      	movs	r3, #4
   2296a:	e003      	b.n	22974 <atcacert_der_dec_ecdsa_sig_value+0x2bc>

    }
    *der_sig_size = curr_idx;
   2296c:	68bb      	ldr	r3, [r7, #8]
   2296e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   22970:	601a      	str	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
   22972:	2300      	movs	r3, #0
}
   22974:	0018      	movs	r0, r3
   22976:	46bd      	mov	sp, r7
   22978:	b016      	add	sp, #88	; 0x58
   2297a:	bd80      	pop	{r7, pc}

0002297c <build_and_save_cert>:
    const uint8_t            public_key[64],
    const uint8_t            signer_id[2],
    const atcacert_tm_utc_t* issue_date,
    const uint8_t            config32[32],
    uint8_t                  ca_slot)
{
   2297c:	b590      	push	{r4, r7, lr}
   2297e:	b0d5      	sub	sp, #340	; 0x154
   22980:	af02      	add	r7, sp, #8
   22982:	60f8      	str	r0, [r7, #12]
   22984:	60b9      	str	r1, [r7, #8]
   22986:	607a      	str	r2, [r7, #4]
   22988:	603b      	str	r3, [r7, #0]
    int ret;
    atcacert_build_state_t build_state;
    uint8_t tbs_digest[32];
    uint8_t signature[64];
    size_t max_cert_size = *cert_size;
   2298a:	687b      	ldr	r3, [r7, #4]
   2298c:	681b      	ldr	r3, [r3, #0]
   2298e:	229e      	movs	r2, #158	; 0x9e
   22990:	0052      	lsls	r2, r2, #1
   22992:	18ba      	adds	r2, r7, r2
   22994:	6013      	str	r3, [r2, #0]
    atcacert_tm_utc_t expire_date = {
   22996:	239c      	movs	r3, #156	; 0x9c
   22998:	18fb      	adds	r3, r7, r3
   2299a:	2200      	movs	r2, #0
   2299c:	601a      	str	r2, [r3, #0]
   2299e:	239c      	movs	r3, #156	; 0x9c
   229a0:	18fb      	adds	r3, r7, r3
   229a2:	2200      	movs	r2, #0
   229a4:	605a      	str	r2, [r3, #4]
        .tm_year = issue_date->tm_year + cert_def->expire_years,
        .tm_mon  = issue_date->tm_mon,
        .tm_mday = issue_date->tm_mday,
        .tm_hour = issue_date->tm_hour,
   229a6:	23b0      	movs	r3, #176	; 0xb0
   229a8:	005b      	lsls	r3, r3, #1
   229aa:	18fb      	adds	r3, r7, r3
   229ac:	681b      	ldr	r3, [r3, #0]
   229ae:	689a      	ldr	r2, [r3, #8]
    int ret;
    atcacert_build_state_t build_state;
    uint8_t tbs_digest[32];
    uint8_t signature[64];
    size_t max_cert_size = *cert_size;
    atcacert_tm_utc_t expire_date = {
   229b0:	239c      	movs	r3, #156	; 0x9c
   229b2:	18fb      	adds	r3, r7, r3
   229b4:	609a      	str	r2, [r3, #8]
        .tm_year = issue_date->tm_year + cert_def->expire_years,
        .tm_mon  = issue_date->tm_mon,
        .tm_mday = issue_date->tm_mday,
   229b6:	23b0      	movs	r3, #176	; 0xb0
   229b8:	005b      	lsls	r3, r3, #1
   229ba:	18fb      	adds	r3, r7, r3
   229bc:	681b      	ldr	r3, [r3, #0]
   229be:	68da      	ldr	r2, [r3, #12]
    int ret;
    atcacert_build_state_t build_state;
    uint8_t tbs_digest[32];
    uint8_t signature[64];
    size_t max_cert_size = *cert_size;
    atcacert_tm_utc_t expire_date = {
   229c0:	239c      	movs	r3, #156	; 0x9c
   229c2:	18fb      	adds	r3, r7, r3
   229c4:	60da      	str	r2, [r3, #12]
        .tm_year = issue_date->tm_year + cert_def->expire_years,
        .tm_mon  = issue_date->tm_mon,
   229c6:	23b0      	movs	r3, #176	; 0xb0
   229c8:	005b      	lsls	r3, r3, #1
   229ca:	18fb      	adds	r3, r7, r3
   229cc:	681b      	ldr	r3, [r3, #0]
   229ce:	691a      	ldr	r2, [r3, #16]
    int ret;
    atcacert_build_state_t build_state;
    uint8_t tbs_digest[32];
    uint8_t signature[64];
    size_t max_cert_size = *cert_size;
    atcacert_tm_utc_t expire_date = {
   229d0:	239c      	movs	r3, #156	; 0x9c
   229d2:	18fb      	adds	r3, r7, r3
   229d4:	611a      	str	r2, [r3, #16]
        .tm_year = issue_date->tm_year + cert_def->expire_years,
   229d6:	23b0      	movs	r3, #176	; 0xb0
   229d8:	005b      	lsls	r3, r3, #1
   229da:	18fb      	adds	r3, r7, r3
   229dc:	681b      	ldr	r3, [r3, #0]
   229de:	695b      	ldr	r3, [r3, #20]
   229e0:	68fa      	ldr	r2, [r7, #12]
   229e2:	7c92      	ldrb	r2, [r2, #18]
   229e4:	189a      	adds	r2, r3, r2
    int ret;
    atcacert_build_state_t build_state;
    uint8_t tbs_digest[32];
    uint8_t signature[64];
    size_t max_cert_size = *cert_size;
    atcacert_tm_utc_t expire_date = {
   229e6:	239c      	movs	r3, #156	; 0x9c
   229e8:	18fb      	adds	r3, r7, r3
   229ea:	615a      	str	r2, [r3, #20]
        .tm_mday = issue_date->tm_mday,
        .tm_hour = issue_date->tm_hour,
        .tm_min  = 0,
        .tm_sec  = 0
    };
    const atcacert_device_loc_t config32_dev_loc = {
   229ec:	2394      	movs	r3, #148	; 0x94
   229ee:	18fb      	adds	r3, r7, r3
   229f0:	0018      	movs	r0, r3
   229f2:	2307      	movs	r3, #7
   229f4:	001a      	movs	r2, r3
   229f6:	2100      	movs	r1, #0
   229f8:	f002 fe97 	bl	2572a <memset>
   229fc:	2394      	movs	r3, #148	; 0x94
   229fe:	18fb      	adds	r3, r7, r3
   22a00:	3305      	adds	r3, #5
   22a02:	781a      	ldrb	r2, [r3, #0]
   22a04:	2100      	movs	r1, #0
   22a06:	400a      	ands	r2, r1
   22a08:	1c11      	adds	r1, r2, #0
   22a0a:	2220      	movs	r2, #32
   22a0c:	430a      	orrs	r2, r1
   22a0e:	701a      	strb	r2, [r3, #0]
   22a10:	785a      	ldrb	r2, [r3, #1]
   22a12:	2100      	movs	r1, #0
   22a14:	400a      	ands	r2, r1
   22a16:	705a      	strb	r2, [r3, #1]
        .zone   = DEVZONE_CONFIG,
        .offset = 0,
        .count  = 32
    };
    atcacert_device_loc_t device_locs[4];
    size_t device_locs_count = 0;
   22a18:	2300      	movs	r3, #0
   22a1a:	677b      	str	r3, [r7, #116]	; 0x74
    size_t i;

    if (cert_def->expire_years == 0)
   22a1c:	68fb      	ldr	r3, [r7, #12]
   22a1e:	7c9b      	ldrb	r3, [r3, #18]
   22a20:	2b00      	cmp	r3, #0
   22a22:	d117      	bne.n	22a54 <build_and_save_cert+0xd8>
    {
        ret = atcacert_date_get_max_date(cert_def->expire_date_format, &expire_date);
   22a24:	68fb      	ldr	r3, [r7, #12]
   22a26:	7b5b      	ldrb	r3, [r3, #13]
   22a28:	229c      	movs	r2, #156	; 0x9c
   22a2a:	18ba      	adds	r2, r7, r2
   22a2c:	0011      	movs	r1, r2
   22a2e:	0018      	movs	r0, r3
   22a30:	f7fb fcea 	bl	1e408 <atcacert_date_get_max_date>
   22a34:	0003      	movs	r3, r0
   22a36:	229c      	movs	r2, #156	; 0x9c
   22a38:	0052      	lsls	r2, r2, #1
   22a3a:	18ba      	adds	r2, r7, r2
   22a3c:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   22a3e:	239c      	movs	r3, #156	; 0x9c
   22a40:	005b      	lsls	r3, r3, #1
   22a42:	18fb      	adds	r3, r7, r3
   22a44:	681b      	ldr	r3, [r3, #0]
   22a46:	2b00      	cmp	r3, #0
   22a48:	d004      	beq.n	22a54 <build_and_save_cert+0xd8>
            return ret;
   22a4a:	239c      	movs	r3, #156	; 0x9c
   22a4c:	005b      	lsls	r3, r3, #1
   22a4e:	18fb      	adds	r3, r7, r3
   22a50:	681b      	ldr	r3, [r3, #0]
   22a52:	e24f      	b.n	22ef4 <build_and_save_cert+0x578>
    }

    ret = atcacert_cert_build_start(&build_state, cert_def, cert, cert_size, ca_public_key);
   22a54:	687c      	ldr	r4, [r7, #4]
   22a56:	68ba      	ldr	r2, [r7, #8]
   22a58:	68f9      	ldr	r1, [r7, #12]
   22a5a:	238a      	movs	r3, #138	; 0x8a
   22a5c:	005b      	lsls	r3, r3, #1
   22a5e:	18f8      	adds	r0, r7, r3
   22a60:	683b      	ldr	r3, [r7, #0]
   22a62:	9300      	str	r3, [sp, #0]
   22a64:	0023      	movs	r3, r4
   22a66:	f7fd f997 	bl	1fd98 <atcacert_cert_build_start>
   22a6a:	0003      	movs	r3, r0
   22a6c:	229c      	movs	r2, #156	; 0x9c
   22a6e:	0052      	lsls	r2, r2, #1
   22a70:	18ba      	adds	r2, r7, r2
   22a72:	6013      	str	r3, [r2, #0]
    if (ret != ATCACERT_E_SUCCESS)
   22a74:	239c      	movs	r3, #156	; 0x9c
   22a76:	005b      	lsls	r3, r3, #1
   22a78:	18fb      	adds	r3, r7, r3
   22a7a:	681b      	ldr	r3, [r3, #0]
   22a7c:	2b00      	cmp	r3, #0
   22a7e:	d004      	beq.n	22a8a <build_and_save_cert+0x10e>
        return ret;
   22a80:	239c      	movs	r3, #156	; 0x9c
   22a82:	005b      	lsls	r3, r3, #1
   22a84:	18fb      	adds	r3, r7, r3
   22a86:	681b      	ldr	r3, [r3, #0]
   22a88:	e234      	b.n	22ef4 <build_and_save_cert+0x578>

    ret = atcacert_set_subj_public_key(build_state.cert_def, build_state.cert, *build_state.cert_size, public_key);
   22a8a:	238a      	movs	r3, #138	; 0x8a
   22a8c:	005b      	lsls	r3, r3, #1
   22a8e:	18fb      	adds	r3, r7, r3
   22a90:	6818      	ldr	r0, [r3, #0]
   22a92:	238a      	movs	r3, #138	; 0x8a
   22a94:	005b      	lsls	r3, r3, #1
   22a96:	18fb      	adds	r3, r7, r3
   22a98:	6859      	ldr	r1, [r3, #4]
   22a9a:	238a      	movs	r3, #138	; 0x8a
   22a9c:	005b      	lsls	r3, r3, #1
   22a9e:	18fb      	adds	r3, r7, r3
   22aa0:	689b      	ldr	r3, [r3, #8]
   22aa2:	681a      	ldr	r2, [r3, #0]
   22aa4:	23ac      	movs	r3, #172	; 0xac
   22aa6:	005b      	lsls	r3, r3, #1
   22aa8:	18fb      	adds	r3, r7, r3
   22aaa:	681b      	ldr	r3, [r3, #0]
   22aac:	f7fe f90e 	bl	20ccc <atcacert_set_subj_public_key>
   22ab0:	0003      	movs	r3, r0
   22ab2:	229c      	movs	r2, #156	; 0x9c
   22ab4:	0052      	lsls	r2, r2, #1
   22ab6:	18ba      	adds	r2, r7, r2
   22ab8:	6013      	str	r3, [r2, #0]
    if (ret != ATCACERT_E_SUCCESS)
   22aba:	239c      	movs	r3, #156	; 0x9c
   22abc:	005b      	lsls	r3, r3, #1
   22abe:	18fb      	adds	r3, r7, r3
   22ac0:	681b      	ldr	r3, [r3, #0]
   22ac2:	2b00      	cmp	r3, #0
   22ac4:	d004      	beq.n	22ad0 <build_and_save_cert+0x154>
        return ret;
   22ac6:	239c      	movs	r3, #156	; 0x9c
   22ac8:	005b      	lsls	r3, r3, #1
   22aca:	18fb      	adds	r3, r7, r3
   22acc:	681b      	ldr	r3, [r3, #0]
   22ace:	e211      	b.n	22ef4 <build_and_save_cert+0x578>
    ret = atcacert_set_issue_date(build_state.cert_def, build_state.cert, *build_state.cert_size, issue_date);
   22ad0:	238a      	movs	r3, #138	; 0x8a
   22ad2:	005b      	lsls	r3, r3, #1
   22ad4:	18fb      	adds	r3, r7, r3
   22ad6:	6818      	ldr	r0, [r3, #0]
   22ad8:	238a      	movs	r3, #138	; 0x8a
   22ada:	005b      	lsls	r3, r3, #1
   22adc:	18fb      	adds	r3, r7, r3
   22ade:	6859      	ldr	r1, [r3, #4]
   22ae0:	238a      	movs	r3, #138	; 0x8a
   22ae2:	005b      	lsls	r3, r3, #1
   22ae4:	18fb      	adds	r3, r7, r3
   22ae6:	689b      	ldr	r3, [r3, #8]
   22ae8:	681a      	ldr	r2, [r3, #0]
   22aea:	23b0      	movs	r3, #176	; 0xb0
   22aec:	005b      	lsls	r3, r3, #1
   22aee:	18fb      	adds	r3, r7, r3
   22af0:	681b      	ldr	r3, [r3, #0]
   22af2:	f7fe fa69 	bl	20fc8 <atcacert_set_issue_date>
   22af6:	0003      	movs	r3, r0
   22af8:	229c      	movs	r2, #156	; 0x9c
   22afa:	0052      	lsls	r2, r2, #1
   22afc:	18ba      	adds	r2, r7, r2
   22afe:	6013      	str	r3, [r2, #0]
    if (ret != ATCACERT_E_SUCCESS)
   22b00:	239c      	movs	r3, #156	; 0x9c
   22b02:	005b      	lsls	r3, r3, #1
   22b04:	18fb      	adds	r3, r7, r3
   22b06:	681b      	ldr	r3, [r3, #0]
   22b08:	2b00      	cmp	r3, #0
   22b0a:	d004      	beq.n	22b16 <build_and_save_cert+0x19a>
        return ret;
   22b0c:	239c      	movs	r3, #156	; 0x9c
   22b0e:	005b      	lsls	r3, r3, #1
   22b10:	18fb      	adds	r3, r7, r3
   22b12:	681b      	ldr	r3, [r3, #0]
   22b14:	e1ee      	b.n	22ef4 <build_and_save_cert+0x578>
    ret = atcacert_set_expire_date(build_state.cert_def, build_state.cert, *build_state.cert_size, &expire_date);
   22b16:	238a      	movs	r3, #138	; 0x8a
   22b18:	005b      	lsls	r3, r3, #1
   22b1a:	18fb      	adds	r3, r7, r3
   22b1c:	6818      	ldr	r0, [r3, #0]
   22b1e:	238a      	movs	r3, #138	; 0x8a
   22b20:	005b      	lsls	r3, r3, #1
   22b22:	18fb      	adds	r3, r7, r3
   22b24:	6859      	ldr	r1, [r3, #4]
   22b26:	238a      	movs	r3, #138	; 0x8a
   22b28:	005b      	lsls	r3, r3, #1
   22b2a:	18fb      	adds	r3, r7, r3
   22b2c:	689b      	ldr	r3, [r3, #8]
   22b2e:	681a      	ldr	r2, [r3, #0]
   22b30:	239c      	movs	r3, #156	; 0x9c
   22b32:	18fb      	adds	r3, r7, r3
   22b34:	f7fe fae8 	bl	21108 <atcacert_set_expire_date>
   22b38:	0003      	movs	r3, r0
   22b3a:	229c      	movs	r2, #156	; 0x9c
   22b3c:	0052      	lsls	r2, r2, #1
   22b3e:	18ba      	adds	r2, r7, r2
   22b40:	6013      	str	r3, [r2, #0]
    if (ret != ATCACERT_E_SUCCESS)
   22b42:	239c      	movs	r3, #156	; 0x9c
   22b44:	005b      	lsls	r3, r3, #1
   22b46:	18fb      	adds	r3, r7, r3
   22b48:	681b      	ldr	r3, [r3, #0]
   22b4a:	2b00      	cmp	r3, #0
   22b4c:	d004      	beq.n	22b58 <build_and_save_cert+0x1dc>
        return ret;
   22b4e:	239c      	movs	r3, #156	; 0x9c
   22b50:	005b      	lsls	r3, r3, #1
   22b52:	18fb      	adds	r3, r7, r3
   22b54:	681b      	ldr	r3, [r3, #0]
   22b56:	e1cd      	b.n	22ef4 <build_and_save_cert+0x578>
    ret = atcacert_set_signer_id(build_state.cert_def, build_state.cert, *build_state.cert_size, signer_id);
   22b58:	238a      	movs	r3, #138	; 0x8a
   22b5a:	005b      	lsls	r3, r3, #1
   22b5c:	18fb      	adds	r3, r7, r3
   22b5e:	6818      	ldr	r0, [r3, #0]
   22b60:	238a      	movs	r3, #138	; 0x8a
   22b62:	005b      	lsls	r3, r3, #1
   22b64:	18fb      	adds	r3, r7, r3
   22b66:	6859      	ldr	r1, [r3, #4]
   22b68:	238a      	movs	r3, #138	; 0x8a
   22b6a:	005b      	lsls	r3, r3, #1
   22b6c:	18fb      	adds	r3, r7, r3
   22b6e:	689b      	ldr	r3, [r3, #8]
   22b70:	681a      	ldr	r2, [r3, #0]
   22b72:	23ae      	movs	r3, #174	; 0xae
   22b74:	005b      	lsls	r3, r3, #1
   22b76:	18fb      	adds	r3, r7, r3
   22b78:	681b      	ldr	r3, [r3, #0]
   22b7a:	f7fe fb59 	bl	21230 <atcacert_set_signer_id>
   22b7e:	0003      	movs	r3, r0
   22b80:	229c      	movs	r2, #156	; 0x9c
   22b82:	0052      	lsls	r2, r2, #1
   22b84:	18ba      	adds	r2, r7, r2
   22b86:	6013      	str	r3, [r2, #0]
    if (ret != ATCACERT_E_SUCCESS)
   22b88:	239c      	movs	r3, #156	; 0x9c
   22b8a:	005b      	lsls	r3, r3, #1
   22b8c:	18fb      	adds	r3, r7, r3
   22b8e:	681b      	ldr	r3, [r3, #0]
   22b90:	2b00      	cmp	r3, #0
   22b92:	d004      	beq.n	22b9e <build_and_save_cert+0x222>
        return ret;
   22b94:	239c      	movs	r3, #156	; 0x9c
   22b96:	005b      	lsls	r3, r3, #1
   22b98:	18fb      	adds	r3, r7, r3
   22b9a:	681b      	ldr	r3, [r3, #0]
   22b9c:	e1aa      	b.n	22ef4 <build_and_save_cert+0x578>
    ret = atcacert_cert_build_process(&build_state, &config32_dev_loc, config32);
   22b9e:	23b2      	movs	r3, #178	; 0xb2
   22ba0:	005b      	lsls	r3, r3, #1
   22ba2:	18fb      	adds	r3, r7, r3
   22ba4:	681a      	ldr	r2, [r3, #0]
   22ba6:	2394      	movs	r3, #148	; 0x94
   22ba8:	18f9      	adds	r1, r7, r3
   22baa:	238a      	movs	r3, #138	; 0x8a
   22bac:	005b      	lsls	r3, r3, #1
   22bae:	18fb      	adds	r3, r7, r3
   22bb0:	0018      	movs	r0, r3
   22bb2:	f7fd fad7 	bl	20164 <atcacert_cert_build_process>
   22bb6:	0003      	movs	r3, r0
   22bb8:	229c      	movs	r2, #156	; 0x9c
   22bba:	0052      	lsls	r2, r2, #1
   22bbc:	18ba      	adds	r2, r7, r2
   22bbe:	6013      	str	r3, [r2, #0]
    if (ret != ATCACERT_E_SUCCESS)
   22bc0:	239c      	movs	r3, #156	; 0x9c
   22bc2:	005b      	lsls	r3, r3, #1
   22bc4:	18fb      	adds	r3, r7, r3
   22bc6:	681b      	ldr	r3, [r3, #0]
   22bc8:	2b00      	cmp	r3, #0
   22bca:	d004      	beq.n	22bd6 <build_and_save_cert+0x25a>
        return ret;
   22bcc:	239c      	movs	r3, #156	; 0x9c
   22bce:	005b      	lsls	r3, r3, #1
   22bd0:	18fb      	adds	r3, r7, r3
   22bd2:	681b      	ldr	r3, [r3, #0]
   22bd4:	e18e      	b.n	22ef4 <build_and_save_cert+0x578>

    ret = atcacert_cert_build_finish(&build_state);
   22bd6:	238a      	movs	r3, #138	; 0x8a
   22bd8:	005b      	lsls	r3, r3, #1
   22bda:	18fb      	adds	r3, r7, r3
   22bdc:	0018      	movs	r0, r3
   22bde:	f7fd fdab 	bl	20738 <atcacert_cert_build_finish>
   22be2:	0003      	movs	r3, r0
   22be4:	229c      	movs	r2, #156	; 0x9c
   22be6:	0052      	lsls	r2, r2, #1
   22be8:	18ba      	adds	r2, r7, r2
   22bea:	6013      	str	r3, [r2, #0]
    if (ret != ATCACERT_E_SUCCESS)
   22bec:	239c      	movs	r3, #156	; 0x9c
   22bee:	005b      	lsls	r3, r3, #1
   22bf0:	18fb      	adds	r3, r7, r3
   22bf2:	681b      	ldr	r3, [r3, #0]
   22bf4:	2b00      	cmp	r3, #0
   22bf6:	d004      	beq.n	22c02 <build_and_save_cert+0x286>
        return ret;
   22bf8:	239c      	movs	r3, #156	; 0x9c
   22bfa:	005b      	lsls	r3, r3, #1
   22bfc:	18fb      	adds	r3, r7, r3
   22bfe:	681b      	ldr	r3, [r3, #0]
   22c00:	e178      	b.n	22ef4 <build_and_save_cert+0x578>

    ret = atcacert_get_tbs_digest(build_state.cert_def, build_state.cert, *build_state.cert_size, tbs_digest);
   22c02:	238a      	movs	r3, #138	; 0x8a
   22c04:	005b      	lsls	r3, r3, #1
   22c06:	18fb      	adds	r3, r7, r3
   22c08:	6818      	ldr	r0, [r3, #0]
   22c0a:	238a      	movs	r3, #138	; 0x8a
   22c0c:	005b      	lsls	r3, r3, #1
   22c0e:	18fb      	adds	r3, r7, r3
   22c10:	6859      	ldr	r1, [r3, #4]
   22c12:	238a      	movs	r3, #138	; 0x8a
   22c14:	005b      	lsls	r3, r3, #1
   22c16:	18fb      	adds	r3, r7, r3
   22c18:	689b      	ldr	r3, [r3, #8]
   22c1a:	681a      	ldr	r2, [r3, #0]
   22c1c:	23f4      	movs	r3, #244	; 0xf4
   22c1e:	18fb      	adds	r3, r7, r3
   22c20:	f7ff f8f4 	bl	21e0c <atcacert_get_tbs_digest>
   22c24:	0003      	movs	r3, r0
   22c26:	229c      	movs	r2, #156	; 0x9c
   22c28:	0052      	lsls	r2, r2, #1
   22c2a:	18ba      	adds	r2, r7, r2
   22c2c:	6013      	str	r3, [r2, #0]
    if (ret != ATCACERT_E_SUCCESS)
   22c2e:	239c      	movs	r3, #156	; 0x9c
   22c30:	005b      	lsls	r3, r3, #1
   22c32:	18fb      	adds	r3, r7, r3
   22c34:	681b      	ldr	r3, [r3, #0]
   22c36:	2b00      	cmp	r3, #0
   22c38:	d004      	beq.n	22c44 <build_and_save_cert+0x2c8>
        return ret;
   22c3a:	239c      	movs	r3, #156	; 0x9c
   22c3c:	005b      	lsls	r3, r3, #1
   22c3e:	18fb      	adds	r3, r7, r3
   22c40:	681b      	ldr	r3, [r3, #0]
   22c42:	e157      	b.n	22ef4 <build_and_save_cert+0x578>

    ret = atcab_sign(ca_slot, tbs_digest, signature);
   22c44:	23b4      	movs	r3, #180	; 0xb4
   22c46:	005b      	lsls	r3, r3, #1
   22c48:	18fb      	adds	r3, r7, r3
   22c4a:	781b      	ldrb	r3, [r3, #0]
   22c4c:	b29b      	uxth	r3, r3
   22c4e:	22b4      	movs	r2, #180	; 0xb4
   22c50:	18ba      	adds	r2, r7, r2
   22c52:	21f4      	movs	r1, #244	; 0xf4
   22c54:	1879      	adds	r1, r7, r1
   22c56:	0018      	movs	r0, r3
   22c58:	f7f8 f9c4 	bl	1afe4 <atcab_sign>
   22c5c:	0003      	movs	r3, r0
   22c5e:	229c      	movs	r2, #156	; 0x9c
   22c60:	0052      	lsls	r2, r2, #1
   22c62:	18ba      	adds	r2, r7, r2
   22c64:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   22c66:	239c      	movs	r3, #156	; 0x9c
   22c68:	005b      	lsls	r3, r3, #1
   22c6a:	18fb      	adds	r3, r7, r3
   22c6c:	681b      	ldr	r3, [r3, #0]
   22c6e:	2b00      	cmp	r3, #0
   22c70:	d004      	beq.n	22c7c <build_and_save_cert+0x300>
        return ret;
   22c72:	239c      	movs	r3, #156	; 0x9c
   22c74:	005b      	lsls	r3, r3, #1
   22c76:	18fb      	adds	r3, r7, r3
   22c78:	681b      	ldr	r3, [r3, #0]
   22c7a:	e13b      	b.n	22ef4 <build_and_save_cert+0x578>

    ret = atcacert_set_signature(cert_def, cert, cert_size, max_cert_size, signature);
   22c7c:	239e      	movs	r3, #158	; 0x9e
   22c7e:	005b      	lsls	r3, r3, #1
   22c80:	18fb      	adds	r3, r7, r3
   22c82:	681c      	ldr	r4, [r3, #0]
   22c84:	687a      	ldr	r2, [r7, #4]
   22c86:	68b9      	ldr	r1, [r7, #8]
   22c88:	68f8      	ldr	r0, [r7, #12]
   22c8a:	23b4      	movs	r3, #180	; 0xb4
   22c8c:	18fb      	adds	r3, r7, r3
   22c8e:	9300      	str	r3, [sp, #0]
   22c90:	0023      	movs	r3, r4
   22c92:	f7fe f88f 	bl	20db4 <atcacert_set_signature>
   22c96:	0003      	movs	r3, r0
   22c98:	229c      	movs	r2, #156	; 0x9c
   22c9a:	0052      	lsls	r2, r2, #1
   22c9c:	18ba      	adds	r2, r7, r2
   22c9e:	6013      	str	r3, [r2, #0]
    if (ret != ATCACERT_E_SUCCESS)
   22ca0:	239c      	movs	r3, #156	; 0x9c
   22ca2:	005b      	lsls	r3, r3, #1
   22ca4:	18fb      	adds	r3, r7, r3
   22ca6:	681b      	ldr	r3, [r3, #0]
   22ca8:	2b00      	cmp	r3, #0
   22caa:	d004      	beq.n	22cb6 <build_and_save_cert+0x33a>
        return ret;
   22cac:	239c      	movs	r3, #156	; 0x9c
   22cae:	005b      	lsls	r3, r3, #1
   22cb0:	18fb      	adds	r3, r7, r3
   22cb2:	681b      	ldr	r3, [r3, #0]
   22cb4:	e11e      	b.n	22ef4 <build_and_save_cert+0x578>

    ret = atcacert_get_device_locs(cert_def, device_locs, &device_locs_count, sizeof(device_locs) / sizeof(device_locs[0]), 32);
   22cb6:	2374      	movs	r3, #116	; 0x74
   22cb8:	18fa      	adds	r2, r7, r3
   22cba:	2378      	movs	r3, #120	; 0x78
   22cbc:	18f9      	adds	r1, r7, r3
   22cbe:	68f8      	ldr	r0, [r7, #12]
   22cc0:	2320      	movs	r3, #32
   22cc2:	9300      	str	r3, [sp, #0]
   22cc4:	2304      	movs	r3, #4
   22cc6:	f7fc febf 	bl	1fa48 <atcacert_get_device_locs>
   22cca:	0003      	movs	r3, r0
   22ccc:	229c      	movs	r2, #156	; 0x9c
   22cce:	0052      	lsls	r2, r2, #1
   22cd0:	18ba      	adds	r2, r7, r2
   22cd2:	6013      	str	r3, [r2, #0]
    if (ret != ATCACERT_E_SUCCESS)
   22cd4:	239c      	movs	r3, #156	; 0x9c
   22cd6:	005b      	lsls	r3, r3, #1
   22cd8:	18fb      	adds	r3, r7, r3
   22cda:	681b      	ldr	r3, [r3, #0]
   22cdc:	2b00      	cmp	r3, #0
   22cde:	d004      	beq.n	22cea <build_and_save_cert+0x36e>
        return ret;
   22ce0:	239c      	movs	r3, #156	; 0x9c
   22ce2:	005b      	lsls	r3, r3, #1
   22ce4:	18fb      	adds	r3, r7, r3
   22ce6:	681b      	ldr	r3, [r3, #0]
   22ce8:	e104      	b.n	22ef4 <build_and_save_cert+0x578>

    for (i = 0; i < device_locs_count; i++)
   22cea:	2300      	movs	r3, #0
   22cec:	22a2      	movs	r2, #162	; 0xa2
   22cee:	0052      	lsls	r2, r2, #1
   22cf0:	18ba      	adds	r2, r7, r2
   22cf2:	6013      	str	r3, [r2, #0]
   22cf4:	e0f5      	b.n	22ee2 <build_and_save_cert+0x566>
        size_t end_block;
        size_t start_block;
        size_t block;
        uint8_t data[96];

        if (device_locs[i].zone == DEVZONE_CONFIG)
   22cf6:	2378      	movs	r3, #120	; 0x78
   22cf8:	18f9      	adds	r1, r7, r3
   22cfa:	23a2      	movs	r3, #162	; 0xa2
   22cfc:	005b      	lsls	r3, r3, #1
   22cfe:	18fb      	adds	r3, r7, r3
   22d00:	681a      	ldr	r2, [r3, #0]
   22d02:	0013      	movs	r3, r2
   22d04:	00db      	lsls	r3, r3, #3
   22d06:	1a9b      	subs	r3, r3, r2
   22d08:	5c5b      	ldrb	r3, [r3, r1]
   22d0a:	2b00      	cmp	r3, #0
   22d0c:	d100      	bne.n	22d10 <build_and_save_cert+0x394>
   22d0e:	e0dc      	b.n	22eca <build_and_save_cert+0x54e>
            continue;
        if (device_locs[i].zone == DEVZONE_DATA && device_locs[i].is_genkey)
   22d10:	2378      	movs	r3, #120	; 0x78
   22d12:	18f9      	adds	r1, r7, r3
   22d14:	23a2      	movs	r3, #162	; 0xa2
   22d16:	005b      	lsls	r3, r3, #1
   22d18:	18fb      	adds	r3, r7, r3
   22d1a:	681a      	ldr	r2, [r3, #0]
   22d1c:	0013      	movs	r3, r2
   22d1e:	00db      	lsls	r3, r3, #3
   22d20:	1a9b      	subs	r3, r3, r2
   22d22:	5c5b      	ldrb	r3, [r3, r1]
   22d24:	2b02      	cmp	r3, #2
   22d26:	d10e      	bne.n	22d46 <build_and_save_cert+0x3ca>
   22d28:	2378      	movs	r3, #120	; 0x78
   22d2a:	18f9      	adds	r1, r7, r3
   22d2c:	23a2      	movs	r3, #162	; 0xa2
   22d2e:	005b      	lsls	r3, r3, #1
   22d30:	18fb      	adds	r3, r7, r3
   22d32:	681a      	ldr	r2, [r3, #0]
   22d34:	0013      	movs	r3, r2
   22d36:	00db      	lsls	r3, r3, #3
   22d38:	1a9b      	subs	r3, r3, r2
   22d3a:	18cb      	adds	r3, r1, r3
   22d3c:	3302      	adds	r3, #2
   22d3e:	781b      	ldrb	r3, [r3, #0]
   22d40:	2b00      	cmp	r3, #0
   22d42:	d000      	beq.n	22d46 <build_and_save_cert+0x3ca>
   22d44:	e0c3      	b.n	22ece <build_and_save_cert+0x552>
            continue;

        ret = atcacert_get_device_data(cert_def, cert, *cert_size, &device_locs[i], data);
   22d46:	687b      	ldr	r3, [r7, #4]
   22d48:	681c      	ldr	r4, [r3, #0]
   22d4a:	2378      	movs	r3, #120	; 0x78
   22d4c:	18f9      	adds	r1, r7, r3
   22d4e:	23a2      	movs	r3, #162	; 0xa2
   22d50:	005b      	lsls	r3, r3, #1
   22d52:	18fb      	adds	r3, r7, r3
   22d54:	681a      	ldr	r2, [r3, #0]
   22d56:	0013      	movs	r3, r2
   22d58:	00db      	lsls	r3, r3, #3
   22d5a:	1a9b      	subs	r3, r3, r2
   22d5c:	18ca      	adds	r2, r1, r3
   22d5e:	68b9      	ldr	r1, [r7, #8]
   22d60:	68f8      	ldr	r0, [r7, #12]
   22d62:	2314      	movs	r3, #20
   22d64:	18fb      	adds	r3, r7, r3
   22d66:	9300      	str	r3, [sp, #0]
   22d68:	0013      	movs	r3, r2
   22d6a:	0022      	movs	r2, r4
   22d6c:	f7fd fde2 	bl	20934 <atcacert_get_device_data>
   22d70:	0003      	movs	r3, r0
   22d72:	229c      	movs	r2, #156	; 0x9c
   22d74:	0052      	lsls	r2, r2, #1
   22d76:	18ba      	adds	r2, r7, r2
   22d78:	6013      	str	r3, [r2, #0]
        if (ret != ATCACERT_E_SUCCESS)
   22d7a:	239c      	movs	r3, #156	; 0x9c
   22d7c:	005b      	lsls	r3, r3, #1
   22d7e:	18fb      	adds	r3, r7, r3
   22d80:	681b      	ldr	r3, [r3, #0]
   22d82:	2b00      	cmp	r3, #0
   22d84:	d004      	beq.n	22d90 <build_and_save_cert+0x414>
            return ret;
   22d86:	239c      	movs	r3, #156	; 0x9c
   22d88:	005b      	lsls	r3, r3, #1
   22d8a:	18fb      	adds	r3, r7, r3
   22d8c:	681b      	ldr	r3, [r3, #0]
   22d8e:	e0b1      	b.n	22ef4 <build_and_save_cert+0x578>

        start_block = device_locs[i].offset / 32;
   22d90:	2378      	movs	r3, #120	; 0x78
   22d92:	18fa      	adds	r2, r7, r3
   22d94:	23a2      	movs	r3, #162	; 0xa2
   22d96:	005b      	lsls	r3, r3, #1
   22d98:	18fb      	adds	r3, r7, r3
   22d9a:	6819      	ldr	r1, [r3, #0]
   22d9c:	000b      	movs	r3, r1
   22d9e:	00db      	lsls	r3, r3, #3
   22da0:	1a5b      	subs	r3, r3, r1
   22da2:	18d1      	adds	r1, r2, r3
   22da4:	78c9      	ldrb	r1, [r1, #3]
   22da6:	18d3      	adds	r3, r2, r3
   22da8:	791b      	ldrb	r3, [r3, #4]
   22daa:	021b      	lsls	r3, r3, #8
   22dac:	430b      	orrs	r3, r1
   22dae:	b29b      	uxth	r3, r3
   22db0:	095b      	lsrs	r3, r3, #5
   22db2:	b29b      	uxth	r3, r3
   22db4:	229a      	movs	r2, #154	; 0x9a
   22db6:	0052      	lsls	r2, r2, #1
   22db8:	18ba      	adds	r2, r7, r2
   22dba:	6013      	str	r3, [r2, #0]
        end_block = (device_locs[i].offset + device_locs[i].count) / 32;
   22dbc:	2378      	movs	r3, #120	; 0x78
   22dbe:	18fa      	adds	r2, r7, r3
   22dc0:	23a2      	movs	r3, #162	; 0xa2
   22dc2:	005b      	lsls	r3, r3, #1
   22dc4:	18fb      	adds	r3, r7, r3
   22dc6:	6819      	ldr	r1, [r3, #0]
   22dc8:	000b      	movs	r3, r1
   22dca:	00db      	lsls	r3, r3, #3
   22dcc:	1a5b      	subs	r3, r3, r1
   22dce:	18d1      	adds	r1, r2, r3
   22dd0:	78c9      	ldrb	r1, [r1, #3]
   22dd2:	18d3      	adds	r3, r2, r3
   22dd4:	791b      	ldrb	r3, [r3, #4]
   22dd6:	021b      	lsls	r3, r3, #8
   22dd8:	430b      	orrs	r3, r1
   22dda:	b29b      	uxth	r3, r3
   22ddc:	0018      	movs	r0, r3
   22dde:	2378      	movs	r3, #120	; 0x78
   22de0:	18fa      	adds	r2, r7, r3
   22de2:	23a2      	movs	r3, #162	; 0xa2
   22de4:	005b      	lsls	r3, r3, #1
   22de6:	18fb      	adds	r3, r7, r3
   22de8:	6819      	ldr	r1, [r3, #0]
   22dea:	000b      	movs	r3, r1
   22dec:	00db      	lsls	r3, r3, #3
   22dee:	1a5b      	subs	r3, r3, r1
   22df0:	18d1      	adds	r1, r2, r3
   22df2:	7949      	ldrb	r1, [r1, #5]
   22df4:	18d3      	adds	r3, r2, r3
   22df6:	799b      	ldrb	r3, [r3, #6]
   22df8:	021b      	lsls	r3, r3, #8
   22dfa:	430b      	orrs	r3, r1
   22dfc:	b29b      	uxth	r3, r3
   22dfe:	18c3      	adds	r3, r0, r3
   22e00:	2b00      	cmp	r3, #0
   22e02:	da00      	bge.n	22e06 <build_and_save_cert+0x48a>
   22e04:	331f      	adds	r3, #31
   22e06:	115b      	asrs	r3, r3, #5
   22e08:	2298      	movs	r2, #152	; 0x98
   22e0a:	0052      	lsls	r2, r2, #1
   22e0c:	18ba      	adds	r2, r7, r2
   22e0e:	6013      	str	r3, [r2, #0]
        for (block = start_block; block < end_block; block++)
   22e10:	239a      	movs	r3, #154	; 0x9a
   22e12:	005b      	lsls	r3, r3, #1
   22e14:	18fb      	adds	r3, r7, r3
   22e16:	681b      	ldr	r3, [r3, #0]
   22e18:	22a0      	movs	r2, #160	; 0xa0
   22e1a:	0052      	lsls	r2, r2, #1
   22e1c:	18ba      	adds	r2, r7, r2
   22e1e:	6013      	str	r3, [r2, #0]
   22e20:	e048      	b.n	22eb4 <build_and_save_cert+0x538>
        {
            ret = atcab_write_zone(device_locs[i].zone, device_locs[i].slot, (uint8_t)block, 0, &data[(block - start_block) * 32], 32);
   22e22:	2378      	movs	r3, #120	; 0x78
   22e24:	18f9      	adds	r1, r7, r3
   22e26:	23a2      	movs	r3, #162	; 0xa2
   22e28:	005b      	lsls	r3, r3, #1
   22e2a:	18fb      	adds	r3, r7, r3
   22e2c:	681a      	ldr	r2, [r3, #0]
   22e2e:	0013      	movs	r3, r2
   22e30:	00db      	lsls	r3, r3, #3
   22e32:	1a9b      	subs	r3, r3, r2
   22e34:	5c58      	ldrb	r0, [r3, r1]
   22e36:	2378      	movs	r3, #120	; 0x78
   22e38:	18f9      	adds	r1, r7, r3
   22e3a:	23a2      	movs	r3, #162	; 0xa2
   22e3c:	005b      	lsls	r3, r3, #1
   22e3e:	18fb      	adds	r3, r7, r3
   22e40:	681a      	ldr	r2, [r3, #0]
   22e42:	0013      	movs	r3, r2
   22e44:	00db      	lsls	r3, r3, #3
   22e46:	1a9b      	subs	r3, r3, r2
   22e48:	18cb      	adds	r3, r1, r3
   22e4a:	3301      	adds	r3, #1
   22e4c:	781b      	ldrb	r3, [r3, #0]
   22e4e:	b299      	uxth	r1, r3
   22e50:	23a0      	movs	r3, #160	; 0xa0
   22e52:	005b      	lsls	r3, r3, #1
   22e54:	18fb      	adds	r3, r7, r3
   22e56:	681b      	ldr	r3, [r3, #0]
   22e58:	b2dc      	uxtb	r4, r3
   22e5a:	23a0      	movs	r3, #160	; 0xa0
   22e5c:	005b      	lsls	r3, r3, #1
   22e5e:	18fb      	adds	r3, r7, r3
   22e60:	681a      	ldr	r2, [r3, #0]
   22e62:	239a      	movs	r3, #154	; 0x9a
   22e64:	005b      	lsls	r3, r3, #1
   22e66:	18fb      	adds	r3, r7, r3
   22e68:	681b      	ldr	r3, [r3, #0]
   22e6a:	1ad3      	subs	r3, r2, r3
   22e6c:	015b      	lsls	r3, r3, #5
   22e6e:	2214      	movs	r2, #20
   22e70:	18ba      	adds	r2, r7, r2
   22e72:	18d3      	adds	r3, r2, r3
   22e74:	2220      	movs	r2, #32
   22e76:	9201      	str	r2, [sp, #4]
   22e78:	9300      	str	r3, [sp, #0]
   22e7a:	2300      	movs	r3, #0
   22e7c:	0022      	movs	r2, r4
   22e7e:	f7f8 fb0b 	bl	1b498 <atcab_write_zone>
   22e82:	0003      	movs	r3, r0
   22e84:	229c      	movs	r2, #156	; 0x9c
   22e86:	0052      	lsls	r2, r2, #1
   22e88:	18ba      	adds	r2, r7, r2
   22e8a:	6013      	str	r3, [r2, #0]
            if (ret != ATCA_SUCCESS)
   22e8c:	239c      	movs	r3, #156	; 0x9c
   22e8e:	005b      	lsls	r3, r3, #1
   22e90:	18fb      	adds	r3, r7, r3
   22e92:	681b      	ldr	r3, [r3, #0]
   22e94:	2b00      	cmp	r3, #0
   22e96:	d004      	beq.n	22ea2 <build_and_save_cert+0x526>
                return ret;
   22e98:	239c      	movs	r3, #156	; 0x9c
   22e9a:	005b      	lsls	r3, r3, #1
   22e9c:	18fb      	adds	r3, r7, r3
   22e9e:	681b      	ldr	r3, [r3, #0]
   22ea0:	e028      	b.n	22ef4 <build_and_save_cert+0x578>
        if (ret != ATCACERT_E_SUCCESS)
            return ret;

        start_block = device_locs[i].offset / 32;
        end_block = (device_locs[i].offset + device_locs[i].count) / 32;
        for (block = start_block; block < end_block; block++)
   22ea2:	23a0      	movs	r3, #160	; 0xa0
   22ea4:	005b      	lsls	r3, r3, #1
   22ea6:	18fb      	adds	r3, r7, r3
   22ea8:	681b      	ldr	r3, [r3, #0]
   22eaa:	3301      	adds	r3, #1
   22eac:	22a0      	movs	r2, #160	; 0xa0
   22eae:	0052      	lsls	r2, r2, #1
   22eb0:	18ba      	adds	r2, r7, r2
   22eb2:	6013      	str	r3, [r2, #0]
   22eb4:	23a0      	movs	r3, #160	; 0xa0
   22eb6:	005b      	lsls	r3, r3, #1
   22eb8:	18fb      	adds	r3, r7, r3
   22eba:	681a      	ldr	r2, [r3, #0]
   22ebc:	2398      	movs	r3, #152	; 0x98
   22ebe:	005b      	lsls	r3, r3, #1
   22ec0:	18fb      	adds	r3, r7, r3
   22ec2:	681b      	ldr	r3, [r3, #0]
   22ec4:	429a      	cmp	r2, r3
   22ec6:	d3ac      	bcc.n	22e22 <build_and_save_cert+0x4a6>
   22ec8:	e002      	b.n	22ed0 <build_and_save_cert+0x554>
        size_t start_block;
        size_t block;
        uint8_t data[96];

        if (device_locs[i].zone == DEVZONE_CONFIG)
            continue;
   22eca:	46c0      	nop			; (mov r8, r8)
   22ecc:	e000      	b.n	22ed0 <build_and_save_cert+0x554>
        if (device_locs[i].zone == DEVZONE_DATA && device_locs[i].is_genkey)
            continue;
   22ece:	46c0      	nop			; (mov r8, r8)

    ret = atcacert_get_device_locs(cert_def, device_locs, &device_locs_count, sizeof(device_locs) / sizeof(device_locs[0]), 32);
    if (ret != ATCACERT_E_SUCCESS)
        return ret;

    for (i = 0; i < device_locs_count; i++)
   22ed0:	23a2      	movs	r3, #162	; 0xa2
   22ed2:	005b      	lsls	r3, r3, #1
   22ed4:	18fb      	adds	r3, r7, r3
   22ed6:	681b      	ldr	r3, [r3, #0]
   22ed8:	3301      	adds	r3, #1
   22eda:	22a2      	movs	r2, #162	; 0xa2
   22edc:	0052      	lsls	r2, r2, #1
   22ede:	18ba      	adds	r2, r7, r2
   22ee0:	6013      	str	r3, [r2, #0]
   22ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   22ee4:	22a2      	movs	r2, #162	; 0xa2
   22ee6:	0052      	lsls	r2, r2, #1
   22ee8:	18ba      	adds	r2, r7, r2
   22eea:	6812      	ldr	r2, [r2, #0]
   22eec:	429a      	cmp	r2, r3
   22eee:	d200      	bcs.n	22ef2 <build_and_save_cert+0x576>
   22ef0:	e701      	b.n	22cf6 <build_and_save_cert+0x37a>
            ret = atcab_write_zone(device_locs[i].zone, device_locs[i].slot, (uint8_t)block, 0, &data[(block - start_block) * 32], 32);
            if (ret != ATCA_SUCCESS)
                return ret;
        }
    }
    return 0;
   22ef2:	2300      	movs	r3, #0
}
   22ef4:	0018      	movs	r0, r3
   22ef6:	46bd      	mov	sp, r7
   22ef8:	b053      	add	sp, #332	; 0x14c
   22efa:	bd90      	pop	{r4, r7, pc}

00022efc <device_init_default>:
 *			run GenKey on private keys to prepare a device for a standard configuration.
 *			This configuration can be used for self-provisioning or as a generic configuration
 *			for illustration, example, or demo purposes.
 */
ATCA_STATUS device_init_default(void)
{
   22efc:	b580      	push	{r7, lr}
   22efe:	af00      	add	r7, sp, #0
    return device_init(&g_cert_def_0_signer, &g_cert_def_0_device);
   22f00:	4a04      	ldr	r2, [pc, #16]	; (22f14 <device_init_default+0x18>)
   22f02:	4b05      	ldr	r3, [pc, #20]	; (22f18 <device_init_default+0x1c>)
   22f04:	0011      	movs	r1, r2
   22f06:	0018      	movs	r0, r3
   22f08:	f000 f808 	bl	22f1c <device_init>
   22f0c:	0003      	movs	r3, r0
}
   22f0e:	0018      	movs	r0, r3
   22f10:	46bd      	mov	sp, r7
   22f12:	bd80      	pop	{r7, pc}
   22f14:	0002e7c8 	.word	0x0002e7c8
   22f18:	0002e778 	.word	0x0002e778

00022f1c <device_init>:
 *			run GenKey on private keys to prepare a device for a standard configuration.
 *			This configuration can be used for self-provisioning or as a generic configuration
 *			for illustration, example, or demo purposes.
 */
ATCA_STATUS device_init(const atcacert_def_t* cert_def_signer, const atcacert_def_t* cert_def_device)
{
   22f1c:	b590      	push	{r4, r7, lr}
   22f1e:	4ce6      	ldr	r4, [pc, #920]	; (232b8 <device_init+0x39c>)
   22f20:	44a5      	add	sp, r4
   22f22:	af06      	add	r7, sp, #24
   22f24:	6078      	str	r0, [r7, #4]
   22f26:	6039      	str	r1, [r7, #0]
    ATCA_STATUS ret = 0;
   22f28:	4be4      	ldr	r3, [pc, #912]	; (232bc <device_init+0x3a0>)
   22f2a:	18fb      	adds	r3, r7, r3
   22f2c:	2200      	movs	r2, #0
   22f2e:	701a      	strb	r2, [r3, #0]
    bool lockstate = 0;
   22f30:	4be3      	ldr	r3, [pc, #908]	; (232c0 <device_init+0x3a4>)
   22f32:	18fb      	adds	r3, r7, r3
   22f34:	2200      	movs	r2, #0
   22f36:	701a      	strb	r2, [r3, #0]
    uint8_t signer_ca_private_key_slot = TLS_SLOT_DEV_CA_PRIV;
   22f38:	4be2      	ldr	r3, [pc, #904]	; (232c4 <device_init+0x3a8>)
   22f3a:	18fb      	adds	r3, r7, r3
   22f3c:	2207      	movs	r2, #7
   22f3e:	701a      	strb	r2, [r3, #0]
    uint8_t signer_private_key_slot = TLS_SLOT_DEV_SIGNER_PRIV;
   22f40:	4be1      	ldr	r3, [pc, #900]	; (232c8 <device_init+0x3ac>)
   22f42:	18fb      	adds	r3, r7, r3
   22f44:	2202      	movs	r2, #2
   22f46:	701a      	strb	r2, [r3, #0]
    uint8_t signer_id[] = { 0xC4, 0x8B };
   22f48:	4be0      	ldr	r3, [pc, #896]	; (232cc <device_init+0x3b0>)
   22f4a:	18fa      	adds	r2, r7, r3
   22f4c:	4be0      	ldr	r3, [pc, #896]	; (232d0 <device_init+0x3b4>)
   22f4e:	0010      	movs	r0, r2
   22f50:	0019      	movs	r1, r3
   22f52:	2302      	movs	r3, #2
   22f54:	001a      	movs	r2, r3
   22f56:	f002 fbca 	bl	256ee <memcpy>
    const atcacert_tm_utc_t signer_issue_date = {
   22f5a:	4bde      	ldr	r3, [pc, #888]	; (232d4 <device_init+0x3b8>)
   22f5c:	18fb      	adds	r3, r7, r3
   22f5e:	4ade      	ldr	r2, [pc, #888]	; (232d8 <device_init+0x3bc>)
   22f60:	ca13      	ldmia	r2!, {r0, r1, r4}
   22f62:	c313      	stmia	r3!, {r0, r1, r4}
   22f64:	ca13      	ldmia	r2!, {r0, r1, r4}
   22f66:	c313      	stmia	r3!, {r0, r1, r4}
        .tm_mday = 2,
        .tm_hour = 20,
        .tm_min  = 0,
        .tm_sec  = 0
    };
    uint8_t device_private_key_slot = 0;
   22f68:	4bdc      	ldr	r3, [pc, #880]	; (232dc <device_init+0x3c0>)
   22f6a:	18fb      	adds	r3, r7, r3
   22f6c:	2200      	movs	r2, #0
   22f6e:	701a      	strb	r2, [r3, #0]
    const atcacert_tm_utc_t device_issue_date = {
   22f70:	4bdb      	ldr	r3, [pc, #876]	; (232e0 <device_init+0x3c4>)
   22f72:	18fb      	adds	r3, r7, r3
   22f74:	4adb      	ldr	r2, [pc, #876]	; (232e4 <device_init+0x3c8>)
   22f76:	ca13      	ldmia	r2!, {r0, r1, r4}
   22f78:	c313      	stmia	r3!, {r0, r1, r4}
   22f7a:	ca13      	ldmia	r2!, {r0, r1, r4}
   22f7c:	c313      	stmia	r3!, {r0, r1, r4}
        .tm_hour = 21,
        .tm_min  = 0,
        .tm_sec  = 0
    };
    static const uint8_t access_key_slot = TLS_SLOT_ENC_PARENT;
    const uint8_t access_key[] = {
   22f7e:	4bda      	ldr	r3, [pc, #872]	; (232e8 <device_init+0x3cc>)
   22f80:	18fa      	adds	r2, r7, r3
   22f82:	4bda      	ldr	r3, [pc, #872]	; (232ec <device_init+0x3d0>)
   22f84:	0010      	movs	r0, r2
   22f86:	0019      	movs	r1, r3
   22f88:	2320      	movs	r3, #32
   22f8a:	001a      	movs	r2, r3
   22f8c:	f002 fbaf 	bl	256ee <memcpy>
        0x32, 0x12, 0xd0, 0x66, 0xf5, 0xed, 0x52, 0xc7, 0x79, 0x98, 0xff, 0xaa, 0xac, 0x43, 0x22, 0x60,
        0xdd, 0xff, 0x9c, 0x10, 0x99, 0x6f, 0x41, 0x66, 0x3a, 0x60, 0x23, 0xfa, 0xf6, 0xaa, 0x3e, 0xc5
    };
    uint8_t configdata[ATCA_ECC_CONFIG_SIZE] = { 0 };
   22f90:	4bd7      	ldr	r3, [pc, #860]	; (232f0 <device_init+0x3d4>)
   22f92:	18fb      	adds	r3, r7, r3
   22f94:	0018      	movs	r0, r3
   22f96:	2380      	movs	r3, #128	; 0x80
   22f98:	001a      	movs	r2, r3
   22f9a:	2100      	movs	r1, #0
   22f9c:	f002 fbc5 	bl	2572a <memset>
    bool is_signer_ca_slot_ext_sig = false;
   22fa0:	4bd4      	ldr	r3, [pc, #848]	; (232f4 <device_init+0x3d8>)
   22fa2:	18fb      	adds	r3, r7, r3
   22fa4:	2200      	movs	r2, #0
   22fa6:	701a      	strb	r2, [r3, #0]
    bool is_signer_ca_slot_priv_write = false;
   22fa8:	4bd3      	ldr	r3, [pc, #844]	; (232f8 <device_init+0x3dc>)
   22faa:	18fb      	adds	r3, r7, r3
   22fac:	2200      	movs	r2, #0
   22fae:	701a      	strb	r2, [r3, #0]
    uint8_t signer_public_key[ATCA_PUB_KEY_SIZE] = { 0 };
   22fb0:	4bd2      	ldr	r3, [pc, #840]	; (232fc <device_init+0x3e0>)
   22fb2:	22ae      	movs	r2, #174	; 0xae
   22fb4:	00d2      	lsls	r2, r2, #3
   22fb6:	4694      	mov	ip, r2
   22fb8:	44bc      	add	ip, r7
   22fba:	4463      	add	r3, ip
   22fbc:	0018      	movs	r0, r3
   22fbe:	2340      	movs	r3, #64	; 0x40
   22fc0:	001a      	movs	r2, r3
   22fc2:	2100      	movs	r1, #0
   22fc4:	f002 fbb1 	bl	2572a <memset>
    uint8_t device_public_key[ATCA_PUB_KEY_SIZE] = { 0 };
   22fc8:	4bcd      	ldr	r3, [pc, #820]	; (23300 <device_init+0x3e4>)
   22fca:	22ae      	movs	r2, #174	; 0xae
   22fcc:	00d2      	lsls	r2, r2, #3
   22fce:	4694      	mov	ip, r2
   22fd0:	44bc      	add	ip, r7
   22fd2:	4463      	add	r3, ip
   22fd4:	0018      	movs	r0, r3
   22fd6:	2340      	movs	r3, #64	; 0x40
   22fd8:	001a      	movs	r2, r3
   22fda:	2100      	movs	r1, #0
   22fdc:	f002 fba5 	bl	2572a <memset>
    uint8_t signer_cert_ref[512] = { 0 };
   22fe0:	4bc8      	ldr	r3, [pc, #800]	; (23304 <device_init+0x3e8>)
   22fe2:	22ae      	movs	r2, #174	; 0xae
   22fe4:	00d2      	lsls	r2, r2, #3
   22fe6:	4694      	mov	ip, r2
   22fe8:	44bc      	add	ip, r7
   22fea:	4463      	add	r3, ip
   22fec:	0018      	movs	r0, r3
   22fee:	2380      	movs	r3, #128	; 0x80
   22ff0:	009b      	lsls	r3, r3, #2
   22ff2:	001a      	movs	r2, r3
   22ff4:	2100      	movs	r1, #0
   22ff6:	f002 fb98 	bl	2572a <memset>
    size_t signer_cert_ref_size = 0;
   22ffa:	2300      	movs	r3, #0
   22ffc:	2284      	movs	r2, #132	; 0x84
   22ffe:	0092      	lsls	r2, r2, #2
   23000:	18ba      	adds	r2, r7, r2
   23002:	6013      	str	r3, [r2, #0]
    uint8_t device_cert_ref[512] = { 0 };
   23004:	4bc0      	ldr	r3, [pc, #768]	; (23308 <device_init+0x3ec>)
   23006:	22ae      	movs	r2, #174	; 0xae
   23008:	00d2      	lsls	r2, r2, #3
   2300a:	4694      	mov	ip, r2
   2300c:	44bc      	add	ip, r7
   2300e:	4463      	add	r3, ip
   23010:	0018      	movs	r0, r3
   23012:	2380      	movs	r3, #128	; 0x80
   23014:	009b      	lsls	r3, r3, #2
   23016:	001a      	movs	r2, r3
   23018:	2100      	movs	r1, #0
   2301a:	f002 fb86 	bl	2572a <memset>
    size_t device_cert_ref_size = 0;
   2301e:	2300      	movs	r3, #0
   23020:	60fb      	str	r3, [r7, #12]

    atcab_sleep();
   23022:	f7f6 fc43 	bl	198ac <atcab_sleep>

    // Check the lock state of the config zone.  If unlocked, then write and lock.
    ret = atcab_is_locked(LOCK_ZONE_CONFIG, &lockstate);
   23026:	4ba5      	ldr	r3, [pc, #660]	; (232bc <device_init+0x3a0>)
   23028:	18fc      	adds	r4, r7, r3
   2302a:	4ba5      	ldr	r3, [pc, #660]	; (232c0 <device_init+0x3a4>)
   2302c:	18fb      	adds	r3, r7, r3
   2302e:	0019      	movs	r1, r3
   23030:	2000      	movs	r0, #0
   23032:	f7f7 fc7d 	bl	1a930 <atcab_is_locked>
   23036:	0003      	movs	r3, r0
   23038:	7023      	strb	r3, [r4, #0]
    if (ret != ATCA_SUCCESS)
   2303a:	4ba0      	ldr	r3, [pc, #640]	; (232bc <device_init+0x3a0>)
   2303c:	18fb      	adds	r3, r7, r3
   2303e:	781b      	ldrb	r3, [r3, #0]
   23040:	2b00      	cmp	r3, #0
   23042:	d003      	beq.n	2304c <device_init+0x130>
        return ret;
   23044:	4b9d      	ldr	r3, [pc, #628]	; (232bc <device_init+0x3a0>)
   23046:	18fb      	adds	r3, r7, r3
   23048:	781b      	ldrb	r3, [r3, #0]
   2304a:	e201      	b.n	23450 <device_init+0x534>
    if (!lockstate)
   2304c:	4b9c      	ldr	r3, [pc, #624]	; (232c0 <device_init+0x3a4>)
   2304e:	18fb      	adds	r3, r7, r3
   23050:	781b      	ldrb	r3, [r3, #0]
   23052:	2201      	movs	r2, #1
   23054:	4053      	eors	r3, r2
   23056:	b2db      	uxtb	r3, r3
   23058:	2b00      	cmp	r3, #0
   2305a:	d01f      	beq.n	2309c <device_init+0x180>
    {
        ret = atcab_write_config_zone(g_ecc_configdata);
   2305c:	4b97      	ldr	r3, [pc, #604]	; (232bc <device_init+0x3a0>)
   2305e:	18fc      	adds	r4, r7, r3
   23060:	4baa      	ldr	r3, [pc, #680]	; (2330c <device_init+0x3f0>)
   23062:	0018      	movs	r0, r3
   23064:	f7f8 fa7a 	bl	1b55c <atcab_write_config_zone>
   23068:	0003      	movs	r3, r0
   2306a:	7023      	strb	r3, [r4, #0]
        if (ret != ATCA_SUCCESS)
   2306c:	4b93      	ldr	r3, [pc, #588]	; (232bc <device_init+0x3a0>)
   2306e:	18fb      	adds	r3, r7, r3
   23070:	781b      	ldrb	r3, [r3, #0]
   23072:	2b00      	cmp	r3, #0
   23074:	d003      	beq.n	2307e <device_init+0x162>
            return ret;
   23076:	4b91      	ldr	r3, [pc, #580]	; (232bc <device_init+0x3a0>)
   23078:	18fb      	adds	r3, r7, r3
   2307a:	781b      	ldrb	r3, [r3, #0]
   2307c:	e1e8      	b.n	23450 <device_init+0x534>

        ret = atcab_lock_config_zone();
   2307e:	4b8f      	ldr	r3, [pc, #572]	; (232bc <device_init+0x3a0>)
   23080:	18fc      	adds	r4, r7, r3
   23082:	f7f6 fff7 	bl	1a074 <atcab_lock_config_zone>
   23086:	0003      	movs	r3, r0
   23088:	7023      	strb	r3, [r4, #0]
        if (ret != ATCA_SUCCESS)
   2308a:	4b8c      	ldr	r3, [pc, #560]	; (232bc <device_init+0x3a0>)
   2308c:	18fb      	adds	r3, r7, r3
   2308e:	781b      	ldrb	r3, [r3, #0]
   23090:	2b00      	cmp	r3, #0
   23092:	d003      	beq.n	2309c <device_init+0x180>
            return ret;
   23094:	4b89      	ldr	r3, [pc, #548]	; (232bc <device_init+0x3a0>)
   23096:	18fb      	adds	r3, r7, r3
   23098:	781b      	ldrb	r3, [r3, #0]
   2309a:	e1d9      	b.n	23450 <device_init+0x534>
    }
    // Refresh the configuration zone data with the bytes that are now on the device
    ret = atcab_read_config_zone((uint8_t*)&configdata);
   2309c:	4b87      	ldr	r3, [pc, #540]	; (232bc <device_init+0x3a0>)
   2309e:	18fc      	adds	r4, r7, r3
   230a0:	4b93      	ldr	r3, [pc, #588]	; (232f0 <device_init+0x3d4>)
   230a2:	18fb      	adds	r3, r7, r3
   230a4:	0018      	movs	r0, r3
   230a6:	f7f7 fe0f 	bl	1acc8 <atcab_read_config_zone>
   230aa:	0003      	movs	r3, r0
   230ac:	7023      	strb	r3, [r4, #0]

    is_signer_ca_slot_ext_sig = (configdata[20 + signer_ca_private_key_slot * 2] & 0x01);
   230ae:	4b85      	ldr	r3, [pc, #532]	; (232c4 <device_init+0x3a8>)
   230b0:	18fb      	adds	r3, r7, r3
   230b2:	781b      	ldrb	r3, [r3, #0]
   230b4:	330a      	adds	r3, #10
   230b6:	005b      	lsls	r3, r3, #1
   230b8:	4a8d      	ldr	r2, [pc, #564]	; (232f0 <device_init+0x3d4>)
   230ba:	18ba      	adds	r2, r7, r2
   230bc:	5cd3      	ldrb	r3, [r2, r3]
   230be:	001a      	movs	r2, r3
   230c0:	2301      	movs	r3, #1
   230c2:	401a      	ands	r2, r3
   230c4:	4b8b      	ldr	r3, [pc, #556]	; (232f4 <device_init+0x3d8>)
   230c6:	18fb      	adds	r3, r7, r3
   230c8:	1e51      	subs	r1, r2, #1
   230ca:	418a      	sbcs	r2, r1
   230cc:	701a      	strb	r2, [r3, #0]
    is_signer_ca_slot_priv_write = (configdata[20 + signer_ca_private_key_slot * 2 + 1] & 0x40);
   230ce:	4b7d      	ldr	r3, [pc, #500]	; (232c4 <device_init+0x3a8>)
   230d0:	18fb      	adds	r3, r7, r3
   230d2:	781b      	ldrb	r3, [r3, #0]
   230d4:	330a      	adds	r3, #10
   230d6:	005b      	lsls	r3, r3, #1
   230d8:	3301      	adds	r3, #1
   230da:	4a85      	ldr	r2, [pc, #532]	; (232f0 <device_init+0x3d4>)
   230dc:	18ba      	adds	r2, r7, r2
   230de:	5cd3      	ldrb	r3, [r2, r3]
   230e0:	001a      	movs	r2, r3
   230e2:	2340      	movs	r3, #64	; 0x40
   230e4:	401a      	ands	r2, r3
   230e6:	4b84      	ldr	r3, [pc, #528]	; (232f8 <device_init+0x3dc>)
   230e8:	18fb      	adds	r3, r7, r3
   230ea:	1e51      	subs	r1, r2, #1
   230ec:	418a      	sbcs	r2, r1
   230ee:	701a      	strb	r2, [r3, #0]

    // Check the Data zone lock
    ret = atcab_is_locked(LOCK_ZONE_DATA, &lockstate);
   230f0:	4b72      	ldr	r3, [pc, #456]	; (232bc <device_init+0x3a0>)
   230f2:	18fc      	adds	r4, r7, r3
   230f4:	4b72      	ldr	r3, [pc, #456]	; (232c0 <device_init+0x3a4>)
   230f6:	18fb      	adds	r3, r7, r3
   230f8:	0019      	movs	r1, r3
   230fa:	2001      	movs	r0, #1
   230fc:	f7f7 fc18 	bl	1a930 <atcab_is_locked>
   23100:	0003      	movs	r3, r0
   23102:	7023      	strb	r3, [r4, #0]
    if (ret != ATCA_SUCCESS)
   23104:	4b6d      	ldr	r3, [pc, #436]	; (232bc <device_init+0x3a0>)
   23106:	18fb      	adds	r3, r7, r3
   23108:	781b      	ldrb	r3, [r3, #0]
   2310a:	2b00      	cmp	r3, #0
   2310c:	d003      	beq.n	23116 <device_init+0x1fa>
        return ret;
   2310e:	4b6b      	ldr	r3, [pc, #428]	; (232bc <device_init+0x3a0>)
   23110:	18fb      	adds	r3, r7, r3
   23112:	781b      	ldrb	r3, [r3, #0]
   23114:	e19c      	b.n	23450 <device_init+0x534>
    if (!lockstate)
   23116:	4b6a      	ldr	r3, [pc, #424]	; (232c0 <device_init+0x3a4>)
   23118:	18fb      	adds	r3, r7, r3
   2311a:	781b      	ldrb	r3, [r3, #0]
   2311c:	2201      	movs	r2, #1
   2311e:	4053      	eors	r3, r2
   23120:	b2db      	uxtb	r3, r3
   23122:	2b00      	cmp	r3, #0
   23124:	d03e      	beq.n	231a4 <device_init+0x288>
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        // NOTE: IMPORTANT!!!
        //       NEVER! NEVER! EXPOSE THE ROOT PRIVATE KEY IN PRODUCTION APPLICATIONS.
        //       THIS IS FOR EXAMPLE ONLY
        ret = atcab_priv_write(signer_ca_private_key_slot, g_signer_ca_private_key, 0, NULL);
   23126:	4b67      	ldr	r3, [pc, #412]	; (232c4 <device_init+0x3a8>)
   23128:	18fb      	adds	r3, r7, r3
   2312a:	781b      	ldrb	r3, [r3, #0]
   2312c:	b298      	uxth	r0, r3
   2312e:	4b63      	ldr	r3, [pc, #396]	; (232bc <device_init+0x3a0>)
   23130:	18fc      	adds	r4, r7, r3
   23132:	4977      	ldr	r1, [pc, #476]	; (23310 <device_init+0x3f4>)
   23134:	2300      	movs	r3, #0
   23136:	2200      	movs	r2, #0
   23138:	f7f7 f89a 	bl	1a270 <atcab_priv_write>
   2313c:	0003      	movs	r3, r0
   2313e:	7023      	strb	r3, [r4, #0]
        if (ret != ATCA_SUCCESS)
   23140:	4b5e      	ldr	r3, [pc, #376]	; (232bc <device_init+0x3a0>)
   23142:	18fb      	adds	r3, r7, r3
   23144:	781b      	ldrb	r3, [r3, #0]
   23146:	2b00      	cmp	r3, #0
   23148:	d003      	beq.n	23152 <device_init+0x236>
            return ret;
   2314a:	4b5c      	ldr	r3, [pc, #368]	; (232bc <device_init+0x3a0>)
   2314c:	18fb      	adds	r3, r7, r3
   2314e:	781b      	ldrb	r3, [r3, #0]
   23150:	e17e      	b.n	23450 <device_init+0x534>

        ret = atcab_write_zone(DEVZONE_DATA, access_key_slot, 0, 0, access_key, 32);
   23152:	4b70      	ldr	r3, [pc, #448]	; (23314 <device_init+0x3f8>)
   23154:	781b      	ldrb	r3, [r3, #0]
   23156:	b299      	uxth	r1, r3
   23158:	4b58      	ldr	r3, [pc, #352]	; (232bc <device_init+0x3a0>)
   2315a:	18fc      	adds	r4, r7, r3
   2315c:	2320      	movs	r3, #32
   2315e:	9301      	str	r3, [sp, #4]
   23160:	4b61      	ldr	r3, [pc, #388]	; (232e8 <device_init+0x3cc>)
   23162:	18fb      	adds	r3, r7, r3
   23164:	9300      	str	r3, [sp, #0]
   23166:	2300      	movs	r3, #0
   23168:	2200      	movs	r2, #0
   2316a:	2002      	movs	r0, #2
   2316c:	f7f8 f994 	bl	1b498 <atcab_write_zone>
   23170:	0003      	movs	r3, r0
   23172:	7023      	strb	r3, [r4, #0]
        if (ret != ATCA_SUCCESS)
   23174:	4b51      	ldr	r3, [pc, #324]	; (232bc <device_init+0x3a0>)
   23176:	18fb      	adds	r3, r7, r3
   23178:	781b      	ldrb	r3, [r3, #0]
   2317a:	2b00      	cmp	r3, #0
   2317c:	d003      	beq.n	23186 <device_init+0x26a>
            return ret;
   2317e:	4b4f      	ldr	r3, [pc, #316]	; (232bc <device_init+0x3a0>)
   23180:	18fb      	adds	r3, r7, r3
   23182:	781b      	ldrb	r3, [r3, #0]
   23184:	e164      	b.n	23450 <device_init+0x534>

        ret = atcab_lock_data_zone();
   23186:	4b4d      	ldr	r3, [pc, #308]	; (232bc <device_init+0x3a0>)
   23188:	18fc      	adds	r4, r7, r3
   2318a:	f7f6 ff7d 	bl	1a088 <atcab_lock_data_zone>
   2318e:	0003      	movs	r3, r0
   23190:	7023      	strb	r3, [r4, #0]
        if (ret != ATCA_SUCCESS)
   23192:	4b4a      	ldr	r3, [pc, #296]	; (232bc <device_init+0x3a0>)
   23194:	18fb      	adds	r3, r7, r3
   23196:	781b      	ldrb	r3, [r3, #0]
   23198:	2b00      	cmp	r3, #0
   2319a:	d040      	beq.n	2321e <device_init+0x302>
            return ret;
   2319c:	4b47      	ldr	r3, [pc, #284]	; (232bc <device_init+0x3a0>)
   2319e:	18fb      	adds	r3, r7, r3
   231a0:	781b      	ldrb	r3, [r3, #0]
   231a2:	e155      	b.n	23450 <device_init+0x534>
    }
    else if (!is_signer_ca_slot_ext_sig)
   231a4:	4b53      	ldr	r3, [pc, #332]	; (232f4 <device_init+0x3d8>)
   231a6:	18fb      	adds	r3, r7, r3
   231a8:	781b      	ldrb	r3, [r3, #0]
   231aa:	2201      	movs	r2, #1
   231ac:	4053      	eors	r3, r2
   231ae:	b2db      	uxtb	r3, r3
   231b0:	2b00      	cmp	r3, #0
   231b2:	d00e      	beq.n	231d2 <device_init+0x2b6>
    {
        // The signer CA slot can't perform external signs.
        // Use the signer slot for both. A little weird, but it lets the example run.
#ifdef ATCAPRINTF
        printf("Signer CA slot %d not available. Signer CA and signer will be sharing a key.\r\n", signer_ca_private_key_slot);
   231b4:	4b43      	ldr	r3, [pc, #268]	; (232c4 <device_init+0x3a8>)
   231b6:	18fb      	adds	r3, r7, r3
   231b8:	781a      	ldrb	r2, [r3, #0]
   231ba:	4b57      	ldr	r3, [pc, #348]	; (23318 <device_init+0x3fc>)
   231bc:	0011      	movs	r1, r2
   231be:	0018      	movs	r0, r3
   231c0:	f002 ffde 	bl	26180 <iprintf>
#endif
        signer_ca_private_key_slot = signer_private_key_slot;
   231c4:	4b3f      	ldr	r3, [pc, #252]	; (232c4 <device_init+0x3a8>)
   231c6:	18fb      	adds	r3, r7, r3
   231c8:	4a3f      	ldr	r2, [pc, #252]	; (232c8 <device_init+0x3ac>)
   231ca:	18ba      	adds	r2, r7, r2
   231cc:	7812      	ldrb	r2, [r2, #0]
   231ce:	701a      	strb	r2, [r3, #0]
   231d0:	e025      	b.n	2321e <device_init+0x302>
    }
    else if (is_signer_ca_slot_priv_write)
   231d2:	4b49      	ldr	r3, [pc, #292]	; (232f8 <device_init+0x3dc>)
   231d4:	18fb      	adds	r3, r7, r3
   231d6:	781b      	ldrb	r3, [r3, #0]
   231d8:	2b00      	cmp	r3, #0
   231da:	d020      	beq.n	2321e <device_init+0x302>
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        // NOTE: IMPORTANT!!!
        //       NEVER! NEVER! EXPOSE THE ROOT PRIVATE KEY IN PRODUCTION APPLICATIONS.
        //       THIS IS FOR EXAMPLE ONLY
        ret = atcab_priv_write(signer_ca_private_key_slot, g_signer_ca_private_key, access_key_slot, access_key);
   231dc:	4b39      	ldr	r3, [pc, #228]	; (232c4 <device_init+0x3a8>)
   231de:	18fb      	adds	r3, r7, r3
   231e0:	781b      	ldrb	r3, [r3, #0]
   231e2:	b298      	uxth	r0, r3
   231e4:	4b4b      	ldr	r3, [pc, #300]	; (23314 <device_init+0x3f8>)
   231e6:	781b      	ldrb	r3, [r3, #0]
   231e8:	b29a      	uxth	r2, r3
   231ea:	4b34      	ldr	r3, [pc, #208]	; (232bc <device_init+0x3a0>)
   231ec:	18fc      	adds	r4, r7, r3
   231ee:	4b3e      	ldr	r3, [pc, #248]	; (232e8 <device_init+0x3cc>)
   231f0:	18fb      	adds	r3, r7, r3
   231f2:	4947      	ldr	r1, [pc, #284]	; (23310 <device_init+0x3f4>)
   231f4:	f7f7 f83c 	bl	1a270 <atcab_priv_write>
   231f8:	0003      	movs	r3, r0
   231fa:	7023      	strb	r3, [r4, #0]
        if (ret != ATCA_SUCCESS) {
   231fc:	4b2f      	ldr	r3, [pc, #188]	; (232bc <device_init+0x3a0>)
   231fe:	18fb      	adds	r3, r7, r3
   23200:	781b      	ldrb	r3, [r3, #0]
   23202:	2b00      	cmp	r3, #0
   23204:	d00b      	beq.n	2321e <device_init+0x302>
#ifdef ATCAPRINTF
            printf("Warning: PrivWrite to slot %d failed. Example may still work though.\n", signer_ca_private_key_slot);
   23206:	4b2f      	ldr	r3, [pc, #188]	; (232c4 <device_init+0x3a8>)
   23208:	18fb      	adds	r3, r7, r3
   2320a:	781a      	ldrb	r2, [r3, #0]
   2320c:	4b43      	ldr	r3, [pc, #268]	; (2331c <device_init+0x400>)
   2320e:	0011      	movs	r1, r2
   23210:	0018      	movs	r0, r3
   23212:	f002 ffb5 	bl	26180 <iprintf>
#endif
            return ret;
   23216:	4b29      	ldr	r3, [pc, #164]	; (232bc <device_init+0x3a0>)
   23218:	18fb      	adds	r3, r7, r3
   2321a:	781b      	ldrb	r3, [r3, #0]
   2321c:	e118      	b.n	23450 <device_init+0x534>
        }
    }

    // GenKey or get the public key for the root
    if (signer_ca_private_key_slot != signer_private_key_slot)
   2321e:	4b29      	ldr	r3, [pc, #164]	; (232c4 <device_init+0x3a8>)
   23220:	18fa      	adds	r2, r7, r3
   23222:	4b29      	ldr	r3, [pc, #164]	; (232c8 <device_init+0x3ac>)
   23224:	18fb      	adds	r3, r7, r3
   23226:	7812      	ldrb	r2, [r2, #0]
   23228:	781b      	ldrb	r3, [r3, #0]
   2322a:	429a      	cmp	r2, r3
   2322c:	d02d      	beq.n	2328a <device_init+0x36e>
    {
        ret = atcab_get_pubkey(signer_ca_private_key_slot, g_signer_ca_public_key);
   2322e:	4b25      	ldr	r3, [pc, #148]	; (232c4 <device_init+0x3a8>)
   23230:	18fb      	adds	r3, r7, r3
   23232:	781b      	ldrb	r3, [r3, #0]
   23234:	b29b      	uxth	r3, r3
   23236:	4a21      	ldr	r2, [pc, #132]	; (232bc <device_init+0x3a0>)
   23238:	18bc      	adds	r4, r7, r2
   2323a:	4a39      	ldr	r2, [pc, #228]	; (23320 <device_init+0x404>)
   2323c:	0011      	movs	r1, r2
   2323e:	0018      	movs	r0, r3
   23240:	f7f6 fe44 	bl	19ecc <atcab_get_pubkey>
   23244:	0003      	movs	r3, r0
   23246:	7023      	strb	r3, [r4, #0]
        if (ret == ATCA_EXECUTION_ERROR)
   23248:	4b1c      	ldr	r3, [pc, #112]	; (232bc <device_init+0x3a0>)
   2324a:	18fb      	adds	r3, r7, r3
   2324c:	781b      	ldrb	r3, [r3, #0]
   2324e:	2bf4      	cmp	r3, #244	; 0xf4
   23250:	d10c      	bne.n	2326c <device_init+0x350>
            ret = atcab_genkey(signer_ca_private_key_slot, g_signer_ca_public_key);
   23252:	4b1c      	ldr	r3, [pc, #112]	; (232c4 <device_init+0x3a8>)
   23254:	18fb      	adds	r3, r7, r3
   23256:	781b      	ldrb	r3, [r3, #0]
   23258:	b29b      	uxth	r3, r3
   2325a:	4a18      	ldr	r2, [pc, #96]	; (232bc <device_init+0x3a0>)
   2325c:	18bc      	adds	r4, r7, r2
   2325e:	4a30      	ldr	r2, [pc, #192]	; (23320 <device_init+0x404>)
   23260:	0011      	movs	r1, r2
   23262:	0018      	movs	r0, r3
   23264:	f7f6 fe1e 	bl	19ea4 <atcab_genkey>
   23268:	0003      	movs	r3, r0
   2326a:	7023      	strb	r3, [r4, #0]
        if (ret != ATCA_SUCCESS)
   2326c:	4b13      	ldr	r3, [pc, #76]	; (232bc <device_init+0x3a0>)
   2326e:	18fb      	adds	r3, r7, r3
   23270:	781b      	ldrb	r3, [r3, #0]
   23272:	2b00      	cmp	r3, #0
   23274:	d003      	beq.n	2327e <device_init+0x362>
            return ret;
   23276:	4b11      	ldr	r3, [pc, #68]	; (232bc <device_init+0x3a0>)
   23278:	18fb      	adds	r3, r7, r3
   2327a:	781b      	ldrb	r3, [r3, #0]
   2327c:	e0e8      	b.n	23450 <device_init+0x534>
        atcab_printbin_label("Signer CA Public Key:\r\n", g_signer_ca_public_key, sizeof(g_signer_ca_public_key));
   2327e:	4928      	ldr	r1, [pc, #160]	; (23320 <device_init+0x404>)
   23280:	4b28      	ldr	r3, [pc, #160]	; (23324 <device_init+0x408>)
   23282:	2240      	movs	r2, #64	; 0x40
   23284:	0018      	movs	r0, r3
   23286:	f7f8 fab1 	bl	1b7ec <atcab_printbin_label>
    }

    // GenKey  the public key for the signer
    ret = atcab_genkey(signer_private_key_slot, signer_public_key);
   2328a:	4b0f      	ldr	r3, [pc, #60]	; (232c8 <device_init+0x3ac>)
   2328c:	18fb      	adds	r3, r7, r3
   2328e:	781b      	ldrb	r3, [r3, #0]
   23290:	b29b      	uxth	r3, r3
   23292:	4a0a      	ldr	r2, [pc, #40]	; (232bc <device_init+0x3a0>)
   23294:	18bc      	adds	r4, r7, r2
   23296:	4a24      	ldr	r2, [pc, #144]	; (23328 <device_init+0x40c>)
   23298:	18ba      	adds	r2, r7, r2
   2329a:	0011      	movs	r1, r2
   2329c:	0018      	movs	r0, r3
   2329e:	f7f6 fe01 	bl	19ea4 <atcab_genkey>
   232a2:	0003      	movs	r3, r0
   232a4:	7023      	strb	r3, [r4, #0]
    if (ret != ATCA_SUCCESS)
   232a6:	4b05      	ldr	r3, [pc, #20]	; (232bc <device_init+0x3a0>)
   232a8:	18fb      	adds	r3, r7, r3
   232aa:	781b      	ldrb	r3, [r3, #0]
   232ac:	2b00      	cmp	r3, #0
   232ae:	d03d      	beq.n	2332c <device_init+0x410>
        return ret;
   232b0:	4b02      	ldr	r3, [pc, #8]	; (232bc <device_init+0x3a0>)
   232b2:	18fb      	adds	r3, r7, r3
   232b4:	781b      	ldrb	r3, [r3, #0]
   232b6:	e0cb      	b.n	23450 <device_init+0x534>
   232b8:	fffffa74 	.word	0xfffffa74
   232bc:	0000056f 	.word	0x0000056f
   232c0:	00000569 	.word	0x00000569
   232c4:	0000056e 	.word	0x0000056e
   232c8:	0000056d 	.word	0x0000056d
   232cc:	00000564 	.word	0x00000564
   232d0:	0002e928 	.word	0x0002e928
   232d4:	0000054c 	.word	0x0000054c
   232d8:	0002e92c 	.word	0x0002e92c
   232dc:	0000056c 	.word	0x0000056c
   232e0:	00000534 	.word	0x00000534
   232e4:	0002e944 	.word	0x0002e944
   232e8:	00000514 	.word	0x00000514
   232ec:	0002e95c 	.word	0x0002e95c
   232f0:	00000494 	.word	0x00000494
   232f4:	0000056b 	.word	0x0000056b
   232f8:	0000056a 	.word	0x0000056a
   232fc:	fffffee4 	.word	0xfffffee4
   23300:	fffffea4 	.word	0xfffffea4
   23304:	fffffca4 	.word	0xfffffca4
   23308:	fffffaa0 	.word	0xfffffaa0
   2330c:	0002e694 	.word	0x0002e694
   23310:	0002e714 	.word	0x0002e714
   23314:	0002ed22 	.word	0x0002ed22
   23318:	0002e818 	.word	0x0002e818
   2331c:	0002e868 	.word	0x0002e868
   23320:	200004fc 	.word	0x200004fc
   23324:	0002e8b0 	.word	0x0002e8b0
   23328:	00000454 	.word	0x00000454
    atcab_printbin_label("Signer Public Key:\r\n", signer_public_key, sizeof(signer_public_key));
   2332c:	4b4b      	ldr	r3, [pc, #300]	; (2345c <device_init+0x540>)
   2332e:	18f9      	adds	r1, r7, r3
   23330:	4b4b      	ldr	r3, [pc, #300]	; (23460 <device_init+0x544>)
   23332:	2240      	movs	r2, #64	; 0x40
   23334:	0018      	movs	r0, r3
   23336:	f7f8 fa59 	bl	1b7ec <atcab_printbin_label>

    // GenKey the device private key to get the public key for the device
    ret = atcab_genkey(device_private_key_slot, device_public_key);
   2333a:	4b4a      	ldr	r3, [pc, #296]	; (23464 <device_init+0x548>)
   2333c:	18fb      	adds	r3, r7, r3
   2333e:	781b      	ldrb	r3, [r3, #0]
   23340:	b29b      	uxth	r3, r3
   23342:	4a49      	ldr	r2, [pc, #292]	; (23468 <device_init+0x54c>)
   23344:	18bc      	adds	r4, r7, r2
   23346:	4a49      	ldr	r2, [pc, #292]	; (2346c <device_init+0x550>)
   23348:	18ba      	adds	r2, r7, r2
   2334a:	0011      	movs	r1, r2
   2334c:	0018      	movs	r0, r3
   2334e:	f7f6 fda9 	bl	19ea4 <atcab_genkey>
   23352:	0003      	movs	r3, r0
   23354:	7023      	strb	r3, [r4, #0]
    if (ret != ATCA_SUCCESS)
   23356:	4b44      	ldr	r3, [pc, #272]	; (23468 <device_init+0x54c>)
   23358:	18fb      	adds	r3, r7, r3
   2335a:	781b      	ldrb	r3, [r3, #0]
   2335c:	2b00      	cmp	r3, #0
   2335e:	d003      	beq.n	23368 <device_init+0x44c>
        return ret;
   23360:	4b41      	ldr	r3, [pc, #260]	; (23468 <device_init+0x54c>)
   23362:	18fb      	adds	r3, r7, r3
   23364:	781b      	ldrb	r3, [r3, #0]
   23366:	e073      	b.n	23450 <device_init+0x534>
    atcab_printbin_label("Device Public Key:\r\n", device_public_key, sizeof(device_public_key));
   23368:	4b40      	ldr	r3, [pc, #256]	; (2346c <device_init+0x550>)
   2336a:	18f9      	adds	r1, r7, r3
   2336c:	4b40      	ldr	r3, [pc, #256]	; (23470 <device_init+0x554>)
   2336e:	2240      	movs	r2, #64	; 0x40
   23370:	0018      	movs	r0, r3
   23372:	f7f8 fa3b 	bl	1b7ec <atcab_printbin_label>

    // Build signer cert
    signer_cert_ref_size = sizeof(signer_cert_ref);
   23376:	2380      	movs	r3, #128	; 0x80
   23378:	009b      	lsls	r3, r3, #2
   2337a:	2284      	movs	r2, #132	; 0x84
   2337c:	0092      	lsls	r2, r2, #2
   2337e:	18ba      	adds	r2, r7, r2
   23380:	6013      	str	r3, [r2, #0]
    ret = build_and_save_cert(
   23382:	4c3c      	ldr	r4, [pc, #240]	; (23474 <device_init+0x558>)
   23384:	2384      	movs	r3, #132	; 0x84
   23386:	009b      	lsls	r3, r3, #2
   23388:	18fa      	adds	r2, r7, r3
   2338a:	2385      	movs	r3, #133	; 0x85
   2338c:	009b      	lsls	r3, r3, #2
   2338e:	18f9      	adds	r1, r7, r3
   23390:	6878      	ldr	r0, [r7, #4]
   23392:	4b39      	ldr	r3, [pc, #228]	; (23478 <device_init+0x55c>)
   23394:	18fb      	adds	r3, r7, r3
   23396:	781b      	ldrb	r3, [r3, #0]
   23398:	9304      	str	r3, [sp, #16]
   2339a:	4b38      	ldr	r3, [pc, #224]	; (2347c <device_init+0x560>)
   2339c:	18fb      	adds	r3, r7, r3
   2339e:	9303      	str	r3, [sp, #12]
   233a0:	4b37      	ldr	r3, [pc, #220]	; (23480 <device_init+0x564>)
   233a2:	18fb      	adds	r3, r7, r3
   233a4:	9302      	str	r3, [sp, #8]
   233a6:	4b37      	ldr	r3, [pc, #220]	; (23484 <device_init+0x568>)
   233a8:	18fb      	adds	r3, r7, r3
   233aa:	9301      	str	r3, [sp, #4]
   233ac:	4b2b      	ldr	r3, [pc, #172]	; (2345c <device_init+0x540>)
   233ae:	18fb      	adds	r3, r7, r3
   233b0:	9300      	str	r3, [sp, #0]
   233b2:	0023      	movs	r3, r4
   233b4:	f7ff fae2 	bl	2297c <build_and_save_cert>
   233b8:	0002      	movs	r2, r0
   233ba:	4b2b      	ldr	r3, [pc, #172]	; (23468 <device_init+0x54c>)
   233bc:	18fb      	adds	r3, r7, r3
   233be:	701a      	strb	r2, [r3, #0]
        signer_public_key,
        signer_id,
        &signer_issue_date,
        configdata,
        signer_ca_private_key_slot);
    if (ret != ATCA_SUCCESS)
   233c0:	4b29      	ldr	r3, [pc, #164]	; (23468 <device_init+0x54c>)
   233c2:	18fb      	adds	r3, r7, r3
   233c4:	781b      	ldrb	r3, [r3, #0]
   233c6:	2b00      	cmp	r3, #0
   233c8:	d003      	beq.n	233d2 <device_init+0x4b6>
        return ret;
   233ca:	4b27      	ldr	r3, [pc, #156]	; (23468 <device_init+0x54c>)
   233cc:	18fb      	adds	r3, r7, r3
   233ce:	781b      	ldrb	r3, [r3, #0]
   233d0:	e03e      	b.n	23450 <device_init+0x534>

    atcab_printbin_label("Signer Certificate:\r\n", signer_cert_ref, signer_cert_ref_size);
   233d2:	2384      	movs	r3, #132	; 0x84
   233d4:	009b      	lsls	r3, r3, #2
   233d6:	18fb      	adds	r3, r7, r3
   233d8:	681a      	ldr	r2, [r3, #0]
   233da:	2385      	movs	r3, #133	; 0x85
   233dc:	009b      	lsls	r3, r3, #2
   233de:	18f9      	adds	r1, r7, r3
   233e0:	4b29      	ldr	r3, [pc, #164]	; (23488 <device_init+0x56c>)
   233e2:	0018      	movs	r0, r3
   233e4:	f7f8 fa02 	bl	1b7ec <atcab_printbin_label>

    // Build the device cert
    device_cert_ref_size = sizeof(device_cert_ref);
   233e8:	2380      	movs	r3, #128	; 0x80
   233ea:	009b      	lsls	r3, r3, #2
   233ec:	60fb      	str	r3, [r7, #12]
    ret = build_and_save_cert(
   233ee:	4b1b      	ldr	r3, [pc, #108]	; (2345c <device_init+0x540>)
   233f0:	18fc      	adds	r4, r7, r3
   233f2:	230c      	movs	r3, #12
   233f4:	18fa      	adds	r2, r7, r3
   233f6:	2310      	movs	r3, #16
   233f8:	18f9      	adds	r1, r7, r3
   233fa:	6838      	ldr	r0, [r7, #0]
   233fc:	4b23      	ldr	r3, [pc, #140]	; (2348c <device_init+0x570>)
   233fe:	18fb      	adds	r3, r7, r3
   23400:	781b      	ldrb	r3, [r3, #0]
   23402:	9304      	str	r3, [sp, #16]
   23404:	4b1d      	ldr	r3, [pc, #116]	; (2347c <device_init+0x560>)
   23406:	18fb      	adds	r3, r7, r3
   23408:	9303      	str	r3, [sp, #12]
   2340a:	4b21      	ldr	r3, [pc, #132]	; (23490 <device_init+0x574>)
   2340c:	18fb      	adds	r3, r7, r3
   2340e:	9302      	str	r3, [sp, #8]
   23410:	4b1c      	ldr	r3, [pc, #112]	; (23484 <device_init+0x568>)
   23412:	18fb      	adds	r3, r7, r3
   23414:	9301      	str	r3, [sp, #4]
   23416:	4b15      	ldr	r3, [pc, #84]	; (2346c <device_init+0x550>)
   23418:	18fb      	adds	r3, r7, r3
   2341a:	9300      	str	r3, [sp, #0]
   2341c:	0023      	movs	r3, r4
   2341e:	f7ff faad 	bl	2297c <build_and_save_cert>
   23422:	0002      	movs	r2, r0
   23424:	4b10      	ldr	r3, [pc, #64]	; (23468 <device_init+0x54c>)
   23426:	18fb      	adds	r3, r7, r3
   23428:	701a      	strb	r2, [r3, #0]
        device_public_key,
        signer_id,
        &device_issue_date,
        configdata,
        signer_private_key_slot);
    if (ret != ATCA_SUCCESS)
   2342a:	4b0f      	ldr	r3, [pc, #60]	; (23468 <device_init+0x54c>)
   2342c:	18fb      	adds	r3, r7, r3
   2342e:	781b      	ldrb	r3, [r3, #0]
   23430:	2b00      	cmp	r3, #0
   23432:	d003      	beq.n	2343c <device_init+0x520>
        return ret;
   23434:	4b0c      	ldr	r3, [pc, #48]	; (23468 <device_init+0x54c>)
   23436:	18fb      	adds	r3, r7, r3
   23438:	781b      	ldrb	r3, [r3, #0]
   2343a:	e009      	b.n	23450 <device_init+0x534>

    atcab_printbin_label("Device Certificate:\r\n", device_cert_ref, device_cert_ref_size);
   2343c:	68fa      	ldr	r2, [r7, #12]
   2343e:	2310      	movs	r3, #16
   23440:	18f9      	adds	r1, r7, r3
   23442:	4b14      	ldr	r3, [pc, #80]	; (23494 <device_init+0x578>)
   23444:	0018      	movs	r0, r3
   23446:	f7f8 f9d1 	bl	1b7ec <atcab_printbin_label>

    return ret;
   2344a:	4b07      	ldr	r3, [pc, #28]	; (23468 <device_init+0x54c>)
   2344c:	18fb      	adds	r3, r7, r3
   2344e:	781b      	ldrb	r3, [r3, #0]
}
   23450:	0018      	movs	r0, r3
   23452:	46bd      	mov	sp, r7
   23454:	4b10      	ldr	r3, [pc, #64]	; (23498 <device_init+0x57c>)
   23456:	449d      	add	sp, r3
   23458:	bd90      	pop	{r4, r7, pc}
   2345a:	46c0      	nop			; (mov r8, r8)
   2345c:	00000454 	.word	0x00000454
   23460:	0002e8c8 	.word	0x0002e8c8
   23464:	0000056c 	.word	0x0000056c
   23468:	0000056f 	.word	0x0000056f
   2346c:	00000414 	.word	0x00000414
   23470:	0002e8e0 	.word	0x0002e8e0
   23474:	0002e738 	.word	0x0002e738
   23478:	0000056e 	.word	0x0000056e
   2347c:	00000494 	.word	0x00000494
   23480:	0000054c 	.word	0x0000054c
   23484:	00000564 	.word	0x00000564
   23488:	0002e8f8 	.word	0x0002e8f8
   2348c:	0000056d 	.word	0x0000056d
   23490:	00000534 	.word	0x00000534
   23494:	0002e910 	.word	0x0002e910
   23498:	00000574 	.word	0x00000574

0002349c <__aeabi_uidiv>:
   2349c:	2200      	movs	r2, #0
   2349e:	0843      	lsrs	r3, r0, #1
   234a0:	428b      	cmp	r3, r1
   234a2:	d374      	bcc.n	2358e <__aeabi_uidiv+0xf2>
   234a4:	0903      	lsrs	r3, r0, #4
   234a6:	428b      	cmp	r3, r1
   234a8:	d35f      	bcc.n	2356a <__aeabi_uidiv+0xce>
   234aa:	0a03      	lsrs	r3, r0, #8
   234ac:	428b      	cmp	r3, r1
   234ae:	d344      	bcc.n	2353a <__aeabi_uidiv+0x9e>
   234b0:	0b03      	lsrs	r3, r0, #12
   234b2:	428b      	cmp	r3, r1
   234b4:	d328      	bcc.n	23508 <__aeabi_uidiv+0x6c>
   234b6:	0c03      	lsrs	r3, r0, #16
   234b8:	428b      	cmp	r3, r1
   234ba:	d30d      	bcc.n	234d8 <__aeabi_uidiv+0x3c>
   234bc:	22ff      	movs	r2, #255	; 0xff
   234be:	0209      	lsls	r1, r1, #8
   234c0:	ba12      	rev	r2, r2
   234c2:	0c03      	lsrs	r3, r0, #16
   234c4:	428b      	cmp	r3, r1
   234c6:	d302      	bcc.n	234ce <__aeabi_uidiv+0x32>
   234c8:	1212      	asrs	r2, r2, #8
   234ca:	0209      	lsls	r1, r1, #8
   234cc:	d065      	beq.n	2359a <__aeabi_uidiv+0xfe>
   234ce:	0b03      	lsrs	r3, r0, #12
   234d0:	428b      	cmp	r3, r1
   234d2:	d319      	bcc.n	23508 <__aeabi_uidiv+0x6c>
   234d4:	e000      	b.n	234d8 <__aeabi_uidiv+0x3c>
   234d6:	0a09      	lsrs	r1, r1, #8
   234d8:	0bc3      	lsrs	r3, r0, #15
   234da:	428b      	cmp	r3, r1
   234dc:	d301      	bcc.n	234e2 <__aeabi_uidiv+0x46>
   234de:	03cb      	lsls	r3, r1, #15
   234e0:	1ac0      	subs	r0, r0, r3
   234e2:	4152      	adcs	r2, r2
   234e4:	0b83      	lsrs	r3, r0, #14
   234e6:	428b      	cmp	r3, r1
   234e8:	d301      	bcc.n	234ee <__aeabi_uidiv+0x52>
   234ea:	038b      	lsls	r3, r1, #14
   234ec:	1ac0      	subs	r0, r0, r3
   234ee:	4152      	adcs	r2, r2
   234f0:	0b43      	lsrs	r3, r0, #13
   234f2:	428b      	cmp	r3, r1
   234f4:	d301      	bcc.n	234fa <__aeabi_uidiv+0x5e>
   234f6:	034b      	lsls	r3, r1, #13
   234f8:	1ac0      	subs	r0, r0, r3
   234fa:	4152      	adcs	r2, r2
   234fc:	0b03      	lsrs	r3, r0, #12
   234fe:	428b      	cmp	r3, r1
   23500:	d301      	bcc.n	23506 <__aeabi_uidiv+0x6a>
   23502:	030b      	lsls	r3, r1, #12
   23504:	1ac0      	subs	r0, r0, r3
   23506:	4152      	adcs	r2, r2
   23508:	0ac3      	lsrs	r3, r0, #11
   2350a:	428b      	cmp	r3, r1
   2350c:	d301      	bcc.n	23512 <__aeabi_uidiv+0x76>
   2350e:	02cb      	lsls	r3, r1, #11
   23510:	1ac0      	subs	r0, r0, r3
   23512:	4152      	adcs	r2, r2
   23514:	0a83      	lsrs	r3, r0, #10
   23516:	428b      	cmp	r3, r1
   23518:	d301      	bcc.n	2351e <__aeabi_uidiv+0x82>
   2351a:	028b      	lsls	r3, r1, #10
   2351c:	1ac0      	subs	r0, r0, r3
   2351e:	4152      	adcs	r2, r2
   23520:	0a43      	lsrs	r3, r0, #9
   23522:	428b      	cmp	r3, r1
   23524:	d301      	bcc.n	2352a <__aeabi_uidiv+0x8e>
   23526:	024b      	lsls	r3, r1, #9
   23528:	1ac0      	subs	r0, r0, r3
   2352a:	4152      	adcs	r2, r2
   2352c:	0a03      	lsrs	r3, r0, #8
   2352e:	428b      	cmp	r3, r1
   23530:	d301      	bcc.n	23536 <__aeabi_uidiv+0x9a>
   23532:	020b      	lsls	r3, r1, #8
   23534:	1ac0      	subs	r0, r0, r3
   23536:	4152      	adcs	r2, r2
   23538:	d2cd      	bcs.n	234d6 <__aeabi_uidiv+0x3a>
   2353a:	09c3      	lsrs	r3, r0, #7
   2353c:	428b      	cmp	r3, r1
   2353e:	d301      	bcc.n	23544 <__aeabi_uidiv+0xa8>
   23540:	01cb      	lsls	r3, r1, #7
   23542:	1ac0      	subs	r0, r0, r3
   23544:	4152      	adcs	r2, r2
   23546:	0983      	lsrs	r3, r0, #6
   23548:	428b      	cmp	r3, r1
   2354a:	d301      	bcc.n	23550 <__aeabi_uidiv+0xb4>
   2354c:	018b      	lsls	r3, r1, #6
   2354e:	1ac0      	subs	r0, r0, r3
   23550:	4152      	adcs	r2, r2
   23552:	0943      	lsrs	r3, r0, #5
   23554:	428b      	cmp	r3, r1
   23556:	d301      	bcc.n	2355c <__aeabi_uidiv+0xc0>
   23558:	014b      	lsls	r3, r1, #5
   2355a:	1ac0      	subs	r0, r0, r3
   2355c:	4152      	adcs	r2, r2
   2355e:	0903      	lsrs	r3, r0, #4
   23560:	428b      	cmp	r3, r1
   23562:	d301      	bcc.n	23568 <__aeabi_uidiv+0xcc>
   23564:	010b      	lsls	r3, r1, #4
   23566:	1ac0      	subs	r0, r0, r3
   23568:	4152      	adcs	r2, r2
   2356a:	08c3      	lsrs	r3, r0, #3
   2356c:	428b      	cmp	r3, r1
   2356e:	d301      	bcc.n	23574 <__aeabi_uidiv+0xd8>
   23570:	00cb      	lsls	r3, r1, #3
   23572:	1ac0      	subs	r0, r0, r3
   23574:	4152      	adcs	r2, r2
   23576:	0883      	lsrs	r3, r0, #2
   23578:	428b      	cmp	r3, r1
   2357a:	d301      	bcc.n	23580 <__aeabi_uidiv+0xe4>
   2357c:	008b      	lsls	r3, r1, #2
   2357e:	1ac0      	subs	r0, r0, r3
   23580:	4152      	adcs	r2, r2
   23582:	0843      	lsrs	r3, r0, #1
   23584:	428b      	cmp	r3, r1
   23586:	d301      	bcc.n	2358c <__aeabi_uidiv+0xf0>
   23588:	004b      	lsls	r3, r1, #1
   2358a:	1ac0      	subs	r0, r0, r3
   2358c:	4152      	adcs	r2, r2
   2358e:	1a41      	subs	r1, r0, r1
   23590:	d200      	bcs.n	23594 <__aeabi_uidiv+0xf8>
   23592:	4601      	mov	r1, r0
   23594:	4152      	adcs	r2, r2
   23596:	4610      	mov	r0, r2
   23598:	4770      	bx	lr
   2359a:	e7ff      	b.n	2359c <__aeabi_uidiv+0x100>
   2359c:	b501      	push	{r0, lr}
   2359e:	2000      	movs	r0, #0
   235a0:	f000 f8f0 	bl	23784 <__aeabi_idiv0>
   235a4:	bd02      	pop	{r1, pc}
   235a6:	46c0      	nop			; (mov r8, r8)

000235a8 <__aeabi_uidivmod>:
   235a8:	2900      	cmp	r1, #0
   235aa:	d0f7      	beq.n	2359c <__aeabi_uidiv+0x100>
   235ac:	e776      	b.n	2349c <__aeabi_uidiv>
   235ae:	4770      	bx	lr

000235b0 <__aeabi_idiv>:
   235b0:	4603      	mov	r3, r0
   235b2:	430b      	orrs	r3, r1
   235b4:	d47f      	bmi.n	236b6 <__aeabi_idiv+0x106>
   235b6:	2200      	movs	r2, #0
   235b8:	0843      	lsrs	r3, r0, #1
   235ba:	428b      	cmp	r3, r1
   235bc:	d374      	bcc.n	236a8 <__aeabi_idiv+0xf8>
   235be:	0903      	lsrs	r3, r0, #4
   235c0:	428b      	cmp	r3, r1
   235c2:	d35f      	bcc.n	23684 <__aeabi_idiv+0xd4>
   235c4:	0a03      	lsrs	r3, r0, #8
   235c6:	428b      	cmp	r3, r1
   235c8:	d344      	bcc.n	23654 <__aeabi_idiv+0xa4>
   235ca:	0b03      	lsrs	r3, r0, #12
   235cc:	428b      	cmp	r3, r1
   235ce:	d328      	bcc.n	23622 <__aeabi_idiv+0x72>
   235d0:	0c03      	lsrs	r3, r0, #16
   235d2:	428b      	cmp	r3, r1
   235d4:	d30d      	bcc.n	235f2 <__aeabi_idiv+0x42>
   235d6:	22ff      	movs	r2, #255	; 0xff
   235d8:	0209      	lsls	r1, r1, #8
   235da:	ba12      	rev	r2, r2
   235dc:	0c03      	lsrs	r3, r0, #16
   235de:	428b      	cmp	r3, r1
   235e0:	d302      	bcc.n	235e8 <__aeabi_idiv+0x38>
   235e2:	1212      	asrs	r2, r2, #8
   235e4:	0209      	lsls	r1, r1, #8
   235e6:	d065      	beq.n	236b4 <__aeabi_idiv+0x104>
   235e8:	0b03      	lsrs	r3, r0, #12
   235ea:	428b      	cmp	r3, r1
   235ec:	d319      	bcc.n	23622 <__aeabi_idiv+0x72>
   235ee:	e000      	b.n	235f2 <__aeabi_idiv+0x42>
   235f0:	0a09      	lsrs	r1, r1, #8
   235f2:	0bc3      	lsrs	r3, r0, #15
   235f4:	428b      	cmp	r3, r1
   235f6:	d301      	bcc.n	235fc <__aeabi_idiv+0x4c>
   235f8:	03cb      	lsls	r3, r1, #15
   235fa:	1ac0      	subs	r0, r0, r3
   235fc:	4152      	adcs	r2, r2
   235fe:	0b83      	lsrs	r3, r0, #14
   23600:	428b      	cmp	r3, r1
   23602:	d301      	bcc.n	23608 <__aeabi_idiv+0x58>
   23604:	038b      	lsls	r3, r1, #14
   23606:	1ac0      	subs	r0, r0, r3
   23608:	4152      	adcs	r2, r2
   2360a:	0b43      	lsrs	r3, r0, #13
   2360c:	428b      	cmp	r3, r1
   2360e:	d301      	bcc.n	23614 <__aeabi_idiv+0x64>
   23610:	034b      	lsls	r3, r1, #13
   23612:	1ac0      	subs	r0, r0, r3
   23614:	4152      	adcs	r2, r2
   23616:	0b03      	lsrs	r3, r0, #12
   23618:	428b      	cmp	r3, r1
   2361a:	d301      	bcc.n	23620 <__aeabi_idiv+0x70>
   2361c:	030b      	lsls	r3, r1, #12
   2361e:	1ac0      	subs	r0, r0, r3
   23620:	4152      	adcs	r2, r2
   23622:	0ac3      	lsrs	r3, r0, #11
   23624:	428b      	cmp	r3, r1
   23626:	d301      	bcc.n	2362c <__aeabi_idiv+0x7c>
   23628:	02cb      	lsls	r3, r1, #11
   2362a:	1ac0      	subs	r0, r0, r3
   2362c:	4152      	adcs	r2, r2
   2362e:	0a83      	lsrs	r3, r0, #10
   23630:	428b      	cmp	r3, r1
   23632:	d301      	bcc.n	23638 <__aeabi_idiv+0x88>
   23634:	028b      	lsls	r3, r1, #10
   23636:	1ac0      	subs	r0, r0, r3
   23638:	4152      	adcs	r2, r2
   2363a:	0a43      	lsrs	r3, r0, #9
   2363c:	428b      	cmp	r3, r1
   2363e:	d301      	bcc.n	23644 <__aeabi_idiv+0x94>
   23640:	024b      	lsls	r3, r1, #9
   23642:	1ac0      	subs	r0, r0, r3
   23644:	4152      	adcs	r2, r2
   23646:	0a03      	lsrs	r3, r0, #8
   23648:	428b      	cmp	r3, r1
   2364a:	d301      	bcc.n	23650 <__aeabi_idiv+0xa0>
   2364c:	020b      	lsls	r3, r1, #8
   2364e:	1ac0      	subs	r0, r0, r3
   23650:	4152      	adcs	r2, r2
   23652:	d2cd      	bcs.n	235f0 <__aeabi_idiv+0x40>
   23654:	09c3      	lsrs	r3, r0, #7
   23656:	428b      	cmp	r3, r1
   23658:	d301      	bcc.n	2365e <__aeabi_idiv+0xae>
   2365a:	01cb      	lsls	r3, r1, #7
   2365c:	1ac0      	subs	r0, r0, r3
   2365e:	4152      	adcs	r2, r2
   23660:	0983      	lsrs	r3, r0, #6
   23662:	428b      	cmp	r3, r1
   23664:	d301      	bcc.n	2366a <__aeabi_idiv+0xba>
   23666:	018b      	lsls	r3, r1, #6
   23668:	1ac0      	subs	r0, r0, r3
   2366a:	4152      	adcs	r2, r2
   2366c:	0943      	lsrs	r3, r0, #5
   2366e:	428b      	cmp	r3, r1
   23670:	d301      	bcc.n	23676 <__aeabi_idiv+0xc6>
   23672:	014b      	lsls	r3, r1, #5
   23674:	1ac0      	subs	r0, r0, r3
   23676:	4152      	adcs	r2, r2
   23678:	0903      	lsrs	r3, r0, #4
   2367a:	428b      	cmp	r3, r1
   2367c:	d301      	bcc.n	23682 <__aeabi_idiv+0xd2>
   2367e:	010b      	lsls	r3, r1, #4
   23680:	1ac0      	subs	r0, r0, r3
   23682:	4152      	adcs	r2, r2
   23684:	08c3      	lsrs	r3, r0, #3
   23686:	428b      	cmp	r3, r1
   23688:	d301      	bcc.n	2368e <__aeabi_idiv+0xde>
   2368a:	00cb      	lsls	r3, r1, #3
   2368c:	1ac0      	subs	r0, r0, r3
   2368e:	4152      	adcs	r2, r2
   23690:	0883      	lsrs	r3, r0, #2
   23692:	428b      	cmp	r3, r1
   23694:	d301      	bcc.n	2369a <__aeabi_idiv+0xea>
   23696:	008b      	lsls	r3, r1, #2
   23698:	1ac0      	subs	r0, r0, r3
   2369a:	4152      	adcs	r2, r2
   2369c:	0843      	lsrs	r3, r0, #1
   2369e:	428b      	cmp	r3, r1
   236a0:	d301      	bcc.n	236a6 <__aeabi_idiv+0xf6>
   236a2:	004b      	lsls	r3, r1, #1
   236a4:	1ac0      	subs	r0, r0, r3
   236a6:	4152      	adcs	r2, r2
   236a8:	1a41      	subs	r1, r0, r1
   236aa:	d200      	bcs.n	236ae <__aeabi_idiv+0xfe>
   236ac:	4601      	mov	r1, r0
   236ae:	4152      	adcs	r2, r2
   236b0:	4610      	mov	r0, r2
   236b2:	4770      	bx	lr
   236b4:	e05d      	b.n	23772 <__aeabi_idiv+0x1c2>
   236b6:	0fca      	lsrs	r2, r1, #31
   236b8:	d000      	beq.n	236bc <__aeabi_idiv+0x10c>
   236ba:	4249      	negs	r1, r1
   236bc:	1003      	asrs	r3, r0, #32
   236be:	d300      	bcc.n	236c2 <__aeabi_idiv+0x112>
   236c0:	4240      	negs	r0, r0
   236c2:	4053      	eors	r3, r2
   236c4:	2200      	movs	r2, #0
   236c6:	469c      	mov	ip, r3
   236c8:	0903      	lsrs	r3, r0, #4
   236ca:	428b      	cmp	r3, r1
   236cc:	d32d      	bcc.n	2372a <__aeabi_idiv+0x17a>
   236ce:	0a03      	lsrs	r3, r0, #8
   236d0:	428b      	cmp	r3, r1
   236d2:	d312      	bcc.n	236fa <__aeabi_idiv+0x14a>
   236d4:	22fc      	movs	r2, #252	; 0xfc
   236d6:	0189      	lsls	r1, r1, #6
   236d8:	ba12      	rev	r2, r2
   236da:	0a03      	lsrs	r3, r0, #8
   236dc:	428b      	cmp	r3, r1
   236de:	d30c      	bcc.n	236fa <__aeabi_idiv+0x14a>
   236e0:	0189      	lsls	r1, r1, #6
   236e2:	1192      	asrs	r2, r2, #6
   236e4:	428b      	cmp	r3, r1
   236e6:	d308      	bcc.n	236fa <__aeabi_idiv+0x14a>
   236e8:	0189      	lsls	r1, r1, #6
   236ea:	1192      	asrs	r2, r2, #6
   236ec:	428b      	cmp	r3, r1
   236ee:	d304      	bcc.n	236fa <__aeabi_idiv+0x14a>
   236f0:	0189      	lsls	r1, r1, #6
   236f2:	d03a      	beq.n	2376a <__aeabi_idiv+0x1ba>
   236f4:	1192      	asrs	r2, r2, #6
   236f6:	e000      	b.n	236fa <__aeabi_idiv+0x14a>
   236f8:	0989      	lsrs	r1, r1, #6
   236fa:	09c3      	lsrs	r3, r0, #7
   236fc:	428b      	cmp	r3, r1
   236fe:	d301      	bcc.n	23704 <__aeabi_idiv+0x154>
   23700:	01cb      	lsls	r3, r1, #7
   23702:	1ac0      	subs	r0, r0, r3
   23704:	4152      	adcs	r2, r2
   23706:	0983      	lsrs	r3, r0, #6
   23708:	428b      	cmp	r3, r1
   2370a:	d301      	bcc.n	23710 <__aeabi_idiv+0x160>
   2370c:	018b      	lsls	r3, r1, #6
   2370e:	1ac0      	subs	r0, r0, r3
   23710:	4152      	adcs	r2, r2
   23712:	0943      	lsrs	r3, r0, #5
   23714:	428b      	cmp	r3, r1
   23716:	d301      	bcc.n	2371c <__aeabi_idiv+0x16c>
   23718:	014b      	lsls	r3, r1, #5
   2371a:	1ac0      	subs	r0, r0, r3
   2371c:	4152      	adcs	r2, r2
   2371e:	0903      	lsrs	r3, r0, #4
   23720:	428b      	cmp	r3, r1
   23722:	d301      	bcc.n	23728 <__aeabi_idiv+0x178>
   23724:	010b      	lsls	r3, r1, #4
   23726:	1ac0      	subs	r0, r0, r3
   23728:	4152      	adcs	r2, r2
   2372a:	08c3      	lsrs	r3, r0, #3
   2372c:	428b      	cmp	r3, r1
   2372e:	d301      	bcc.n	23734 <__aeabi_idiv+0x184>
   23730:	00cb      	lsls	r3, r1, #3
   23732:	1ac0      	subs	r0, r0, r3
   23734:	4152      	adcs	r2, r2
   23736:	0883      	lsrs	r3, r0, #2
   23738:	428b      	cmp	r3, r1
   2373a:	d301      	bcc.n	23740 <__aeabi_idiv+0x190>
   2373c:	008b      	lsls	r3, r1, #2
   2373e:	1ac0      	subs	r0, r0, r3
   23740:	4152      	adcs	r2, r2
   23742:	d2d9      	bcs.n	236f8 <__aeabi_idiv+0x148>
   23744:	0843      	lsrs	r3, r0, #1
   23746:	428b      	cmp	r3, r1
   23748:	d301      	bcc.n	2374e <__aeabi_idiv+0x19e>
   2374a:	004b      	lsls	r3, r1, #1
   2374c:	1ac0      	subs	r0, r0, r3
   2374e:	4152      	adcs	r2, r2
   23750:	1a41      	subs	r1, r0, r1
   23752:	d200      	bcs.n	23756 <__aeabi_idiv+0x1a6>
   23754:	4601      	mov	r1, r0
   23756:	4663      	mov	r3, ip
   23758:	4152      	adcs	r2, r2
   2375a:	105b      	asrs	r3, r3, #1
   2375c:	4610      	mov	r0, r2
   2375e:	d301      	bcc.n	23764 <__aeabi_idiv+0x1b4>
   23760:	4240      	negs	r0, r0
   23762:	2b00      	cmp	r3, #0
   23764:	d500      	bpl.n	23768 <__aeabi_idiv+0x1b8>
   23766:	4249      	negs	r1, r1
   23768:	4770      	bx	lr
   2376a:	4663      	mov	r3, ip
   2376c:	105b      	asrs	r3, r3, #1
   2376e:	d300      	bcc.n	23772 <__aeabi_idiv+0x1c2>
   23770:	4240      	negs	r0, r0
   23772:	b501      	push	{r0, lr}
   23774:	2000      	movs	r0, #0
   23776:	f000 f805 	bl	23784 <__aeabi_idiv0>
   2377a:	bd02      	pop	{r1, pc}

0002377c <__aeabi_idivmod>:
   2377c:	2900      	cmp	r1, #0
   2377e:	d0f8      	beq.n	23772 <__aeabi_idiv+0x1c2>
   23780:	e716      	b.n	235b0 <__aeabi_idiv>
   23782:	4770      	bx	lr

00023784 <__aeabi_idiv0>:
   23784:	4770      	bx	lr
   23786:	46c0      	nop			; (mov r8, r8)

00023788 <__aeabi_cdrcmple>:
   23788:	4684      	mov	ip, r0
   2378a:	1c10      	adds	r0, r2, #0
   2378c:	4662      	mov	r2, ip
   2378e:	468c      	mov	ip, r1
   23790:	1c19      	adds	r1, r3, #0
   23792:	4663      	mov	r3, ip
   23794:	e000      	b.n	23798 <__aeabi_cdcmpeq>
   23796:	46c0      	nop			; (mov r8, r8)

00023798 <__aeabi_cdcmpeq>:
   23798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2379a:	f001 f825 	bl	247e8 <__ledf2>
   2379e:	2800      	cmp	r0, #0
   237a0:	d401      	bmi.n	237a6 <__aeabi_cdcmpeq+0xe>
   237a2:	2100      	movs	r1, #0
   237a4:	42c8      	cmn	r0, r1
   237a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000237a8 <__aeabi_dcmpeq>:
   237a8:	b510      	push	{r4, lr}
   237aa:	f000 ff79 	bl	246a0 <__eqdf2>
   237ae:	4240      	negs	r0, r0
   237b0:	3001      	adds	r0, #1
   237b2:	bd10      	pop	{r4, pc}

000237b4 <__aeabi_dcmplt>:
   237b4:	b510      	push	{r4, lr}
   237b6:	f001 f817 	bl	247e8 <__ledf2>
   237ba:	2800      	cmp	r0, #0
   237bc:	db01      	blt.n	237c2 <__aeabi_dcmplt+0xe>
   237be:	2000      	movs	r0, #0
   237c0:	bd10      	pop	{r4, pc}
   237c2:	2001      	movs	r0, #1
   237c4:	bd10      	pop	{r4, pc}
   237c6:	46c0      	nop			; (mov r8, r8)

000237c8 <__aeabi_dcmple>:
   237c8:	b510      	push	{r4, lr}
   237ca:	f001 f80d 	bl	247e8 <__ledf2>
   237ce:	2800      	cmp	r0, #0
   237d0:	dd01      	ble.n	237d6 <__aeabi_dcmple+0xe>
   237d2:	2000      	movs	r0, #0
   237d4:	bd10      	pop	{r4, pc}
   237d6:	2001      	movs	r0, #1
   237d8:	bd10      	pop	{r4, pc}
   237da:	46c0      	nop			; (mov r8, r8)

000237dc <__aeabi_dcmpgt>:
   237dc:	b510      	push	{r4, lr}
   237de:	f000 ff9f 	bl	24720 <__gedf2>
   237e2:	2800      	cmp	r0, #0
   237e4:	dc01      	bgt.n	237ea <__aeabi_dcmpgt+0xe>
   237e6:	2000      	movs	r0, #0
   237e8:	bd10      	pop	{r4, pc}
   237ea:	2001      	movs	r0, #1
   237ec:	bd10      	pop	{r4, pc}
   237ee:	46c0      	nop			; (mov r8, r8)

000237f0 <__aeabi_dcmpge>:
   237f0:	b510      	push	{r4, lr}
   237f2:	f000 ff95 	bl	24720 <__gedf2>
   237f6:	2800      	cmp	r0, #0
   237f8:	da01      	bge.n	237fe <__aeabi_dcmpge+0xe>
   237fa:	2000      	movs	r0, #0
   237fc:	bd10      	pop	{r4, pc}
   237fe:	2001      	movs	r0, #1
   23800:	bd10      	pop	{r4, pc}
   23802:	46c0      	nop			; (mov r8, r8)

00023804 <__aeabi_uldivmod>:
   23804:	2b00      	cmp	r3, #0
   23806:	d111      	bne.n	2382c <__aeabi_uldivmod+0x28>
   23808:	2a00      	cmp	r2, #0
   2380a:	d10f      	bne.n	2382c <__aeabi_uldivmod+0x28>
   2380c:	2900      	cmp	r1, #0
   2380e:	d100      	bne.n	23812 <__aeabi_uldivmod+0xe>
   23810:	2800      	cmp	r0, #0
   23812:	d002      	beq.n	2381a <__aeabi_uldivmod+0x16>
   23814:	2100      	movs	r1, #0
   23816:	43c9      	mvns	r1, r1
   23818:	1c08      	adds	r0, r1, #0
   2381a:	b407      	push	{r0, r1, r2}
   2381c:	4802      	ldr	r0, [pc, #8]	; (23828 <__aeabi_uldivmod+0x24>)
   2381e:	a102      	add	r1, pc, #8	; (adr r1, 23828 <__aeabi_uldivmod+0x24>)
   23820:	1840      	adds	r0, r0, r1
   23822:	9002      	str	r0, [sp, #8]
   23824:	bd03      	pop	{r0, r1, pc}
   23826:	46c0      	nop			; (mov r8, r8)
   23828:	ffffff5d 	.word	0xffffff5d
   2382c:	b403      	push	{r0, r1}
   2382e:	4668      	mov	r0, sp
   23830:	b501      	push	{r0, lr}
   23832:	9802      	ldr	r0, [sp, #8]
   23834:	f000 f832 	bl	2389c <__udivmoddi4>
   23838:	9b01      	ldr	r3, [sp, #4]
   2383a:	469e      	mov	lr, r3
   2383c:	b002      	add	sp, #8
   2383e:	bc0c      	pop	{r2, r3}
   23840:	4770      	bx	lr
   23842:	46c0      	nop			; (mov r8, r8)

00023844 <__aeabi_lmul>:
   23844:	b5f0      	push	{r4, r5, r6, r7, lr}
   23846:	464f      	mov	r7, r9
   23848:	4646      	mov	r6, r8
   2384a:	b4c0      	push	{r6, r7}
   2384c:	0416      	lsls	r6, r2, #16
   2384e:	0c36      	lsrs	r6, r6, #16
   23850:	4699      	mov	r9, r3
   23852:	0033      	movs	r3, r6
   23854:	0405      	lsls	r5, r0, #16
   23856:	0c2c      	lsrs	r4, r5, #16
   23858:	0c07      	lsrs	r7, r0, #16
   2385a:	0c15      	lsrs	r5, r2, #16
   2385c:	4363      	muls	r3, r4
   2385e:	437e      	muls	r6, r7
   23860:	436f      	muls	r7, r5
   23862:	4365      	muls	r5, r4
   23864:	0c1c      	lsrs	r4, r3, #16
   23866:	19ad      	adds	r5, r5, r6
   23868:	1964      	adds	r4, r4, r5
   2386a:	469c      	mov	ip, r3
   2386c:	42a6      	cmp	r6, r4
   2386e:	d903      	bls.n	23878 <__aeabi_lmul+0x34>
   23870:	2380      	movs	r3, #128	; 0x80
   23872:	025b      	lsls	r3, r3, #9
   23874:	4698      	mov	r8, r3
   23876:	4447      	add	r7, r8
   23878:	4663      	mov	r3, ip
   2387a:	0c25      	lsrs	r5, r4, #16
   2387c:	19ef      	adds	r7, r5, r7
   2387e:	041d      	lsls	r5, r3, #16
   23880:	464b      	mov	r3, r9
   23882:	434a      	muls	r2, r1
   23884:	4343      	muls	r3, r0
   23886:	0c2d      	lsrs	r5, r5, #16
   23888:	0424      	lsls	r4, r4, #16
   2388a:	1964      	adds	r4, r4, r5
   2388c:	1899      	adds	r1, r3, r2
   2388e:	19c9      	adds	r1, r1, r7
   23890:	0020      	movs	r0, r4
   23892:	bc0c      	pop	{r2, r3}
   23894:	4690      	mov	r8, r2
   23896:	4699      	mov	r9, r3
   23898:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2389a:	46c0      	nop			; (mov r8, r8)

0002389c <__udivmoddi4>:
   2389c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2389e:	464d      	mov	r5, r9
   238a0:	4656      	mov	r6, sl
   238a2:	4644      	mov	r4, r8
   238a4:	465f      	mov	r7, fp
   238a6:	b4f0      	push	{r4, r5, r6, r7}
   238a8:	4692      	mov	sl, r2
   238aa:	b083      	sub	sp, #12
   238ac:	0004      	movs	r4, r0
   238ae:	000d      	movs	r5, r1
   238b0:	4699      	mov	r9, r3
   238b2:	428b      	cmp	r3, r1
   238b4:	d82f      	bhi.n	23916 <__udivmoddi4+0x7a>
   238b6:	d02c      	beq.n	23912 <__udivmoddi4+0x76>
   238b8:	4649      	mov	r1, r9
   238ba:	4650      	mov	r0, sl
   238bc:	f001 fe9a 	bl	255f4 <__clzdi2>
   238c0:	0029      	movs	r1, r5
   238c2:	0006      	movs	r6, r0
   238c4:	0020      	movs	r0, r4
   238c6:	f001 fe95 	bl	255f4 <__clzdi2>
   238ca:	1a33      	subs	r3, r6, r0
   238cc:	4698      	mov	r8, r3
   238ce:	3b20      	subs	r3, #32
   238d0:	469b      	mov	fp, r3
   238d2:	d500      	bpl.n	238d6 <__udivmoddi4+0x3a>
   238d4:	e074      	b.n	239c0 <__udivmoddi4+0x124>
   238d6:	4653      	mov	r3, sl
   238d8:	465a      	mov	r2, fp
   238da:	4093      	lsls	r3, r2
   238dc:	001f      	movs	r7, r3
   238de:	4653      	mov	r3, sl
   238e0:	4642      	mov	r2, r8
   238e2:	4093      	lsls	r3, r2
   238e4:	001e      	movs	r6, r3
   238e6:	42af      	cmp	r7, r5
   238e8:	d829      	bhi.n	2393e <__udivmoddi4+0xa2>
   238ea:	d026      	beq.n	2393a <__udivmoddi4+0x9e>
   238ec:	465b      	mov	r3, fp
   238ee:	1ba4      	subs	r4, r4, r6
   238f0:	41bd      	sbcs	r5, r7
   238f2:	2b00      	cmp	r3, #0
   238f4:	da00      	bge.n	238f8 <__udivmoddi4+0x5c>
   238f6:	e079      	b.n	239ec <__udivmoddi4+0x150>
   238f8:	2200      	movs	r2, #0
   238fa:	2300      	movs	r3, #0
   238fc:	9200      	str	r2, [sp, #0]
   238fe:	9301      	str	r3, [sp, #4]
   23900:	2301      	movs	r3, #1
   23902:	465a      	mov	r2, fp
   23904:	4093      	lsls	r3, r2
   23906:	9301      	str	r3, [sp, #4]
   23908:	2301      	movs	r3, #1
   2390a:	4642      	mov	r2, r8
   2390c:	4093      	lsls	r3, r2
   2390e:	9300      	str	r3, [sp, #0]
   23910:	e019      	b.n	23946 <__udivmoddi4+0xaa>
   23912:	4282      	cmp	r2, r0
   23914:	d9d0      	bls.n	238b8 <__udivmoddi4+0x1c>
   23916:	2200      	movs	r2, #0
   23918:	2300      	movs	r3, #0
   2391a:	9200      	str	r2, [sp, #0]
   2391c:	9301      	str	r3, [sp, #4]
   2391e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23920:	2b00      	cmp	r3, #0
   23922:	d001      	beq.n	23928 <__udivmoddi4+0x8c>
   23924:	601c      	str	r4, [r3, #0]
   23926:	605d      	str	r5, [r3, #4]
   23928:	9800      	ldr	r0, [sp, #0]
   2392a:	9901      	ldr	r1, [sp, #4]
   2392c:	b003      	add	sp, #12
   2392e:	bc3c      	pop	{r2, r3, r4, r5}
   23930:	4690      	mov	r8, r2
   23932:	4699      	mov	r9, r3
   23934:	46a2      	mov	sl, r4
   23936:	46ab      	mov	fp, r5
   23938:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2393a:	42a3      	cmp	r3, r4
   2393c:	d9d6      	bls.n	238ec <__udivmoddi4+0x50>
   2393e:	2200      	movs	r2, #0
   23940:	2300      	movs	r3, #0
   23942:	9200      	str	r2, [sp, #0]
   23944:	9301      	str	r3, [sp, #4]
   23946:	4643      	mov	r3, r8
   23948:	2b00      	cmp	r3, #0
   2394a:	d0e8      	beq.n	2391e <__udivmoddi4+0x82>
   2394c:	07fb      	lsls	r3, r7, #31
   2394e:	0872      	lsrs	r2, r6, #1
   23950:	431a      	orrs	r2, r3
   23952:	4646      	mov	r6, r8
   23954:	087b      	lsrs	r3, r7, #1
   23956:	e00e      	b.n	23976 <__udivmoddi4+0xda>
   23958:	42ab      	cmp	r3, r5
   2395a:	d101      	bne.n	23960 <__udivmoddi4+0xc4>
   2395c:	42a2      	cmp	r2, r4
   2395e:	d80c      	bhi.n	2397a <__udivmoddi4+0xde>
   23960:	1aa4      	subs	r4, r4, r2
   23962:	419d      	sbcs	r5, r3
   23964:	2001      	movs	r0, #1
   23966:	1924      	adds	r4, r4, r4
   23968:	416d      	adcs	r5, r5
   2396a:	2100      	movs	r1, #0
   2396c:	3e01      	subs	r6, #1
   2396e:	1824      	adds	r4, r4, r0
   23970:	414d      	adcs	r5, r1
   23972:	2e00      	cmp	r6, #0
   23974:	d006      	beq.n	23984 <__udivmoddi4+0xe8>
   23976:	42ab      	cmp	r3, r5
   23978:	d9ee      	bls.n	23958 <__udivmoddi4+0xbc>
   2397a:	3e01      	subs	r6, #1
   2397c:	1924      	adds	r4, r4, r4
   2397e:	416d      	adcs	r5, r5
   23980:	2e00      	cmp	r6, #0
   23982:	d1f8      	bne.n	23976 <__udivmoddi4+0xda>
   23984:	465b      	mov	r3, fp
   23986:	9800      	ldr	r0, [sp, #0]
   23988:	9901      	ldr	r1, [sp, #4]
   2398a:	1900      	adds	r0, r0, r4
   2398c:	4169      	adcs	r1, r5
   2398e:	2b00      	cmp	r3, #0
   23990:	db22      	blt.n	239d8 <__udivmoddi4+0x13c>
   23992:	002b      	movs	r3, r5
   23994:	465a      	mov	r2, fp
   23996:	40d3      	lsrs	r3, r2
   23998:	002a      	movs	r2, r5
   2399a:	4644      	mov	r4, r8
   2399c:	40e2      	lsrs	r2, r4
   2399e:	001c      	movs	r4, r3
   239a0:	465b      	mov	r3, fp
   239a2:	0015      	movs	r5, r2
   239a4:	2b00      	cmp	r3, #0
   239a6:	db2c      	blt.n	23a02 <__udivmoddi4+0x166>
   239a8:	0026      	movs	r6, r4
   239aa:	409e      	lsls	r6, r3
   239ac:	0033      	movs	r3, r6
   239ae:	0026      	movs	r6, r4
   239b0:	4647      	mov	r7, r8
   239b2:	40be      	lsls	r6, r7
   239b4:	0032      	movs	r2, r6
   239b6:	1a80      	subs	r0, r0, r2
   239b8:	4199      	sbcs	r1, r3
   239ba:	9000      	str	r0, [sp, #0]
   239bc:	9101      	str	r1, [sp, #4]
   239be:	e7ae      	b.n	2391e <__udivmoddi4+0x82>
   239c0:	4642      	mov	r2, r8
   239c2:	2320      	movs	r3, #32
   239c4:	1a9b      	subs	r3, r3, r2
   239c6:	4652      	mov	r2, sl
   239c8:	40da      	lsrs	r2, r3
   239ca:	4641      	mov	r1, r8
   239cc:	0013      	movs	r3, r2
   239ce:	464a      	mov	r2, r9
   239d0:	408a      	lsls	r2, r1
   239d2:	0017      	movs	r7, r2
   239d4:	431f      	orrs	r7, r3
   239d6:	e782      	b.n	238de <__udivmoddi4+0x42>
   239d8:	4642      	mov	r2, r8
   239da:	2320      	movs	r3, #32
   239dc:	1a9b      	subs	r3, r3, r2
   239de:	002a      	movs	r2, r5
   239e0:	4646      	mov	r6, r8
   239e2:	409a      	lsls	r2, r3
   239e4:	0023      	movs	r3, r4
   239e6:	40f3      	lsrs	r3, r6
   239e8:	4313      	orrs	r3, r2
   239ea:	e7d5      	b.n	23998 <__udivmoddi4+0xfc>
   239ec:	4642      	mov	r2, r8
   239ee:	2320      	movs	r3, #32
   239f0:	2100      	movs	r1, #0
   239f2:	1a9b      	subs	r3, r3, r2
   239f4:	2200      	movs	r2, #0
   239f6:	9100      	str	r1, [sp, #0]
   239f8:	9201      	str	r2, [sp, #4]
   239fa:	2201      	movs	r2, #1
   239fc:	40da      	lsrs	r2, r3
   239fe:	9201      	str	r2, [sp, #4]
   23a00:	e782      	b.n	23908 <__udivmoddi4+0x6c>
   23a02:	4642      	mov	r2, r8
   23a04:	2320      	movs	r3, #32
   23a06:	0026      	movs	r6, r4
   23a08:	1a9b      	subs	r3, r3, r2
   23a0a:	40de      	lsrs	r6, r3
   23a0c:	002f      	movs	r7, r5
   23a0e:	46b4      	mov	ip, r6
   23a10:	4097      	lsls	r7, r2
   23a12:	4666      	mov	r6, ip
   23a14:	003b      	movs	r3, r7
   23a16:	4333      	orrs	r3, r6
   23a18:	e7c9      	b.n	239ae <__udivmoddi4+0x112>
   23a1a:	46c0      	nop			; (mov r8, r8)

00023a1c <__aeabi_dadd>:
   23a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a1e:	4656      	mov	r6, sl
   23a20:	465f      	mov	r7, fp
   23a22:	464d      	mov	r5, r9
   23a24:	4644      	mov	r4, r8
   23a26:	b4f0      	push	{r4, r5, r6, r7}
   23a28:	000f      	movs	r7, r1
   23a2a:	0ffd      	lsrs	r5, r7, #31
   23a2c:	46aa      	mov	sl, r5
   23a2e:	0309      	lsls	r1, r1, #12
   23a30:	007c      	lsls	r4, r7, #1
   23a32:	002e      	movs	r6, r5
   23a34:	005f      	lsls	r7, r3, #1
   23a36:	0f45      	lsrs	r5, r0, #29
   23a38:	0a49      	lsrs	r1, r1, #9
   23a3a:	0d7f      	lsrs	r7, r7, #21
   23a3c:	4329      	orrs	r1, r5
   23a3e:	00c5      	lsls	r5, r0, #3
   23a40:	0318      	lsls	r0, r3, #12
   23a42:	46bc      	mov	ip, r7
   23a44:	0a40      	lsrs	r0, r0, #9
   23a46:	0f57      	lsrs	r7, r2, #29
   23a48:	0d64      	lsrs	r4, r4, #21
   23a4a:	0fdb      	lsrs	r3, r3, #31
   23a4c:	4338      	orrs	r0, r7
   23a4e:	00d2      	lsls	r2, r2, #3
   23a50:	459a      	cmp	sl, r3
   23a52:	d100      	bne.n	23a56 <__aeabi_dadd+0x3a>
   23a54:	e0aa      	b.n	23bac <__aeabi_dadd+0x190>
   23a56:	4666      	mov	r6, ip
   23a58:	1ba6      	subs	r6, r4, r6
   23a5a:	2e00      	cmp	r6, #0
   23a5c:	dc00      	bgt.n	23a60 <__aeabi_dadd+0x44>
   23a5e:	e0ff      	b.n	23c60 <__aeabi_dadd+0x244>
   23a60:	4663      	mov	r3, ip
   23a62:	2b00      	cmp	r3, #0
   23a64:	d139      	bne.n	23ada <__aeabi_dadd+0xbe>
   23a66:	0003      	movs	r3, r0
   23a68:	4313      	orrs	r3, r2
   23a6a:	d000      	beq.n	23a6e <__aeabi_dadd+0x52>
   23a6c:	e0d9      	b.n	23c22 <__aeabi_dadd+0x206>
   23a6e:	076b      	lsls	r3, r5, #29
   23a70:	d009      	beq.n	23a86 <__aeabi_dadd+0x6a>
   23a72:	230f      	movs	r3, #15
   23a74:	402b      	ands	r3, r5
   23a76:	2b04      	cmp	r3, #4
   23a78:	d005      	beq.n	23a86 <__aeabi_dadd+0x6a>
   23a7a:	1d2b      	adds	r3, r5, #4
   23a7c:	42ab      	cmp	r3, r5
   23a7e:	41ad      	sbcs	r5, r5
   23a80:	426d      	negs	r5, r5
   23a82:	1949      	adds	r1, r1, r5
   23a84:	001d      	movs	r5, r3
   23a86:	020b      	lsls	r3, r1, #8
   23a88:	d400      	bmi.n	23a8c <__aeabi_dadd+0x70>
   23a8a:	e082      	b.n	23b92 <__aeabi_dadd+0x176>
   23a8c:	4bca      	ldr	r3, [pc, #808]	; (23db8 <__aeabi_dadd+0x39c>)
   23a8e:	3401      	adds	r4, #1
   23a90:	429c      	cmp	r4, r3
   23a92:	d100      	bne.n	23a96 <__aeabi_dadd+0x7a>
   23a94:	e0fe      	b.n	23c94 <__aeabi_dadd+0x278>
   23a96:	000a      	movs	r2, r1
   23a98:	4656      	mov	r6, sl
   23a9a:	4bc8      	ldr	r3, [pc, #800]	; (23dbc <__aeabi_dadd+0x3a0>)
   23a9c:	08ed      	lsrs	r5, r5, #3
   23a9e:	401a      	ands	r2, r3
   23aa0:	0750      	lsls	r0, r2, #29
   23aa2:	0564      	lsls	r4, r4, #21
   23aa4:	0252      	lsls	r2, r2, #9
   23aa6:	4305      	orrs	r5, r0
   23aa8:	0b12      	lsrs	r2, r2, #12
   23aaa:	0d64      	lsrs	r4, r4, #21
   23aac:	2100      	movs	r1, #0
   23aae:	0312      	lsls	r2, r2, #12
   23ab0:	0d0b      	lsrs	r3, r1, #20
   23ab2:	051b      	lsls	r3, r3, #20
   23ab4:	0564      	lsls	r4, r4, #21
   23ab6:	0b12      	lsrs	r2, r2, #12
   23ab8:	431a      	orrs	r2, r3
   23aba:	0863      	lsrs	r3, r4, #1
   23abc:	4cc0      	ldr	r4, [pc, #768]	; (23dc0 <__aeabi_dadd+0x3a4>)
   23abe:	07f6      	lsls	r6, r6, #31
   23ac0:	4014      	ands	r4, r2
   23ac2:	431c      	orrs	r4, r3
   23ac4:	0064      	lsls	r4, r4, #1
   23ac6:	0864      	lsrs	r4, r4, #1
   23ac8:	4334      	orrs	r4, r6
   23aca:	0028      	movs	r0, r5
   23acc:	0021      	movs	r1, r4
   23ace:	bc3c      	pop	{r2, r3, r4, r5}
   23ad0:	4690      	mov	r8, r2
   23ad2:	4699      	mov	r9, r3
   23ad4:	46a2      	mov	sl, r4
   23ad6:	46ab      	mov	fp, r5
   23ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23ada:	4bb7      	ldr	r3, [pc, #732]	; (23db8 <__aeabi_dadd+0x39c>)
   23adc:	429c      	cmp	r4, r3
   23ade:	d0c6      	beq.n	23a6e <__aeabi_dadd+0x52>
   23ae0:	2380      	movs	r3, #128	; 0x80
   23ae2:	041b      	lsls	r3, r3, #16
   23ae4:	4318      	orrs	r0, r3
   23ae6:	2e38      	cmp	r6, #56	; 0x38
   23ae8:	dd00      	ble.n	23aec <__aeabi_dadd+0xd0>
   23aea:	e0eb      	b.n	23cc4 <__aeabi_dadd+0x2a8>
   23aec:	2e1f      	cmp	r6, #31
   23aee:	dd00      	ble.n	23af2 <__aeabi_dadd+0xd6>
   23af0:	e11e      	b.n	23d30 <__aeabi_dadd+0x314>
   23af2:	2320      	movs	r3, #32
   23af4:	1b9b      	subs	r3, r3, r6
   23af6:	469c      	mov	ip, r3
   23af8:	0003      	movs	r3, r0
   23afa:	4667      	mov	r7, ip
   23afc:	40bb      	lsls	r3, r7
   23afe:	4698      	mov	r8, r3
   23b00:	0013      	movs	r3, r2
   23b02:	4647      	mov	r7, r8
   23b04:	40f3      	lsrs	r3, r6
   23b06:	433b      	orrs	r3, r7
   23b08:	4667      	mov	r7, ip
   23b0a:	40ba      	lsls	r2, r7
   23b0c:	1e57      	subs	r7, r2, #1
   23b0e:	41ba      	sbcs	r2, r7
   23b10:	4313      	orrs	r3, r2
   23b12:	0002      	movs	r2, r0
   23b14:	40f2      	lsrs	r2, r6
   23b16:	1aeb      	subs	r3, r5, r3
   23b18:	429d      	cmp	r5, r3
   23b1a:	41b6      	sbcs	r6, r6
   23b1c:	001d      	movs	r5, r3
   23b1e:	1a8a      	subs	r2, r1, r2
   23b20:	4276      	negs	r6, r6
   23b22:	1b91      	subs	r1, r2, r6
   23b24:	020b      	lsls	r3, r1, #8
   23b26:	d531      	bpl.n	23b8c <__aeabi_dadd+0x170>
   23b28:	024a      	lsls	r2, r1, #9
   23b2a:	0a56      	lsrs	r6, r2, #9
   23b2c:	2e00      	cmp	r6, #0
   23b2e:	d100      	bne.n	23b32 <__aeabi_dadd+0x116>
   23b30:	e0b4      	b.n	23c9c <__aeabi_dadd+0x280>
   23b32:	0030      	movs	r0, r6
   23b34:	f001 fd40 	bl	255b8 <__clzsi2>
   23b38:	0003      	movs	r3, r0
   23b3a:	3b08      	subs	r3, #8
   23b3c:	2b1f      	cmp	r3, #31
   23b3e:	dd00      	ble.n	23b42 <__aeabi_dadd+0x126>
   23b40:	e0b5      	b.n	23cae <__aeabi_dadd+0x292>
   23b42:	2220      	movs	r2, #32
   23b44:	0029      	movs	r1, r5
   23b46:	1ad2      	subs	r2, r2, r3
   23b48:	40d1      	lsrs	r1, r2
   23b4a:	409e      	lsls	r6, r3
   23b4c:	000a      	movs	r2, r1
   23b4e:	409d      	lsls	r5, r3
   23b50:	4332      	orrs	r2, r6
   23b52:	429c      	cmp	r4, r3
   23b54:	dd00      	ble.n	23b58 <__aeabi_dadd+0x13c>
   23b56:	e0b1      	b.n	23cbc <__aeabi_dadd+0x2a0>
   23b58:	1b1c      	subs	r4, r3, r4
   23b5a:	1c63      	adds	r3, r4, #1
   23b5c:	2b1f      	cmp	r3, #31
   23b5e:	dd00      	ble.n	23b62 <__aeabi_dadd+0x146>
   23b60:	e0d5      	b.n	23d0e <__aeabi_dadd+0x2f2>
   23b62:	2120      	movs	r1, #32
   23b64:	0014      	movs	r4, r2
   23b66:	0028      	movs	r0, r5
   23b68:	1ac9      	subs	r1, r1, r3
   23b6a:	408c      	lsls	r4, r1
   23b6c:	40d8      	lsrs	r0, r3
   23b6e:	408d      	lsls	r5, r1
   23b70:	4304      	orrs	r4, r0
   23b72:	40da      	lsrs	r2, r3
   23b74:	1e68      	subs	r0, r5, #1
   23b76:	4185      	sbcs	r5, r0
   23b78:	0011      	movs	r1, r2
   23b7a:	4325      	orrs	r5, r4
   23b7c:	2400      	movs	r4, #0
   23b7e:	e776      	b.n	23a6e <__aeabi_dadd+0x52>
   23b80:	4641      	mov	r1, r8
   23b82:	4331      	orrs	r1, r6
   23b84:	d100      	bne.n	23b88 <__aeabi_dadd+0x16c>
   23b86:	e234      	b.n	23ff2 <__aeabi_dadd+0x5d6>
   23b88:	0031      	movs	r1, r6
   23b8a:	4645      	mov	r5, r8
   23b8c:	076b      	lsls	r3, r5, #29
   23b8e:	d000      	beq.n	23b92 <__aeabi_dadd+0x176>
   23b90:	e76f      	b.n	23a72 <__aeabi_dadd+0x56>
   23b92:	4656      	mov	r6, sl
   23b94:	0748      	lsls	r0, r1, #29
   23b96:	08ed      	lsrs	r5, r5, #3
   23b98:	08c9      	lsrs	r1, r1, #3
   23b9a:	4305      	orrs	r5, r0
   23b9c:	4b86      	ldr	r3, [pc, #536]	; (23db8 <__aeabi_dadd+0x39c>)
   23b9e:	429c      	cmp	r4, r3
   23ba0:	d035      	beq.n	23c0e <__aeabi_dadd+0x1f2>
   23ba2:	030a      	lsls	r2, r1, #12
   23ba4:	0564      	lsls	r4, r4, #21
   23ba6:	0b12      	lsrs	r2, r2, #12
   23ba8:	0d64      	lsrs	r4, r4, #21
   23baa:	e77f      	b.n	23aac <__aeabi_dadd+0x90>
   23bac:	4663      	mov	r3, ip
   23bae:	1ae3      	subs	r3, r4, r3
   23bb0:	469b      	mov	fp, r3
   23bb2:	2b00      	cmp	r3, #0
   23bb4:	dc00      	bgt.n	23bb8 <__aeabi_dadd+0x19c>
   23bb6:	e08b      	b.n	23cd0 <__aeabi_dadd+0x2b4>
   23bb8:	4667      	mov	r7, ip
   23bba:	2f00      	cmp	r7, #0
   23bbc:	d03c      	beq.n	23c38 <__aeabi_dadd+0x21c>
   23bbe:	4f7e      	ldr	r7, [pc, #504]	; (23db8 <__aeabi_dadd+0x39c>)
   23bc0:	42bc      	cmp	r4, r7
   23bc2:	d100      	bne.n	23bc6 <__aeabi_dadd+0x1aa>
   23bc4:	e753      	b.n	23a6e <__aeabi_dadd+0x52>
   23bc6:	2780      	movs	r7, #128	; 0x80
   23bc8:	043f      	lsls	r7, r7, #16
   23bca:	4338      	orrs	r0, r7
   23bcc:	465b      	mov	r3, fp
   23bce:	2b38      	cmp	r3, #56	; 0x38
   23bd0:	dc00      	bgt.n	23bd4 <__aeabi_dadd+0x1b8>
   23bd2:	e0f7      	b.n	23dc4 <__aeabi_dadd+0x3a8>
   23bd4:	4302      	orrs	r2, r0
   23bd6:	1e50      	subs	r0, r2, #1
   23bd8:	4182      	sbcs	r2, r0
   23bda:	2000      	movs	r0, #0
   23bdc:	b2d2      	uxtb	r2, r2
   23bde:	1953      	adds	r3, r2, r5
   23be0:	1842      	adds	r2, r0, r1
   23be2:	42ab      	cmp	r3, r5
   23be4:	4189      	sbcs	r1, r1
   23be6:	001d      	movs	r5, r3
   23be8:	4249      	negs	r1, r1
   23bea:	1889      	adds	r1, r1, r2
   23bec:	020b      	lsls	r3, r1, #8
   23bee:	d5cd      	bpl.n	23b8c <__aeabi_dadd+0x170>
   23bf0:	4b71      	ldr	r3, [pc, #452]	; (23db8 <__aeabi_dadd+0x39c>)
   23bf2:	3401      	adds	r4, #1
   23bf4:	429c      	cmp	r4, r3
   23bf6:	d100      	bne.n	23bfa <__aeabi_dadd+0x1de>
   23bf8:	e13d      	b.n	23e76 <__aeabi_dadd+0x45a>
   23bfa:	2001      	movs	r0, #1
   23bfc:	4a6f      	ldr	r2, [pc, #444]	; (23dbc <__aeabi_dadd+0x3a0>)
   23bfe:	086b      	lsrs	r3, r5, #1
   23c00:	400a      	ands	r2, r1
   23c02:	4028      	ands	r0, r5
   23c04:	4318      	orrs	r0, r3
   23c06:	07d5      	lsls	r5, r2, #31
   23c08:	4305      	orrs	r5, r0
   23c0a:	0851      	lsrs	r1, r2, #1
   23c0c:	e72f      	b.n	23a6e <__aeabi_dadd+0x52>
   23c0e:	002b      	movs	r3, r5
   23c10:	430b      	orrs	r3, r1
   23c12:	d100      	bne.n	23c16 <__aeabi_dadd+0x1fa>
   23c14:	e1cb      	b.n	23fae <__aeabi_dadd+0x592>
   23c16:	2380      	movs	r3, #128	; 0x80
   23c18:	031b      	lsls	r3, r3, #12
   23c1a:	430b      	orrs	r3, r1
   23c1c:	031a      	lsls	r2, r3, #12
   23c1e:	0b12      	lsrs	r2, r2, #12
   23c20:	e744      	b.n	23aac <__aeabi_dadd+0x90>
   23c22:	3e01      	subs	r6, #1
   23c24:	2e00      	cmp	r6, #0
   23c26:	d16d      	bne.n	23d04 <__aeabi_dadd+0x2e8>
   23c28:	1aae      	subs	r6, r5, r2
   23c2a:	42b5      	cmp	r5, r6
   23c2c:	419b      	sbcs	r3, r3
   23c2e:	1a09      	subs	r1, r1, r0
   23c30:	425b      	negs	r3, r3
   23c32:	1ac9      	subs	r1, r1, r3
   23c34:	0035      	movs	r5, r6
   23c36:	e775      	b.n	23b24 <__aeabi_dadd+0x108>
   23c38:	0007      	movs	r7, r0
   23c3a:	4317      	orrs	r7, r2
   23c3c:	d100      	bne.n	23c40 <__aeabi_dadd+0x224>
   23c3e:	e716      	b.n	23a6e <__aeabi_dadd+0x52>
   23c40:	2301      	movs	r3, #1
   23c42:	425b      	negs	r3, r3
   23c44:	469c      	mov	ip, r3
   23c46:	44e3      	add	fp, ip
   23c48:	465b      	mov	r3, fp
   23c4a:	2b00      	cmp	r3, #0
   23c4c:	d000      	beq.n	23c50 <__aeabi_dadd+0x234>
   23c4e:	e0e0      	b.n	23e12 <__aeabi_dadd+0x3f6>
   23c50:	18aa      	adds	r2, r5, r2
   23c52:	42aa      	cmp	r2, r5
   23c54:	419b      	sbcs	r3, r3
   23c56:	1809      	adds	r1, r1, r0
   23c58:	425b      	negs	r3, r3
   23c5a:	1859      	adds	r1, r3, r1
   23c5c:	0015      	movs	r5, r2
   23c5e:	e7c5      	b.n	23bec <__aeabi_dadd+0x1d0>
   23c60:	2e00      	cmp	r6, #0
   23c62:	d175      	bne.n	23d50 <__aeabi_dadd+0x334>
   23c64:	1c66      	adds	r6, r4, #1
   23c66:	0576      	lsls	r6, r6, #21
   23c68:	0d76      	lsrs	r6, r6, #21
   23c6a:	2e01      	cmp	r6, #1
   23c6c:	dc00      	bgt.n	23c70 <__aeabi_dadd+0x254>
   23c6e:	e0f3      	b.n	23e58 <__aeabi_dadd+0x43c>
   23c70:	1aae      	subs	r6, r5, r2
   23c72:	46b0      	mov	r8, r6
   23c74:	4545      	cmp	r5, r8
   23c76:	41bf      	sbcs	r7, r7
   23c78:	1a0e      	subs	r6, r1, r0
   23c7a:	427f      	negs	r7, r7
   23c7c:	1bf6      	subs	r6, r6, r7
   23c7e:	0237      	lsls	r7, r6, #8
   23c80:	d400      	bmi.n	23c84 <__aeabi_dadd+0x268>
   23c82:	e08f      	b.n	23da4 <__aeabi_dadd+0x388>
   23c84:	1b55      	subs	r5, r2, r5
   23c86:	42aa      	cmp	r2, r5
   23c88:	41b6      	sbcs	r6, r6
   23c8a:	1a41      	subs	r1, r0, r1
   23c8c:	4276      	negs	r6, r6
   23c8e:	1b8e      	subs	r6, r1, r6
   23c90:	469a      	mov	sl, r3
   23c92:	e74b      	b.n	23b2c <__aeabi_dadd+0x110>
   23c94:	4656      	mov	r6, sl
   23c96:	2200      	movs	r2, #0
   23c98:	2500      	movs	r5, #0
   23c9a:	e707      	b.n	23aac <__aeabi_dadd+0x90>
   23c9c:	0028      	movs	r0, r5
   23c9e:	f001 fc8b 	bl	255b8 <__clzsi2>
   23ca2:	3020      	adds	r0, #32
   23ca4:	0003      	movs	r3, r0
   23ca6:	3b08      	subs	r3, #8
   23ca8:	2b1f      	cmp	r3, #31
   23caa:	dc00      	bgt.n	23cae <__aeabi_dadd+0x292>
   23cac:	e749      	b.n	23b42 <__aeabi_dadd+0x126>
   23cae:	002a      	movs	r2, r5
   23cb0:	3828      	subs	r0, #40	; 0x28
   23cb2:	4082      	lsls	r2, r0
   23cb4:	2500      	movs	r5, #0
   23cb6:	429c      	cmp	r4, r3
   23cb8:	dc00      	bgt.n	23cbc <__aeabi_dadd+0x2a0>
   23cba:	e74d      	b.n	23b58 <__aeabi_dadd+0x13c>
   23cbc:	493f      	ldr	r1, [pc, #252]	; (23dbc <__aeabi_dadd+0x3a0>)
   23cbe:	1ae4      	subs	r4, r4, r3
   23cc0:	4011      	ands	r1, r2
   23cc2:	e6d4      	b.n	23a6e <__aeabi_dadd+0x52>
   23cc4:	4302      	orrs	r2, r0
   23cc6:	1e50      	subs	r0, r2, #1
   23cc8:	4182      	sbcs	r2, r0
   23cca:	b2d3      	uxtb	r3, r2
   23ccc:	2200      	movs	r2, #0
   23cce:	e722      	b.n	23b16 <__aeabi_dadd+0xfa>
   23cd0:	2b00      	cmp	r3, #0
   23cd2:	d000      	beq.n	23cd6 <__aeabi_dadd+0x2ba>
   23cd4:	e0f3      	b.n	23ebe <__aeabi_dadd+0x4a2>
   23cd6:	1c63      	adds	r3, r4, #1
   23cd8:	469c      	mov	ip, r3
   23cda:	055b      	lsls	r3, r3, #21
   23cdc:	0d5b      	lsrs	r3, r3, #21
   23cde:	2b01      	cmp	r3, #1
   23ce0:	dc00      	bgt.n	23ce4 <__aeabi_dadd+0x2c8>
   23ce2:	e09f      	b.n	23e24 <__aeabi_dadd+0x408>
   23ce4:	4b34      	ldr	r3, [pc, #208]	; (23db8 <__aeabi_dadd+0x39c>)
   23ce6:	459c      	cmp	ip, r3
   23ce8:	d100      	bne.n	23cec <__aeabi_dadd+0x2d0>
   23cea:	e0c3      	b.n	23e74 <__aeabi_dadd+0x458>
   23cec:	18aa      	adds	r2, r5, r2
   23cee:	1809      	adds	r1, r1, r0
   23cf0:	42aa      	cmp	r2, r5
   23cf2:	4180      	sbcs	r0, r0
   23cf4:	4240      	negs	r0, r0
   23cf6:	1841      	adds	r1, r0, r1
   23cf8:	07cd      	lsls	r5, r1, #31
   23cfa:	0852      	lsrs	r2, r2, #1
   23cfc:	4315      	orrs	r5, r2
   23cfe:	0849      	lsrs	r1, r1, #1
   23d00:	4664      	mov	r4, ip
   23d02:	e6b4      	b.n	23a6e <__aeabi_dadd+0x52>
   23d04:	4b2c      	ldr	r3, [pc, #176]	; (23db8 <__aeabi_dadd+0x39c>)
   23d06:	429c      	cmp	r4, r3
   23d08:	d000      	beq.n	23d0c <__aeabi_dadd+0x2f0>
   23d0a:	e6ec      	b.n	23ae6 <__aeabi_dadd+0xca>
   23d0c:	e6af      	b.n	23a6e <__aeabi_dadd+0x52>
   23d0e:	0011      	movs	r1, r2
   23d10:	3c1f      	subs	r4, #31
   23d12:	40e1      	lsrs	r1, r4
   23d14:	000c      	movs	r4, r1
   23d16:	2b20      	cmp	r3, #32
   23d18:	d100      	bne.n	23d1c <__aeabi_dadd+0x300>
   23d1a:	e07f      	b.n	23e1c <__aeabi_dadd+0x400>
   23d1c:	2140      	movs	r1, #64	; 0x40
   23d1e:	1acb      	subs	r3, r1, r3
   23d20:	409a      	lsls	r2, r3
   23d22:	4315      	orrs	r5, r2
   23d24:	1e6a      	subs	r2, r5, #1
   23d26:	4195      	sbcs	r5, r2
   23d28:	2100      	movs	r1, #0
   23d2a:	4325      	orrs	r5, r4
   23d2c:	2400      	movs	r4, #0
   23d2e:	e72d      	b.n	23b8c <__aeabi_dadd+0x170>
   23d30:	0033      	movs	r3, r6
   23d32:	0007      	movs	r7, r0
   23d34:	3b20      	subs	r3, #32
   23d36:	40df      	lsrs	r7, r3
   23d38:	003b      	movs	r3, r7
   23d3a:	2e20      	cmp	r6, #32
   23d3c:	d070      	beq.n	23e20 <__aeabi_dadd+0x404>
   23d3e:	2740      	movs	r7, #64	; 0x40
   23d40:	1bbe      	subs	r6, r7, r6
   23d42:	40b0      	lsls	r0, r6
   23d44:	4302      	orrs	r2, r0
   23d46:	1e50      	subs	r0, r2, #1
   23d48:	4182      	sbcs	r2, r0
   23d4a:	4313      	orrs	r3, r2
   23d4c:	2200      	movs	r2, #0
   23d4e:	e6e2      	b.n	23b16 <__aeabi_dadd+0xfa>
   23d50:	2c00      	cmp	r4, #0
   23d52:	d04f      	beq.n	23df4 <__aeabi_dadd+0x3d8>
   23d54:	4c18      	ldr	r4, [pc, #96]	; (23db8 <__aeabi_dadd+0x39c>)
   23d56:	45a4      	cmp	ip, r4
   23d58:	d100      	bne.n	23d5c <__aeabi_dadd+0x340>
   23d5a:	e0ab      	b.n	23eb4 <__aeabi_dadd+0x498>
   23d5c:	2480      	movs	r4, #128	; 0x80
   23d5e:	0424      	lsls	r4, r4, #16
   23d60:	4276      	negs	r6, r6
   23d62:	4321      	orrs	r1, r4
   23d64:	2e38      	cmp	r6, #56	; 0x38
   23d66:	dd00      	ble.n	23d6a <__aeabi_dadd+0x34e>
   23d68:	e0df      	b.n	23f2a <__aeabi_dadd+0x50e>
   23d6a:	2e1f      	cmp	r6, #31
   23d6c:	dd00      	ble.n	23d70 <__aeabi_dadd+0x354>
   23d6e:	e143      	b.n	23ff8 <__aeabi_dadd+0x5dc>
   23d70:	2720      	movs	r7, #32
   23d72:	1bbc      	subs	r4, r7, r6
   23d74:	46a1      	mov	r9, r4
   23d76:	000c      	movs	r4, r1
   23d78:	464f      	mov	r7, r9
   23d7a:	40bc      	lsls	r4, r7
   23d7c:	46a0      	mov	r8, r4
   23d7e:	002c      	movs	r4, r5
   23d80:	4647      	mov	r7, r8
   23d82:	40f4      	lsrs	r4, r6
   23d84:	433c      	orrs	r4, r7
   23d86:	464f      	mov	r7, r9
   23d88:	40bd      	lsls	r5, r7
   23d8a:	1e6f      	subs	r7, r5, #1
   23d8c:	41bd      	sbcs	r5, r7
   23d8e:	40f1      	lsrs	r1, r6
   23d90:	432c      	orrs	r4, r5
   23d92:	1b15      	subs	r5, r2, r4
   23d94:	42aa      	cmp	r2, r5
   23d96:	4192      	sbcs	r2, r2
   23d98:	1a41      	subs	r1, r0, r1
   23d9a:	4252      	negs	r2, r2
   23d9c:	1a89      	subs	r1, r1, r2
   23d9e:	4664      	mov	r4, ip
   23da0:	469a      	mov	sl, r3
   23da2:	e6bf      	b.n	23b24 <__aeabi_dadd+0x108>
   23da4:	4641      	mov	r1, r8
   23da6:	4645      	mov	r5, r8
   23da8:	4331      	orrs	r1, r6
   23daa:	d000      	beq.n	23dae <__aeabi_dadd+0x392>
   23dac:	e6be      	b.n	23b2c <__aeabi_dadd+0x110>
   23dae:	2600      	movs	r6, #0
   23db0:	2400      	movs	r4, #0
   23db2:	2500      	movs	r5, #0
   23db4:	e6f2      	b.n	23b9c <__aeabi_dadd+0x180>
   23db6:	46c0      	nop			; (mov r8, r8)
   23db8:	000007ff 	.word	0x000007ff
   23dbc:	ff7fffff 	.word	0xff7fffff
   23dc0:	800fffff 	.word	0x800fffff
   23dc4:	2b1f      	cmp	r3, #31
   23dc6:	dc59      	bgt.n	23e7c <__aeabi_dadd+0x460>
   23dc8:	2720      	movs	r7, #32
   23dca:	1aff      	subs	r7, r7, r3
   23dcc:	46bc      	mov	ip, r7
   23dce:	0007      	movs	r7, r0
   23dd0:	4663      	mov	r3, ip
   23dd2:	409f      	lsls	r7, r3
   23dd4:	465b      	mov	r3, fp
   23dd6:	46b9      	mov	r9, r7
   23dd8:	0017      	movs	r7, r2
   23dda:	40df      	lsrs	r7, r3
   23ddc:	46b8      	mov	r8, r7
   23dde:	464f      	mov	r7, r9
   23de0:	4643      	mov	r3, r8
   23de2:	431f      	orrs	r7, r3
   23de4:	4663      	mov	r3, ip
   23de6:	409a      	lsls	r2, r3
   23de8:	1e53      	subs	r3, r2, #1
   23dea:	419a      	sbcs	r2, r3
   23dec:	465b      	mov	r3, fp
   23dee:	433a      	orrs	r2, r7
   23df0:	40d8      	lsrs	r0, r3
   23df2:	e6f4      	b.n	23bde <__aeabi_dadd+0x1c2>
   23df4:	000c      	movs	r4, r1
   23df6:	432c      	orrs	r4, r5
   23df8:	d05c      	beq.n	23eb4 <__aeabi_dadd+0x498>
   23dfa:	43f6      	mvns	r6, r6
   23dfc:	2e00      	cmp	r6, #0
   23dfe:	d155      	bne.n	23eac <__aeabi_dadd+0x490>
   23e00:	1b55      	subs	r5, r2, r5
   23e02:	42aa      	cmp	r2, r5
   23e04:	41a4      	sbcs	r4, r4
   23e06:	1a41      	subs	r1, r0, r1
   23e08:	4264      	negs	r4, r4
   23e0a:	1b09      	subs	r1, r1, r4
   23e0c:	469a      	mov	sl, r3
   23e0e:	4664      	mov	r4, ip
   23e10:	e688      	b.n	23b24 <__aeabi_dadd+0x108>
   23e12:	4f96      	ldr	r7, [pc, #600]	; (2406c <__aeabi_dadd+0x650>)
   23e14:	42bc      	cmp	r4, r7
   23e16:	d000      	beq.n	23e1a <__aeabi_dadd+0x3fe>
   23e18:	e6d8      	b.n	23bcc <__aeabi_dadd+0x1b0>
   23e1a:	e628      	b.n	23a6e <__aeabi_dadd+0x52>
   23e1c:	2200      	movs	r2, #0
   23e1e:	e780      	b.n	23d22 <__aeabi_dadd+0x306>
   23e20:	2000      	movs	r0, #0
   23e22:	e78f      	b.n	23d44 <__aeabi_dadd+0x328>
   23e24:	000b      	movs	r3, r1
   23e26:	432b      	orrs	r3, r5
   23e28:	2c00      	cmp	r4, #0
   23e2a:	d000      	beq.n	23e2e <__aeabi_dadd+0x412>
   23e2c:	e0c2      	b.n	23fb4 <__aeabi_dadd+0x598>
   23e2e:	2b00      	cmp	r3, #0
   23e30:	d100      	bne.n	23e34 <__aeabi_dadd+0x418>
   23e32:	e101      	b.n	24038 <__aeabi_dadd+0x61c>
   23e34:	0003      	movs	r3, r0
   23e36:	4313      	orrs	r3, r2
   23e38:	d100      	bne.n	23e3c <__aeabi_dadd+0x420>
   23e3a:	e618      	b.n	23a6e <__aeabi_dadd+0x52>
   23e3c:	18ab      	adds	r3, r5, r2
   23e3e:	42ab      	cmp	r3, r5
   23e40:	41b6      	sbcs	r6, r6
   23e42:	1809      	adds	r1, r1, r0
   23e44:	4276      	negs	r6, r6
   23e46:	1871      	adds	r1, r6, r1
   23e48:	020a      	lsls	r2, r1, #8
   23e4a:	d400      	bmi.n	23e4e <__aeabi_dadd+0x432>
   23e4c:	e109      	b.n	24062 <__aeabi_dadd+0x646>
   23e4e:	4a88      	ldr	r2, [pc, #544]	; (24070 <__aeabi_dadd+0x654>)
   23e50:	001d      	movs	r5, r3
   23e52:	4011      	ands	r1, r2
   23e54:	4664      	mov	r4, ip
   23e56:	e60a      	b.n	23a6e <__aeabi_dadd+0x52>
   23e58:	2c00      	cmp	r4, #0
   23e5a:	d15b      	bne.n	23f14 <__aeabi_dadd+0x4f8>
   23e5c:	000e      	movs	r6, r1
   23e5e:	432e      	orrs	r6, r5
   23e60:	d000      	beq.n	23e64 <__aeabi_dadd+0x448>
   23e62:	e08a      	b.n	23f7a <__aeabi_dadd+0x55e>
   23e64:	0001      	movs	r1, r0
   23e66:	4311      	orrs	r1, r2
   23e68:	d100      	bne.n	23e6c <__aeabi_dadd+0x450>
   23e6a:	e0c2      	b.n	23ff2 <__aeabi_dadd+0x5d6>
   23e6c:	0001      	movs	r1, r0
   23e6e:	0015      	movs	r5, r2
   23e70:	469a      	mov	sl, r3
   23e72:	e5fc      	b.n	23a6e <__aeabi_dadd+0x52>
   23e74:	4664      	mov	r4, ip
   23e76:	2100      	movs	r1, #0
   23e78:	2500      	movs	r5, #0
   23e7a:	e68f      	b.n	23b9c <__aeabi_dadd+0x180>
   23e7c:	2320      	movs	r3, #32
   23e7e:	425b      	negs	r3, r3
   23e80:	469c      	mov	ip, r3
   23e82:	44dc      	add	ip, fp
   23e84:	4663      	mov	r3, ip
   23e86:	0007      	movs	r7, r0
   23e88:	40df      	lsrs	r7, r3
   23e8a:	465b      	mov	r3, fp
   23e8c:	46bc      	mov	ip, r7
   23e8e:	2b20      	cmp	r3, #32
   23e90:	d100      	bne.n	23e94 <__aeabi_dadd+0x478>
   23e92:	e0ac      	b.n	23fee <__aeabi_dadd+0x5d2>
   23e94:	2340      	movs	r3, #64	; 0x40
   23e96:	465f      	mov	r7, fp
   23e98:	1bdb      	subs	r3, r3, r7
   23e9a:	4098      	lsls	r0, r3
   23e9c:	4302      	orrs	r2, r0
   23e9e:	1e50      	subs	r0, r2, #1
   23ea0:	4182      	sbcs	r2, r0
   23ea2:	4663      	mov	r3, ip
   23ea4:	4313      	orrs	r3, r2
   23ea6:	001a      	movs	r2, r3
   23ea8:	2000      	movs	r0, #0
   23eaa:	e698      	b.n	23bde <__aeabi_dadd+0x1c2>
   23eac:	4c6f      	ldr	r4, [pc, #444]	; (2406c <__aeabi_dadd+0x650>)
   23eae:	45a4      	cmp	ip, r4
   23eb0:	d000      	beq.n	23eb4 <__aeabi_dadd+0x498>
   23eb2:	e757      	b.n	23d64 <__aeabi_dadd+0x348>
   23eb4:	0001      	movs	r1, r0
   23eb6:	0015      	movs	r5, r2
   23eb8:	4664      	mov	r4, ip
   23eba:	469a      	mov	sl, r3
   23ebc:	e5d7      	b.n	23a6e <__aeabi_dadd+0x52>
   23ebe:	2c00      	cmp	r4, #0
   23ec0:	d139      	bne.n	23f36 <__aeabi_dadd+0x51a>
   23ec2:	000c      	movs	r4, r1
   23ec4:	432c      	orrs	r4, r5
   23ec6:	d06e      	beq.n	23fa6 <__aeabi_dadd+0x58a>
   23ec8:	43db      	mvns	r3, r3
   23eca:	2b00      	cmp	r3, #0
   23ecc:	d01a      	beq.n	23f04 <__aeabi_dadd+0x4e8>
   23ece:	4c67      	ldr	r4, [pc, #412]	; (2406c <__aeabi_dadd+0x650>)
   23ed0:	45a4      	cmp	ip, r4
   23ed2:	d068      	beq.n	23fa6 <__aeabi_dadd+0x58a>
   23ed4:	2b38      	cmp	r3, #56	; 0x38
   23ed6:	dd00      	ble.n	23eda <__aeabi_dadd+0x4be>
   23ed8:	e0a4      	b.n	24024 <__aeabi_dadd+0x608>
   23eda:	2b1f      	cmp	r3, #31
   23edc:	dd00      	ble.n	23ee0 <__aeabi_dadd+0x4c4>
   23ede:	e0ae      	b.n	2403e <__aeabi_dadd+0x622>
   23ee0:	2420      	movs	r4, #32
   23ee2:	000f      	movs	r7, r1
   23ee4:	1ae4      	subs	r4, r4, r3
   23ee6:	40a7      	lsls	r7, r4
   23ee8:	46b9      	mov	r9, r7
   23eea:	002f      	movs	r7, r5
   23eec:	40df      	lsrs	r7, r3
   23eee:	46b8      	mov	r8, r7
   23ef0:	46a3      	mov	fp, r4
   23ef2:	464f      	mov	r7, r9
   23ef4:	4644      	mov	r4, r8
   23ef6:	4327      	orrs	r7, r4
   23ef8:	465c      	mov	r4, fp
   23efa:	40a5      	lsls	r5, r4
   23efc:	1e6c      	subs	r4, r5, #1
   23efe:	41a5      	sbcs	r5, r4
   23f00:	40d9      	lsrs	r1, r3
   23f02:	433d      	orrs	r5, r7
   23f04:	18ad      	adds	r5, r5, r2
   23f06:	4295      	cmp	r5, r2
   23f08:	419b      	sbcs	r3, r3
   23f0a:	1809      	adds	r1, r1, r0
   23f0c:	425b      	negs	r3, r3
   23f0e:	1859      	adds	r1, r3, r1
   23f10:	4664      	mov	r4, ip
   23f12:	e66b      	b.n	23bec <__aeabi_dadd+0x1d0>
   23f14:	000c      	movs	r4, r1
   23f16:	432c      	orrs	r4, r5
   23f18:	d115      	bne.n	23f46 <__aeabi_dadd+0x52a>
   23f1a:	0001      	movs	r1, r0
   23f1c:	4311      	orrs	r1, r2
   23f1e:	d07b      	beq.n	24018 <__aeabi_dadd+0x5fc>
   23f20:	0001      	movs	r1, r0
   23f22:	0015      	movs	r5, r2
   23f24:	469a      	mov	sl, r3
   23f26:	4c51      	ldr	r4, [pc, #324]	; (2406c <__aeabi_dadd+0x650>)
   23f28:	e5a1      	b.n	23a6e <__aeabi_dadd+0x52>
   23f2a:	430d      	orrs	r5, r1
   23f2c:	1e69      	subs	r1, r5, #1
   23f2e:	418d      	sbcs	r5, r1
   23f30:	2100      	movs	r1, #0
   23f32:	b2ec      	uxtb	r4, r5
   23f34:	e72d      	b.n	23d92 <__aeabi_dadd+0x376>
   23f36:	4c4d      	ldr	r4, [pc, #308]	; (2406c <__aeabi_dadd+0x650>)
   23f38:	45a4      	cmp	ip, r4
   23f3a:	d034      	beq.n	23fa6 <__aeabi_dadd+0x58a>
   23f3c:	2480      	movs	r4, #128	; 0x80
   23f3e:	0424      	lsls	r4, r4, #16
   23f40:	425b      	negs	r3, r3
   23f42:	4321      	orrs	r1, r4
   23f44:	e7c6      	b.n	23ed4 <__aeabi_dadd+0x4b8>
   23f46:	0004      	movs	r4, r0
   23f48:	4314      	orrs	r4, r2
   23f4a:	d04e      	beq.n	23fea <__aeabi_dadd+0x5ce>
   23f4c:	08ed      	lsrs	r5, r5, #3
   23f4e:	074c      	lsls	r4, r1, #29
   23f50:	432c      	orrs	r4, r5
   23f52:	2580      	movs	r5, #128	; 0x80
   23f54:	08c9      	lsrs	r1, r1, #3
   23f56:	032d      	lsls	r5, r5, #12
   23f58:	4229      	tst	r1, r5
   23f5a:	d008      	beq.n	23f6e <__aeabi_dadd+0x552>
   23f5c:	08c6      	lsrs	r6, r0, #3
   23f5e:	422e      	tst	r6, r5
   23f60:	d105      	bne.n	23f6e <__aeabi_dadd+0x552>
   23f62:	08d2      	lsrs	r2, r2, #3
   23f64:	0741      	lsls	r1, r0, #29
   23f66:	4311      	orrs	r1, r2
   23f68:	000c      	movs	r4, r1
   23f6a:	469a      	mov	sl, r3
   23f6c:	0031      	movs	r1, r6
   23f6e:	0f62      	lsrs	r2, r4, #29
   23f70:	00c9      	lsls	r1, r1, #3
   23f72:	00e5      	lsls	r5, r4, #3
   23f74:	4311      	orrs	r1, r2
   23f76:	4c3d      	ldr	r4, [pc, #244]	; (2406c <__aeabi_dadd+0x650>)
   23f78:	e579      	b.n	23a6e <__aeabi_dadd+0x52>
   23f7a:	0006      	movs	r6, r0
   23f7c:	4316      	orrs	r6, r2
   23f7e:	d100      	bne.n	23f82 <__aeabi_dadd+0x566>
   23f80:	e575      	b.n	23a6e <__aeabi_dadd+0x52>
   23f82:	1aae      	subs	r6, r5, r2
   23f84:	46b0      	mov	r8, r6
   23f86:	4545      	cmp	r5, r8
   23f88:	41bf      	sbcs	r7, r7
   23f8a:	1a0e      	subs	r6, r1, r0
   23f8c:	427f      	negs	r7, r7
   23f8e:	1bf6      	subs	r6, r6, r7
   23f90:	0237      	lsls	r7, r6, #8
   23f92:	d400      	bmi.n	23f96 <__aeabi_dadd+0x57a>
   23f94:	e5f4      	b.n	23b80 <__aeabi_dadd+0x164>
   23f96:	1b55      	subs	r5, r2, r5
   23f98:	42aa      	cmp	r2, r5
   23f9a:	41b6      	sbcs	r6, r6
   23f9c:	1a41      	subs	r1, r0, r1
   23f9e:	4276      	negs	r6, r6
   23fa0:	1b89      	subs	r1, r1, r6
   23fa2:	469a      	mov	sl, r3
   23fa4:	e563      	b.n	23a6e <__aeabi_dadd+0x52>
   23fa6:	0001      	movs	r1, r0
   23fa8:	0015      	movs	r5, r2
   23faa:	4664      	mov	r4, ip
   23fac:	e55f      	b.n	23a6e <__aeabi_dadd+0x52>
   23fae:	2200      	movs	r2, #0
   23fb0:	2500      	movs	r5, #0
   23fb2:	e57b      	b.n	23aac <__aeabi_dadd+0x90>
   23fb4:	2b00      	cmp	r3, #0
   23fb6:	d03b      	beq.n	24030 <__aeabi_dadd+0x614>
   23fb8:	0003      	movs	r3, r0
   23fba:	4313      	orrs	r3, r2
   23fbc:	d015      	beq.n	23fea <__aeabi_dadd+0x5ce>
   23fbe:	08ed      	lsrs	r5, r5, #3
   23fc0:	074b      	lsls	r3, r1, #29
   23fc2:	432b      	orrs	r3, r5
   23fc4:	2580      	movs	r5, #128	; 0x80
   23fc6:	08c9      	lsrs	r1, r1, #3
   23fc8:	032d      	lsls	r5, r5, #12
   23fca:	4229      	tst	r1, r5
   23fcc:	d007      	beq.n	23fde <__aeabi_dadd+0x5c2>
   23fce:	08c4      	lsrs	r4, r0, #3
   23fd0:	422c      	tst	r4, r5
   23fd2:	d104      	bne.n	23fde <__aeabi_dadd+0x5c2>
   23fd4:	0741      	lsls	r1, r0, #29
   23fd6:	000b      	movs	r3, r1
   23fd8:	0021      	movs	r1, r4
   23fda:	08d2      	lsrs	r2, r2, #3
   23fdc:	4313      	orrs	r3, r2
   23fde:	00c9      	lsls	r1, r1, #3
   23fe0:	0f5a      	lsrs	r2, r3, #29
   23fe2:	4311      	orrs	r1, r2
   23fe4:	00dd      	lsls	r5, r3, #3
   23fe6:	4c21      	ldr	r4, [pc, #132]	; (2406c <__aeabi_dadd+0x650>)
   23fe8:	e541      	b.n	23a6e <__aeabi_dadd+0x52>
   23fea:	4c20      	ldr	r4, [pc, #128]	; (2406c <__aeabi_dadd+0x650>)
   23fec:	e53f      	b.n	23a6e <__aeabi_dadd+0x52>
   23fee:	2000      	movs	r0, #0
   23ff0:	e754      	b.n	23e9c <__aeabi_dadd+0x480>
   23ff2:	2600      	movs	r6, #0
   23ff4:	2500      	movs	r5, #0
   23ff6:	e5d1      	b.n	23b9c <__aeabi_dadd+0x180>
   23ff8:	0034      	movs	r4, r6
   23ffa:	000f      	movs	r7, r1
   23ffc:	3c20      	subs	r4, #32
   23ffe:	40e7      	lsrs	r7, r4
   24000:	003c      	movs	r4, r7
   24002:	2e20      	cmp	r6, #32
   24004:	d02b      	beq.n	2405e <__aeabi_dadd+0x642>
   24006:	2740      	movs	r7, #64	; 0x40
   24008:	1bbe      	subs	r6, r7, r6
   2400a:	40b1      	lsls	r1, r6
   2400c:	430d      	orrs	r5, r1
   2400e:	1e69      	subs	r1, r5, #1
   24010:	418d      	sbcs	r5, r1
   24012:	2100      	movs	r1, #0
   24014:	432c      	orrs	r4, r5
   24016:	e6bc      	b.n	23d92 <__aeabi_dadd+0x376>
   24018:	2180      	movs	r1, #128	; 0x80
   2401a:	2600      	movs	r6, #0
   2401c:	0309      	lsls	r1, r1, #12
   2401e:	4c13      	ldr	r4, [pc, #76]	; (2406c <__aeabi_dadd+0x650>)
   24020:	2500      	movs	r5, #0
   24022:	e5bb      	b.n	23b9c <__aeabi_dadd+0x180>
   24024:	430d      	orrs	r5, r1
   24026:	1e69      	subs	r1, r5, #1
   24028:	418d      	sbcs	r5, r1
   2402a:	2100      	movs	r1, #0
   2402c:	b2ed      	uxtb	r5, r5
   2402e:	e769      	b.n	23f04 <__aeabi_dadd+0x4e8>
   24030:	0001      	movs	r1, r0
   24032:	0015      	movs	r5, r2
   24034:	4c0d      	ldr	r4, [pc, #52]	; (2406c <__aeabi_dadd+0x650>)
   24036:	e51a      	b.n	23a6e <__aeabi_dadd+0x52>
   24038:	0001      	movs	r1, r0
   2403a:	0015      	movs	r5, r2
   2403c:	e517      	b.n	23a6e <__aeabi_dadd+0x52>
   2403e:	001c      	movs	r4, r3
   24040:	000f      	movs	r7, r1
   24042:	3c20      	subs	r4, #32
   24044:	40e7      	lsrs	r7, r4
   24046:	003c      	movs	r4, r7
   24048:	2b20      	cmp	r3, #32
   2404a:	d00c      	beq.n	24066 <__aeabi_dadd+0x64a>
   2404c:	2740      	movs	r7, #64	; 0x40
   2404e:	1afb      	subs	r3, r7, r3
   24050:	4099      	lsls	r1, r3
   24052:	430d      	orrs	r5, r1
   24054:	1e69      	subs	r1, r5, #1
   24056:	418d      	sbcs	r5, r1
   24058:	2100      	movs	r1, #0
   2405a:	4325      	orrs	r5, r4
   2405c:	e752      	b.n	23f04 <__aeabi_dadd+0x4e8>
   2405e:	2100      	movs	r1, #0
   24060:	e7d4      	b.n	2400c <__aeabi_dadd+0x5f0>
   24062:	001d      	movs	r5, r3
   24064:	e592      	b.n	23b8c <__aeabi_dadd+0x170>
   24066:	2100      	movs	r1, #0
   24068:	e7f3      	b.n	24052 <__aeabi_dadd+0x636>
   2406a:	46c0      	nop			; (mov r8, r8)
   2406c:	000007ff 	.word	0x000007ff
   24070:	ff7fffff 	.word	0xff7fffff

00024074 <__aeabi_ddiv>:
   24074:	b5f0      	push	{r4, r5, r6, r7, lr}
   24076:	4656      	mov	r6, sl
   24078:	464d      	mov	r5, r9
   2407a:	4644      	mov	r4, r8
   2407c:	465f      	mov	r7, fp
   2407e:	b4f0      	push	{r4, r5, r6, r7}
   24080:	001d      	movs	r5, r3
   24082:	030e      	lsls	r6, r1, #12
   24084:	004c      	lsls	r4, r1, #1
   24086:	0fcb      	lsrs	r3, r1, #31
   24088:	b087      	sub	sp, #28
   2408a:	0007      	movs	r7, r0
   2408c:	4692      	mov	sl, r2
   2408e:	4681      	mov	r9, r0
   24090:	0b36      	lsrs	r6, r6, #12
   24092:	0d64      	lsrs	r4, r4, #21
   24094:	4698      	mov	r8, r3
   24096:	d06a      	beq.n	2416e <__aeabi_ddiv+0xfa>
   24098:	4b6d      	ldr	r3, [pc, #436]	; (24250 <__aeabi_ddiv+0x1dc>)
   2409a:	429c      	cmp	r4, r3
   2409c:	d035      	beq.n	2410a <__aeabi_ddiv+0x96>
   2409e:	2280      	movs	r2, #128	; 0x80
   240a0:	0f43      	lsrs	r3, r0, #29
   240a2:	0412      	lsls	r2, r2, #16
   240a4:	4313      	orrs	r3, r2
   240a6:	00f6      	lsls	r6, r6, #3
   240a8:	431e      	orrs	r6, r3
   240aa:	00c3      	lsls	r3, r0, #3
   240ac:	4699      	mov	r9, r3
   240ae:	4b69      	ldr	r3, [pc, #420]	; (24254 <__aeabi_ddiv+0x1e0>)
   240b0:	2700      	movs	r7, #0
   240b2:	469c      	mov	ip, r3
   240b4:	2300      	movs	r3, #0
   240b6:	4464      	add	r4, ip
   240b8:	9302      	str	r3, [sp, #8]
   240ba:	032b      	lsls	r3, r5, #12
   240bc:	0068      	lsls	r0, r5, #1
   240be:	0b1b      	lsrs	r3, r3, #12
   240c0:	0fed      	lsrs	r5, r5, #31
   240c2:	4651      	mov	r1, sl
   240c4:	469b      	mov	fp, r3
   240c6:	0d40      	lsrs	r0, r0, #21
   240c8:	9500      	str	r5, [sp, #0]
   240ca:	d100      	bne.n	240ce <__aeabi_ddiv+0x5a>
   240cc:	e078      	b.n	241c0 <__aeabi_ddiv+0x14c>
   240ce:	4b60      	ldr	r3, [pc, #384]	; (24250 <__aeabi_ddiv+0x1dc>)
   240d0:	4298      	cmp	r0, r3
   240d2:	d06c      	beq.n	241ae <__aeabi_ddiv+0x13a>
   240d4:	465b      	mov	r3, fp
   240d6:	00da      	lsls	r2, r3, #3
   240d8:	0f4b      	lsrs	r3, r1, #29
   240da:	2180      	movs	r1, #128	; 0x80
   240dc:	0409      	lsls	r1, r1, #16
   240de:	430b      	orrs	r3, r1
   240e0:	4313      	orrs	r3, r2
   240e2:	469b      	mov	fp, r3
   240e4:	4653      	mov	r3, sl
   240e6:	00d9      	lsls	r1, r3, #3
   240e8:	4b5a      	ldr	r3, [pc, #360]	; (24254 <__aeabi_ddiv+0x1e0>)
   240ea:	469c      	mov	ip, r3
   240ec:	2300      	movs	r3, #0
   240ee:	4460      	add	r0, ip
   240f0:	4642      	mov	r2, r8
   240f2:	1a20      	subs	r0, r4, r0
   240f4:	406a      	eors	r2, r5
   240f6:	4692      	mov	sl, r2
   240f8:	9001      	str	r0, [sp, #4]
   240fa:	431f      	orrs	r7, r3
   240fc:	2f0f      	cmp	r7, #15
   240fe:	d900      	bls.n	24102 <__aeabi_ddiv+0x8e>
   24100:	e0b0      	b.n	24264 <__aeabi_ddiv+0x1f0>
   24102:	4855      	ldr	r0, [pc, #340]	; (24258 <__aeabi_ddiv+0x1e4>)
   24104:	00bf      	lsls	r7, r7, #2
   24106:	59c0      	ldr	r0, [r0, r7]
   24108:	4687      	mov	pc, r0
   2410a:	4337      	orrs	r7, r6
   2410c:	d000      	beq.n	24110 <__aeabi_ddiv+0x9c>
   2410e:	e088      	b.n	24222 <__aeabi_ddiv+0x1ae>
   24110:	2300      	movs	r3, #0
   24112:	4699      	mov	r9, r3
   24114:	3302      	adds	r3, #2
   24116:	2708      	movs	r7, #8
   24118:	2600      	movs	r6, #0
   2411a:	9302      	str	r3, [sp, #8]
   2411c:	e7cd      	b.n	240ba <__aeabi_ddiv+0x46>
   2411e:	4643      	mov	r3, r8
   24120:	46b3      	mov	fp, r6
   24122:	4649      	mov	r1, r9
   24124:	9300      	str	r3, [sp, #0]
   24126:	9b02      	ldr	r3, [sp, #8]
   24128:	9a00      	ldr	r2, [sp, #0]
   2412a:	4692      	mov	sl, r2
   2412c:	2b02      	cmp	r3, #2
   2412e:	d000      	beq.n	24132 <__aeabi_ddiv+0xbe>
   24130:	e1bf      	b.n	244b2 <__aeabi_ddiv+0x43e>
   24132:	2100      	movs	r1, #0
   24134:	4653      	mov	r3, sl
   24136:	2201      	movs	r2, #1
   24138:	2600      	movs	r6, #0
   2413a:	4689      	mov	r9, r1
   2413c:	401a      	ands	r2, r3
   2413e:	4b44      	ldr	r3, [pc, #272]	; (24250 <__aeabi_ddiv+0x1dc>)
   24140:	2100      	movs	r1, #0
   24142:	0336      	lsls	r6, r6, #12
   24144:	0d0c      	lsrs	r4, r1, #20
   24146:	0524      	lsls	r4, r4, #20
   24148:	0b36      	lsrs	r6, r6, #12
   2414a:	4326      	orrs	r6, r4
   2414c:	4c43      	ldr	r4, [pc, #268]	; (2425c <__aeabi_ddiv+0x1e8>)
   2414e:	051b      	lsls	r3, r3, #20
   24150:	4026      	ands	r6, r4
   24152:	431e      	orrs	r6, r3
   24154:	0076      	lsls	r6, r6, #1
   24156:	07d2      	lsls	r2, r2, #31
   24158:	0876      	lsrs	r6, r6, #1
   2415a:	4316      	orrs	r6, r2
   2415c:	4648      	mov	r0, r9
   2415e:	0031      	movs	r1, r6
   24160:	b007      	add	sp, #28
   24162:	bc3c      	pop	{r2, r3, r4, r5}
   24164:	4690      	mov	r8, r2
   24166:	4699      	mov	r9, r3
   24168:	46a2      	mov	sl, r4
   2416a:	46ab      	mov	fp, r5
   2416c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2416e:	0033      	movs	r3, r6
   24170:	4303      	orrs	r3, r0
   24172:	d04f      	beq.n	24214 <__aeabi_ddiv+0x1a0>
   24174:	2e00      	cmp	r6, #0
   24176:	d100      	bne.n	2417a <__aeabi_ddiv+0x106>
   24178:	e1bc      	b.n	244f4 <__aeabi_ddiv+0x480>
   2417a:	0030      	movs	r0, r6
   2417c:	f001 fa1c 	bl	255b8 <__clzsi2>
   24180:	0003      	movs	r3, r0
   24182:	3b0b      	subs	r3, #11
   24184:	2b1c      	cmp	r3, #28
   24186:	dd00      	ble.n	2418a <__aeabi_ddiv+0x116>
   24188:	e1ad      	b.n	244e6 <__aeabi_ddiv+0x472>
   2418a:	221d      	movs	r2, #29
   2418c:	0001      	movs	r1, r0
   2418e:	1ad3      	subs	r3, r2, r3
   24190:	3908      	subs	r1, #8
   24192:	003a      	movs	r2, r7
   24194:	408f      	lsls	r7, r1
   24196:	408e      	lsls	r6, r1
   24198:	40da      	lsrs	r2, r3
   2419a:	46b9      	mov	r9, r7
   2419c:	4316      	orrs	r6, r2
   2419e:	4b30      	ldr	r3, [pc, #192]	; (24260 <__aeabi_ddiv+0x1ec>)
   241a0:	2700      	movs	r7, #0
   241a2:	469c      	mov	ip, r3
   241a4:	2300      	movs	r3, #0
   241a6:	4460      	add	r0, ip
   241a8:	4244      	negs	r4, r0
   241aa:	9302      	str	r3, [sp, #8]
   241ac:	e785      	b.n	240ba <__aeabi_ddiv+0x46>
   241ae:	4653      	mov	r3, sl
   241b0:	465a      	mov	r2, fp
   241b2:	4313      	orrs	r3, r2
   241b4:	d12c      	bne.n	24210 <__aeabi_ddiv+0x19c>
   241b6:	2300      	movs	r3, #0
   241b8:	2100      	movs	r1, #0
   241ba:	469b      	mov	fp, r3
   241bc:	3302      	adds	r3, #2
   241be:	e797      	b.n	240f0 <__aeabi_ddiv+0x7c>
   241c0:	430b      	orrs	r3, r1
   241c2:	d020      	beq.n	24206 <__aeabi_ddiv+0x192>
   241c4:	465b      	mov	r3, fp
   241c6:	2b00      	cmp	r3, #0
   241c8:	d100      	bne.n	241cc <__aeabi_ddiv+0x158>
   241ca:	e19e      	b.n	2450a <__aeabi_ddiv+0x496>
   241cc:	4658      	mov	r0, fp
   241ce:	f001 f9f3 	bl	255b8 <__clzsi2>
   241d2:	0003      	movs	r3, r0
   241d4:	3b0b      	subs	r3, #11
   241d6:	2b1c      	cmp	r3, #28
   241d8:	dd00      	ble.n	241dc <__aeabi_ddiv+0x168>
   241da:	e18f      	b.n	244fc <__aeabi_ddiv+0x488>
   241dc:	0002      	movs	r2, r0
   241de:	4659      	mov	r1, fp
   241e0:	3a08      	subs	r2, #8
   241e2:	4091      	lsls	r1, r2
   241e4:	468b      	mov	fp, r1
   241e6:	211d      	movs	r1, #29
   241e8:	1acb      	subs	r3, r1, r3
   241ea:	4651      	mov	r1, sl
   241ec:	40d9      	lsrs	r1, r3
   241ee:	000b      	movs	r3, r1
   241f0:	4659      	mov	r1, fp
   241f2:	430b      	orrs	r3, r1
   241f4:	4651      	mov	r1, sl
   241f6:	469b      	mov	fp, r3
   241f8:	4091      	lsls	r1, r2
   241fa:	4b19      	ldr	r3, [pc, #100]	; (24260 <__aeabi_ddiv+0x1ec>)
   241fc:	469c      	mov	ip, r3
   241fe:	4460      	add	r0, ip
   24200:	4240      	negs	r0, r0
   24202:	2300      	movs	r3, #0
   24204:	e774      	b.n	240f0 <__aeabi_ddiv+0x7c>
   24206:	2300      	movs	r3, #0
   24208:	2100      	movs	r1, #0
   2420a:	469b      	mov	fp, r3
   2420c:	3301      	adds	r3, #1
   2420e:	e76f      	b.n	240f0 <__aeabi_ddiv+0x7c>
   24210:	2303      	movs	r3, #3
   24212:	e76d      	b.n	240f0 <__aeabi_ddiv+0x7c>
   24214:	2300      	movs	r3, #0
   24216:	4699      	mov	r9, r3
   24218:	3301      	adds	r3, #1
   2421a:	2704      	movs	r7, #4
   2421c:	2600      	movs	r6, #0
   2421e:	9302      	str	r3, [sp, #8]
   24220:	e74b      	b.n	240ba <__aeabi_ddiv+0x46>
   24222:	2303      	movs	r3, #3
   24224:	270c      	movs	r7, #12
   24226:	9302      	str	r3, [sp, #8]
   24228:	e747      	b.n	240ba <__aeabi_ddiv+0x46>
   2422a:	2201      	movs	r2, #1
   2422c:	1ad5      	subs	r5, r2, r3
   2422e:	2d38      	cmp	r5, #56	; 0x38
   24230:	dc00      	bgt.n	24234 <__aeabi_ddiv+0x1c0>
   24232:	e1b0      	b.n	24596 <__aeabi_ddiv+0x522>
   24234:	4653      	mov	r3, sl
   24236:	401a      	ands	r2, r3
   24238:	2100      	movs	r1, #0
   2423a:	2300      	movs	r3, #0
   2423c:	2600      	movs	r6, #0
   2423e:	4689      	mov	r9, r1
   24240:	e77e      	b.n	24140 <__aeabi_ddiv+0xcc>
   24242:	2300      	movs	r3, #0
   24244:	2680      	movs	r6, #128	; 0x80
   24246:	4699      	mov	r9, r3
   24248:	2200      	movs	r2, #0
   2424a:	0336      	lsls	r6, r6, #12
   2424c:	4b00      	ldr	r3, [pc, #0]	; (24250 <__aeabi_ddiv+0x1dc>)
   2424e:	e777      	b.n	24140 <__aeabi_ddiv+0xcc>
   24250:	000007ff 	.word	0x000007ff
   24254:	fffffc01 	.word	0xfffffc01
   24258:	0002ed24 	.word	0x0002ed24
   2425c:	800fffff 	.word	0x800fffff
   24260:	000003f3 	.word	0x000003f3
   24264:	455e      	cmp	r6, fp
   24266:	d900      	bls.n	2426a <__aeabi_ddiv+0x1f6>
   24268:	e172      	b.n	24550 <__aeabi_ddiv+0x4dc>
   2426a:	d100      	bne.n	2426e <__aeabi_ddiv+0x1fa>
   2426c:	e16d      	b.n	2454a <__aeabi_ddiv+0x4d6>
   2426e:	9b01      	ldr	r3, [sp, #4]
   24270:	464d      	mov	r5, r9
   24272:	3b01      	subs	r3, #1
   24274:	9301      	str	r3, [sp, #4]
   24276:	2300      	movs	r3, #0
   24278:	0034      	movs	r4, r6
   2427a:	9302      	str	r3, [sp, #8]
   2427c:	465b      	mov	r3, fp
   2427e:	021e      	lsls	r6, r3, #8
   24280:	0e0b      	lsrs	r3, r1, #24
   24282:	431e      	orrs	r6, r3
   24284:	020b      	lsls	r3, r1, #8
   24286:	9303      	str	r3, [sp, #12]
   24288:	0c33      	lsrs	r3, r6, #16
   2428a:	4699      	mov	r9, r3
   2428c:	0433      	lsls	r3, r6, #16
   2428e:	0c1b      	lsrs	r3, r3, #16
   24290:	4649      	mov	r1, r9
   24292:	0020      	movs	r0, r4
   24294:	9300      	str	r3, [sp, #0]
   24296:	f7ff f901 	bl	2349c <__aeabi_uidiv>
   2429a:	9b00      	ldr	r3, [sp, #0]
   2429c:	0037      	movs	r7, r6
   2429e:	4343      	muls	r3, r0
   242a0:	0006      	movs	r6, r0
   242a2:	4649      	mov	r1, r9
   242a4:	0020      	movs	r0, r4
   242a6:	4698      	mov	r8, r3
   242a8:	f7ff f97e 	bl	235a8 <__aeabi_uidivmod>
   242ac:	0c2c      	lsrs	r4, r5, #16
   242ae:	0409      	lsls	r1, r1, #16
   242b0:	430c      	orrs	r4, r1
   242b2:	45a0      	cmp	r8, r4
   242b4:	d909      	bls.n	242ca <__aeabi_ddiv+0x256>
   242b6:	19e4      	adds	r4, r4, r7
   242b8:	1e73      	subs	r3, r6, #1
   242ba:	42a7      	cmp	r7, r4
   242bc:	d900      	bls.n	242c0 <__aeabi_ddiv+0x24c>
   242be:	e15c      	b.n	2457a <__aeabi_ddiv+0x506>
   242c0:	45a0      	cmp	r8, r4
   242c2:	d800      	bhi.n	242c6 <__aeabi_ddiv+0x252>
   242c4:	e159      	b.n	2457a <__aeabi_ddiv+0x506>
   242c6:	3e02      	subs	r6, #2
   242c8:	19e4      	adds	r4, r4, r7
   242ca:	4643      	mov	r3, r8
   242cc:	1ae4      	subs	r4, r4, r3
   242ce:	4649      	mov	r1, r9
   242d0:	0020      	movs	r0, r4
   242d2:	f7ff f8e3 	bl	2349c <__aeabi_uidiv>
   242d6:	0003      	movs	r3, r0
   242d8:	9a00      	ldr	r2, [sp, #0]
   242da:	4680      	mov	r8, r0
   242dc:	4353      	muls	r3, r2
   242de:	4649      	mov	r1, r9
   242e0:	0020      	movs	r0, r4
   242e2:	469b      	mov	fp, r3
   242e4:	f7ff f960 	bl	235a8 <__aeabi_uidivmod>
   242e8:	042a      	lsls	r2, r5, #16
   242ea:	0409      	lsls	r1, r1, #16
   242ec:	0c12      	lsrs	r2, r2, #16
   242ee:	430a      	orrs	r2, r1
   242f0:	4593      	cmp	fp, r2
   242f2:	d90d      	bls.n	24310 <__aeabi_ddiv+0x29c>
   242f4:	4643      	mov	r3, r8
   242f6:	19d2      	adds	r2, r2, r7
   242f8:	3b01      	subs	r3, #1
   242fa:	4297      	cmp	r7, r2
   242fc:	d900      	bls.n	24300 <__aeabi_ddiv+0x28c>
   242fe:	e13a      	b.n	24576 <__aeabi_ddiv+0x502>
   24300:	4593      	cmp	fp, r2
   24302:	d800      	bhi.n	24306 <__aeabi_ddiv+0x292>
   24304:	e137      	b.n	24576 <__aeabi_ddiv+0x502>
   24306:	2302      	movs	r3, #2
   24308:	425b      	negs	r3, r3
   2430a:	469c      	mov	ip, r3
   2430c:	19d2      	adds	r2, r2, r7
   2430e:	44e0      	add	r8, ip
   24310:	465b      	mov	r3, fp
   24312:	1ad2      	subs	r2, r2, r3
   24314:	4643      	mov	r3, r8
   24316:	0436      	lsls	r6, r6, #16
   24318:	4333      	orrs	r3, r6
   2431a:	469b      	mov	fp, r3
   2431c:	9903      	ldr	r1, [sp, #12]
   2431e:	0c18      	lsrs	r0, r3, #16
   24320:	0c0b      	lsrs	r3, r1, #16
   24322:	001d      	movs	r5, r3
   24324:	9305      	str	r3, [sp, #20]
   24326:	0409      	lsls	r1, r1, #16
   24328:	465b      	mov	r3, fp
   2432a:	0c09      	lsrs	r1, r1, #16
   2432c:	000c      	movs	r4, r1
   2432e:	041b      	lsls	r3, r3, #16
   24330:	0c1b      	lsrs	r3, r3, #16
   24332:	4344      	muls	r4, r0
   24334:	9104      	str	r1, [sp, #16]
   24336:	4359      	muls	r1, r3
   24338:	436b      	muls	r3, r5
   2433a:	4368      	muls	r0, r5
   2433c:	191b      	adds	r3, r3, r4
   2433e:	0c0d      	lsrs	r5, r1, #16
   24340:	18eb      	adds	r3, r5, r3
   24342:	429c      	cmp	r4, r3
   24344:	d903      	bls.n	2434e <__aeabi_ddiv+0x2da>
   24346:	2480      	movs	r4, #128	; 0x80
   24348:	0264      	lsls	r4, r4, #9
   2434a:	46a4      	mov	ip, r4
   2434c:	4460      	add	r0, ip
   2434e:	0c1c      	lsrs	r4, r3, #16
   24350:	0409      	lsls	r1, r1, #16
   24352:	041b      	lsls	r3, r3, #16
   24354:	0c09      	lsrs	r1, r1, #16
   24356:	1820      	adds	r0, r4, r0
   24358:	185d      	adds	r5, r3, r1
   2435a:	4282      	cmp	r2, r0
   2435c:	d200      	bcs.n	24360 <__aeabi_ddiv+0x2ec>
   2435e:	e0de      	b.n	2451e <__aeabi_ddiv+0x4aa>
   24360:	d100      	bne.n	24364 <__aeabi_ddiv+0x2f0>
   24362:	e0d7      	b.n	24514 <__aeabi_ddiv+0x4a0>
   24364:	1a16      	subs	r6, r2, r0
   24366:	9b02      	ldr	r3, [sp, #8]
   24368:	469c      	mov	ip, r3
   2436a:	1b5d      	subs	r5, r3, r5
   2436c:	45ac      	cmp	ip, r5
   2436e:	419b      	sbcs	r3, r3
   24370:	425b      	negs	r3, r3
   24372:	1af6      	subs	r6, r6, r3
   24374:	42b7      	cmp	r7, r6
   24376:	d100      	bne.n	2437a <__aeabi_ddiv+0x306>
   24378:	e106      	b.n	24588 <__aeabi_ddiv+0x514>
   2437a:	4649      	mov	r1, r9
   2437c:	0030      	movs	r0, r6
   2437e:	f7ff f88d 	bl	2349c <__aeabi_uidiv>
   24382:	9b00      	ldr	r3, [sp, #0]
   24384:	0004      	movs	r4, r0
   24386:	4343      	muls	r3, r0
   24388:	4649      	mov	r1, r9
   2438a:	0030      	movs	r0, r6
   2438c:	4698      	mov	r8, r3
   2438e:	f7ff f90b 	bl	235a8 <__aeabi_uidivmod>
   24392:	0c2e      	lsrs	r6, r5, #16
   24394:	0409      	lsls	r1, r1, #16
   24396:	430e      	orrs	r6, r1
   24398:	45b0      	cmp	r8, r6
   2439a:	d909      	bls.n	243b0 <__aeabi_ddiv+0x33c>
   2439c:	19f6      	adds	r6, r6, r7
   2439e:	1e63      	subs	r3, r4, #1
   243a0:	42b7      	cmp	r7, r6
   243a2:	d900      	bls.n	243a6 <__aeabi_ddiv+0x332>
   243a4:	e0f3      	b.n	2458e <__aeabi_ddiv+0x51a>
   243a6:	45b0      	cmp	r8, r6
   243a8:	d800      	bhi.n	243ac <__aeabi_ddiv+0x338>
   243aa:	e0f0      	b.n	2458e <__aeabi_ddiv+0x51a>
   243ac:	3c02      	subs	r4, #2
   243ae:	19f6      	adds	r6, r6, r7
   243b0:	4643      	mov	r3, r8
   243b2:	1af3      	subs	r3, r6, r3
   243b4:	4649      	mov	r1, r9
   243b6:	0018      	movs	r0, r3
   243b8:	9302      	str	r3, [sp, #8]
   243ba:	f7ff f86f 	bl	2349c <__aeabi_uidiv>
   243be:	9b00      	ldr	r3, [sp, #0]
   243c0:	0006      	movs	r6, r0
   243c2:	4343      	muls	r3, r0
   243c4:	4649      	mov	r1, r9
   243c6:	9802      	ldr	r0, [sp, #8]
   243c8:	4698      	mov	r8, r3
   243ca:	f7ff f8ed 	bl	235a8 <__aeabi_uidivmod>
   243ce:	042d      	lsls	r5, r5, #16
   243d0:	0409      	lsls	r1, r1, #16
   243d2:	0c2d      	lsrs	r5, r5, #16
   243d4:	430d      	orrs	r5, r1
   243d6:	45a8      	cmp	r8, r5
   243d8:	d909      	bls.n	243ee <__aeabi_ddiv+0x37a>
   243da:	19ed      	adds	r5, r5, r7
   243dc:	1e73      	subs	r3, r6, #1
   243de:	42af      	cmp	r7, r5
   243e0:	d900      	bls.n	243e4 <__aeabi_ddiv+0x370>
   243e2:	e0d6      	b.n	24592 <__aeabi_ddiv+0x51e>
   243e4:	45a8      	cmp	r8, r5
   243e6:	d800      	bhi.n	243ea <__aeabi_ddiv+0x376>
   243e8:	e0d3      	b.n	24592 <__aeabi_ddiv+0x51e>
   243ea:	3e02      	subs	r6, #2
   243ec:	19ed      	adds	r5, r5, r7
   243ee:	0424      	lsls	r4, r4, #16
   243f0:	0021      	movs	r1, r4
   243f2:	4643      	mov	r3, r8
   243f4:	4331      	orrs	r1, r6
   243f6:	9e04      	ldr	r6, [sp, #16]
   243f8:	9a05      	ldr	r2, [sp, #20]
   243fa:	0030      	movs	r0, r6
   243fc:	1aed      	subs	r5, r5, r3
   243fe:	040b      	lsls	r3, r1, #16
   24400:	0c0c      	lsrs	r4, r1, #16
   24402:	0c1b      	lsrs	r3, r3, #16
   24404:	4358      	muls	r0, r3
   24406:	4366      	muls	r6, r4
   24408:	4353      	muls	r3, r2
   2440a:	4354      	muls	r4, r2
   2440c:	199a      	adds	r2, r3, r6
   2440e:	0c03      	lsrs	r3, r0, #16
   24410:	189b      	adds	r3, r3, r2
   24412:	429e      	cmp	r6, r3
   24414:	d903      	bls.n	2441e <__aeabi_ddiv+0x3aa>
   24416:	2280      	movs	r2, #128	; 0x80
   24418:	0252      	lsls	r2, r2, #9
   2441a:	4694      	mov	ip, r2
   2441c:	4464      	add	r4, ip
   2441e:	0c1a      	lsrs	r2, r3, #16
   24420:	0400      	lsls	r0, r0, #16
   24422:	041b      	lsls	r3, r3, #16
   24424:	0c00      	lsrs	r0, r0, #16
   24426:	1914      	adds	r4, r2, r4
   24428:	181b      	adds	r3, r3, r0
   2442a:	42a5      	cmp	r5, r4
   2442c:	d350      	bcc.n	244d0 <__aeabi_ddiv+0x45c>
   2442e:	d04d      	beq.n	244cc <__aeabi_ddiv+0x458>
   24430:	2301      	movs	r3, #1
   24432:	4319      	orrs	r1, r3
   24434:	4a96      	ldr	r2, [pc, #600]	; (24690 <__aeabi_ddiv+0x61c>)
   24436:	9b01      	ldr	r3, [sp, #4]
   24438:	4694      	mov	ip, r2
   2443a:	4463      	add	r3, ip
   2443c:	2b00      	cmp	r3, #0
   2443e:	dc00      	bgt.n	24442 <__aeabi_ddiv+0x3ce>
   24440:	e6f3      	b.n	2422a <__aeabi_ddiv+0x1b6>
   24442:	074a      	lsls	r2, r1, #29
   24444:	d009      	beq.n	2445a <__aeabi_ddiv+0x3e6>
   24446:	220f      	movs	r2, #15
   24448:	400a      	ands	r2, r1
   2444a:	2a04      	cmp	r2, #4
   2444c:	d005      	beq.n	2445a <__aeabi_ddiv+0x3e6>
   2444e:	1d0a      	adds	r2, r1, #4
   24450:	428a      	cmp	r2, r1
   24452:	4189      	sbcs	r1, r1
   24454:	4249      	negs	r1, r1
   24456:	448b      	add	fp, r1
   24458:	0011      	movs	r1, r2
   2445a:	465a      	mov	r2, fp
   2445c:	01d2      	lsls	r2, r2, #7
   2445e:	d508      	bpl.n	24472 <__aeabi_ddiv+0x3fe>
   24460:	465a      	mov	r2, fp
   24462:	4b8c      	ldr	r3, [pc, #560]	; (24694 <__aeabi_ddiv+0x620>)
   24464:	401a      	ands	r2, r3
   24466:	4693      	mov	fp, r2
   24468:	2280      	movs	r2, #128	; 0x80
   2446a:	00d2      	lsls	r2, r2, #3
   2446c:	4694      	mov	ip, r2
   2446e:	9b01      	ldr	r3, [sp, #4]
   24470:	4463      	add	r3, ip
   24472:	4a89      	ldr	r2, [pc, #548]	; (24698 <__aeabi_ddiv+0x624>)
   24474:	4293      	cmp	r3, r2
   24476:	dd00      	ble.n	2447a <__aeabi_ddiv+0x406>
   24478:	e65b      	b.n	24132 <__aeabi_ddiv+0xbe>
   2447a:	465a      	mov	r2, fp
   2447c:	08c9      	lsrs	r1, r1, #3
   2447e:	0750      	lsls	r0, r2, #29
   24480:	4308      	orrs	r0, r1
   24482:	0256      	lsls	r6, r2, #9
   24484:	4651      	mov	r1, sl
   24486:	2201      	movs	r2, #1
   24488:	055b      	lsls	r3, r3, #21
   2448a:	4681      	mov	r9, r0
   2448c:	0b36      	lsrs	r6, r6, #12
   2448e:	0d5b      	lsrs	r3, r3, #21
   24490:	400a      	ands	r2, r1
   24492:	e655      	b.n	24140 <__aeabi_ddiv+0xcc>
   24494:	2380      	movs	r3, #128	; 0x80
   24496:	031b      	lsls	r3, r3, #12
   24498:	421e      	tst	r6, r3
   2449a:	d011      	beq.n	244c0 <__aeabi_ddiv+0x44c>
   2449c:	465a      	mov	r2, fp
   2449e:	421a      	tst	r2, r3
   244a0:	d10e      	bne.n	244c0 <__aeabi_ddiv+0x44c>
   244a2:	465e      	mov	r6, fp
   244a4:	431e      	orrs	r6, r3
   244a6:	0336      	lsls	r6, r6, #12
   244a8:	0b36      	lsrs	r6, r6, #12
   244aa:	002a      	movs	r2, r5
   244ac:	4689      	mov	r9, r1
   244ae:	4b7b      	ldr	r3, [pc, #492]	; (2469c <__aeabi_ddiv+0x628>)
   244b0:	e646      	b.n	24140 <__aeabi_ddiv+0xcc>
   244b2:	2b03      	cmp	r3, #3
   244b4:	d100      	bne.n	244b8 <__aeabi_ddiv+0x444>
   244b6:	e0e1      	b.n	2467c <__aeabi_ddiv+0x608>
   244b8:	2b01      	cmp	r3, #1
   244ba:	d1bb      	bne.n	24434 <__aeabi_ddiv+0x3c0>
   244bc:	401a      	ands	r2, r3
   244be:	e6bb      	b.n	24238 <__aeabi_ddiv+0x1c4>
   244c0:	431e      	orrs	r6, r3
   244c2:	0336      	lsls	r6, r6, #12
   244c4:	0b36      	lsrs	r6, r6, #12
   244c6:	4642      	mov	r2, r8
   244c8:	4b74      	ldr	r3, [pc, #464]	; (2469c <__aeabi_ddiv+0x628>)
   244ca:	e639      	b.n	24140 <__aeabi_ddiv+0xcc>
   244cc:	2b00      	cmp	r3, #0
   244ce:	d0b1      	beq.n	24434 <__aeabi_ddiv+0x3c0>
   244d0:	197d      	adds	r5, r7, r5
   244d2:	1e4a      	subs	r2, r1, #1
   244d4:	42af      	cmp	r7, r5
   244d6:	d952      	bls.n	2457e <__aeabi_ddiv+0x50a>
   244d8:	0011      	movs	r1, r2
   244da:	42a5      	cmp	r5, r4
   244dc:	d1a8      	bne.n	24430 <__aeabi_ddiv+0x3bc>
   244de:	9a03      	ldr	r2, [sp, #12]
   244e0:	429a      	cmp	r2, r3
   244e2:	d1a5      	bne.n	24430 <__aeabi_ddiv+0x3bc>
   244e4:	e7a6      	b.n	24434 <__aeabi_ddiv+0x3c0>
   244e6:	0003      	movs	r3, r0
   244e8:	003e      	movs	r6, r7
   244ea:	3b28      	subs	r3, #40	; 0x28
   244ec:	409e      	lsls	r6, r3
   244ee:	2300      	movs	r3, #0
   244f0:	4699      	mov	r9, r3
   244f2:	e654      	b.n	2419e <__aeabi_ddiv+0x12a>
   244f4:	f001 f860 	bl	255b8 <__clzsi2>
   244f8:	3020      	adds	r0, #32
   244fa:	e641      	b.n	24180 <__aeabi_ddiv+0x10c>
   244fc:	0003      	movs	r3, r0
   244fe:	4652      	mov	r2, sl
   24500:	3b28      	subs	r3, #40	; 0x28
   24502:	409a      	lsls	r2, r3
   24504:	2100      	movs	r1, #0
   24506:	4693      	mov	fp, r2
   24508:	e677      	b.n	241fa <__aeabi_ddiv+0x186>
   2450a:	4650      	mov	r0, sl
   2450c:	f001 f854 	bl	255b8 <__clzsi2>
   24510:	3020      	adds	r0, #32
   24512:	e65e      	b.n	241d2 <__aeabi_ddiv+0x15e>
   24514:	9b02      	ldr	r3, [sp, #8]
   24516:	2600      	movs	r6, #0
   24518:	42ab      	cmp	r3, r5
   2451a:	d300      	bcc.n	2451e <__aeabi_ddiv+0x4aa>
   2451c:	e723      	b.n	24366 <__aeabi_ddiv+0x2f2>
   2451e:	9e03      	ldr	r6, [sp, #12]
   24520:	9902      	ldr	r1, [sp, #8]
   24522:	46b4      	mov	ip, r6
   24524:	4461      	add	r1, ip
   24526:	4688      	mov	r8, r1
   24528:	45b0      	cmp	r8, r6
   2452a:	41b6      	sbcs	r6, r6
   2452c:	465b      	mov	r3, fp
   2452e:	4276      	negs	r6, r6
   24530:	19f6      	adds	r6, r6, r7
   24532:	18b2      	adds	r2, r6, r2
   24534:	3b01      	subs	r3, #1
   24536:	9102      	str	r1, [sp, #8]
   24538:	4297      	cmp	r7, r2
   2453a:	d213      	bcs.n	24564 <__aeabi_ddiv+0x4f0>
   2453c:	4290      	cmp	r0, r2
   2453e:	d84f      	bhi.n	245e0 <__aeabi_ddiv+0x56c>
   24540:	d100      	bne.n	24544 <__aeabi_ddiv+0x4d0>
   24542:	e08e      	b.n	24662 <__aeabi_ddiv+0x5ee>
   24544:	1a16      	subs	r6, r2, r0
   24546:	469b      	mov	fp, r3
   24548:	e70d      	b.n	24366 <__aeabi_ddiv+0x2f2>
   2454a:	4589      	cmp	r9, r1
   2454c:	d200      	bcs.n	24550 <__aeabi_ddiv+0x4dc>
   2454e:	e68e      	b.n	2426e <__aeabi_ddiv+0x1fa>
   24550:	0874      	lsrs	r4, r6, #1
   24552:	464b      	mov	r3, r9
   24554:	07f6      	lsls	r6, r6, #31
   24556:	0035      	movs	r5, r6
   24558:	085b      	lsrs	r3, r3, #1
   2455a:	431d      	orrs	r5, r3
   2455c:	464b      	mov	r3, r9
   2455e:	07db      	lsls	r3, r3, #31
   24560:	9302      	str	r3, [sp, #8]
   24562:	e68b      	b.n	2427c <__aeabi_ddiv+0x208>
   24564:	4297      	cmp	r7, r2
   24566:	d1ed      	bne.n	24544 <__aeabi_ddiv+0x4d0>
   24568:	9903      	ldr	r1, [sp, #12]
   2456a:	9c02      	ldr	r4, [sp, #8]
   2456c:	42a1      	cmp	r1, r4
   2456e:	d9e5      	bls.n	2453c <__aeabi_ddiv+0x4c8>
   24570:	1a3e      	subs	r6, r7, r0
   24572:	469b      	mov	fp, r3
   24574:	e6f7      	b.n	24366 <__aeabi_ddiv+0x2f2>
   24576:	4698      	mov	r8, r3
   24578:	e6ca      	b.n	24310 <__aeabi_ddiv+0x29c>
   2457a:	001e      	movs	r6, r3
   2457c:	e6a5      	b.n	242ca <__aeabi_ddiv+0x256>
   2457e:	42ac      	cmp	r4, r5
   24580:	d83e      	bhi.n	24600 <__aeabi_ddiv+0x58c>
   24582:	d074      	beq.n	2466e <__aeabi_ddiv+0x5fa>
   24584:	0011      	movs	r1, r2
   24586:	e753      	b.n	24430 <__aeabi_ddiv+0x3bc>
   24588:	2101      	movs	r1, #1
   2458a:	4249      	negs	r1, r1
   2458c:	e752      	b.n	24434 <__aeabi_ddiv+0x3c0>
   2458e:	001c      	movs	r4, r3
   24590:	e70e      	b.n	243b0 <__aeabi_ddiv+0x33c>
   24592:	001e      	movs	r6, r3
   24594:	e72b      	b.n	243ee <__aeabi_ddiv+0x37a>
   24596:	2d1f      	cmp	r5, #31
   24598:	dc3c      	bgt.n	24614 <__aeabi_ddiv+0x5a0>
   2459a:	2320      	movs	r3, #32
   2459c:	000a      	movs	r2, r1
   2459e:	4658      	mov	r0, fp
   245a0:	1b5b      	subs	r3, r3, r5
   245a2:	4098      	lsls	r0, r3
   245a4:	40ea      	lsrs	r2, r5
   245a6:	4099      	lsls	r1, r3
   245a8:	4302      	orrs	r2, r0
   245aa:	1e48      	subs	r0, r1, #1
   245ac:	4181      	sbcs	r1, r0
   245ae:	465e      	mov	r6, fp
   245b0:	4311      	orrs	r1, r2
   245b2:	40ee      	lsrs	r6, r5
   245b4:	074b      	lsls	r3, r1, #29
   245b6:	d009      	beq.n	245cc <__aeabi_ddiv+0x558>
   245b8:	230f      	movs	r3, #15
   245ba:	400b      	ands	r3, r1
   245bc:	2b04      	cmp	r3, #4
   245be:	d005      	beq.n	245cc <__aeabi_ddiv+0x558>
   245c0:	000b      	movs	r3, r1
   245c2:	1d19      	adds	r1, r3, #4
   245c4:	4299      	cmp	r1, r3
   245c6:	419b      	sbcs	r3, r3
   245c8:	425b      	negs	r3, r3
   245ca:	18f6      	adds	r6, r6, r3
   245cc:	0233      	lsls	r3, r6, #8
   245ce:	d53c      	bpl.n	2464a <__aeabi_ddiv+0x5d6>
   245d0:	4653      	mov	r3, sl
   245d2:	2201      	movs	r2, #1
   245d4:	2100      	movs	r1, #0
   245d6:	401a      	ands	r2, r3
   245d8:	2600      	movs	r6, #0
   245da:	2301      	movs	r3, #1
   245dc:	4689      	mov	r9, r1
   245de:	e5af      	b.n	24140 <__aeabi_ddiv+0xcc>
   245e0:	2302      	movs	r3, #2
   245e2:	425b      	negs	r3, r3
   245e4:	469c      	mov	ip, r3
   245e6:	9c03      	ldr	r4, [sp, #12]
   245e8:	44e3      	add	fp, ip
   245ea:	46a4      	mov	ip, r4
   245ec:	9b02      	ldr	r3, [sp, #8]
   245ee:	4463      	add	r3, ip
   245f0:	4698      	mov	r8, r3
   245f2:	45a0      	cmp	r8, r4
   245f4:	41b6      	sbcs	r6, r6
   245f6:	4276      	negs	r6, r6
   245f8:	19f6      	adds	r6, r6, r7
   245fa:	9302      	str	r3, [sp, #8]
   245fc:	18b2      	adds	r2, r6, r2
   245fe:	e6b1      	b.n	24364 <__aeabi_ddiv+0x2f0>
   24600:	9803      	ldr	r0, [sp, #12]
   24602:	1e8a      	subs	r2, r1, #2
   24604:	0041      	lsls	r1, r0, #1
   24606:	4281      	cmp	r1, r0
   24608:	41b6      	sbcs	r6, r6
   2460a:	4276      	negs	r6, r6
   2460c:	19f6      	adds	r6, r6, r7
   2460e:	19ad      	adds	r5, r5, r6
   24610:	9103      	str	r1, [sp, #12]
   24612:	e761      	b.n	244d8 <__aeabi_ddiv+0x464>
   24614:	221f      	movs	r2, #31
   24616:	4252      	negs	r2, r2
   24618:	1ad3      	subs	r3, r2, r3
   2461a:	465a      	mov	r2, fp
   2461c:	40da      	lsrs	r2, r3
   2461e:	0013      	movs	r3, r2
   24620:	2d20      	cmp	r5, #32
   24622:	d029      	beq.n	24678 <__aeabi_ddiv+0x604>
   24624:	2240      	movs	r2, #64	; 0x40
   24626:	4658      	mov	r0, fp
   24628:	1b55      	subs	r5, r2, r5
   2462a:	40a8      	lsls	r0, r5
   2462c:	4301      	orrs	r1, r0
   2462e:	1e48      	subs	r0, r1, #1
   24630:	4181      	sbcs	r1, r0
   24632:	2007      	movs	r0, #7
   24634:	430b      	orrs	r3, r1
   24636:	4018      	ands	r0, r3
   24638:	2600      	movs	r6, #0
   2463a:	2800      	cmp	r0, #0
   2463c:	d009      	beq.n	24652 <__aeabi_ddiv+0x5de>
   2463e:	220f      	movs	r2, #15
   24640:	2600      	movs	r6, #0
   24642:	401a      	ands	r2, r3
   24644:	0019      	movs	r1, r3
   24646:	2a04      	cmp	r2, #4
   24648:	d1bb      	bne.n	245c2 <__aeabi_ddiv+0x54e>
   2464a:	000b      	movs	r3, r1
   2464c:	0770      	lsls	r0, r6, #29
   2464e:	0276      	lsls	r6, r6, #9
   24650:	0b36      	lsrs	r6, r6, #12
   24652:	08db      	lsrs	r3, r3, #3
   24654:	4303      	orrs	r3, r0
   24656:	4699      	mov	r9, r3
   24658:	2201      	movs	r2, #1
   2465a:	4653      	mov	r3, sl
   2465c:	401a      	ands	r2, r3
   2465e:	2300      	movs	r3, #0
   24660:	e56e      	b.n	24140 <__aeabi_ddiv+0xcc>
   24662:	9902      	ldr	r1, [sp, #8]
   24664:	428d      	cmp	r5, r1
   24666:	d8bb      	bhi.n	245e0 <__aeabi_ddiv+0x56c>
   24668:	469b      	mov	fp, r3
   2466a:	2600      	movs	r6, #0
   2466c:	e67b      	b.n	24366 <__aeabi_ddiv+0x2f2>
   2466e:	9803      	ldr	r0, [sp, #12]
   24670:	4298      	cmp	r0, r3
   24672:	d3c5      	bcc.n	24600 <__aeabi_ddiv+0x58c>
   24674:	0011      	movs	r1, r2
   24676:	e732      	b.n	244de <__aeabi_ddiv+0x46a>
   24678:	2000      	movs	r0, #0
   2467a:	e7d7      	b.n	2462c <__aeabi_ddiv+0x5b8>
   2467c:	2680      	movs	r6, #128	; 0x80
   2467e:	465b      	mov	r3, fp
   24680:	0336      	lsls	r6, r6, #12
   24682:	431e      	orrs	r6, r3
   24684:	0336      	lsls	r6, r6, #12
   24686:	0b36      	lsrs	r6, r6, #12
   24688:	9a00      	ldr	r2, [sp, #0]
   2468a:	4689      	mov	r9, r1
   2468c:	4b03      	ldr	r3, [pc, #12]	; (2469c <__aeabi_ddiv+0x628>)
   2468e:	e557      	b.n	24140 <__aeabi_ddiv+0xcc>
   24690:	000003ff 	.word	0x000003ff
   24694:	feffffff 	.word	0xfeffffff
   24698:	000007fe 	.word	0x000007fe
   2469c:	000007ff 	.word	0x000007ff

000246a0 <__eqdf2>:
   246a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   246a2:	465f      	mov	r7, fp
   246a4:	4656      	mov	r6, sl
   246a6:	464d      	mov	r5, r9
   246a8:	4644      	mov	r4, r8
   246aa:	b4f0      	push	{r4, r5, r6, r7}
   246ac:	031f      	lsls	r7, r3, #12
   246ae:	005c      	lsls	r4, r3, #1
   246b0:	0fdb      	lsrs	r3, r3, #31
   246b2:	469a      	mov	sl, r3
   246b4:	4b19      	ldr	r3, [pc, #100]	; (2471c <__eqdf2+0x7c>)
   246b6:	030e      	lsls	r6, r1, #12
   246b8:	004d      	lsls	r5, r1, #1
   246ba:	0fc9      	lsrs	r1, r1, #31
   246bc:	4680      	mov	r8, r0
   246be:	0b36      	lsrs	r6, r6, #12
   246c0:	0d6d      	lsrs	r5, r5, #21
   246c2:	468b      	mov	fp, r1
   246c4:	4691      	mov	r9, r2
   246c6:	0b3f      	lsrs	r7, r7, #12
   246c8:	0d64      	lsrs	r4, r4, #21
   246ca:	429d      	cmp	r5, r3
   246cc:	d019      	beq.n	24702 <__eqdf2+0x62>
   246ce:	4b13      	ldr	r3, [pc, #76]	; (2471c <__eqdf2+0x7c>)
   246d0:	429c      	cmp	r4, r3
   246d2:	d01b      	beq.n	2470c <__eqdf2+0x6c>
   246d4:	2301      	movs	r3, #1
   246d6:	42a5      	cmp	r5, r4
   246d8:	d006      	beq.n	246e8 <__eqdf2+0x48>
   246da:	0018      	movs	r0, r3
   246dc:	bc3c      	pop	{r2, r3, r4, r5}
   246de:	4690      	mov	r8, r2
   246e0:	4699      	mov	r9, r3
   246e2:	46a2      	mov	sl, r4
   246e4:	46ab      	mov	fp, r5
   246e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   246e8:	42be      	cmp	r6, r7
   246ea:	d1f6      	bne.n	246da <__eqdf2+0x3a>
   246ec:	45c8      	cmp	r8, r9
   246ee:	d1f4      	bne.n	246da <__eqdf2+0x3a>
   246f0:	45d3      	cmp	fp, sl
   246f2:	d010      	beq.n	24716 <__eqdf2+0x76>
   246f4:	2d00      	cmp	r5, #0
   246f6:	d1f0      	bne.n	246da <__eqdf2+0x3a>
   246f8:	4330      	orrs	r0, r6
   246fa:	0003      	movs	r3, r0
   246fc:	1e5a      	subs	r2, r3, #1
   246fe:	4193      	sbcs	r3, r2
   24700:	e7eb      	b.n	246da <__eqdf2+0x3a>
   24702:	0031      	movs	r1, r6
   24704:	2301      	movs	r3, #1
   24706:	4301      	orrs	r1, r0
   24708:	d1e7      	bne.n	246da <__eqdf2+0x3a>
   2470a:	e7e0      	b.n	246ce <__eqdf2+0x2e>
   2470c:	433a      	orrs	r2, r7
   2470e:	2301      	movs	r3, #1
   24710:	2a00      	cmp	r2, #0
   24712:	d1e2      	bne.n	246da <__eqdf2+0x3a>
   24714:	e7de      	b.n	246d4 <__eqdf2+0x34>
   24716:	2300      	movs	r3, #0
   24718:	e7df      	b.n	246da <__eqdf2+0x3a>
   2471a:	46c0      	nop			; (mov r8, r8)
   2471c:	000007ff 	.word	0x000007ff

00024720 <__gedf2>:
   24720:	b5f0      	push	{r4, r5, r6, r7, lr}
   24722:	465f      	mov	r7, fp
   24724:	4644      	mov	r4, r8
   24726:	4656      	mov	r6, sl
   24728:	464d      	mov	r5, r9
   2472a:	b4f0      	push	{r4, r5, r6, r7}
   2472c:	031f      	lsls	r7, r3, #12
   2472e:	0b3c      	lsrs	r4, r7, #12
   24730:	4f2c      	ldr	r7, [pc, #176]	; (247e4 <__gedf2+0xc4>)
   24732:	030e      	lsls	r6, r1, #12
   24734:	004d      	lsls	r5, r1, #1
   24736:	46a3      	mov	fp, r4
   24738:	005c      	lsls	r4, r3, #1
   2473a:	4684      	mov	ip, r0
   2473c:	0b36      	lsrs	r6, r6, #12
   2473e:	0d6d      	lsrs	r5, r5, #21
   24740:	0fc9      	lsrs	r1, r1, #31
   24742:	4690      	mov	r8, r2
   24744:	0d64      	lsrs	r4, r4, #21
   24746:	0fdb      	lsrs	r3, r3, #31
   24748:	42bd      	cmp	r5, r7
   2474a:	d02b      	beq.n	247a4 <__gedf2+0x84>
   2474c:	4f25      	ldr	r7, [pc, #148]	; (247e4 <__gedf2+0xc4>)
   2474e:	42bc      	cmp	r4, r7
   24750:	d02e      	beq.n	247b0 <__gedf2+0x90>
   24752:	2d00      	cmp	r5, #0
   24754:	d10e      	bne.n	24774 <__gedf2+0x54>
   24756:	4330      	orrs	r0, r6
   24758:	0007      	movs	r7, r0
   2475a:	4681      	mov	r9, r0
   2475c:	4278      	negs	r0, r7
   2475e:	4178      	adcs	r0, r7
   24760:	2c00      	cmp	r4, #0
   24762:	d117      	bne.n	24794 <__gedf2+0x74>
   24764:	465f      	mov	r7, fp
   24766:	433a      	orrs	r2, r7
   24768:	d114      	bne.n	24794 <__gedf2+0x74>
   2476a:	464b      	mov	r3, r9
   2476c:	2000      	movs	r0, #0
   2476e:	2b00      	cmp	r3, #0
   24770:	d00a      	beq.n	24788 <__gedf2+0x68>
   24772:	e006      	b.n	24782 <__gedf2+0x62>
   24774:	2c00      	cmp	r4, #0
   24776:	d102      	bne.n	2477e <__gedf2+0x5e>
   24778:	4658      	mov	r0, fp
   2477a:	4302      	orrs	r2, r0
   2477c:	d001      	beq.n	24782 <__gedf2+0x62>
   2477e:	4299      	cmp	r1, r3
   24780:	d01a      	beq.n	247b8 <__gedf2+0x98>
   24782:	2301      	movs	r3, #1
   24784:	4248      	negs	r0, r1
   24786:	4318      	orrs	r0, r3
   24788:	bc3c      	pop	{r2, r3, r4, r5}
   2478a:	4690      	mov	r8, r2
   2478c:	4699      	mov	r9, r3
   2478e:	46a2      	mov	sl, r4
   24790:	46ab      	mov	fp, r5
   24792:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24794:	2800      	cmp	r0, #0
   24796:	d0f2      	beq.n	2477e <__gedf2+0x5e>
   24798:	4258      	negs	r0, r3
   2479a:	4158      	adcs	r0, r3
   2479c:	2201      	movs	r2, #1
   2479e:	4240      	negs	r0, r0
   247a0:	4310      	orrs	r0, r2
   247a2:	e7f1      	b.n	24788 <__gedf2+0x68>
   247a4:	0037      	movs	r7, r6
   247a6:	4307      	orrs	r7, r0
   247a8:	d0d0      	beq.n	2474c <__gedf2+0x2c>
   247aa:	2002      	movs	r0, #2
   247ac:	4240      	negs	r0, r0
   247ae:	e7eb      	b.n	24788 <__gedf2+0x68>
   247b0:	465f      	mov	r7, fp
   247b2:	4317      	orrs	r7, r2
   247b4:	d0cd      	beq.n	24752 <__gedf2+0x32>
   247b6:	e7f8      	b.n	247aa <__gedf2+0x8a>
   247b8:	42a5      	cmp	r5, r4
   247ba:	dce2      	bgt.n	24782 <__gedf2+0x62>
   247bc:	db05      	blt.n	247ca <__gedf2+0xaa>
   247be:	455e      	cmp	r6, fp
   247c0:	d8df      	bhi.n	24782 <__gedf2+0x62>
   247c2:	d008      	beq.n	247d6 <__gedf2+0xb6>
   247c4:	2000      	movs	r0, #0
   247c6:	455e      	cmp	r6, fp
   247c8:	d2de      	bcs.n	24788 <__gedf2+0x68>
   247ca:	4248      	negs	r0, r1
   247cc:	4148      	adcs	r0, r1
   247ce:	2301      	movs	r3, #1
   247d0:	4240      	negs	r0, r0
   247d2:	4318      	orrs	r0, r3
   247d4:	e7d8      	b.n	24788 <__gedf2+0x68>
   247d6:	45c4      	cmp	ip, r8
   247d8:	d8d3      	bhi.n	24782 <__gedf2+0x62>
   247da:	2000      	movs	r0, #0
   247dc:	45c4      	cmp	ip, r8
   247de:	d3f4      	bcc.n	247ca <__gedf2+0xaa>
   247e0:	e7d2      	b.n	24788 <__gedf2+0x68>
   247e2:	46c0      	nop			; (mov r8, r8)
   247e4:	000007ff 	.word	0x000007ff

000247e8 <__ledf2>:
   247e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   247ea:	465f      	mov	r7, fp
   247ec:	464d      	mov	r5, r9
   247ee:	4644      	mov	r4, r8
   247f0:	4656      	mov	r6, sl
   247f2:	b4f0      	push	{r4, r5, r6, r7}
   247f4:	031c      	lsls	r4, r3, #12
   247f6:	0b24      	lsrs	r4, r4, #12
   247f8:	46a4      	mov	ip, r4
   247fa:	4c2f      	ldr	r4, [pc, #188]	; (248b8 <__ledf2+0xd0>)
   247fc:	030f      	lsls	r7, r1, #12
   247fe:	004d      	lsls	r5, r1, #1
   24800:	005e      	lsls	r6, r3, #1
   24802:	0fc9      	lsrs	r1, r1, #31
   24804:	4680      	mov	r8, r0
   24806:	0b3f      	lsrs	r7, r7, #12
   24808:	0d6d      	lsrs	r5, r5, #21
   2480a:	468b      	mov	fp, r1
   2480c:	4691      	mov	r9, r2
   2480e:	0d76      	lsrs	r6, r6, #21
   24810:	0fdb      	lsrs	r3, r3, #31
   24812:	42a5      	cmp	r5, r4
   24814:	d020      	beq.n	24858 <__ledf2+0x70>
   24816:	4c28      	ldr	r4, [pc, #160]	; (248b8 <__ledf2+0xd0>)
   24818:	42a6      	cmp	r6, r4
   2481a:	d022      	beq.n	24862 <__ledf2+0x7a>
   2481c:	2d00      	cmp	r5, #0
   2481e:	d112      	bne.n	24846 <__ledf2+0x5e>
   24820:	4338      	orrs	r0, r7
   24822:	4244      	negs	r4, r0
   24824:	4144      	adcs	r4, r0
   24826:	2e00      	cmp	r6, #0
   24828:	d020      	beq.n	2486c <__ledf2+0x84>
   2482a:	2c00      	cmp	r4, #0
   2482c:	d00d      	beq.n	2484a <__ledf2+0x62>
   2482e:	425c      	negs	r4, r3
   24830:	4163      	adcs	r3, r4
   24832:	2401      	movs	r4, #1
   24834:	425b      	negs	r3, r3
   24836:	431c      	orrs	r4, r3
   24838:	0020      	movs	r0, r4
   2483a:	bc3c      	pop	{r2, r3, r4, r5}
   2483c:	4690      	mov	r8, r2
   2483e:	4699      	mov	r9, r3
   24840:	46a2      	mov	sl, r4
   24842:	46ab      	mov	fp, r5
   24844:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24846:	2e00      	cmp	r6, #0
   24848:	d017      	beq.n	2487a <__ledf2+0x92>
   2484a:	455b      	cmp	r3, fp
   2484c:	d019      	beq.n	24882 <__ledf2+0x9a>
   2484e:	465b      	mov	r3, fp
   24850:	425c      	negs	r4, r3
   24852:	2301      	movs	r3, #1
   24854:	431c      	orrs	r4, r3
   24856:	e7ef      	b.n	24838 <__ledf2+0x50>
   24858:	0039      	movs	r1, r7
   2485a:	2402      	movs	r4, #2
   2485c:	4301      	orrs	r1, r0
   2485e:	d1eb      	bne.n	24838 <__ledf2+0x50>
   24860:	e7d9      	b.n	24816 <__ledf2+0x2e>
   24862:	4661      	mov	r1, ip
   24864:	2402      	movs	r4, #2
   24866:	4311      	orrs	r1, r2
   24868:	d1e6      	bne.n	24838 <__ledf2+0x50>
   2486a:	e7d7      	b.n	2481c <__ledf2+0x34>
   2486c:	4661      	mov	r1, ip
   2486e:	430a      	orrs	r2, r1
   24870:	d1db      	bne.n	2482a <__ledf2+0x42>
   24872:	2400      	movs	r4, #0
   24874:	2800      	cmp	r0, #0
   24876:	d0df      	beq.n	24838 <__ledf2+0x50>
   24878:	e7e9      	b.n	2484e <__ledf2+0x66>
   2487a:	4661      	mov	r1, ip
   2487c:	430a      	orrs	r2, r1
   2487e:	d1e4      	bne.n	2484a <__ledf2+0x62>
   24880:	e7e5      	b.n	2484e <__ledf2+0x66>
   24882:	42b5      	cmp	r5, r6
   24884:	dd03      	ble.n	2488e <__ledf2+0xa6>
   24886:	2201      	movs	r2, #1
   24888:	425c      	negs	r4, r3
   2488a:	4314      	orrs	r4, r2
   2488c:	e7d4      	b.n	24838 <__ledf2+0x50>
   2488e:	42b5      	cmp	r5, r6
   24890:	dbcd      	blt.n	2482e <__ledf2+0x46>
   24892:	4567      	cmp	r7, ip
   24894:	d8db      	bhi.n	2484e <__ledf2+0x66>
   24896:	d009      	beq.n	248ac <__ledf2+0xc4>
   24898:	2400      	movs	r4, #0
   2489a:	4567      	cmp	r7, ip
   2489c:	d2cc      	bcs.n	24838 <__ledf2+0x50>
   2489e:	4659      	mov	r1, fp
   248a0:	424c      	negs	r4, r1
   248a2:	4161      	adcs	r1, r4
   248a4:	2401      	movs	r4, #1
   248a6:	4249      	negs	r1, r1
   248a8:	430c      	orrs	r4, r1
   248aa:	e7c5      	b.n	24838 <__ledf2+0x50>
   248ac:	45c8      	cmp	r8, r9
   248ae:	d8ce      	bhi.n	2484e <__ledf2+0x66>
   248b0:	2400      	movs	r4, #0
   248b2:	45c8      	cmp	r8, r9
   248b4:	d3f3      	bcc.n	2489e <__ledf2+0xb6>
   248b6:	e7bf      	b.n	24838 <__ledf2+0x50>
   248b8:	000007ff 	.word	0x000007ff

000248bc <__aeabi_dmul>:
   248bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   248be:	465f      	mov	r7, fp
   248c0:	4656      	mov	r6, sl
   248c2:	464d      	mov	r5, r9
   248c4:	4644      	mov	r4, r8
   248c6:	b4f0      	push	{r4, r5, r6, r7}
   248c8:	030d      	lsls	r5, r1, #12
   248ca:	4699      	mov	r9, r3
   248cc:	004e      	lsls	r6, r1, #1
   248ce:	0b2b      	lsrs	r3, r5, #12
   248d0:	b087      	sub	sp, #28
   248d2:	0007      	movs	r7, r0
   248d4:	4692      	mov	sl, r2
   248d6:	4680      	mov	r8, r0
   248d8:	469b      	mov	fp, r3
   248da:	0d76      	lsrs	r6, r6, #21
   248dc:	0fcc      	lsrs	r4, r1, #31
   248de:	2e00      	cmp	r6, #0
   248e0:	d069      	beq.n	249b6 <__aeabi_dmul+0xfa>
   248e2:	4b6d      	ldr	r3, [pc, #436]	; (24a98 <__aeabi_dmul+0x1dc>)
   248e4:	429e      	cmp	r6, r3
   248e6:	d035      	beq.n	24954 <__aeabi_dmul+0x98>
   248e8:	465b      	mov	r3, fp
   248ea:	2280      	movs	r2, #128	; 0x80
   248ec:	00dd      	lsls	r5, r3, #3
   248ee:	0412      	lsls	r2, r2, #16
   248f0:	0f43      	lsrs	r3, r0, #29
   248f2:	4313      	orrs	r3, r2
   248f4:	432b      	orrs	r3, r5
   248f6:	469b      	mov	fp, r3
   248f8:	00c3      	lsls	r3, r0, #3
   248fa:	4698      	mov	r8, r3
   248fc:	4b67      	ldr	r3, [pc, #412]	; (24a9c <__aeabi_dmul+0x1e0>)
   248fe:	2700      	movs	r7, #0
   24900:	469c      	mov	ip, r3
   24902:	2300      	movs	r3, #0
   24904:	4466      	add	r6, ip
   24906:	9301      	str	r3, [sp, #4]
   24908:	464a      	mov	r2, r9
   2490a:	0315      	lsls	r5, r2, #12
   2490c:	0050      	lsls	r0, r2, #1
   2490e:	0fd2      	lsrs	r2, r2, #31
   24910:	4653      	mov	r3, sl
   24912:	0b2d      	lsrs	r5, r5, #12
   24914:	0d40      	lsrs	r0, r0, #21
   24916:	4691      	mov	r9, r2
   24918:	d100      	bne.n	2491c <__aeabi_dmul+0x60>
   2491a:	e076      	b.n	24a0a <__aeabi_dmul+0x14e>
   2491c:	4a5e      	ldr	r2, [pc, #376]	; (24a98 <__aeabi_dmul+0x1dc>)
   2491e:	4290      	cmp	r0, r2
   24920:	d06c      	beq.n	249fc <__aeabi_dmul+0x140>
   24922:	2280      	movs	r2, #128	; 0x80
   24924:	0f5b      	lsrs	r3, r3, #29
   24926:	0412      	lsls	r2, r2, #16
   24928:	4313      	orrs	r3, r2
   2492a:	4a5c      	ldr	r2, [pc, #368]	; (24a9c <__aeabi_dmul+0x1e0>)
   2492c:	00ed      	lsls	r5, r5, #3
   2492e:	4694      	mov	ip, r2
   24930:	431d      	orrs	r5, r3
   24932:	4653      	mov	r3, sl
   24934:	2200      	movs	r2, #0
   24936:	00db      	lsls	r3, r3, #3
   24938:	4460      	add	r0, ip
   2493a:	4649      	mov	r1, r9
   2493c:	1836      	adds	r6, r6, r0
   2493e:	1c70      	adds	r0, r6, #1
   24940:	4061      	eors	r1, r4
   24942:	9002      	str	r0, [sp, #8]
   24944:	4317      	orrs	r7, r2
   24946:	2f0f      	cmp	r7, #15
   24948:	d900      	bls.n	2494c <__aeabi_dmul+0x90>
   2494a:	e0af      	b.n	24aac <__aeabi_dmul+0x1f0>
   2494c:	4854      	ldr	r0, [pc, #336]	; (24aa0 <__aeabi_dmul+0x1e4>)
   2494e:	00bf      	lsls	r7, r7, #2
   24950:	59c7      	ldr	r7, [r0, r7]
   24952:	46bf      	mov	pc, r7
   24954:	465b      	mov	r3, fp
   24956:	431f      	orrs	r7, r3
   24958:	d000      	beq.n	2495c <__aeabi_dmul+0xa0>
   2495a:	e088      	b.n	24a6e <__aeabi_dmul+0x1b2>
   2495c:	2300      	movs	r3, #0
   2495e:	469b      	mov	fp, r3
   24960:	4698      	mov	r8, r3
   24962:	3302      	adds	r3, #2
   24964:	2708      	movs	r7, #8
   24966:	9301      	str	r3, [sp, #4]
   24968:	e7ce      	b.n	24908 <__aeabi_dmul+0x4c>
   2496a:	4649      	mov	r1, r9
   2496c:	2a02      	cmp	r2, #2
   2496e:	d06a      	beq.n	24a46 <__aeabi_dmul+0x18a>
   24970:	2a03      	cmp	r2, #3
   24972:	d100      	bne.n	24976 <__aeabi_dmul+0xba>
   24974:	e209      	b.n	24d8a <__aeabi_dmul+0x4ce>
   24976:	2a01      	cmp	r2, #1
   24978:	d000      	beq.n	2497c <__aeabi_dmul+0xc0>
   2497a:	e1bb      	b.n	24cf4 <__aeabi_dmul+0x438>
   2497c:	4011      	ands	r1, r2
   2497e:	2200      	movs	r2, #0
   24980:	2300      	movs	r3, #0
   24982:	2500      	movs	r5, #0
   24984:	4690      	mov	r8, r2
   24986:	b2cc      	uxtb	r4, r1
   24988:	2100      	movs	r1, #0
   2498a:	032d      	lsls	r5, r5, #12
   2498c:	0d0a      	lsrs	r2, r1, #20
   2498e:	0512      	lsls	r2, r2, #20
   24990:	0b2d      	lsrs	r5, r5, #12
   24992:	4315      	orrs	r5, r2
   24994:	4a43      	ldr	r2, [pc, #268]	; (24aa4 <__aeabi_dmul+0x1e8>)
   24996:	051b      	lsls	r3, r3, #20
   24998:	4015      	ands	r5, r2
   2499a:	431d      	orrs	r5, r3
   2499c:	006d      	lsls	r5, r5, #1
   2499e:	07e4      	lsls	r4, r4, #31
   249a0:	086d      	lsrs	r5, r5, #1
   249a2:	4325      	orrs	r5, r4
   249a4:	4640      	mov	r0, r8
   249a6:	0029      	movs	r1, r5
   249a8:	b007      	add	sp, #28
   249aa:	bc3c      	pop	{r2, r3, r4, r5}
   249ac:	4690      	mov	r8, r2
   249ae:	4699      	mov	r9, r3
   249b0:	46a2      	mov	sl, r4
   249b2:	46ab      	mov	fp, r5
   249b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   249b6:	4303      	orrs	r3, r0
   249b8:	d052      	beq.n	24a60 <__aeabi_dmul+0x1a4>
   249ba:	465b      	mov	r3, fp
   249bc:	2b00      	cmp	r3, #0
   249be:	d100      	bne.n	249c2 <__aeabi_dmul+0x106>
   249c0:	e18a      	b.n	24cd8 <__aeabi_dmul+0x41c>
   249c2:	4658      	mov	r0, fp
   249c4:	f000 fdf8 	bl	255b8 <__clzsi2>
   249c8:	0003      	movs	r3, r0
   249ca:	3b0b      	subs	r3, #11
   249cc:	2b1c      	cmp	r3, #28
   249ce:	dd00      	ble.n	249d2 <__aeabi_dmul+0x116>
   249d0:	e17b      	b.n	24cca <__aeabi_dmul+0x40e>
   249d2:	221d      	movs	r2, #29
   249d4:	1ad3      	subs	r3, r2, r3
   249d6:	003a      	movs	r2, r7
   249d8:	0001      	movs	r1, r0
   249da:	465d      	mov	r5, fp
   249dc:	40da      	lsrs	r2, r3
   249de:	3908      	subs	r1, #8
   249e0:	408d      	lsls	r5, r1
   249e2:	0013      	movs	r3, r2
   249e4:	408f      	lsls	r7, r1
   249e6:	432b      	orrs	r3, r5
   249e8:	469b      	mov	fp, r3
   249ea:	46b8      	mov	r8, r7
   249ec:	4b2e      	ldr	r3, [pc, #184]	; (24aa8 <__aeabi_dmul+0x1ec>)
   249ee:	2700      	movs	r7, #0
   249f0:	469c      	mov	ip, r3
   249f2:	2300      	movs	r3, #0
   249f4:	4460      	add	r0, ip
   249f6:	4246      	negs	r6, r0
   249f8:	9301      	str	r3, [sp, #4]
   249fa:	e785      	b.n	24908 <__aeabi_dmul+0x4c>
   249fc:	4652      	mov	r2, sl
   249fe:	432a      	orrs	r2, r5
   24a00:	d12c      	bne.n	24a5c <__aeabi_dmul+0x1a0>
   24a02:	2500      	movs	r5, #0
   24a04:	2300      	movs	r3, #0
   24a06:	2202      	movs	r2, #2
   24a08:	e797      	b.n	2493a <__aeabi_dmul+0x7e>
   24a0a:	4652      	mov	r2, sl
   24a0c:	432a      	orrs	r2, r5
   24a0e:	d021      	beq.n	24a54 <__aeabi_dmul+0x198>
   24a10:	2d00      	cmp	r5, #0
   24a12:	d100      	bne.n	24a16 <__aeabi_dmul+0x15a>
   24a14:	e154      	b.n	24cc0 <__aeabi_dmul+0x404>
   24a16:	0028      	movs	r0, r5
   24a18:	f000 fdce 	bl	255b8 <__clzsi2>
   24a1c:	0003      	movs	r3, r0
   24a1e:	3b0b      	subs	r3, #11
   24a20:	2b1c      	cmp	r3, #28
   24a22:	dd00      	ble.n	24a26 <__aeabi_dmul+0x16a>
   24a24:	e146      	b.n	24cb4 <__aeabi_dmul+0x3f8>
   24a26:	211d      	movs	r1, #29
   24a28:	1acb      	subs	r3, r1, r3
   24a2a:	4651      	mov	r1, sl
   24a2c:	0002      	movs	r2, r0
   24a2e:	40d9      	lsrs	r1, r3
   24a30:	4653      	mov	r3, sl
   24a32:	3a08      	subs	r2, #8
   24a34:	4095      	lsls	r5, r2
   24a36:	4093      	lsls	r3, r2
   24a38:	430d      	orrs	r5, r1
   24a3a:	4a1b      	ldr	r2, [pc, #108]	; (24aa8 <__aeabi_dmul+0x1ec>)
   24a3c:	4694      	mov	ip, r2
   24a3e:	4460      	add	r0, ip
   24a40:	4240      	negs	r0, r0
   24a42:	2200      	movs	r2, #0
   24a44:	e779      	b.n	2493a <__aeabi_dmul+0x7e>
   24a46:	2401      	movs	r4, #1
   24a48:	2200      	movs	r2, #0
   24a4a:	400c      	ands	r4, r1
   24a4c:	4b12      	ldr	r3, [pc, #72]	; (24a98 <__aeabi_dmul+0x1dc>)
   24a4e:	2500      	movs	r5, #0
   24a50:	4690      	mov	r8, r2
   24a52:	e799      	b.n	24988 <__aeabi_dmul+0xcc>
   24a54:	2500      	movs	r5, #0
   24a56:	2300      	movs	r3, #0
   24a58:	2201      	movs	r2, #1
   24a5a:	e76e      	b.n	2493a <__aeabi_dmul+0x7e>
   24a5c:	2203      	movs	r2, #3
   24a5e:	e76c      	b.n	2493a <__aeabi_dmul+0x7e>
   24a60:	2300      	movs	r3, #0
   24a62:	469b      	mov	fp, r3
   24a64:	4698      	mov	r8, r3
   24a66:	3301      	adds	r3, #1
   24a68:	2704      	movs	r7, #4
   24a6a:	9301      	str	r3, [sp, #4]
   24a6c:	e74c      	b.n	24908 <__aeabi_dmul+0x4c>
   24a6e:	2303      	movs	r3, #3
   24a70:	270c      	movs	r7, #12
   24a72:	9301      	str	r3, [sp, #4]
   24a74:	e748      	b.n	24908 <__aeabi_dmul+0x4c>
   24a76:	2300      	movs	r3, #0
   24a78:	2580      	movs	r5, #128	; 0x80
   24a7a:	4698      	mov	r8, r3
   24a7c:	2400      	movs	r4, #0
   24a7e:	032d      	lsls	r5, r5, #12
   24a80:	4b05      	ldr	r3, [pc, #20]	; (24a98 <__aeabi_dmul+0x1dc>)
   24a82:	e781      	b.n	24988 <__aeabi_dmul+0xcc>
   24a84:	465d      	mov	r5, fp
   24a86:	4643      	mov	r3, r8
   24a88:	9a01      	ldr	r2, [sp, #4]
   24a8a:	e76f      	b.n	2496c <__aeabi_dmul+0xb0>
   24a8c:	465d      	mov	r5, fp
   24a8e:	4643      	mov	r3, r8
   24a90:	0021      	movs	r1, r4
   24a92:	9a01      	ldr	r2, [sp, #4]
   24a94:	e76a      	b.n	2496c <__aeabi_dmul+0xb0>
   24a96:	46c0      	nop			; (mov r8, r8)
   24a98:	000007ff 	.word	0x000007ff
   24a9c:	fffffc01 	.word	0xfffffc01
   24aa0:	0002ed64 	.word	0x0002ed64
   24aa4:	800fffff 	.word	0x800fffff
   24aa8:	000003f3 	.word	0x000003f3
   24aac:	4642      	mov	r2, r8
   24aae:	0c12      	lsrs	r2, r2, #16
   24ab0:	4691      	mov	r9, r2
   24ab2:	0c1a      	lsrs	r2, r3, #16
   24ab4:	4694      	mov	ip, r2
   24ab6:	4642      	mov	r2, r8
   24ab8:	0417      	lsls	r7, r2, #16
   24aba:	464a      	mov	r2, r9
   24abc:	041b      	lsls	r3, r3, #16
   24abe:	0c1b      	lsrs	r3, r3, #16
   24ac0:	435a      	muls	r2, r3
   24ac2:	4660      	mov	r0, ip
   24ac4:	4690      	mov	r8, r2
   24ac6:	464a      	mov	r2, r9
   24ac8:	4342      	muls	r2, r0
   24aca:	0010      	movs	r0, r2
   24acc:	9203      	str	r2, [sp, #12]
   24ace:	4662      	mov	r2, ip
   24ad0:	001c      	movs	r4, r3
   24ad2:	0c3f      	lsrs	r7, r7, #16
   24ad4:	437a      	muls	r2, r7
   24ad6:	437c      	muls	r4, r7
   24ad8:	4442      	add	r2, r8
   24ada:	9201      	str	r2, [sp, #4]
   24adc:	0c22      	lsrs	r2, r4, #16
   24ade:	4692      	mov	sl, r2
   24ae0:	9a01      	ldr	r2, [sp, #4]
   24ae2:	4452      	add	r2, sl
   24ae4:	4590      	cmp	r8, r2
   24ae6:	d906      	bls.n	24af6 <__aeabi_dmul+0x23a>
   24ae8:	4682      	mov	sl, r0
   24aea:	2080      	movs	r0, #128	; 0x80
   24aec:	0240      	lsls	r0, r0, #9
   24aee:	4680      	mov	r8, r0
   24af0:	44c2      	add	sl, r8
   24af2:	4650      	mov	r0, sl
   24af4:	9003      	str	r0, [sp, #12]
   24af6:	0c10      	lsrs	r0, r2, #16
   24af8:	9004      	str	r0, [sp, #16]
   24afa:	4648      	mov	r0, r9
   24afc:	0424      	lsls	r4, r4, #16
   24afe:	0c24      	lsrs	r4, r4, #16
   24b00:	0412      	lsls	r2, r2, #16
   24b02:	1912      	adds	r2, r2, r4
   24b04:	9205      	str	r2, [sp, #20]
   24b06:	0c2a      	lsrs	r2, r5, #16
   24b08:	042d      	lsls	r5, r5, #16
   24b0a:	0c2d      	lsrs	r5, r5, #16
   24b0c:	4368      	muls	r0, r5
   24b0e:	002c      	movs	r4, r5
   24b10:	4682      	mov	sl, r0
   24b12:	4648      	mov	r0, r9
   24b14:	437c      	muls	r4, r7
   24b16:	4350      	muls	r0, r2
   24b18:	4681      	mov	r9, r0
   24b1a:	0c20      	lsrs	r0, r4, #16
   24b1c:	4680      	mov	r8, r0
   24b1e:	4357      	muls	r7, r2
   24b20:	4457      	add	r7, sl
   24b22:	4447      	add	r7, r8
   24b24:	45ba      	cmp	sl, r7
   24b26:	d903      	bls.n	24b30 <__aeabi_dmul+0x274>
   24b28:	2080      	movs	r0, #128	; 0x80
   24b2a:	0240      	lsls	r0, r0, #9
   24b2c:	4680      	mov	r8, r0
   24b2e:	44c1      	add	r9, r8
   24b30:	0c38      	lsrs	r0, r7, #16
   24b32:	043f      	lsls	r7, r7, #16
   24b34:	46b8      	mov	r8, r7
   24b36:	4448      	add	r0, r9
   24b38:	0424      	lsls	r4, r4, #16
   24b3a:	0c24      	lsrs	r4, r4, #16
   24b3c:	9001      	str	r0, [sp, #4]
   24b3e:	9804      	ldr	r0, [sp, #16]
   24b40:	44a0      	add	r8, r4
   24b42:	4440      	add	r0, r8
   24b44:	9004      	str	r0, [sp, #16]
   24b46:	4658      	mov	r0, fp
   24b48:	0c00      	lsrs	r0, r0, #16
   24b4a:	4681      	mov	r9, r0
   24b4c:	4658      	mov	r0, fp
   24b4e:	0404      	lsls	r4, r0, #16
   24b50:	0c20      	lsrs	r0, r4, #16
   24b52:	4682      	mov	sl, r0
   24b54:	0007      	movs	r7, r0
   24b56:	4648      	mov	r0, r9
   24b58:	435f      	muls	r7, r3
   24b5a:	464c      	mov	r4, r9
   24b5c:	4343      	muls	r3, r0
   24b5e:	4660      	mov	r0, ip
   24b60:	4360      	muls	r0, r4
   24b62:	4664      	mov	r4, ip
   24b64:	4683      	mov	fp, r0
   24b66:	4650      	mov	r0, sl
   24b68:	4344      	muls	r4, r0
   24b6a:	0c38      	lsrs	r0, r7, #16
   24b6c:	4684      	mov	ip, r0
   24b6e:	18e4      	adds	r4, r4, r3
   24b70:	4464      	add	r4, ip
   24b72:	42a3      	cmp	r3, r4
   24b74:	d903      	bls.n	24b7e <__aeabi_dmul+0x2c2>
   24b76:	2380      	movs	r3, #128	; 0x80
   24b78:	025b      	lsls	r3, r3, #9
   24b7a:	469c      	mov	ip, r3
   24b7c:	44e3      	add	fp, ip
   24b7e:	4648      	mov	r0, r9
   24b80:	043f      	lsls	r7, r7, #16
   24b82:	0c23      	lsrs	r3, r4, #16
   24b84:	0c3f      	lsrs	r7, r7, #16
   24b86:	0424      	lsls	r4, r4, #16
   24b88:	19e4      	adds	r4, r4, r7
   24b8a:	4657      	mov	r7, sl
   24b8c:	4368      	muls	r0, r5
   24b8e:	436f      	muls	r7, r5
   24b90:	4684      	mov	ip, r0
   24b92:	464d      	mov	r5, r9
   24b94:	4650      	mov	r0, sl
   24b96:	4355      	muls	r5, r2
   24b98:	4342      	muls	r2, r0
   24b9a:	0c38      	lsrs	r0, r7, #16
   24b9c:	4681      	mov	r9, r0
   24b9e:	4462      	add	r2, ip
   24ba0:	444a      	add	r2, r9
   24ba2:	445b      	add	r3, fp
   24ba4:	4594      	cmp	ip, r2
   24ba6:	d903      	bls.n	24bb0 <__aeabi_dmul+0x2f4>
   24ba8:	2080      	movs	r0, #128	; 0x80
   24baa:	0240      	lsls	r0, r0, #9
   24bac:	4684      	mov	ip, r0
   24bae:	4465      	add	r5, ip
   24bb0:	9803      	ldr	r0, [sp, #12]
   24bb2:	043f      	lsls	r7, r7, #16
   24bb4:	4683      	mov	fp, r0
   24bb6:	9804      	ldr	r0, [sp, #16]
   24bb8:	0c3f      	lsrs	r7, r7, #16
   24bba:	4684      	mov	ip, r0
   24bbc:	44e3      	add	fp, ip
   24bbe:	45c3      	cmp	fp, r8
   24bc0:	4180      	sbcs	r0, r0
   24bc2:	4240      	negs	r0, r0
   24bc4:	4682      	mov	sl, r0
   24bc6:	0410      	lsls	r0, r2, #16
   24bc8:	4684      	mov	ip, r0
   24bca:	9801      	ldr	r0, [sp, #4]
   24bcc:	4467      	add	r7, ip
   24bce:	4684      	mov	ip, r0
   24bd0:	4467      	add	r7, ip
   24bd2:	44a3      	add	fp, r4
   24bd4:	46bc      	mov	ip, r7
   24bd6:	45a3      	cmp	fp, r4
   24bd8:	41a4      	sbcs	r4, r4
   24bda:	4699      	mov	r9, r3
   24bdc:	44d4      	add	ip, sl
   24bde:	4264      	negs	r4, r4
   24be0:	4287      	cmp	r7, r0
   24be2:	41bf      	sbcs	r7, r7
   24be4:	45d4      	cmp	ip, sl
   24be6:	4180      	sbcs	r0, r0
   24be8:	44e1      	add	r9, ip
   24bea:	46a0      	mov	r8, r4
   24bec:	4599      	cmp	r9, r3
   24bee:	419b      	sbcs	r3, r3
   24bf0:	427f      	negs	r7, r7
   24bf2:	4240      	negs	r0, r0
   24bf4:	44c8      	add	r8, r9
   24bf6:	4307      	orrs	r7, r0
   24bf8:	0c12      	lsrs	r2, r2, #16
   24bfa:	18ba      	adds	r2, r7, r2
   24bfc:	45a0      	cmp	r8, r4
   24bfe:	41a4      	sbcs	r4, r4
   24c00:	425f      	negs	r7, r3
   24c02:	003b      	movs	r3, r7
   24c04:	4264      	negs	r4, r4
   24c06:	4323      	orrs	r3, r4
   24c08:	18d7      	adds	r7, r2, r3
   24c0a:	4643      	mov	r3, r8
   24c0c:	197d      	adds	r5, r7, r5
   24c0e:	0ddb      	lsrs	r3, r3, #23
   24c10:	026d      	lsls	r5, r5, #9
   24c12:	431d      	orrs	r5, r3
   24c14:	465b      	mov	r3, fp
   24c16:	025a      	lsls	r2, r3, #9
   24c18:	9b05      	ldr	r3, [sp, #20]
   24c1a:	431a      	orrs	r2, r3
   24c1c:	1e53      	subs	r3, r2, #1
   24c1e:	419a      	sbcs	r2, r3
   24c20:	465b      	mov	r3, fp
   24c22:	0ddb      	lsrs	r3, r3, #23
   24c24:	431a      	orrs	r2, r3
   24c26:	4643      	mov	r3, r8
   24c28:	025b      	lsls	r3, r3, #9
   24c2a:	4313      	orrs	r3, r2
   24c2c:	01ea      	lsls	r2, r5, #7
   24c2e:	d507      	bpl.n	24c40 <__aeabi_dmul+0x384>
   24c30:	2201      	movs	r2, #1
   24c32:	085c      	lsrs	r4, r3, #1
   24c34:	4013      	ands	r3, r2
   24c36:	4323      	orrs	r3, r4
   24c38:	07ea      	lsls	r2, r5, #31
   24c3a:	9e02      	ldr	r6, [sp, #8]
   24c3c:	4313      	orrs	r3, r2
   24c3e:	086d      	lsrs	r5, r5, #1
   24c40:	4a57      	ldr	r2, [pc, #348]	; (24da0 <__aeabi_dmul+0x4e4>)
   24c42:	18b2      	adds	r2, r6, r2
   24c44:	2a00      	cmp	r2, #0
   24c46:	dd4b      	ble.n	24ce0 <__aeabi_dmul+0x424>
   24c48:	0758      	lsls	r0, r3, #29
   24c4a:	d009      	beq.n	24c60 <__aeabi_dmul+0x3a4>
   24c4c:	200f      	movs	r0, #15
   24c4e:	4018      	ands	r0, r3
   24c50:	2804      	cmp	r0, #4
   24c52:	d005      	beq.n	24c60 <__aeabi_dmul+0x3a4>
   24c54:	1d18      	adds	r0, r3, #4
   24c56:	4298      	cmp	r0, r3
   24c58:	419b      	sbcs	r3, r3
   24c5a:	425b      	negs	r3, r3
   24c5c:	18ed      	adds	r5, r5, r3
   24c5e:	0003      	movs	r3, r0
   24c60:	01e8      	lsls	r0, r5, #7
   24c62:	d504      	bpl.n	24c6e <__aeabi_dmul+0x3b2>
   24c64:	4a4f      	ldr	r2, [pc, #316]	; (24da4 <__aeabi_dmul+0x4e8>)
   24c66:	4015      	ands	r5, r2
   24c68:	2280      	movs	r2, #128	; 0x80
   24c6a:	00d2      	lsls	r2, r2, #3
   24c6c:	18b2      	adds	r2, r6, r2
   24c6e:	484e      	ldr	r0, [pc, #312]	; (24da8 <__aeabi_dmul+0x4ec>)
   24c70:	4282      	cmp	r2, r0
   24c72:	dd00      	ble.n	24c76 <__aeabi_dmul+0x3ba>
   24c74:	e6e7      	b.n	24a46 <__aeabi_dmul+0x18a>
   24c76:	2401      	movs	r4, #1
   24c78:	08db      	lsrs	r3, r3, #3
   24c7a:	0768      	lsls	r0, r5, #29
   24c7c:	4318      	orrs	r0, r3
   24c7e:	026d      	lsls	r5, r5, #9
   24c80:	0553      	lsls	r3, r2, #21
   24c82:	4680      	mov	r8, r0
   24c84:	0b2d      	lsrs	r5, r5, #12
   24c86:	0d5b      	lsrs	r3, r3, #21
   24c88:	400c      	ands	r4, r1
   24c8a:	e67d      	b.n	24988 <__aeabi_dmul+0xcc>
   24c8c:	2280      	movs	r2, #128	; 0x80
   24c8e:	4659      	mov	r1, fp
   24c90:	0312      	lsls	r2, r2, #12
   24c92:	4211      	tst	r1, r2
   24c94:	d008      	beq.n	24ca8 <__aeabi_dmul+0x3ec>
   24c96:	4215      	tst	r5, r2
   24c98:	d106      	bne.n	24ca8 <__aeabi_dmul+0x3ec>
   24c9a:	4315      	orrs	r5, r2
   24c9c:	032d      	lsls	r5, r5, #12
   24c9e:	4698      	mov	r8, r3
   24ca0:	0b2d      	lsrs	r5, r5, #12
   24ca2:	464c      	mov	r4, r9
   24ca4:	4b41      	ldr	r3, [pc, #260]	; (24dac <__aeabi_dmul+0x4f0>)
   24ca6:	e66f      	b.n	24988 <__aeabi_dmul+0xcc>
   24ca8:	465d      	mov	r5, fp
   24caa:	4315      	orrs	r5, r2
   24cac:	032d      	lsls	r5, r5, #12
   24cae:	0b2d      	lsrs	r5, r5, #12
   24cb0:	4b3e      	ldr	r3, [pc, #248]	; (24dac <__aeabi_dmul+0x4f0>)
   24cb2:	e669      	b.n	24988 <__aeabi_dmul+0xcc>
   24cb4:	0003      	movs	r3, r0
   24cb6:	4655      	mov	r5, sl
   24cb8:	3b28      	subs	r3, #40	; 0x28
   24cba:	409d      	lsls	r5, r3
   24cbc:	2300      	movs	r3, #0
   24cbe:	e6bc      	b.n	24a3a <__aeabi_dmul+0x17e>
   24cc0:	4650      	mov	r0, sl
   24cc2:	f000 fc79 	bl	255b8 <__clzsi2>
   24cc6:	3020      	adds	r0, #32
   24cc8:	e6a8      	b.n	24a1c <__aeabi_dmul+0x160>
   24cca:	0003      	movs	r3, r0
   24ccc:	3b28      	subs	r3, #40	; 0x28
   24cce:	409f      	lsls	r7, r3
   24cd0:	2300      	movs	r3, #0
   24cd2:	46bb      	mov	fp, r7
   24cd4:	4698      	mov	r8, r3
   24cd6:	e689      	b.n	249ec <__aeabi_dmul+0x130>
   24cd8:	f000 fc6e 	bl	255b8 <__clzsi2>
   24cdc:	3020      	adds	r0, #32
   24cde:	e673      	b.n	249c8 <__aeabi_dmul+0x10c>
   24ce0:	2401      	movs	r4, #1
   24ce2:	1aa6      	subs	r6, r4, r2
   24ce4:	2e38      	cmp	r6, #56	; 0x38
   24ce6:	dd07      	ble.n	24cf8 <__aeabi_dmul+0x43c>
   24ce8:	2200      	movs	r2, #0
   24cea:	400c      	ands	r4, r1
   24cec:	2300      	movs	r3, #0
   24cee:	2500      	movs	r5, #0
   24cf0:	4690      	mov	r8, r2
   24cf2:	e649      	b.n	24988 <__aeabi_dmul+0xcc>
   24cf4:	9e02      	ldr	r6, [sp, #8]
   24cf6:	e7a3      	b.n	24c40 <__aeabi_dmul+0x384>
   24cf8:	2e1f      	cmp	r6, #31
   24cfa:	dc20      	bgt.n	24d3e <__aeabi_dmul+0x482>
   24cfc:	2220      	movs	r2, #32
   24cfe:	002c      	movs	r4, r5
   24d00:	0018      	movs	r0, r3
   24d02:	1b92      	subs	r2, r2, r6
   24d04:	40f0      	lsrs	r0, r6
   24d06:	4094      	lsls	r4, r2
   24d08:	4093      	lsls	r3, r2
   24d0a:	4304      	orrs	r4, r0
   24d0c:	1e58      	subs	r0, r3, #1
   24d0e:	4183      	sbcs	r3, r0
   24d10:	431c      	orrs	r4, r3
   24d12:	40f5      	lsrs	r5, r6
   24d14:	0763      	lsls	r3, r4, #29
   24d16:	d009      	beq.n	24d2c <__aeabi_dmul+0x470>
   24d18:	230f      	movs	r3, #15
   24d1a:	4023      	ands	r3, r4
   24d1c:	2b04      	cmp	r3, #4
   24d1e:	d005      	beq.n	24d2c <__aeabi_dmul+0x470>
   24d20:	0023      	movs	r3, r4
   24d22:	1d1c      	adds	r4, r3, #4
   24d24:	429c      	cmp	r4, r3
   24d26:	4192      	sbcs	r2, r2
   24d28:	4252      	negs	r2, r2
   24d2a:	18ad      	adds	r5, r5, r2
   24d2c:	022b      	lsls	r3, r5, #8
   24d2e:	d51f      	bpl.n	24d70 <__aeabi_dmul+0x4b4>
   24d30:	2401      	movs	r4, #1
   24d32:	2200      	movs	r2, #0
   24d34:	400c      	ands	r4, r1
   24d36:	2301      	movs	r3, #1
   24d38:	2500      	movs	r5, #0
   24d3a:	4690      	mov	r8, r2
   24d3c:	e624      	b.n	24988 <__aeabi_dmul+0xcc>
   24d3e:	201f      	movs	r0, #31
   24d40:	002c      	movs	r4, r5
   24d42:	4240      	negs	r0, r0
   24d44:	1a82      	subs	r2, r0, r2
   24d46:	40d4      	lsrs	r4, r2
   24d48:	2e20      	cmp	r6, #32
   24d4a:	d01c      	beq.n	24d86 <__aeabi_dmul+0x4ca>
   24d4c:	2240      	movs	r2, #64	; 0x40
   24d4e:	1b96      	subs	r6, r2, r6
   24d50:	40b5      	lsls	r5, r6
   24d52:	432b      	orrs	r3, r5
   24d54:	1e58      	subs	r0, r3, #1
   24d56:	4183      	sbcs	r3, r0
   24d58:	2007      	movs	r0, #7
   24d5a:	4323      	orrs	r3, r4
   24d5c:	4018      	ands	r0, r3
   24d5e:	2500      	movs	r5, #0
   24d60:	2800      	cmp	r0, #0
   24d62:	d009      	beq.n	24d78 <__aeabi_dmul+0x4bc>
   24d64:	220f      	movs	r2, #15
   24d66:	2500      	movs	r5, #0
   24d68:	401a      	ands	r2, r3
   24d6a:	001c      	movs	r4, r3
   24d6c:	2a04      	cmp	r2, #4
   24d6e:	d1d8      	bne.n	24d22 <__aeabi_dmul+0x466>
   24d70:	0023      	movs	r3, r4
   24d72:	0768      	lsls	r0, r5, #29
   24d74:	026d      	lsls	r5, r5, #9
   24d76:	0b2d      	lsrs	r5, r5, #12
   24d78:	2401      	movs	r4, #1
   24d7a:	08db      	lsrs	r3, r3, #3
   24d7c:	4303      	orrs	r3, r0
   24d7e:	4698      	mov	r8, r3
   24d80:	400c      	ands	r4, r1
   24d82:	2300      	movs	r3, #0
   24d84:	e600      	b.n	24988 <__aeabi_dmul+0xcc>
   24d86:	2500      	movs	r5, #0
   24d88:	e7e3      	b.n	24d52 <__aeabi_dmul+0x496>
   24d8a:	2280      	movs	r2, #128	; 0x80
   24d8c:	2401      	movs	r4, #1
   24d8e:	0312      	lsls	r2, r2, #12
   24d90:	4315      	orrs	r5, r2
   24d92:	032d      	lsls	r5, r5, #12
   24d94:	4698      	mov	r8, r3
   24d96:	0b2d      	lsrs	r5, r5, #12
   24d98:	400c      	ands	r4, r1
   24d9a:	4b04      	ldr	r3, [pc, #16]	; (24dac <__aeabi_dmul+0x4f0>)
   24d9c:	e5f4      	b.n	24988 <__aeabi_dmul+0xcc>
   24d9e:	46c0      	nop			; (mov r8, r8)
   24da0:	000003ff 	.word	0x000003ff
   24da4:	feffffff 	.word	0xfeffffff
   24da8:	000007fe 	.word	0x000007fe
   24dac:	000007ff 	.word	0x000007ff

00024db0 <__aeabi_dsub>:
   24db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   24db2:	4657      	mov	r7, sl
   24db4:	464e      	mov	r6, r9
   24db6:	4645      	mov	r5, r8
   24db8:	b4e0      	push	{r5, r6, r7}
   24dba:	000e      	movs	r6, r1
   24dbc:	0011      	movs	r1, r2
   24dbe:	0ff2      	lsrs	r2, r6, #31
   24dc0:	4692      	mov	sl, r2
   24dc2:	00c5      	lsls	r5, r0, #3
   24dc4:	0f42      	lsrs	r2, r0, #29
   24dc6:	0318      	lsls	r0, r3, #12
   24dc8:	0337      	lsls	r7, r6, #12
   24dca:	0074      	lsls	r4, r6, #1
   24dcc:	0a40      	lsrs	r0, r0, #9
   24dce:	0f4e      	lsrs	r6, r1, #29
   24dd0:	0a7f      	lsrs	r7, r7, #9
   24dd2:	4330      	orrs	r0, r6
   24dd4:	4ecf      	ldr	r6, [pc, #828]	; (25114 <__aeabi_dsub+0x364>)
   24dd6:	4317      	orrs	r7, r2
   24dd8:	005a      	lsls	r2, r3, #1
   24dda:	0d64      	lsrs	r4, r4, #21
   24ddc:	0d52      	lsrs	r2, r2, #21
   24dde:	0fdb      	lsrs	r3, r3, #31
   24de0:	00c9      	lsls	r1, r1, #3
   24de2:	42b2      	cmp	r2, r6
   24de4:	d100      	bne.n	24de8 <__aeabi_dsub+0x38>
   24de6:	e0e5      	b.n	24fb4 <__aeabi_dsub+0x204>
   24de8:	2601      	movs	r6, #1
   24dea:	4073      	eors	r3, r6
   24dec:	1aa6      	subs	r6, r4, r2
   24dee:	46b4      	mov	ip, r6
   24df0:	4553      	cmp	r3, sl
   24df2:	d100      	bne.n	24df6 <__aeabi_dsub+0x46>
   24df4:	e0af      	b.n	24f56 <__aeabi_dsub+0x1a6>
   24df6:	2e00      	cmp	r6, #0
   24df8:	dc00      	bgt.n	24dfc <__aeabi_dsub+0x4c>
   24dfa:	e10d      	b.n	25018 <__aeabi_dsub+0x268>
   24dfc:	2a00      	cmp	r2, #0
   24dfe:	d13a      	bne.n	24e76 <__aeabi_dsub+0xc6>
   24e00:	0003      	movs	r3, r0
   24e02:	430b      	orrs	r3, r1
   24e04:	d000      	beq.n	24e08 <__aeabi_dsub+0x58>
   24e06:	e0e4      	b.n	24fd2 <__aeabi_dsub+0x222>
   24e08:	076b      	lsls	r3, r5, #29
   24e0a:	d009      	beq.n	24e20 <__aeabi_dsub+0x70>
   24e0c:	230f      	movs	r3, #15
   24e0e:	402b      	ands	r3, r5
   24e10:	2b04      	cmp	r3, #4
   24e12:	d005      	beq.n	24e20 <__aeabi_dsub+0x70>
   24e14:	1d2b      	adds	r3, r5, #4
   24e16:	42ab      	cmp	r3, r5
   24e18:	41ad      	sbcs	r5, r5
   24e1a:	426d      	negs	r5, r5
   24e1c:	197f      	adds	r7, r7, r5
   24e1e:	001d      	movs	r5, r3
   24e20:	023b      	lsls	r3, r7, #8
   24e22:	d400      	bmi.n	24e26 <__aeabi_dsub+0x76>
   24e24:	e088      	b.n	24f38 <__aeabi_dsub+0x188>
   24e26:	4bbb      	ldr	r3, [pc, #748]	; (25114 <__aeabi_dsub+0x364>)
   24e28:	3401      	adds	r4, #1
   24e2a:	429c      	cmp	r4, r3
   24e2c:	d100      	bne.n	24e30 <__aeabi_dsub+0x80>
   24e2e:	e110      	b.n	25052 <__aeabi_dsub+0x2a2>
   24e30:	003a      	movs	r2, r7
   24e32:	4bb9      	ldr	r3, [pc, #740]	; (25118 <__aeabi_dsub+0x368>)
   24e34:	4651      	mov	r1, sl
   24e36:	401a      	ands	r2, r3
   24e38:	2301      	movs	r3, #1
   24e3a:	0750      	lsls	r0, r2, #29
   24e3c:	08ed      	lsrs	r5, r5, #3
   24e3e:	0252      	lsls	r2, r2, #9
   24e40:	0564      	lsls	r4, r4, #21
   24e42:	4305      	orrs	r5, r0
   24e44:	0b12      	lsrs	r2, r2, #12
   24e46:	0d64      	lsrs	r4, r4, #21
   24e48:	400b      	ands	r3, r1
   24e4a:	2100      	movs	r1, #0
   24e4c:	0028      	movs	r0, r5
   24e4e:	0312      	lsls	r2, r2, #12
   24e50:	0d0d      	lsrs	r5, r1, #20
   24e52:	0b12      	lsrs	r2, r2, #12
   24e54:	0564      	lsls	r4, r4, #21
   24e56:	052d      	lsls	r5, r5, #20
   24e58:	4315      	orrs	r5, r2
   24e5a:	0862      	lsrs	r2, r4, #1
   24e5c:	4caf      	ldr	r4, [pc, #700]	; (2511c <__aeabi_dsub+0x36c>)
   24e5e:	07db      	lsls	r3, r3, #31
   24e60:	402c      	ands	r4, r5
   24e62:	4314      	orrs	r4, r2
   24e64:	0064      	lsls	r4, r4, #1
   24e66:	0864      	lsrs	r4, r4, #1
   24e68:	431c      	orrs	r4, r3
   24e6a:	0021      	movs	r1, r4
   24e6c:	bc1c      	pop	{r2, r3, r4}
   24e6e:	4690      	mov	r8, r2
   24e70:	4699      	mov	r9, r3
   24e72:	46a2      	mov	sl, r4
   24e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24e76:	4ba7      	ldr	r3, [pc, #668]	; (25114 <__aeabi_dsub+0x364>)
   24e78:	429c      	cmp	r4, r3
   24e7a:	d0c5      	beq.n	24e08 <__aeabi_dsub+0x58>
   24e7c:	2380      	movs	r3, #128	; 0x80
   24e7e:	041b      	lsls	r3, r3, #16
   24e80:	4318      	orrs	r0, r3
   24e82:	4663      	mov	r3, ip
   24e84:	2b38      	cmp	r3, #56	; 0x38
   24e86:	dd00      	ble.n	24e8a <__aeabi_dsub+0xda>
   24e88:	e0fd      	b.n	25086 <__aeabi_dsub+0x2d6>
   24e8a:	2b1f      	cmp	r3, #31
   24e8c:	dd00      	ble.n	24e90 <__aeabi_dsub+0xe0>
   24e8e:	e130      	b.n	250f2 <__aeabi_dsub+0x342>
   24e90:	4662      	mov	r2, ip
   24e92:	2320      	movs	r3, #32
   24e94:	1a9b      	subs	r3, r3, r2
   24e96:	0002      	movs	r2, r0
   24e98:	409a      	lsls	r2, r3
   24e9a:	4666      	mov	r6, ip
   24e9c:	4690      	mov	r8, r2
   24e9e:	000a      	movs	r2, r1
   24ea0:	4099      	lsls	r1, r3
   24ea2:	40f2      	lsrs	r2, r6
   24ea4:	4646      	mov	r6, r8
   24ea6:	1e4b      	subs	r3, r1, #1
   24ea8:	4199      	sbcs	r1, r3
   24eaa:	4332      	orrs	r2, r6
   24eac:	4311      	orrs	r1, r2
   24eae:	4663      	mov	r3, ip
   24eb0:	0002      	movs	r2, r0
   24eb2:	40da      	lsrs	r2, r3
   24eb4:	1a69      	subs	r1, r5, r1
   24eb6:	428d      	cmp	r5, r1
   24eb8:	419b      	sbcs	r3, r3
   24eba:	000d      	movs	r5, r1
   24ebc:	1aba      	subs	r2, r7, r2
   24ebe:	425b      	negs	r3, r3
   24ec0:	1ad7      	subs	r7, r2, r3
   24ec2:	023b      	lsls	r3, r7, #8
   24ec4:	d535      	bpl.n	24f32 <__aeabi_dsub+0x182>
   24ec6:	027a      	lsls	r2, r7, #9
   24ec8:	0a53      	lsrs	r3, r2, #9
   24eca:	4698      	mov	r8, r3
   24ecc:	4643      	mov	r3, r8
   24ece:	2b00      	cmp	r3, #0
   24ed0:	d100      	bne.n	24ed4 <__aeabi_dsub+0x124>
   24ed2:	e0c4      	b.n	2505e <__aeabi_dsub+0x2ae>
   24ed4:	4640      	mov	r0, r8
   24ed6:	f000 fb6f 	bl	255b8 <__clzsi2>
   24eda:	0003      	movs	r3, r0
   24edc:	3b08      	subs	r3, #8
   24ede:	2b1f      	cmp	r3, #31
   24ee0:	dd00      	ble.n	24ee4 <__aeabi_dsub+0x134>
   24ee2:	e0c5      	b.n	25070 <__aeabi_dsub+0x2c0>
   24ee4:	2220      	movs	r2, #32
   24ee6:	0029      	movs	r1, r5
   24ee8:	1ad2      	subs	r2, r2, r3
   24eea:	4647      	mov	r7, r8
   24eec:	40d1      	lsrs	r1, r2
   24eee:	409f      	lsls	r7, r3
   24ef0:	000a      	movs	r2, r1
   24ef2:	409d      	lsls	r5, r3
   24ef4:	433a      	orrs	r2, r7
   24ef6:	429c      	cmp	r4, r3
   24ef8:	dd00      	ble.n	24efc <__aeabi_dsub+0x14c>
   24efa:	e0c0      	b.n	2507e <__aeabi_dsub+0x2ce>
   24efc:	1b1c      	subs	r4, r3, r4
   24efe:	1c63      	adds	r3, r4, #1
   24f00:	2b1f      	cmp	r3, #31
   24f02:	dd00      	ble.n	24f06 <__aeabi_dsub+0x156>
   24f04:	e0e4      	b.n	250d0 <__aeabi_dsub+0x320>
   24f06:	2120      	movs	r1, #32
   24f08:	0014      	movs	r4, r2
   24f0a:	0028      	movs	r0, r5
   24f0c:	1ac9      	subs	r1, r1, r3
   24f0e:	40d8      	lsrs	r0, r3
   24f10:	408c      	lsls	r4, r1
   24f12:	408d      	lsls	r5, r1
   24f14:	4304      	orrs	r4, r0
   24f16:	40da      	lsrs	r2, r3
   24f18:	1e68      	subs	r0, r5, #1
   24f1a:	4185      	sbcs	r5, r0
   24f1c:	0017      	movs	r7, r2
   24f1e:	4325      	orrs	r5, r4
   24f20:	2400      	movs	r4, #0
   24f22:	e771      	b.n	24e08 <__aeabi_dsub+0x58>
   24f24:	4642      	mov	r2, r8
   24f26:	4663      	mov	r3, ip
   24f28:	431a      	orrs	r2, r3
   24f2a:	d100      	bne.n	24f2e <__aeabi_dsub+0x17e>
   24f2c:	e24c      	b.n	253c8 <__aeabi_dsub+0x618>
   24f2e:	4667      	mov	r7, ip
   24f30:	4645      	mov	r5, r8
   24f32:	076b      	lsls	r3, r5, #29
   24f34:	d000      	beq.n	24f38 <__aeabi_dsub+0x188>
   24f36:	e769      	b.n	24e0c <__aeabi_dsub+0x5c>
   24f38:	2301      	movs	r3, #1
   24f3a:	4651      	mov	r1, sl
   24f3c:	0778      	lsls	r0, r7, #29
   24f3e:	08ed      	lsrs	r5, r5, #3
   24f40:	08fa      	lsrs	r2, r7, #3
   24f42:	400b      	ands	r3, r1
   24f44:	4305      	orrs	r5, r0
   24f46:	4973      	ldr	r1, [pc, #460]	; (25114 <__aeabi_dsub+0x364>)
   24f48:	428c      	cmp	r4, r1
   24f4a:	d038      	beq.n	24fbe <__aeabi_dsub+0x20e>
   24f4c:	0312      	lsls	r2, r2, #12
   24f4e:	0564      	lsls	r4, r4, #21
   24f50:	0b12      	lsrs	r2, r2, #12
   24f52:	0d64      	lsrs	r4, r4, #21
   24f54:	e779      	b.n	24e4a <__aeabi_dsub+0x9a>
   24f56:	2e00      	cmp	r6, #0
   24f58:	dc00      	bgt.n	24f5c <__aeabi_dsub+0x1ac>
   24f5a:	e09a      	b.n	25092 <__aeabi_dsub+0x2e2>
   24f5c:	2a00      	cmp	r2, #0
   24f5e:	d047      	beq.n	24ff0 <__aeabi_dsub+0x240>
   24f60:	4a6c      	ldr	r2, [pc, #432]	; (25114 <__aeabi_dsub+0x364>)
   24f62:	4294      	cmp	r4, r2
   24f64:	d100      	bne.n	24f68 <__aeabi_dsub+0x1b8>
   24f66:	e74f      	b.n	24e08 <__aeabi_dsub+0x58>
   24f68:	2280      	movs	r2, #128	; 0x80
   24f6a:	0412      	lsls	r2, r2, #16
   24f6c:	4310      	orrs	r0, r2
   24f6e:	4662      	mov	r2, ip
   24f70:	2a38      	cmp	r2, #56	; 0x38
   24f72:	dc00      	bgt.n	24f76 <__aeabi_dsub+0x1c6>
   24f74:	e108      	b.n	25188 <__aeabi_dsub+0x3d8>
   24f76:	4301      	orrs	r1, r0
   24f78:	1e48      	subs	r0, r1, #1
   24f7a:	4181      	sbcs	r1, r0
   24f7c:	2200      	movs	r2, #0
   24f7e:	b2c9      	uxtb	r1, r1
   24f80:	1949      	adds	r1, r1, r5
   24f82:	19d2      	adds	r2, r2, r7
   24f84:	42a9      	cmp	r1, r5
   24f86:	41bf      	sbcs	r7, r7
   24f88:	000d      	movs	r5, r1
   24f8a:	427f      	negs	r7, r7
   24f8c:	18bf      	adds	r7, r7, r2
   24f8e:	023a      	lsls	r2, r7, #8
   24f90:	d400      	bmi.n	24f94 <__aeabi_dsub+0x1e4>
   24f92:	e142      	b.n	2521a <__aeabi_dsub+0x46a>
   24f94:	4a5f      	ldr	r2, [pc, #380]	; (25114 <__aeabi_dsub+0x364>)
   24f96:	3401      	adds	r4, #1
   24f98:	4294      	cmp	r4, r2
   24f9a:	d100      	bne.n	24f9e <__aeabi_dsub+0x1ee>
   24f9c:	e14e      	b.n	2523c <__aeabi_dsub+0x48c>
   24f9e:	2001      	movs	r0, #1
   24fa0:	4a5d      	ldr	r2, [pc, #372]	; (25118 <__aeabi_dsub+0x368>)
   24fa2:	0869      	lsrs	r1, r5, #1
   24fa4:	403a      	ands	r2, r7
   24fa6:	4028      	ands	r0, r5
   24fa8:	4308      	orrs	r0, r1
   24faa:	07d5      	lsls	r5, r2, #31
   24fac:	4305      	orrs	r5, r0
   24fae:	0857      	lsrs	r7, r2, #1
   24fb0:	469a      	mov	sl, r3
   24fb2:	e729      	b.n	24e08 <__aeabi_dsub+0x58>
   24fb4:	0006      	movs	r6, r0
   24fb6:	430e      	orrs	r6, r1
   24fb8:	d000      	beq.n	24fbc <__aeabi_dsub+0x20c>
   24fba:	e717      	b.n	24dec <__aeabi_dsub+0x3c>
   24fbc:	e714      	b.n	24de8 <__aeabi_dsub+0x38>
   24fbe:	0029      	movs	r1, r5
   24fc0:	4311      	orrs	r1, r2
   24fc2:	d100      	bne.n	24fc6 <__aeabi_dsub+0x216>
   24fc4:	e1f9      	b.n	253ba <__aeabi_dsub+0x60a>
   24fc6:	2180      	movs	r1, #128	; 0x80
   24fc8:	0309      	lsls	r1, r1, #12
   24fca:	430a      	orrs	r2, r1
   24fcc:	0312      	lsls	r2, r2, #12
   24fce:	0b12      	lsrs	r2, r2, #12
   24fd0:	e73b      	b.n	24e4a <__aeabi_dsub+0x9a>
   24fd2:	2301      	movs	r3, #1
   24fd4:	425b      	negs	r3, r3
   24fd6:	4698      	mov	r8, r3
   24fd8:	44c4      	add	ip, r8
   24fda:	4663      	mov	r3, ip
   24fdc:	2b00      	cmp	r3, #0
   24fde:	d172      	bne.n	250c6 <__aeabi_dsub+0x316>
   24fe0:	1a69      	subs	r1, r5, r1
   24fe2:	428d      	cmp	r5, r1
   24fe4:	419b      	sbcs	r3, r3
   24fe6:	1a3f      	subs	r7, r7, r0
   24fe8:	425b      	negs	r3, r3
   24fea:	1aff      	subs	r7, r7, r3
   24fec:	000d      	movs	r5, r1
   24fee:	e768      	b.n	24ec2 <__aeabi_dsub+0x112>
   24ff0:	0002      	movs	r2, r0
   24ff2:	430a      	orrs	r2, r1
   24ff4:	d100      	bne.n	24ff8 <__aeabi_dsub+0x248>
   24ff6:	e707      	b.n	24e08 <__aeabi_dsub+0x58>
   24ff8:	2201      	movs	r2, #1
   24ffa:	4252      	negs	r2, r2
   24ffc:	4690      	mov	r8, r2
   24ffe:	44c4      	add	ip, r8
   25000:	4662      	mov	r2, ip
   25002:	2a00      	cmp	r2, #0
   25004:	d000      	beq.n	25008 <__aeabi_dsub+0x258>
   25006:	e0e6      	b.n	251d6 <__aeabi_dsub+0x426>
   25008:	1869      	adds	r1, r5, r1
   2500a:	42a9      	cmp	r1, r5
   2500c:	41b6      	sbcs	r6, r6
   2500e:	183f      	adds	r7, r7, r0
   25010:	4276      	negs	r6, r6
   25012:	19f7      	adds	r7, r6, r7
   25014:	000d      	movs	r5, r1
   25016:	e7ba      	b.n	24f8e <__aeabi_dsub+0x1de>
   25018:	2e00      	cmp	r6, #0
   2501a:	d000      	beq.n	2501e <__aeabi_dsub+0x26e>
   2501c:	e080      	b.n	25120 <__aeabi_dsub+0x370>
   2501e:	1c62      	adds	r2, r4, #1
   25020:	0552      	lsls	r2, r2, #21
   25022:	0d52      	lsrs	r2, r2, #21
   25024:	2a01      	cmp	r2, #1
   25026:	dc00      	bgt.n	2502a <__aeabi_dsub+0x27a>
   25028:	e0f9      	b.n	2521e <__aeabi_dsub+0x46e>
   2502a:	1a6a      	subs	r2, r5, r1
   2502c:	4691      	mov	r9, r2
   2502e:	454d      	cmp	r5, r9
   25030:	41b6      	sbcs	r6, r6
   25032:	1a3a      	subs	r2, r7, r0
   25034:	4276      	negs	r6, r6
   25036:	1b92      	subs	r2, r2, r6
   25038:	4690      	mov	r8, r2
   2503a:	0212      	lsls	r2, r2, #8
   2503c:	d400      	bmi.n	25040 <__aeabi_dsub+0x290>
   2503e:	e099      	b.n	25174 <__aeabi_dsub+0x3c4>
   25040:	1b4d      	subs	r5, r1, r5
   25042:	42a9      	cmp	r1, r5
   25044:	4189      	sbcs	r1, r1
   25046:	1bc7      	subs	r7, r0, r7
   25048:	4249      	negs	r1, r1
   2504a:	1a7a      	subs	r2, r7, r1
   2504c:	4690      	mov	r8, r2
   2504e:	469a      	mov	sl, r3
   25050:	e73c      	b.n	24ecc <__aeabi_dsub+0x11c>
   25052:	4652      	mov	r2, sl
   25054:	2301      	movs	r3, #1
   25056:	2500      	movs	r5, #0
   25058:	4013      	ands	r3, r2
   2505a:	2200      	movs	r2, #0
   2505c:	e6f5      	b.n	24e4a <__aeabi_dsub+0x9a>
   2505e:	0028      	movs	r0, r5
   25060:	f000 faaa 	bl	255b8 <__clzsi2>
   25064:	3020      	adds	r0, #32
   25066:	0003      	movs	r3, r0
   25068:	3b08      	subs	r3, #8
   2506a:	2b1f      	cmp	r3, #31
   2506c:	dc00      	bgt.n	25070 <__aeabi_dsub+0x2c0>
   2506e:	e739      	b.n	24ee4 <__aeabi_dsub+0x134>
   25070:	002a      	movs	r2, r5
   25072:	3828      	subs	r0, #40	; 0x28
   25074:	4082      	lsls	r2, r0
   25076:	2500      	movs	r5, #0
   25078:	429c      	cmp	r4, r3
   2507a:	dc00      	bgt.n	2507e <__aeabi_dsub+0x2ce>
   2507c:	e73e      	b.n	24efc <__aeabi_dsub+0x14c>
   2507e:	4f26      	ldr	r7, [pc, #152]	; (25118 <__aeabi_dsub+0x368>)
   25080:	1ae4      	subs	r4, r4, r3
   25082:	4017      	ands	r7, r2
   25084:	e6c0      	b.n	24e08 <__aeabi_dsub+0x58>
   25086:	4301      	orrs	r1, r0
   25088:	1e48      	subs	r0, r1, #1
   2508a:	4181      	sbcs	r1, r0
   2508c:	2200      	movs	r2, #0
   2508e:	b2c9      	uxtb	r1, r1
   25090:	e710      	b.n	24eb4 <__aeabi_dsub+0x104>
   25092:	2e00      	cmp	r6, #0
   25094:	d000      	beq.n	25098 <__aeabi_dsub+0x2e8>
   25096:	e0f1      	b.n	2527c <__aeabi_dsub+0x4cc>
   25098:	1c62      	adds	r2, r4, #1
   2509a:	4694      	mov	ip, r2
   2509c:	0552      	lsls	r2, r2, #21
   2509e:	0d52      	lsrs	r2, r2, #21
   250a0:	2a01      	cmp	r2, #1
   250a2:	dc00      	bgt.n	250a6 <__aeabi_dsub+0x2f6>
   250a4:	e0a0      	b.n	251e8 <__aeabi_dsub+0x438>
   250a6:	4a1b      	ldr	r2, [pc, #108]	; (25114 <__aeabi_dsub+0x364>)
   250a8:	4594      	cmp	ip, r2
   250aa:	d100      	bne.n	250ae <__aeabi_dsub+0x2fe>
   250ac:	e0c5      	b.n	2523a <__aeabi_dsub+0x48a>
   250ae:	1869      	adds	r1, r5, r1
   250b0:	42a9      	cmp	r1, r5
   250b2:	4192      	sbcs	r2, r2
   250b4:	183f      	adds	r7, r7, r0
   250b6:	4252      	negs	r2, r2
   250b8:	19d2      	adds	r2, r2, r7
   250ba:	0849      	lsrs	r1, r1, #1
   250bc:	07d5      	lsls	r5, r2, #31
   250be:	430d      	orrs	r5, r1
   250c0:	0857      	lsrs	r7, r2, #1
   250c2:	4664      	mov	r4, ip
   250c4:	e6a0      	b.n	24e08 <__aeabi_dsub+0x58>
   250c6:	4b13      	ldr	r3, [pc, #76]	; (25114 <__aeabi_dsub+0x364>)
   250c8:	429c      	cmp	r4, r3
   250ca:	d000      	beq.n	250ce <__aeabi_dsub+0x31e>
   250cc:	e6d9      	b.n	24e82 <__aeabi_dsub+0xd2>
   250ce:	e69b      	b.n	24e08 <__aeabi_dsub+0x58>
   250d0:	0011      	movs	r1, r2
   250d2:	3c1f      	subs	r4, #31
   250d4:	40e1      	lsrs	r1, r4
   250d6:	000c      	movs	r4, r1
   250d8:	2b20      	cmp	r3, #32
   250da:	d100      	bne.n	250de <__aeabi_dsub+0x32e>
   250dc:	e080      	b.n	251e0 <__aeabi_dsub+0x430>
   250de:	2140      	movs	r1, #64	; 0x40
   250e0:	1acb      	subs	r3, r1, r3
   250e2:	409a      	lsls	r2, r3
   250e4:	4315      	orrs	r5, r2
   250e6:	1e6a      	subs	r2, r5, #1
   250e8:	4195      	sbcs	r5, r2
   250ea:	2700      	movs	r7, #0
   250ec:	4325      	orrs	r5, r4
   250ee:	2400      	movs	r4, #0
   250f0:	e71f      	b.n	24f32 <__aeabi_dsub+0x182>
   250f2:	4663      	mov	r3, ip
   250f4:	0002      	movs	r2, r0
   250f6:	3b20      	subs	r3, #32
   250f8:	40da      	lsrs	r2, r3
   250fa:	4663      	mov	r3, ip
   250fc:	2b20      	cmp	r3, #32
   250fe:	d071      	beq.n	251e4 <__aeabi_dsub+0x434>
   25100:	2340      	movs	r3, #64	; 0x40
   25102:	4666      	mov	r6, ip
   25104:	1b9b      	subs	r3, r3, r6
   25106:	4098      	lsls	r0, r3
   25108:	4301      	orrs	r1, r0
   2510a:	1e48      	subs	r0, r1, #1
   2510c:	4181      	sbcs	r1, r0
   2510e:	4311      	orrs	r1, r2
   25110:	2200      	movs	r2, #0
   25112:	e6cf      	b.n	24eb4 <__aeabi_dsub+0x104>
   25114:	000007ff 	.word	0x000007ff
   25118:	ff7fffff 	.word	0xff7fffff
   2511c:	800fffff 	.word	0x800fffff
   25120:	2c00      	cmp	r4, #0
   25122:	d048      	beq.n	251b6 <__aeabi_dsub+0x406>
   25124:	4cca      	ldr	r4, [pc, #808]	; (25450 <__aeabi_dsub+0x6a0>)
   25126:	42a2      	cmp	r2, r4
   25128:	d100      	bne.n	2512c <__aeabi_dsub+0x37c>
   2512a:	e0a2      	b.n	25272 <__aeabi_dsub+0x4c2>
   2512c:	4274      	negs	r4, r6
   2512e:	46a1      	mov	r9, r4
   25130:	2480      	movs	r4, #128	; 0x80
   25132:	0424      	lsls	r4, r4, #16
   25134:	4327      	orrs	r7, r4
   25136:	464c      	mov	r4, r9
   25138:	2c38      	cmp	r4, #56	; 0x38
   2513a:	dd00      	ble.n	2513e <__aeabi_dsub+0x38e>
   2513c:	e0db      	b.n	252f6 <__aeabi_dsub+0x546>
   2513e:	2c1f      	cmp	r4, #31
   25140:	dd00      	ble.n	25144 <__aeabi_dsub+0x394>
   25142:	e144      	b.n	253ce <__aeabi_dsub+0x61e>
   25144:	464e      	mov	r6, r9
   25146:	2420      	movs	r4, #32
   25148:	1ba4      	subs	r4, r4, r6
   2514a:	003e      	movs	r6, r7
   2514c:	40a6      	lsls	r6, r4
   2514e:	46a2      	mov	sl, r4
   25150:	46b0      	mov	r8, r6
   25152:	464c      	mov	r4, r9
   25154:	002e      	movs	r6, r5
   25156:	40e6      	lsrs	r6, r4
   25158:	46b4      	mov	ip, r6
   2515a:	4646      	mov	r6, r8
   2515c:	4664      	mov	r4, ip
   2515e:	4326      	orrs	r6, r4
   25160:	4654      	mov	r4, sl
   25162:	40a5      	lsls	r5, r4
   25164:	1e6c      	subs	r4, r5, #1
   25166:	41a5      	sbcs	r5, r4
   25168:	0034      	movs	r4, r6
   2516a:	432c      	orrs	r4, r5
   2516c:	464d      	mov	r5, r9
   2516e:	40ef      	lsrs	r7, r5
   25170:	1b0d      	subs	r5, r1, r4
   25172:	e028      	b.n	251c6 <__aeabi_dsub+0x416>
   25174:	464a      	mov	r2, r9
   25176:	4643      	mov	r3, r8
   25178:	464d      	mov	r5, r9
   2517a:	431a      	orrs	r2, r3
   2517c:	d000      	beq.n	25180 <__aeabi_dsub+0x3d0>
   2517e:	e6a5      	b.n	24ecc <__aeabi_dsub+0x11c>
   25180:	2300      	movs	r3, #0
   25182:	2400      	movs	r4, #0
   25184:	2500      	movs	r5, #0
   25186:	e6de      	b.n	24f46 <__aeabi_dsub+0x196>
   25188:	2a1f      	cmp	r2, #31
   2518a:	dc5a      	bgt.n	25242 <__aeabi_dsub+0x492>
   2518c:	4666      	mov	r6, ip
   2518e:	2220      	movs	r2, #32
   25190:	1b92      	subs	r2, r2, r6
   25192:	0006      	movs	r6, r0
   25194:	4096      	lsls	r6, r2
   25196:	4691      	mov	r9, r2
   25198:	46b0      	mov	r8, r6
   2519a:	4662      	mov	r2, ip
   2519c:	000e      	movs	r6, r1
   2519e:	40d6      	lsrs	r6, r2
   251a0:	4642      	mov	r2, r8
   251a2:	4316      	orrs	r6, r2
   251a4:	464a      	mov	r2, r9
   251a6:	4091      	lsls	r1, r2
   251a8:	1e4a      	subs	r2, r1, #1
   251aa:	4191      	sbcs	r1, r2
   251ac:	0002      	movs	r2, r0
   251ae:	4660      	mov	r0, ip
   251b0:	4331      	orrs	r1, r6
   251b2:	40c2      	lsrs	r2, r0
   251b4:	e6e4      	b.n	24f80 <__aeabi_dsub+0x1d0>
   251b6:	003c      	movs	r4, r7
   251b8:	432c      	orrs	r4, r5
   251ba:	d05a      	beq.n	25272 <__aeabi_dsub+0x4c2>
   251bc:	43f4      	mvns	r4, r6
   251be:	46a1      	mov	r9, r4
   251c0:	2c00      	cmp	r4, #0
   251c2:	d152      	bne.n	2526a <__aeabi_dsub+0x4ba>
   251c4:	1b4d      	subs	r5, r1, r5
   251c6:	42a9      	cmp	r1, r5
   251c8:	4189      	sbcs	r1, r1
   251ca:	1bc7      	subs	r7, r0, r7
   251cc:	4249      	negs	r1, r1
   251ce:	1a7f      	subs	r7, r7, r1
   251d0:	0014      	movs	r4, r2
   251d2:	469a      	mov	sl, r3
   251d4:	e675      	b.n	24ec2 <__aeabi_dsub+0x112>
   251d6:	4a9e      	ldr	r2, [pc, #632]	; (25450 <__aeabi_dsub+0x6a0>)
   251d8:	4294      	cmp	r4, r2
   251da:	d000      	beq.n	251de <__aeabi_dsub+0x42e>
   251dc:	e6c7      	b.n	24f6e <__aeabi_dsub+0x1be>
   251de:	e613      	b.n	24e08 <__aeabi_dsub+0x58>
   251e0:	2200      	movs	r2, #0
   251e2:	e77f      	b.n	250e4 <__aeabi_dsub+0x334>
   251e4:	2000      	movs	r0, #0
   251e6:	e78f      	b.n	25108 <__aeabi_dsub+0x358>
   251e8:	2c00      	cmp	r4, #0
   251ea:	d000      	beq.n	251ee <__aeabi_dsub+0x43e>
   251ec:	e0c8      	b.n	25380 <__aeabi_dsub+0x5d0>
   251ee:	003b      	movs	r3, r7
   251f0:	432b      	orrs	r3, r5
   251f2:	d100      	bne.n	251f6 <__aeabi_dsub+0x446>
   251f4:	e10f      	b.n	25416 <__aeabi_dsub+0x666>
   251f6:	0003      	movs	r3, r0
   251f8:	430b      	orrs	r3, r1
   251fa:	d100      	bne.n	251fe <__aeabi_dsub+0x44e>
   251fc:	e604      	b.n	24e08 <__aeabi_dsub+0x58>
   251fe:	1869      	adds	r1, r5, r1
   25200:	42a9      	cmp	r1, r5
   25202:	419b      	sbcs	r3, r3
   25204:	183f      	adds	r7, r7, r0
   25206:	425b      	negs	r3, r3
   25208:	19df      	adds	r7, r3, r7
   2520a:	023b      	lsls	r3, r7, #8
   2520c:	d400      	bmi.n	25210 <__aeabi_dsub+0x460>
   2520e:	e11a      	b.n	25446 <__aeabi_dsub+0x696>
   25210:	4b90      	ldr	r3, [pc, #576]	; (25454 <__aeabi_dsub+0x6a4>)
   25212:	000d      	movs	r5, r1
   25214:	401f      	ands	r7, r3
   25216:	4664      	mov	r4, ip
   25218:	e5f6      	b.n	24e08 <__aeabi_dsub+0x58>
   2521a:	469a      	mov	sl, r3
   2521c:	e689      	b.n	24f32 <__aeabi_dsub+0x182>
   2521e:	003a      	movs	r2, r7
   25220:	432a      	orrs	r2, r5
   25222:	2c00      	cmp	r4, #0
   25224:	d15c      	bne.n	252e0 <__aeabi_dsub+0x530>
   25226:	2a00      	cmp	r2, #0
   25228:	d175      	bne.n	25316 <__aeabi_dsub+0x566>
   2522a:	0002      	movs	r2, r0
   2522c:	430a      	orrs	r2, r1
   2522e:	d100      	bne.n	25232 <__aeabi_dsub+0x482>
   25230:	e0ca      	b.n	253c8 <__aeabi_dsub+0x618>
   25232:	0007      	movs	r7, r0
   25234:	000d      	movs	r5, r1
   25236:	469a      	mov	sl, r3
   25238:	e5e6      	b.n	24e08 <__aeabi_dsub+0x58>
   2523a:	4664      	mov	r4, ip
   2523c:	2200      	movs	r2, #0
   2523e:	2500      	movs	r5, #0
   25240:	e681      	b.n	24f46 <__aeabi_dsub+0x196>
   25242:	4662      	mov	r2, ip
   25244:	0006      	movs	r6, r0
   25246:	3a20      	subs	r2, #32
   25248:	40d6      	lsrs	r6, r2
   2524a:	4662      	mov	r2, ip
   2524c:	46b0      	mov	r8, r6
   2524e:	2a20      	cmp	r2, #32
   25250:	d100      	bne.n	25254 <__aeabi_dsub+0x4a4>
   25252:	e0b7      	b.n	253c4 <__aeabi_dsub+0x614>
   25254:	2240      	movs	r2, #64	; 0x40
   25256:	4666      	mov	r6, ip
   25258:	1b92      	subs	r2, r2, r6
   2525a:	4090      	lsls	r0, r2
   2525c:	4301      	orrs	r1, r0
   2525e:	4642      	mov	r2, r8
   25260:	1e48      	subs	r0, r1, #1
   25262:	4181      	sbcs	r1, r0
   25264:	4311      	orrs	r1, r2
   25266:	2200      	movs	r2, #0
   25268:	e68a      	b.n	24f80 <__aeabi_dsub+0x1d0>
   2526a:	4c79      	ldr	r4, [pc, #484]	; (25450 <__aeabi_dsub+0x6a0>)
   2526c:	42a2      	cmp	r2, r4
   2526e:	d000      	beq.n	25272 <__aeabi_dsub+0x4c2>
   25270:	e761      	b.n	25136 <__aeabi_dsub+0x386>
   25272:	0007      	movs	r7, r0
   25274:	000d      	movs	r5, r1
   25276:	0014      	movs	r4, r2
   25278:	469a      	mov	sl, r3
   2527a:	e5c5      	b.n	24e08 <__aeabi_dsub+0x58>
   2527c:	2c00      	cmp	r4, #0
   2527e:	d141      	bne.n	25304 <__aeabi_dsub+0x554>
   25280:	003c      	movs	r4, r7
   25282:	432c      	orrs	r4, r5
   25284:	d078      	beq.n	25378 <__aeabi_dsub+0x5c8>
   25286:	43f4      	mvns	r4, r6
   25288:	46a1      	mov	r9, r4
   2528a:	2c00      	cmp	r4, #0
   2528c:	d020      	beq.n	252d0 <__aeabi_dsub+0x520>
   2528e:	4c70      	ldr	r4, [pc, #448]	; (25450 <__aeabi_dsub+0x6a0>)
   25290:	42a2      	cmp	r2, r4
   25292:	d071      	beq.n	25378 <__aeabi_dsub+0x5c8>
   25294:	464c      	mov	r4, r9
   25296:	2c38      	cmp	r4, #56	; 0x38
   25298:	dd00      	ble.n	2529c <__aeabi_dsub+0x4ec>
   2529a:	e0b2      	b.n	25402 <__aeabi_dsub+0x652>
   2529c:	2c1f      	cmp	r4, #31
   2529e:	dd00      	ble.n	252a2 <__aeabi_dsub+0x4f2>
   252a0:	e0bc      	b.n	2541c <__aeabi_dsub+0x66c>
   252a2:	2620      	movs	r6, #32
   252a4:	1b34      	subs	r4, r6, r4
   252a6:	46a2      	mov	sl, r4
   252a8:	003c      	movs	r4, r7
   252aa:	4656      	mov	r6, sl
   252ac:	40b4      	lsls	r4, r6
   252ae:	464e      	mov	r6, r9
   252b0:	46a0      	mov	r8, r4
   252b2:	002c      	movs	r4, r5
   252b4:	40f4      	lsrs	r4, r6
   252b6:	46a4      	mov	ip, r4
   252b8:	4644      	mov	r4, r8
   252ba:	4666      	mov	r6, ip
   252bc:	4334      	orrs	r4, r6
   252be:	46a4      	mov	ip, r4
   252c0:	4654      	mov	r4, sl
   252c2:	40a5      	lsls	r5, r4
   252c4:	4664      	mov	r4, ip
   252c6:	1e6e      	subs	r6, r5, #1
   252c8:	41b5      	sbcs	r5, r6
   252ca:	4325      	orrs	r5, r4
   252cc:	464c      	mov	r4, r9
   252ce:	40e7      	lsrs	r7, r4
   252d0:	186d      	adds	r5, r5, r1
   252d2:	428d      	cmp	r5, r1
   252d4:	4189      	sbcs	r1, r1
   252d6:	183f      	adds	r7, r7, r0
   252d8:	4249      	negs	r1, r1
   252da:	19cf      	adds	r7, r1, r7
   252dc:	0014      	movs	r4, r2
   252de:	e656      	b.n	24f8e <__aeabi_dsub+0x1de>
   252e0:	2a00      	cmp	r2, #0
   252e2:	d12f      	bne.n	25344 <__aeabi_dsub+0x594>
   252e4:	0002      	movs	r2, r0
   252e6:	430a      	orrs	r2, r1
   252e8:	d100      	bne.n	252ec <__aeabi_dsub+0x53c>
   252ea:	e084      	b.n	253f6 <__aeabi_dsub+0x646>
   252ec:	0007      	movs	r7, r0
   252ee:	000d      	movs	r5, r1
   252f0:	469a      	mov	sl, r3
   252f2:	4c57      	ldr	r4, [pc, #348]	; (25450 <__aeabi_dsub+0x6a0>)
   252f4:	e588      	b.n	24e08 <__aeabi_dsub+0x58>
   252f6:	433d      	orrs	r5, r7
   252f8:	1e6f      	subs	r7, r5, #1
   252fa:	41bd      	sbcs	r5, r7
   252fc:	b2ec      	uxtb	r4, r5
   252fe:	2700      	movs	r7, #0
   25300:	1b0d      	subs	r5, r1, r4
   25302:	e760      	b.n	251c6 <__aeabi_dsub+0x416>
   25304:	4c52      	ldr	r4, [pc, #328]	; (25450 <__aeabi_dsub+0x6a0>)
   25306:	42a2      	cmp	r2, r4
   25308:	d036      	beq.n	25378 <__aeabi_dsub+0x5c8>
   2530a:	4274      	negs	r4, r6
   2530c:	2680      	movs	r6, #128	; 0x80
   2530e:	0436      	lsls	r6, r6, #16
   25310:	46a1      	mov	r9, r4
   25312:	4337      	orrs	r7, r6
   25314:	e7be      	b.n	25294 <__aeabi_dsub+0x4e4>
   25316:	0002      	movs	r2, r0
   25318:	430a      	orrs	r2, r1
   2531a:	d100      	bne.n	2531e <__aeabi_dsub+0x56e>
   2531c:	e574      	b.n	24e08 <__aeabi_dsub+0x58>
   2531e:	1a6a      	subs	r2, r5, r1
   25320:	4690      	mov	r8, r2
   25322:	4545      	cmp	r5, r8
   25324:	41b6      	sbcs	r6, r6
   25326:	1a3a      	subs	r2, r7, r0
   25328:	4276      	negs	r6, r6
   2532a:	1b92      	subs	r2, r2, r6
   2532c:	4694      	mov	ip, r2
   2532e:	0212      	lsls	r2, r2, #8
   25330:	d400      	bmi.n	25334 <__aeabi_dsub+0x584>
   25332:	e5f7      	b.n	24f24 <__aeabi_dsub+0x174>
   25334:	1b4d      	subs	r5, r1, r5
   25336:	42a9      	cmp	r1, r5
   25338:	4189      	sbcs	r1, r1
   2533a:	1bc7      	subs	r7, r0, r7
   2533c:	4249      	negs	r1, r1
   2533e:	1a7f      	subs	r7, r7, r1
   25340:	469a      	mov	sl, r3
   25342:	e561      	b.n	24e08 <__aeabi_dsub+0x58>
   25344:	0002      	movs	r2, r0
   25346:	430a      	orrs	r2, r1
   25348:	d03a      	beq.n	253c0 <__aeabi_dsub+0x610>
   2534a:	08ed      	lsrs	r5, r5, #3
   2534c:	077c      	lsls	r4, r7, #29
   2534e:	432c      	orrs	r4, r5
   25350:	2580      	movs	r5, #128	; 0x80
   25352:	08fa      	lsrs	r2, r7, #3
   25354:	032d      	lsls	r5, r5, #12
   25356:	422a      	tst	r2, r5
   25358:	d008      	beq.n	2536c <__aeabi_dsub+0x5bc>
   2535a:	08c7      	lsrs	r7, r0, #3
   2535c:	422f      	tst	r7, r5
   2535e:	d105      	bne.n	2536c <__aeabi_dsub+0x5bc>
   25360:	0745      	lsls	r5, r0, #29
   25362:	002c      	movs	r4, r5
   25364:	003a      	movs	r2, r7
   25366:	469a      	mov	sl, r3
   25368:	08c9      	lsrs	r1, r1, #3
   2536a:	430c      	orrs	r4, r1
   2536c:	0f67      	lsrs	r7, r4, #29
   2536e:	00d2      	lsls	r2, r2, #3
   25370:	00e5      	lsls	r5, r4, #3
   25372:	4317      	orrs	r7, r2
   25374:	4c36      	ldr	r4, [pc, #216]	; (25450 <__aeabi_dsub+0x6a0>)
   25376:	e547      	b.n	24e08 <__aeabi_dsub+0x58>
   25378:	0007      	movs	r7, r0
   2537a:	000d      	movs	r5, r1
   2537c:	0014      	movs	r4, r2
   2537e:	e543      	b.n	24e08 <__aeabi_dsub+0x58>
   25380:	003a      	movs	r2, r7
   25382:	432a      	orrs	r2, r5
   25384:	d043      	beq.n	2540e <__aeabi_dsub+0x65e>
   25386:	0002      	movs	r2, r0
   25388:	430a      	orrs	r2, r1
   2538a:	d019      	beq.n	253c0 <__aeabi_dsub+0x610>
   2538c:	08ed      	lsrs	r5, r5, #3
   2538e:	077c      	lsls	r4, r7, #29
   25390:	432c      	orrs	r4, r5
   25392:	2580      	movs	r5, #128	; 0x80
   25394:	08fa      	lsrs	r2, r7, #3
   25396:	032d      	lsls	r5, r5, #12
   25398:	422a      	tst	r2, r5
   2539a:	d007      	beq.n	253ac <__aeabi_dsub+0x5fc>
   2539c:	08c6      	lsrs	r6, r0, #3
   2539e:	422e      	tst	r6, r5
   253a0:	d104      	bne.n	253ac <__aeabi_dsub+0x5fc>
   253a2:	0747      	lsls	r7, r0, #29
   253a4:	003c      	movs	r4, r7
   253a6:	0032      	movs	r2, r6
   253a8:	08c9      	lsrs	r1, r1, #3
   253aa:	430c      	orrs	r4, r1
   253ac:	00d7      	lsls	r7, r2, #3
   253ae:	0f62      	lsrs	r2, r4, #29
   253b0:	00e5      	lsls	r5, r4, #3
   253b2:	4317      	orrs	r7, r2
   253b4:	469a      	mov	sl, r3
   253b6:	4c26      	ldr	r4, [pc, #152]	; (25450 <__aeabi_dsub+0x6a0>)
   253b8:	e526      	b.n	24e08 <__aeabi_dsub+0x58>
   253ba:	2200      	movs	r2, #0
   253bc:	2500      	movs	r5, #0
   253be:	e544      	b.n	24e4a <__aeabi_dsub+0x9a>
   253c0:	4c23      	ldr	r4, [pc, #140]	; (25450 <__aeabi_dsub+0x6a0>)
   253c2:	e521      	b.n	24e08 <__aeabi_dsub+0x58>
   253c4:	2000      	movs	r0, #0
   253c6:	e749      	b.n	2525c <__aeabi_dsub+0x4ac>
   253c8:	2300      	movs	r3, #0
   253ca:	2500      	movs	r5, #0
   253cc:	e5bb      	b.n	24f46 <__aeabi_dsub+0x196>
   253ce:	464c      	mov	r4, r9
   253d0:	003e      	movs	r6, r7
   253d2:	3c20      	subs	r4, #32
   253d4:	40e6      	lsrs	r6, r4
   253d6:	464c      	mov	r4, r9
   253d8:	46b4      	mov	ip, r6
   253da:	2c20      	cmp	r4, #32
   253dc:	d031      	beq.n	25442 <__aeabi_dsub+0x692>
   253de:	2440      	movs	r4, #64	; 0x40
   253e0:	464e      	mov	r6, r9
   253e2:	1ba6      	subs	r6, r4, r6
   253e4:	40b7      	lsls	r7, r6
   253e6:	433d      	orrs	r5, r7
   253e8:	1e6c      	subs	r4, r5, #1
   253ea:	41a5      	sbcs	r5, r4
   253ec:	4664      	mov	r4, ip
   253ee:	432c      	orrs	r4, r5
   253f0:	2700      	movs	r7, #0
   253f2:	1b0d      	subs	r5, r1, r4
   253f4:	e6e7      	b.n	251c6 <__aeabi_dsub+0x416>
   253f6:	2280      	movs	r2, #128	; 0x80
   253f8:	2300      	movs	r3, #0
   253fa:	0312      	lsls	r2, r2, #12
   253fc:	4c14      	ldr	r4, [pc, #80]	; (25450 <__aeabi_dsub+0x6a0>)
   253fe:	2500      	movs	r5, #0
   25400:	e5a1      	b.n	24f46 <__aeabi_dsub+0x196>
   25402:	433d      	orrs	r5, r7
   25404:	1e6f      	subs	r7, r5, #1
   25406:	41bd      	sbcs	r5, r7
   25408:	2700      	movs	r7, #0
   2540a:	b2ed      	uxtb	r5, r5
   2540c:	e760      	b.n	252d0 <__aeabi_dsub+0x520>
   2540e:	0007      	movs	r7, r0
   25410:	000d      	movs	r5, r1
   25412:	4c0f      	ldr	r4, [pc, #60]	; (25450 <__aeabi_dsub+0x6a0>)
   25414:	e4f8      	b.n	24e08 <__aeabi_dsub+0x58>
   25416:	0007      	movs	r7, r0
   25418:	000d      	movs	r5, r1
   2541a:	e4f5      	b.n	24e08 <__aeabi_dsub+0x58>
   2541c:	464e      	mov	r6, r9
   2541e:	003c      	movs	r4, r7
   25420:	3e20      	subs	r6, #32
   25422:	40f4      	lsrs	r4, r6
   25424:	46a0      	mov	r8, r4
   25426:	464c      	mov	r4, r9
   25428:	2c20      	cmp	r4, #32
   2542a:	d00e      	beq.n	2544a <__aeabi_dsub+0x69a>
   2542c:	2440      	movs	r4, #64	; 0x40
   2542e:	464e      	mov	r6, r9
   25430:	1ba4      	subs	r4, r4, r6
   25432:	40a7      	lsls	r7, r4
   25434:	433d      	orrs	r5, r7
   25436:	1e6f      	subs	r7, r5, #1
   25438:	41bd      	sbcs	r5, r7
   2543a:	4644      	mov	r4, r8
   2543c:	2700      	movs	r7, #0
   2543e:	4325      	orrs	r5, r4
   25440:	e746      	b.n	252d0 <__aeabi_dsub+0x520>
   25442:	2700      	movs	r7, #0
   25444:	e7cf      	b.n	253e6 <__aeabi_dsub+0x636>
   25446:	000d      	movs	r5, r1
   25448:	e573      	b.n	24f32 <__aeabi_dsub+0x182>
   2544a:	2700      	movs	r7, #0
   2544c:	e7f2      	b.n	25434 <__aeabi_dsub+0x684>
   2544e:	46c0      	nop			; (mov r8, r8)
   25450:	000007ff 	.word	0x000007ff
   25454:	ff7fffff 	.word	0xff7fffff

00025458 <__aeabi_d2iz>:
   25458:	030b      	lsls	r3, r1, #12
   2545a:	b530      	push	{r4, r5, lr}
   2545c:	4d13      	ldr	r5, [pc, #76]	; (254ac <__aeabi_d2iz+0x54>)
   2545e:	0b1a      	lsrs	r2, r3, #12
   25460:	004b      	lsls	r3, r1, #1
   25462:	0d5b      	lsrs	r3, r3, #21
   25464:	0fc9      	lsrs	r1, r1, #31
   25466:	2400      	movs	r4, #0
   25468:	42ab      	cmp	r3, r5
   2546a:	dd11      	ble.n	25490 <__aeabi_d2iz+0x38>
   2546c:	4c10      	ldr	r4, [pc, #64]	; (254b0 <__aeabi_d2iz+0x58>)
   2546e:	42a3      	cmp	r3, r4
   25470:	dc10      	bgt.n	25494 <__aeabi_d2iz+0x3c>
   25472:	2480      	movs	r4, #128	; 0x80
   25474:	0364      	lsls	r4, r4, #13
   25476:	4322      	orrs	r2, r4
   25478:	4c0e      	ldr	r4, [pc, #56]	; (254b4 <__aeabi_d2iz+0x5c>)
   2547a:	1ae4      	subs	r4, r4, r3
   2547c:	2c1f      	cmp	r4, #31
   2547e:	dd0c      	ble.n	2549a <__aeabi_d2iz+0x42>
   25480:	480d      	ldr	r0, [pc, #52]	; (254b8 <__aeabi_d2iz+0x60>)
   25482:	1ac3      	subs	r3, r0, r3
   25484:	40da      	lsrs	r2, r3
   25486:	0013      	movs	r3, r2
   25488:	425c      	negs	r4, r3
   2548a:	2900      	cmp	r1, #0
   2548c:	d100      	bne.n	25490 <__aeabi_d2iz+0x38>
   2548e:	001c      	movs	r4, r3
   25490:	0020      	movs	r0, r4
   25492:	bd30      	pop	{r4, r5, pc}
   25494:	4b09      	ldr	r3, [pc, #36]	; (254bc <__aeabi_d2iz+0x64>)
   25496:	18cc      	adds	r4, r1, r3
   25498:	e7fa      	b.n	25490 <__aeabi_d2iz+0x38>
   2549a:	40e0      	lsrs	r0, r4
   2549c:	4c08      	ldr	r4, [pc, #32]	; (254c0 <__aeabi_d2iz+0x68>)
   2549e:	46a4      	mov	ip, r4
   254a0:	4463      	add	r3, ip
   254a2:	409a      	lsls	r2, r3
   254a4:	0013      	movs	r3, r2
   254a6:	4303      	orrs	r3, r0
   254a8:	e7ee      	b.n	25488 <__aeabi_d2iz+0x30>
   254aa:	46c0      	nop			; (mov r8, r8)
   254ac:	000003fe 	.word	0x000003fe
   254b0:	0000041d 	.word	0x0000041d
   254b4:	00000433 	.word	0x00000433
   254b8:	00000413 	.word	0x00000413
   254bc:	7fffffff 	.word	0x7fffffff
   254c0:	fffffbed 	.word	0xfffffbed

000254c4 <__aeabi_i2d>:
   254c4:	b570      	push	{r4, r5, r6, lr}
   254c6:	2800      	cmp	r0, #0
   254c8:	d030      	beq.n	2552c <__aeabi_i2d+0x68>
   254ca:	17c3      	asrs	r3, r0, #31
   254cc:	18c4      	adds	r4, r0, r3
   254ce:	405c      	eors	r4, r3
   254d0:	0fc5      	lsrs	r5, r0, #31
   254d2:	0020      	movs	r0, r4
   254d4:	f000 f870 	bl	255b8 <__clzsi2>
   254d8:	4b17      	ldr	r3, [pc, #92]	; (25538 <__aeabi_i2d+0x74>)
   254da:	4a18      	ldr	r2, [pc, #96]	; (2553c <__aeabi_i2d+0x78>)
   254dc:	1a1b      	subs	r3, r3, r0
   254de:	1ad2      	subs	r2, r2, r3
   254e0:	2a1f      	cmp	r2, #31
   254e2:	dd18      	ble.n	25516 <__aeabi_i2d+0x52>
   254e4:	4a16      	ldr	r2, [pc, #88]	; (25540 <__aeabi_i2d+0x7c>)
   254e6:	1ad2      	subs	r2, r2, r3
   254e8:	4094      	lsls	r4, r2
   254ea:	2200      	movs	r2, #0
   254ec:	0324      	lsls	r4, r4, #12
   254ee:	055b      	lsls	r3, r3, #21
   254f0:	0b24      	lsrs	r4, r4, #12
   254f2:	0d5b      	lsrs	r3, r3, #21
   254f4:	2100      	movs	r1, #0
   254f6:	0010      	movs	r0, r2
   254f8:	0324      	lsls	r4, r4, #12
   254fa:	0d0a      	lsrs	r2, r1, #20
   254fc:	0512      	lsls	r2, r2, #20
   254fe:	0b24      	lsrs	r4, r4, #12
   25500:	4314      	orrs	r4, r2
   25502:	4a10      	ldr	r2, [pc, #64]	; (25544 <__aeabi_i2d+0x80>)
   25504:	051b      	lsls	r3, r3, #20
   25506:	4014      	ands	r4, r2
   25508:	431c      	orrs	r4, r3
   2550a:	0064      	lsls	r4, r4, #1
   2550c:	07ed      	lsls	r5, r5, #31
   2550e:	0864      	lsrs	r4, r4, #1
   25510:	432c      	orrs	r4, r5
   25512:	0021      	movs	r1, r4
   25514:	bd70      	pop	{r4, r5, r6, pc}
   25516:	0021      	movs	r1, r4
   25518:	4091      	lsls	r1, r2
   2551a:	000a      	movs	r2, r1
   2551c:	210b      	movs	r1, #11
   2551e:	1a08      	subs	r0, r1, r0
   25520:	40c4      	lsrs	r4, r0
   25522:	055b      	lsls	r3, r3, #21
   25524:	0324      	lsls	r4, r4, #12
   25526:	0b24      	lsrs	r4, r4, #12
   25528:	0d5b      	lsrs	r3, r3, #21
   2552a:	e7e3      	b.n	254f4 <__aeabi_i2d+0x30>
   2552c:	2500      	movs	r5, #0
   2552e:	2300      	movs	r3, #0
   25530:	2400      	movs	r4, #0
   25532:	2200      	movs	r2, #0
   25534:	e7de      	b.n	254f4 <__aeabi_i2d+0x30>
   25536:	46c0      	nop			; (mov r8, r8)
   25538:	0000041e 	.word	0x0000041e
   2553c:	00000433 	.word	0x00000433
   25540:	00000413 	.word	0x00000413
   25544:	800fffff 	.word	0x800fffff

00025548 <__aeabi_ui2d>:
   25548:	b570      	push	{r4, r5, r6, lr}
   2554a:	1e05      	subs	r5, r0, #0
   2554c:	d028      	beq.n	255a0 <__aeabi_ui2d+0x58>
   2554e:	f000 f833 	bl	255b8 <__clzsi2>
   25552:	4b15      	ldr	r3, [pc, #84]	; (255a8 <__aeabi_ui2d+0x60>)
   25554:	4a15      	ldr	r2, [pc, #84]	; (255ac <__aeabi_ui2d+0x64>)
   25556:	1a1b      	subs	r3, r3, r0
   25558:	1ad2      	subs	r2, r2, r3
   2555a:	2a1f      	cmp	r2, #31
   2555c:	dd16      	ble.n	2558c <__aeabi_ui2d+0x44>
   2555e:	002c      	movs	r4, r5
   25560:	4a13      	ldr	r2, [pc, #76]	; (255b0 <__aeabi_ui2d+0x68>)
   25562:	2500      	movs	r5, #0
   25564:	1ad2      	subs	r2, r2, r3
   25566:	4094      	lsls	r4, r2
   25568:	055a      	lsls	r2, r3, #21
   2556a:	0324      	lsls	r4, r4, #12
   2556c:	0b24      	lsrs	r4, r4, #12
   2556e:	0d52      	lsrs	r2, r2, #21
   25570:	2100      	movs	r1, #0
   25572:	0324      	lsls	r4, r4, #12
   25574:	0d0b      	lsrs	r3, r1, #20
   25576:	0b24      	lsrs	r4, r4, #12
   25578:	051b      	lsls	r3, r3, #20
   2557a:	4323      	orrs	r3, r4
   2557c:	4c0d      	ldr	r4, [pc, #52]	; (255b4 <__aeabi_ui2d+0x6c>)
   2557e:	0512      	lsls	r2, r2, #20
   25580:	4023      	ands	r3, r4
   25582:	4313      	orrs	r3, r2
   25584:	005b      	lsls	r3, r3, #1
   25586:	0028      	movs	r0, r5
   25588:	0859      	lsrs	r1, r3, #1
   2558a:	bd70      	pop	{r4, r5, r6, pc}
   2558c:	210b      	movs	r1, #11
   2558e:	002c      	movs	r4, r5
   25590:	1a08      	subs	r0, r1, r0
   25592:	40c4      	lsrs	r4, r0
   25594:	4095      	lsls	r5, r2
   25596:	0324      	lsls	r4, r4, #12
   25598:	055a      	lsls	r2, r3, #21
   2559a:	0b24      	lsrs	r4, r4, #12
   2559c:	0d52      	lsrs	r2, r2, #21
   2559e:	e7e7      	b.n	25570 <__aeabi_ui2d+0x28>
   255a0:	2200      	movs	r2, #0
   255a2:	2400      	movs	r4, #0
   255a4:	e7e4      	b.n	25570 <__aeabi_ui2d+0x28>
   255a6:	46c0      	nop			; (mov r8, r8)
   255a8:	0000041e 	.word	0x0000041e
   255ac:	00000433 	.word	0x00000433
   255b0:	00000413 	.word	0x00000413
   255b4:	800fffff 	.word	0x800fffff

000255b8 <__clzsi2>:
   255b8:	211c      	movs	r1, #28
   255ba:	2301      	movs	r3, #1
   255bc:	041b      	lsls	r3, r3, #16
   255be:	4298      	cmp	r0, r3
   255c0:	d301      	bcc.n	255c6 <__clzsi2+0xe>
   255c2:	0c00      	lsrs	r0, r0, #16
   255c4:	3910      	subs	r1, #16
   255c6:	0a1b      	lsrs	r3, r3, #8
   255c8:	4298      	cmp	r0, r3
   255ca:	d301      	bcc.n	255d0 <__clzsi2+0x18>
   255cc:	0a00      	lsrs	r0, r0, #8
   255ce:	3908      	subs	r1, #8
   255d0:	091b      	lsrs	r3, r3, #4
   255d2:	4298      	cmp	r0, r3
   255d4:	d301      	bcc.n	255da <__clzsi2+0x22>
   255d6:	0900      	lsrs	r0, r0, #4
   255d8:	3904      	subs	r1, #4
   255da:	a202      	add	r2, pc, #8	; (adr r2, 255e4 <__clzsi2+0x2c>)
   255dc:	5c10      	ldrb	r0, [r2, r0]
   255de:	1840      	adds	r0, r0, r1
   255e0:	4770      	bx	lr
   255e2:	46c0      	nop			; (mov r8, r8)
   255e4:	02020304 	.word	0x02020304
   255e8:	01010101 	.word	0x01010101
	...

000255f4 <__clzdi2>:
   255f4:	b510      	push	{r4, lr}
   255f6:	2900      	cmp	r1, #0
   255f8:	d103      	bne.n	25602 <__clzdi2+0xe>
   255fa:	f7ff ffdd 	bl	255b8 <__clzsi2>
   255fe:	3020      	adds	r0, #32
   25600:	e002      	b.n	25608 <__clzdi2+0x14>
   25602:	1c08      	adds	r0, r1, #0
   25604:	f7ff ffd8 	bl	255b8 <__clzsi2>
   25608:	bd10      	pop	{r4, pc}
   2560a:	46c0      	nop			; (mov r8, r8)

0002560c <__libc_init_array>:
   2560c:	4b0e      	ldr	r3, [pc, #56]	; (25648 <__libc_init_array+0x3c>)
   2560e:	b570      	push	{r4, r5, r6, lr}
   25610:	2500      	movs	r5, #0
   25612:	001e      	movs	r6, r3
   25614:	4c0d      	ldr	r4, [pc, #52]	; (2564c <__libc_init_array+0x40>)
   25616:	1ae4      	subs	r4, r4, r3
   25618:	10a4      	asrs	r4, r4, #2
   2561a:	42a5      	cmp	r5, r4
   2561c:	d004      	beq.n	25628 <__libc_init_array+0x1c>
   2561e:	00ab      	lsls	r3, r5, #2
   25620:	58f3      	ldr	r3, [r6, r3]
   25622:	4798      	blx	r3
   25624:	3501      	adds	r5, #1
   25626:	e7f8      	b.n	2561a <__libc_init_array+0xe>
   25628:	f009 fd1e 	bl	2f068 <_init>
   2562c:	4b08      	ldr	r3, [pc, #32]	; (25650 <__libc_init_array+0x44>)
   2562e:	2500      	movs	r5, #0
   25630:	001e      	movs	r6, r3
   25632:	4c08      	ldr	r4, [pc, #32]	; (25654 <__libc_init_array+0x48>)
   25634:	1ae4      	subs	r4, r4, r3
   25636:	10a4      	asrs	r4, r4, #2
   25638:	42a5      	cmp	r5, r4
   2563a:	d004      	beq.n	25646 <__libc_init_array+0x3a>
   2563c:	00ab      	lsls	r3, r5, #2
   2563e:	58f3      	ldr	r3, [r6, r3]
   25640:	4798      	blx	r3
   25642:	3501      	adds	r5, #1
   25644:	e7f8      	b.n	25638 <__libc_init_array+0x2c>
   25646:	bd70      	pop	{r4, r5, r6, pc}
   25648:	0002f074 	.word	0x0002f074
   2564c:	0002f074 	.word	0x0002f074
   25650:	0002f074 	.word	0x0002f074
   25654:	0002f078 	.word	0x0002f078

00025658 <__get_current_locale>:
   25658:	4b03      	ldr	r3, [pc, #12]	; (25668 <__get_current_locale+0x10>)
   2565a:	681b      	ldr	r3, [r3, #0]
   2565c:	6a18      	ldr	r0, [r3, #32]
   2565e:	2800      	cmp	r0, #0
   25660:	d100      	bne.n	25664 <__get_current_locale+0xc>
   25662:	4802      	ldr	r0, [pc, #8]	; (2566c <__get_current_locale+0x14>)
   25664:	4770      	bx	lr
   25666:	46c0      	nop			; (mov r8, r8)
   25668:	20000120 	.word	0x20000120
   2566c:	20000124 	.word	0x20000124

00025670 <__locale_ctype_ptr>:
   25670:	4b03      	ldr	r3, [pc, #12]	; (25680 <__locale_ctype_ptr+0x10>)
   25672:	b510      	push	{r4, lr}
   25674:	6818      	ldr	r0, [r3, #0]
   25676:	f7ff ffef 	bl	25658 <__get_current_locale>
   2567a:	30ec      	adds	r0, #236	; 0xec
   2567c:	6800      	ldr	r0, [r0, #0]
   2567e:	bd10      	pop	{r4, pc}
   25680:	20000120 	.word	0x20000120

00025684 <malloc>:
   25684:	b510      	push	{r4, lr}
   25686:	4b03      	ldr	r3, [pc, #12]	; (25694 <malloc+0x10>)
   25688:	0001      	movs	r1, r0
   2568a:	6818      	ldr	r0, [r3, #0]
   2568c:	f000 f8a2 	bl	257d4 <_malloc_r>
   25690:	bd10      	pop	{r4, pc}
   25692:	46c0      	nop			; (mov r8, r8)
   25694:	20000120 	.word	0x20000120

00025698 <free>:
   25698:	b510      	push	{r4, lr}
   2569a:	4b03      	ldr	r3, [pc, #12]	; (256a8 <free+0x10>)
   2569c:	0001      	movs	r1, r0
   2569e:	6818      	ldr	r0, [r3, #0]
   256a0:	f000 f84c 	bl	2573c <_free_r>
   256a4:	bd10      	pop	{r4, pc}
   256a6:	46c0      	nop			; (mov r8, r8)
   256a8:	20000120 	.word	0x20000120

000256ac <__ascii_mbtowc>:
   256ac:	b082      	sub	sp, #8
   256ae:	2900      	cmp	r1, #0
   256b0:	d100      	bne.n	256b4 <__ascii_mbtowc+0x8>
   256b2:	a901      	add	r1, sp, #4
   256b4:	1e10      	subs	r0, r2, #0
   256b6:	d009      	beq.n	256cc <__ascii_mbtowc+0x20>
   256b8:	2b00      	cmp	r3, #0
   256ba:	d005      	beq.n	256c8 <__ascii_mbtowc+0x1c>
   256bc:	7813      	ldrb	r3, [r2, #0]
   256be:	600b      	str	r3, [r1, #0]
   256c0:	7810      	ldrb	r0, [r2, #0]
   256c2:	1e43      	subs	r3, r0, #1
   256c4:	4198      	sbcs	r0, r3
   256c6:	e001      	b.n	256cc <__ascii_mbtowc+0x20>
   256c8:	2002      	movs	r0, #2
   256ca:	4240      	negs	r0, r0
   256cc:	b002      	add	sp, #8
   256ce:	4770      	bx	lr

000256d0 <memcmp>:
   256d0:	b530      	push	{r4, r5, lr}
   256d2:	2400      	movs	r4, #0
   256d4:	42a2      	cmp	r2, r4
   256d6:	d008      	beq.n	256ea <memcmp+0x1a>
   256d8:	5d03      	ldrb	r3, [r0, r4]
   256da:	1c65      	adds	r5, r4, #1
   256dc:	5d0c      	ldrb	r4, [r1, r4]
   256de:	42a3      	cmp	r3, r4
   256e0:	d001      	beq.n	256e6 <memcmp+0x16>
   256e2:	1b18      	subs	r0, r3, r4
   256e4:	e002      	b.n	256ec <memcmp+0x1c>
   256e6:	002c      	movs	r4, r5
   256e8:	e7f4      	b.n	256d4 <memcmp+0x4>
   256ea:	2000      	movs	r0, #0
   256ec:	bd30      	pop	{r4, r5, pc}

000256ee <memcpy>:
   256ee:	2300      	movs	r3, #0
   256f0:	b510      	push	{r4, lr}
   256f2:	429a      	cmp	r2, r3
   256f4:	d003      	beq.n	256fe <memcpy+0x10>
   256f6:	5ccc      	ldrb	r4, [r1, r3]
   256f8:	54c4      	strb	r4, [r0, r3]
   256fa:	3301      	adds	r3, #1
   256fc:	e7f9      	b.n	256f2 <memcpy+0x4>
   256fe:	bd10      	pop	{r4, pc}

00025700 <memmove>:
   25700:	b510      	push	{r4, lr}
   25702:	4288      	cmp	r0, r1
   25704:	d902      	bls.n	2570c <memmove+0xc>
   25706:	188b      	adds	r3, r1, r2
   25708:	4298      	cmp	r0, r3
   2570a:	d301      	bcc.n	25710 <memmove+0x10>
   2570c:	2300      	movs	r3, #0
   2570e:	e005      	b.n	2571c <memmove+0x1c>
   25710:	1a9b      	subs	r3, r3, r2
   25712:	3a01      	subs	r2, #1
   25714:	d308      	bcc.n	25728 <memmove+0x28>
   25716:	5c99      	ldrb	r1, [r3, r2]
   25718:	5481      	strb	r1, [r0, r2]
   2571a:	e7fa      	b.n	25712 <memmove+0x12>
   2571c:	4293      	cmp	r3, r2
   2571e:	d003      	beq.n	25728 <memmove+0x28>
   25720:	5ccc      	ldrb	r4, [r1, r3]
   25722:	54c4      	strb	r4, [r0, r3]
   25724:	3301      	adds	r3, #1
   25726:	e7f9      	b.n	2571c <memmove+0x1c>
   25728:	bd10      	pop	{r4, pc}

0002572a <memset>:
   2572a:	0003      	movs	r3, r0
   2572c:	1882      	adds	r2, r0, r2
   2572e:	4293      	cmp	r3, r2
   25730:	d002      	beq.n	25738 <memset+0xe>
   25732:	7019      	strb	r1, [r3, #0]
   25734:	3301      	adds	r3, #1
   25736:	e7fa      	b.n	2572e <memset+0x4>
   25738:	4770      	bx	lr
	...

0002573c <_free_r>:
   2573c:	b570      	push	{r4, r5, r6, lr}
   2573e:	0005      	movs	r5, r0
   25740:	2900      	cmp	r1, #0
   25742:	d044      	beq.n	257ce <_free_r+0x92>
   25744:	1f0c      	subs	r4, r1, #4
   25746:	6823      	ldr	r3, [r4, #0]
   25748:	2b00      	cmp	r3, #0
   2574a:	da00      	bge.n	2574e <_free_r+0x12>
   2574c:	18e4      	adds	r4, r4, r3
   2574e:	0028      	movs	r0, r5
   25750:	f001 feb5 	bl	274be <__malloc_lock>
   25754:	4a1e      	ldr	r2, [pc, #120]	; (257d0 <_free_r+0x94>)
   25756:	6813      	ldr	r3, [r2, #0]
   25758:	0011      	movs	r1, r2
   2575a:	2b00      	cmp	r3, #0
   2575c:	d102      	bne.n	25764 <_free_r+0x28>
   2575e:	6063      	str	r3, [r4, #4]
   25760:	6014      	str	r4, [r2, #0]
   25762:	e031      	b.n	257c8 <_free_r+0x8c>
   25764:	42a3      	cmp	r3, r4
   25766:	d90d      	bls.n	25784 <_free_r+0x48>
   25768:	6822      	ldr	r2, [r4, #0]
   2576a:	18a0      	adds	r0, r4, r2
   2576c:	4283      	cmp	r3, r0
   2576e:	d103      	bne.n	25778 <_free_r+0x3c>
   25770:	6818      	ldr	r0, [r3, #0]
   25772:	685b      	ldr	r3, [r3, #4]
   25774:	1882      	adds	r2, r0, r2
   25776:	6022      	str	r2, [r4, #0]
   25778:	6063      	str	r3, [r4, #4]
   2577a:	600c      	str	r4, [r1, #0]
   2577c:	e024      	b.n	257c8 <_free_r+0x8c>
   2577e:	42a2      	cmp	r2, r4
   25780:	d803      	bhi.n	2578a <_free_r+0x4e>
   25782:	0013      	movs	r3, r2
   25784:	685a      	ldr	r2, [r3, #4]
   25786:	2a00      	cmp	r2, #0
   25788:	d1f9      	bne.n	2577e <_free_r+0x42>
   2578a:	681e      	ldr	r6, [r3, #0]
   2578c:	1998      	adds	r0, r3, r6
   2578e:	42a0      	cmp	r0, r4
   25790:	d10b      	bne.n	257aa <_free_r+0x6e>
   25792:	6821      	ldr	r1, [r4, #0]
   25794:	1871      	adds	r1, r6, r1
   25796:	1858      	adds	r0, r3, r1
   25798:	6019      	str	r1, [r3, #0]
   2579a:	4282      	cmp	r2, r0
   2579c:	d114      	bne.n	257c8 <_free_r+0x8c>
   2579e:	6810      	ldr	r0, [r2, #0]
   257a0:	6852      	ldr	r2, [r2, #4]
   257a2:	1841      	adds	r1, r0, r1
   257a4:	6019      	str	r1, [r3, #0]
   257a6:	605a      	str	r2, [r3, #4]
   257a8:	e00e      	b.n	257c8 <_free_r+0x8c>
   257aa:	42a0      	cmp	r0, r4
   257ac:	d902      	bls.n	257b4 <_free_r+0x78>
   257ae:	230c      	movs	r3, #12
   257b0:	602b      	str	r3, [r5, #0]
   257b2:	e009      	b.n	257c8 <_free_r+0x8c>
   257b4:	6821      	ldr	r1, [r4, #0]
   257b6:	1860      	adds	r0, r4, r1
   257b8:	4282      	cmp	r2, r0
   257ba:	d103      	bne.n	257c4 <_free_r+0x88>
   257bc:	6810      	ldr	r0, [r2, #0]
   257be:	6852      	ldr	r2, [r2, #4]
   257c0:	1841      	adds	r1, r0, r1
   257c2:	6021      	str	r1, [r4, #0]
   257c4:	6062      	str	r2, [r4, #4]
   257c6:	605c      	str	r4, [r3, #4]
   257c8:	0028      	movs	r0, r5
   257ca:	f001 fe79 	bl	274c0 <__malloc_unlock>
   257ce:	bd70      	pop	{r4, r5, r6, pc}
   257d0:	2000047c 	.word	0x2000047c

000257d4 <_malloc_r>:
   257d4:	2303      	movs	r3, #3
   257d6:	b570      	push	{r4, r5, r6, lr}
   257d8:	1ccd      	adds	r5, r1, #3
   257da:	439d      	bics	r5, r3
   257dc:	3508      	adds	r5, #8
   257de:	0006      	movs	r6, r0
   257e0:	2d0c      	cmp	r5, #12
   257e2:	d201      	bcs.n	257e8 <_malloc_r+0x14>
   257e4:	250c      	movs	r5, #12
   257e6:	e001      	b.n	257ec <_malloc_r+0x18>
   257e8:	2d00      	cmp	r5, #0
   257ea:	db01      	blt.n	257f0 <_malloc_r+0x1c>
   257ec:	42a9      	cmp	r1, r5
   257ee:	d902      	bls.n	257f6 <_malloc_r+0x22>
   257f0:	230c      	movs	r3, #12
   257f2:	6033      	str	r3, [r6, #0]
   257f4:	e048      	b.n	25888 <_malloc_r+0xb4>
   257f6:	0030      	movs	r0, r6
   257f8:	f001 fe61 	bl	274be <__malloc_lock>
   257fc:	4b23      	ldr	r3, [pc, #140]	; (2588c <_malloc_r+0xb8>)
   257fe:	681c      	ldr	r4, [r3, #0]
   25800:	001a      	movs	r2, r3
   25802:	0021      	movs	r1, r4
   25804:	2900      	cmp	r1, #0
   25806:	d013      	beq.n	25830 <_malloc_r+0x5c>
   25808:	680b      	ldr	r3, [r1, #0]
   2580a:	1b5b      	subs	r3, r3, r5
   2580c:	d40d      	bmi.n	2582a <_malloc_r+0x56>
   2580e:	2b0b      	cmp	r3, #11
   25810:	d902      	bls.n	25818 <_malloc_r+0x44>
   25812:	600b      	str	r3, [r1, #0]
   25814:	18cc      	adds	r4, r1, r3
   25816:	e01e      	b.n	25856 <_malloc_r+0x82>
   25818:	428c      	cmp	r4, r1
   2581a:	d102      	bne.n	25822 <_malloc_r+0x4e>
   2581c:	6863      	ldr	r3, [r4, #4]
   2581e:	6013      	str	r3, [r2, #0]
   25820:	e01a      	b.n	25858 <_malloc_r+0x84>
   25822:	684b      	ldr	r3, [r1, #4]
   25824:	6063      	str	r3, [r4, #4]
   25826:	000c      	movs	r4, r1
   25828:	e016      	b.n	25858 <_malloc_r+0x84>
   2582a:	000c      	movs	r4, r1
   2582c:	6849      	ldr	r1, [r1, #4]
   2582e:	e7e9      	b.n	25804 <_malloc_r+0x30>
   25830:	4c17      	ldr	r4, [pc, #92]	; (25890 <_malloc_r+0xbc>)
   25832:	6823      	ldr	r3, [r4, #0]
   25834:	2b00      	cmp	r3, #0
   25836:	d103      	bne.n	25840 <_malloc_r+0x6c>
   25838:	0030      	movs	r0, r6
   2583a:	f000 fcbb 	bl	261b4 <_sbrk_r>
   2583e:	6020      	str	r0, [r4, #0]
   25840:	0029      	movs	r1, r5
   25842:	0030      	movs	r0, r6
   25844:	f000 fcb6 	bl	261b4 <_sbrk_r>
   25848:	1c43      	adds	r3, r0, #1
   2584a:	d018      	beq.n	2587e <_malloc_r+0xaa>
   2584c:	2303      	movs	r3, #3
   2584e:	1cc4      	adds	r4, r0, #3
   25850:	439c      	bics	r4, r3
   25852:	42a0      	cmp	r0, r4
   25854:	d10d      	bne.n	25872 <_malloc_r+0x9e>
   25856:	6025      	str	r5, [r4, #0]
   25858:	0030      	movs	r0, r6
   2585a:	f001 fe31 	bl	274c0 <__malloc_unlock>
   2585e:	0020      	movs	r0, r4
   25860:	2207      	movs	r2, #7
   25862:	300b      	adds	r0, #11
   25864:	1d23      	adds	r3, r4, #4
   25866:	4390      	bics	r0, r2
   25868:	1ac3      	subs	r3, r0, r3
   2586a:	d00e      	beq.n	2588a <_malloc_r+0xb6>
   2586c:	425a      	negs	r2, r3
   2586e:	50e2      	str	r2, [r4, r3]
   25870:	e00b      	b.n	2588a <_malloc_r+0xb6>
   25872:	1a21      	subs	r1, r4, r0
   25874:	0030      	movs	r0, r6
   25876:	f000 fc9d 	bl	261b4 <_sbrk_r>
   2587a:	1c43      	adds	r3, r0, #1
   2587c:	d1eb      	bne.n	25856 <_malloc_r+0x82>
   2587e:	230c      	movs	r3, #12
   25880:	0030      	movs	r0, r6
   25882:	6033      	str	r3, [r6, #0]
   25884:	f001 fe1c 	bl	274c0 <__malloc_unlock>
   25888:	2000      	movs	r0, #0
   2588a:	bd70      	pop	{r4, r5, r6, pc}
   2588c:	2000047c 	.word	0x2000047c
   25890:	20000478 	.word	0x20000478

00025894 <__cvt>:
   25894:	b5f0      	push	{r4, r5, r6, r7, lr}
   25896:	b08b      	sub	sp, #44	; 0x2c
   25898:	0014      	movs	r4, r2
   2589a:	1e1d      	subs	r5, r3, #0
   2589c:	9912      	ldr	r1, [sp, #72]	; 0x48
   2589e:	da06      	bge.n	258ae <__cvt+0x1a>
   258a0:	2480      	movs	r4, #128	; 0x80
   258a2:	0624      	lsls	r4, r4, #24
   258a4:	191b      	adds	r3, r3, r4
   258a6:	001d      	movs	r5, r3
   258a8:	0014      	movs	r4, r2
   258aa:	232d      	movs	r3, #45	; 0x2d
   258ac:	e000      	b.n	258b0 <__cvt+0x1c>
   258ae:	2300      	movs	r3, #0
   258b0:	700b      	strb	r3, [r1, #0]
   258b2:	2320      	movs	r3, #32
   258b4:	9e14      	ldr	r6, [sp, #80]	; 0x50
   258b6:	2203      	movs	r2, #3
   258b8:	439e      	bics	r6, r3
   258ba:	2e46      	cmp	r6, #70	; 0x46
   258bc:	d007      	beq.n	258ce <__cvt+0x3a>
   258be:	0033      	movs	r3, r6
   258c0:	3b45      	subs	r3, #69	; 0x45
   258c2:	4259      	negs	r1, r3
   258c4:	414b      	adcs	r3, r1
   258c6:	9910      	ldr	r1, [sp, #64]	; 0x40
   258c8:	3a01      	subs	r2, #1
   258ca:	18cb      	adds	r3, r1, r3
   258cc:	9310      	str	r3, [sp, #64]	; 0x40
   258ce:	ab09      	add	r3, sp, #36	; 0x24
   258d0:	9304      	str	r3, [sp, #16]
   258d2:	ab08      	add	r3, sp, #32
   258d4:	9303      	str	r3, [sp, #12]
   258d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   258d8:	9200      	str	r2, [sp, #0]
   258da:	9302      	str	r3, [sp, #8]
   258dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   258de:	0022      	movs	r2, r4
   258e0:	9301      	str	r3, [sp, #4]
   258e2:	002b      	movs	r3, r5
   258e4:	f000 fe22 	bl	2652c <_dtoa_r>
   258e8:	0007      	movs	r7, r0
   258ea:	2e47      	cmp	r6, #71	; 0x47
   258ec:	d102      	bne.n	258f4 <__cvt+0x60>
   258ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   258f0:	07db      	lsls	r3, r3, #31
   258f2:	d52d      	bpl.n	25950 <__cvt+0xbc>
   258f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   258f6:	18fb      	adds	r3, r7, r3
   258f8:	9307      	str	r3, [sp, #28]
   258fa:	2e46      	cmp	r6, #70	; 0x46
   258fc:	d114      	bne.n	25928 <__cvt+0x94>
   258fe:	783b      	ldrb	r3, [r7, #0]
   25900:	2b30      	cmp	r3, #48	; 0x30
   25902:	d10c      	bne.n	2591e <__cvt+0x8a>
   25904:	2200      	movs	r2, #0
   25906:	2300      	movs	r3, #0
   25908:	0020      	movs	r0, r4
   2590a:	0029      	movs	r1, r5
   2590c:	f7fd ff4c 	bl	237a8 <__aeabi_dcmpeq>
   25910:	2800      	cmp	r0, #0
   25912:	d104      	bne.n	2591e <__cvt+0x8a>
   25914:	2301      	movs	r3, #1
   25916:	9a10      	ldr	r2, [sp, #64]	; 0x40
   25918:	1a9b      	subs	r3, r3, r2
   2591a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2591c:	6013      	str	r3, [r2, #0]
   2591e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   25920:	9a07      	ldr	r2, [sp, #28]
   25922:	681b      	ldr	r3, [r3, #0]
   25924:	18d3      	adds	r3, r2, r3
   25926:	9307      	str	r3, [sp, #28]
   25928:	2200      	movs	r2, #0
   2592a:	2300      	movs	r3, #0
   2592c:	0020      	movs	r0, r4
   2592e:	0029      	movs	r1, r5
   25930:	f7fd ff3a 	bl	237a8 <__aeabi_dcmpeq>
   25934:	2230      	movs	r2, #48	; 0x30
   25936:	2800      	cmp	r0, #0
   25938:	d002      	beq.n	25940 <__cvt+0xac>
   2593a:	9b07      	ldr	r3, [sp, #28]
   2593c:	9309      	str	r3, [sp, #36]	; 0x24
   2593e:	e007      	b.n	25950 <__cvt+0xbc>
   25940:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25942:	9907      	ldr	r1, [sp, #28]
   25944:	4299      	cmp	r1, r3
   25946:	d903      	bls.n	25950 <__cvt+0xbc>
   25948:	1c59      	adds	r1, r3, #1
   2594a:	9109      	str	r1, [sp, #36]	; 0x24
   2594c:	701a      	strb	r2, [r3, #0]
   2594e:	e7f7      	b.n	25940 <__cvt+0xac>
   25950:	0038      	movs	r0, r7
   25952:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25954:	9a15      	ldr	r2, [sp, #84]	; 0x54
   25956:	1bdb      	subs	r3, r3, r7
   25958:	6013      	str	r3, [r2, #0]
   2595a:	b00b      	add	sp, #44	; 0x2c
   2595c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002595e <__exponent>:
   2595e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25960:	232b      	movs	r3, #43	; 0x2b
   25962:	0007      	movs	r7, r0
   25964:	000c      	movs	r4, r1
   25966:	7002      	strb	r2, [r0, #0]
   25968:	1c86      	adds	r6, r0, #2
   2596a:	2900      	cmp	r1, #0
   2596c:	da01      	bge.n	25972 <__exponent+0x14>
   2596e:	232d      	movs	r3, #45	; 0x2d
   25970:	424c      	negs	r4, r1
   25972:	707b      	strb	r3, [r7, #1]
   25974:	2c09      	cmp	r4, #9
   25976:	dd1c      	ble.n	259b2 <__exponent+0x54>
   25978:	466b      	mov	r3, sp
   2597a:	1ddd      	adds	r5, r3, #7
   2597c:	0020      	movs	r0, r4
   2597e:	210a      	movs	r1, #10
   25980:	f7fd fefc 	bl	2377c <__aeabi_idivmod>
   25984:	3d01      	subs	r5, #1
   25986:	3130      	adds	r1, #48	; 0x30
   25988:	7029      	strb	r1, [r5, #0]
   2598a:	0020      	movs	r0, r4
   2598c:	210a      	movs	r1, #10
   2598e:	f7fd fe0f 	bl	235b0 <__aeabi_idiv>
   25992:	0004      	movs	r4, r0
   25994:	2809      	cmp	r0, #9
   25996:	dcf1      	bgt.n	2597c <__exponent+0x1e>
   25998:	3d01      	subs	r5, #1
   2599a:	3430      	adds	r4, #48	; 0x30
   2599c:	702c      	strb	r4, [r5, #0]
   2599e:	466b      	mov	r3, sp
   259a0:	3307      	adds	r3, #7
   259a2:	0030      	movs	r0, r6
   259a4:	42ab      	cmp	r3, r5
   259a6:	d909      	bls.n	259bc <__exponent+0x5e>
   259a8:	782b      	ldrb	r3, [r5, #0]
   259aa:	3501      	adds	r5, #1
   259ac:	7033      	strb	r3, [r6, #0]
   259ae:	3601      	adds	r6, #1
   259b0:	e7f5      	b.n	2599e <__exponent+0x40>
   259b2:	2330      	movs	r3, #48	; 0x30
   259b4:	18e4      	adds	r4, r4, r3
   259b6:	7033      	strb	r3, [r6, #0]
   259b8:	1cb0      	adds	r0, r6, #2
   259ba:	7074      	strb	r4, [r6, #1]
   259bc:	1bc0      	subs	r0, r0, r7
   259be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000259c0 <_printf_float>:
   259c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   259c2:	b095      	sub	sp, #84	; 0x54
   259c4:	000c      	movs	r4, r1
   259c6:	920a      	str	r2, [sp, #40]	; 0x28
   259c8:	930b      	str	r3, [sp, #44]	; 0x2c
   259ca:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   259cc:	9009      	str	r0, [sp, #36]	; 0x24
   259ce:	f001 fcfb 	bl	273c8 <_localeconv_r>
   259d2:	6803      	ldr	r3, [r0, #0]
   259d4:	0018      	movs	r0, r3
   259d6:	930d      	str	r3, [sp, #52]	; 0x34
   259d8:	f000 fcea 	bl	263b0 <strlen>
   259dc:	2300      	movs	r3, #0
   259de:	9312      	str	r3, [sp, #72]	; 0x48
   259e0:	6823      	ldr	r3, [r4, #0]
   259e2:	900e      	str	r0, [sp, #56]	; 0x38
   259e4:	930c      	str	r3, [sp, #48]	; 0x30
   259e6:	990c      	ldr	r1, [sp, #48]	; 0x30
   259e8:	7e27      	ldrb	r7, [r4, #24]
   259ea:	682b      	ldr	r3, [r5, #0]
   259ec:	2207      	movs	r2, #7
   259ee:	05c9      	lsls	r1, r1, #23
   259f0:	d501      	bpl.n	259f6 <_printf_float+0x36>
   259f2:	189b      	adds	r3, r3, r2
   259f4:	e000      	b.n	259f8 <_printf_float+0x38>
   259f6:	3307      	adds	r3, #7
   259f8:	4393      	bics	r3, r2
   259fa:	001a      	movs	r2, r3
   259fc:	3208      	adds	r2, #8
   259fe:	602a      	str	r2, [r5, #0]
   25a00:	681a      	ldr	r2, [r3, #0]
   25a02:	685b      	ldr	r3, [r3, #4]
   25a04:	64a2      	str	r2, [r4, #72]	; 0x48
   25a06:	64e3      	str	r3, [r4, #76]	; 0x4c
   25a08:	2201      	movs	r2, #1
   25a0a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
   25a0c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   25a0e:	006b      	lsls	r3, r5, #1
   25a10:	085b      	lsrs	r3, r3, #1
   25a12:	930f      	str	r3, [sp, #60]	; 0x3c
   25a14:	4252      	negs	r2, r2
   25a16:	4bc0      	ldr	r3, [pc, #768]	; (25d18 <_printf_float+0x358>)
   25a18:	0030      	movs	r0, r6
   25a1a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   25a1c:	f002 fcb4 	bl	28388 <__aeabi_dcmpun>
   25a20:	2800      	cmp	r0, #0
   25a22:	d119      	bne.n	25a58 <_printf_float+0x98>
   25a24:	2201      	movs	r2, #1
   25a26:	4bbc      	ldr	r3, [pc, #752]	; (25d18 <_printf_float+0x358>)
   25a28:	4252      	negs	r2, r2
   25a2a:	0030      	movs	r0, r6
   25a2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   25a2e:	f7fd fecb 	bl	237c8 <__aeabi_dcmple>
   25a32:	2800      	cmp	r0, #0
   25a34:	d110      	bne.n	25a58 <_printf_float+0x98>
   25a36:	2200      	movs	r2, #0
   25a38:	2300      	movs	r3, #0
   25a3a:	0030      	movs	r0, r6
   25a3c:	0029      	movs	r1, r5
   25a3e:	f7fd feb9 	bl	237b4 <__aeabi_dcmplt>
   25a42:	2800      	cmp	r0, #0
   25a44:	d003      	beq.n	25a4e <_printf_float+0x8e>
   25a46:	0023      	movs	r3, r4
   25a48:	222d      	movs	r2, #45	; 0x2d
   25a4a:	3343      	adds	r3, #67	; 0x43
   25a4c:	701a      	strb	r2, [r3, #0]
   25a4e:	4db3      	ldr	r5, [pc, #716]	; (25d1c <_printf_float+0x35c>)
   25a50:	2f47      	cmp	r7, #71	; 0x47
   25a52:	d80e      	bhi.n	25a72 <_printf_float+0xb2>
   25a54:	4db2      	ldr	r5, [pc, #712]	; (25d20 <_printf_float+0x360>)
   25a56:	e00c      	b.n	25a72 <_printf_float+0xb2>
   25a58:	0032      	movs	r2, r6
   25a5a:	002b      	movs	r3, r5
   25a5c:	0030      	movs	r0, r6
   25a5e:	0029      	movs	r1, r5
   25a60:	f002 fc92 	bl	28388 <__aeabi_dcmpun>
   25a64:	2800      	cmp	r0, #0
   25a66:	d100      	bne.n	25a6a <_printf_float+0xaa>
   25a68:	e19a      	b.n	25da0 <_printf_float+0x3e0>
   25a6a:	4dae      	ldr	r5, [pc, #696]	; (25d24 <_printf_float+0x364>)
   25a6c:	2f47      	cmp	r7, #71	; 0x47
   25a6e:	d800      	bhi.n	25a72 <_printf_float+0xb2>
   25a70:	4dad      	ldr	r5, [pc, #692]	; (25d28 <_printf_float+0x368>)
   25a72:	2303      	movs	r3, #3
   25a74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   25a76:	6123      	str	r3, [r4, #16]
   25a78:	3301      	adds	r3, #1
   25a7a:	439a      	bics	r2, r3
   25a7c:	6022      	str	r2, [r4, #0]
   25a7e:	2600      	movs	r6, #0
   25a80:	e042      	b.n	25b08 <_printf_float+0x148>
   25a82:	2f67      	cmp	r7, #103	; 0x67
   25a84:	d100      	bne.n	25a88 <_printf_float+0xc8>
   25a86:	e193      	b.n	25db0 <_printf_float+0x3f0>
   25a88:	2f47      	cmp	r7, #71	; 0x47
   25a8a:	d100      	bne.n	25a8e <_printf_float+0xce>
   25a8c:	e190      	b.n	25db0 <_printf_float+0x3f0>
   25a8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   25a90:	2100      	movs	r1, #0
   25a92:	4313      	orrs	r3, r2
   25a94:	aa12      	add	r2, sp, #72	; 0x48
   25a96:	9205      	str	r2, [sp, #20]
   25a98:	aa11      	add	r2, sp, #68	; 0x44
   25a9a:	9203      	str	r2, [sp, #12]
   25a9c:	2223      	movs	r2, #35	; 0x23
   25a9e:	6023      	str	r3, [r4, #0]
   25aa0:	9106      	str	r1, [sp, #24]
   25aa2:	9301      	str	r3, [sp, #4]
   25aa4:	a908      	add	r1, sp, #32
   25aa6:	6863      	ldr	r3, [r4, #4]
   25aa8:	1852      	adds	r2, r2, r1
   25aaa:	9202      	str	r2, [sp, #8]
   25aac:	9300      	str	r3, [sp, #0]
   25aae:	0032      	movs	r2, r6
   25ab0:	002b      	movs	r3, r5
   25ab2:	9704      	str	r7, [sp, #16]
   25ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
   25ab6:	f7ff feed 	bl	25894 <__cvt>
   25aba:	2320      	movs	r3, #32
   25abc:	003a      	movs	r2, r7
   25abe:	0005      	movs	r5, r0
   25ac0:	439a      	bics	r2, r3
   25ac2:	2a47      	cmp	r2, #71	; 0x47
   25ac4:	d100      	bne.n	25ac8 <_printf_float+0x108>
   25ac6:	e18e      	b.n	25de6 <_printf_float+0x426>
   25ac8:	9911      	ldr	r1, [sp, #68]	; 0x44
   25aca:	2f65      	cmp	r7, #101	; 0x65
   25acc:	d900      	bls.n	25ad0 <_printf_float+0x110>
   25ace:	e196      	b.n	25dfe <_printf_float+0x43e>
   25ad0:	0020      	movs	r0, r4
   25ad2:	3901      	subs	r1, #1
   25ad4:	003a      	movs	r2, r7
   25ad6:	3050      	adds	r0, #80	; 0x50
   25ad8:	9111      	str	r1, [sp, #68]	; 0x44
   25ada:	f7ff ff40 	bl	2595e <__exponent>
   25ade:	9a12      	ldr	r2, [sp, #72]	; 0x48
   25ae0:	0006      	movs	r6, r0
   25ae2:	1883      	adds	r3, r0, r2
   25ae4:	6123      	str	r3, [r4, #16]
   25ae6:	2a01      	cmp	r2, #1
   25ae8:	dd00      	ble.n	25aec <_printf_float+0x12c>
   25aea:	e185      	b.n	25df8 <_printf_float+0x438>
   25aec:	6822      	ldr	r2, [r4, #0]
   25aee:	07d2      	lsls	r2, r2, #31
   25af0:	d500      	bpl.n	25af4 <_printf_float+0x134>
   25af2:	e181      	b.n	25df8 <_printf_float+0x438>
   25af4:	2323      	movs	r3, #35	; 0x23
   25af6:	aa08      	add	r2, sp, #32
   25af8:	189b      	adds	r3, r3, r2
   25afa:	781b      	ldrb	r3, [r3, #0]
   25afc:	2b00      	cmp	r3, #0
   25afe:	d003      	beq.n	25b08 <_printf_float+0x148>
   25b00:	0023      	movs	r3, r4
   25b02:	222d      	movs	r2, #45	; 0x2d
   25b04:	3343      	adds	r3, #67	; 0x43
   25b06:	701a      	strb	r2, [r3, #0]
   25b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25b0a:	aa13      	add	r2, sp, #76	; 0x4c
   25b0c:	9300      	str	r3, [sp, #0]
   25b0e:	0021      	movs	r1, r4
   25b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25b12:	9809      	ldr	r0, [sp, #36]	; 0x24
   25b14:	f000 f9a4 	bl	25e60 <_printf_common>
   25b18:	1c43      	adds	r3, r0, #1
   25b1a:	d102      	bne.n	25b22 <_printf_float+0x162>
   25b1c:	2001      	movs	r0, #1
   25b1e:	4240      	negs	r0, r0
   25b20:	e19b      	b.n	25e5a <_printf_float+0x49a>
   25b22:	6822      	ldr	r2, [r4, #0]
   25b24:	0553      	lsls	r3, r2, #21
   25b26:	d401      	bmi.n	25b2c <_printf_float+0x16c>
   25b28:	6923      	ldr	r3, [r4, #16]
   25b2a:	e064      	b.n	25bf6 <_printf_float+0x236>
   25b2c:	2f65      	cmp	r7, #101	; 0x65
   25b2e:	d800      	bhi.n	25b32 <_printf_float+0x172>
   25b30:	e0cc      	b.n	25ccc <_printf_float+0x30c>
   25b32:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   25b34:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   25b36:	2200      	movs	r2, #0
   25b38:	2300      	movs	r3, #0
   25b3a:	f7fd fe35 	bl	237a8 <__aeabi_dcmpeq>
   25b3e:	2800      	cmp	r0, #0
   25b40:	d02c      	beq.n	25b9c <_printf_float+0x1dc>
   25b42:	2301      	movs	r3, #1
   25b44:	4a79      	ldr	r2, [pc, #484]	; (25d2c <_printf_float+0x36c>)
   25b46:	990a      	ldr	r1, [sp, #40]	; 0x28
   25b48:	9809      	ldr	r0, [sp, #36]	; 0x24
   25b4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   25b4c:	47a8      	blx	r5
   25b4e:	1c43      	adds	r3, r0, #1
   25b50:	d0e4      	beq.n	25b1c <_printf_float+0x15c>
   25b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25b54:	9a12      	ldr	r2, [sp, #72]	; 0x48
   25b56:	4293      	cmp	r3, r2
   25b58:	db08      	blt.n	25b6c <_printf_float+0x1ac>
   25b5a:	6823      	ldr	r3, [r4, #0]
   25b5c:	07db      	lsls	r3, r3, #31
   25b5e:	d405      	bmi.n	25b6c <_printf_float+0x1ac>
   25b60:	6823      	ldr	r3, [r4, #0]
   25b62:	2500      	movs	r5, #0
   25b64:	079b      	lsls	r3, r3, #30
   25b66:	d500      	bpl.n	25b6a <_printf_float+0x1aa>
   25b68:	e10f      	b.n	25d8a <_printf_float+0x3ca>
   25b6a:	e113      	b.n	25d94 <_printf_float+0x3d4>
   25b6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   25b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25b70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   25b72:	990a      	ldr	r1, [sp, #40]	; 0x28
   25b74:	9809      	ldr	r0, [sp, #36]	; 0x24
   25b76:	47a8      	blx	r5
   25b78:	2500      	movs	r5, #0
   25b7a:	1c43      	adds	r3, r0, #1
   25b7c:	d0ce      	beq.n	25b1c <_printf_float+0x15c>
   25b7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25b80:	3b01      	subs	r3, #1
   25b82:	429d      	cmp	r5, r3
   25b84:	daec      	bge.n	25b60 <_printf_float+0x1a0>
   25b86:	0022      	movs	r2, r4
   25b88:	2301      	movs	r3, #1
   25b8a:	321a      	adds	r2, #26
   25b8c:	990a      	ldr	r1, [sp, #40]	; 0x28
   25b8e:	9809      	ldr	r0, [sp, #36]	; 0x24
   25b90:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   25b92:	47b0      	blx	r6
   25b94:	1c43      	adds	r3, r0, #1
   25b96:	d0c1      	beq.n	25b1c <_printf_float+0x15c>
   25b98:	3501      	adds	r5, #1
   25b9a:	e7f0      	b.n	25b7e <_printf_float+0x1be>
   25b9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25b9e:	2b00      	cmp	r3, #0
   25ba0:	dc2b      	bgt.n	25bfa <_printf_float+0x23a>
   25ba2:	2301      	movs	r3, #1
   25ba4:	4a61      	ldr	r2, [pc, #388]	; (25d2c <_printf_float+0x36c>)
   25ba6:	990a      	ldr	r1, [sp, #40]	; 0x28
   25ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
   25baa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   25bac:	47b0      	blx	r6
   25bae:	1c43      	adds	r3, r0, #1
   25bb0:	d0b4      	beq.n	25b1c <_printf_float+0x15c>
   25bb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25bb4:	2b00      	cmp	r3, #0
   25bb6:	d105      	bne.n	25bc4 <_printf_float+0x204>
   25bb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25bba:	2b00      	cmp	r3, #0
   25bbc:	d102      	bne.n	25bc4 <_printf_float+0x204>
   25bbe:	6823      	ldr	r3, [r4, #0]
   25bc0:	07db      	lsls	r3, r3, #31
   25bc2:	d5cd      	bpl.n	25b60 <_printf_float+0x1a0>
   25bc4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   25bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25bc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   25bca:	990a      	ldr	r1, [sp, #40]	; 0x28
   25bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
   25bce:	47b0      	blx	r6
   25bd0:	2600      	movs	r6, #0
   25bd2:	1c43      	adds	r3, r0, #1
   25bd4:	d0a2      	beq.n	25b1c <_printf_float+0x15c>
   25bd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25bd8:	425b      	negs	r3, r3
   25bda:	429e      	cmp	r6, r3
   25bdc:	da0a      	bge.n	25bf4 <_printf_float+0x234>
   25bde:	0022      	movs	r2, r4
   25be0:	2301      	movs	r3, #1
   25be2:	321a      	adds	r2, #26
   25be4:	990a      	ldr	r1, [sp, #40]	; 0x28
   25be6:	9809      	ldr	r0, [sp, #36]	; 0x24
   25be8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   25bea:	47b8      	blx	r7
   25bec:	1c43      	adds	r3, r0, #1
   25bee:	d095      	beq.n	25b1c <_printf_float+0x15c>
   25bf0:	3601      	adds	r6, #1
   25bf2:	e7f0      	b.n	25bd6 <_printf_float+0x216>
   25bf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25bf6:	002a      	movs	r2, r5
   25bf8:	e0ac      	b.n	25d54 <_printf_float+0x394>
   25bfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
   25bfc:	9e12      	ldr	r6, [sp, #72]	; 0x48
   25bfe:	429e      	cmp	r6, r3
   25c00:	dd00      	ble.n	25c04 <_printf_float+0x244>
   25c02:	001e      	movs	r6, r3
   25c04:	2e00      	cmp	r6, #0
   25c06:	dc05      	bgt.n	25c14 <_printf_float+0x254>
   25c08:	2300      	movs	r3, #0
   25c0a:	930c      	str	r3, [sp, #48]	; 0x30
   25c0c:	43f3      	mvns	r3, r6
   25c0e:	17db      	asrs	r3, r3, #31
   25c10:	930f      	str	r3, [sp, #60]	; 0x3c
   25c12:	e015      	b.n	25c40 <_printf_float+0x280>
   25c14:	0033      	movs	r3, r6
   25c16:	002a      	movs	r2, r5
   25c18:	990a      	ldr	r1, [sp, #40]	; 0x28
   25c1a:	9809      	ldr	r0, [sp, #36]	; 0x24
   25c1c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   25c1e:	47b8      	blx	r7
   25c20:	1c43      	adds	r3, r0, #1
   25c22:	d1f1      	bne.n	25c08 <_printf_float+0x248>
   25c24:	e77a      	b.n	25b1c <_printf_float+0x15c>
   25c26:	0022      	movs	r2, r4
   25c28:	2301      	movs	r3, #1
   25c2a:	321a      	adds	r2, #26
   25c2c:	990a      	ldr	r1, [sp, #40]	; 0x28
   25c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
   25c30:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   25c32:	47b8      	blx	r7
   25c34:	1c43      	adds	r3, r0, #1
   25c36:	d100      	bne.n	25c3a <_printf_float+0x27a>
   25c38:	e770      	b.n	25b1c <_printf_float+0x15c>
   25c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25c3c:	3301      	adds	r3, #1
   25c3e:	930c      	str	r3, [sp, #48]	; 0x30
   25c40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25c42:	6da2      	ldr	r2, [r4, #88]	; 0x58
   25c44:	990c      	ldr	r1, [sp, #48]	; 0x30
   25c46:	4033      	ands	r3, r6
   25c48:	1ad3      	subs	r3, r2, r3
   25c4a:	4299      	cmp	r1, r3
   25c4c:	dbeb      	blt.n	25c26 <_printf_float+0x266>
   25c4e:	18ae      	adds	r6, r5, r2
   25c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25c52:	9a12      	ldr	r2, [sp, #72]	; 0x48
   25c54:	4293      	cmp	r3, r2
   25c56:	db0d      	blt.n	25c74 <_printf_float+0x2b4>
   25c58:	6823      	ldr	r3, [r4, #0]
   25c5a:	07db      	lsls	r3, r3, #31
   25c5c:	d40a      	bmi.n	25c74 <_printf_float+0x2b4>
   25c5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25c60:	9a11      	ldr	r2, [sp, #68]	; 0x44
   25c62:	18ed      	adds	r5, r5, r3
   25c64:	1bad      	subs	r5, r5, r6
   25c66:	1a9b      	subs	r3, r3, r2
   25c68:	429d      	cmp	r5, r3
   25c6a:	dd00      	ble.n	25c6e <_printf_float+0x2ae>
   25c6c:	001d      	movs	r5, r3
   25c6e:	2d00      	cmp	r5, #0
   25c70:	dc09      	bgt.n	25c86 <_printf_float+0x2c6>
   25c72:	e011      	b.n	25c98 <_printf_float+0x2d8>
   25c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25c76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   25c78:	990a      	ldr	r1, [sp, #40]	; 0x28
   25c7a:	9809      	ldr	r0, [sp, #36]	; 0x24
   25c7c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   25c7e:	47b8      	blx	r7
   25c80:	1c43      	adds	r3, r0, #1
   25c82:	d1ec      	bne.n	25c5e <_printf_float+0x29e>
   25c84:	e74a      	b.n	25b1c <_printf_float+0x15c>
   25c86:	002b      	movs	r3, r5
   25c88:	0032      	movs	r2, r6
   25c8a:	990a      	ldr	r1, [sp, #40]	; 0x28
   25c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
   25c8e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   25c90:	47b0      	blx	r6
   25c92:	1c43      	adds	r3, r0, #1
   25c94:	d100      	bne.n	25c98 <_printf_float+0x2d8>
   25c96:	e741      	b.n	25b1c <_printf_float+0x15c>
   25c98:	43ef      	mvns	r7, r5
   25c9a:	17fb      	asrs	r3, r7, #31
   25c9c:	2600      	movs	r6, #0
   25c9e:	930c      	str	r3, [sp, #48]	; 0x30
   25ca0:	e00a      	b.n	25cb8 <_printf_float+0x2f8>
   25ca2:	0022      	movs	r2, r4
   25ca4:	2301      	movs	r3, #1
   25ca6:	321a      	adds	r2, #26
   25ca8:	990a      	ldr	r1, [sp, #40]	; 0x28
   25caa:	9809      	ldr	r0, [sp, #36]	; 0x24
   25cac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   25cae:	47b8      	blx	r7
   25cb0:	1c43      	adds	r3, r0, #1
   25cb2:	d100      	bne.n	25cb6 <_printf_float+0x2f6>
   25cb4:	e732      	b.n	25b1c <_printf_float+0x15c>
   25cb6:	3601      	adds	r6, #1
   25cb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   25cba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25cbc:	990c      	ldr	r1, [sp, #48]	; 0x30
   25cbe:	1a9b      	subs	r3, r3, r2
   25cc0:	002a      	movs	r2, r5
   25cc2:	400a      	ands	r2, r1
   25cc4:	1a9b      	subs	r3, r3, r2
   25cc6:	429e      	cmp	r6, r3
   25cc8:	dbeb      	blt.n	25ca2 <_printf_float+0x2e2>
   25cca:	e749      	b.n	25b60 <_printf_float+0x1a0>
   25ccc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25cce:	2b01      	cmp	r3, #1
   25cd0:	dc02      	bgt.n	25cd8 <_printf_float+0x318>
   25cd2:	2301      	movs	r3, #1
   25cd4:	421a      	tst	r2, r3
   25cd6:	d045      	beq.n	25d64 <_printf_float+0x3a4>
   25cd8:	2301      	movs	r3, #1
   25cda:	002a      	movs	r2, r5
   25cdc:	990a      	ldr	r1, [sp, #40]	; 0x28
   25cde:	9809      	ldr	r0, [sp, #36]	; 0x24
   25ce0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   25ce2:	47b8      	blx	r7
   25ce4:	1c43      	adds	r3, r0, #1
   25ce6:	d100      	bne.n	25cea <_printf_float+0x32a>
   25ce8:	e718      	b.n	25b1c <_printf_float+0x15c>
   25cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25cec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   25cee:	990a      	ldr	r1, [sp, #40]	; 0x28
   25cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
   25cf2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   25cf4:	47b8      	blx	r7
   25cf6:	1c43      	adds	r3, r0, #1
   25cf8:	d100      	bne.n	25cfc <_printf_float+0x33c>
   25cfa:	e70f      	b.n	25b1c <_printf_float+0x15c>
   25cfc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   25cfe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   25d00:	2200      	movs	r2, #0
   25d02:	2300      	movs	r3, #0
   25d04:	f7fd fd50 	bl	237a8 <__aeabi_dcmpeq>
   25d08:	2800      	cmp	r0, #0
   25d0a:	d001      	beq.n	25d10 <_printf_float+0x350>
   25d0c:	2500      	movs	r5, #0
   25d0e:	e01a      	b.n	25d46 <_printf_float+0x386>
   25d10:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25d12:	1c6a      	adds	r2, r5, #1
   25d14:	3b01      	subs	r3, #1
   25d16:	e026      	b.n	25d66 <_printf_float+0x3a6>
   25d18:	7fefffff 	.word	0x7fefffff
   25d1c:	0002edb6 	.word	0x0002edb6
   25d20:	0002edb2 	.word	0x0002edb2
   25d24:	0002edbe 	.word	0x0002edbe
   25d28:	0002edba 	.word	0x0002edba
   25d2c:	0002edc2 	.word	0x0002edc2
   25d30:	0022      	movs	r2, r4
   25d32:	2301      	movs	r3, #1
   25d34:	321a      	adds	r2, #26
   25d36:	990a      	ldr	r1, [sp, #40]	; 0x28
   25d38:	9809      	ldr	r0, [sp, #36]	; 0x24
   25d3a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   25d3c:	47b8      	blx	r7
   25d3e:	1c43      	adds	r3, r0, #1
   25d40:	d100      	bne.n	25d44 <_printf_float+0x384>
   25d42:	e6eb      	b.n	25b1c <_printf_float+0x15c>
   25d44:	3501      	adds	r5, #1
   25d46:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25d48:	3b01      	subs	r3, #1
   25d4a:	429d      	cmp	r5, r3
   25d4c:	dbf0      	blt.n	25d30 <_printf_float+0x370>
   25d4e:	0022      	movs	r2, r4
   25d50:	0033      	movs	r3, r6
   25d52:	3250      	adds	r2, #80	; 0x50
   25d54:	990a      	ldr	r1, [sp, #40]	; 0x28
   25d56:	9809      	ldr	r0, [sp, #36]	; 0x24
   25d58:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   25d5a:	47a8      	blx	r5
   25d5c:	1c43      	adds	r3, r0, #1
   25d5e:	d000      	beq.n	25d62 <_printf_float+0x3a2>
   25d60:	e6fe      	b.n	25b60 <_printf_float+0x1a0>
   25d62:	e6db      	b.n	25b1c <_printf_float+0x15c>
   25d64:	002a      	movs	r2, r5
   25d66:	990a      	ldr	r1, [sp, #40]	; 0x28
   25d68:	9809      	ldr	r0, [sp, #36]	; 0x24
   25d6a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   25d6c:	47a8      	blx	r5
   25d6e:	1c43      	adds	r3, r0, #1
   25d70:	d1ed      	bne.n	25d4e <_printf_float+0x38e>
   25d72:	e6d3      	b.n	25b1c <_printf_float+0x15c>
   25d74:	0022      	movs	r2, r4
   25d76:	2301      	movs	r3, #1
   25d78:	3219      	adds	r2, #25
   25d7a:	990a      	ldr	r1, [sp, #40]	; 0x28
   25d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
   25d7e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   25d80:	47b0      	blx	r6
   25d82:	1c43      	adds	r3, r0, #1
   25d84:	d100      	bne.n	25d88 <_printf_float+0x3c8>
   25d86:	e6c9      	b.n	25b1c <_printf_float+0x15c>
   25d88:	3501      	adds	r5, #1
   25d8a:	68e3      	ldr	r3, [r4, #12]
   25d8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   25d8e:	1a9b      	subs	r3, r3, r2
   25d90:	429d      	cmp	r5, r3
   25d92:	dbef      	blt.n	25d74 <_printf_float+0x3b4>
   25d94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   25d96:	68e0      	ldr	r0, [r4, #12]
   25d98:	4298      	cmp	r0, r3
   25d9a:	da5e      	bge.n	25e5a <_printf_float+0x49a>
   25d9c:	0018      	movs	r0, r3
   25d9e:	e05c      	b.n	25e5a <_printf_float+0x49a>
   25da0:	2380      	movs	r3, #128	; 0x80
   25da2:	6862      	ldr	r2, [r4, #4]
   25da4:	00db      	lsls	r3, r3, #3
   25da6:	1c51      	adds	r1, r2, #1
   25da8:	d000      	beq.n	25dac <_printf_float+0x3ec>
   25daa:	e66a      	b.n	25a82 <_printf_float+0xc2>
   25dac:	3207      	adds	r2, #7
   25dae:	e002      	b.n	25db6 <_printf_float+0x3f6>
   25db0:	2a00      	cmp	r2, #0
   25db2:	d102      	bne.n	25dba <_printf_float+0x3fa>
   25db4:	2201      	movs	r2, #1
   25db6:	6062      	str	r2, [r4, #4]
   25db8:	e669      	b.n	25a8e <_printf_float+0xce>
   25dba:	990c      	ldr	r1, [sp, #48]	; 0x30
   25dbc:	a808      	add	r0, sp, #32
   25dbe:	430b      	orrs	r3, r1
   25dc0:	2100      	movs	r1, #0
   25dc2:	9106      	str	r1, [sp, #24]
   25dc4:	a912      	add	r1, sp, #72	; 0x48
   25dc6:	9105      	str	r1, [sp, #20]
   25dc8:	a911      	add	r1, sp, #68	; 0x44
   25dca:	9103      	str	r1, [sp, #12]
   25dcc:	2123      	movs	r1, #35	; 0x23
   25dce:	1809      	adds	r1, r1, r0
   25dd0:	6023      	str	r3, [r4, #0]
   25dd2:	9301      	str	r3, [sp, #4]
   25dd4:	9200      	str	r2, [sp, #0]
   25dd6:	002b      	movs	r3, r5
   25dd8:	9704      	str	r7, [sp, #16]
   25dda:	9102      	str	r1, [sp, #8]
   25ddc:	0032      	movs	r2, r6
   25dde:	9809      	ldr	r0, [sp, #36]	; 0x24
   25de0:	f7ff fd58 	bl	25894 <__cvt>
   25de4:	0005      	movs	r5, r0
   25de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25de8:	1cda      	adds	r2, r3, #3
   25dea:	db02      	blt.n	25df2 <_printf_float+0x432>
   25dec:	6862      	ldr	r2, [r4, #4]
   25dee:	4293      	cmp	r3, r2
   25df0:	dd1c      	ble.n	25e2c <_printf_float+0x46c>
   25df2:	3f02      	subs	r7, #2
   25df4:	b2ff      	uxtb	r7, r7
   25df6:	e667      	b.n	25ac8 <_printf_float+0x108>
   25df8:	3301      	adds	r3, #1
   25dfa:	6123      	str	r3, [r4, #16]
   25dfc:	e67a      	b.n	25af4 <_printf_float+0x134>
   25dfe:	2f66      	cmp	r7, #102	; 0x66
   25e00:	d115      	bne.n	25e2e <_printf_float+0x46e>
   25e02:	6863      	ldr	r3, [r4, #4]
   25e04:	2900      	cmp	r1, #0
   25e06:	dd09      	ble.n	25e1c <_printf_float+0x45c>
   25e08:	6121      	str	r1, [r4, #16]
   25e0a:	2b00      	cmp	r3, #0
   25e0c:	d102      	bne.n	25e14 <_printf_float+0x454>
   25e0e:	6822      	ldr	r2, [r4, #0]
   25e10:	07d2      	lsls	r2, r2, #31
   25e12:	d51e      	bpl.n	25e52 <_printf_float+0x492>
   25e14:	3301      	adds	r3, #1
   25e16:	1859      	adds	r1, r3, r1
   25e18:	6121      	str	r1, [r4, #16]
   25e1a:	e01a      	b.n	25e52 <_printf_float+0x492>
   25e1c:	2b00      	cmp	r3, #0
   25e1e:	d103      	bne.n	25e28 <_printf_float+0x468>
   25e20:	2201      	movs	r2, #1
   25e22:	6821      	ldr	r1, [r4, #0]
   25e24:	4211      	tst	r1, r2
   25e26:	d013      	beq.n	25e50 <_printf_float+0x490>
   25e28:	1c9a      	adds	r2, r3, #2
   25e2a:	e011      	b.n	25e50 <_printf_float+0x490>
   25e2c:	2767      	movs	r7, #103	; 0x67
   25e2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25e30:	9a12      	ldr	r2, [sp, #72]	; 0x48
   25e32:	4293      	cmp	r3, r2
   25e34:	db06      	blt.n	25e44 <_printf_float+0x484>
   25e36:	6822      	ldr	r2, [r4, #0]
   25e38:	6123      	str	r3, [r4, #16]
   25e3a:	07d2      	lsls	r2, r2, #31
   25e3c:	d509      	bpl.n	25e52 <_printf_float+0x492>
   25e3e:	3301      	adds	r3, #1
   25e40:	6123      	str	r3, [r4, #16]
   25e42:	e006      	b.n	25e52 <_printf_float+0x492>
   25e44:	2101      	movs	r1, #1
   25e46:	2b00      	cmp	r3, #0
   25e48:	dc01      	bgt.n	25e4e <_printf_float+0x48e>
   25e4a:	1849      	adds	r1, r1, r1
   25e4c:	1ac9      	subs	r1, r1, r3
   25e4e:	188a      	adds	r2, r1, r2
   25e50:	6122      	str	r2, [r4, #16]
   25e52:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25e54:	2600      	movs	r6, #0
   25e56:	65a3      	str	r3, [r4, #88]	; 0x58
   25e58:	e64c      	b.n	25af4 <_printf_float+0x134>
   25e5a:	b015      	add	sp, #84	; 0x54
   25e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25e5e:	46c0      	nop			; (mov r8, r8)

00025e60 <_printf_common>:
   25e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25e62:	0017      	movs	r7, r2
   25e64:	9301      	str	r3, [sp, #4]
   25e66:	688a      	ldr	r2, [r1, #8]
   25e68:	690b      	ldr	r3, [r1, #16]
   25e6a:	9000      	str	r0, [sp, #0]
   25e6c:	000c      	movs	r4, r1
   25e6e:	4293      	cmp	r3, r2
   25e70:	da00      	bge.n	25e74 <_printf_common+0x14>
   25e72:	0013      	movs	r3, r2
   25e74:	0022      	movs	r2, r4
   25e76:	603b      	str	r3, [r7, #0]
   25e78:	3243      	adds	r2, #67	; 0x43
   25e7a:	7812      	ldrb	r2, [r2, #0]
   25e7c:	2a00      	cmp	r2, #0
   25e7e:	d001      	beq.n	25e84 <_printf_common+0x24>
   25e80:	3301      	adds	r3, #1
   25e82:	603b      	str	r3, [r7, #0]
   25e84:	6823      	ldr	r3, [r4, #0]
   25e86:	069b      	lsls	r3, r3, #26
   25e88:	d502      	bpl.n	25e90 <_printf_common+0x30>
   25e8a:	683b      	ldr	r3, [r7, #0]
   25e8c:	3302      	adds	r3, #2
   25e8e:	603b      	str	r3, [r7, #0]
   25e90:	2506      	movs	r5, #6
   25e92:	6823      	ldr	r3, [r4, #0]
   25e94:	401d      	ands	r5, r3
   25e96:	d01e      	beq.n	25ed6 <_printf_common+0x76>
   25e98:	0023      	movs	r3, r4
   25e9a:	3343      	adds	r3, #67	; 0x43
   25e9c:	781b      	ldrb	r3, [r3, #0]
   25e9e:	1e5a      	subs	r2, r3, #1
   25ea0:	4193      	sbcs	r3, r2
   25ea2:	6822      	ldr	r2, [r4, #0]
   25ea4:	0692      	lsls	r2, r2, #26
   25ea6:	d51c      	bpl.n	25ee2 <_printf_common+0x82>
   25ea8:	2030      	movs	r0, #48	; 0x30
   25eaa:	18e1      	adds	r1, r4, r3
   25eac:	3143      	adds	r1, #67	; 0x43
   25eae:	7008      	strb	r0, [r1, #0]
   25eb0:	0021      	movs	r1, r4
   25eb2:	1c5a      	adds	r2, r3, #1
   25eb4:	3145      	adds	r1, #69	; 0x45
   25eb6:	7809      	ldrb	r1, [r1, #0]
   25eb8:	18a2      	adds	r2, r4, r2
   25eba:	3243      	adds	r2, #67	; 0x43
   25ebc:	3302      	adds	r3, #2
   25ebe:	7011      	strb	r1, [r2, #0]
   25ec0:	e00f      	b.n	25ee2 <_printf_common+0x82>
   25ec2:	0022      	movs	r2, r4
   25ec4:	2301      	movs	r3, #1
   25ec6:	3219      	adds	r2, #25
   25ec8:	9901      	ldr	r1, [sp, #4]
   25eca:	9800      	ldr	r0, [sp, #0]
   25ecc:	9e08      	ldr	r6, [sp, #32]
   25ece:	47b0      	blx	r6
   25ed0:	1c43      	adds	r3, r0, #1
   25ed2:	d00e      	beq.n	25ef2 <_printf_common+0x92>
   25ed4:	3501      	adds	r5, #1
   25ed6:	68e3      	ldr	r3, [r4, #12]
   25ed8:	683a      	ldr	r2, [r7, #0]
   25eda:	1a9b      	subs	r3, r3, r2
   25edc:	429d      	cmp	r5, r3
   25ede:	dbf0      	blt.n	25ec2 <_printf_common+0x62>
   25ee0:	e7da      	b.n	25e98 <_printf_common+0x38>
   25ee2:	0022      	movs	r2, r4
   25ee4:	9901      	ldr	r1, [sp, #4]
   25ee6:	3243      	adds	r2, #67	; 0x43
   25ee8:	9800      	ldr	r0, [sp, #0]
   25eea:	9d08      	ldr	r5, [sp, #32]
   25eec:	47a8      	blx	r5
   25eee:	1c43      	adds	r3, r0, #1
   25ef0:	d102      	bne.n	25ef8 <_printf_common+0x98>
   25ef2:	2001      	movs	r0, #1
   25ef4:	4240      	negs	r0, r0
   25ef6:	e020      	b.n	25f3a <_printf_common+0xda>
   25ef8:	2306      	movs	r3, #6
   25efa:	6820      	ldr	r0, [r4, #0]
   25efc:	68e1      	ldr	r1, [r4, #12]
   25efe:	683a      	ldr	r2, [r7, #0]
   25f00:	4003      	ands	r3, r0
   25f02:	2500      	movs	r5, #0
   25f04:	2b04      	cmp	r3, #4
   25f06:	d103      	bne.n	25f10 <_printf_common+0xb0>
   25f08:	1a8d      	subs	r5, r1, r2
   25f0a:	43eb      	mvns	r3, r5
   25f0c:	17db      	asrs	r3, r3, #31
   25f0e:	401d      	ands	r5, r3
   25f10:	68a3      	ldr	r3, [r4, #8]
   25f12:	6922      	ldr	r2, [r4, #16]
   25f14:	4293      	cmp	r3, r2
   25f16:	dd01      	ble.n	25f1c <_printf_common+0xbc>
   25f18:	1a9b      	subs	r3, r3, r2
   25f1a:	18ed      	adds	r5, r5, r3
   25f1c:	2700      	movs	r7, #0
   25f1e:	42bd      	cmp	r5, r7
   25f20:	d00a      	beq.n	25f38 <_printf_common+0xd8>
   25f22:	0022      	movs	r2, r4
   25f24:	2301      	movs	r3, #1
   25f26:	321a      	adds	r2, #26
   25f28:	9901      	ldr	r1, [sp, #4]
   25f2a:	9800      	ldr	r0, [sp, #0]
   25f2c:	9e08      	ldr	r6, [sp, #32]
   25f2e:	47b0      	blx	r6
   25f30:	1c43      	adds	r3, r0, #1
   25f32:	d0de      	beq.n	25ef2 <_printf_common+0x92>
   25f34:	3701      	adds	r7, #1
   25f36:	e7f2      	b.n	25f1e <_printf_common+0xbe>
   25f38:	2000      	movs	r0, #0
   25f3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00025f3c <_printf_i>:
   25f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25f3e:	b08b      	sub	sp, #44	; 0x2c
   25f40:	9206      	str	r2, [sp, #24]
   25f42:	000a      	movs	r2, r1
   25f44:	3243      	adds	r2, #67	; 0x43
   25f46:	9307      	str	r3, [sp, #28]
   25f48:	9005      	str	r0, [sp, #20]
   25f4a:	9204      	str	r2, [sp, #16]
   25f4c:	7e0a      	ldrb	r2, [r1, #24]
   25f4e:	000c      	movs	r4, r1
   25f50:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25f52:	2a6e      	cmp	r2, #110	; 0x6e
   25f54:	d100      	bne.n	25f58 <_printf_i+0x1c>
   25f56:	e0ab      	b.n	260b0 <_printf_i+0x174>
   25f58:	d811      	bhi.n	25f7e <_printf_i+0x42>
   25f5a:	2a63      	cmp	r2, #99	; 0x63
   25f5c:	d022      	beq.n	25fa4 <_printf_i+0x68>
   25f5e:	d809      	bhi.n	25f74 <_printf_i+0x38>
   25f60:	2a00      	cmp	r2, #0
   25f62:	d100      	bne.n	25f66 <_printf_i+0x2a>
   25f64:	e0b5      	b.n	260d2 <_printf_i+0x196>
   25f66:	2a58      	cmp	r2, #88	; 0x58
   25f68:	d000      	beq.n	25f6c <_printf_i+0x30>
   25f6a:	e0c5      	b.n	260f8 <_printf_i+0x1bc>
   25f6c:	3145      	adds	r1, #69	; 0x45
   25f6e:	700a      	strb	r2, [r1, #0]
   25f70:	4a81      	ldr	r2, [pc, #516]	; (26178 <_printf_i+0x23c>)
   25f72:	e04f      	b.n	26014 <_printf_i+0xd8>
   25f74:	2a64      	cmp	r2, #100	; 0x64
   25f76:	d01d      	beq.n	25fb4 <_printf_i+0x78>
   25f78:	2a69      	cmp	r2, #105	; 0x69
   25f7a:	d01b      	beq.n	25fb4 <_printf_i+0x78>
   25f7c:	e0bc      	b.n	260f8 <_printf_i+0x1bc>
   25f7e:	2a73      	cmp	r2, #115	; 0x73
   25f80:	d100      	bne.n	25f84 <_printf_i+0x48>
   25f82:	e0aa      	b.n	260da <_printf_i+0x19e>
   25f84:	d809      	bhi.n	25f9a <_printf_i+0x5e>
   25f86:	2a6f      	cmp	r2, #111	; 0x6f
   25f88:	d029      	beq.n	25fde <_printf_i+0xa2>
   25f8a:	2a70      	cmp	r2, #112	; 0x70
   25f8c:	d000      	beq.n	25f90 <_printf_i+0x54>
   25f8e:	e0b3      	b.n	260f8 <_printf_i+0x1bc>
   25f90:	2220      	movs	r2, #32
   25f92:	6809      	ldr	r1, [r1, #0]
   25f94:	430a      	orrs	r2, r1
   25f96:	6022      	str	r2, [r4, #0]
   25f98:	e037      	b.n	2600a <_printf_i+0xce>
   25f9a:	2a75      	cmp	r2, #117	; 0x75
   25f9c:	d01f      	beq.n	25fde <_printf_i+0xa2>
   25f9e:	2a78      	cmp	r2, #120	; 0x78
   25fa0:	d033      	beq.n	2600a <_printf_i+0xce>
   25fa2:	e0a9      	b.n	260f8 <_printf_i+0x1bc>
   25fa4:	000e      	movs	r6, r1
   25fa6:	681a      	ldr	r2, [r3, #0]
   25fa8:	3642      	adds	r6, #66	; 0x42
   25faa:	1d11      	adds	r1, r2, #4
   25fac:	6019      	str	r1, [r3, #0]
   25fae:	6813      	ldr	r3, [r2, #0]
   25fb0:	7033      	strb	r3, [r6, #0]
   25fb2:	e0a4      	b.n	260fe <_printf_i+0x1c2>
   25fb4:	6821      	ldr	r1, [r4, #0]
   25fb6:	681a      	ldr	r2, [r3, #0]
   25fb8:	0608      	lsls	r0, r1, #24
   25fba:	d406      	bmi.n	25fca <_printf_i+0x8e>
   25fbc:	0649      	lsls	r1, r1, #25
   25fbe:	d504      	bpl.n	25fca <_printf_i+0x8e>
   25fc0:	1d11      	adds	r1, r2, #4
   25fc2:	6019      	str	r1, [r3, #0]
   25fc4:	2300      	movs	r3, #0
   25fc6:	5ed5      	ldrsh	r5, [r2, r3]
   25fc8:	e002      	b.n	25fd0 <_printf_i+0x94>
   25fca:	1d11      	adds	r1, r2, #4
   25fcc:	6019      	str	r1, [r3, #0]
   25fce:	6815      	ldr	r5, [r2, #0]
   25fd0:	2d00      	cmp	r5, #0
   25fd2:	da3b      	bge.n	2604c <_printf_i+0x110>
   25fd4:	232d      	movs	r3, #45	; 0x2d
   25fd6:	9a04      	ldr	r2, [sp, #16]
   25fd8:	426d      	negs	r5, r5
   25fda:	7013      	strb	r3, [r2, #0]
   25fdc:	e036      	b.n	2604c <_printf_i+0x110>
   25fde:	6821      	ldr	r1, [r4, #0]
   25fe0:	681a      	ldr	r2, [r3, #0]
   25fe2:	0608      	lsls	r0, r1, #24
   25fe4:	d406      	bmi.n	25ff4 <_printf_i+0xb8>
   25fe6:	0649      	lsls	r1, r1, #25
   25fe8:	d504      	bpl.n	25ff4 <_printf_i+0xb8>
   25fea:	6815      	ldr	r5, [r2, #0]
   25fec:	1d11      	adds	r1, r2, #4
   25fee:	6019      	str	r1, [r3, #0]
   25ff0:	b2ad      	uxth	r5, r5
   25ff2:	e002      	b.n	25ffa <_printf_i+0xbe>
   25ff4:	1d11      	adds	r1, r2, #4
   25ff6:	6019      	str	r1, [r3, #0]
   25ff8:	6815      	ldr	r5, [r2, #0]
   25ffa:	4b5f      	ldr	r3, [pc, #380]	; (26178 <_printf_i+0x23c>)
   25ffc:	7e22      	ldrb	r2, [r4, #24]
   25ffe:	9303      	str	r3, [sp, #12]
   26000:	2708      	movs	r7, #8
   26002:	2a6f      	cmp	r2, #111	; 0x6f
   26004:	d01d      	beq.n	26042 <_printf_i+0x106>
   26006:	270a      	movs	r7, #10
   26008:	e01b      	b.n	26042 <_printf_i+0x106>
   2600a:	0022      	movs	r2, r4
   2600c:	2178      	movs	r1, #120	; 0x78
   2600e:	3245      	adds	r2, #69	; 0x45
   26010:	7011      	strb	r1, [r2, #0]
   26012:	4a5a      	ldr	r2, [pc, #360]	; (2617c <_printf_i+0x240>)
   26014:	6819      	ldr	r1, [r3, #0]
   26016:	9203      	str	r2, [sp, #12]
   26018:	1d08      	adds	r0, r1, #4
   2601a:	6822      	ldr	r2, [r4, #0]
   2601c:	6018      	str	r0, [r3, #0]
   2601e:	680d      	ldr	r5, [r1, #0]
   26020:	0610      	lsls	r0, r2, #24
   26022:	d402      	bmi.n	2602a <_printf_i+0xee>
   26024:	0650      	lsls	r0, r2, #25
   26026:	d500      	bpl.n	2602a <_printf_i+0xee>
   26028:	b2ad      	uxth	r5, r5
   2602a:	07d3      	lsls	r3, r2, #31
   2602c:	d502      	bpl.n	26034 <_printf_i+0xf8>
   2602e:	2320      	movs	r3, #32
   26030:	431a      	orrs	r2, r3
   26032:	6022      	str	r2, [r4, #0]
   26034:	2710      	movs	r7, #16
   26036:	2d00      	cmp	r5, #0
   26038:	d103      	bne.n	26042 <_printf_i+0x106>
   2603a:	2320      	movs	r3, #32
   2603c:	6822      	ldr	r2, [r4, #0]
   2603e:	439a      	bics	r2, r3
   26040:	6022      	str	r2, [r4, #0]
   26042:	0023      	movs	r3, r4
   26044:	2200      	movs	r2, #0
   26046:	3343      	adds	r3, #67	; 0x43
   26048:	701a      	strb	r2, [r3, #0]
   2604a:	e002      	b.n	26052 <_printf_i+0x116>
   2604c:	270a      	movs	r7, #10
   2604e:	4b4a      	ldr	r3, [pc, #296]	; (26178 <_printf_i+0x23c>)
   26050:	9303      	str	r3, [sp, #12]
   26052:	6863      	ldr	r3, [r4, #4]
   26054:	60a3      	str	r3, [r4, #8]
   26056:	2b00      	cmp	r3, #0
   26058:	db09      	blt.n	2606e <_printf_i+0x132>
   2605a:	2204      	movs	r2, #4
   2605c:	6821      	ldr	r1, [r4, #0]
   2605e:	4391      	bics	r1, r2
   26060:	6021      	str	r1, [r4, #0]
   26062:	2d00      	cmp	r5, #0
   26064:	d105      	bne.n	26072 <_printf_i+0x136>
   26066:	9e04      	ldr	r6, [sp, #16]
   26068:	2b00      	cmp	r3, #0
   2606a:	d011      	beq.n	26090 <_printf_i+0x154>
   2606c:	e07b      	b.n	26166 <_printf_i+0x22a>
   2606e:	2d00      	cmp	r5, #0
   26070:	d079      	beq.n	26166 <_printf_i+0x22a>
   26072:	9e04      	ldr	r6, [sp, #16]
   26074:	0028      	movs	r0, r5
   26076:	0039      	movs	r1, r7
   26078:	f7fd fa96 	bl	235a8 <__aeabi_uidivmod>
   2607c:	9b03      	ldr	r3, [sp, #12]
   2607e:	3e01      	subs	r6, #1
   26080:	5c5b      	ldrb	r3, [r3, r1]
   26082:	0028      	movs	r0, r5
   26084:	7033      	strb	r3, [r6, #0]
   26086:	0039      	movs	r1, r7
   26088:	f7fd fa08 	bl	2349c <__aeabi_uidiv>
   2608c:	1e05      	subs	r5, r0, #0
   2608e:	d1f1      	bne.n	26074 <_printf_i+0x138>
   26090:	2f08      	cmp	r7, #8
   26092:	d109      	bne.n	260a8 <_printf_i+0x16c>
   26094:	6823      	ldr	r3, [r4, #0]
   26096:	07db      	lsls	r3, r3, #31
   26098:	d506      	bpl.n	260a8 <_printf_i+0x16c>
   2609a:	6863      	ldr	r3, [r4, #4]
   2609c:	6922      	ldr	r2, [r4, #16]
   2609e:	4293      	cmp	r3, r2
   260a0:	dc02      	bgt.n	260a8 <_printf_i+0x16c>
   260a2:	2330      	movs	r3, #48	; 0x30
   260a4:	3e01      	subs	r6, #1
   260a6:	7033      	strb	r3, [r6, #0]
   260a8:	9b04      	ldr	r3, [sp, #16]
   260aa:	1b9b      	subs	r3, r3, r6
   260ac:	6123      	str	r3, [r4, #16]
   260ae:	e02b      	b.n	26108 <_printf_i+0x1cc>
   260b0:	6809      	ldr	r1, [r1, #0]
   260b2:	681a      	ldr	r2, [r3, #0]
   260b4:	0608      	lsls	r0, r1, #24
   260b6:	d407      	bmi.n	260c8 <_printf_i+0x18c>
   260b8:	0649      	lsls	r1, r1, #25
   260ba:	d505      	bpl.n	260c8 <_printf_i+0x18c>
   260bc:	1d11      	adds	r1, r2, #4
   260be:	6019      	str	r1, [r3, #0]
   260c0:	6813      	ldr	r3, [r2, #0]
   260c2:	8aa2      	ldrh	r2, [r4, #20]
   260c4:	801a      	strh	r2, [r3, #0]
   260c6:	e004      	b.n	260d2 <_printf_i+0x196>
   260c8:	1d11      	adds	r1, r2, #4
   260ca:	6019      	str	r1, [r3, #0]
   260cc:	6813      	ldr	r3, [r2, #0]
   260ce:	6962      	ldr	r2, [r4, #20]
   260d0:	601a      	str	r2, [r3, #0]
   260d2:	2300      	movs	r3, #0
   260d4:	9e04      	ldr	r6, [sp, #16]
   260d6:	6123      	str	r3, [r4, #16]
   260d8:	e016      	b.n	26108 <_printf_i+0x1cc>
   260da:	681a      	ldr	r2, [r3, #0]
   260dc:	1d11      	adds	r1, r2, #4
   260de:	6019      	str	r1, [r3, #0]
   260e0:	6816      	ldr	r6, [r2, #0]
   260e2:	2100      	movs	r1, #0
   260e4:	6862      	ldr	r2, [r4, #4]
   260e6:	0030      	movs	r0, r6
   260e8:	f001 f9de 	bl	274a8 <memchr>
   260ec:	2800      	cmp	r0, #0
   260ee:	d001      	beq.n	260f4 <_printf_i+0x1b8>
   260f0:	1b80      	subs	r0, r0, r6
   260f2:	6060      	str	r0, [r4, #4]
   260f4:	6863      	ldr	r3, [r4, #4]
   260f6:	e003      	b.n	26100 <_printf_i+0x1c4>
   260f8:	0026      	movs	r6, r4
   260fa:	3642      	adds	r6, #66	; 0x42
   260fc:	7032      	strb	r2, [r6, #0]
   260fe:	2301      	movs	r3, #1
   26100:	6123      	str	r3, [r4, #16]
   26102:	2300      	movs	r3, #0
   26104:	9a04      	ldr	r2, [sp, #16]
   26106:	7013      	strb	r3, [r2, #0]
   26108:	9b07      	ldr	r3, [sp, #28]
   2610a:	aa09      	add	r2, sp, #36	; 0x24
   2610c:	9300      	str	r3, [sp, #0]
   2610e:	0021      	movs	r1, r4
   26110:	9b06      	ldr	r3, [sp, #24]
   26112:	9805      	ldr	r0, [sp, #20]
   26114:	f7ff fea4 	bl	25e60 <_printf_common>
   26118:	1c43      	adds	r3, r0, #1
   2611a:	d102      	bne.n	26122 <_printf_i+0x1e6>
   2611c:	2001      	movs	r0, #1
   2611e:	4240      	negs	r0, r0
   26120:	e027      	b.n	26172 <_printf_i+0x236>
   26122:	6923      	ldr	r3, [r4, #16]
   26124:	0032      	movs	r2, r6
   26126:	9906      	ldr	r1, [sp, #24]
   26128:	9805      	ldr	r0, [sp, #20]
   2612a:	9d07      	ldr	r5, [sp, #28]
   2612c:	47a8      	blx	r5
   2612e:	1c43      	adds	r3, r0, #1
   26130:	d0f4      	beq.n	2611c <_printf_i+0x1e0>
   26132:	6823      	ldr	r3, [r4, #0]
   26134:	2500      	movs	r5, #0
   26136:	079b      	lsls	r3, r3, #30
   26138:	d40f      	bmi.n	2615a <_printf_i+0x21e>
   2613a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2613c:	68e0      	ldr	r0, [r4, #12]
   2613e:	4298      	cmp	r0, r3
   26140:	da17      	bge.n	26172 <_printf_i+0x236>
   26142:	0018      	movs	r0, r3
   26144:	e015      	b.n	26172 <_printf_i+0x236>
   26146:	0022      	movs	r2, r4
   26148:	2301      	movs	r3, #1
   2614a:	3219      	adds	r2, #25
   2614c:	9906      	ldr	r1, [sp, #24]
   2614e:	9805      	ldr	r0, [sp, #20]
   26150:	9e07      	ldr	r6, [sp, #28]
   26152:	47b0      	blx	r6
   26154:	1c43      	adds	r3, r0, #1
   26156:	d0e1      	beq.n	2611c <_printf_i+0x1e0>
   26158:	3501      	adds	r5, #1
   2615a:	68e3      	ldr	r3, [r4, #12]
   2615c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2615e:	1a9b      	subs	r3, r3, r2
   26160:	429d      	cmp	r5, r3
   26162:	dbf0      	blt.n	26146 <_printf_i+0x20a>
   26164:	e7e9      	b.n	2613a <_printf_i+0x1fe>
   26166:	0026      	movs	r6, r4
   26168:	9b03      	ldr	r3, [sp, #12]
   2616a:	3642      	adds	r6, #66	; 0x42
   2616c:	781b      	ldrb	r3, [r3, #0]
   2616e:	7033      	strb	r3, [r6, #0]
   26170:	e78e      	b.n	26090 <_printf_i+0x154>
   26172:	b00b      	add	sp, #44	; 0x2c
   26174:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26176:	46c0      	nop			; (mov r8, r8)
   26178:	0002edc4 	.word	0x0002edc4
   2617c:	0002edd5 	.word	0x0002edd5

00026180 <iprintf>:
   26180:	b40f      	push	{r0, r1, r2, r3}
   26182:	4b0b      	ldr	r3, [pc, #44]	; (261b0 <iprintf+0x30>)
   26184:	b513      	push	{r0, r1, r4, lr}
   26186:	681c      	ldr	r4, [r3, #0]
   26188:	2c00      	cmp	r4, #0
   2618a:	d005      	beq.n	26198 <iprintf+0x18>
   2618c:	69a3      	ldr	r3, [r4, #24]
   2618e:	2b00      	cmp	r3, #0
   26190:	d102      	bne.n	26198 <iprintf+0x18>
   26192:	0020      	movs	r0, r4
   26194:	f001 f884 	bl	272a0 <__sinit>
   26198:	ab05      	add	r3, sp, #20
   2619a:	9a04      	ldr	r2, [sp, #16]
   2619c:	68a1      	ldr	r1, [r4, #8]
   2619e:	0020      	movs	r0, r4
   261a0:	9301      	str	r3, [sp, #4]
   261a2:	f001 fe0f 	bl	27dc4 <_vfiprintf_r>
   261a6:	bc16      	pop	{r1, r2, r4}
   261a8:	bc08      	pop	{r3}
   261aa:	b004      	add	sp, #16
   261ac:	4718      	bx	r3
   261ae:	46c0      	nop			; (mov r8, r8)
   261b0:	20000120 	.word	0x20000120

000261b4 <_sbrk_r>:
   261b4:	2300      	movs	r3, #0
   261b6:	b570      	push	{r4, r5, r6, lr}
   261b8:	4c06      	ldr	r4, [pc, #24]	; (261d4 <_sbrk_r+0x20>)
   261ba:	0005      	movs	r5, r0
   261bc:	0008      	movs	r0, r1
   261be:	6023      	str	r3, [r4, #0]
   261c0:	f7de ff1e 	bl	5000 <_sbrk>
   261c4:	1c43      	adds	r3, r0, #1
   261c6:	d103      	bne.n	261d0 <_sbrk_r+0x1c>
   261c8:	6823      	ldr	r3, [r4, #0]
   261ca:	2b00      	cmp	r3, #0
   261cc:	d000      	beq.n	261d0 <_sbrk_r+0x1c>
   261ce:	602b      	str	r3, [r5, #0]
   261d0:	bd70      	pop	{r4, r5, r6, pc}
   261d2:	46c0      	nop			; (mov r8, r8)
   261d4:	2000053c 	.word	0x2000053c

000261d8 <setbuf>:
   261d8:	424a      	negs	r2, r1
   261da:	414a      	adcs	r2, r1
   261dc:	2380      	movs	r3, #128	; 0x80
   261de:	b510      	push	{r4, lr}
   261e0:	0052      	lsls	r2, r2, #1
   261e2:	00db      	lsls	r3, r3, #3
   261e4:	f000 f802 	bl	261ec <setvbuf>
   261e8:	bd10      	pop	{r4, pc}
	...

000261ec <setvbuf>:
   261ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   261ee:	001d      	movs	r5, r3
   261f0:	4b51      	ldr	r3, [pc, #324]	; (26338 <setvbuf+0x14c>)
   261f2:	b085      	sub	sp, #20
   261f4:	681e      	ldr	r6, [r3, #0]
   261f6:	0004      	movs	r4, r0
   261f8:	000f      	movs	r7, r1
   261fa:	9200      	str	r2, [sp, #0]
   261fc:	2e00      	cmp	r6, #0
   261fe:	d005      	beq.n	2620c <setvbuf+0x20>
   26200:	69b3      	ldr	r3, [r6, #24]
   26202:	2b00      	cmp	r3, #0
   26204:	d102      	bne.n	2620c <setvbuf+0x20>
   26206:	0030      	movs	r0, r6
   26208:	f001 f84a 	bl	272a0 <__sinit>
   2620c:	4b4b      	ldr	r3, [pc, #300]	; (2633c <setvbuf+0x150>)
   2620e:	429c      	cmp	r4, r3
   26210:	d101      	bne.n	26216 <setvbuf+0x2a>
   26212:	6874      	ldr	r4, [r6, #4]
   26214:	e008      	b.n	26228 <setvbuf+0x3c>
   26216:	4b4a      	ldr	r3, [pc, #296]	; (26340 <setvbuf+0x154>)
   26218:	429c      	cmp	r4, r3
   2621a:	d101      	bne.n	26220 <setvbuf+0x34>
   2621c:	68b4      	ldr	r4, [r6, #8]
   2621e:	e003      	b.n	26228 <setvbuf+0x3c>
   26220:	4b48      	ldr	r3, [pc, #288]	; (26344 <setvbuf+0x158>)
   26222:	429c      	cmp	r4, r3
   26224:	d100      	bne.n	26228 <setvbuf+0x3c>
   26226:	68f4      	ldr	r4, [r6, #12]
   26228:	9b00      	ldr	r3, [sp, #0]
   2622a:	2b02      	cmp	r3, #2
   2622c:	d005      	beq.n	2623a <setvbuf+0x4e>
   2622e:	2b01      	cmp	r3, #1
   26230:	d900      	bls.n	26234 <setvbuf+0x48>
   26232:	e07c      	b.n	2632e <setvbuf+0x142>
   26234:	2d00      	cmp	r5, #0
   26236:	da00      	bge.n	2623a <setvbuf+0x4e>
   26238:	e079      	b.n	2632e <setvbuf+0x142>
   2623a:	0021      	movs	r1, r4
   2623c:	0030      	movs	r0, r6
   2623e:	f000 ffc1 	bl	271c4 <_fflush_r>
   26242:	6b61      	ldr	r1, [r4, #52]	; 0x34
   26244:	2900      	cmp	r1, #0
   26246:	d008      	beq.n	2625a <setvbuf+0x6e>
   26248:	0023      	movs	r3, r4
   2624a:	3344      	adds	r3, #68	; 0x44
   2624c:	4299      	cmp	r1, r3
   2624e:	d002      	beq.n	26256 <setvbuf+0x6a>
   26250:	0030      	movs	r0, r6
   26252:	f7ff fa73 	bl	2573c <_free_r>
   26256:	2300      	movs	r3, #0
   26258:	6363      	str	r3, [r4, #52]	; 0x34
   2625a:	2300      	movs	r3, #0
   2625c:	61a3      	str	r3, [r4, #24]
   2625e:	6063      	str	r3, [r4, #4]
   26260:	89a3      	ldrh	r3, [r4, #12]
   26262:	061b      	lsls	r3, r3, #24
   26264:	d503      	bpl.n	2626e <setvbuf+0x82>
   26266:	6921      	ldr	r1, [r4, #16]
   26268:	0030      	movs	r0, r6
   2626a:	f7ff fa67 	bl	2573c <_free_r>
   2626e:	89a2      	ldrh	r2, [r4, #12]
   26270:	4b35      	ldr	r3, [pc, #212]	; (26348 <setvbuf+0x15c>)
   26272:	4013      	ands	r3, r2
   26274:	81a3      	strh	r3, [r4, #12]
   26276:	9b00      	ldr	r3, [sp, #0]
   26278:	2b02      	cmp	r3, #2
   2627a:	d021      	beq.n	262c0 <setvbuf+0xd4>
   2627c:	ab03      	add	r3, sp, #12
   2627e:	aa02      	add	r2, sp, #8
   26280:	0021      	movs	r1, r4
   26282:	0030      	movs	r0, r6
   26284:	f001 f8ac 	bl	273e0 <__swhatbuf_r>
   26288:	89a3      	ldrh	r3, [r4, #12]
   2628a:	4318      	orrs	r0, r3
   2628c:	81a0      	strh	r0, [r4, #12]
   2628e:	2d00      	cmp	r5, #0
   26290:	d101      	bne.n	26296 <setvbuf+0xaa>
   26292:	9d02      	ldr	r5, [sp, #8]
   26294:	e001      	b.n	2629a <setvbuf+0xae>
   26296:	2f00      	cmp	r7, #0
   26298:	d125      	bne.n	262e6 <setvbuf+0xfa>
   2629a:	0028      	movs	r0, r5
   2629c:	f7ff f9f2 	bl	25684 <malloc>
   262a0:	9501      	str	r5, [sp, #4]
   262a2:	1e07      	subs	r7, r0, #0
   262a4:	d11a      	bne.n	262dc <setvbuf+0xf0>
   262a6:	9b02      	ldr	r3, [sp, #8]
   262a8:	9301      	str	r3, [sp, #4]
   262aa:	42ab      	cmp	r3, r5
   262ac:	d102      	bne.n	262b4 <setvbuf+0xc8>
   262ae:	2001      	movs	r0, #1
   262b0:	4240      	negs	r0, r0
   262b2:	e006      	b.n	262c2 <setvbuf+0xd6>
   262b4:	9801      	ldr	r0, [sp, #4]
   262b6:	f7ff f9e5 	bl	25684 <malloc>
   262ba:	1e07      	subs	r7, r0, #0
   262bc:	d10e      	bne.n	262dc <setvbuf+0xf0>
   262be:	e7f6      	b.n	262ae <setvbuf+0xc2>
   262c0:	2000      	movs	r0, #0
   262c2:	2202      	movs	r2, #2
   262c4:	89a3      	ldrh	r3, [r4, #12]
   262c6:	4313      	orrs	r3, r2
   262c8:	81a3      	strh	r3, [r4, #12]
   262ca:	2300      	movs	r3, #0
   262cc:	60a3      	str	r3, [r4, #8]
   262ce:	0023      	movs	r3, r4
   262d0:	3347      	adds	r3, #71	; 0x47
   262d2:	6023      	str	r3, [r4, #0]
   262d4:	6123      	str	r3, [r4, #16]
   262d6:	2301      	movs	r3, #1
   262d8:	6163      	str	r3, [r4, #20]
   262da:	e02a      	b.n	26332 <setvbuf+0x146>
   262dc:	2280      	movs	r2, #128	; 0x80
   262de:	89a3      	ldrh	r3, [r4, #12]
   262e0:	9d01      	ldr	r5, [sp, #4]
   262e2:	4313      	orrs	r3, r2
   262e4:	81a3      	strh	r3, [r4, #12]
   262e6:	69b3      	ldr	r3, [r6, #24]
   262e8:	2b00      	cmp	r3, #0
   262ea:	d102      	bne.n	262f2 <setvbuf+0x106>
   262ec:	0030      	movs	r0, r6
   262ee:	f000 ffd7 	bl	272a0 <__sinit>
   262f2:	9b00      	ldr	r3, [sp, #0]
   262f4:	2b01      	cmp	r3, #1
   262f6:	d103      	bne.n	26300 <setvbuf+0x114>
   262f8:	89a3      	ldrh	r3, [r4, #12]
   262fa:	9a00      	ldr	r2, [sp, #0]
   262fc:	431a      	orrs	r2, r3
   262fe:	81a2      	strh	r2, [r4, #12]
   26300:	2308      	movs	r3, #8
   26302:	89a2      	ldrh	r2, [r4, #12]
   26304:	6027      	str	r7, [r4, #0]
   26306:	4013      	ands	r3, r2
   26308:	6127      	str	r7, [r4, #16]
   2630a:	6165      	str	r5, [r4, #20]
   2630c:	1e18      	subs	r0, r3, #0
   2630e:	d00c      	beq.n	2632a <setvbuf+0x13e>
   26310:	2301      	movs	r3, #1
   26312:	401a      	ands	r2, r3
   26314:	2300      	movs	r3, #0
   26316:	0010      	movs	r0, r2
   26318:	429a      	cmp	r2, r3
   2631a:	d004      	beq.n	26326 <setvbuf+0x13a>
   2631c:	426d      	negs	r5, r5
   2631e:	60a3      	str	r3, [r4, #8]
   26320:	61a5      	str	r5, [r4, #24]
   26322:	0018      	movs	r0, r3
   26324:	e005      	b.n	26332 <setvbuf+0x146>
   26326:	60a5      	str	r5, [r4, #8]
   26328:	e003      	b.n	26332 <setvbuf+0x146>
   2632a:	60a3      	str	r3, [r4, #8]
   2632c:	e001      	b.n	26332 <setvbuf+0x146>
   2632e:	2001      	movs	r0, #1
   26330:	4240      	negs	r0, r0
   26332:	b005      	add	sp, #20
   26334:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26336:	46c0      	nop			; (mov r8, r8)
   26338:	20000120 	.word	0x20000120
   2633c:	0002eef4 	.word	0x0002eef4
   26340:	0002ef14 	.word	0x0002ef14
   26344:	0002ef34 	.word	0x0002ef34
   26348:	fffff35c 	.word	0xfffff35c

0002634c <sniprintf>:
   2634c:	b40c      	push	{r2, r3}
   2634e:	b530      	push	{r4, r5, lr}
   26350:	4b16      	ldr	r3, [pc, #88]	; (263ac <sniprintf+0x60>)
   26352:	b09d      	sub	sp, #116	; 0x74
   26354:	1e0c      	subs	r4, r1, #0
   26356:	681d      	ldr	r5, [r3, #0]
   26358:	da04      	bge.n	26364 <sniprintf+0x18>
   2635a:	238b      	movs	r3, #139	; 0x8b
   2635c:	2001      	movs	r0, #1
   2635e:	602b      	str	r3, [r5, #0]
   26360:	4240      	negs	r0, r0
   26362:	e01d      	b.n	263a0 <sniprintf+0x54>
   26364:	2382      	movs	r3, #130	; 0x82
   26366:	a902      	add	r1, sp, #8
   26368:	009b      	lsls	r3, r3, #2
   2636a:	818b      	strh	r3, [r1, #12]
   2636c:	2300      	movs	r3, #0
   2636e:	9002      	str	r0, [sp, #8]
   26370:	6108      	str	r0, [r1, #16]
   26372:	429c      	cmp	r4, r3
   26374:	d000      	beq.n	26378 <sniprintf+0x2c>
   26376:	1e63      	subs	r3, r4, #1
   26378:	608b      	str	r3, [r1, #8]
   2637a:	614b      	str	r3, [r1, #20]
   2637c:	2301      	movs	r3, #1
   2637e:	425b      	negs	r3, r3
   26380:	81cb      	strh	r3, [r1, #14]
   26382:	9a20      	ldr	r2, [sp, #128]	; 0x80
   26384:	ab21      	add	r3, sp, #132	; 0x84
   26386:	0028      	movs	r0, r5
   26388:	9301      	str	r3, [sp, #4]
   2638a:	f001 fbf5 	bl	27b78 <_svfiprintf_r>
   2638e:	1c43      	adds	r3, r0, #1
   26390:	da01      	bge.n	26396 <sniprintf+0x4a>
   26392:	238b      	movs	r3, #139	; 0x8b
   26394:	602b      	str	r3, [r5, #0]
   26396:	2c00      	cmp	r4, #0
   26398:	d002      	beq.n	263a0 <sniprintf+0x54>
   2639a:	2300      	movs	r3, #0
   2639c:	9a02      	ldr	r2, [sp, #8]
   2639e:	7013      	strb	r3, [r2, #0]
   263a0:	b01d      	add	sp, #116	; 0x74
   263a2:	bc30      	pop	{r4, r5}
   263a4:	bc08      	pop	{r3}
   263a6:	b002      	add	sp, #8
   263a8:	4718      	bx	r3
   263aa:	46c0      	nop			; (mov r8, r8)
   263ac:	20000120 	.word	0x20000120

000263b0 <strlen>:
   263b0:	2300      	movs	r3, #0
   263b2:	5cc2      	ldrb	r2, [r0, r3]
   263b4:	3301      	adds	r3, #1
   263b6:	2a00      	cmp	r2, #0
   263b8:	d1fb      	bne.n	263b2 <strlen+0x2>
   263ba:	1e58      	subs	r0, r3, #1
   263bc:	4770      	bx	lr

000263be <strncmp>:
   263be:	2300      	movs	r3, #0
   263c0:	b530      	push	{r4, r5, lr}
   263c2:	429a      	cmp	r2, r3
   263c4:	d00b      	beq.n	263de <strncmp+0x20>
   263c6:	3a01      	subs	r2, #1
   263c8:	5cc4      	ldrb	r4, [r0, r3]
   263ca:	5ccd      	ldrb	r5, [r1, r3]
   263cc:	42ac      	cmp	r4, r5
   263ce:	d105      	bne.n	263dc <strncmp+0x1e>
   263d0:	429a      	cmp	r2, r3
   263d2:	d002      	beq.n	263da <strncmp+0x1c>
   263d4:	3301      	adds	r3, #1
   263d6:	2c00      	cmp	r4, #0
   263d8:	d1f6      	bne.n	263c8 <strncmp+0xa>
   263da:	0025      	movs	r5, r4
   263dc:	1b63      	subs	r3, r4, r5
   263de:	0018      	movs	r0, r3
   263e0:	bd30      	pop	{r4, r5, pc}

000263e2 <strncpy>:
   263e2:	0003      	movs	r3, r0
   263e4:	b530      	push	{r4, r5, lr}
   263e6:	2a00      	cmp	r2, #0
   263e8:	d00d      	beq.n	26406 <strncpy+0x24>
   263ea:	780c      	ldrb	r4, [r1, #0]
   263ec:	3301      	adds	r3, #1
   263ee:	1e5d      	subs	r5, r3, #1
   263f0:	3a01      	subs	r2, #1
   263f2:	702c      	strb	r4, [r5, #0]
   263f4:	3101      	adds	r1, #1
   263f6:	2c00      	cmp	r4, #0
   263f8:	d1f5      	bne.n	263e6 <strncpy+0x4>
   263fa:	189a      	adds	r2, r3, r2
   263fc:	429a      	cmp	r2, r3
   263fe:	d002      	beq.n	26406 <strncpy+0x24>
   26400:	701c      	strb	r4, [r3, #0]
   26402:	3301      	adds	r3, #1
   26404:	e7fa      	b.n	263fc <strncpy+0x1a>
   26406:	bd30      	pop	{r4, r5, pc}

00026408 <__ascii_wctomb>:
   26408:	1e0b      	subs	r3, r1, #0
   2640a:	d007      	beq.n	2641c <__ascii_wctomb+0x14>
   2640c:	2aff      	cmp	r2, #255	; 0xff
   2640e:	d903      	bls.n	26418 <__ascii_wctomb+0x10>
   26410:	238a      	movs	r3, #138	; 0x8a
   26412:	6003      	str	r3, [r0, #0]
   26414:	3b8b      	subs	r3, #139	; 0x8b
   26416:	e001      	b.n	2641c <__ascii_wctomb+0x14>
   26418:	2301      	movs	r3, #1
   2641a:	700a      	strb	r2, [r1, #0]
   2641c:	0018      	movs	r0, r3
   2641e:	4770      	bx	lr

00026420 <quorem>:
   26420:	b5f0      	push	{r4, r5, r6, r7, lr}
   26422:	6903      	ldr	r3, [r0, #16]
   26424:	690c      	ldr	r4, [r1, #16]
   26426:	b089      	sub	sp, #36	; 0x24
   26428:	0007      	movs	r7, r0
   2642a:	9105      	str	r1, [sp, #20]
   2642c:	2600      	movs	r6, #0
   2642e:	429c      	cmp	r4, r3
   26430:	dc79      	bgt.n	26526 <quorem+0x106>
   26432:	000b      	movs	r3, r1
   26434:	3c01      	subs	r4, #1
   26436:	3314      	adds	r3, #20
   26438:	00a5      	lsls	r5, r4, #2
   2643a:	9303      	str	r3, [sp, #12]
   2643c:	195b      	adds	r3, r3, r5
   2643e:	9304      	str	r3, [sp, #16]
   26440:	0003      	movs	r3, r0
   26442:	3314      	adds	r3, #20
   26444:	9302      	str	r3, [sp, #8]
   26446:	195d      	adds	r5, r3, r5
   26448:	9b04      	ldr	r3, [sp, #16]
   2644a:	6828      	ldr	r0, [r5, #0]
   2644c:	681b      	ldr	r3, [r3, #0]
   2644e:	1c59      	adds	r1, r3, #1
   26450:	9301      	str	r3, [sp, #4]
   26452:	f7fd f823 	bl	2349c <__aeabi_uidiv>
   26456:	9001      	str	r0, [sp, #4]
   26458:	42b0      	cmp	r0, r6
   2645a:	d033      	beq.n	264c4 <quorem+0xa4>
   2645c:	9b03      	ldr	r3, [sp, #12]
   2645e:	9802      	ldr	r0, [sp, #8]
   26460:	469c      	mov	ip, r3
   26462:	9606      	str	r6, [sp, #24]
   26464:	4663      	mov	r3, ip
   26466:	cb04      	ldmia	r3!, {r2}
   26468:	469c      	mov	ip, r3
   2646a:	9b01      	ldr	r3, [sp, #4]
   2646c:	b291      	uxth	r1, r2
   2646e:	4359      	muls	r1, r3
   26470:	0c12      	lsrs	r2, r2, #16
   26472:	435a      	muls	r2, r3
   26474:	1989      	adds	r1, r1, r6
   26476:	0c0b      	lsrs	r3, r1, #16
   26478:	18d3      	adds	r3, r2, r3
   2647a:	9307      	str	r3, [sp, #28]
   2647c:	9a06      	ldr	r2, [sp, #24]
   2647e:	0c1e      	lsrs	r6, r3, #16
   26480:	8803      	ldrh	r3, [r0, #0]
   26482:	b289      	uxth	r1, r1
   26484:	189b      	adds	r3, r3, r2
   26486:	6802      	ldr	r2, [r0, #0]
   26488:	1a5b      	subs	r3, r3, r1
   2648a:	0c11      	lsrs	r1, r2, #16
   2648c:	466a      	mov	r2, sp
   2648e:	8b92      	ldrh	r2, [r2, #28]
   26490:	1a8a      	subs	r2, r1, r2
   26492:	1419      	asrs	r1, r3, #16
   26494:	1852      	adds	r2, r2, r1
   26496:	1411      	asrs	r1, r2, #16
   26498:	b29b      	uxth	r3, r3
   2649a:	0412      	lsls	r2, r2, #16
   2649c:	4313      	orrs	r3, r2
   2649e:	c008      	stmia	r0!, {r3}
   264a0:	9b04      	ldr	r3, [sp, #16]
   264a2:	9106      	str	r1, [sp, #24]
   264a4:	4563      	cmp	r3, ip
   264a6:	d2dd      	bcs.n	26464 <quorem+0x44>
   264a8:	682b      	ldr	r3, [r5, #0]
   264aa:	2b00      	cmp	r3, #0
   264ac:	d10a      	bne.n	264c4 <quorem+0xa4>
   264ae:	9b02      	ldr	r3, [sp, #8]
   264b0:	3d04      	subs	r5, #4
   264b2:	42ab      	cmp	r3, r5
   264b4:	d301      	bcc.n	264ba <quorem+0x9a>
   264b6:	613c      	str	r4, [r7, #16]
   264b8:	e004      	b.n	264c4 <quorem+0xa4>
   264ba:	682b      	ldr	r3, [r5, #0]
   264bc:	2b00      	cmp	r3, #0
   264be:	d1fa      	bne.n	264b6 <quorem+0x96>
   264c0:	3c01      	subs	r4, #1
   264c2:	e7f4      	b.n	264ae <quorem+0x8e>
   264c4:	9905      	ldr	r1, [sp, #20]
   264c6:	0038      	movs	r0, r7
   264c8:	f001 fa0c 	bl	278e4 <__mcmp>
   264cc:	2800      	cmp	r0, #0
   264ce:	db29      	blt.n	26524 <quorem+0x104>
   264d0:	2000      	movs	r0, #0
   264d2:	9b01      	ldr	r3, [sp, #4]
   264d4:	9902      	ldr	r1, [sp, #8]
   264d6:	3301      	adds	r3, #1
   264d8:	9a03      	ldr	r2, [sp, #12]
   264da:	9301      	str	r3, [sp, #4]
   264dc:	ca40      	ldmia	r2!, {r6}
   264de:	880b      	ldrh	r3, [r1, #0]
   264e0:	1818      	adds	r0, r3, r0
   264e2:	b2b3      	uxth	r3, r6
   264e4:	1ac3      	subs	r3, r0, r3
   264e6:	6808      	ldr	r0, [r1, #0]
   264e8:	0c36      	lsrs	r6, r6, #16
   264ea:	0c00      	lsrs	r0, r0, #16
   264ec:	1b80      	subs	r0, r0, r6
   264ee:	141d      	asrs	r5, r3, #16
   264f0:	1945      	adds	r5, r0, r5
   264f2:	1428      	asrs	r0, r5, #16
   264f4:	b29b      	uxth	r3, r3
   264f6:	042d      	lsls	r5, r5, #16
   264f8:	432b      	orrs	r3, r5
   264fa:	c108      	stmia	r1!, {r3}
   264fc:	9b04      	ldr	r3, [sp, #16]
   264fe:	4293      	cmp	r3, r2
   26500:	d2ec      	bcs.n	264dc <quorem+0xbc>
   26502:	9a02      	ldr	r2, [sp, #8]
   26504:	00a3      	lsls	r3, r4, #2
   26506:	18d3      	adds	r3, r2, r3
   26508:	681a      	ldr	r2, [r3, #0]
   2650a:	2a00      	cmp	r2, #0
   2650c:	d10a      	bne.n	26524 <quorem+0x104>
   2650e:	9a02      	ldr	r2, [sp, #8]
   26510:	3b04      	subs	r3, #4
   26512:	429a      	cmp	r2, r3
   26514:	d301      	bcc.n	2651a <quorem+0xfa>
   26516:	613c      	str	r4, [r7, #16]
   26518:	e004      	b.n	26524 <quorem+0x104>
   2651a:	681a      	ldr	r2, [r3, #0]
   2651c:	2a00      	cmp	r2, #0
   2651e:	d1fa      	bne.n	26516 <quorem+0xf6>
   26520:	3c01      	subs	r4, #1
   26522:	e7f4      	b.n	2650e <quorem+0xee>
   26524:	9e01      	ldr	r6, [sp, #4]
   26526:	0030      	movs	r0, r6
   26528:	b009      	add	sp, #36	; 0x24
   2652a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002652c <_dtoa_r>:
   2652c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2652e:	0016      	movs	r6, r2
   26530:	001f      	movs	r7, r3
   26532:	6a44      	ldr	r4, [r0, #36]	; 0x24
   26534:	b09d      	sub	sp, #116	; 0x74
   26536:	9004      	str	r0, [sp, #16]
   26538:	9d25      	ldr	r5, [sp, #148]	; 0x94
   2653a:	9606      	str	r6, [sp, #24]
   2653c:	9707      	str	r7, [sp, #28]
   2653e:	2c00      	cmp	r4, #0
   26540:	d108      	bne.n	26554 <_dtoa_r+0x28>
   26542:	2010      	movs	r0, #16
   26544:	f7ff f89e 	bl	25684 <malloc>
   26548:	9b04      	ldr	r3, [sp, #16]
   2654a:	6258      	str	r0, [r3, #36]	; 0x24
   2654c:	6044      	str	r4, [r0, #4]
   2654e:	6084      	str	r4, [r0, #8]
   26550:	6004      	str	r4, [r0, #0]
   26552:	60c4      	str	r4, [r0, #12]
   26554:	9b04      	ldr	r3, [sp, #16]
   26556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26558:	6819      	ldr	r1, [r3, #0]
   2655a:	2900      	cmp	r1, #0
   2655c:	d00b      	beq.n	26576 <_dtoa_r+0x4a>
   2655e:	685a      	ldr	r2, [r3, #4]
   26560:	2301      	movs	r3, #1
   26562:	4093      	lsls	r3, r2
   26564:	604a      	str	r2, [r1, #4]
   26566:	608b      	str	r3, [r1, #8]
   26568:	9804      	ldr	r0, [sp, #16]
   2656a:	f000 ffe2 	bl	27532 <_Bfree>
   2656e:	2200      	movs	r2, #0
   26570:	9b04      	ldr	r3, [sp, #16]
   26572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26574:	601a      	str	r2, [r3, #0]
   26576:	9b07      	ldr	r3, [sp, #28]
   26578:	2b00      	cmp	r3, #0
   2657a:	da05      	bge.n	26588 <_dtoa_r+0x5c>
   2657c:	2301      	movs	r3, #1
   2657e:	602b      	str	r3, [r5, #0]
   26580:	007b      	lsls	r3, r7, #1
   26582:	085b      	lsrs	r3, r3, #1
   26584:	9307      	str	r3, [sp, #28]
   26586:	e001      	b.n	2658c <_dtoa_r+0x60>
   26588:	2300      	movs	r3, #0
   2658a:	602b      	str	r3, [r5, #0]
   2658c:	9c07      	ldr	r4, [sp, #28]
   2658e:	4bc8      	ldr	r3, [pc, #800]	; (268b0 <_dtoa_r+0x384>)
   26590:	0022      	movs	r2, r4
   26592:	9319      	str	r3, [sp, #100]	; 0x64
   26594:	401a      	ands	r2, r3
   26596:	429a      	cmp	r2, r3
   26598:	d119      	bne.n	265ce <_dtoa_r+0xa2>
   2659a:	4bc6      	ldr	r3, [pc, #792]	; (268b4 <_dtoa_r+0x388>)
   2659c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2659e:	6013      	str	r3, [r2, #0]
   265a0:	9a06      	ldr	r2, [sp, #24]
   265a2:	4bc5      	ldr	r3, [pc, #788]	; (268b8 <_dtoa_r+0x38c>)
   265a4:	2a00      	cmp	r2, #0
   265a6:	d102      	bne.n	265ae <_dtoa_r+0x82>
   265a8:	0324      	lsls	r4, r4, #12
   265aa:	d100      	bne.n	265ae <_dtoa_r+0x82>
   265ac:	4bc3      	ldr	r3, [pc, #780]	; (268bc <_dtoa_r+0x390>)
   265ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
   265b0:	0018      	movs	r0, r3
   265b2:	2a00      	cmp	r2, #0
   265b4:	d101      	bne.n	265ba <_dtoa_r+0x8e>
   265b6:	f000 fd7d 	bl	270b4 <_dtoa_r+0xb88>
   265ba:	78d9      	ldrb	r1, [r3, #3]
   265bc:	1cda      	adds	r2, r3, #3
   265be:	2900      	cmp	r1, #0
   265c0:	d000      	beq.n	265c4 <_dtoa_r+0x98>
   265c2:	3205      	adds	r2, #5
   265c4:	9926      	ldr	r1, [sp, #152]	; 0x98
   265c6:	0018      	movs	r0, r3
   265c8:	600a      	str	r2, [r1, #0]
   265ca:	f000 fd73 	bl	270b4 <_dtoa_r+0xb88>
   265ce:	9e06      	ldr	r6, [sp, #24]
   265d0:	9f07      	ldr	r7, [sp, #28]
   265d2:	2200      	movs	r2, #0
   265d4:	2300      	movs	r3, #0
   265d6:	0030      	movs	r0, r6
   265d8:	0039      	movs	r1, r7
   265da:	f7fd f8e5 	bl	237a8 <__aeabi_dcmpeq>
   265de:	1e05      	subs	r5, r0, #0
   265e0:	d00e      	beq.n	26600 <_dtoa_r+0xd4>
   265e2:	2301      	movs	r3, #1
   265e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   265e6:	6013      	str	r3, [r2, #0]
   265e8:	4bb5      	ldr	r3, [pc, #724]	; (268c0 <_dtoa_r+0x394>)
   265ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
   265ec:	0018      	movs	r0, r3
   265ee:	2a00      	cmp	r2, #0
   265f0:	d101      	bne.n	265f6 <_dtoa_r+0xca>
   265f2:	f000 fd5f 	bl	270b4 <_dtoa_r+0xb88>
   265f6:	4ab3      	ldr	r2, [pc, #716]	; (268c4 <_dtoa_r+0x398>)
   265f8:	9926      	ldr	r1, [sp, #152]	; 0x98
   265fa:	600a      	str	r2, [r1, #0]
   265fc:	f000 fd5a 	bl	270b4 <_dtoa_r+0xb88>
   26600:	ab1a      	add	r3, sp, #104	; 0x68
   26602:	9301      	str	r3, [sp, #4]
   26604:	ab1b      	add	r3, sp, #108	; 0x6c
   26606:	9300      	str	r3, [sp, #0]
   26608:	0032      	movs	r2, r6
   2660a:	003b      	movs	r3, r7
   2660c:	9804      	ldr	r0, [sp, #16]
   2660e:	f001 f9ef 	bl	279f0 <__d2b>
   26612:	0063      	lsls	r3, r4, #1
   26614:	9005      	str	r0, [sp, #20]
   26616:	0d5b      	lsrs	r3, r3, #21
   26618:	d009      	beq.n	2662e <_dtoa_r+0x102>
   2661a:	033a      	lsls	r2, r7, #12
   2661c:	4caa      	ldr	r4, [pc, #680]	; (268c8 <_dtoa_r+0x39c>)
   2661e:	0b12      	lsrs	r2, r2, #12
   26620:	4314      	orrs	r4, r2
   26622:	4aaa      	ldr	r2, [pc, #680]	; (268cc <_dtoa_r+0x3a0>)
   26624:	0030      	movs	r0, r6
   26626:	0021      	movs	r1, r4
   26628:	189e      	adds	r6, r3, r2
   2662a:	9517      	str	r5, [sp, #92]	; 0x5c
   2662c:	e01a      	b.n	26664 <_dtoa_r+0x138>
   2662e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   26630:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   26632:	189e      	adds	r6, r3, r2
   26634:	4ba6      	ldr	r3, [pc, #664]	; (268d0 <_dtoa_r+0x3a4>)
   26636:	18f3      	adds	r3, r6, r3
   26638:	2b20      	cmp	r3, #32
   2663a:	dd08      	ble.n	2664e <_dtoa_r+0x122>
   2663c:	4aa5      	ldr	r2, [pc, #660]	; (268d4 <_dtoa_r+0x3a8>)
   2663e:	9806      	ldr	r0, [sp, #24]
   26640:	18b2      	adds	r2, r6, r2
   26642:	40d0      	lsrs	r0, r2
   26644:	2240      	movs	r2, #64	; 0x40
   26646:	1ad3      	subs	r3, r2, r3
   26648:	409c      	lsls	r4, r3
   2664a:	4320      	orrs	r0, r4
   2664c:	e003      	b.n	26656 <_dtoa_r+0x12a>
   2664e:	2220      	movs	r2, #32
   26650:	9806      	ldr	r0, [sp, #24]
   26652:	1ad3      	subs	r3, r2, r3
   26654:	4098      	lsls	r0, r3
   26656:	f7fe ff77 	bl	25548 <__aeabi_ui2d>
   2665a:	2301      	movs	r3, #1
   2665c:	4c9e      	ldr	r4, [pc, #632]	; (268d8 <_dtoa_r+0x3ac>)
   2665e:	3e01      	subs	r6, #1
   26660:	1909      	adds	r1, r1, r4
   26662:	9317      	str	r3, [sp, #92]	; 0x5c
   26664:	2200      	movs	r2, #0
   26666:	4b9d      	ldr	r3, [pc, #628]	; (268dc <_dtoa_r+0x3b0>)
   26668:	f7fe fba2 	bl	24db0 <__aeabi_dsub>
   2666c:	4a9c      	ldr	r2, [pc, #624]	; (268e0 <_dtoa_r+0x3b4>)
   2666e:	4b9d      	ldr	r3, [pc, #628]	; (268e4 <_dtoa_r+0x3b8>)
   26670:	f7fe f924 	bl	248bc <__aeabi_dmul>
   26674:	4a9c      	ldr	r2, [pc, #624]	; (268e8 <_dtoa_r+0x3bc>)
   26676:	4b9d      	ldr	r3, [pc, #628]	; (268ec <_dtoa_r+0x3c0>)
   26678:	f7fd f9d0 	bl	23a1c <__aeabi_dadd>
   2667c:	0004      	movs	r4, r0
   2667e:	0030      	movs	r0, r6
   26680:	000d      	movs	r5, r1
   26682:	f7fe ff1f 	bl	254c4 <__aeabi_i2d>
   26686:	4a9a      	ldr	r2, [pc, #616]	; (268f0 <_dtoa_r+0x3c4>)
   26688:	4b9a      	ldr	r3, [pc, #616]	; (268f4 <_dtoa_r+0x3c8>)
   2668a:	f7fe f917 	bl	248bc <__aeabi_dmul>
   2668e:	0002      	movs	r2, r0
   26690:	000b      	movs	r3, r1
   26692:	0020      	movs	r0, r4
   26694:	0029      	movs	r1, r5
   26696:	f7fd f9c1 	bl	23a1c <__aeabi_dadd>
   2669a:	0004      	movs	r4, r0
   2669c:	000d      	movs	r5, r1
   2669e:	f7fe fedb 	bl	25458 <__aeabi_d2iz>
   266a2:	2200      	movs	r2, #0
   266a4:	9003      	str	r0, [sp, #12]
   266a6:	2300      	movs	r3, #0
   266a8:	0020      	movs	r0, r4
   266aa:	0029      	movs	r1, r5
   266ac:	f7fd f882 	bl	237b4 <__aeabi_dcmplt>
   266b0:	2800      	cmp	r0, #0
   266b2:	d00d      	beq.n	266d0 <_dtoa_r+0x1a4>
   266b4:	9803      	ldr	r0, [sp, #12]
   266b6:	f7fe ff05 	bl	254c4 <__aeabi_i2d>
   266ba:	0002      	movs	r2, r0
   266bc:	000b      	movs	r3, r1
   266be:	0020      	movs	r0, r4
   266c0:	0029      	movs	r1, r5
   266c2:	f7fd f871 	bl	237a8 <__aeabi_dcmpeq>
   266c6:	4243      	negs	r3, r0
   266c8:	4143      	adcs	r3, r0
   266ca:	9a03      	ldr	r2, [sp, #12]
   266cc:	1ad3      	subs	r3, r2, r3
   266ce:	9303      	str	r3, [sp, #12]
   266d0:	2301      	movs	r3, #1
   266d2:	9316      	str	r3, [sp, #88]	; 0x58
   266d4:	9b03      	ldr	r3, [sp, #12]
   266d6:	2b16      	cmp	r3, #22
   266d8:	d811      	bhi.n	266fe <_dtoa_r+0x1d2>
   266da:	4987      	ldr	r1, [pc, #540]	; (268f8 <_dtoa_r+0x3cc>)
   266dc:	00db      	lsls	r3, r3, #3
   266de:	18c9      	adds	r1, r1, r3
   266e0:	6808      	ldr	r0, [r1, #0]
   266e2:	6849      	ldr	r1, [r1, #4]
   266e4:	9a06      	ldr	r2, [sp, #24]
   266e6:	9b07      	ldr	r3, [sp, #28]
   266e8:	f7fd f878 	bl	237dc <__aeabi_dcmpgt>
   266ec:	2800      	cmp	r0, #0
   266ee:	d005      	beq.n	266fc <_dtoa_r+0x1d0>
   266f0:	9b03      	ldr	r3, [sp, #12]
   266f2:	3b01      	subs	r3, #1
   266f4:	9303      	str	r3, [sp, #12]
   266f6:	2300      	movs	r3, #0
   266f8:	9316      	str	r3, [sp, #88]	; 0x58
   266fa:	e000      	b.n	266fe <_dtoa_r+0x1d2>
   266fc:	9016      	str	r0, [sp, #88]	; 0x58
   266fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   26700:	1b9e      	subs	r6, r3, r6
   26702:	2300      	movs	r3, #0
   26704:	930b      	str	r3, [sp, #44]	; 0x2c
   26706:	3e01      	subs	r6, #1
   26708:	960c      	str	r6, [sp, #48]	; 0x30
   2670a:	d504      	bpl.n	26716 <_dtoa_r+0x1ea>
   2670c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2670e:	425b      	negs	r3, r3
   26710:	930b      	str	r3, [sp, #44]	; 0x2c
   26712:	2300      	movs	r3, #0
   26714:	930c      	str	r3, [sp, #48]	; 0x30
   26716:	9b03      	ldr	r3, [sp, #12]
   26718:	2b00      	cmp	r3, #0
   2671a:	db08      	blt.n	2672e <_dtoa_r+0x202>
   2671c:	9a03      	ldr	r2, [sp, #12]
   2671e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26720:	4694      	mov	ip, r2
   26722:	4463      	add	r3, ip
   26724:	930c      	str	r3, [sp, #48]	; 0x30
   26726:	2300      	movs	r3, #0
   26728:	9211      	str	r2, [sp, #68]	; 0x44
   2672a:	9308      	str	r3, [sp, #32]
   2672c:	e007      	b.n	2673e <_dtoa_r+0x212>
   2672e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26730:	9a03      	ldr	r2, [sp, #12]
   26732:	1a9b      	subs	r3, r3, r2
   26734:	930b      	str	r3, [sp, #44]	; 0x2c
   26736:	4253      	negs	r3, r2
   26738:	9308      	str	r3, [sp, #32]
   2673a:	2300      	movs	r3, #0
   2673c:	9311      	str	r3, [sp, #68]	; 0x44
   2673e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   26740:	2501      	movs	r5, #1
   26742:	2b09      	cmp	r3, #9
   26744:	d825      	bhi.n	26792 <_dtoa_r+0x266>
   26746:	2b05      	cmp	r3, #5
   26748:	dd02      	ble.n	26750 <_dtoa_r+0x224>
   2674a:	2500      	movs	r5, #0
   2674c:	3b04      	subs	r3, #4
   2674e:	9322      	str	r3, [sp, #136]	; 0x88
   26750:	9b22      	ldr	r3, [sp, #136]	; 0x88
   26752:	1e98      	subs	r0, r3, #2
   26754:	2803      	cmp	r0, #3
   26756:	d824      	bhi.n	267a2 <_dtoa_r+0x276>
   26758:	f001 fe0c 	bl	28374 <__gnu_thumb1_case_uqi>
   2675c:	04020e06 	.word	0x04020e06
   26760:	2301      	movs	r3, #1
   26762:	e002      	b.n	2676a <_dtoa_r+0x23e>
   26764:	2301      	movs	r3, #1
   26766:	e008      	b.n	2677a <_dtoa_r+0x24e>
   26768:	2300      	movs	r3, #0
   2676a:	9310      	str	r3, [sp, #64]	; 0x40
   2676c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2676e:	2b00      	cmp	r3, #0
   26770:	dd20      	ble.n	267b4 <_dtoa_r+0x288>
   26772:	001f      	movs	r7, r3
   26774:	930a      	str	r3, [sp, #40]	; 0x28
   26776:	e021      	b.n	267bc <_dtoa_r+0x290>
   26778:	2300      	movs	r3, #0
   2677a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   2677c:	9310      	str	r3, [sp, #64]	; 0x40
   2677e:	9b03      	ldr	r3, [sp, #12]
   26780:	189f      	adds	r7, r3, r2
   26782:	1c7b      	adds	r3, r7, #1
   26784:	930a      	str	r3, [sp, #40]	; 0x28
   26786:	2301      	movs	r3, #1
   26788:	18fa      	adds	r2, r7, r3
   2678a:	2a00      	cmp	r2, #0
   2678c:	dd16      	ble.n	267bc <_dtoa_r+0x290>
   2678e:	0013      	movs	r3, r2
   26790:	e014      	b.n	267bc <_dtoa_r+0x290>
   26792:	2701      	movs	r7, #1
   26794:	2300      	movs	r3, #0
   26796:	427f      	negs	r7, r7
   26798:	9322      	str	r3, [sp, #136]	; 0x88
   2679a:	9510      	str	r5, [sp, #64]	; 0x40
   2679c:	970a      	str	r7, [sp, #40]	; 0x28
   2679e:	3312      	adds	r3, #18
   267a0:	e005      	b.n	267ae <_dtoa_r+0x282>
   267a2:	2701      	movs	r7, #1
   267a4:	2301      	movs	r3, #1
   267a6:	427f      	negs	r7, r7
   267a8:	9310      	str	r3, [sp, #64]	; 0x40
   267aa:	970a      	str	r7, [sp, #40]	; 0x28
   267ac:	3311      	adds	r3, #17
   267ae:	2200      	movs	r2, #0
   267b0:	9223      	str	r2, [sp, #140]	; 0x8c
   267b2:	e003      	b.n	267bc <_dtoa_r+0x290>
   267b4:	2701      	movs	r7, #1
   267b6:	003b      	movs	r3, r7
   267b8:	970a      	str	r7, [sp, #40]	; 0x28
   267ba:	9723      	str	r7, [sp, #140]	; 0x8c
   267bc:	9a04      	ldr	r2, [sp, #16]
   267be:	6a54      	ldr	r4, [r2, #36]	; 0x24
   267c0:	2200      	movs	r2, #0
   267c2:	6062      	str	r2, [r4, #4]
   267c4:	3204      	adds	r2, #4
   267c6:	0011      	movs	r1, r2
   267c8:	3114      	adds	r1, #20
   267ca:	4299      	cmp	r1, r3
   267cc:	d804      	bhi.n	267d8 <_dtoa_r+0x2ac>
   267ce:	6861      	ldr	r1, [r4, #4]
   267d0:	0052      	lsls	r2, r2, #1
   267d2:	3101      	adds	r1, #1
   267d4:	6061      	str	r1, [r4, #4]
   267d6:	e7f6      	b.n	267c6 <_dtoa_r+0x29a>
   267d8:	6861      	ldr	r1, [r4, #4]
   267da:	9804      	ldr	r0, [sp, #16]
   267dc:	f000 fe71 	bl	274c2 <_Balloc>
   267e0:	9b04      	ldr	r3, [sp, #16]
   267e2:	6020      	str	r0, [r4, #0]
   267e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   267e6:	681b      	ldr	r3, [r3, #0]
   267e8:	930d      	str	r3, [sp, #52]	; 0x34
   267ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   267ec:	2b0e      	cmp	r3, #14
   267ee:	d900      	bls.n	267f2 <_dtoa_r+0x2c6>
   267f0:	e181      	b.n	26af6 <_dtoa_r+0x5ca>
   267f2:	2d00      	cmp	r5, #0
   267f4:	d100      	bne.n	267f8 <_dtoa_r+0x2cc>
   267f6:	e17e      	b.n	26af6 <_dtoa_r+0x5ca>
   267f8:	9b06      	ldr	r3, [sp, #24]
   267fa:	9c07      	ldr	r4, [sp, #28]
   267fc:	9314      	str	r3, [sp, #80]	; 0x50
   267fe:	9415      	str	r4, [sp, #84]	; 0x54
   26800:	9b03      	ldr	r3, [sp, #12]
   26802:	2b00      	cmp	r3, #0
   26804:	dd31      	ble.n	2686a <_dtoa_r+0x33e>
   26806:	220f      	movs	r2, #15
   26808:	493b      	ldr	r1, [pc, #236]	; (268f8 <_dtoa_r+0x3cc>)
   2680a:	4013      	ands	r3, r2
   2680c:	00db      	lsls	r3, r3, #3
   2680e:	18cb      	adds	r3, r1, r3
   26810:	685c      	ldr	r4, [r3, #4]
   26812:	681b      	ldr	r3, [r3, #0]
   26814:	930e      	str	r3, [sp, #56]	; 0x38
   26816:	940f      	str	r4, [sp, #60]	; 0x3c
   26818:	9b03      	ldr	r3, [sp, #12]
   2681a:	2402      	movs	r4, #2
   2681c:	111d      	asrs	r5, r3, #4
   2681e:	06eb      	lsls	r3, r5, #27
   26820:	d50a      	bpl.n	26838 <_dtoa_r+0x30c>
   26822:	9814      	ldr	r0, [sp, #80]	; 0x50
   26824:	9915      	ldr	r1, [sp, #84]	; 0x54
   26826:	4b35      	ldr	r3, [pc, #212]	; (268fc <_dtoa_r+0x3d0>)
   26828:	4015      	ands	r5, r2
   2682a:	6a1a      	ldr	r2, [r3, #32]
   2682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2682e:	f7fd fc21 	bl	24074 <__aeabi_ddiv>
   26832:	9006      	str	r0, [sp, #24]
   26834:	9107      	str	r1, [sp, #28]
   26836:	3401      	adds	r4, #1
   26838:	4e30      	ldr	r6, [pc, #192]	; (268fc <_dtoa_r+0x3d0>)
   2683a:	2d00      	cmp	r5, #0
   2683c:	d00e      	beq.n	2685c <_dtoa_r+0x330>
   2683e:	2301      	movs	r3, #1
   26840:	421d      	tst	r5, r3
   26842:	d008      	beq.n	26856 <_dtoa_r+0x32a>
   26844:	980e      	ldr	r0, [sp, #56]	; 0x38
   26846:	990f      	ldr	r1, [sp, #60]	; 0x3c
   26848:	18e4      	adds	r4, r4, r3
   2684a:	6832      	ldr	r2, [r6, #0]
   2684c:	6873      	ldr	r3, [r6, #4]
   2684e:	f7fe f835 	bl	248bc <__aeabi_dmul>
   26852:	900e      	str	r0, [sp, #56]	; 0x38
   26854:	910f      	str	r1, [sp, #60]	; 0x3c
   26856:	106d      	asrs	r5, r5, #1
   26858:	3608      	adds	r6, #8
   2685a:	e7ee      	b.n	2683a <_dtoa_r+0x30e>
   2685c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2685e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26860:	9806      	ldr	r0, [sp, #24]
   26862:	9907      	ldr	r1, [sp, #28]
   26864:	f7fd fc06 	bl	24074 <__aeabi_ddiv>
   26868:	e04c      	b.n	26904 <_dtoa_r+0x3d8>
   2686a:	9b03      	ldr	r3, [sp, #12]
   2686c:	2402      	movs	r4, #2
   2686e:	425d      	negs	r5, r3
   26870:	2d00      	cmp	r5, #0
   26872:	d049      	beq.n	26908 <_dtoa_r+0x3dc>
   26874:	9814      	ldr	r0, [sp, #80]	; 0x50
   26876:	9915      	ldr	r1, [sp, #84]	; 0x54
   26878:	230f      	movs	r3, #15
   2687a:	4a1f      	ldr	r2, [pc, #124]	; (268f8 <_dtoa_r+0x3cc>)
   2687c:	402b      	ands	r3, r5
   2687e:	00db      	lsls	r3, r3, #3
   26880:	18d3      	adds	r3, r2, r3
   26882:	681a      	ldr	r2, [r3, #0]
   26884:	685b      	ldr	r3, [r3, #4]
   26886:	f7fe f819 	bl	248bc <__aeabi_dmul>
   2688a:	2300      	movs	r3, #0
   2688c:	9006      	str	r0, [sp, #24]
   2688e:	9107      	str	r1, [sp, #28]
   26890:	4e1a      	ldr	r6, [pc, #104]	; (268fc <_dtoa_r+0x3d0>)
   26892:	112d      	asrs	r5, r5, #4
   26894:	2d00      	cmp	r5, #0
   26896:	d033      	beq.n	26900 <_dtoa_r+0x3d4>
   26898:	2201      	movs	r2, #1
   2689a:	4215      	tst	r5, r2
   2689c:	d005      	beq.n	268aa <_dtoa_r+0x37e>
   2689e:	18a4      	adds	r4, r4, r2
   268a0:	6832      	ldr	r2, [r6, #0]
   268a2:	6873      	ldr	r3, [r6, #4]
   268a4:	f7fe f80a 	bl	248bc <__aeabi_dmul>
   268a8:	2301      	movs	r3, #1
   268aa:	106d      	asrs	r5, r5, #1
   268ac:	3608      	adds	r6, #8
   268ae:	e7f1      	b.n	26894 <_dtoa_r+0x368>
   268b0:	7ff00000 	.word	0x7ff00000
   268b4:	0000270f 	.word	0x0000270f
   268b8:	0002eef0 	.word	0x0002eef0
   268bc:	0002eee7 	.word	0x0002eee7
   268c0:	0002edc2 	.word	0x0002edc2
   268c4:	0002edc3 	.word	0x0002edc3
   268c8:	3ff00000 	.word	0x3ff00000
   268cc:	fffffc01 	.word	0xfffffc01
   268d0:	00000432 	.word	0x00000432
   268d4:	00000412 	.word	0x00000412
   268d8:	fe100000 	.word	0xfe100000
   268dc:	3ff80000 	.word	0x3ff80000
   268e0:	636f4361 	.word	0x636f4361
   268e4:	3fd287a7 	.word	0x3fd287a7
   268e8:	8b60c8b3 	.word	0x8b60c8b3
   268ec:	3fc68a28 	.word	0x3fc68a28
   268f0:	509f79fb 	.word	0x509f79fb
   268f4:	3fd34413 	.word	0x3fd34413
   268f8:	0002ef58 	.word	0x0002ef58
   268fc:	0002f020 	.word	0x0002f020
   26900:	2b00      	cmp	r3, #0
   26902:	d001      	beq.n	26908 <_dtoa_r+0x3dc>
   26904:	9006      	str	r0, [sp, #24]
   26906:	9107      	str	r1, [sp, #28]
   26908:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2690a:	2b00      	cmp	r3, #0
   2690c:	d01d      	beq.n	2694a <_dtoa_r+0x41e>
   2690e:	9d06      	ldr	r5, [sp, #24]
   26910:	9e07      	ldr	r6, [sp, #28]
   26912:	2200      	movs	r2, #0
   26914:	4bc7      	ldr	r3, [pc, #796]	; (26c34 <_dtoa_r+0x708>)
   26916:	0028      	movs	r0, r5
   26918:	0031      	movs	r1, r6
   2691a:	f7fc ff4b 	bl	237b4 <__aeabi_dcmplt>
   2691e:	2800      	cmp	r0, #0
   26920:	d013      	beq.n	2694a <_dtoa_r+0x41e>
   26922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26924:	2b00      	cmp	r3, #0
   26926:	d010      	beq.n	2694a <_dtoa_r+0x41e>
   26928:	2f00      	cmp	r7, #0
   2692a:	dc00      	bgt.n	2692e <_dtoa_r+0x402>
   2692c:	e0df      	b.n	26aee <_dtoa_r+0x5c2>
   2692e:	9b03      	ldr	r3, [sp, #12]
   26930:	0031      	movs	r1, r6
   26932:	3b01      	subs	r3, #1
   26934:	930e      	str	r3, [sp, #56]	; 0x38
   26936:	2200      	movs	r2, #0
   26938:	4bbf      	ldr	r3, [pc, #764]	; (26c38 <_dtoa_r+0x70c>)
   2693a:	0028      	movs	r0, r5
   2693c:	f7fd ffbe 	bl	248bc <__aeabi_dmul>
   26940:	3401      	adds	r4, #1
   26942:	9006      	str	r0, [sp, #24]
   26944:	9107      	str	r1, [sp, #28]
   26946:	003e      	movs	r6, r7
   26948:	e002      	b.n	26950 <_dtoa_r+0x424>
   2694a:	9b03      	ldr	r3, [sp, #12]
   2694c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2694e:	930e      	str	r3, [sp, #56]	; 0x38
   26950:	0020      	movs	r0, r4
   26952:	f7fe fdb7 	bl	254c4 <__aeabi_i2d>
   26956:	9a06      	ldr	r2, [sp, #24]
   26958:	9b07      	ldr	r3, [sp, #28]
   2695a:	f7fd ffaf 	bl	248bc <__aeabi_dmul>
   2695e:	2200      	movs	r2, #0
   26960:	4bb6      	ldr	r3, [pc, #728]	; (26c3c <_dtoa_r+0x710>)
   26962:	f7fd f85b 	bl	23a1c <__aeabi_dadd>
   26966:	4ab6      	ldr	r2, [pc, #728]	; (26c40 <_dtoa_r+0x714>)
   26968:	9012      	str	r0, [sp, #72]	; 0x48
   2696a:	9113      	str	r1, [sp, #76]	; 0x4c
   2696c:	9c12      	ldr	r4, [sp, #72]	; 0x48
   2696e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   26970:	4694      	mov	ip, r2
   26972:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   26974:	4463      	add	r3, ip
   26976:	9318      	str	r3, [sp, #96]	; 0x60
   26978:	001d      	movs	r5, r3
   2697a:	2e00      	cmp	r6, #0
   2697c:	d11c      	bne.n	269b8 <_dtoa_r+0x48c>
   2697e:	9806      	ldr	r0, [sp, #24]
   26980:	9907      	ldr	r1, [sp, #28]
   26982:	2200      	movs	r2, #0
   26984:	4baf      	ldr	r3, [pc, #700]	; (26c44 <_dtoa_r+0x718>)
   26986:	f7fe fa13 	bl	24db0 <__aeabi_dsub>
   2698a:	0022      	movs	r2, r4
   2698c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2698e:	9006      	str	r0, [sp, #24]
   26990:	9107      	str	r1, [sp, #28]
   26992:	f7fc ff23 	bl	237dc <__aeabi_dcmpgt>
   26996:	2800      	cmp	r0, #0
   26998:	d000      	beq.n	2699c <_dtoa_r+0x470>
   2699a:	e254      	b.n	26e46 <_dtoa_r+0x91a>
   2699c:	48aa      	ldr	r0, [pc, #680]	; (26c48 <_dtoa_r+0x71c>)
   2699e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   269a0:	4684      	mov	ip, r0
   269a2:	4461      	add	r1, ip
   269a4:	000b      	movs	r3, r1
   269a6:	9806      	ldr	r0, [sp, #24]
   269a8:	9907      	ldr	r1, [sp, #28]
   269aa:	0022      	movs	r2, r4
   269ac:	f7fc ff02 	bl	237b4 <__aeabi_dcmplt>
   269b0:	2800      	cmp	r0, #0
   269b2:	d000      	beq.n	269b6 <_dtoa_r+0x48a>
   269b4:	e23d      	b.n	26e32 <_dtoa_r+0x906>
   269b6:	e09a      	b.n	26aee <_dtoa_r+0x5c2>
   269b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   269ba:	1e73      	subs	r3, r6, #1
   269bc:	49a3      	ldr	r1, [pc, #652]	; (26c4c <_dtoa_r+0x720>)
   269be:	00db      	lsls	r3, r3, #3
   269c0:	2a00      	cmp	r2, #0
   269c2:	d049      	beq.n	26a58 <_dtoa_r+0x52c>
   269c4:	18cb      	adds	r3, r1, r3
   269c6:	681a      	ldr	r2, [r3, #0]
   269c8:	685b      	ldr	r3, [r3, #4]
   269ca:	2000      	movs	r0, #0
   269cc:	49a0      	ldr	r1, [pc, #640]	; (26c50 <_dtoa_r+0x724>)
   269ce:	f7fd fb51 	bl	24074 <__aeabi_ddiv>
   269d2:	002b      	movs	r3, r5
   269d4:	0022      	movs	r2, r4
   269d6:	f7fe f9eb 	bl	24db0 <__aeabi_dsub>
   269da:	9012      	str	r0, [sp, #72]	; 0x48
   269dc:	9113      	str	r1, [sp, #76]	; 0x4c
   269de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   269e0:	9806      	ldr	r0, [sp, #24]
   269e2:	9907      	ldr	r1, [sp, #28]
   269e4:	f7fe fd38 	bl	25458 <__aeabi_d2iz>
   269e8:	0004      	movs	r4, r0
   269ea:	f7fe fd6b 	bl	254c4 <__aeabi_i2d>
   269ee:	0002      	movs	r2, r0
   269f0:	000b      	movs	r3, r1
   269f2:	9806      	ldr	r0, [sp, #24]
   269f4:	9907      	ldr	r1, [sp, #28]
   269f6:	f7fe f9db 	bl	24db0 <__aeabi_dsub>
   269fa:	3501      	adds	r5, #1
   269fc:	1e6b      	subs	r3, r5, #1
   269fe:	3430      	adds	r4, #48	; 0x30
   26a00:	701c      	strb	r4, [r3, #0]
   26a02:	9a12      	ldr	r2, [sp, #72]	; 0x48
   26a04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   26a06:	9006      	str	r0, [sp, #24]
   26a08:	9107      	str	r1, [sp, #28]
   26a0a:	f7fc fed3 	bl	237b4 <__aeabi_dcmplt>
   26a0e:	2800      	cmp	r0, #0
   26a10:	d000      	beq.n	26a14 <_dtoa_r+0x4e8>
   26a12:	e32e      	b.n	27072 <_dtoa_r+0xb46>
   26a14:	9a06      	ldr	r2, [sp, #24]
   26a16:	9b07      	ldr	r3, [sp, #28]
   26a18:	2000      	movs	r0, #0
   26a1a:	4986      	ldr	r1, [pc, #536]	; (26c34 <_dtoa_r+0x708>)
   26a1c:	f7fe f9c8 	bl	24db0 <__aeabi_dsub>
   26a20:	9a12      	ldr	r2, [sp, #72]	; 0x48
   26a22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   26a24:	f7fc fec6 	bl	237b4 <__aeabi_dcmplt>
   26a28:	2800      	cmp	r0, #0
   26a2a:	d000      	beq.n	26a2e <_dtoa_r+0x502>
   26a2c:	e0c7      	b.n	26bbe <_dtoa_r+0x692>
   26a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   26a30:	1aeb      	subs	r3, r5, r3
   26a32:	42b3      	cmp	r3, r6
   26a34:	da5b      	bge.n	26aee <_dtoa_r+0x5c2>
   26a36:	9812      	ldr	r0, [sp, #72]	; 0x48
   26a38:	9913      	ldr	r1, [sp, #76]	; 0x4c
   26a3a:	2200      	movs	r2, #0
   26a3c:	4b7e      	ldr	r3, [pc, #504]	; (26c38 <_dtoa_r+0x70c>)
   26a3e:	f7fd ff3d 	bl	248bc <__aeabi_dmul>
   26a42:	2200      	movs	r2, #0
   26a44:	9012      	str	r0, [sp, #72]	; 0x48
   26a46:	9113      	str	r1, [sp, #76]	; 0x4c
   26a48:	9806      	ldr	r0, [sp, #24]
   26a4a:	9907      	ldr	r1, [sp, #28]
   26a4c:	4b7a      	ldr	r3, [pc, #488]	; (26c38 <_dtoa_r+0x70c>)
   26a4e:	f7fd ff35 	bl	248bc <__aeabi_dmul>
   26a52:	9006      	str	r0, [sp, #24]
   26a54:	9107      	str	r1, [sp, #28]
   26a56:	e7c3      	b.n	269e0 <_dtoa_r+0x4b4>
   26a58:	18c9      	adds	r1, r1, r3
   26a5a:	0022      	movs	r2, r4
   26a5c:	6808      	ldr	r0, [r1, #0]
   26a5e:	6849      	ldr	r1, [r1, #4]
   26a60:	002b      	movs	r3, r5
   26a62:	f7fd ff2b 	bl	248bc <__aeabi_dmul>
   26a66:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   26a68:	9012      	str	r0, [sp, #72]	; 0x48
   26a6a:	9113      	str	r1, [sp, #76]	; 0x4c
   26a6c:	19a5      	adds	r5, r4, r6
   26a6e:	9806      	ldr	r0, [sp, #24]
   26a70:	9907      	ldr	r1, [sp, #28]
   26a72:	f7fe fcf1 	bl	25458 <__aeabi_d2iz>
   26a76:	0006      	movs	r6, r0
   26a78:	f7fe fd24 	bl	254c4 <__aeabi_i2d>
   26a7c:	0002      	movs	r2, r0
   26a7e:	000b      	movs	r3, r1
   26a80:	9806      	ldr	r0, [sp, #24]
   26a82:	9907      	ldr	r1, [sp, #28]
   26a84:	f7fe f994 	bl	24db0 <__aeabi_dsub>
   26a88:	3630      	adds	r6, #48	; 0x30
   26a8a:	7026      	strb	r6, [r4, #0]
   26a8c:	3401      	adds	r4, #1
   26a8e:	9006      	str	r0, [sp, #24]
   26a90:	9107      	str	r1, [sp, #28]
   26a92:	2200      	movs	r2, #0
   26a94:	42a5      	cmp	r5, r4
   26a96:	d122      	bne.n	26ade <_dtoa_r+0x5b2>
   26a98:	4b6d      	ldr	r3, [pc, #436]	; (26c50 <_dtoa_r+0x724>)
   26a9a:	9812      	ldr	r0, [sp, #72]	; 0x48
   26a9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   26a9e:	f7fc ffbd 	bl	23a1c <__aeabi_dadd>
   26aa2:	0002      	movs	r2, r0
   26aa4:	000b      	movs	r3, r1
   26aa6:	9806      	ldr	r0, [sp, #24]
   26aa8:	9907      	ldr	r1, [sp, #28]
   26aaa:	f7fc fe97 	bl	237dc <__aeabi_dcmpgt>
   26aae:	2800      	cmp	r0, #0
   26ab0:	d000      	beq.n	26ab4 <_dtoa_r+0x588>
   26ab2:	e084      	b.n	26bbe <_dtoa_r+0x692>
   26ab4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   26ab6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   26ab8:	2000      	movs	r0, #0
   26aba:	4965      	ldr	r1, [pc, #404]	; (26c50 <_dtoa_r+0x724>)
   26abc:	f7fe f978 	bl	24db0 <__aeabi_dsub>
   26ac0:	0002      	movs	r2, r0
   26ac2:	000b      	movs	r3, r1
   26ac4:	9806      	ldr	r0, [sp, #24]
   26ac6:	9907      	ldr	r1, [sp, #28]
   26ac8:	f7fc fe74 	bl	237b4 <__aeabi_dcmplt>
   26acc:	2800      	cmp	r0, #0
   26ace:	d00e      	beq.n	26aee <_dtoa_r+0x5c2>
   26ad0:	1e6b      	subs	r3, r5, #1
   26ad2:	781a      	ldrb	r2, [r3, #0]
   26ad4:	2a30      	cmp	r2, #48	; 0x30
   26ad6:	d000      	beq.n	26ada <_dtoa_r+0x5ae>
   26ad8:	e2cb      	b.n	27072 <_dtoa_r+0xb46>
   26ada:	001d      	movs	r5, r3
   26adc:	e7f8      	b.n	26ad0 <_dtoa_r+0x5a4>
   26ade:	9806      	ldr	r0, [sp, #24]
   26ae0:	9907      	ldr	r1, [sp, #28]
   26ae2:	4b55      	ldr	r3, [pc, #340]	; (26c38 <_dtoa_r+0x70c>)
   26ae4:	f7fd feea 	bl	248bc <__aeabi_dmul>
   26ae8:	9006      	str	r0, [sp, #24]
   26aea:	9107      	str	r1, [sp, #28]
   26aec:	e7bf      	b.n	26a6e <_dtoa_r+0x542>
   26aee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   26af0:	9c15      	ldr	r4, [sp, #84]	; 0x54
   26af2:	9306      	str	r3, [sp, #24]
   26af4:	9407      	str	r4, [sp, #28]
   26af6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   26af8:	2b00      	cmp	r3, #0
   26afa:	da00      	bge.n	26afe <_dtoa_r+0x5d2>
   26afc:	e081      	b.n	26c02 <_dtoa_r+0x6d6>
   26afe:	9a03      	ldr	r2, [sp, #12]
   26b00:	2a0e      	cmp	r2, #14
   26b02:	dd00      	ble.n	26b06 <_dtoa_r+0x5da>
   26b04:	e07d      	b.n	26c02 <_dtoa_r+0x6d6>
   26b06:	00d3      	lsls	r3, r2, #3
   26b08:	4a50      	ldr	r2, [pc, #320]	; (26c4c <_dtoa_r+0x720>)
   26b0a:	18d3      	adds	r3, r2, r3
   26b0c:	685c      	ldr	r4, [r3, #4]
   26b0e:	681b      	ldr	r3, [r3, #0]
   26b10:	9308      	str	r3, [sp, #32]
   26b12:	9409      	str	r4, [sp, #36]	; 0x24
   26b14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   26b16:	2b00      	cmp	r3, #0
   26b18:	da15      	bge.n	26b46 <_dtoa_r+0x61a>
   26b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26b1c:	2b00      	cmp	r3, #0
   26b1e:	dc12      	bgt.n	26b46 <_dtoa_r+0x61a>
   26b20:	d000      	beq.n	26b24 <_dtoa_r+0x5f8>
   26b22:	e188      	b.n	26e36 <_dtoa_r+0x90a>
   26b24:	9808      	ldr	r0, [sp, #32]
   26b26:	9909      	ldr	r1, [sp, #36]	; 0x24
   26b28:	2200      	movs	r2, #0
   26b2a:	4b46      	ldr	r3, [pc, #280]	; (26c44 <_dtoa_r+0x718>)
   26b2c:	f7fd fec6 	bl	248bc <__aeabi_dmul>
   26b30:	9a06      	ldr	r2, [sp, #24]
   26b32:	9b07      	ldr	r3, [sp, #28]
   26b34:	f7fc fe5c 	bl	237f0 <__aeabi_dcmpge>
   26b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26b3a:	9308      	str	r3, [sp, #32]
   26b3c:	001e      	movs	r6, r3
   26b3e:	2800      	cmp	r0, #0
   26b40:	d000      	beq.n	26b44 <_dtoa_r+0x618>
   26b42:	e17b      	b.n	26e3c <_dtoa_r+0x910>
   26b44:	e182      	b.n	26e4c <_dtoa_r+0x920>
   26b46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   26b48:	9e06      	ldr	r6, [sp, #24]
   26b4a:	9f07      	ldr	r7, [sp, #28]
   26b4c:	9a08      	ldr	r2, [sp, #32]
   26b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26b50:	0030      	movs	r0, r6
   26b52:	0039      	movs	r1, r7
   26b54:	f7fd fa8e 	bl	24074 <__aeabi_ddiv>
   26b58:	f7fe fc7e 	bl	25458 <__aeabi_d2iz>
   26b5c:	0004      	movs	r4, r0
   26b5e:	f7fe fcb1 	bl	254c4 <__aeabi_i2d>
   26b62:	9a08      	ldr	r2, [sp, #32]
   26b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26b66:	f7fd fea9 	bl	248bc <__aeabi_dmul>
   26b6a:	0002      	movs	r2, r0
   26b6c:	000b      	movs	r3, r1
   26b6e:	0030      	movs	r0, r6
   26b70:	0039      	movs	r1, r7
   26b72:	f7fe f91d 	bl	24db0 <__aeabi_dsub>
   26b76:	0022      	movs	r2, r4
   26b78:	3501      	adds	r5, #1
   26b7a:	1e6b      	subs	r3, r5, #1
   26b7c:	3230      	adds	r2, #48	; 0x30
   26b7e:	701a      	strb	r2, [r3, #0]
   26b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   26b82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26b84:	1aeb      	subs	r3, r5, r3
   26b86:	429a      	cmp	r2, r3
   26b88:	d12e      	bne.n	26be8 <_dtoa_r+0x6bc>
   26b8a:	0002      	movs	r2, r0
   26b8c:	000b      	movs	r3, r1
   26b8e:	f7fc ff45 	bl	23a1c <__aeabi_dadd>
   26b92:	0006      	movs	r6, r0
   26b94:	000f      	movs	r7, r1
   26b96:	0002      	movs	r2, r0
   26b98:	000b      	movs	r3, r1
   26b9a:	9808      	ldr	r0, [sp, #32]
   26b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
   26b9e:	f7fc fe09 	bl	237b4 <__aeabi_dcmplt>
   26ba2:	2800      	cmp	r0, #0
   26ba4:	d10f      	bne.n	26bc6 <_dtoa_r+0x69a>
   26ba6:	9808      	ldr	r0, [sp, #32]
   26ba8:	9909      	ldr	r1, [sp, #36]	; 0x24
   26baa:	0032      	movs	r2, r6
   26bac:	003b      	movs	r3, r7
   26bae:	f7fc fdfb 	bl	237a8 <__aeabi_dcmpeq>
   26bb2:	2800      	cmp	r0, #0
   26bb4:	d100      	bne.n	26bb8 <_dtoa_r+0x68c>
   26bb6:	e25e      	b.n	27076 <_dtoa_r+0xb4a>
   26bb8:	07e3      	lsls	r3, r4, #31
   26bba:	d404      	bmi.n	26bc6 <_dtoa_r+0x69a>
   26bbc:	e25b      	b.n	27076 <_dtoa_r+0xb4a>
   26bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26bc0:	9303      	str	r3, [sp, #12]
   26bc2:	e000      	b.n	26bc6 <_dtoa_r+0x69a>
   26bc4:	001d      	movs	r5, r3
   26bc6:	1e6b      	subs	r3, r5, #1
   26bc8:	781a      	ldrb	r2, [r3, #0]
   26bca:	2a39      	cmp	r2, #57	; 0x39
   26bcc:	d108      	bne.n	26be0 <_dtoa_r+0x6b4>
   26bce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   26bd0:	429a      	cmp	r2, r3
   26bd2:	d1f7      	bne.n	26bc4 <_dtoa_r+0x698>
   26bd4:	9a03      	ldr	r2, [sp, #12]
   26bd6:	990d      	ldr	r1, [sp, #52]	; 0x34
   26bd8:	3201      	adds	r2, #1
   26bda:	9203      	str	r2, [sp, #12]
   26bdc:	2230      	movs	r2, #48	; 0x30
   26bde:	700a      	strb	r2, [r1, #0]
   26be0:	781a      	ldrb	r2, [r3, #0]
   26be2:	3201      	adds	r2, #1
   26be4:	701a      	strb	r2, [r3, #0]
   26be6:	e246      	b.n	27076 <_dtoa_r+0xb4a>
   26be8:	2200      	movs	r2, #0
   26bea:	4b13      	ldr	r3, [pc, #76]	; (26c38 <_dtoa_r+0x70c>)
   26bec:	f7fd fe66 	bl	248bc <__aeabi_dmul>
   26bf0:	2200      	movs	r2, #0
   26bf2:	2300      	movs	r3, #0
   26bf4:	0006      	movs	r6, r0
   26bf6:	000f      	movs	r7, r1
   26bf8:	f7fc fdd6 	bl	237a8 <__aeabi_dcmpeq>
   26bfc:	2800      	cmp	r0, #0
   26bfe:	d0a5      	beq.n	26b4c <_dtoa_r+0x620>
   26c00:	e239      	b.n	27076 <_dtoa_r+0xb4a>
   26c02:	9a10      	ldr	r2, [sp, #64]	; 0x40
   26c04:	2a00      	cmp	r2, #0
   26c06:	d044      	beq.n	26c92 <_dtoa_r+0x766>
   26c08:	9a22      	ldr	r2, [sp, #136]	; 0x88
   26c0a:	2a01      	cmp	r2, #1
   26c0c:	dc0b      	bgt.n	26c26 <_dtoa_r+0x6fa>
   26c0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   26c10:	2a00      	cmp	r2, #0
   26c12:	d002      	beq.n	26c1a <_dtoa_r+0x6ee>
   26c14:	4a0f      	ldr	r2, [pc, #60]	; (26c54 <_dtoa_r+0x728>)
   26c16:	189b      	adds	r3, r3, r2
   26c18:	e002      	b.n	26c20 <_dtoa_r+0x6f4>
   26c1a:	2336      	movs	r3, #54	; 0x36
   26c1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   26c1e:	1a9b      	subs	r3, r3, r2
   26c20:	9d08      	ldr	r5, [sp, #32]
   26c22:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   26c24:	e029      	b.n	26c7a <_dtoa_r+0x74e>
   26c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26c28:	1e5d      	subs	r5, r3, #1
   26c2a:	9b08      	ldr	r3, [sp, #32]
   26c2c:	42ab      	cmp	r3, r5
   26c2e:	db13      	blt.n	26c58 <_dtoa_r+0x72c>
   26c30:	1b5d      	subs	r5, r3, r5
   26c32:	e018      	b.n	26c66 <_dtoa_r+0x73a>
   26c34:	3ff00000 	.word	0x3ff00000
   26c38:	40240000 	.word	0x40240000
   26c3c:	401c0000 	.word	0x401c0000
   26c40:	fcc00000 	.word	0xfcc00000
   26c44:	40140000 	.word	0x40140000
   26c48:	7cc00000 	.word	0x7cc00000
   26c4c:	0002ef58 	.word	0x0002ef58
   26c50:	3fe00000 	.word	0x3fe00000
   26c54:	00000433 	.word	0x00000433
   26c58:	9b08      	ldr	r3, [sp, #32]
   26c5a:	9508      	str	r5, [sp, #32]
   26c5c:	1aea      	subs	r2, r5, r3
   26c5e:	2500      	movs	r5, #0
   26c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26c62:	189b      	adds	r3, r3, r2
   26c64:	9311      	str	r3, [sp, #68]	; 0x44
   26c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26c68:	2b00      	cmp	r3, #0
   26c6a:	da04      	bge.n	26c76 <_dtoa_r+0x74a>
   26c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26c6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26c70:	1a9c      	subs	r4, r3, r2
   26c72:	2300      	movs	r3, #0
   26c74:	e001      	b.n	26c7a <_dtoa_r+0x74e>
   26c76:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   26c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26c7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   26c7c:	2101      	movs	r1, #1
   26c7e:	18d2      	adds	r2, r2, r3
   26c80:	920b      	str	r2, [sp, #44]	; 0x2c
   26c82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   26c84:	9804      	ldr	r0, [sp, #16]
   26c86:	18d3      	adds	r3, r2, r3
   26c88:	930c      	str	r3, [sp, #48]	; 0x30
   26c8a:	f000 fcf2 	bl	27672 <__i2b>
   26c8e:	0006      	movs	r6, r0
   26c90:	e002      	b.n	26c98 <_dtoa_r+0x76c>
   26c92:	9d08      	ldr	r5, [sp, #32]
   26c94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   26c96:	9e10      	ldr	r6, [sp, #64]	; 0x40
   26c98:	2c00      	cmp	r4, #0
   26c9a:	d00e      	beq.n	26cba <_dtoa_r+0x78e>
   26c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26c9e:	2b00      	cmp	r3, #0
   26ca0:	dd0b      	ble.n	26cba <_dtoa_r+0x78e>
   26ca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   26ca4:	0023      	movs	r3, r4
   26ca6:	4294      	cmp	r4, r2
   26ca8:	dd00      	ble.n	26cac <_dtoa_r+0x780>
   26caa:	0013      	movs	r3, r2
   26cac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   26cae:	1ae4      	subs	r4, r4, r3
   26cb0:	1ad2      	subs	r2, r2, r3
   26cb2:	920b      	str	r2, [sp, #44]	; 0x2c
   26cb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   26cb6:	1ad3      	subs	r3, r2, r3
   26cb8:	930c      	str	r3, [sp, #48]	; 0x30
   26cba:	9b08      	ldr	r3, [sp, #32]
   26cbc:	2b00      	cmp	r3, #0
   26cbe:	dd20      	ble.n	26d02 <_dtoa_r+0x7d6>
   26cc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   26cc2:	2b00      	cmp	r3, #0
   26cc4:	d017      	beq.n	26cf6 <_dtoa_r+0x7ca>
   26cc6:	2d00      	cmp	r5, #0
   26cc8:	d011      	beq.n	26cee <_dtoa_r+0x7c2>
   26cca:	0031      	movs	r1, r6
   26ccc:	002a      	movs	r2, r5
   26cce:	9804      	ldr	r0, [sp, #16]
   26cd0:	f000 fd62 	bl	27798 <__pow5mult>
   26cd4:	9a05      	ldr	r2, [sp, #20]
   26cd6:	0001      	movs	r1, r0
   26cd8:	0006      	movs	r6, r0
   26cda:	9804      	ldr	r0, [sp, #16]
   26cdc:	f000 fcd2 	bl	27684 <__multiply>
   26ce0:	9905      	ldr	r1, [sp, #20]
   26ce2:	900e      	str	r0, [sp, #56]	; 0x38
   26ce4:	9804      	ldr	r0, [sp, #16]
   26ce6:	f000 fc24 	bl	27532 <_Bfree>
   26cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26cec:	9305      	str	r3, [sp, #20]
   26cee:	9b08      	ldr	r3, [sp, #32]
   26cf0:	1b5a      	subs	r2, r3, r5
   26cf2:	d006      	beq.n	26d02 <_dtoa_r+0x7d6>
   26cf4:	e000      	b.n	26cf8 <_dtoa_r+0x7cc>
   26cf6:	9a08      	ldr	r2, [sp, #32]
   26cf8:	9905      	ldr	r1, [sp, #20]
   26cfa:	9804      	ldr	r0, [sp, #16]
   26cfc:	f000 fd4c 	bl	27798 <__pow5mult>
   26d00:	9005      	str	r0, [sp, #20]
   26d02:	2101      	movs	r1, #1
   26d04:	9804      	ldr	r0, [sp, #16]
   26d06:	f000 fcb4 	bl	27672 <__i2b>
   26d0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26d0c:	9008      	str	r0, [sp, #32]
   26d0e:	2b00      	cmp	r3, #0
   26d10:	d100      	bne.n	26d14 <_dtoa_r+0x7e8>
   26d12:	e1c0      	b.n	27096 <_dtoa_r+0xb6a>
   26d14:	001a      	movs	r2, r3
   26d16:	0001      	movs	r1, r0
   26d18:	9804      	ldr	r0, [sp, #16]
   26d1a:	f000 fd3d 	bl	27798 <__pow5mult>
   26d1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   26d20:	9008      	str	r0, [sp, #32]
   26d22:	2b01      	cmp	r3, #1
   26d24:	dc17      	bgt.n	26d56 <_dtoa_r+0x82a>
   26d26:	2500      	movs	r5, #0
   26d28:	9b06      	ldr	r3, [sp, #24]
   26d2a:	42ab      	cmp	r3, r5
   26d2c:	d10e      	bne.n	26d4c <_dtoa_r+0x820>
   26d2e:	9b07      	ldr	r3, [sp, #28]
   26d30:	031b      	lsls	r3, r3, #12
   26d32:	42ab      	cmp	r3, r5
   26d34:	d10a      	bne.n	26d4c <_dtoa_r+0x820>
   26d36:	9b19      	ldr	r3, [sp, #100]	; 0x64
   26d38:	9a07      	ldr	r2, [sp, #28]
   26d3a:	4213      	tst	r3, r2
   26d3c:	d006      	beq.n	26d4c <_dtoa_r+0x820>
   26d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26d40:	3501      	adds	r5, #1
   26d42:	3301      	adds	r3, #1
   26d44:	930b      	str	r3, [sp, #44]	; 0x2c
   26d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26d48:	3301      	adds	r3, #1
   26d4a:	930c      	str	r3, [sp, #48]	; 0x30
   26d4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26d4e:	2001      	movs	r0, #1
   26d50:	2b00      	cmp	r3, #0
   26d52:	d00d      	beq.n	26d70 <_dtoa_r+0x844>
   26d54:	e000      	b.n	26d58 <_dtoa_r+0x82c>
   26d56:	2500      	movs	r5, #0
   26d58:	9b08      	ldr	r3, [sp, #32]
   26d5a:	9a08      	ldr	r2, [sp, #32]
   26d5c:	691b      	ldr	r3, [r3, #16]
   26d5e:	930e      	str	r3, [sp, #56]	; 0x38
   26d60:	3303      	adds	r3, #3
   26d62:	009b      	lsls	r3, r3, #2
   26d64:	18d3      	adds	r3, r2, r3
   26d66:	6858      	ldr	r0, [r3, #4]
   26d68:	f000 fc39 	bl	275de <__hi0bits>
   26d6c:	2320      	movs	r3, #32
   26d6e:	1a18      	subs	r0, r3, r0
   26d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26d72:	18c0      	adds	r0, r0, r3
   26d74:	231f      	movs	r3, #31
   26d76:	4018      	ands	r0, r3
   26d78:	d009      	beq.n	26d8e <_dtoa_r+0x862>
   26d7a:	3301      	adds	r3, #1
   26d7c:	1a1b      	subs	r3, r3, r0
   26d7e:	2b04      	cmp	r3, #4
   26d80:	dd02      	ble.n	26d88 <_dtoa_r+0x85c>
   26d82:	231c      	movs	r3, #28
   26d84:	1a18      	subs	r0, r3, r0
   26d86:	e003      	b.n	26d90 <_dtoa_r+0x864>
   26d88:	2b04      	cmp	r3, #4
   26d8a:	d008      	beq.n	26d9e <_dtoa_r+0x872>
   26d8c:	0018      	movs	r0, r3
   26d8e:	301c      	adds	r0, #28
   26d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26d92:	1824      	adds	r4, r4, r0
   26d94:	181b      	adds	r3, r3, r0
   26d96:	930b      	str	r3, [sp, #44]	; 0x2c
   26d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26d9a:	181b      	adds	r3, r3, r0
   26d9c:	930c      	str	r3, [sp, #48]	; 0x30
   26d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26da0:	2b00      	cmp	r3, #0
   26da2:	dd05      	ble.n	26db0 <_dtoa_r+0x884>
   26da4:	001a      	movs	r2, r3
   26da6:	9905      	ldr	r1, [sp, #20]
   26da8:	9804      	ldr	r0, [sp, #16]
   26daa:	f000 fd49 	bl	27840 <__lshift>
   26dae:	9005      	str	r0, [sp, #20]
   26db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26db2:	2b00      	cmp	r3, #0
   26db4:	dd05      	ble.n	26dc2 <_dtoa_r+0x896>
   26db6:	001a      	movs	r2, r3
   26db8:	9908      	ldr	r1, [sp, #32]
   26dba:	9804      	ldr	r0, [sp, #16]
   26dbc:	f000 fd40 	bl	27840 <__lshift>
   26dc0:	9008      	str	r0, [sp, #32]
   26dc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   26dc4:	2b00      	cmp	r3, #0
   26dc6:	d01d      	beq.n	26e04 <_dtoa_r+0x8d8>
   26dc8:	9908      	ldr	r1, [sp, #32]
   26dca:	9805      	ldr	r0, [sp, #20]
   26dcc:	f000 fd8a 	bl	278e4 <__mcmp>
   26dd0:	2800      	cmp	r0, #0
   26dd2:	da17      	bge.n	26e04 <_dtoa_r+0x8d8>
   26dd4:	9b03      	ldr	r3, [sp, #12]
   26dd6:	220a      	movs	r2, #10
   26dd8:	3b01      	subs	r3, #1
   26dda:	9303      	str	r3, [sp, #12]
   26ddc:	9905      	ldr	r1, [sp, #20]
   26dde:	2300      	movs	r3, #0
   26de0:	9804      	ldr	r0, [sp, #16]
   26de2:	f000 fbbf 	bl	27564 <__multadd>
   26de6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   26de8:	9005      	str	r0, [sp, #20]
   26dea:	2b00      	cmp	r3, #0
   26dec:	d100      	bne.n	26df0 <_dtoa_r+0x8c4>
   26dee:	e159      	b.n	270a4 <_dtoa_r+0xb78>
   26df0:	0031      	movs	r1, r6
   26df2:	2300      	movs	r3, #0
   26df4:	220a      	movs	r2, #10
   26df6:	9804      	ldr	r0, [sp, #16]
   26df8:	f000 fbb4 	bl	27564 <__multadd>
   26dfc:	0006      	movs	r6, r0
   26dfe:	2f00      	cmp	r7, #0
   26e00:	dc37      	bgt.n	26e72 <_dtoa_r+0x946>
   26e02:	e033      	b.n	26e6c <_dtoa_r+0x940>
   26e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26e06:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   26e08:	2b00      	cmp	r3, #0
   26e0a:	dc2a      	bgt.n	26e62 <_dtoa_r+0x936>
   26e0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   26e0e:	2b02      	cmp	r3, #2
   26e10:	dd27      	ble.n	26e62 <_dtoa_r+0x936>
   26e12:	2f00      	cmp	r7, #0
   26e14:	d112      	bne.n	26e3c <_dtoa_r+0x910>
   26e16:	9908      	ldr	r1, [sp, #32]
   26e18:	003b      	movs	r3, r7
   26e1a:	2205      	movs	r2, #5
   26e1c:	9804      	ldr	r0, [sp, #16]
   26e1e:	f000 fba1 	bl	27564 <__multadd>
   26e22:	9008      	str	r0, [sp, #32]
   26e24:	0001      	movs	r1, r0
   26e26:	9805      	ldr	r0, [sp, #20]
   26e28:	f000 fd5c 	bl	278e4 <__mcmp>
   26e2c:	2800      	cmp	r0, #0
   26e2e:	dc0d      	bgt.n	26e4c <_dtoa_r+0x920>
   26e30:	e004      	b.n	26e3c <_dtoa_r+0x910>
   26e32:	9608      	str	r6, [sp, #32]
   26e34:	e002      	b.n	26e3c <_dtoa_r+0x910>
   26e36:	2300      	movs	r3, #0
   26e38:	001e      	movs	r6, r3
   26e3a:	9308      	str	r3, [sp, #32]
   26e3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   26e3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   26e40:	43db      	mvns	r3, r3
   26e42:	9303      	str	r3, [sp, #12]
   26e44:	e00a      	b.n	26e5c <_dtoa_r+0x930>
   26e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26e48:	9608      	str	r6, [sp, #32]
   26e4a:	9303      	str	r3, [sp, #12]
   26e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   26e4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   26e50:	1c5d      	adds	r5, r3, #1
   26e52:	2331      	movs	r3, #49	; 0x31
   26e54:	7013      	strb	r3, [r2, #0]
   26e56:	9b03      	ldr	r3, [sp, #12]
   26e58:	3301      	adds	r3, #1
   26e5a:	9303      	str	r3, [sp, #12]
   26e5c:	960a      	str	r6, [sp, #40]	; 0x28
   26e5e:	2600      	movs	r6, #0
   26e60:	e0f3      	b.n	2704a <_dtoa_r+0xb1e>
   26e62:	9b10      	ldr	r3, [sp, #64]	; 0x40
   26e64:	2b00      	cmp	r3, #0
   26e66:	d104      	bne.n	26e72 <_dtoa_r+0x946>
   26e68:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   26e6a:	e0b5      	b.n	26fd8 <_dtoa_r+0xaac>
   26e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   26e6e:	2b02      	cmp	r3, #2
   26e70:	dccf      	bgt.n	26e12 <_dtoa_r+0x8e6>
   26e72:	2c00      	cmp	r4, #0
   26e74:	dd05      	ble.n	26e82 <_dtoa_r+0x956>
   26e76:	0031      	movs	r1, r6
   26e78:	0022      	movs	r2, r4
   26e7a:	9804      	ldr	r0, [sp, #16]
   26e7c:	f000 fce0 	bl	27840 <__lshift>
   26e80:	0006      	movs	r6, r0
   26e82:	960a      	str	r6, [sp, #40]	; 0x28
   26e84:	2d00      	cmp	r5, #0
   26e86:	d012      	beq.n	26eae <_dtoa_r+0x982>
   26e88:	6871      	ldr	r1, [r6, #4]
   26e8a:	9804      	ldr	r0, [sp, #16]
   26e8c:	f000 fb19 	bl	274c2 <_Balloc>
   26e90:	0031      	movs	r1, r6
   26e92:	0004      	movs	r4, r0
   26e94:	6933      	ldr	r3, [r6, #16]
   26e96:	310c      	adds	r1, #12
   26e98:	1c9a      	adds	r2, r3, #2
   26e9a:	0092      	lsls	r2, r2, #2
   26e9c:	300c      	adds	r0, #12
   26e9e:	f7fe fc26 	bl	256ee <memcpy>
   26ea2:	2201      	movs	r2, #1
   26ea4:	0021      	movs	r1, r4
   26ea6:	9804      	ldr	r0, [sp, #16]
   26ea8:	f000 fcca 	bl	27840 <__lshift>
   26eac:	900a      	str	r0, [sp, #40]	; 0x28
   26eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   26eb0:	1e7d      	subs	r5, r7, #1
   26eb2:	930b      	str	r3, [sp, #44]	; 0x2c
   26eb4:	195b      	adds	r3, r3, r5
   26eb6:	930e      	str	r3, [sp, #56]	; 0x38
   26eb8:	9908      	ldr	r1, [sp, #32]
   26eba:	9805      	ldr	r0, [sp, #20]
   26ebc:	f7ff fab0 	bl	26420 <quorem>
   26ec0:	0031      	movs	r1, r6
   26ec2:	9010      	str	r0, [sp, #64]	; 0x40
   26ec4:	0004      	movs	r4, r0
   26ec6:	9805      	ldr	r0, [sp, #20]
   26ec8:	f000 fd0c 	bl	278e4 <__mcmp>
   26ecc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26ece:	0005      	movs	r5, r0
   26ed0:	9908      	ldr	r1, [sp, #32]
   26ed2:	9804      	ldr	r0, [sp, #16]
   26ed4:	f000 fd21 	bl	2791a <__mdiff>
   26ed8:	2301      	movs	r3, #1
   26eda:	930c      	str	r3, [sp, #48]	; 0x30
   26edc:	68c3      	ldr	r3, [r0, #12]
   26ede:	3430      	adds	r4, #48	; 0x30
   26ee0:	0007      	movs	r7, r0
   26ee2:	2b00      	cmp	r3, #0
   26ee4:	d104      	bne.n	26ef0 <_dtoa_r+0x9c4>
   26ee6:	0001      	movs	r1, r0
   26ee8:	9805      	ldr	r0, [sp, #20]
   26eea:	f000 fcfb 	bl	278e4 <__mcmp>
   26eee:	900c      	str	r0, [sp, #48]	; 0x30
   26ef0:	0039      	movs	r1, r7
   26ef2:	9804      	ldr	r0, [sp, #16]
   26ef4:	f000 fb1d 	bl	27532 <_Bfree>
   26ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26efa:	9a22      	ldr	r2, [sp, #136]	; 0x88
   26efc:	4313      	orrs	r3, r2
   26efe:	d108      	bne.n	26f12 <_dtoa_r+0x9e6>
   26f00:	9a06      	ldr	r2, [sp, #24]
   26f02:	3301      	adds	r3, #1
   26f04:	4213      	tst	r3, r2
   26f06:	d104      	bne.n	26f12 <_dtoa_r+0x9e6>
   26f08:	2c39      	cmp	r4, #57	; 0x39
   26f0a:	d02a      	beq.n	26f62 <_dtoa_r+0xa36>
   26f0c:	2d00      	cmp	r5, #0
   26f0e:	dc1c      	bgt.n	26f4a <_dtoa_r+0xa1e>
   26f10:	e01d      	b.n	26f4e <_dtoa_r+0xa22>
   26f12:	2d00      	cmp	r5, #0
   26f14:	db06      	blt.n	26f24 <_dtoa_r+0x9f8>
   26f16:	9b22      	ldr	r3, [sp, #136]	; 0x88
   26f18:	431d      	orrs	r5, r3
   26f1a:	d11b      	bne.n	26f54 <_dtoa_r+0xa28>
   26f1c:	2301      	movs	r3, #1
   26f1e:	9a06      	ldr	r2, [sp, #24]
   26f20:	4213      	tst	r3, r2
   26f22:	d117      	bne.n	26f54 <_dtoa_r+0xa28>
   26f24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26f26:	2b00      	cmp	r3, #0
   26f28:	dd11      	ble.n	26f4e <_dtoa_r+0xa22>
   26f2a:	9905      	ldr	r1, [sp, #20]
   26f2c:	2201      	movs	r2, #1
   26f2e:	9804      	ldr	r0, [sp, #16]
   26f30:	f000 fc86 	bl	27840 <__lshift>
   26f34:	9908      	ldr	r1, [sp, #32]
   26f36:	9005      	str	r0, [sp, #20]
   26f38:	f000 fcd4 	bl	278e4 <__mcmp>
   26f3c:	2800      	cmp	r0, #0
   26f3e:	dc02      	bgt.n	26f46 <_dtoa_r+0xa1a>
   26f40:	d105      	bne.n	26f4e <_dtoa_r+0xa22>
   26f42:	07e3      	lsls	r3, r4, #31
   26f44:	d503      	bpl.n	26f4e <_dtoa_r+0xa22>
   26f46:	2c39      	cmp	r4, #57	; 0x39
   26f48:	d00b      	beq.n	26f62 <_dtoa_r+0xa36>
   26f4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   26f4c:	3431      	adds	r4, #49	; 0x31
   26f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26f50:	1c5d      	adds	r5, r3, #1
   26f52:	e00f      	b.n	26f74 <_dtoa_r+0xa48>
   26f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26f56:	1c5f      	adds	r7, r3, #1
   26f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26f5a:	2b00      	cmp	r3, #0
   26f5c:	dd0c      	ble.n	26f78 <_dtoa_r+0xa4c>
   26f5e:	2c39      	cmp	r4, #57	; 0x39
   26f60:	d105      	bne.n	26f6e <_dtoa_r+0xa42>
   26f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26f64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   26f66:	1c5d      	adds	r5, r3, #1
   26f68:	2339      	movs	r3, #57	; 0x39
   26f6a:	7013      	strb	r3, [r2, #0]
   26f6c:	e057      	b.n	2701e <_dtoa_r+0xaf2>
   26f6e:	003d      	movs	r5, r7
   26f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26f72:	3401      	adds	r4, #1
   26f74:	701c      	strb	r4, [r3, #0]
   26f76:	e068      	b.n	2704a <_dtoa_r+0xb1e>
   26f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26f7c:	003d      	movs	r5, r7
   26f7e:	701c      	strb	r4, [r3, #0]
   26f80:	4293      	cmp	r3, r2
   26f82:	d03c      	beq.n	26ffe <_dtoa_r+0xad2>
   26f84:	2300      	movs	r3, #0
   26f86:	220a      	movs	r2, #10
   26f88:	9905      	ldr	r1, [sp, #20]
   26f8a:	9804      	ldr	r0, [sp, #16]
   26f8c:	f000 faea 	bl	27564 <__multadd>
   26f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26f92:	9005      	str	r0, [sp, #20]
   26f94:	429e      	cmp	r6, r3
   26f96:	d108      	bne.n	26faa <_dtoa_r+0xa7e>
   26f98:	0031      	movs	r1, r6
   26f9a:	2300      	movs	r3, #0
   26f9c:	220a      	movs	r2, #10
   26f9e:	9804      	ldr	r0, [sp, #16]
   26fa0:	f000 fae0 	bl	27564 <__multadd>
   26fa4:	0006      	movs	r6, r0
   26fa6:	900a      	str	r0, [sp, #40]	; 0x28
   26fa8:	e00d      	b.n	26fc6 <_dtoa_r+0xa9a>
   26faa:	0031      	movs	r1, r6
   26fac:	2300      	movs	r3, #0
   26fae:	220a      	movs	r2, #10
   26fb0:	9804      	ldr	r0, [sp, #16]
   26fb2:	f000 fad7 	bl	27564 <__multadd>
   26fb6:	2300      	movs	r3, #0
   26fb8:	0006      	movs	r6, r0
   26fba:	220a      	movs	r2, #10
   26fbc:	990a      	ldr	r1, [sp, #40]	; 0x28
   26fbe:	9804      	ldr	r0, [sp, #16]
   26fc0:	f000 fad0 	bl	27564 <__multadd>
   26fc4:	900a      	str	r0, [sp, #40]	; 0x28
   26fc6:	970b      	str	r7, [sp, #44]	; 0x2c
   26fc8:	e776      	b.n	26eb8 <_dtoa_r+0x98c>
   26fca:	2300      	movs	r3, #0
   26fcc:	220a      	movs	r2, #10
   26fce:	9905      	ldr	r1, [sp, #20]
   26fd0:	9804      	ldr	r0, [sp, #16]
   26fd2:	f000 fac7 	bl	27564 <__multadd>
   26fd6:	9005      	str	r0, [sp, #20]
   26fd8:	9908      	ldr	r1, [sp, #32]
   26fda:	9805      	ldr	r0, [sp, #20]
   26fdc:	f7ff fa20 	bl	26420 <quorem>
   26fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   26fe2:	3030      	adds	r0, #48	; 0x30
   26fe4:	7028      	strb	r0, [r5, #0]
   26fe6:	3501      	adds	r5, #1
   26fe8:	0004      	movs	r4, r0
   26fea:	1aeb      	subs	r3, r5, r3
   26fec:	42bb      	cmp	r3, r7
   26fee:	dbec      	blt.n	26fca <_dtoa_r+0xa9e>
   26ff0:	1e3d      	subs	r5, r7, #0
   26ff2:	dc00      	bgt.n	26ff6 <_dtoa_r+0xaca>
   26ff4:	2501      	movs	r5, #1
   26ff6:	960a      	str	r6, [sp, #40]	; 0x28
   26ff8:	2600      	movs	r6, #0
   26ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   26ffc:	195d      	adds	r5, r3, r5
   26ffe:	9905      	ldr	r1, [sp, #20]
   27000:	2201      	movs	r2, #1
   27002:	9804      	ldr	r0, [sp, #16]
   27004:	f000 fc1c 	bl	27840 <__lshift>
   27008:	9908      	ldr	r1, [sp, #32]
   2700a:	9005      	str	r0, [sp, #20]
   2700c:	f000 fc6a 	bl	278e4 <__mcmp>
   27010:	2800      	cmp	r0, #0
   27012:	dc04      	bgt.n	2701e <_dtoa_r+0xaf2>
   27014:	d113      	bne.n	2703e <_dtoa_r+0xb12>
   27016:	07e3      	lsls	r3, r4, #31
   27018:	d401      	bmi.n	2701e <_dtoa_r+0xaf2>
   2701a:	e010      	b.n	2703e <_dtoa_r+0xb12>
   2701c:	001d      	movs	r5, r3
   2701e:	1e6b      	subs	r3, r5, #1
   27020:	781a      	ldrb	r2, [r3, #0]
   27022:	2a39      	cmp	r2, #57	; 0x39
   27024:	d108      	bne.n	27038 <_dtoa_r+0xb0c>
   27026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   27028:	429a      	cmp	r2, r3
   2702a:	d1f7      	bne.n	2701c <_dtoa_r+0xaf0>
   2702c:	9b03      	ldr	r3, [sp, #12]
   2702e:	3301      	adds	r3, #1
   27030:	9303      	str	r3, [sp, #12]
   27032:	2331      	movs	r3, #49	; 0x31
   27034:	7013      	strb	r3, [r2, #0]
   27036:	e008      	b.n	2704a <_dtoa_r+0xb1e>
   27038:	3201      	adds	r2, #1
   2703a:	701a      	strb	r2, [r3, #0]
   2703c:	e005      	b.n	2704a <_dtoa_r+0xb1e>
   2703e:	1e6b      	subs	r3, r5, #1
   27040:	781a      	ldrb	r2, [r3, #0]
   27042:	2a30      	cmp	r2, #48	; 0x30
   27044:	d101      	bne.n	2704a <_dtoa_r+0xb1e>
   27046:	001d      	movs	r5, r3
   27048:	e7f9      	b.n	2703e <_dtoa_r+0xb12>
   2704a:	9908      	ldr	r1, [sp, #32]
   2704c:	9804      	ldr	r0, [sp, #16]
   2704e:	f000 fa70 	bl	27532 <_Bfree>
   27052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27054:	2b00      	cmp	r3, #0
   27056:	d00e      	beq.n	27076 <_dtoa_r+0xb4a>
   27058:	2e00      	cmp	r6, #0
   2705a:	d005      	beq.n	27068 <_dtoa_r+0xb3c>
   2705c:	429e      	cmp	r6, r3
   2705e:	d003      	beq.n	27068 <_dtoa_r+0xb3c>
   27060:	0031      	movs	r1, r6
   27062:	9804      	ldr	r0, [sp, #16]
   27064:	f000 fa65 	bl	27532 <_Bfree>
   27068:	990a      	ldr	r1, [sp, #40]	; 0x28
   2706a:	9804      	ldr	r0, [sp, #16]
   2706c:	f000 fa61 	bl	27532 <_Bfree>
   27070:	e001      	b.n	27076 <_dtoa_r+0xb4a>
   27072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27074:	9303      	str	r3, [sp, #12]
   27076:	9804      	ldr	r0, [sp, #16]
   27078:	9905      	ldr	r1, [sp, #20]
   2707a:	f000 fa5a 	bl	27532 <_Bfree>
   2707e:	2300      	movs	r3, #0
   27080:	702b      	strb	r3, [r5, #0]
   27082:	9b03      	ldr	r3, [sp, #12]
   27084:	9a24      	ldr	r2, [sp, #144]	; 0x90
   27086:	3301      	adds	r3, #1
   27088:	6013      	str	r3, [r2, #0]
   2708a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2708c:	980d      	ldr	r0, [sp, #52]	; 0x34
   2708e:	2b00      	cmp	r3, #0
   27090:	d010      	beq.n	270b4 <_dtoa_r+0xb88>
   27092:	601d      	str	r5, [r3, #0]
   27094:	e00e      	b.n	270b4 <_dtoa_r+0xb88>
   27096:	9b22      	ldr	r3, [sp, #136]	; 0x88
   27098:	2b01      	cmp	r3, #1
   2709a:	dc00      	bgt.n	2709e <_dtoa_r+0xb72>
   2709c:	e643      	b.n	26d26 <_dtoa_r+0x7fa>
   2709e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   270a0:	2001      	movs	r0, #1
   270a2:	e665      	b.n	26d70 <_dtoa_r+0x844>
   270a4:	2f00      	cmp	r7, #0
   270a6:	dd00      	ble.n	270aa <_dtoa_r+0xb7e>
   270a8:	e6de      	b.n	26e68 <_dtoa_r+0x93c>
   270aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   270ac:	2b02      	cmp	r3, #2
   270ae:	dc00      	bgt.n	270b2 <_dtoa_r+0xb86>
   270b0:	e6da      	b.n	26e68 <_dtoa_r+0x93c>
   270b2:	e6ae      	b.n	26e12 <_dtoa_r+0x8e6>
   270b4:	b01d      	add	sp, #116	; 0x74
   270b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000270b8 <__sflush_r>:
   270b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   270ba:	898a      	ldrh	r2, [r1, #12]
   270bc:	0005      	movs	r5, r0
   270be:	000c      	movs	r4, r1
   270c0:	0713      	lsls	r3, r2, #28
   270c2:	d45a      	bmi.n	2717a <__sflush_r+0xc2>
   270c4:	684b      	ldr	r3, [r1, #4]
   270c6:	2b00      	cmp	r3, #0
   270c8:	dc02      	bgt.n	270d0 <__sflush_r+0x18>
   270ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   270cc:	2b00      	cmp	r3, #0
   270ce:	dd19      	ble.n	27104 <__sflush_r+0x4c>
   270d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   270d2:	2f00      	cmp	r7, #0
   270d4:	d016      	beq.n	27104 <__sflush_r+0x4c>
   270d6:	2300      	movs	r3, #0
   270d8:	682e      	ldr	r6, [r5, #0]
   270da:	602b      	str	r3, [r5, #0]
   270dc:	2380      	movs	r3, #128	; 0x80
   270de:	015b      	lsls	r3, r3, #5
   270e0:	401a      	ands	r2, r3
   270e2:	d001      	beq.n	270e8 <__sflush_r+0x30>
   270e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   270e6:	e014      	b.n	27112 <__sflush_r+0x5a>
   270e8:	2301      	movs	r3, #1
   270ea:	6a21      	ldr	r1, [r4, #32]
   270ec:	0028      	movs	r0, r5
   270ee:	47b8      	blx	r7
   270f0:	1c43      	adds	r3, r0, #1
   270f2:	d10e      	bne.n	27112 <__sflush_r+0x5a>
   270f4:	682b      	ldr	r3, [r5, #0]
   270f6:	2b00      	cmp	r3, #0
   270f8:	d00b      	beq.n	27112 <__sflush_r+0x5a>
   270fa:	2b1d      	cmp	r3, #29
   270fc:	d001      	beq.n	27102 <__sflush_r+0x4a>
   270fe:	2b16      	cmp	r3, #22
   27100:	d102      	bne.n	27108 <__sflush_r+0x50>
   27102:	602e      	str	r6, [r5, #0]
   27104:	2000      	movs	r0, #0
   27106:	e05a      	b.n	271be <__sflush_r+0x106>
   27108:	2240      	movs	r2, #64	; 0x40
   2710a:	89a3      	ldrh	r3, [r4, #12]
   2710c:	4313      	orrs	r3, r2
   2710e:	81a3      	strh	r3, [r4, #12]
   27110:	e055      	b.n	271be <__sflush_r+0x106>
   27112:	89a3      	ldrh	r3, [r4, #12]
   27114:	075b      	lsls	r3, r3, #29
   27116:	d506      	bpl.n	27126 <__sflush_r+0x6e>
   27118:	6863      	ldr	r3, [r4, #4]
   2711a:	1ac0      	subs	r0, r0, r3
   2711c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2711e:	2b00      	cmp	r3, #0
   27120:	d001      	beq.n	27126 <__sflush_r+0x6e>
   27122:	6c23      	ldr	r3, [r4, #64]	; 0x40
   27124:	1ac0      	subs	r0, r0, r3
   27126:	2300      	movs	r3, #0
   27128:	0002      	movs	r2, r0
   2712a:	6a21      	ldr	r1, [r4, #32]
   2712c:	0028      	movs	r0, r5
   2712e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   27130:	47b8      	blx	r7
   27132:	89a3      	ldrh	r3, [r4, #12]
   27134:	1c42      	adds	r2, r0, #1
   27136:	d106      	bne.n	27146 <__sflush_r+0x8e>
   27138:	6829      	ldr	r1, [r5, #0]
   2713a:	291d      	cmp	r1, #29
   2713c:	d83a      	bhi.n	271b4 <__sflush_r+0xfc>
   2713e:	4a20      	ldr	r2, [pc, #128]	; (271c0 <__sflush_r+0x108>)
   27140:	40ca      	lsrs	r2, r1
   27142:	07d2      	lsls	r2, r2, #31
   27144:	d536      	bpl.n	271b4 <__sflush_r+0xfc>
   27146:	2200      	movs	r2, #0
   27148:	6062      	str	r2, [r4, #4]
   2714a:	6922      	ldr	r2, [r4, #16]
   2714c:	6022      	str	r2, [r4, #0]
   2714e:	04db      	lsls	r3, r3, #19
   27150:	d505      	bpl.n	2715e <__sflush_r+0xa6>
   27152:	1c43      	adds	r3, r0, #1
   27154:	d102      	bne.n	2715c <__sflush_r+0xa4>
   27156:	682b      	ldr	r3, [r5, #0]
   27158:	2b00      	cmp	r3, #0
   2715a:	d100      	bne.n	2715e <__sflush_r+0xa6>
   2715c:	6560      	str	r0, [r4, #84]	; 0x54
   2715e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   27160:	602e      	str	r6, [r5, #0]
   27162:	2900      	cmp	r1, #0
   27164:	d0ce      	beq.n	27104 <__sflush_r+0x4c>
   27166:	0023      	movs	r3, r4
   27168:	3344      	adds	r3, #68	; 0x44
   2716a:	4299      	cmp	r1, r3
   2716c:	d002      	beq.n	27174 <__sflush_r+0xbc>
   2716e:	0028      	movs	r0, r5
   27170:	f7fe fae4 	bl	2573c <_free_r>
   27174:	2000      	movs	r0, #0
   27176:	6360      	str	r0, [r4, #52]	; 0x34
   27178:	e021      	b.n	271be <__sflush_r+0x106>
   2717a:	690f      	ldr	r7, [r1, #16]
   2717c:	2f00      	cmp	r7, #0
   2717e:	d0c1      	beq.n	27104 <__sflush_r+0x4c>
   27180:	680b      	ldr	r3, [r1, #0]
   27182:	600f      	str	r7, [r1, #0]
   27184:	1bdb      	subs	r3, r3, r7
   27186:	9301      	str	r3, [sp, #4]
   27188:	2300      	movs	r3, #0
   2718a:	0792      	lsls	r2, r2, #30
   2718c:	d100      	bne.n	27190 <__sflush_r+0xd8>
   2718e:	694b      	ldr	r3, [r1, #20]
   27190:	60a3      	str	r3, [r4, #8]
   27192:	e003      	b.n	2719c <__sflush_r+0xe4>
   27194:	9b01      	ldr	r3, [sp, #4]
   27196:	183f      	adds	r7, r7, r0
   27198:	1a1b      	subs	r3, r3, r0
   2719a:	9301      	str	r3, [sp, #4]
   2719c:	9b01      	ldr	r3, [sp, #4]
   2719e:	2b00      	cmp	r3, #0
   271a0:	ddb0      	ble.n	27104 <__sflush_r+0x4c>
   271a2:	9b01      	ldr	r3, [sp, #4]
   271a4:	003a      	movs	r2, r7
   271a6:	6a21      	ldr	r1, [r4, #32]
   271a8:	0028      	movs	r0, r5
   271aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   271ac:	47b0      	blx	r6
   271ae:	2800      	cmp	r0, #0
   271b0:	dcf0      	bgt.n	27194 <__sflush_r+0xdc>
   271b2:	89a3      	ldrh	r3, [r4, #12]
   271b4:	2240      	movs	r2, #64	; 0x40
   271b6:	2001      	movs	r0, #1
   271b8:	4313      	orrs	r3, r2
   271ba:	81a3      	strh	r3, [r4, #12]
   271bc:	4240      	negs	r0, r0
   271be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   271c0:	20400001 	.word	0x20400001

000271c4 <_fflush_r>:
   271c4:	690b      	ldr	r3, [r1, #16]
   271c6:	b570      	push	{r4, r5, r6, lr}
   271c8:	0005      	movs	r5, r0
   271ca:	000c      	movs	r4, r1
   271cc:	2b00      	cmp	r3, #0
   271ce:	d101      	bne.n	271d4 <_fflush_r+0x10>
   271d0:	2000      	movs	r0, #0
   271d2:	e01c      	b.n	2720e <_fflush_r+0x4a>
   271d4:	2800      	cmp	r0, #0
   271d6:	d004      	beq.n	271e2 <_fflush_r+0x1e>
   271d8:	6983      	ldr	r3, [r0, #24]
   271da:	2b00      	cmp	r3, #0
   271dc:	d101      	bne.n	271e2 <_fflush_r+0x1e>
   271de:	f000 f85f 	bl	272a0 <__sinit>
   271e2:	4b0b      	ldr	r3, [pc, #44]	; (27210 <_fflush_r+0x4c>)
   271e4:	429c      	cmp	r4, r3
   271e6:	d101      	bne.n	271ec <_fflush_r+0x28>
   271e8:	686c      	ldr	r4, [r5, #4]
   271ea:	e008      	b.n	271fe <_fflush_r+0x3a>
   271ec:	4b09      	ldr	r3, [pc, #36]	; (27214 <_fflush_r+0x50>)
   271ee:	429c      	cmp	r4, r3
   271f0:	d101      	bne.n	271f6 <_fflush_r+0x32>
   271f2:	68ac      	ldr	r4, [r5, #8]
   271f4:	e003      	b.n	271fe <_fflush_r+0x3a>
   271f6:	4b08      	ldr	r3, [pc, #32]	; (27218 <_fflush_r+0x54>)
   271f8:	429c      	cmp	r4, r3
   271fa:	d100      	bne.n	271fe <_fflush_r+0x3a>
   271fc:	68ec      	ldr	r4, [r5, #12]
   271fe:	220c      	movs	r2, #12
   27200:	5ea3      	ldrsh	r3, [r4, r2]
   27202:	2b00      	cmp	r3, #0
   27204:	d0e4      	beq.n	271d0 <_fflush_r+0xc>
   27206:	0021      	movs	r1, r4
   27208:	0028      	movs	r0, r5
   2720a:	f7ff ff55 	bl	270b8 <__sflush_r>
   2720e:	bd70      	pop	{r4, r5, r6, pc}
   27210:	0002eef4 	.word	0x0002eef4
   27214:	0002ef14 	.word	0x0002ef14
   27218:	0002ef34 	.word	0x0002ef34

0002721c <_cleanup_r>:
   2721c:	b510      	push	{r4, lr}
   2721e:	4902      	ldr	r1, [pc, #8]	; (27228 <_cleanup_r+0xc>)
   27220:	f000 f8b0 	bl	27384 <_fwalk_reent>
   27224:	bd10      	pop	{r4, pc}
   27226:	46c0      	nop			; (mov r8, r8)
   27228:	000271c5 	.word	0x000271c5

0002722c <std.isra.0>:
   2722c:	2300      	movs	r3, #0
   2722e:	b510      	push	{r4, lr}
   27230:	0004      	movs	r4, r0
   27232:	6003      	str	r3, [r0, #0]
   27234:	6043      	str	r3, [r0, #4]
   27236:	6083      	str	r3, [r0, #8]
   27238:	8181      	strh	r1, [r0, #12]
   2723a:	6643      	str	r3, [r0, #100]	; 0x64
   2723c:	81c2      	strh	r2, [r0, #14]
   2723e:	6103      	str	r3, [r0, #16]
   27240:	6143      	str	r3, [r0, #20]
   27242:	6183      	str	r3, [r0, #24]
   27244:	0019      	movs	r1, r3
   27246:	2208      	movs	r2, #8
   27248:	305c      	adds	r0, #92	; 0x5c
   2724a:	f7fe fa6e 	bl	2572a <memset>
   2724e:	4b05      	ldr	r3, [pc, #20]	; (27264 <std.isra.0+0x38>)
   27250:	6224      	str	r4, [r4, #32]
   27252:	6263      	str	r3, [r4, #36]	; 0x24
   27254:	4b04      	ldr	r3, [pc, #16]	; (27268 <std.isra.0+0x3c>)
   27256:	62a3      	str	r3, [r4, #40]	; 0x28
   27258:	4b04      	ldr	r3, [pc, #16]	; (2726c <std.isra.0+0x40>)
   2725a:	62e3      	str	r3, [r4, #44]	; 0x2c
   2725c:	4b04      	ldr	r3, [pc, #16]	; (27270 <std.isra.0+0x44>)
   2725e:	6323      	str	r3, [r4, #48]	; 0x30
   27260:	bd10      	pop	{r4, pc}
   27262:	46c0      	nop			; (mov r8, r8)
   27264:	00027ffd 	.word	0x00027ffd
   27268:	00028025 	.word	0x00028025
   2726c:	0002805d 	.word	0x0002805d
   27270:	00028089 	.word	0x00028089

00027274 <__sfmoreglue>:
   27274:	b570      	push	{r4, r5, r6, lr}
   27276:	2568      	movs	r5, #104	; 0x68
   27278:	1e4b      	subs	r3, r1, #1
   2727a:	435d      	muls	r5, r3
   2727c:	000e      	movs	r6, r1
   2727e:	0029      	movs	r1, r5
   27280:	3174      	adds	r1, #116	; 0x74
   27282:	f7fe faa7 	bl	257d4 <_malloc_r>
   27286:	1e04      	subs	r4, r0, #0
   27288:	d008      	beq.n	2729c <__sfmoreglue+0x28>
   2728a:	2100      	movs	r1, #0
   2728c:	002a      	movs	r2, r5
   2728e:	6001      	str	r1, [r0, #0]
   27290:	6046      	str	r6, [r0, #4]
   27292:	300c      	adds	r0, #12
   27294:	60a0      	str	r0, [r4, #8]
   27296:	3268      	adds	r2, #104	; 0x68
   27298:	f7fe fa47 	bl	2572a <memset>
   2729c:	0020      	movs	r0, r4
   2729e:	bd70      	pop	{r4, r5, r6, pc}

000272a0 <__sinit>:
   272a0:	6983      	ldr	r3, [r0, #24]
   272a2:	b513      	push	{r0, r1, r4, lr}
   272a4:	0004      	movs	r4, r0
   272a6:	2b00      	cmp	r3, #0
   272a8:	d128      	bne.n	272fc <__sinit+0x5c>
   272aa:	6483      	str	r3, [r0, #72]	; 0x48
   272ac:	64c3      	str	r3, [r0, #76]	; 0x4c
   272ae:	6503      	str	r3, [r0, #80]	; 0x50
   272b0:	4b13      	ldr	r3, [pc, #76]	; (27300 <__sinit+0x60>)
   272b2:	4a14      	ldr	r2, [pc, #80]	; (27304 <__sinit+0x64>)
   272b4:	681b      	ldr	r3, [r3, #0]
   272b6:	6282      	str	r2, [r0, #40]	; 0x28
   272b8:	9301      	str	r3, [sp, #4]
   272ba:	4298      	cmp	r0, r3
   272bc:	d101      	bne.n	272c2 <__sinit+0x22>
   272be:	2301      	movs	r3, #1
   272c0:	6183      	str	r3, [r0, #24]
   272c2:	0020      	movs	r0, r4
   272c4:	f000 f820 	bl	27308 <__sfp>
   272c8:	6060      	str	r0, [r4, #4]
   272ca:	0020      	movs	r0, r4
   272cc:	f000 f81c 	bl	27308 <__sfp>
   272d0:	60a0      	str	r0, [r4, #8]
   272d2:	0020      	movs	r0, r4
   272d4:	f000 f818 	bl	27308 <__sfp>
   272d8:	2200      	movs	r2, #0
   272da:	60e0      	str	r0, [r4, #12]
   272dc:	2104      	movs	r1, #4
   272de:	6860      	ldr	r0, [r4, #4]
   272e0:	f7ff ffa4 	bl	2722c <std.isra.0>
   272e4:	2201      	movs	r2, #1
   272e6:	2109      	movs	r1, #9
   272e8:	68a0      	ldr	r0, [r4, #8]
   272ea:	f7ff ff9f 	bl	2722c <std.isra.0>
   272ee:	2202      	movs	r2, #2
   272f0:	2112      	movs	r1, #18
   272f2:	68e0      	ldr	r0, [r4, #12]
   272f4:	f7ff ff9a 	bl	2722c <std.isra.0>
   272f8:	2301      	movs	r3, #1
   272fa:	61a3      	str	r3, [r4, #24]
   272fc:	bd13      	pop	{r0, r1, r4, pc}
   272fe:	46c0      	nop			; (mov r8, r8)
   27300:	0002eda4 	.word	0x0002eda4
   27304:	0002721d 	.word	0x0002721d

00027308 <__sfp>:
   27308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2730a:	4b1d      	ldr	r3, [pc, #116]	; (27380 <__sfp+0x78>)
   2730c:	0006      	movs	r6, r0
   2730e:	681d      	ldr	r5, [r3, #0]
   27310:	69ab      	ldr	r3, [r5, #24]
   27312:	2b00      	cmp	r3, #0
   27314:	d102      	bne.n	2731c <__sfp+0x14>
   27316:	0028      	movs	r0, r5
   27318:	f7ff ffc2 	bl	272a0 <__sinit>
   2731c:	3548      	adds	r5, #72	; 0x48
   2731e:	68ac      	ldr	r4, [r5, #8]
   27320:	686b      	ldr	r3, [r5, #4]
   27322:	3b01      	subs	r3, #1
   27324:	d405      	bmi.n	27332 <__sfp+0x2a>
   27326:	220c      	movs	r2, #12
   27328:	5ea7      	ldrsh	r7, [r4, r2]
   2732a:	2f00      	cmp	r7, #0
   2732c:	d010      	beq.n	27350 <__sfp+0x48>
   2732e:	3468      	adds	r4, #104	; 0x68
   27330:	e7f7      	b.n	27322 <__sfp+0x1a>
   27332:	682b      	ldr	r3, [r5, #0]
   27334:	2b00      	cmp	r3, #0
   27336:	d001      	beq.n	2733c <__sfp+0x34>
   27338:	682d      	ldr	r5, [r5, #0]
   2733a:	e7f0      	b.n	2731e <__sfp+0x16>
   2733c:	2104      	movs	r1, #4
   2733e:	0030      	movs	r0, r6
   27340:	f7ff ff98 	bl	27274 <__sfmoreglue>
   27344:	6028      	str	r0, [r5, #0]
   27346:	2800      	cmp	r0, #0
   27348:	d1f6      	bne.n	27338 <__sfp+0x30>
   2734a:	230c      	movs	r3, #12
   2734c:	6033      	str	r3, [r6, #0]
   2734e:	e016      	b.n	2737e <__sfp+0x76>
   27350:	2301      	movs	r3, #1
   27352:	0020      	movs	r0, r4
   27354:	425b      	negs	r3, r3
   27356:	81e3      	strh	r3, [r4, #14]
   27358:	3302      	adds	r3, #2
   2735a:	81a3      	strh	r3, [r4, #12]
   2735c:	6667      	str	r7, [r4, #100]	; 0x64
   2735e:	6027      	str	r7, [r4, #0]
   27360:	60a7      	str	r7, [r4, #8]
   27362:	6067      	str	r7, [r4, #4]
   27364:	6127      	str	r7, [r4, #16]
   27366:	6167      	str	r7, [r4, #20]
   27368:	61a7      	str	r7, [r4, #24]
   2736a:	305c      	adds	r0, #92	; 0x5c
   2736c:	2208      	movs	r2, #8
   2736e:	0039      	movs	r1, r7
   27370:	f7fe f9db 	bl	2572a <memset>
   27374:	0020      	movs	r0, r4
   27376:	6367      	str	r7, [r4, #52]	; 0x34
   27378:	63a7      	str	r7, [r4, #56]	; 0x38
   2737a:	64a7      	str	r7, [r4, #72]	; 0x48
   2737c:	64e7      	str	r7, [r4, #76]	; 0x4c
   2737e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27380:	0002eda4 	.word	0x0002eda4

00027384 <_fwalk_reent>:
   27384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27386:	0004      	movs	r4, r0
   27388:	0007      	movs	r7, r0
   2738a:	2600      	movs	r6, #0
   2738c:	9101      	str	r1, [sp, #4]
   2738e:	3448      	adds	r4, #72	; 0x48
   27390:	2c00      	cmp	r4, #0
   27392:	d016      	beq.n	273c2 <_fwalk_reent+0x3e>
   27394:	6863      	ldr	r3, [r4, #4]
   27396:	68a5      	ldr	r5, [r4, #8]
   27398:	9300      	str	r3, [sp, #0]
   2739a:	9b00      	ldr	r3, [sp, #0]
   2739c:	3b01      	subs	r3, #1
   2739e:	9300      	str	r3, [sp, #0]
   273a0:	d40d      	bmi.n	273be <_fwalk_reent+0x3a>
   273a2:	89ab      	ldrh	r3, [r5, #12]
   273a4:	2b01      	cmp	r3, #1
   273a6:	d908      	bls.n	273ba <_fwalk_reent+0x36>
   273a8:	220e      	movs	r2, #14
   273aa:	5eab      	ldrsh	r3, [r5, r2]
   273ac:	3301      	adds	r3, #1
   273ae:	d004      	beq.n	273ba <_fwalk_reent+0x36>
   273b0:	0029      	movs	r1, r5
   273b2:	0038      	movs	r0, r7
   273b4:	9b01      	ldr	r3, [sp, #4]
   273b6:	4798      	blx	r3
   273b8:	4306      	orrs	r6, r0
   273ba:	3568      	adds	r5, #104	; 0x68
   273bc:	e7ed      	b.n	2739a <_fwalk_reent+0x16>
   273be:	6824      	ldr	r4, [r4, #0]
   273c0:	e7e6      	b.n	27390 <_fwalk_reent+0xc>
   273c2:	0030      	movs	r0, r6
   273c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000273c8 <_localeconv_r>:
   273c8:	4b03      	ldr	r3, [pc, #12]	; (273d8 <_localeconv_r+0x10>)
   273ca:	681b      	ldr	r3, [r3, #0]
   273cc:	6a18      	ldr	r0, [r3, #32]
   273ce:	2800      	cmp	r0, #0
   273d0:	d100      	bne.n	273d4 <_localeconv_r+0xc>
   273d2:	4802      	ldr	r0, [pc, #8]	; (273dc <_localeconv_r+0x14>)
   273d4:	30f0      	adds	r0, #240	; 0xf0
   273d6:	4770      	bx	lr
   273d8:	20000120 	.word	0x20000120
   273dc:	20000124 	.word	0x20000124

000273e0 <__swhatbuf_r>:
   273e0:	b570      	push	{r4, r5, r6, lr}
   273e2:	000e      	movs	r6, r1
   273e4:	001d      	movs	r5, r3
   273e6:	230e      	movs	r3, #14
   273e8:	5ec9      	ldrsh	r1, [r1, r3]
   273ea:	b090      	sub	sp, #64	; 0x40
   273ec:	0014      	movs	r4, r2
   273ee:	2900      	cmp	r1, #0
   273f0:	da06      	bge.n	27400 <__swhatbuf_r+0x20>
   273f2:	2300      	movs	r3, #0
   273f4:	602b      	str	r3, [r5, #0]
   273f6:	89b3      	ldrh	r3, [r6, #12]
   273f8:	061b      	lsls	r3, r3, #24
   273fa:	d50f      	bpl.n	2741c <__swhatbuf_r+0x3c>
   273fc:	2340      	movs	r3, #64	; 0x40
   273fe:	e00f      	b.n	27420 <__swhatbuf_r+0x40>
   27400:	aa01      	add	r2, sp, #4
   27402:	f000 ff39 	bl	28278 <_fstat_r>
   27406:	2800      	cmp	r0, #0
   27408:	dbf3      	blt.n	273f2 <__swhatbuf_r+0x12>
   2740a:	23f0      	movs	r3, #240	; 0xf0
   2740c:	9a02      	ldr	r2, [sp, #8]
   2740e:	021b      	lsls	r3, r3, #8
   27410:	4013      	ands	r3, r2
   27412:	4a05      	ldr	r2, [pc, #20]	; (27428 <__swhatbuf_r+0x48>)
   27414:	189b      	adds	r3, r3, r2
   27416:	425a      	negs	r2, r3
   27418:	4153      	adcs	r3, r2
   2741a:	602b      	str	r3, [r5, #0]
   2741c:	2380      	movs	r3, #128	; 0x80
   2741e:	00db      	lsls	r3, r3, #3
   27420:	2000      	movs	r0, #0
   27422:	6023      	str	r3, [r4, #0]
   27424:	b010      	add	sp, #64	; 0x40
   27426:	bd70      	pop	{r4, r5, r6, pc}
   27428:	ffffe000 	.word	0xffffe000

0002742c <__smakebuf_r>:
   2742c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2742e:	2602      	movs	r6, #2
   27430:	898b      	ldrh	r3, [r1, #12]
   27432:	0005      	movs	r5, r0
   27434:	000c      	movs	r4, r1
   27436:	4233      	tst	r3, r6
   27438:	d110      	bne.n	2745c <__smakebuf_r+0x30>
   2743a:	ab01      	add	r3, sp, #4
   2743c:	466a      	mov	r2, sp
   2743e:	f7ff ffcf 	bl	273e0 <__swhatbuf_r>
   27442:	9900      	ldr	r1, [sp, #0]
   27444:	0007      	movs	r7, r0
   27446:	0028      	movs	r0, r5
   27448:	f7fe f9c4 	bl	257d4 <_malloc_r>
   2744c:	2800      	cmp	r0, #0
   2744e:	d10c      	bne.n	2746a <__smakebuf_r+0x3e>
   27450:	220c      	movs	r2, #12
   27452:	5ea3      	ldrsh	r3, [r4, r2]
   27454:	059a      	lsls	r2, r3, #22
   27456:	d423      	bmi.n	274a0 <__smakebuf_r+0x74>
   27458:	4333      	orrs	r3, r6
   2745a:	81a3      	strh	r3, [r4, #12]
   2745c:	0023      	movs	r3, r4
   2745e:	3347      	adds	r3, #71	; 0x47
   27460:	6023      	str	r3, [r4, #0]
   27462:	6123      	str	r3, [r4, #16]
   27464:	2301      	movs	r3, #1
   27466:	6163      	str	r3, [r4, #20]
   27468:	e01a      	b.n	274a0 <__smakebuf_r+0x74>
   2746a:	2280      	movs	r2, #128	; 0x80
   2746c:	4b0d      	ldr	r3, [pc, #52]	; (274a4 <__smakebuf_r+0x78>)
   2746e:	62ab      	str	r3, [r5, #40]	; 0x28
   27470:	89a3      	ldrh	r3, [r4, #12]
   27472:	6020      	str	r0, [r4, #0]
   27474:	4313      	orrs	r3, r2
   27476:	81a3      	strh	r3, [r4, #12]
   27478:	9b00      	ldr	r3, [sp, #0]
   2747a:	6120      	str	r0, [r4, #16]
   2747c:	6163      	str	r3, [r4, #20]
   2747e:	9b01      	ldr	r3, [sp, #4]
   27480:	2b00      	cmp	r3, #0
   27482:	d00a      	beq.n	2749a <__smakebuf_r+0x6e>
   27484:	230e      	movs	r3, #14
   27486:	5ee1      	ldrsh	r1, [r4, r3]
   27488:	0028      	movs	r0, r5
   2748a:	f000 ff07 	bl	2829c <_isatty_r>
   2748e:	2800      	cmp	r0, #0
   27490:	d003      	beq.n	2749a <__smakebuf_r+0x6e>
   27492:	2201      	movs	r2, #1
   27494:	89a3      	ldrh	r3, [r4, #12]
   27496:	4313      	orrs	r3, r2
   27498:	81a3      	strh	r3, [r4, #12]
   2749a:	89a3      	ldrh	r3, [r4, #12]
   2749c:	431f      	orrs	r7, r3
   2749e:	81a7      	strh	r7, [r4, #12]
   274a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   274a2:	46c0      	nop			; (mov r8, r8)
   274a4:	0002721d 	.word	0x0002721d

000274a8 <memchr>:
   274a8:	b2c9      	uxtb	r1, r1
   274aa:	1882      	adds	r2, r0, r2
   274ac:	4290      	cmp	r0, r2
   274ae:	d004      	beq.n	274ba <memchr+0x12>
   274b0:	7803      	ldrb	r3, [r0, #0]
   274b2:	428b      	cmp	r3, r1
   274b4:	d002      	beq.n	274bc <memchr+0x14>
   274b6:	3001      	adds	r0, #1
   274b8:	e7f8      	b.n	274ac <memchr+0x4>
   274ba:	2000      	movs	r0, #0
   274bc:	4770      	bx	lr

000274be <__malloc_lock>:
   274be:	4770      	bx	lr

000274c0 <__malloc_unlock>:
   274c0:	4770      	bx	lr

000274c2 <_Balloc>:
   274c2:	b570      	push	{r4, r5, r6, lr}
   274c4:	6a46      	ldr	r6, [r0, #36]	; 0x24
   274c6:	0004      	movs	r4, r0
   274c8:	000d      	movs	r5, r1
   274ca:	2e00      	cmp	r6, #0
   274cc:	d107      	bne.n	274de <_Balloc+0x1c>
   274ce:	2010      	movs	r0, #16
   274d0:	f7fe f8d8 	bl	25684 <malloc>
   274d4:	6260      	str	r0, [r4, #36]	; 0x24
   274d6:	6046      	str	r6, [r0, #4]
   274d8:	6086      	str	r6, [r0, #8]
   274da:	6006      	str	r6, [r0, #0]
   274dc:	60c6      	str	r6, [r0, #12]
   274de:	6a66      	ldr	r6, [r4, #36]	; 0x24
   274e0:	68f3      	ldr	r3, [r6, #12]
   274e2:	2b00      	cmp	r3, #0
   274e4:	d009      	beq.n	274fa <_Balloc+0x38>
   274e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   274e8:	00aa      	lsls	r2, r5, #2
   274ea:	68db      	ldr	r3, [r3, #12]
   274ec:	189b      	adds	r3, r3, r2
   274ee:	6818      	ldr	r0, [r3, #0]
   274f0:	2800      	cmp	r0, #0
   274f2:	d00e      	beq.n	27512 <_Balloc+0x50>
   274f4:	6802      	ldr	r2, [r0, #0]
   274f6:	601a      	str	r2, [r3, #0]
   274f8:	e017      	b.n	2752a <_Balloc+0x68>
   274fa:	2221      	movs	r2, #33	; 0x21
   274fc:	2104      	movs	r1, #4
   274fe:	0020      	movs	r0, r4
   27500:	f000 faca 	bl	27a98 <_calloc_r>
   27504:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27506:	60f0      	str	r0, [r6, #12]
   27508:	68db      	ldr	r3, [r3, #12]
   2750a:	2b00      	cmp	r3, #0
   2750c:	d1eb      	bne.n	274e6 <_Balloc+0x24>
   2750e:	2000      	movs	r0, #0
   27510:	e00e      	b.n	27530 <_Balloc+0x6e>
   27512:	2101      	movs	r1, #1
   27514:	000e      	movs	r6, r1
   27516:	40ae      	lsls	r6, r5
   27518:	1d72      	adds	r2, r6, #5
   2751a:	0092      	lsls	r2, r2, #2
   2751c:	0020      	movs	r0, r4
   2751e:	f000 fabb 	bl	27a98 <_calloc_r>
   27522:	2800      	cmp	r0, #0
   27524:	d0f3      	beq.n	2750e <_Balloc+0x4c>
   27526:	6045      	str	r5, [r0, #4]
   27528:	6086      	str	r6, [r0, #8]
   2752a:	2300      	movs	r3, #0
   2752c:	6103      	str	r3, [r0, #16]
   2752e:	60c3      	str	r3, [r0, #12]
   27530:	bd70      	pop	{r4, r5, r6, pc}

00027532 <_Bfree>:
   27532:	b570      	push	{r4, r5, r6, lr}
   27534:	6a45      	ldr	r5, [r0, #36]	; 0x24
   27536:	0006      	movs	r6, r0
   27538:	000c      	movs	r4, r1
   2753a:	2d00      	cmp	r5, #0
   2753c:	d107      	bne.n	2754e <_Bfree+0x1c>
   2753e:	2010      	movs	r0, #16
   27540:	f7fe f8a0 	bl	25684 <malloc>
   27544:	6270      	str	r0, [r6, #36]	; 0x24
   27546:	6045      	str	r5, [r0, #4]
   27548:	6085      	str	r5, [r0, #8]
   2754a:	6005      	str	r5, [r0, #0]
   2754c:	60c5      	str	r5, [r0, #12]
   2754e:	2c00      	cmp	r4, #0
   27550:	d007      	beq.n	27562 <_Bfree+0x30>
   27552:	6a72      	ldr	r2, [r6, #36]	; 0x24
   27554:	6863      	ldr	r3, [r4, #4]
   27556:	68d2      	ldr	r2, [r2, #12]
   27558:	009b      	lsls	r3, r3, #2
   2755a:	18d3      	adds	r3, r2, r3
   2755c:	681a      	ldr	r2, [r3, #0]
   2755e:	6022      	str	r2, [r4, #0]
   27560:	601c      	str	r4, [r3, #0]
   27562:	bd70      	pop	{r4, r5, r6, pc}

00027564 <__multadd>:
   27564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27566:	0007      	movs	r7, r0
   27568:	0008      	movs	r0, r1
   2756a:	000c      	movs	r4, r1
   2756c:	690d      	ldr	r5, [r1, #16]
   2756e:	001e      	movs	r6, r3
   27570:	2100      	movs	r1, #0
   27572:	9201      	str	r2, [sp, #4]
   27574:	3014      	adds	r0, #20
   27576:	9a01      	ldr	r2, [sp, #4]
   27578:	8803      	ldrh	r3, [r0, #0]
   2757a:	3101      	adds	r1, #1
   2757c:	4353      	muls	r3, r2
   2757e:	199b      	adds	r3, r3, r6
   27580:	6806      	ldr	r6, [r0, #0]
   27582:	0c36      	lsrs	r6, r6, #16
   27584:	4356      	muls	r6, r2
   27586:	0c1a      	lsrs	r2, r3, #16
   27588:	4694      	mov	ip, r2
   2758a:	44b4      	add	ip, r6
   2758c:	4662      	mov	r2, ip
   2758e:	0c16      	lsrs	r6, r2, #16
   27590:	0412      	lsls	r2, r2, #16
   27592:	4694      	mov	ip, r2
   27594:	b29b      	uxth	r3, r3
   27596:	4463      	add	r3, ip
   27598:	c008      	stmia	r0!, {r3}
   2759a:	428d      	cmp	r5, r1
   2759c:	dceb      	bgt.n	27576 <__multadd+0x12>
   2759e:	2e00      	cmp	r6, #0
   275a0:	d01b      	beq.n	275da <__multadd+0x76>
   275a2:	68a3      	ldr	r3, [r4, #8]
   275a4:	429d      	cmp	r5, r3
   275a6:	db12      	blt.n	275ce <__multadd+0x6a>
   275a8:	6863      	ldr	r3, [r4, #4]
   275aa:	0038      	movs	r0, r7
   275ac:	1c59      	adds	r1, r3, #1
   275ae:	f7ff ff88 	bl	274c2 <_Balloc>
   275b2:	0021      	movs	r1, r4
   275b4:	6923      	ldr	r3, [r4, #16]
   275b6:	9001      	str	r0, [sp, #4]
   275b8:	1c9a      	adds	r2, r3, #2
   275ba:	0092      	lsls	r2, r2, #2
   275bc:	310c      	adds	r1, #12
   275be:	300c      	adds	r0, #12
   275c0:	f7fe f895 	bl	256ee <memcpy>
   275c4:	0021      	movs	r1, r4
   275c6:	0038      	movs	r0, r7
   275c8:	f7ff ffb3 	bl	27532 <_Bfree>
   275cc:	9c01      	ldr	r4, [sp, #4]
   275ce:	1d2b      	adds	r3, r5, #4
   275d0:	009b      	lsls	r3, r3, #2
   275d2:	18e3      	adds	r3, r4, r3
   275d4:	3501      	adds	r5, #1
   275d6:	605e      	str	r6, [r3, #4]
   275d8:	6125      	str	r5, [r4, #16]
   275da:	0020      	movs	r0, r4
   275dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000275de <__hi0bits>:
   275de:	2200      	movs	r2, #0
   275e0:	0003      	movs	r3, r0
   275e2:	0c01      	lsrs	r1, r0, #16
   275e4:	4291      	cmp	r1, r2
   275e6:	d101      	bne.n	275ec <__hi0bits+0xe>
   275e8:	0403      	lsls	r3, r0, #16
   275ea:	3210      	adds	r2, #16
   275ec:	0e19      	lsrs	r1, r3, #24
   275ee:	d101      	bne.n	275f4 <__hi0bits+0x16>
   275f0:	3208      	adds	r2, #8
   275f2:	021b      	lsls	r3, r3, #8
   275f4:	0f19      	lsrs	r1, r3, #28
   275f6:	d101      	bne.n	275fc <__hi0bits+0x1e>
   275f8:	3204      	adds	r2, #4
   275fa:	011b      	lsls	r3, r3, #4
   275fc:	0f99      	lsrs	r1, r3, #30
   275fe:	d101      	bne.n	27604 <__hi0bits+0x26>
   27600:	3202      	adds	r2, #2
   27602:	009b      	lsls	r3, r3, #2
   27604:	0010      	movs	r0, r2
   27606:	2b00      	cmp	r3, #0
   27608:	db03      	blt.n	27612 <__hi0bits+0x34>
   2760a:	2020      	movs	r0, #32
   2760c:	005b      	lsls	r3, r3, #1
   2760e:	d500      	bpl.n	27612 <__hi0bits+0x34>
   27610:	1c50      	adds	r0, r2, #1
   27612:	4770      	bx	lr

00027614 <__lo0bits>:
   27614:	2207      	movs	r2, #7
   27616:	6803      	ldr	r3, [r0, #0]
   27618:	b510      	push	{r4, lr}
   2761a:	0001      	movs	r1, r0
   2761c:	401a      	ands	r2, r3
   2761e:	d00c      	beq.n	2763a <__lo0bits+0x26>
   27620:	2401      	movs	r4, #1
   27622:	2000      	movs	r0, #0
   27624:	4223      	tst	r3, r4
   27626:	d123      	bne.n	27670 <__lo0bits+0x5c>
   27628:	2202      	movs	r2, #2
   2762a:	4213      	tst	r3, r2
   2762c:	d003      	beq.n	27636 <__lo0bits+0x22>
   2762e:	40e3      	lsrs	r3, r4
   27630:	0020      	movs	r0, r4
   27632:	600b      	str	r3, [r1, #0]
   27634:	e01c      	b.n	27670 <__lo0bits+0x5c>
   27636:	089b      	lsrs	r3, r3, #2
   27638:	e018      	b.n	2766c <__lo0bits+0x58>
   2763a:	b298      	uxth	r0, r3
   2763c:	2800      	cmp	r0, #0
   2763e:	d101      	bne.n	27644 <__lo0bits+0x30>
   27640:	2210      	movs	r2, #16
   27642:	0c1b      	lsrs	r3, r3, #16
   27644:	b2d8      	uxtb	r0, r3
   27646:	2800      	cmp	r0, #0
   27648:	d101      	bne.n	2764e <__lo0bits+0x3a>
   2764a:	3208      	adds	r2, #8
   2764c:	0a1b      	lsrs	r3, r3, #8
   2764e:	0718      	lsls	r0, r3, #28
   27650:	d101      	bne.n	27656 <__lo0bits+0x42>
   27652:	3204      	adds	r2, #4
   27654:	091b      	lsrs	r3, r3, #4
   27656:	0798      	lsls	r0, r3, #30
   27658:	d101      	bne.n	2765e <__lo0bits+0x4a>
   2765a:	3202      	adds	r2, #2
   2765c:	089b      	lsrs	r3, r3, #2
   2765e:	07d8      	lsls	r0, r3, #31
   27660:	d404      	bmi.n	2766c <__lo0bits+0x58>
   27662:	085b      	lsrs	r3, r3, #1
   27664:	2020      	movs	r0, #32
   27666:	2b00      	cmp	r3, #0
   27668:	d002      	beq.n	27670 <__lo0bits+0x5c>
   2766a:	3201      	adds	r2, #1
   2766c:	0010      	movs	r0, r2
   2766e:	600b      	str	r3, [r1, #0]
   27670:	bd10      	pop	{r4, pc}

00027672 <__i2b>:
   27672:	b510      	push	{r4, lr}
   27674:	000c      	movs	r4, r1
   27676:	2101      	movs	r1, #1
   27678:	f7ff ff23 	bl	274c2 <_Balloc>
   2767c:	2301      	movs	r3, #1
   2767e:	6144      	str	r4, [r0, #20]
   27680:	6103      	str	r3, [r0, #16]
   27682:	bd10      	pop	{r4, pc}

00027684 <__multiply>:
   27684:	b5f0      	push	{r4, r5, r6, r7, lr}
   27686:	690b      	ldr	r3, [r1, #16]
   27688:	0014      	movs	r4, r2
   2768a:	6912      	ldr	r2, [r2, #16]
   2768c:	b089      	sub	sp, #36	; 0x24
   2768e:	000d      	movs	r5, r1
   27690:	4293      	cmp	r3, r2
   27692:	da01      	bge.n	27698 <__multiply+0x14>
   27694:	0025      	movs	r5, r4
   27696:	000c      	movs	r4, r1
   27698:	692f      	ldr	r7, [r5, #16]
   2769a:	6926      	ldr	r6, [r4, #16]
   2769c:	68aa      	ldr	r2, [r5, #8]
   2769e:	19bb      	adds	r3, r7, r6
   276a0:	6869      	ldr	r1, [r5, #4]
   276a2:	9301      	str	r3, [sp, #4]
   276a4:	4293      	cmp	r3, r2
   276a6:	dd00      	ble.n	276aa <__multiply+0x26>
   276a8:	3101      	adds	r1, #1
   276aa:	f7ff ff0a 	bl	274c2 <_Balloc>
   276ae:	0002      	movs	r2, r0
   276b0:	19bb      	adds	r3, r7, r6
   276b2:	3214      	adds	r2, #20
   276b4:	009b      	lsls	r3, r3, #2
   276b6:	18d3      	adds	r3, r2, r3
   276b8:	469c      	mov	ip, r3
   276ba:	2100      	movs	r1, #0
   276bc:	0013      	movs	r3, r2
   276be:	9002      	str	r0, [sp, #8]
   276c0:	4563      	cmp	r3, ip
   276c2:	d201      	bcs.n	276c8 <__multiply+0x44>
   276c4:	c302      	stmia	r3!, {r1}
   276c6:	e7fb      	b.n	276c0 <__multiply+0x3c>
   276c8:	3514      	adds	r5, #20
   276ca:	00bf      	lsls	r7, r7, #2
   276cc:	19eb      	adds	r3, r5, r7
   276ce:	3414      	adds	r4, #20
   276d0:	00b6      	lsls	r6, r6, #2
   276d2:	9305      	str	r3, [sp, #20]
   276d4:	19a3      	adds	r3, r4, r6
   276d6:	9503      	str	r5, [sp, #12]
   276d8:	9307      	str	r3, [sp, #28]
   276da:	9b07      	ldr	r3, [sp, #28]
   276dc:	429c      	cmp	r4, r3
   276de:	d251      	bcs.n	27784 <__multiply+0x100>
   276e0:	8820      	ldrh	r0, [r4, #0]
   276e2:	2800      	cmp	r0, #0
   276e4:	d01e      	beq.n	27724 <__multiply+0xa0>
   276e6:	0015      	movs	r5, r2
   276e8:	2600      	movs	r6, #0
   276ea:	9f03      	ldr	r7, [sp, #12]
   276ec:	cf08      	ldmia	r7!, {r3}
   276ee:	9506      	str	r5, [sp, #24]
   276f0:	9304      	str	r3, [sp, #16]
   276f2:	466b      	mov	r3, sp
   276f4:	8a1b      	ldrh	r3, [r3, #16]
   276f6:	4343      	muls	r3, r0
   276f8:	0019      	movs	r1, r3
   276fa:	882b      	ldrh	r3, [r5, #0]
   276fc:	18cb      	adds	r3, r1, r3
   276fe:	9904      	ldr	r1, [sp, #16]
   27700:	199b      	adds	r3, r3, r6
   27702:	0c09      	lsrs	r1, r1, #16
   27704:	4341      	muls	r1, r0
   27706:	682e      	ldr	r6, [r5, #0]
   27708:	0c36      	lsrs	r6, r6, #16
   2770a:	1989      	adds	r1, r1, r6
   2770c:	0c1e      	lsrs	r6, r3, #16
   2770e:	1989      	adds	r1, r1, r6
   27710:	0c0e      	lsrs	r6, r1, #16
   27712:	b29b      	uxth	r3, r3
   27714:	0409      	lsls	r1, r1, #16
   27716:	430b      	orrs	r3, r1
   27718:	c508      	stmia	r5!, {r3}
   2771a:	9b05      	ldr	r3, [sp, #20]
   2771c:	42bb      	cmp	r3, r7
   2771e:	d8e5      	bhi.n	276ec <__multiply+0x68>
   27720:	9b06      	ldr	r3, [sp, #24]
   27722:	605e      	str	r6, [r3, #4]
   27724:	6823      	ldr	r3, [r4, #0]
   27726:	0c1d      	lsrs	r5, r3, #16
   27728:	d01f      	beq.n	2776a <__multiply+0xe6>
   2772a:	2100      	movs	r1, #0
   2772c:	0010      	movs	r0, r2
   2772e:	6813      	ldr	r3, [r2, #0]
   27730:	9f03      	ldr	r7, [sp, #12]
   27732:	9104      	str	r1, [sp, #16]
   27734:	883e      	ldrh	r6, [r7, #0]
   27736:	6801      	ldr	r1, [r0, #0]
   27738:	436e      	muls	r6, r5
   2773a:	0c09      	lsrs	r1, r1, #16
   2773c:	1871      	adds	r1, r6, r1
   2773e:	9e04      	ldr	r6, [sp, #16]
   27740:	b29b      	uxth	r3, r3
   27742:	1989      	adds	r1, r1, r6
   27744:	040e      	lsls	r6, r1, #16
   27746:	4333      	orrs	r3, r6
   27748:	6003      	str	r3, [r0, #0]
   2774a:	cf08      	ldmia	r7!, {r3}
   2774c:	8886      	ldrh	r6, [r0, #4]
   2774e:	0c1b      	lsrs	r3, r3, #16
   27750:	436b      	muls	r3, r5
   27752:	0c09      	lsrs	r1, r1, #16
   27754:	199b      	adds	r3, r3, r6
   27756:	185b      	adds	r3, r3, r1
   27758:	0c19      	lsrs	r1, r3, #16
   2775a:	9104      	str	r1, [sp, #16]
   2775c:	9905      	ldr	r1, [sp, #20]
   2775e:	9006      	str	r0, [sp, #24]
   27760:	3004      	adds	r0, #4
   27762:	42b9      	cmp	r1, r7
   27764:	d8e6      	bhi.n	27734 <__multiply+0xb0>
   27766:	9906      	ldr	r1, [sp, #24]
   27768:	604b      	str	r3, [r1, #4]
   2776a:	3404      	adds	r4, #4
   2776c:	3204      	adds	r2, #4
   2776e:	e7b4      	b.n	276da <__multiply+0x56>
   27770:	2304      	movs	r3, #4
   27772:	425b      	negs	r3, r3
   27774:	449c      	add	ip, r3
   27776:	4663      	mov	r3, ip
   27778:	681b      	ldr	r3, [r3, #0]
   2777a:	2b00      	cmp	r3, #0
   2777c:	d105      	bne.n	2778a <__multiply+0x106>
   2777e:	9b01      	ldr	r3, [sp, #4]
   27780:	3b01      	subs	r3, #1
   27782:	9301      	str	r3, [sp, #4]
   27784:	9b01      	ldr	r3, [sp, #4]
   27786:	2b00      	cmp	r3, #0
   27788:	dcf2      	bgt.n	27770 <__multiply+0xec>
   2778a:	9b02      	ldr	r3, [sp, #8]
   2778c:	9a01      	ldr	r2, [sp, #4]
   2778e:	0018      	movs	r0, r3
   27790:	611a      	str	r2, [r3, #16]
   27792:	b009      	add	sp, #36	; 0x24
   27794:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00027798 <__pow5mult>:
   27798:	2303      	movs	r3, #3
   2779a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2779c:	4013      	ands	r3, r2
   2779e:	0005      	movs	r5, r0
   277a0:	000e      	movs	r6, r1
   277a2:	0014      	movs	r4, r2
   277a4:	2b00      	cmp	r3, #0
   277a6:	d008      	beq.n	277ba <__pow5mult+0x22>
   277a8:	4923      	ldr	r1, [pc, #140]	; (27838 <__pow5mult+0xa0>)
   277aa:	3b01      	subs	r3, #1
   277ac:	009a      	lsls	r2, r3, #2
   277ae:	5852      	ldr	r2, [r2, r1]
   277b0:	2300      	movs	r3, #0
   277b2:	0031      	movs	r1, r6
   277b4:	f7ff fed6 	bl	27564 <__multadd>
   277b8:	0006      	movs	r6, r0
   277ba:	10a3      	asrs	r3, r4, #2
   277bc:	9301      	str	r3, [sp, #4]
   277be:	d038      	beq.n	27832 <__pow5mult+0x9a>
   277c0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   277c2:	2c00      	cmp	r4, #0
   277c4:	d107      	bne.n	277d6 <__pow5mult+0x3e>
   277c6:	2010      	movs	r0, #16
   277c8:	f7fd ff5c 	bl	25684 <malloc>
   277cc:	6268      	str	r0, [r5, #36]	; 0x24
   277ce:	6044      	str	r4, [r0, #4]
   277d0:	6084      	str	r4, [r0, #8]
   277d2:	6004      	str	r4, [r0, #0]
   277d4:	60c4      	str	r4, [r0, #12]
   277d6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   277d8:	68bc      	ldr	r4, [r7, #8]
   277da:	2c00      	cmp	r4, #0
   277dc:	d110      	bne.n	27800 <__pow5mult+0x68>
   277de:	4917      	ldr	r1, [pc, #92]	; (2783c <__pow5mult+0xa4>)
   277e0:	0028      	movs	r0, r5
   277e2:	f7ff ff46 	bl	27672 <__i2b>
   277e6:	2300      	movs	r3, #0
   277e8:	60b8      	str	r0, [r7, #8]
   277ea:	0004      	movs	r4, r0
   277ec:	6003      	str	r3, [r0, #0]
   277ee:	e007      	b.n	27800 <__pow5mult+0x68>
   277f0:	9b01      	ldr	r3, [sp, #4]
   277f2:	105b      	asrs	r3, r3, #1
   277f4:	9301      	str	r3, [sp, #4]
   277f6:	d01c      	beq.n	27832 <__pow5mult+0x9a>
   277f8:	6820      	ldr	r0, [r4, #0]
   277fa:	2800      	cmp	r0, #0
   277fc:	d010      	beq.n	27820 <__pow5mult+0x88>
   277fe:	0004      	movs	r4, r0
   27800:	2201      	movs	r2, #1
   27802:	9b01      	ldr	r3, [sp, #4]
   27804:	4213      	tst	r3, r2
   27806:	d0f3      	beq.n	277f0 <__pow5mult+0x58>
   27808:	0031      	movs	r1, r6
   2780a:	0022      	movs	r2, r4
   2780c:	0028      	movs	r0, r5
   2780e:	f7ff ff39 	bl	27684 <__multiply>
   27812:	0007      	movs	r7, r0
   27814:	0031      	movs	r1, r6
   27816:	0028      	movs	r0, r5
   27818:	f7ff fe8b 	bl	27532 <_Bfree>
   2781c:	003e      	movs	r6, r7
   2781e:	e7e7      	b.n	277f0 <__pow5mult+0x58>
   27820:	0022      	movs	r2, r4
   27822:	0021      	movs	r1, r4
   27824:	0028      	movs	r0, r5
   27826:	f7ff ff2d 	bl	27684 <__multiply>
   2782a:	2300      	movs	r3, #0
   2782c:	6020      	str	r0, [r4, #0]
   2782e:	6003      	str	r3, [r0, #0]
   27830:	e7e5      	b.n	277fe <__pow5mult+0x66>
   27832:	0030      	movs	r0, r6
   27834:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   27836:	46c0      	nop			; (mov r8, r8)
   27838:	0002f048 	.word	0x0002f048
   2783c:	00000271 	.word	0x00000271

00027840 <__lshift>:
   27840:	b5f0      	push	{r4, r5, r6, r7, lr}
   27842:	000c      	movs	r4, r1
   27844:	0017      	movs	r7, r2
   27846:	6923      	ldr	r3, [r4, #16]
   27848:	1155      	asrs	r5, r2, #5
   2784a:	b085      	sub	sp, #20
   2784c:	18eb      	adds	r3, r5, r3
   2784e:	9301      	str	r3, [sp, #4]
   27850:	3301      	adds	r3, #1
   27852:	9300      	str	r3, [sp, #0]
   27854:	6849      	ldr	r1, [r1, #4]
   27856:	68a3      	ldr	r3, [r4, #8]
   27858:	9002      	str	r0, [sp, #8]
   2785a:	9a00      	ldr	r2, [sp, #0]
   2785c:	4293      	cmp	r3, r2
   2785e:	da02      	bge.n	27866 <__lshift+0x26>
   27860:	3101      	adds	r1, #1
   27862:	005b      	lsls	r3, r3, #1
   27864:	e7f9      	b.n	2785a <__lshift+0x1a>
   27866:	9802      	ldr	r0, [sp, #8]
   27868:	f7ff fe2b 	bl	274c2 <_Balloc>
   2786c:	2300      	movs	r3, #0
   2786e:	0002      	movs	r2, r0
   27870:	0006      	movs	r6, r0
   27872:	0019      	movs	r1, r3
   27874:	3214      	adds	r2, #20
   27876:	42ab      	cmp	r3, r5
   27878:	da03      	bge.n	27882 <__lshift+0x42>
   2787a:	0098      	lsls	r0, r3, #2
   2787c:	5011      	str	r1, [r2, r0]
   2787e:	3301      	adds	r3, #1
   27880:	e7f9      	b.n	27876 <__lshift+0x36>
   27882:	43eb      	mvns	r3, r5
   27884:	17db      	asrs	r3, r3, #31
   27886:	401d      	ands	r5, r3
   27888:	0023      	movs	r3, r4
   2788a:	00ad      	lsls	r5, r5, #2
   2788c:	1955      	adds	r5, r2, r5
   2788e:	6922      	ldr	r2, [r4, #16]
   27890:	3314      	adds	r3, #20
   27892:	0092      	lsls	r2, r2, #2
   27894:	189a      	adds	r2, r3, r2
   27896:	4694      	mov	ip, r2
   27898:	221f      	movs	r2, #31
   2789a:	4017      	ands	r7, r2
   2789c:	d014      	beq.n	278c8 <__lshift+0x88>
   2789e:	3201      	adds	r2, #1
   278a0:	1bd2      	subs	r2, r2, r7
   278a2:	9203      	str	r2, [sp, #12]
   278a4:	2200      	movs	r2, #0
   278a6:	6819      	ldr	r1, [r3, #0]
   278a8:	0028      	movs	r0, r5
   278aa:	40b9      	lsls	r1, r7
   278ac:	430a      	orrs	r2, r1
   278ae:	c504      	stmia	r5!, {r2}
   278b0:	cb04      	ldmia	r3!, {r2}
   278b2:	9903      	ldr	r1, [sp, #12]
   278b4:	40ca      	lsrs	r2, r1
   278b6:	459c      	cmp	ip, r3
   278b8:	d8f5      	bhi.n	278a6 <__lshift+0x66>
   278ba:	6042      	str	r2, [r0, #4]
   278bc:	2a00      	cmp	r2, #0
   278be:	d007      	beq.n	278d0 <__lshift+0x90>
   278c0:	9b01      	ldr	r3, [sp, #4]
   278c2:	3302      	adds	r3, #2
   278c4:	9300      	str	r3, [sp, #0]
   278c6:	e003      	b.n	278d0 <__lshift+0x90>
   278c8:	cb04      	ldmia	r3!, {r2}
   278ca:	c504      	stmia	r5!, {r2}
   278cc:	459c      	cmp	ip, r3
   278ce:	d8fb      	bhi.n	278c8 <__lshift+0x88>
   278d0:	9b00      	ldr	r3, [sp, #0]
   278d2:	9802      	ldr	r0, [sp, #8]
   278d4:	3b01      	subs	r3, #1
   278d6:	6133      	str	r3, [r6, #16]
   278d8:	0021      	movs	r1, r4
   278da:	f7ff fe2a 	bl	27532 <_Bfree>
   278de:	0030      	movs	r0, r6
   278e0:	b005      	add	sp, #20
   278e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000278e4 <__mcmp>:
   278e4:	6903      	ldr	r3, [r0, #16]
   278e6:	690a      	ldr	r2, [r1, #16]
   278e8:	b510      	push	{r4, lr}
   278ea:	1a9b      	subs	r3, r3, r2
   278ec:	0004      	movs	r4, r0
   278ee:	1e18      	subs	r0, r3, #0
   278f0:	d112      	bne.n	27918 <__mcmp+0x34>
   278f2:	0093      	lsls	r3, r2, #2
   278f4:	3414      	adds	r4, #20
   278f6:	3114      	adds	r1, #20
   278f8:	18e2      	adds	r2, r4, r3
   278fa:	18c9      	adds	r1, r1, r3
   278fc:	3a04      	subs	r2, #4
   278fe:	3904      	subs	r1, #4
   27900:	6813      	ldr	r3, [r2, #0]
   27902:	6808      	ldr	r0, [r1, #0]
   27904:	4283      	cmp	r3, r0
   27906:	d004      	beq.n	27912 <__mcmp+0x2e>
   27908:	4283      	cmp	r3, r0
   2790a:	419b      	sbcs	r3, r3
   2790c:	2001      	movs	r0, #1
   2790e:	4318      	orrs	r0, r3
   27910:	e002      	b.n	27918 <__mcmp+0x34>
   27912:	4294      	cmp	r4, r2
   27914:	d3f2      	bcc.n	278fc <__mcmp+0x18>
   27916:	2000      	movs	r0, #0
   27918:	bd10      	pop	{r4, pc}

0002791a <__mdiff>:
   2791a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2791c:	000c      	movs	r4, r1
   2791e:	b085      	sub	sp, #20
   27920:	0007      	movs	r7, r0
   27922:	0011      	movs	r1, r2
   27924:	0020      	movs	r0, r4
   27926:	0015      	movs	r5, r2
   27928:	f7ff ffdc 	bl	278e4 <__mcmp>
   2792c:	1e06      	subs	r6, r0, #0
   2792e:	d107      	bne.n	27940 <__mdiff+0x26>
   27930:	0001      	movs	r1, r0
   27932:	0038      	movs	r0, r7
   27934:	f7ff fdc5 	bl	274c2 <_Balloc>
   27938:	2301      	movs	r3, #1
   2793a:	6146      	str	r6, [r0, #20]
   2793c:	6103      	str	r3, [r0, #16]
   2793e:	e055      	b.n	279ec <__mdiff+0xd2>
   27940:	2300      	movs	r3, #0
   27942:	9301      	str	r3, [sp, #4]
   27944:	4298      	cmp	r0, r3
   27946:	da04      	bge.n	27952 <__mdiff+0x38>
   27948:	0023      	movs	r3, r4
   2794a:	002c      	movs	r4, r5
   2794c:	001d      	movs	r5, r3
   2794e:	2301      	movs	r3, #1
   27950:	9301      	str	r3, [sp, #4]
   27952:	6861      	ldr	r1, [r4, #4]
   27954:	0038      	movs	r0, r7
   27956:	f7ff fdb4 	bl	274c2 <_Balloc>
   2795a:	9b01      	ldr	r3, [sp, #4]
   2795c:	6926      	ldr	r6, [r4, #16]
   2795e:	002f      	movs	r7, r5
   27960:	60c3      	str	r3, [r0, #12]
   27962:	3414      	adds	r4, #20
   27964:	00b3      	lsls	r3, r6, #2
   27966:	18e3      	adds	r3, r4, r3
   27968:	0002      	movs	r2, r0
   2796a:	9302      	str	r3, [sp, #8]
   2796c:	692b      	ldr	r3, [r5, #16]
   2796e:	2500      	movs	r5, #0
   27970:	3714      	adds	r7, #20
   27972:	009b      	lsls	r3, r3, #2
   27974:	18fb      	adds	r3, r7, r3
   27976:	9303      	str	r3, [sp, #12]
   27978:	3214      	adds	r2, #20
   2797a:	cc08      	ldmia	r4!, {r3}
   2797c:	4669      	mov	r1, sp
   2797e:	469c      	mov	ip, r3
   27980:	cf08      	ldmia	r7!, {r3}
   27982:	3204      	adds	r2, #4
   27984:	9300      	str	r3, [sp, #0]
   27986:	4663      	mov	r3, ip
   27988:	808b      	strh	r3, [r1, #4]
   2798a:	888b      	ldrh	r3, [r1, #4]
   2798c:	195d      	adds	r5, r3, r5
   2798e:	9b00      	ldr	r3, [sp, #0]
   27990:	b29b      	uxth	r3, r3
   27992:	1aeb      	subs	r3, r5, r3
   27994:	4665      	mov	r5, ip
   27996:	9301      	str	r3, [sp, #4]
   27998:	9b00      	ldr	r3, [sp, #0]
   2799a:	0c2d      	lsrs	r5, r5, #16
   2799c:	0c19      	lsrs	r1, r3, #16
   2799e:	9b01      	ldr	r3, [sp, #4]
   279a0:	1a69      	subs	r1, r5, r1
   279a2:	141d      	asrs	r5, r3, #16
   279a4:	1f13      	subs	r3, r2, #4
   279a6:	469c      	mov	ip, r3
   279a8:	466b      	mov	r3, sp
   279aa:	1949      	adds	r1, r1, r5
   279ac:	889b      	ldrh	r3, [r3, #4]
   279ae:	140d      	asrs	r5, r1, #16
   279b0:	0409      	lsls	r1, r1, #16
   279b2:	430b      	orrs	r3, r1
   279b4:	4661      	mov	r1, ip
   279b6:	600b      	str	r3, [r1, #0]
   279b8:	9b03      	ldr	r3, [sp, #12]
   279ba:	42bb      	cmp	r3, r7
   279bc:	d8dd      	bhi.n	2797a <__mdiff+0x60>
   279be:	9902      	ldr	r1, [sp, #8]
   279c0:	0013      	movs	r3, r2
   279c2:	428c      	cmp	r4, r1
   279c4:	d20b      	bcs.n	279de <__mdiff+0xc4>
   279c6:	cc02      	ldmia	r4!, {r1}
   279c8:	b28b      	uxth	r3, r1
   279ca:	195b      	adds	r3, r3, r5
   279cc:	141d      	asrs	r5, r3, #16
   279ce:	0c09      	lsrs	r1, r1, #16
   279d0:	1949      	adds	r1, r1, r5
   279d2:	140d      	asrs	r5, r1, #16
   279d4:	b29b      	uxth	r3, r3
   279d6:	0409      	lsls	r1, r1, #16
   279d8:	430b      	orrs	r3, r1
   279da:	c208      	stmia	r2!, {r3}
   279dc:	e7ef      	b.n	279be <__mdiff+0xa4>
   279de:	3b04      	subs	r3, #4
   279e0:	681a      	ldr	r2, [r3, #0]
   279e2:	2a00      	cmp	r2, #0
   279e4:	d101      	bne.n	279ea <__mdiff+0xd0>
   279e6:	3e01      	subs	r6, #1
   279e8:	e7f9      	b.n	279de <__mdiff+0xc4>
   279ea:	6106      	str	r6, [r0, #16]
   279ec:	b005      	add	sp, #20
   279ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000279f0 <__d2b>:
   279f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   279f2:	001d      	movs	r5, r3
   279f4:	2101      	movs	r1, #1
   279f6:	9f08      	ldr	r7, [sp, #32]
   279f8:	0014      	movs	r4, r2
   279fa:	f7ff fd62 	bl	274c2 <_Balloc>
   279fe:	032b      	lsls	r3, r5, #12
   27a00:	006d      	lsls	r5, r5, #1
   27a02:	0006      	movs	r6, r0
   27a04:	0b1b      	lsrs	r3, r3, #12
   27a06:	0d6d      	lsrs	r5, r5, #21
   27a08:	d002      	beq.n	27a10 <__d2b+0x20>
   27a0a:	2280      	movs	r2, #128	; 0x80
   27a0c:	0352      	lsls	r2, r2, #13
   27a0e:	4313      	orrs	r3, r2
   27a10:	9301      	str	r3, [sp, #4]
   27a12:	2c00      	cmp	r4, #0
   27a14:	d018      	beq.n	27a48 <__d2b+0x58>
   27a16:	4668      	mov	r0, sp
   27a18:	9400      	str	r4, [sp, #0]
   27a1a:	f7ff fdfb 	bl	27614 <__lo0bits>
   27a1e:	9c00      	ldr	r4, [sp, #0]
   27a20:	2800      	cmp	r0, #0
   27a22:	d009      	beq.n	27a38 <__d2b+0x48>
   27a24:	9b01      	ldr	r3, [sp, #4]
   27a26:	2120      	movs	r1, #32
   27a28:	001a      	movs	r2, r3
   27a2a:	1a09      	subs	r1, r1, r0
   27a2c:	408a      	lsls	r2, r1
   27a2e:	40c3      	lsrs	r3, r0
   27a30:	4322      	orrs	r2, r4
   27a32:	6172      	str	r2, [r6, #20]
   27a34:	9301      	str	r3, [sp, #4]
   27a36:	e000      	b.n	27a3a <__d2b+0x4a>
   27a38:	6174      	str	r4, [r6, #20]
   27a3a:	9c01      	ldr	r4, [sp, #4]
   27a3c:	61b4      	str	r4, [r6, #24]
   27a3e:	1e63      	subs	r3, r4, #1
   27a40:	419c      	sbcs	r4, r3
   27a42:	3401      	adds	r4, #1
   27a44:	6134      	str	r4, [r6, #16]
   27a46:	e007      	b.n	27a58 <__d2b+0x68>
   27a48:	a801      	add	r0, sp, #4
   27a4a:	f7ff fde3 	bl	27614 <__lo0bits>
   27a4e:	2401      	movs	r4, #1
   27a50:	9b01      	ldr	r3, [sp, #4]
   27a52:	6134      	str	r4, [r6, #16]
   27a54:	6173      	str	r3, [r6, #20]
   27a56:	3020      	adds	r0, #32
   27a58:	2d00      	cmp	r5, #0
   27a5a:	d006      	beq.n	27a6a <__d2b+0x7a>
   27a5c:	4b0b      	ldr	r3, [pc, #44]	; (27a8c <__d2b+0x9c>)
   27a5e:	18ed      	adds	r5, r5, r3
   27a60:	2335      	movs	r3, #53	; 0x35
   27a62:	182d      	adds	r5, r5, r0
   27a64:	603d      	str	r5, [r7, #0]
   27a66:	1a18      	subs	r0, r3, r0
   27a68:	e00b      	b.n	27a82 <__d2b+0x92>
   27a6a:	4b09      	ldr	r3, [pc, #36]	; (27a90 <__d2b+0xa0>)
   27a6c:	18c0      	adds	r0, r0, r3
   27a6e:	4b09      	ldr	r3, [pc, #36]	; (27a94 <__d2b+0xa4>)
   27a70:	6038      	str	r0, [r7, #0]
   27a72:	18e3      	adds	r3, r4, r3
   27a74:	009b      	lsls	r3, r3, #2
   27a76:	18f3      	adds	r3, r6, r3
   27a78:	6958      	ldr	r0, [r3, #20]
   27a7a:	f7ff fdb0 	bl	275de <__hi0bits>
   27a7e:	0164      	lsls	r4, r4, #5
   27a80:	1a20      	subs	r0, r4, r0
   27a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27a84:	6018      	str	r0, [r3, #0]
   27a86:	0030      	movs	r0, r6
   27a88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   27a8a:	46c0      	nop			; (mov r8, r8)
   27a8c:	fffffbcd 	.word	0xfffffbcd
   27a90:	fffffbce 	.word	0xfffffbce
   27a94:	3fffffff 	.word	0x3fffffff

00027a98 <_calloc_r>:
   27a98:	434a      	muls	r2, r1
   27a9a:	b570      	push	{r4, r5, r6, lr}
   27a9c:	0011      	movs	r1, r2
   27a9e:	0014      	movs	r4, r2
   27aa0:	f7fd fe98 	bl	257d4 <_malloc_r>
   27aa4:	1e05      	subs	r5, r0, #0
   27aa6:	d003      	beq.n	27ab0 <_calloc_r+0x18>
   27aa8:	0022      	movs	r2, r4
   27aaa:	2100      	movs	r1, #0
   27aac:	f7fd fe3d 	bl	2572a <memset>
   27ab0:	0028      	movs	r0, r5
   27ab2:	bd70      	pop	{r4, r5, r6, pc}

00027ab4 <__ssputs_r>:
   27ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27ab6:	688e      	ldr	r6, [r1, #8]
   27ab8:	b085      	sub	sp, #20
   27aba:	0007      	movs	r7, r0
   27abc:	000c      	movs	r4, r1
   27abe:	9203      	str	r2, [sp, #12]
   27ac0:	9301      	str	r3, [sp, #4]
   27ac2:	429e      	cmp	r6, r3
   27ac4:	d843      	bhi.n	27b4e <__ssputs_r+0x9a>
   27ac6:	2390      	movs	r3, #144	; 0x90
   27ac8:	898a      	ldrh	r2, [r1, #12]
   27aca:	00db      	lsls	r3, r3, #3
   27acc:	421a      	tst	r2, r3
   27ace:	d03e      	beq.n	27b4e <__ssputs_r+0x9a>
   27ad0:	2503      	movs	r5, #3
   27ad2:	6909      	ldr	r1, [r1, #16]
   27ad4:	6823      	ldr	r3, [r4, #0]
   27ad6:	9801      	ldr	r0, [sp, #4]
   27ad8:	1a5b      	subs	r3, r3, r1
   27ada:	9302      	str	r3, [sp, #8]
   27adc:	6963      	ldr	r3, [r4, #20]
   27ade:	435d      	muls	r5, r3
   27ae0:	0feb      	lsrs	r3, r5, #31
   27ae2:	195d      	adds	r5, r3, r5
   27ae4:	9b02      	ldr	r3, [sp, #8]
   27ae6:	106d      	asrs	r5, r5, #1
   27ae8:	3301      	adds	r3, #1
   27aea:	181b      	adds	r3, r3, r0
   27aec:	42ab      	cmp	r3, r5
   27aee:	d900      	bls.n	27af2 <__ssputs_r+0x3e>
   27af0:	001d      	movs	r5, r3
   27af2:	0553      	lsls	r3, r2, #21
   27af4:	d510      	bpl.n	27b18 <__ssputs_r+0x64>
   27af6:	0029      	movs	r1, r5
   27af8:	0038      	movs	r0, r7
   27afa:	f7fd fe6b 	bl	257d4 <_malloc_r>
   27afe:	1e06      	subs	r6, r0, #0
   27b00:	d014      	beq.n	27b2c <__ssputs_r+0x78>
   27b02:	9a02      	ldr	r2, [sp, #8]
   27b04:	6921      	ldr	r1, [r4, #16]
   27b06:	f7fd fdf2 	bl	256ee <memcpy>
   27b0a:	89a2      	ldrh	r2, [r4, #12]
   27b0c:	4b19      	ldr	r3, [pc, #100]	; (27b74 <__ssputs_r+0xc0>)
   27b0e:	4013      	ands	r3, r2
   27b10:	2280      	movs	r2, #128	; 0x80
   27b12:	4313      	orrs	r3, r2
   27b14:	81a3      	strh	r3, [r4, #12]
   27b16:	e012      	b.n	27b3e <__ssputs_r+0x8a>
   27b18:	002a      	movs	r2, r5
   27b1a:	0038      	movs	r0, r7
   27b1c:	f000 fbe4 	bl	282e8 <_realloc_r>
   27b20:	1e06      	subs	r6, r0, #0
   27b22:	d10c      	bne.n	27b3e <__ssputs_r+0x8a>
   27b24:	6921      	ldr	r1, [r4, #16]
   27b26:	0038      	movs	r0, r7
   27b28:	f7fd fe08 	bl	2573c <_free_r>
   27b2c:	230c      	movs	r3, #12
   27b2e:	2240      	movs	r2, #64	; 0x40
   27b30:	2001      	movs	r0, #1
   27b32:	603b      	str	r3, [r7, #0]
   27b34:	89a3      	ldrh	r3, [r4, #12]
   27b36:	4240      	negs	r0, r0
   27b38:	4313      	orrs	r3, r2
   27b3a:	81a3      	strh	r3, [r4, #12]
   27b3c:	e017      	b.n	27b6e <__ssputs_r+0xba>
   27b3e:	9b02      	ldr	r3, [sp, #8]
   27b40:	6126      	str	r6, [r4, #16]
   27b42:	18f6      	adds	r6, r6, r3
   27b44:	6026      	str	r6, [r4, #0]
   27b46:	6165      	str	r5, [r4, #20]
   27b48:	9e01      	ldr	r6, [sp, #4]
   27b4a:	1aed      	subs	r5, r5, r3
   27b4c:	60a5      	str	r5, [r4, #8]
   27b4e:	9b01      	ldr	r3, [sp, #4]
   27b50:	42b3      	cmp	r3, r6
   27b52:	d200      	bcs.n	27b56 <__ssputs_r+0xa2>
   27b54:	001e      	movs	r6, r3
   27b56:	0032      	movs	r2, r6
   27b58:	9903      	ldr	r1, [sp, #12]
   27b5a:	6820      	ldr	r0, [r4, #0]
   27b5c:	f7fd fdd0 	bl	25700 <memmove>
   27b60:	2000      	movs	r0, #0
   27b62:	68a3      	ldr	r3, [r4, #8]
   27b64:	1b9b      	subs	r3, r3, r6
   27b66:	60a3      	str	r3, [r4, #8]
   27b68:	6823      	ldr	r3, [r4, #0]
   27b6a:	199e      	adds	r6, r3, r6
   27b6c:	6026      	str	r6, [r4, #0]
   27b6e:	b005      	add	sp, #20
   27b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27b72:	46c0      	nop			; (mov r8, r8)
   27b74:	fffffb7f 	.word	0xfffffb7f

00027b78 <_svfiprintf_r>:
   27b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   27b7a:	b09f      	sub	sp, #124	; 0x7c
   27b7c:	9002      	str	r0, [sp, #8]
   27b7e:	9305      	str	r3, [sp, #20]
   27b80:	898b      	ldrh	r3, [r1, #12]
   27b82:	000f      	movs	r7, r1
   27b84:	0016      	movs	r6, r2
   27b86:	061b      	lsls	r3, r3, #24
   27b88:	d510      	bpl.n	27bac <_svfiprintf_r+0x34>
   27b8a:	690b      	ldr	r3, [r1, #16]
   27b8c:	2b00      	cmp	r3, #0
   27b8e:	d10d      	bne.n	27bac <_svfiprintf_r+0x34>
   27b90:	2140      	movs	r1, #64	; 0x40
   27b92:	f7fd fe1f 	bl	257d4 <_malloc_r>
   27b96:	6038      	str	r0, [r7, #0]
   27b98:	6138      	str	r0, [r7, #16]
   27b9a:	2800      	cmp	r0, #0
   27b9c:	d104      	bne.n	27ba8 <_svfiprintf_r+0x30>
   27b9e:	230c      	movs	r3, #12
   27ba0:	9a02      	ldr	r2, [sp, #8]
   27ba2:	3801      	subs	r0, #1
   27ba4:	6013      	str	r3, [r2, #0]
   27ba6:	e0d8      	b.n	27d5a <_svfiprintf_r+0x1e2>
   27ba8:	2340      	movs	r3, #64	; 0x40
   27baa:	617b      	str	r3, [r7, #20]
   27bac:	2300      	movs	r3, #0
   27bae:	ad06      	add	r5, sp, #24
   27bb0:	616b      	str	r3, [r5, #20]
   27bb2:	3320      	adds	r3, #32
   27bb4:	766b      	strb	r3, [r5, #25]
   27bb6:	3310      	adds	r3, #16
   27bb8:	76ab      	strb	r3, [r5, #26]
   27bba:	0034      	movs	r4, r6
   27bbc:	7823      	ldrb	r3, [r4, #0]
   27bbe:	2b00      	cmp	r3, #0
   27bc0:	d103      	bne.n	27bca <_svfiprintf_r+0x52>
   27bc2:	1ba3      	subs	r3, r4, r6
   27bc4:	9304      	str	r3, [sp, #16]
   27bc6:	d012      	beq.n	27bee <_svfiprintf_r+0x76>
   27bc8:	e003      	b.n	27bd2 <_svfiprintf_r+0x5a>
   27bca:	2b25      	cmp	r3, #37	; 0x25
   27bcc:	d0f9      	beq.n	27bc2 <_svfiprintf_r+0x4a>
   27bce:	3401      	adds	r4, #1
   27bd0:	e7f4      	b.n	27bbc <_svfiprintf_r+0x44>
   27bd2:	1ba3      	subs	r3, r4, r6
   27bd4:	0032      	movs	r2, r6
   27bd6:	0039      	movs	r1, r7
   27bd8:	9802      	ldr	r0, [sp, #8]
   27bda:	f7ff ff6b 	bl	27ab4 <__ssputs_r>
   27bde:	1c43      	adds	r3, r0, #1
   27be0:	d100      	bne.n	27be4 <_svfiprintf_r+0x6c>
   27be2:	e0b4      	b.n	27d4e <_svfiprintf_r+0x1d6>
   27be4:	696a      	ldr	r2, [r5, #20]
   27be6:	9b04      	ldr	r3, [sp, #16]
   27be8:	4694      	mov	ip, r2
   27bea:	4463      	add	r3, ip
   27bec:	616b      	str	r3, [r5, #20]
   27bee:	7823      	ldrb	r3, [r4, #0]
   27bf0:	2b00      	cmp	r3, #0
   27bf2:	d100      	bne.n	27bf6 <_svfiprintf_r+0x7e>
   27bf4:	e0ab      	b.n	27d4e <_svfiprintf_r+0x1d6>
   27bf6:	2201      	movs	r2, #1
   27bf8:	2300      	movs	r3, #0
   27bfa:	4252      	negs	r2, r2
   27bfc:	606a      	str	r2, [r5, #4]
   27bfe:	a902      	add	r1, sp, #8
   27c00:	3254      	adds	r2, #84	; 0x54
   27c02:	1852      	adds	r2, r2, r1
   27c04:	3401      	adds	r4, #1
   27c06:	602b      	str	r3, [r5, #0]
   27c08:	60eb      	str	r3, [r5, #12]
   27c0a:	60ab      	str	r3, [r5, #8]
   27c0c:	7013      	strb	r3, [r2, #0]
   27c0e:	65ab      	str	r3, [r5, #88]	; 0x58
   27c10:	4e53      	ldr	r6, [pc, #332]	; (27d60 <_svfiprintf_r+0x1e8>)
   27c12:	7821      	ldrb	r1, [r4, #0]
   27c14:	2205      	movs	r2, #5
   27c16:	0030      	movs	r0, r6
   27c18:	f7ff fc46 	bl	274a8 <memchr>
   27c1c:	2800      	cmp	r0, #0
   27c1e:	d007      	beq.n	27c30 <_svfiprintf_r+0xb8>
   27c20:	2301      	movs	r3, #1
   27c22:	1b80      	subs	r0, r0, r6
   27c24:	4083      	lsls	r3, r0
   27c26:	682a      	ldr	r2, [r5, #0]
   27c28:	3401      	adds	r4, #1
   27c2a:	4313      	orrs	r3, r2
   27c2c:	602b      	str	r3, [r5, #0]
   27c2e:	e7ef      	b.n	27c10 <_svfiprintf_r+0x98>
   27c30:	682b      	ldr	r3, [r5, #0]
   27c32:	06da      	lsls	r2, r3, #27
   27c34:	d504      	bpl.n	27c40 <_svfiprintf_r+0xc8>
   27c36:	2253      	movs	r2, #83	; 0x53
   27c38:	2120      	movs	r1, #32
   27c3a:	a802      	add	r0, sp, #8
   27c3c:	1812      	adds	r2, r2, r0
   27c3e:	7011      	strb	r1, [r2, #0]
   27c40:	071a      	lsls	r2, r3, #28
   27c42:	d504      	bpl.n	27c4e <_svfiprintf_r+0xd6>
   27c44:	2253      	movs	r2, #83	; 0x53
   27c46:	212b      	movs	r1, #43	; 0x2b
   27c48:	a802      	add	r0, sp, #8
   27c4a:	1812      	adds	r2, r2, r0
   27c4c:	7011      	strb	r1, [r2, #0]
   27c4e:	7822      	ldrb	r2, [r4, #0]
   27c50:	2a2a      	cmp	r2, #42	; 0x2a
   27c52:	d003      	beq.n	27c5c <_svfiprintf_r+0xe4>
   27c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27c56:	2000      	movs	r0, #0
   27c58:	210a      	movs	r1, #10
   27c5a:	e00e      	b.n	27c7a <_svfiprintf_r+0x102>
   27c5c:	9a05      	ldr	r2, [sp, #20]
   27c5e:	1d11      	adds	r1, r2, #4
   27c60:	6812      	ldr	r2, [r2, #0]
   27c62:	9105      	str	r1, [sp, #20]
   27c64:	2a00      	cmp	r2, #0
   27c66:	db01      	blt.n	27c6c <_svfiprintf_r+0xf4>
   27c68:	9209      	str	r2, [sp, #36]	; 0x24
   27c6a:	e004      	b.n	27c76 <_svfiprintf_r+0xfe>
   27c6c:	4252      	negs	r2, r2
   27c6e:	60ea      	str	r2, [r5, #12]
   27c70:	2202      	movs	r2, #2
   27c72:	4313      	orrs	r3, r2
   27c74:	602b      	str	r3, [r5, #0]
   27c76:	3401      	adds	r4, #1
   27c78:	e00b      	b.n	27c92 <_svfiprintf_r+0x11a>
   27c7a:	7822      	ldrb	r2, [r4, #0]
   27c7c:	3a30      	subs	r2, #48	; 0x30
   27c7e:	2a09      	cmp	r2, #9
   27c80:	d804      	bhi.n	27c8c <_svfiprintf_r+0x114>
   27c82:	434b      	muls	r3, r1
   27c84:	3401      	adds	r4, #1
   27c86:	189b      	adds	r3, r3, r2
   27c88:	2001      	movs	r0, #1
   27c8a:	e7f6      	b.n	27c7a <_svfiprintf_r+0x102>
   27c8c:	2800      	cmp	r0, #0
   27c8e:	d000      	beq.n	27c92 <_svfiprintf_r+0x11a>
   27c90:	9309      	str	r3, [sp, #36]	; 0x24
   27c92:	7823      	ldrb	r3, [r4, #0]
   27c94:	2b2e      	cmp	r3, #46	; 0x2e
   27c96:	d11e      	bne.n	27cd6 <_svfiprintf_r+0x15e>
   27c98:	7863      	ldrb	r3, [r4, #1]
   27c9a:	2b2a      	cmp	r3, #42	; 0x2a
   27c9c:	d10a      	bne.n	27cb4 <_svfiprintf_r+0x13c>
   27c9e:	9b05      	ldr	r3, [sp, #20]
   27ca0:	3402      	adds	r4, #2
   27ca2:	1d1a      	adds	r2, r3, #4
   27ca4:	681b      	ldr	r3, [r3, #0]
   27ca6:	9205      	str	r2, [sp, #20]
   27ca8:	2b00      	cmp	r3, #0
   27caa:	da01      	bge.n	27cb0 <_svfiprintf_r+0x138>
   27cac:	2301      	movs	r3, #1
   27cae:	425b      	negs	r3, r3
   27cb0:	9307      	str	r3, [sp, #28]
   27cb2:	e010      	b.n	27cd6 <_svfiprintf_r+0x15e>
   27cb4:	2300      	movs	r3, #0
   27cb6:	200a      	movs	r0, #10
   27cb8:	001a      	movs	r2, r3
   27cba:	3401      	adds	r4, #1
   27cbc:	606b      	str	r3, [r5, #4]
   27cbe:	7821      	ldrb	r1, [r4, #0]
   27cc0:	3930      	subs	r1, #48	; 0x30
   27cc2:	2909      	cmp	r1, #9
   27cc4:	d804      	bhi.n	27cd0 <_svfiprintf_r+0x158>
   27cc6:	4342      	muls	r2, r0
   27cc8:	3401      	adds	r4, #1
   27cca:	1852      	adds	r2, r2, r1
   27ccc:	2301      	movs	r3, #1
   27cce:	e7f6      	b.n	27cbe <_svfiprintf_r+0x146>
   27cd0:	2b00      	cmp	r3, #0
   27cd2:	d000      	beq.n	27cd6 <_svfiprintf_r+0x15e>
   27cd4:	9207      	str	r2, [sp, #28]
   27cd6:	4e23      	ldr	r6, [pc, #140]	; (27d64 <_svfiprintf_r+0x1ec>)
   27cd8:	7821      	ldrb	r1, [r4, #0]
   27cda:	2203      	movs	r2, #3
   27cdc:	0030      	movs	r0, r6
   27cde:	f7ff fbe3 	bl	274a8 <memchr>
   27ce2:	2800      	cmp	r0, #0
   27ce4:	d006      	beq.n	27cf4 <_svfiprintf_r+0x17c>
   27ce6:	2340      	movs	r3, #64	; 0x40
   27ce8:	1b80      	subs	r0, r0, r6
   27cea:	4083      	lsls	r3, r0
   27cec:	682a      	ldr	r2, [r5, #0]
   27cee:	3401      	adds	r4, #1
   27cf0:	4313      	orrs	r3, r2
   27cf2:	602b      	str	r3, [r5, #0]
   27cf4:	7821      	ldrb	r1, [r4, #0]
   27cf6:	2206      	movs	r2, #6
   27cf8:	481b      	ldr	r0, [pc, #108]	; (27d68 <_svfiprintf_r+0x1f0>)
   27cfa:	1c66      	adds	r6, r4, #1
   27cfc:	7629      	strb	r1, [r5, #24]
   27cfe:	f7ff fbd3 	bl	274a8 <memchr>
   27d02:	2800      	cmp	r0, #0
   27d04:	d012      	beq.n	27d2c <_svfiprintf_r+0x1b4>
   27d06:	4b19      	ldr	r3, [pc, #100]	; (27d6c <_svfiprintf_r+0x1f4>)
   27d08:	2b00      	cmp	r3, #0
   27d0a:	d106      	bne.n	27d1a <_svfiprintf_r+0x1a2>
   27d0c:	2207      	movs	r2, #7
   27d0e:	9b05      	ldr	r3, [sp, #20]
   27d10:	3307      	adds	r3, #7
   27d12:	4393      	bics	r3, r2
   27d14:	3308      	adds	r3, #8
   27d16:	9305      	str	r3, [sp, #20]
   27d18:	e014      	b.n	27d44 <_svfiprintf_r+0x1cc>
   27d1a:	ab05      	add	r3, sp, #20
   27d1c:	9300      	str	r3, [sp, #0]
   27d1e:	003a      	movs	r2, r7
   27d20:	4b13      	ldr	r3, [pc, #76]	; (27d70 <_svfiprintf_r+0x1f8>)
   27d22:	0029      	movs	r1, r5
   27d24:	9802      	ldr	r0, [sp, #8]
   27d26:	f7fd fe4b 	bl	259c0 <_printf_float>
   27d2a:	e007      	b.n	27d3c <_svfiprintf_r+0x1c4>
   27d2c:	ab05      	add	r3, sp, #20
   27d2e:	9300      	str	r3, [sp, #0]
   27d30:	003a      	movs	r2, r7
   27d32:	4b0f      	ldr	r3, [pc, #60]	; (27d70 <_svfiprintf_r+0x1f8>)
   27d34:	0029      	movs	r1, r5
   27d36:	9802      	ldr	r0, [sp, #8]
   27d38:	f7fe f900 	bl	25f3c <_printf_i>
   27d3c:	9003      	str	r0, [sp, #12]
   27d3e:	9b03      	ldr	r3, [sp, #12]
   27d40:	3301      	adds	r3, #1
   27d42:	d004      	beq.n	27d4e <_svfiprintf_r+0x1d6>
   27d44:	696b      	ldr	r3, [r5, #20]
   27d46:	9a03      	ldr	r2, [sp, #12]
   27d48:	189b      	adds	r3, r3, r2
   27d4a:	616b      	str	r3, [r5, #20]
   27d4c:	e735      	b.n	27bba <_svfiprintf_r+0x42>
   27d4e:	89bb      	ldrh	r3, [r7, #12]
   27d50:	980b      	ldr	r0, [sp, #44]	; 0x2c
   27d52:	065b      	lsls	r3, r3, #25
   27d54:	d501      	bpl.n	27d5a <_svfiprintf_r+0x1e2>
   27d56:	2001      	movs	r0, #1
   27d58:	4240      	negs	r0, r0
   27d5a:	b01f      	add	sp, #124	; 0x7c
   27d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27d5e:	46c0      	nop			; (mov r8, r8)
   27d60:	0002f054 	.word	0x0002f054
   27d64:	0002f05a 	.word	0x0002f05a
   27d68:	0002f05e 	.word	0x0002f05e
   27d6c:	000259c1 	.word	0x000259c1
   27d70:	00027ab5 	.word	0x00027ab5

00027d74 <__sfputc_r>:
   27d74:	6893      	ldr	r3, [r2, #8]
   27d76:	b510      	push	{r4, lr}
   27d78:	3b01      	subs	r3, #1
   27d7a:	6093      	str	r3, [r2, #8]
   27d7c:	2b00      	cmp	r3, #0
   27d7e:	da05      	bge.n	27d8c <__sfputc_r+0x18>
   27d80:	6994      	ldr	r4, [r2, #24]
   27d82:	42a3      	cmp	r3, r4
   27d84:	db08      	blt.n	27d98 <__sfputc_r+0x24>
   27d86:	b2cb      	uxtb	r3, r1
   27d88:	2b0a      	cmp	r3, #10
   27d8a:	d005      	beq.n	27d98 <__sfputc_r+0x24>
   27d8c:	6813      	ldr	r3, [r2, #0]
   27d8e:	1c58      	adds	r0, r3, #1
   27d90:	6010      	str	r0, [r2, #0]
   27d92:	7019      	strb	r1, [r3, #0]
   27d94:	b2c8      	uxtb	r0, r1
   27d96:	e001      	b.n	27d9c <__sfputc_r+0x28>
   27d98:	f000 f97c 	bl	28094 <__swbuf_r>
   27d9c:	bd10      	pop	{r4, pc}

00027d9e <__sfputs_r>:
   27d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27da0:	0006      	movs	r6, r0
   27da2:	000f      	movs	r7, r1
   27da4:	0014      	movs	r4, r2
   27da6:	18d5      	adds	r5, r2, r3
   27da8:	42ac      	cmp	r4, r5
   27daa:	d008      	beq.n	27dbe <__sfputs_r+0x20>
   27dac:	7821      	ldrb	r1, [r4, #0]
   27dae:	003a      	movs	r2, r7
   27db0:	0030      	movs	r0, r6
   27db2:	f7ff ffdf 	bl	27d74 <__sfputc_r>
   27db6:	3401      	adds	r4, #1
   27db8:	1c43      	adds	r3, r0, #1
   27dba:	d1f5      	bne.n	27da8 <__sfputs_r+0xa>
   27dbc:	e000      	b.n	27dc0 <__sfputs_r+0x22>
   27dbe:	2000      	movs	r0, #0
   27dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00027dc4 <_vfiprintf_r>:
   27dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27dc6:	b09f      	sub	sp, #124	; 0x7c
   27dc8:	0006      	movs	r6, r0
   27dca:	000f      	movs	r7, r1
   27dcc:	9202      	str	r2, [sp, #8]
   27dce:	9305      	str	r3, [sp, #20]
   27dd0:	2800      	cmp	r0, #0
   27dd2:	d004      	beq.n	27dde <_vfiprintf_r+0x1a>
   27dd4:	6983      	ldr	r3, [r0, #24]
   27dd6:	2b00      	cmp	r3, #0
   27dd8:	d101      	bne.n	27dde <_vfiprintf_r+0x1a>
   27dda:	f7ff fa61 	bl	272a0 <__sinit>
   27dde:	4b7f      	ldr	r3, [pc, #508]	; (27fdc <_vfiprintf_r+0x218>)
   27de0:	429f      	cmp	r7, r3
   27de2:	d101      	bne.n	27de8 <_vfiprintf_r+0x24>
   27de4:	6877      	ldr	r7, [r6, #4]
   27de6:	e008      	b.n	27dfa <_vfiprintf_r+0x36>
   27de8:	4b7d      	ldr	r3, [pc, #500]	; (27fe0 <_vfiprintf_r+0x21c>)
   27dea:	429f      	cmp	r7, r3
   27dec:	d101      	bne.n	27df2 <_vfiprintf_r+0x2e>
   27dee:	68b7      	ldr	r7, [r6, #8]
   27df0:	e003      	b.n	27dfa <_vfiprintf_r+0x36>
   27df2:	4b7c      	ldr	r3, [pc, #496]	; (27fe4 <_vfiprintf_r+0x220>)
   27df4:	429f      	cmp	r7, r3
   27df6:	d100      	bne.n	27dfa <_vfiprintf_r+0x36>
   27df8:	68f7      	ldr	r7, [r6, #12]
   27dfa:	89bb      	ldrh	r3, [r7, #12]
   27dfc:	071b      	lsls	r3, r3, #28
   27dfe:	d50a      	bpl.n	27e16 <_vfiprintf_r+0x52>
   27e00:	693b      	ldr	r3, [r7, #16]
   27e02:	2b00      	cmp	r3, #0
   27e04:	d007      	beq.n	27e16 <_vfiprintf_r+0x52>
   27e06:	2300      	movs	r3, #0
   27e08:	ad06      	add	r5, sp, #24
   27e0a:	616b      	str	r3, [r5, #20]
   27e0c:	3320      	adds	r3, #32
   27e0e:	766b      	strb	r3, [r5, #25]
   27e10:	3310      	adds	r3, #16
   27e12:	76ab      	strb	r3, [r5, #26]
   27e14:	e03d      	b.n	27e92 <_vfiprintf_r+0xce>
   27e16:	0039      	movs	r1, r7
   27e18:	0030      	movs	r0, r6
   27e1a:	f000 f9a5 	bl	28168 <__swsetup_r>
   27e1e:	2800      	cmp	r0, #0
   27e20:	d0f1      	beq.n	27e06 <_vfiprintf_r+0x42>
   27e22:	2001      	movs	r0, #1
   27e24:	4240      	negs	r0, r0
   27e26:	e0d6      	b.n	27fd6 <_vfiprintf_r+0x212>
   27e28:	9a05      	ldr	r2, [sp, #20]
   27e2a:	1d11      	adds	r1, r2, #4
   27e2c:	6812      	ldr	r2, [r2, #0]
   27e2e:	9105      	str	r1, [sp, #20]
   27e30:	2a00      	cmp	r2, #0
   27e32:	da00      	bge.n	27e36 <_vfiprintf_r+0x72>
   27e34:	e07f      	b.n	27f36 <_vfiprintf_r+0x172>
   27e36:	9209      	str	r2, [sp, #36]	; 0x24
   27e38:	3401      	adds	r4, #1
   27e3a:	7823      	ldrb	r3, [r4, #0]
   27e3c:	2b2e      	cmp	r3, #46	; 0x2e
   27e3e:	d100      	bne.n	27e42 <_vfiprintf_r+0x7e>
   27e40:	e08d      	b.n	27f5e <_vfiprintf_r+0x19a>
   27e42:	7821      	ldrb	r1, [r4, #0]
   27e44:	2203      	movs	r2, #3
   27e46:	4868      	ldr	r0, [pc, #416]	; (27fe8 <_vfiprintf_r+0x224>)
   27e48:	f7ff fb2e 	bl	274a8 <memchr>
   27e4c:	2800      	cmp	r0, #0
   27e4e:	d007      	beq.n	27e60 <_vfiprintf_r+0x9c>
   27e50:	4b65      	ldr	r3, [pc, #404]	; (27fe8 <_vfiprintf_r+0x224>)
   27e52:	682a      	ldr	r2, [r5, #0]
   27e54:	1ac0      	subs	r0, r0, r3
   27e56:	2340      	movs	r3, #64	; 0x40
   27e58:	4083      	lsls	r3, r0
   27e5a:	4313      	orrs	r3, r2
   27e5c:	602b      	str	r3, [r5, #0]
   27e5e:	3401      	adds	r4, #1
   27e60:	7821      	ldrb	r1, [r4, #0]
   27e62:	1c63      	adds	r3, r4, #1
   27e64:	2206      	movs	r2, #6
   27e66:	4861      	ldr	r0, [pc, #388]	; (27fec <_vfiprintf_r+0x228>)
   27e68:	9302      	str	r3, [sp, #8]
   27e6a:	7629      	strb	r1, [r5, #24]
   27e6c:	f7ff fb1c 	bl	274a8 <memchr>
   27e70:	2800      	cmp	r0, #0
   27e72:	d100      	bne.n	27e76 <_vfiprintf_r+0xb2>
   27e74:	e09d      	b.n	27fb2 <_vfiprintf_r+0x1ee>
   27e76:	4b5e      	ldr	r3, [pc, #376]	; (27ff0 <_vfiprintf_r+0x22c>)
   27e78:	2b00      	cmp	r3, #0
   27e7a:	d000      	beq.n	27e7e <_vfiprintf_r+0xba>
   27e7c:	e090      	b.n	27fa0 <_vfiprintf_r+0x1dc>
   27e7e:	2207      	movs	r2, #7
   27e80:	9b05      	ldr	r3, [sp, #20]
   27e82:	3307      	adds	r3, #7
   27e84:	4393      	bics	r3, r2
   27e86:	3308      	adds	r3, #8
   27e88:	9305      	str	r3, [sp, #20]
   27e8a:	696b      	ldr	r3, [r5, #20]
   27e8c:	9a03      	ldr	r2, [sp, #12]
   27e8e:	189b      	adds	r3, r3, r2
   27e90:	616b      	str	r3, [r5, #20]
   27e92:	9c02      	ldr	r4, [sp, #8]
   27e94:	7823      	ldrb	r3, [r4, #0]
   27e96:	2b00      	cmp	r3, #0
   27e98:	d104      	bne.n	27ea4 <_vfiprintf_r+0xe0>
   27e9a:	9b02      	ldr	r3, [sp, #8]
   27e9c:	1ae3      	subs	r3, r4, r3
   27e9e:	9304      	str	r3, [sp, #16]
   27ea0:	d012      	beq.n	27ec8 <_vfiprintf_r+0x104>
   27ea2:	e003      	b.n	27eac <_vfiprintf_r+0xe8>
   27ea4:	2b25      	cmp	r3, #37	; 0x25
   27ea6:	d0f8      	beq.n	27e9a <_vfiprintf_r+0xd6>
   27ea8:	3401      	adds	r4, #1
   27eaa:	e7f3      	b.n	27e94 <_vfiprintf_r+0xd0>
   27eac:	9b04      	ldr	r3, [sp, #16]
   27eae:	9a02      	ldr	r2, [sp, #8]
   27eb0:	0039      	movs	r1, r7
   27eb2:	0030      	movs	r0, r6
   27eb4:	f7ff ff73 	bl	27d9e <__sfputs_r>
   27eb8:	1c43      	adds	r3, r0, #1
   27eba:	d100      	bne.n	27ebe <_vfiprintf_r+0xfa>
   27ebc:	e086      	b.n	27fcc <_vfiprintf_r+0x208>
   27ebe:	696a      	ldr	r2, [r5, #20]
   27ec0:	9b04      	ldr	r3, [sp, #16]
   27ec2:	4694      	mov	ip, r2
   27ec4:	4463      	add	r3, ip
   27ec6:	616b      	str	r3, [r5, #20]
   27ec8:	7823      	ldrb	r3, [r4, #0]
   27eca:	2b00      	cmp	r3, #0
   27ecc:	d07e      	beq.n	27fcc <_vfiprintf_r+0x208>
   27ece:	2201      	movs	r2, #1
   27ed0:	2300      	movs	r3, #0
   27ed2:	4252      	negs	r2, r2
   27ed4:	606a      	str	r2, [r5, #4]
   27ed6:	a902      	add	r1, sp, #8
   27ed8:	3254      	adds	r2, #84	; 0x54
   27eda:	1852      	adds	r2, r2, r1
   27edc:	3401      	adds	r4, #1
   27ede:	602b      	str	r3, [r5, #0]
   27ee0:	60eb      	str	r3, [r5, #12]
   27ee2:	60ab      	str	r3, [r5, #8]
   27ee4:	7013      	strb	r3, [r2, #0]
   27ee6:	65ab      	str	r3, [r5, #88]	; 0x58
   27ee8:	7821      	ldrb	r1, [r4, #0]
   27eea:	2205      	movs	r2, #5
   27eec:	4841      	ldr	r0, [pc, #260]	; (27ff4 <_vfiprintf_r+0x230>)
   27eee:	f7ff fadb 	bl	274a8 <memchr>
   27ef2:	2800      	cmp	r0, #0
   27ef4:	d008      	beq.n	27f08 <_vfiprintf_r+0x144>
   27ef6:	4b3f      	ldr	r3, [pc, #252]	; (27ff4 <_vfiprintf_r+0x230>)
   27ef8:	682a      	ldr	r2, [r5, #0]
   27efa:	1ac0      	subs	r0, r0, r3
   27efc:	2301      	movs	r3, #1
   27efe:	4083      	lsls	r3, r0
   27f00:	4313      	orrs	r3, r2
   27f02:	602b      	str	r3, [r5, #0]
   27f04:	3401      	adds	r4, #1
   27f06:	e7ef      	b.n	27ee8 <_vfiprintf_r+0x124>
   27f08:	682b      	ldr	r3, [r5, #0]
   27f0a:	06da      	lsls	r2, r3, #27
   27f0c:	d504      	bpl.n	27f18 <_vfiprintf_r+0x154>
   27f0e:	2253      	movs	r2, #83	; 0x53
   27f10:	2120      	movs	r1, #32
   27f12:	a802      	add	r0, sp, #8
   27f14:	1812      	adds	r2, r2, r0
   27f16:	7011      	strb	r1, [r2, #0]
   27f18:	071a      	lsls	r2, r3, #28
   27f1a:	d504      	bpl.n	27f26 <_vfiprintf_r+0x162>
   27f1c:	2253      	movs	r2, #83	; 0x53
   27f1e:	212b      	movs	r1, #43	; 0x2b
   27f20:	a802      	add	r0, sp, #8
   27f22:	1812      	adds	r2, r2, r0
   27f24:	7011      	strb	r1, [r2, #0]
   27f26:	7822      	ldrb	r2, [r4, #0]
   27f28:	2a2a      	cmp	r2, #42	; 0x2a
   27f2a:	d100      	bne.n	27f2e <_vfiprintf_r+0x16a>
   27f2c:	e77c      	b.n	27e28 <_vfiprintf_r+0x64>
   27f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27f30:	2000      	movs	r0, #0
   27f32:	210a      	movs	r1, #10
   27f34:	e005      	b.n	27f42 <_vfiprintf_r+0x17e>
   27f36:	4252      	negs	r2, r2
   27f38:	60ea      	str	r2, [r5, #12]
   27f3a:	2202      	movs	r2, #2
   27f3c:	4313      	orrs	r3, r2
   27f3e:	602b      	str	r3, [r5, #0]
   27f40:	e77a      	b.n	27e38 <_vfiprintf_r+0x74>
   27f42:	7822      	ldrb	r2, [r4, #0]
   27f44:	3a30      	subs	r2, #48	; 0x30
   27f46:	2a09      	cmp	r2, #9
   27f48:	d804      	bhi.n	27f54 <_vfiprintf_r+0x190>
   27f4a:	434b      	muls	r3, r1
   27f4c:	3401      	adds	r4, #1
   27f4e:	189b      	adds	r3, r3, r2
   27f50:	2001      	movs	r0, #1
   27f52:	e7f6      	b.n	27f42 <_vfiprintf_r+0x17e>
   27f54:	2800      	cmp	r0, #0
   27f56:	d100      	bne.n	27f5a <_vfiprintf_r+0x196>
   27f58:	e76f      	b.n	27e3a <_vfiprintf_r+0x76>
   27f5a:	9309      	str	r3, [sp, #36]	; 0x24
   27f5c:	e76d      	b.n	27e3a <_vfiprintf_r+0x76>
   27f5e:	7863      	ldrb	r3, [r4, #1]
   27f60:	2b2a      	cmp	r3, #42	; 0x2a
   27f62:	d10a      	bne.n	27f7a <_vfiprintf_r+0x1b6>
   27f64:	9b05      	ldr	r3, [sp, #20]
   27f66:	3402      	adds	r4, #2
   27f68:	1d1a      	adds	r2, r3, #4
   27f6a:	681b      	ldr	r3, [r3, #0]
   27f6c:	9205      	str	r2, [sp, #20]
   27f6e:	2b00      	cmp	r3, #0
   27f70:	da01      	bge.n	27f76 <_vfiprintf_r+0x1b2>
   27f72:	2301      	movs	r3, #1
   27f74:	425b      	negs	r3, r3
   27f76:	9307      	str	r3, [sp, #28]
   27f78:	e763      	b.n	27e42 <_vfiprintf_r+0x7e>
   27f7a:	2300      	movs	r3, #0
   27f7c:	200a      	movs	r0, #10
   27f7e:	001a      	movs	r2, r3
   27f80:	3401      	adds	r4, #1
   27f82:	606b      	str	r3, [r5, #4]
   27f84:	7821      	ldrb	r1, [r4, #0]
   27f86:	3930      	subs	r1, #48	; 0x30
   27f88:	2909      	cmp	r1, #9
   27f8a:	d804      	bhi.n	27f96 <_vfiprintf_r+0x1d2>
   27f8c:	4342      	muls	r2, r0
   27f8e:	3401      	adds	r4, #1
   27f90:	1852      	adds	r2, r2, r1
   27f92:	2301      	movs	r3, #1
   27f94:	e7f6      	b.n	27f84 <_vfiprintf_r+0x1c0>
   27f96:	2b00      	cmp	r3, #0
   27f98:	d100      	bne.n	27f9c <_vfiprintf_r+0x1d8>
   27f9a:	e752      	b.n	27e42 <_vfiprintf_r+0x7e>
   27f9c:	9207      	str	r2, [sp, #28]
   27f9e:	e750      	b.n	27e42 <_vfiprintf_r+0x7e>
   27fa0:	ab05      	add	r3, sp, #20
   27fa2:	9300      	str	r3, [sp, #0]
   27fa4:	003a      	movs	r2, r7
   27fa6:	4b14      	ldr	r3, [pc, #80]	; (27ff8 <_vfiprintf_r+0x234>)
   27fa8:	0029      	movs	r1, r5
   27faa:	0030      	movs	r0, r6
   27fac:	f7fd fd08 	bl	259c0 <_printf_float>
   27fb0:	e007      	b.n	27fc2 <_vfiprintf_r+0x1fe>
   27fb2:	ab05      	add	r3, sp, #20
   27fb4:	9300      	str	r3, [sp, #0]
   27fb6:	003a      	movs	r2, r7
   27fb8:	4b0f      	ldr	r3, [pc, #60]	; (27ff8 <_vfiprintf_r+0x234>)
   27fba:	0029      	movs	r1, r5
   27fbc:	0030      	movs	r0, r6
   27fbe:	f7fd ffbd 	bl	25f3c <_printf_i>
   27fc2:	9003      	str	r0, [sp, #12]
   27fc4:	9b03      	ldr	r3, [sp, #12]
   27fc6:	3301      	adds	r3, #1
   27fc8:	d000      	beq.n	27fcc <_vfiprintf_r+0x208>
   27fca:	e75e      	b.n	27e8a <_vfiprintf_r+0xc6>
   27fcc:	89bb      	ldrh	r3, [r7, #12]
   27fce:	065b      	lsls	r3, r3, #25
   27fd0:	d500      	bpl.n	27fd4 <_vfiprintf_r+0x210>
   27fd2:	e726      	b.n	27e22 <_vfiprintf_r+0x5e>
   27fd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   27fd6:	b01f      	add	sp, #124	; 0x7c
   27fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27fda:	46c0      	nop			; (mov r8, r8)
   27fdc:	0002eef4 	.word	0x0002eef4
   27fe0:	0002ef14 	.word	0x0002ef14
   27fe4:	0002ef34 	.word	0x0002ef34
   27fe8:	0002f05a 	.word	0x0002f05a
   27fec:	0002f05e 	.word	0x0002f05e
   27ff0:	000259c1 	.word	0x000259c1
   27ff4:	0002f054 	.word	0x0002f054
   27ff8:	00027d9f 	.word	0x00027d9f

00027ffc <__sread>:
   27ffc:	b570      	push	{r4, r5, r6, lr}
   27ffe:	000c      	movs	r4, r1
   28000:	250e      	movs	r5, #14
   28002:	5f49      	ldrsh	r1, [r1, r5]
   28004:	f000 f996 	bl	28334 <_read_r>
   28008:	2800      	cmp	r0, #0
   2800a:	db03      	blt.n	28014 <__sread+0x18>
   2800c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   2800e:	181b      	adds	r3, r3, r0
   28010:	6563      	str	r3, [r4, #84]	; 0x54
   28012:	e003      	b.n	2801c <__sread+0x20>
   28014:	89a2      	ldrh	r2, [r4, #12]
   28016:	4b02      	ldr	r3, [pc, #8]	; (28020 <__sread+0x24>)
   28018:	4013      	ands	r3, r2
   2801a:	81a3      	strh	r3, [r4, #12]
   2801c:	bd70      	pop	{r4, r5, r6, pc}
   2801e:	46c0      	nop			; (mov r8, r8)
   28020:	ffffefff 	.word	0xffffefff

00028024 <__swrite>:
   28024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28026:	001f      	movs	r7, r3
   28028:	898b      	ldrh	r3, [r1, #12]
   2802a:	0005      	movs	r5, r0
   2802c:	000c      	movs	r4, r1
   2802e:	0016      	movs	r6, r2
   28030:	05db      	lsls	r3, r3, #23
   28032:	d505      	bpl.n	28040 <__swrite+0x1c>
   28034:	230e      	movs	r3, #14
   28036:	5ec9      	ldrsh	r1, [r1, r3]
   28038:	2200      	movs	r2, #0
   2803a:	2302      	movs	r3, #2
   2803c:	f000 f940 	bl	282c0 <_lseek_r>
   28040:	89a2      	ldrh	r2, [r4, #12]
   28042:	4b05      	ldr	r3, [pc, #20]	; (28058 <__swrite+0x34>)
   28044:	0028      	movs	r0, r5
   28046:	4013      	ands	r3, r2
   28048:	81a3      	strh	r3, [r4, #12]
   2804a:	0032      	movs	r2, r6
   2804c:	230e      	movs	r3, #14
   2804e:	5ee1      	ldrsh	r1, [r4, r3]
   28050:	003b      	movs	r3, r7
   28052:	f000 f875 	bl	28140 <_write_r>
   28056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28058:	ffffefff 	.word	0xffffefff

0002805c <__sseek>:
   2805c:	b570      	push	{r4, r5, r6, lr}
   2805e:	000c      	movs	r4, r1
   28060:	250e      	movs	r5, #14
   28062:	5f49      	ldrsh	r1, [r1, r5]
   28064:	f000 f92c 	bl	282c0 <_lseek_r>
   28068:	89a3      	ldrh	r3, [r4, #12]
   2806a:	1c42      	adds	r2, r0, #1
   2806c:	d103      	bne.n	28076 <__sseek+0x1a>
   2806e:	4a05      	ldr	r2, [pc, #20]	; (28084 <__sseek+0x28>)
   28070:	4013      	ands	r3, r2
   28072:	81a3      	strh	r3, [r4, #12]
   28074:	e004      	b.n	28080 <__sseek+0x24>
   28076:	2280      	movs	r2, #128	; 0x80
   28078:	0152      	lsls	r2, r2, #5
   2807a:	4313      	orrs	r3, r2
   2807c:	81a3      	strh	r3, [r4, #12]
   2807e:	6560      	str	r0, [r4, #84]	; 0x54
   28080:	bd70      	pop	{r4, r5, r6, pc}
   28082:	46c0      	nop			; (mov r8, r8)
   28084:	ffffefff 	.word	0xffffefff

00028088 <__sclose>:
   28088:	b510      	push	{r4, lr}
   2808a:	230e      	movs	r3, #14
   2808c:	5ec9      	ldrsh	r1, [r1, r3]
   2808e:	f000 f8e1 	bl	28254 <_close_r>
   28092:	bd10      	pop	{r4, pc}

00028094 <__swbuf_r>:
   28094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28096:	0005      	movs	r5, r0
   28098:	000f      	movs	r7, r1
   2809a:	0014      	movs	r4, r2
   2809c:	2800      	cmp	r0, #0
   2809e:	d004      	beq.n	280aa <__swbuf_r+0x16>
   280a0:	6983      	ldr	r3, [r0, #24]
   280a2:	2b00      	cmp	r3, #0
   280a4:	d101      	bne.n	280aa <__swbuf_r+0x16>
   280a6:	f7ff f8fb 	bl	272a0 <__sinit>
   280aa:	4b22      	ldr	r3, [pc, #136]	; (28134 <__swbuf_r+0xa0>)
   280ac:	429c      	cmp	r4, r3
   280ae:	d101      	bne.n	280b4 <__swbuf_r+0x20>
   280b0:	686c      	ldr	r4, [r5, #4]
   280b2:	e008      	b.n	280c6 <__swbuf_r+0x32>
   280b4:	4b20      	ldr	r3, [pc, #128]	; (28138 <__swbuf_r+0xa4>)
   280b6:	429c      	cmp	r4, r3
   280b8:	d101      	bne.n	280be <__swbuf_r+0x2a>
   280ba:	68ac      	ldr	r4, [r5, #8]
   280bc:	e003      	b.n	280c6 <__swbuf_r+0x32>
   280be:	4b1f      	ldr	r3, [pc, #124]	; (2813c <__swbuf_r+0xa8>)
   280c0:	429c      	cmp	r4, r3
   280c2:	d100      	bne.n	280c6 <__swbuf_r+0x32>
   280c4:	68ec      	ldr	r4, [r5, #12]
   280c6:	69a3      	ldr	r3, [r4, #24]
   280c8:	60a3      	str	r3, [r4, #8]
   280ca:	89a3      	ldrh	r3, [r4, #12]
   280cc:	071b      	lsls	r3, r3, #28
   280ce:	d50a      	bpl.n	280e6 <__swbuf_r+0x52>
   280d0:	6923      	ldr	r3, [r4, #16]
   280d2:	2b00      	cmp	r3, #0
   280d4:	d007      	beq.n	280e6 <__swbuf_r+0x52>
   280d6:	6823      	ldr	r3, [r4, #0]
   280d8:	6922      	ldr	r2, [r4, #16]
   280da:	b2fe      	uxtb	r6, r7
   280dc:	1a98      	subs	r0, r3, r2
   280de:	6963      	ldr	r3, [r4, #20]
   280e0:	4298      	cmp	r0, r3
   280e2:	db0f      	blt.n	28104 <__swbuf_r+0x70>
   280e4:	e008      	b.n	280f8 <__swbuf_r+0x64>
   280e6:	0021      	movs	r1, r4
   280e8:	0028      	movs	r0, r5
   280ea:	f000 f83d 	bl	28168 <__swsetup_r>
   280ee:	2800      	cmp	r0, #0
   280f0:	d0f1      	beq.n	280d6 <__swbuf_r+0x42>
   280f2:	2601      	movs	r6, #1
   280f4:	4276      	negs	r6, r6
   280f6:	e01b      	b.n	28130 <__swbuf_r+0x9c>
   280f8:	0021      	movs	r1, r4
   280fa:	0028      	movs	r0, r5
   280fc:	f7ff f862 	bl	271c4 <_fflush_r>
   28100:	2800      	cmp	r0, #0
   28102:	d1f6      	bne.n	280f2 <__swbuf_r+0x5e>
   28104:	68a3      	ldr	r3, [r4, #8]
   28106:	3001      	adds	r0, #1
   28108:	3b01      	subs	r3, #1
   2810a:	60a3      	str	r3, [r4, #8]
   2810c:	6823      	ldr	r3, [r4, #0]
   2810e:	1c5a      	adds	r2, r3, #1
   28110:	6022      	str	r2, [r4, #0]
   28112:	701f      	strb	r7, [r3, #0]
   28114:	6963      	ldr	r3, [r4, #20]
   28116:	4298      	cmp	r0, r3
   28118:	d004      	beq.n	28124 <__swbuf_r+0x90>
   2811a:	89a3      	ldrh	r3, [r4, #12]
   2811c:	07db      	lsls	r3, r3, #31
   2811e:	d507      	bpl.n	28130 <__swbuf_r+0x9c>
   28120:	2e0a      	cmp	r6, #10
   28122:	d105      	bne.n	28130 <__swbuf_r+0x9c>
   28124:	0021      	movs	r1, r4
   28126:	0028      	movs	r0, r5
   28128:	f7ff f84c 	bl	271c4 <_fflush_r>
   2812c:	2800      	cmp	r0, #0
   2812e:	d1e0      	bne.n	280f2 <__swbuf_r+0x5e>
   28130:	0030      	movs	r0, r6
   28132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28134:	0002eef4 	.word	0x0002eef4
   28138:	0002ef14 	.word	0x0002ef14
   2813c:	0002ef34 	.word	0x0002ef34

00028140 <_write_r>:
   28140:	b570      	push	{r4, r5, r6, lr}
   28142:	0005      	movs	r5, r0
   28144:	0008      	movs	r0, r1
   28146:	0011      	movs	r1, r2
   28148:	2200      	movs	r2, #0
   2814a:	4c06      	ldr	r4, [pc, #24]	; (28164 <_write_r+0x24>)
   2814c:	6022      	str	r2, [r4, #0]
   2814e:	001a      	movs	r2, r3
   28150:	f7dc ff20 	bl	4f94 <_write>
   28154:	1c43      	adds	r3, r0, #1
   28156:	d103      	bne.n	28160 <_write_r+0x20>
   28158:	6823      	ldr	r3, [r4, #0]
   2815a:	2b00      	cmp	r3, #0
   2815c:	d000      	beq.n	28160 <_write_r+0x20>
   2815e:	602b      	str	r3, [r5, #0]
   28160:	bd70      	pop	{r4, r5, r6, pc}
   28162:	46c0      	nop			; (mov r8, r8)
   28164:	2000053c 	.word	0x2000053c

00028168 <__swsetup_r>:
   28168:	4b36      	ldr	r3, [pc, #216]	; (28244 <__swsetup_r+0xdc>)
   2816a:	b570      	push	{r4, r5, r6, lr}
   2816c:	681d      	ldr	r5, [r3, #0]
   2816e:	0006      	movs	r6, r0
   28170:	000c      	movs	r4, r1
   28172:	2d00      	cmp	r5, #0
   28174:	d005      	beq.n	28182 <__swsetup_r+0x1a>
   28176:	69ab      	ldr	r3, [r5, #24]
   28178:	2b00      	cmp	r3, #0
   2817a:	d102      	bne.n	28182 <__swsetup_r+0x1a>
   2817c:	0028      	movs	r0, r5
   2817e:	f7ff f88f 	bl	272a0 <__sinit>
   28182:	4b31      	ldr	r3, [pc, #196]	; (28248 <__swsetup_r+0xe0>)
   28184:	429c      	cmp	r4, r3
   28186:	d101      	bne.n	2818c <__swsetup_r+0x24>
   28188:	686c      	ldr	r4, [r5, #4]
   2818a:	e008      	b.n	2819e <__swsetup_r+0x36>
   2818c:	4b2f      	ldr	r3, [pc, #188]	; (2824c <__swsetup_r+0xe4>)
   2818e:	429c      	cmp	r4, r3
   28190:	d101      	bne.n	28196 <__swsetup_r+0x2e>
   28192:	68ac      	ldr	r4, [r5, #8]
   28194:	e003      	b.n	2819e <__swsetup_r+0x36>
   28196:	4b2e      	ldr	r3, [pc, #184]	; (28250 <__swsetup_r+0xe8>)
   28198:	429c      	cmp	r4, r3
   2819a:	d100      	bne.n	2819e <__swsetup_r+0x36>
   2819c:	68ec      	ldr	r4, [r5, #12]
   2819e:	220c      	movs	r2, #12
   281a0:	5ea3      	ldrsh	r3, [r4, r2]
   281a2:	b29a      	uxth	r2, r3
   281a4:	0711      	lsls	r1, r2, #28
   281a6:	d423      	bmi.n	281f0 <__swsetup_r+0x88>
   281a8:	06d1      	lsls	r1, r2, #27
   281aa:	d407      	bmi.n	281bc <__swsetup_r+0x54>
   281ac:	2209      	movs	r2, #9
   281ae:	2001      	movs	r0, #1
   281b0:	6032      	str	r2, [r6, #0]
   281b2:	3237      	adds	r2, #55	; 0x37
   281b4:	4313      	orrs	r3, r2
   281b6:	81a3      	strh	r3, [r4, #12]
   281b8:	4240      	negs	r0, r0
   281ba:	e042      	b.n	28242 <__swsetup_r+0xda>
   281bc:	0753      	lsls	r3, r2, #29
   281be:	d513      	bpl.n	281e8 <__swsetup_r+0x80>
   281c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   281c2:	2900      	cmp	r1, #0
   281c4:	d008      	beq.n	281d8 <__swsetup_r+0x70>
   281c6:	0023      	movs	r3, r4
   281c8:	3344      	adds	r3, #68	; 0x44
   281ca:	4299      	cmp	r1, r3
   281cc:	d002      	beq.n	281d4 <__swsetup_r+0x6c>
   281ce:	0030      	movs	r0, r6
   281d0:	f7fd fab4 	bl	2573c <_free_r>
   281d4:	2300      	movs	r3, #0
   281d6:	6363      	str	r3, [r4, #52]	; 0x34
   281d8:	2224      	movs	r2, #36	; 0x24
   281da:	89a3      	ldrh	r3, [r4, #12]
   281dc:	4393      	bics	r3, r2
   281de:	81a3      	strh	r3, [r4, #12]
   281e0:	2300      	movs	r3, #0
   281e2:	6063      	str	r3, [r4, #4]
   281e4:	6923      	ldr	r3, [r4, #16]
   281e6:	6023      	str	r3, [r4, #0]
   281e8:	2208      	movs	r2, #8
   281ea:	89a3      	ldrh	r3, [r4, #12]
   281ec:	4313      	orrs	r3, r2
   281ee:	81a3      	strh	r3, [r4, #12]
   281f0:	6923      	ldr	r3, [r4, #16]
   281f2:	2b00      	cmp	r3, #0
   281f4:	d10b      	bne.n	2820e <__swsetup_r+0xa6>
   281f6:	23a0      	movs	r3, #160	; 0xa0
   281f8:	2280      	movs	r2, #128	; 0x80
   281fa:	89a1      	ldrh	r1, [r4, #12]
   281fc:	009b      	lsls	r3, r3, #2
   281fe:	0092      	lsls	r2, r2, #2
   28200:	400b      	ands	r3, r1
   28202:	4293      	cmp	r3, r2
   28204:	d003      	beq.n	2820e <__swsetup_r+0xa6>
   28206:	0021      	movs	r1, r4
   28208:	0030      	movs	r0, r6
   2820a:	f7ff f90f 	bl	2742c <__smakebuf_r>
   2820e:	2301      	movs	r3, #1
   28210:	89a2      	ldrh	r2, [r4, #12]
   28212:	4013      	ands	r3, r2
   28214:	d005      	beq.n	28222 <__swsetup_r+0xba>
   28216:	2300      	movs	r3, #0
   28218:	60a3      	str	r3, [r4, #8]
   2821a:	6963      	ldr	r3, [r4, #20]
   2821c:	425b      	negs	r3, r3
   2821e:	61a3      	str	r3, [r4, #24]
   28220:	e003      	b.n	2822a <__swsetup_r+0xc2>
   28222:	0792      	lsls	r2, r2, #30
   28224:	d400      	bmi.n	28228 <__swsetup_r+0xc0>
   28226:	6963      	ldr	r3, [r4, #20]
   28228:	60a3      	str	r3, [r4, #8]
   2822a:	2000      	movs	r0, #0
   2822c:	6923      	ldr	r3, [r4, #16]
   2822e:	4283      	cmp	r3, r0
   28230:	d107      	bne.n	28242 <__swsetup_r+0xda>
   28232:	220c      	movs	r2, #12
   28234:	5ea3      	ldrsh	r3, [r4, r2]
   28236:	061a      	lsls	r2, r3, #24
   28238:	d503      	bpl.n	28242 <__swsetup_r+0xda>
   2823a:	2240      	movs	r2, #64	; 0x40
   2823c:	4313      	orrs	r3, r2
   2823e:	81a3      	strh	r3, [r4, #12]
   28240:	3801      	subs	r0, #1
   28242:	bd70      	pop	{r4, r5, r6, pc}
   28244:	20000120 	.word	0x20000120
   28248:	0002eef4 	.word	0x0002eef4
   2824c:	0002ef14 	.word	0x0002ef14
   28250:	0002ef34 	.word	0x0002ef34

00028254 <_close_r>:
   28254:	2300      	movs	r3, #0
   28256:	b570      	push	{r4, r5, r6, lr}
   28258:	4c06      	ldr	r4, [pc, #24]	; (28274 <_close_r+0x20>)
   2825a:	0005      	movs	r5, r0
   2825c:	0008      	movs	r0, r1
   2825e:	6023      	str	r3, [r4, #0]
   28260:	f7dc feec 	bl	503c <_close>
   28264:	1c43      	adds	r3, r0, #1
   28266:	d103      	bne.n	28270 <_close_r+0x1c>
   28268:	6823      	ldr	r3, [r4, #0]
   2826a:	2b00      	cmp	r3, #0
   2826c:	d000      	beq.n	28270 <_close_r+0x1c>
   2826e:	602b      	str	r3, [r5, #0]
   28270:	bd70      	pop	{r4, r5, r6, pc}
   28272:	46c0      	nop			; (mov r8, r8)
   28274:	2000053c 	.word	0x2000053c

00028278 <_fstat_r>:
   28278:	2300      	movs	r3, #0
   2827a:	b570      	push	{r4, r5, r6, lr}
   2827c:	4c06      	ldr	r4, [pc, #24]	; (28298 <_fstat_r+0x20>)
   2827e:	0005      	movs	r5, r0
   28280:	0008      	movs	r0, r1
   28282:	0011      	movs	r1, r2
   28284:	6023      	str	r3, [r4, #0]
   28286:	f7dc fee3 	bl	5050 <_fstat>
   2828a:	1c43      	adds	r3, r0, #1
   2828c:	d103      	bne.n	28296 <_fstat_r+0x1e>
   2828e:	6823      	ldr	r3, [r4, #0]
   28290:	2b00      	cmp	r3, #0
   28292:	d000      	beq.n	28296 <_fstat_r+0x1e>
   28294:	602b      	str	r3, [r5, #0]
   28296:	bd70      	pop	{r4, r5, r6, pc}
   28298:	2000053c 	.word	0x2000053c

0002829c <_isatty_r>:
   2829c:	2300      	movs	r3, #0
   2829e:	b570      	push	{r4, r5, r6, lr}
   282a0:	4c06      	ldr	r4, [pc, #24]	; (282bc <_isatty_r+0x20>)
   282a2:	0005      	movs	r5, r0
   282a4:	0008      	movs	r0, r1
   282a6:	6023      	str	r3, [r4, #0]
   282a8:	f7dc fee0 	bl	506c <_isatty>
   282ac:	1c43      	adds	r3, r0, #1
   282ae:	d103      	bne.n	282b8 <_isatty_r+0x1c>
   282b0:	6823      	ldr	r3, [r4, #0]
   282b2:	2b00      	cmp	r3, #0
   282b4:	d000      	beq.n	282b8 <_isatty_r+0x1c>
   282b6:	602b      	str	r3, [r5, #0]
   282b8:	bd70      	pop	{r4, r5, r6, pc}
   282ba:	46c0      	nop			; (mov r8, r8)
   282bc:	2000053c 	.word	0x2000053c

000282c0 <_lseek_r>:
   282c0:	b570      	push	{r4, r5, r6, lr}
   282c2:	0005      	movs	r5, r0
   282c4:	0008      	movs	r0, r1
   282c6:	0011      	movs	r1, r2
   282c8:	2200      	movs	r2, #0
   282ca:	4c06      	ldr	r4, [pc, #24]	; (282e4 <_lseek_r+0x24>)
   282cc:	6022      	str	r2, [r4, #0]
   282ce:	001a      	movs	r2, r3
   282d0:	f7dc fed6 	bl	5080 <_lseek>
   282d4:	1c43      	adds	r3, r0, #1
   282d6:	d103      	bne.n	282e0 <_lseek_r+0x20>
   282d8:	6823      	ldr	r3, [r4, #0]
   282da:	2b00      	cmp	r3, #0
   282dc:	d000      	beq.n	282e0 <_lseek_r+0x20>
   282de:	602b      	str	r3, [r5, #0]
   282e0:	bd70      	pop	{r4, r5, r6, pc}
   282e2:	46c0      	nop			; (mov r8, r8)
   282e4:	2000053c 	.word	0x2000053c

000282e8 <_realloc_r>:
   282e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   282ea:	0006      	movs	r6, r0
   282ec:	000c      	movs	r4, r1
   282ee:	0015      	movs	r5, r2
   282f0:	2900      	cmp	r1, #0
   282f2:	d104      	bne.n	282fe <_realloc_r+0x16>
   282f4:	0011      	movs	r1, r2
   282f6:	f7fd fa6d 	bl	257d4 <_malloc_r>
   282fa:	0004      	movs	r4, r0
   282fc:	e018      	b.n	28330 <_realloc_r+0x48>
   282fe:	2a00      	cmp	r2, #0
   28300:	d103      	bne.n	2830a <_realloc_r+0x22>
   28302:	f7fd fa1b 	bl	2573c <_free_r>
   28306:	002c      	movs	r4, r5
   28308:	e012      	b.n	28330 <_realloc_r+0x48>
   2830a:	f000 f827 	bl	2835c <_malloc_usable_size_r>
   2830e:	4285      	cmp	r5, r0
   28310:	d90e      	bls.n	28330 <_realloc_r+0x48>
   28312:	0029      	movs	r1, r5
   28314:	0030      	movs	r0, r6
   28316:	f7fd fa5d 	bl	257d4 <_malloc_r>
   2831a:	1e07      	subs	r7, r0, #0
   2831c:	d007      	beq.n	2832e <_realloc_r+0x46>
   2831e:	0021      	movs	r1, r4
   28320:	002a      	movs	r2, r5
   28322:	f7fd f9e4 	bl	256ee <memcpy>
   28326:	0021      	movs	r1, r4
   28328:	0030      	movs	r0, r6
   2832a:	f7fd fa07 	bl	2573c <_free_r>
   2832e:	003c      	movs	r4, r7
   28330:	0020      	movs	r0, r4
   28332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028334 <_read_r>:
   28334:	b570      	push	{r4, r5, r6, lr}
   28336:	0005      	movs	r5, r0
   28338:	0008      	movs	r0, r1
   2833a:	0011      	movs	r1, r2
   2833c:	2200      	movs	r2, #0
   2833e:	4c06      	ldr	r4, [pc, #24]	; (28358 <_read_r+0x24>)
   28340:	6022      	str	r2, [r4, #0]
   28342:	001a      	movs	r2, r3
   28344:	f7dc fdfc 	bl	4f40 <_read>
   28348:	1c43      	adds	r3, r0, #1
   2834a:	d103      	bne.n	28354 <_read_r+0x20>
   2834c:	6823      	ldr	r3, [r4, #0]
   2834e:	2b00      	cmp	r3, #0
   28350:	d000      	beq.n	28354 <_read_r+0x20>
   28352:	602b      	str	r3, [r5, #0]
   28354:	bd70      	pop	{r4, r5, r6, pc}
   28356:	46c0      	nop			; (mov r8, r8)
   28358:	2000053c 	.word	0x2000053c

0002835c <_malloc_usable_size_r>:
   2835c:	1f0b      	subs	r3, r1, #4
   2835e:	681a      	ldr	r2, [r3, #0]
   28360:	1f10      	subs	r0, r2, #4
   28362:	2a00      	cmp	r2, #0
   28364:	da04      	bge.n	28370 <_malloc_usable_size_r+0x14>
   28366:	1889      	adds	r1, r1, r2
   28368:	3904      	subs	r1, #4
   2836a:	680b      	ldr	r3, [r1, #0]
   2836c:	18d0      	adds	r0, r2, r3
   2836e:	3804      	subs	r0, #4
   28370:	4770      	bx	lr
	...

00028374 <__gnu_thumb1_case_uqi>:
   28374:	b402      	push	{r1}
   28376:	4671      	mov	r1, lr
   28378:	0849      	lsrs	r1, r1, #1
   2837a:	0049      	lsls	r1, r1, #1
   2837c:	5c09      	ldrb	r1, [r1, r0]
   2837e:	0049      	lsls	r1, r1, #1
   28380:	448e      	add	lr, r1
   28382:	bc02      	pop	{r1}
   28384:	4770      	bx	lr
   28386:	46c0      	nop			; (mov r8, r8)

00028388 <__aeabi_dcmpun>:
   28388:	b570      	push	{r4, r5, r6, lr}
   2838a:	4e0e      	ldr	r6, [pc, #56]	; (283c4 <__aeabi_dcmpun+0x3c>)
   2838c:	030c      	lsls	r4, r1, #12
   2838e:	031d      	lsls	r5, r3, #12
   28390:	0049      	lsls	r1, r1, #1
   28392:	005b      	lsls	r3, r3, #1
   28394:	0b24      	lsrs	r4, r4, #12
   28396:	0d49      	lsrs	r1, r1, #21
   28398:	0b2d      	lsrs	r5, r5, #12
   2839a:	0d5b      	lsrs	r3, r3, #21
   2839c:	42b1      	cmp	r1, r6
   2839e:	d004      	beq.n	283aa <__aeabi_dcmpun+0x22>
   283a0:	4908      	ldr	r1, [pc, #32]	; (283c4 <__aeabi_dcmpun+0x3c>)
   283a2:	2000      	movs	r0, #0
   283a4:	428b      	cmp	r3, r1
   283a6:	d008      	beq.n	283ba <__aeabi_dcmpun+0x32>
   283a8:	bd70      	pop	{r4, r5, r6, pc}
   283aa:	4304      	orrs	r4, r0
   283ac:	2001      	movs	r0, #1
   283ae:	2c00      	cmp	r4, #0
   283b0:	d1fa      	bne.n	283a8 <__aeabi_dcmpun+0x20>
   283b2:	4904      	ldr	r1, [pc, #16]	; (283c4 <__aeabi_dcmpun+0x3c>)
   283b4:	2000      	movs	r0, #0
   283b6:	428b      	cmp	r3, r1
   283b8:	d1f6      	bne.n	283a8 <__aeabi_dcmpun+0x20>
   283ba:	4315      	orrs	r5, r2
   283bc:	0028      	movs	r0, r5
   283be:	1e45      	subs	r5, r0, #1
   283c0:	41a8      	sbcs	r0, r5
   283c2:	e7f1      	b.n	283a8 <__aeabi_dcmpun+0x20>
   283c4:	000007ff 	.word	0x000007ff
   283c8:	61480a0a 	.word	0x61480a0a
   283cc:	66206472 	.word	0x66206472
   283d0:	746c7561 	.word	0x746c7561
   283d4:	6e616820 	.word	0x6e616820
   283d8:	72656c64 	.word	0x72656c64
   283dc:	6c612820 	.word	0x6c612820
   283e0:	756e206c 	.word	0x756e206c
   283e4:	7265626d 	.word	0x7265626d
   283e8:	6e692073 	.word	0x6e692073
   283ec:	78656820 	.word	0x78656820
   283f0:	000a3a29 	.word	0x000a3a29
   283f4:	3d203052 	.word	0x3d203052
   283f8:	0a782520 	.word	0x0a782520
   283fc:	00000000 	.word	0x00000000
   28400:	3d203152 	.word	0x3d203152
   28404:	0a782520 	.word	0x0a782520
   28408:	00000000 	.word	0x00000000
   2840c:	3d203252 	.word	0x3d203252
   28410:	0a782520 	.word	0x0a782520
   28414:	00000000 	.word	0x00000000
   28418:	3d203352 	.word	0x3d203352
   2841c:	0a782520 	.word	0x0a782520
   28420:	00000000 	.word	0x00000000
   28424:	20323152 	.word	0x20323152
   28428:	7825203d 	.word	0x7825203d
   2842c:	0000000a 	.word	0x0000000a
   28430:	5b20524c 	.word	0x5b20524c
   28434:	5d343152 	.word	0x5d343152
   28438:	25203d20 	.word	0x25203d20
   2843c:	73202078 	.word	0x73202078
   28440:	6f726275 	.word	0x6f726275
   28444:	6e697475 	.word	0x6e697475
   28448:	61632065 	.word	0x61632065
   2844c:	72206c6c 	.word	0x72206c6c
   28450:	72757465 	.word	0x72757465
   28454:	6461206e 	.word	0x6461206e
   28458:	73657264 	.word	0x73657264
   2845c:	00000a73 	.word	0x00000a73
   28460:	5b204350 	.word	0x5b204350
   28464:	5d353152 	.word	0x5d353152
   28468:	25203d20 	.word	0x25203d20
   2846c:	70202078 	.word	0x70202078
   28470:	72676f72 	.word	0x72676f72
   28474:	63206d61 	.word	0x63206d61
   28478:	746e756f 	.word	0x746e756f
   2847c:	000a7265 	.word	0x000a7265
   28480:	20525350 	.word	0x20525350
   28484:	7825203d 	.word	0x7825203d
   28488:	0000000a 	.word	0x0000000a
   2848c:	52534643 	.word	0x52534643
   28490:	25203d20 	.word	0x25203d20
   28494:	00000a78 	.word	0x00000a78
   28498:	52534648 	.word	0x52534648
   2849c:	25203d20 	.word	0x25203d20
   284a0:	00000a78 	.word	0x00000a78
   284a4:	52534644 	.word	0x52534644
   284a8:	25203d20 	.word	0x25203d20
   284ac:	00000a78 	.word	0x00000a78
   284b0:	52534641 	.word	0x52534641
   284b4:	25203d20 	.word	0x25203d20
   284b8:	00000a78 	.word	0x00000a78
   284bc:	52414d4d 	.word	0x52414d4d
   284c0:	25203d20 	.word	0x25203d20
   284c4:	00000a78 	.word	0x00000a78
   284c8:	52414642 	.word	0x52414642
   284cc:	25203d20 	.word	0x25203d20
   284d0:	00000a78 	.word	0x00000a78
   284d4:	7972430a 	.word	0x7972430a
   284d8:	54207470 	.word	0x54207470
   284dc:	20747365 	.word	0x20747365
   284e0:	0a3a6425 	.word	0x0a3a6425
   284e4:	00000000 	.word	0x00000000
   284e8:	70797243 	.word	0x70797243
   284ec:	65542074 	.word	0x65542074
   284f0:	25207473 	.word	0x25207473
   284f4:	52203a64 	.word	0x52203a64
   284f8:	72757465 	.word	0x72757465
   284fc:	6f63206e 	.word	0x6f63206e
   28500:	25206564 	.word	0x25206564
   28504:	00000a64 	.word	0x00000a64
   28508:	6e65420a 	.word	0x6e65420a
   2850c:	616d6863 	.word	0x616d6863
   28510:	54206b72 	.word	0x54206b72
   28514:	20747365 	.word	0x20747365
   28518:	0a3a6425 	.word	0x0a3a6425
   2851c:	00000000 	.word	0x00000000
   28520:	636e6542 	.word	0x636e6542
   28524:	72616d68 	.word	0x72616d68
   28528:	6554206b 	.word	0x6554206b
   2852c:	25207473 	.word	0x25207473
   28530:	52203a64 	.word	0x52203a64
   28534:	72757465 	.word	0x72757465
   28538:	6f63206e 	.word	0x6f63206e
   2853c:	25206564 	.word	0x25206564
   28540:	00000a64 	.word	0x00000a64
   28544:	656d7441 	.word	0x656d7441
   28548:	4153206c 	.word	0x4153206c
   2854c:	3132444d 	.word	0x3132444d
   28550:	6c6f7720 	.word	0x6c6f7720
   28554:	79724366 	.word	0x79724366
   28558:	54207470 	.word	0x54207470
   2855c:	2f747365 	.word	0x2f747365
   28560:	636e6542 	.word	0x636e6542
   28564:	72616d68 	.word	0x72616d68
   28568:	000a0d6b 	.word	0x000a0d6b
   2856c:	42000800 	.word	0x42000800
   28570:	42000c00 	.word	0x42000c00
   28574:	42001000 	.word	0x42001000
   28578:	42001400 	.word	0x42001400
   2857c:	42001800 	.word	0x42001800
   28580:	42001c00 	.word	0x42001c00
   28584:	0c0b0a09 	.word	0x0c0b0a09
   28588:	00000e0d 	.word	0x00000e0d

0002858c <tcc_modules>:
   2858c:	42002000 42002400 42002800              . .B.$.B.(.B

00028598 <_tcc_gclk_ids>:
   28598:	001b1a1a                                ....

0002859c <_tcc_apbcmasks>:
   2859c:	00000100 00000200 00000400              ............

000285a8 <_tcc_maxs>:
   285a8:	00ffffff 00ffffff 0000ffff              ............

000285b4 <_tcc_cc_nums>:
   285b4:	00020204                                ....

000285b8 <_tcc_ow_nums>:
   285b8:	00020408                                ....

000285bc <_tcc_intflag>:
   285bc:	00000001 00000002 00000004 00000008     ................
   285cc:	00001000 00002000 00004000 00008000     ..... ...@......
   285dc:	00010000 00020000 00040000 00080000     ................
   285ec:	00004152 000041ca 000041ca 00004170     RA...A...A..pA..
   285fc:	0000416a 00004176 00004158 0000417c     jA..vA..XA..|A..
   2860c:	000041b0 0000448c 000044dc 000044dc     .A...D...D...D..
   2861c:	000044d8 0000447e 0000449e 0000446e     .D..~D...D..nD..
   2862c:	000044b0 000044c2 00004526 00004554     .D...D..&E..TE..
   2863c:	00004554 00004550 00004520 0000452c     TE..PE.. E..,E..
   2864c:	0000451a 00004532 00004538              .E..2E..8E..

00028658 <base64Decode>:
   28658:	ffffff3e 3635343f 3a393837 ff3d3c3b     >...?456789:;<=.
   28668:	ffffffff 0100ffff 05040302 09080706     ................
   28678:	0d0c0b0a 11100f0e 15141312 19181716     ................
   28688:	ffffffff 1b1affff 1f1e1d1c 23222120     ............ !"#
   28698:	27262524 2b2a2928 2f2e2d2c 33323130     $%&'()*+,-./0123
   286a8:	6e65706f 20676e69 646e6172 64206d6f     opening random d
   286b8:	63697665 72652065 00726f72 64616572     evice error.read
   286c8:	20676e69 646e6172 64206d6f 63697665     ing random devic
   286d8:	72652065 00726f72 646e6977 2073776f     e error.windows 
   286e8:	70797263 6e692074 65207469 726f7272     crypt init error
   286f8:	00000000 646e6977 2073776f 70797263     ....windows cryp
   28708:	65672074 6172656e 6e6f6974 72726520     t generation err
   28718:	0000726f 646e6172 64206d6f 63697665     or..random devic
   28728:	65722065 77206461 646c756f 6f6c6220     e read would blo
   28738:	65206b63 726f7272 00000000 20646142     ck error....Bad 
   28748:	6574756d 6f202c78 61726570 6e6f6974     mutex, operation
   28758:	69616620 0064656c 656d6954 2074756f      failed.Timeout 
   28768:	6f727265 00000072 666c6f77 70797243     error...wolfCryp
   28778:	704f2074 74617265 206e6f69 646e6550     t Operation Pend
   28788:	20676e69 756f7728 6220646c 6b636f6c     ing (would block
   28798:	65202f20 69616761 6520296e 726f7272      / eagain) error
   287a8:	00000000 666c6f77 70797243 706f2074     ....wolfCrypt op
   287b8:	74617265 206e6f69 20746f6e 646e6570     eration not pend
   287c8:	20676e69 6f727265 00000072 695f706d     ing error...mp_i
   287d8:	2074696e 6f727265 74732072 00657461     nit error state.
   287e8:	725f706d 20646165 6f727265 74732072     mp_read error st
   287f8:	00657461 655f706d 6d747078 6520646f     ate.mp_exptmod e
   28808:	726f7272 61747320 00006574 745f706d     rror state..mp_t
   28818:	78785f6f 72652078 20726f72 74617473     o_xxx error stat
   28828:	63202c65 74276e61 6e6f6320 74726576     e, can't convert
   28838:	00000000 735f706d 65206275 726f7272     ....mp_sub error
   28848:	61747320 202c6574 276e6163 75732074      state, can't su
   28858:	61727462 00007463 615f706d 65206464     btract..mp_add e
   28868:	726f7272 61747320 202c6574 276e6163     rror state, can'
   28878:	64612074 00000064 6d5f706d 65206c75     t add...mp_mul e
   28888:	726f7272 61747320 202c6574 276e6163     rror state, can'
   28898:	756d2074 7069746c 0000796c 6d5f706d     t multiply..mp_m
   288a8:	6f6d6c75 72652064 20726f72 74617473     ulmod error stat
   288b8:	63202c65 74276e61 6c756d20 6c706974     e, can't multipl
   288c8:	6f6d2079 00000064 6d5f706d 6520646f     y mod...mp_mod e
   288d8:	726f7272 61747320 202c6574 276e6163     rror state, can'
   288e8:	6f6d2074 00000064 695f706d 6f6d766e     t mod...mp_invmo
   288f8:	72652064 20726f72 74617473 63202c65     d error state, c
   28908:	74276e61 766e6920 646f6d20 00000000     an't inv mod....
   28918:	635f706d 6520706d 726f7272 61747320     mp_cmp error sta
   28928:	00006574 7a20706d 206f7265 75736572     te..mp zero resu
   28938:	202c746c 20746f6e 65707865 64657463     lt, not expected
   28948:	00000000 2074756f 6d20666f 726f6d65     ....out of memor
   28958:	72652079 00726f72 69726156 656c6261     y error.Variable
   28968:	61747320 6d206574 6669646f 20646569      state modified 
   28978:	64207962 65666669 746e6572 72687420     by different thr
   28988:	00646165 20415352 6e6f7277 6c622067     ead.RSA wrong bl
   28998:	206b636f 65707974 726f6620 41535220     ock type for RSA
   289a8:	6e756620 6f697463 0000006e 20415352      function...RSA 
   289b8:	66667562 65207265 726f7272 756f202c     buffer error, ou
   289c8:	74757074 6f6f7420 616d7320 6f206c6c     tput too small o
   289d8:	6e692072 20747570 206f6f74 00676962     r input too big.
   289e8:	66667542 65207265 726f7272 756f202c     Buffer error, ou
   289f8:	74757074 6f6f7420 616d7320 6f206c6c     tput too small o
   28a08:	6e692072 20747570 206f6f74 00676962     r input too big.
   28a18:	74746553 20676e69 74726543 676c4120     Setting Cert Alg
   28a28:	2044496f 6f727265 00000072 74746553     oID error...Sett
   28a38:	20676e69 74726543 62755020 2063696c     ing Cert Public 
   28a48:	2079654b 6f727265 00000072 74746553     Key error...Sett
   28a58:	20676e69 74726543 74614420 61762065     ing Cert Date va
   28a68:	6964696c 65207974 726f7272 00000000     lidity error....
   28a78:	74746553 20676e69 74726543 62755320     Setting Cert Sub
   28a88:	7463656a 6d616e20 72652065 00726f72     ject name error.
   28a98:	74746553 20676e69 74726543 73734920     Setting Cert Iss
   28aa8:	20726575 656d616e 72726520 0000726f     uer name error..
   28ab8:	74746553 20676e69 69736162 6f632063     Setting basic co
   28ac8:	7274736e 746e6961 20414320 65757274     nstraint CA true
   28ad8:	72726520 0000726f 74746553 20676e69      error..Setting 
   28ae8:	65747865 6f69736e 6520736e 726f7272     extensions error
   28af8:	00000000 204e5341 73726170 20676e69     ....ASN parsing 
   28b08:	6f727265 69202c72 6c61766e 69206469     error, invalid i
   28b18:	7475706e 00000000 204e5341 73726576     nput....ASN vers
   28b28:	206e6f69 6f727265 69202c72 6c61766e     ion error, inval
   28b38:	6e206469 65626d75 00000072 204e5341     id number...ASN 
   28b48:	20746567 20676962 20746e69 6f727265     get big int erro
   28b58:	69202c72 6c61766e 64206469 00617461     r, invalid data.
   28b68:	204e5341 2079656b 74696e69 72726520     ASN key init err
   28b78:	202c726f 61766e69 2064696c 75706e69     or, invalid inpu
   28b88:	00000074 204e5341 656a626f 69207463     t...ASN object i
   28b98:	72652064 2c726f72 766e6920 64696c61     d error, invalid
   28ba8:	00646920 204e5341 20676174 6f727265      id.ASN tag erro
   28bb8:	6e202c72 6e20746f 006c6c75 204e5341     r, not null.ASN 
   28bc8:	65707865 65207463 726f7272 6f6e202c     expect error, no
   28bd8:	657a2074 00006f72 204e5341 20746962     t zero..ASN bit 
   28be8:	69727473 6520676e 726f7272 7277202c     string error, wr
   28bf8:	20676e6f 00006469 204e5341 2064696f     ong id..ASN oid 
   28c08:	6f727265 75202c72 6f6e6b6e 73206e77     error, unknown s
   28c18:	69206d75 00000064 204e5341 65746164     um id...ASN date
   28c28:	72726520 202c726f 20646162 657a6973      error, bad size
   28c38:	00000000 204e5341 65746164 72726520     ....ASN date err
   28c48:	202c726f 72727563 20746e65 65746164     or, current date
   28c58:	66656220 0065726f 204e5341 65746164      before.ASN date
   28c68:	72726520 202c726f 72727563 20746e65      error, current 
   28c78:	65746164 74666120 00007265 204e5341     date after..ASN 
   28c88:	6e676973 72757461 72652065 2c726f72     signature error,
   28c98:	73696d20 6374616d 20646568 0064696f      mismatched oid.
   28ca8:	204e5341 656d6974 72726520 202c726f     ASN time error, 
   28cb8:	6e6b6e75 206e776f 656d6974 70797420     unknown time typ
   28cc8:	00000065 204e5341 75706e69 72652074     e...ASN input er
   28cd8:	2c726f72 746f6e20 6f6e6520 20686775     ror, not enough 
   28ce8:	61746164 00000000 204e5341 20676973     data....ASN sig 
   28cf8:	6f727265 63202c72 69666e6f 66206d72     error, confirm f
   28d08:	756c6961 00006572 204e5341 20676973     ailure..ASN sig 
   28d18:	6f727265 75202c72 7075736e 74726f70     error, unsupport
   28d28:	68206465 20687361 65707974 00000000     ed hash type....
   28d38:	204e5341 20676973 6f727265 75202c72     ASN sig error, u
   28d48:	7075736e 74726f70 6b206465 74207965     nsupported key t
   28d58:	00657079 204e5341 5552544e 79656b20     ype.ASN NTRU key
   28d68:	63656420 2065646f 6f727265 69202c72      decode error, i
   28d78:	6c61766e 69206469 7475706e 00000000     nvalid input....
   28d88:	30352e58 72432039 63697469 65206c61     X.509 Critical e
   28d98:	6e657478 6e6f6973 6e676920 6465726f     xtension ignored
   28da8:	20726f20 61766e69 0064696c 204e5341      or invalid.ASN 
   28db8:	65746c61 74616e72 616e2065 6520656d     alternate name e
   28dc8:	726f7272 00000000 20434345 75706e69     rror....ECC inpu
   28dd8:	72612074 656d7567 7720746e 676e6f72     t argument wrong
   28de8:	70797420 69202c65 6c61766e 69206469      type, invalid i
   28df8:	7475706e 00000000 20434345 314e5341     nput....ECC ASN1
   28e08:	64616220 79656b20 74616420 69202c61      bad key data, i
   28e18:	6c61766e 69206469 7475706e 00000000     nvalid input....
   28e28:	20434345 76727563 75732065 494f206d     ECC curve sum OI
   28e38:	6e752044 70707573 6574726f 69202c64     D unsupported, i
   28e48:	6c61766e 69206469 7475706e 00000000     nvalid input....
   28e58:	20646142 636e7566 6e6f6974 67726120     Bad function arg
   28e68:	6e656d75 00000074 74616546 20657275     ument...Feature 
   28e78:	20746f6e 706d6f63 64656c69 006e6920     not compiled in.
   28e88:	63696e55 2065646f 73736170 64726f77     Unicode password
   28e98:	6f6f7420 67696220 00000000 70206f4e      too big....No p
   28ea8:	77737361 2064726f 766f7270 64656469     assword provided
   28eb8:	20796220 72657375 00000000 20746c41      by user....Alt 
   28ec8:	656d614e 6f727020 6d656c62 6f74202c     Name problem, to
   28ed8:	6962206f 00000067 2d534541 204d4347     o big...AES-GCM 
   28ee8:	68747541 69746e65 69746163 63206e6f     Authentication c
   28ef8:	6b636568 69616620 0000006c 2d534541     heck fail...AES-
   28f08:	204d4343 68747541 69746e65 69746163     CCM Authenticati
   28f18:	63206e6f 6b636568 69616620 0000006c     on check fail...
   28f28:	6e797341 6e492063 65207469 726f7272     Async Init error
   28f38:	00000000 706d6f43 73736572 696e4920     ....Compress Ini
   28f48:	72652074 00726f72 706d6f43 73736572     t error.Compress
   28f58:	72726520 0000726f 6f436544 6572706d      error..DeCompre
   28f68:	49207373 2074696e 6f727265 00000072     ss Init error...
   28f78:	6f436544 6572706d 65207373 726f7272     DeCompress error
   28f88:	00000000 20646142 67696c61 6e656d6e     ....Bad alignmen
   28f98:	72652074 2c726f72 206f6e20 6f6c6c61     t error, no allo
   28fa8:	65682063 0000706c 204e5341 73206f6e     c help..ASN no s
   28fb8:	656e6769 72652072 20726f72 63206f74     igner error to c
   28fc8:	69666e6f 66206d72 756c6961 00006572     onfirm failure..
   28fd8:	204e5341 204c5243 20676973 6f727265     ASN CRL sig erro
   28fe8:	63202c72 69666e6f 66206d72 756c6961     r, confirm failu
   28ff8:	00006572 204e5341 204c5243 73206f6e     re..ASN CRL no s
   29008:	656e6769 72652072 20726f72 63206f74     igner error to c
   29018:	69666e6f 66206d72 756c6961 00006572     onfirm failure..
   29028:	204e5341 5053434f 67697320 72726520     ASN OCSP sig err
   29038:	202c726f 666e6f63 206d7269 6c696166     or, confirm fail
   29048:	00657275 204e5341 50206f6e 48204d45     ure.ASN no PEM H
   29058:	65646165 72452072 00726f72 20646142     eader Error.Bad 
   29068:	74617473 706f2065 74617265 006e6f69     state operation.
   29078:	20646142 64646170 2c676e69 73656d20     Bad padding, mes
   29088:	65676173 6f727720 6c20676e 74676e65     sage wrong lengt
   29098:	00000068 74746553 20676e69 74726563     h...Setting cert
   290a8:	71657220 74736575 74746120 75626972      request attribu
   290b8:	20736574 6f727265 00000072 53434b50     tes error...PKCS
   290c8:	65203723 726f7272 696d203a 74616d73     #7 error: mismat
   290d8:	64656863 44494f20 6c617620 00006575     ched OID value..
   290e8:	53434b50 65203723 726f7272 6f6e203a     PKCS#7 error: no
   290f8:	74616d20 6e696863 65722067 69706963      matching recipi
   29108:	20746e65 6e756f66 00000064 53434b50     ent found...PKCS
   29118:	6f203723 61726570 6e6f6974 61772073     #7 operations wa
   29128:	2073746e 65726f6d 706e6920 202c7475     nts more input, 
   29138:	6c6c6163 61676120 00006e69 53504946     call again..FIPS
   29148:	646f6d20 6f6e2065 6c612074 65776f6c      mode not allowe
   29158:	72652064 00726f72 656d614e 6e6f4320     d error.Name Con
   29168:	61727473 20746e69 6f727265 00000072     straint error...
   29178:	646e6152 4e206d6f 65626d75 65472072     Random Number Ge
   29188:	6172656e 20726f74 6c696166 00006465     nerator failed..
   29198:	53504946 646f4d20 4d482065 4d204341     FIPS Mode HMAC M
   291a8:	6d696e69 4b206d75 4c207965 74676e65     inimum Key Lengt
   291b8:	72652068 00726f72 20617352 64646150     h error.Rsa Padd
   291c8:	20676e69 6f727265 00000072 7074754f     ing error...Outp
   291d8:	6c207475 74676e65 6e6f2068 7320796c     ut length only s
   291e8:	202c7465 20746f6e 20726f66 6568746f     et, not for othe
   291f8:	73752072 72652065 00726f72 43206e49     r use error.In C
   29208:	2065726f 65746e49 74697267 68632079     ore Integrity ch
   29218:	206b6365 53504946 72726520 0000726f     eck FIPS error..
   29228:	20534541 776f6e4b 6e41206e 72657773     AES Known Answer
   29238:	73655420 68632074 206b6365 53504946      Test check FIPS
   29248:	72726520 0000726f 33534544 6f6e4b20      error..DES3 Kno
   29258:	41206e77 6577736e 65542072 63207473     wn Answer Test c
   29268:	6b636568 50494620 72652053 00726f72     heck FIPS error.
   29278:	43414d48 6f6e4b20 41206e77 6577736e     HMAC Known Answe
   29288:	65542072 63207473 6b636568 50494620     r Test check FIP
   29298:	72652053 00726f72 20415352 776f6e4b     S error.RSA Know
   292a8:	6e41206e 72657773 73655420 68632074     n Answer Test ch
   292b8:	206b6365 53504946 72726520 0000726f     eck FIPS error..
   292c8:	47425244 6f6e4b20 41206e77 6577736e     DRBG Known Answe
   292d8:	65542072 63207473 6b636568 50494620     r Test check FIP
   292e8:	72652053 00726f72 47425244 6e6f4320     S error.DRBG Con
   292f8:	756e6974 2073756f 74736554 50494620     tinuous Test FIP
   29308:	72652053 00726f72 47534541 4b204d43     S error.AESGCM K
   29318:	6e776f6e 736e4120 20726577 74736554     nown Answer Test
   29328:	65686320 46206b63 20535049 6f727265      check FIPS erro
   29338:	00000072 65726854 53206461 61726f74     r...Thread Stora
   29348:	4b206567 43207965 74616572 72652065     ge Key Create er
   29358:	00726f72 65726854 53206461 61726f74     ror.Thread Stora
   29368:	53206567 65207465 726f7272 00000000     ge Set error....
   29378:	2043414d 706d6f63 73697261 66206e6f     MAC comparison f
   29388:	656c6961 00000064 20434345 70207369     ailed...ECC is p
   29398:	746e696f 206e6f20 76727563 61662065     oint on curve fa
   293a8:	64656c69 00000000 43434520 696f7020     iled.... ECC poi
   293b8:	6120746e 6e692074 696e6966 65207974     nt at infinity e
   293c8:	726f7272 00000000 43434520 20785120     rror.... ECC Qx 
   293d8:	5120726f 756f2079 666f2074 6e617220     or Qy out of ran
   293e8:	65206567 726f7272 00000000 43434520     ge error.... ECC
   293f8:	69727020 65746176 79656b20 20736920      private key is 
   29408:	20746f6e 696c6176 72652064 00726f72     not valid error.
   29418:	20505253 636e7566 6e6f6974 6c616320     SRP function cal
   29428:	2064656c 74206e69 77206568 676e6f72     led in the wrong
   29438:	64726f20 65207265 726f7272 00000000      order error....
   29448:	20505253 6f6f7270 65762066 69666972     SRP proof verifi
   29458:	69746163 65206e6f 726f7272 00000000     cation error....
   29468:	20505253 20646162 2079656b 756c6176     SRP bad key valu
   29478:	65207365 726f7272 00000000 204e5341     es error....ASN 
   29488:	53206f6e 656a6275 4b207463 49207965     no Subject Key I
   29498:	746e6564 65696669 6f662072 20646e75     dentifier found 
   294a8:	6f727265 00000072 204e5341 41206f6e     error...ASN no A
   294b8:	6f687475 79746972 79654b20 65644920     uthority Key Ide
   294c8:	6669746e 20726569 6e756f66 72652064     ntifier found er
   294d8:	00726f72 204e5341 4b206f6e 55207965     ror.ASN no Key U
   294e8:	65676173 756f6620 6520646e 726f7272     sage found error
   294f8:	00000000 74746553 20676e69 6a627553     ....Setting Subj
   29508:	20746365 2079654b 6e656449 69666974     ect Key Identifi
   29518:	65207265 726f7272 00000000 74746553     er error....Sett
   29528:	20676e69 68747541 7469726f 654b2079     ing Authority Ke
   29538:	64492079 69746e65 72656966 72726520     y Identifier err
   29548:	0000726f 2079654b 67617355 61762065     or..Key Usage va
   29558:	2065756c 6f727265 00000072 65747845     lue error...Exte
   29568:	6465646e 79654b20 61735520 76206567     nded Key Usage v
   29578:	65756c61 72726520 0000726f 74746553     alue error..Sett
   29588:	20676e69 74726543 63696669 20657461     ing Certificate 
   29598:	696c6f50 73656963 72726520 0000726f     Policies error..
   295a8:	666c6f77 70797243 6e492074 61697469     wolfCrypt Initia
   295b8:	657a696c 69614620 6572756c 72726520     lize Failure err
   295c8:	0000726f 6e676953 72757461 65762065     or..Signature ve
   295d8:	79666972 72726520 0000726f 20646142     rify error..Bad 
   295e8:	646e6f63 6f697469 6176206e 62616972     condition variab
   295f8:	6f20656c 61726570 6e6f6974 72726520     le operation err
   29608:	0000726f 6e676953 72757461 79742065     or..Signature ty
   29618:	6e206570 6520746f 6c62616e 612f6465     pe not enabled/a
   29628:	6c696176 656c6261 00000000 68736148     vailable....Hash
   29638:	70797420 6f6e2065 6e652074 656c6261      type not enable
   29648:	76612f64 616c6961 00656c62 2079654b     d/available.Key 
   29658:	657a6973 72726520 202c726f 68746965     size error, eith
   29668:	74207265 73206f6f 6c6c616d 20726f20     er too small or 
   29678:	6772616c 00000065 6e756f43 20797274     large...Country 
   29688:	65646f63 7a697320 72652065 2c726f72     code size error,
   29698:	74696520 20726568 206f6f74 6c616d73      either too smal
   296a8:	726f206c 72616c20 00006567 20474e52     l or large..RNG 
   296b8:	75716572 64657269 74756220 746f6e20     required but not
   296c8:	6f727020 65646976 00000064 204e5341      provided...ASN 
   296d8:	70204143 20687461 676e656c 76206874     CA path length v
   296e8:	65756c61 6f6f7420 72616c20 65206567     alue too large e
   296f8:	726f7272 00000000 204e5341 70204143     rror....ASN CA p
   29708:	20687461 676e656c 6c206874 65677261     ath length large
   29718:	68742072 73206e61 656e6769 72652072     r than signer er
   29728:	00726f72 75736e55 726f7070 20646574     ror.Unsupported 
   29738:	2079656b 70617277 676c6120 7469726f     key wrap algorit
   29748:	65206d68 726f7272 00000000 72636544     hm error....Decr
   29758:	65747079 45412064 656b2053 72772079     ypted AES key wr
   29768:	49207061 6f642056 6e207365 6d20746f     ap IV does not m
   29778:	68637461 70786520 65746365 00000064     atch expected...
   29788:	666c6f77 70797263 6c632074 756e6165     wolfcrypt cleanu
   29798:	61662070 64656c69 00000000 666c6f77     p failed....wolf
   297a8:	70797263 49462074 45205350 43204343     crypt FIPS ECC C
   297b8:	4b204844 6e776f6e 736e4120 20726577     DH Known Answer 
   297c8:	74736554 69614620 6572756c 00000000     Test Failure....
   297d8:	43204844 6b636568 62755020 2063696c     DH Check Public 
   297e8:	2079654b 6c696166 00657275 20646142     Key failure.Bad 
   297f8:	68746170 726f6620 65706f20 7269646e     path for opendir
   29808:	72726520 0000726f 6e797341 706f2063      error..Async op
   29818:	74617265 206e6f69 6f727265 00000072     eration error...
   29828:	61766e49 2064696c 5053434f 73655220     Invalid OCSP Res
   29838:	646e6f70 202c7265 7373696d 20676e69     ponder, missing 
   29848:	63657073 63696669 79656b20 61737520     specific key usa
   29858:	65206567 6e657478 6e6f6973 00000073     ge extensions...
   29868:	61766e49 2064696c 20657375 7020666f     Invalid use of p
   29878:	61766972 6f206574 20796c6e 20434345     rivate only ECC 
   29888:	0079656b 6f727245 69772072 68206874     key.Error with h
   29898:	77647261 20657261 70797263 75206f74     ardware crypto u
   298a8:	00006573 64726148 65726177 69617720     se..Hardware wai
   298b8:	676e6974 206e6f20 6f736572 65637275     ting on resource
   298c8:	00000000 20535350 654c202d 6874676e     ....PSS - Length
   298d8:	20666f20 746c6173 20736920 206f6f74      of salt is too 
   298e8:	20676962 20726f66 68736168 676c6120     big for hash alg
   298f8:	7469726f 00006d68 62616e55 7420656c     orithm..Unable t
   29908:	6966206f 6120646e 69727020 6620656d     o find a prime f
   29918:	5220726f 6b204153 00007965 62616e55     or RSA key..Unab
   29928:	7420656c 6564206f 65646f63 206e6120     le to decode an 
   29938:	65646e69 696e6966 6c206574 74676e65     indefinite lengt
   29948:	6e652068 65646f63 656d2064 67617373     h encoded messag
   29958:	00000065 68706943 65747265 74207478     e...Ciphertext t
   29968:	6564206f 70797263 73692074 74756f20     o decrypt is out
   29978:	20666f20 676e6172 00000065 666c6f77      of range...wolf
   29988:	70797263 49462074 52205350 502d4153     crypt FIPS RSA-P
   29998:	50205353 77726961 20657369 65726741     SS Pairwise Agre
   299a8:	6e656d65 65542074 46207473 756c6961     ement Test Failu
   299b8:	00006572 666c6f77 70797263 49462074     re..wolfcrypt FI
   299c8:	45205350 41534443 69615020 73697772     PS ECDSA Pairwis
   299d8:	67412065 6d656572 20746e65 74736554     e Agreement Test
   299e8:	69614620 6572756c 00000000 666c6f77      Failure....wolf
   299f8:	70797263 49462074 44205350 6e4b2048     crypt FIPS DH Kn
   29a08:	206e776f 77736e41 54207265 20747365     own Answer Test 
   29a18:	6c696146 00657275 43534541 4b204d43     Failure.AESCCM K
   29a28:	6e776f6e 736e4120 20726577 74736554     nown Answer Test
   29a38:	65686320 46206b63 20535049 6f727265      check FIPS erro
   29a48:	00000072 2d414853 6e4b2033 206e776f     r...SHA-3 Known 
   29a58:	77736e41 54207265 20747365 63656863     Answer Test chec
   29a68:	4946206b 65205350 726f7272 00000000     k FIPS error....
   29a78:	666c6f77 70797263 49462074 45205350     wolfcrypt FIPS E
   29a88:	45484443 6f6e4b20 41206e77 6577736e     CDHE Known Answe
   29a98:	65542072 46207473 756c6961 00006572     r Test Failure..
   29aa8:	2d534541 204d4347 6f766e69 69746163     AES-GCM invocati
   29ab8:	63206e6f 746e756f 6f207265 66726576     on counter overf
   29ac8:	00776f6c 2d534541 204d4343 6f766e69     low.AES-CCM invo
   29ad8:	69746163 63206e6f 746e756f 6f207265     cation counter o
   29ae8:	66726576 00776f6c 20415352 2079654b     verflow.RSA Key 
   29af8:	72696150 7369572d 6f432065 7369736e     Pair-Wise Consis
   29b08:	636e6574 68632079 206b6365 6c696166     tency check fail
   29b18:	00000000 43204844 6b636568 69725020     ....DH Check Pri
   29b28:	65746176 79654b20 69616620 6572756c     vate Key failure
   29b38:	00000000 415f4641 7320474c 656b636f     ....AF_ALG socke
   29b48:	72652074 00726f72 6f727245 69772072     t error.Error wi
   29b58:	2f206874 2f766564 70797263 00006f74     th /dev/crypto..
   29b68:	62696c7a 696e6920 72652074 00726f72     zlib init error.
   29b78:	62696c7a 6d6f6320 73657270 72652073     zlib compress er
   29b88:	00726f72 62696c7a 63656420 72706d6f     ror.zlib decompr
   29b98:	20737365 6f727265 00000072 73206f4e     ess error...No s
   29ba8:	656e6769 6e692072 434b5020 20372353     igner in PKCS#7 
   29bb8:	6e676973 64206465 00617461 70797243     signed data.Cryp
   29bc8:	63206f74 626c6c61 206b6361 76616e75     to callback unav
   29bd8:	616c6961 00656c62 6e6b6e75 206e776f     ailable.unknown 
   29be8:	6f727265 756e2072 7265626d 00000000     error number....
   29bf8:	00005996 0000586e 00005992 0000598e     .Y..nX...Y...Y..
   29c08:	0000598a 00005986 00005982 0000597e     .Y...Y...Y..~Y..
   29c18:	0000597a 00005976 00005972 0000596e     zY..vY..rY..nY..
   29c28:	0000596a 00005966 00005962 0000595e     jY..fY..bY..^Y..
   29c38:	0000595a 00005956 00005952 0000594e     ZY..VY..RY..NY..
   29c48:	0000594a 00005946 00005942 0000593e     JY..FY..BY..>Y..
   29c58:	000058ea 0000593a 00005932 0000592e     .X..:Y..2Y...Y..
   29c68:	0000592a 00005926 00005922 0000591e     *Y..&Y.."Y...Y..
   29c78:	0000591a 00005916 00005912 0000590e     .Y...Y...Y...Y..
   29c88:	0000590a 00005906 0000599a 00005902     .Y...Y...Y...Y..
   29c98:	000058fe 000058fa 000058f6 000058f2     .X...X...X...X..
   29ca8:	000058ee 000058e6 000058e2 000058de     .X...X...X...X..
   29cb8:	000058da 000058d6 000058d2 000058ce     .X...X...X...X..
   29cc8:	000058ca 000058c6 000058be 000058c2     .X...X...X...X..
   29cd8:	000058ba 000058b6 000058b2 000058ae     .X...X...X...X..
   29ce8:	000058aa 000058a6 000058a2 0000589e     .X...X...X...X..
   29cf8:	0000589a 00005896 00005892 0000588e     .X...X...X...X..
   29d08:	0000588a 00005886 00005882 0000587e     .X...X...X..~X..
   29d18:	0000587a 00005876 00005872 0000586a     zX..vX..rX..jX..
   29d28:	00005866 00005862 0000585e 0000585a     fX..bX..^X..ZX..
   29d38:	00005852 0000584e 0000584a 00005846     RX..NX..JX..FX..
   29d48:	00005842 0000583e 0000583a 00005836     BX..>X..:X..6X..
   29d58:	00005832 0000582e 0000582a 00005826     2X...X..*X..&X..
   29d68:	0000599a 00005936 00005822 0000581e     .Y..6Y.."X...X..
   29d78:	0000581a 00005816 00005812 0000580e     .X...X...X...X..
   29d88:	0000580a 00005806 0000599a 0000599a     .X...X...Y...Y..
   29d98:	0000599a 0000599a 0000599a 0000599a     .Y...Y...Y...Y..
   29da8:	0000599a 00005856 00005802 000057fe     .Y..VX...X...W..
   29db8:	000057fa 000057f6 000057f2 000057ee     .W...W...W...W..
   29dc8:	000057ea 000057e6 000057e2 000057de     .W...W...W...W..
   29dd8:	000057da 000057d6 000057d2 000057ce     .W...W...W...W..
   29de8:	000057ca 000057c6 000057c2 000057be     .W...W...W...W..
   29df8:	000057ba 000057b6 000057b2 000057ae     .W...W...W...W..
   29e08:	000057aa 000057a6 000057a2 0000579e     .W...W...W...W..
   29e18:	0000579a 00005796 00005792 0000578e     .W...W...W...W..
   29e28:	0000578a 00005786 0000599a 0000599a     .W...W...Y...Y..
   29e38:	0000599a 00005782 0000577e 0000599a     .Y...W..~W...Y..
   29e48:	0000599a 0000599a 0000577a 00005776     .Y...Y..zW..vW..
   29e58:	00005772 0000576e 0000576a 00005766     rW..nW..jW..fW..
   29e68:	00005762 0000575e 0000575a 00005756     bW..^W..ZW..VW..
   29e78:	00005752 0000574e 0000574a 00005746     RW..NW..JW..FW..
   29e88:	00005742 0000573e 0000573a 00005736     BW..>W..:W..6W..
   29e98:	00005732 0000572e 0000572a 00006116     2W...W..*W...a..
   29ea8:	0000611e 00006116 0000611e 00006108     .a...a...a...a..
   29eb8:	0000611e 0000610e 0000611e 0000611e     .a...a...a...a..
   29ec8:	0000611e 000061dc 000061e4 000061e4     .a...a...a...a..
   29ed8:	000061e4 000061d0 000061e4 000061d6     .a...a...a...a..
   29ee8:	000061e4 000061e4 000061e4 000061e4     .a...a...a...a..
   29ef8:	000061e4 000061e4 000061e4 00006224     .a...a...a..$b..
   29f08:	0000622c 0000622c 0000622c 00006218     ,b..,b..,b...b..
   29f18:	0000622c 0000621e 0000622c 0000622c     ,b...b..,b..,b..
   29f28:	0000622c 0000622c 0000622c 0000622c     ,b..,b..,b..,b..
   29f38:	0000622c 000062b6 0000628a 000062b6     ,b...b...b...b..
   29f48:	0000629c 000062b6 000062b6 000062b6     .b...b...b...b..
   29f58:	00006320 000062fc 00006320 0000630a      c...b.. c...c..
   29f68:	00006320 00006320 0000639e 00006372      c.. c...c..rc..
   29f78:	0000639e 00006384 0000639e 0000639e     .c...c...c...c..
   29f88:	0000641c 000063f0 0000641c 00006402     .d...c...d...d..
   29f98:	0000641c 0000641c 00006484 00006460     .d...d...d..`d..
   29fa8:	00006484 0000646e 00006484 00006484     .d..nd...d...d..

00029fb8 <hashSha1hOid>:
   29fb8:	02030e2b 0000001a                       +.......

00029fc0 <hashSha256hOid>:
   29fc0:	01488660 02040365 00000001              `.H.e.......

00029fcc <hmacSha256Oid>:
   29fcc:	8648862a 09020df7                       *.H.....

00029fd4 <sigSha1wEcdsaOid>:
   29fd4:	ce48862a 0001043d                       *.H.=...

00029fdc <sigSha256wEcdsaOid>:
   29fdc:	ce48862a 0203043d                       *.H.=...

00029fe4 <keyEcdsaOid>:
   29fe4:	ce48862a 0001023d                       *.H.=...

00029fec <blkAes128CbcOid>:
   29fec:	01488660 01040365 00000002              `.H.e.......

00029ff8 <blkAes192CbcOid>:
   29ff8:	01488660 01040365 00000016              `.H.e.......

0002a004 <blkAes256CbcOid>:
   2a004:	01488660 01040365 0000002a              `.H.e...*...

0002a010 <blkAes128GcmOid>:
   2a010:	01488660 01040365 00000006              `.H.e.......

0002a01c <blkAes192GcmOid>:
   2a01c:	01488660 01040365 0000001a              `.H.e.......

0002a028 <blkAes256GcmOid>:
   2a028:	01488660 01040365 0000002e              `.H.e.......

0002a034 <wrapAes128Oid>:
   2a034:	01488660 01040365 00000005              `.H.e.......

0002a040 <wrapAes192Oid>:
   2a040:	01488660 01040365 00000019              `.H.e.......

0002a04c <wrapAes256Oid>:
   2a04c:	01488660 01040365 0000002d              `.H.e...-...

0002a058 <dhSinglePass_stdDH_sha1kdf_Oid>:
   2a058:	1005812b 003f4886 00000002              +....H?.....

0002a064 <dhSinglePass_stdDH_sha256kdf_Oid>:
   2a064:	0104812b 0000010b                       +.......

0002a06c <extBasicCaOid>:
   2a06c:	00131d55                                U...

0002a070 <extAltNamesOid>:
   2a070:	00111d55                                U...

0002a074 <extCrlDistOid>:
   2a074:	001f1d55                                U...

0002a078 <extAuthInfoOid>:
   2a078:	0501062b 01010705                       +.......

0002a080 <extAuthKeyOid>:
   2a080:	00231d55                                U.#.

0002a084 <extSubjKeyOid>:
   2a084:	000e1d55                                U...

0002a088 <extCertPolicyOid>:
   2a088:	00201d55                                U. .

0002a08c <extKeyUsageOid>:
   2a08c:	000f1d55                                U...

0002a090 <extInhibitAnyOid>:
   2a090:	00361d55                                U.6.

0002a094 <extExtKeyUsageOid>:
   2a094:	00251d55                                U.%.

0002a098 <extNameConsOid>:
   2a098:	001e1d55                                U...

0002a09c <extAuthInfoCaIssuerOid>:
   2a09c:	0501062b 02300705                       +.....0.

0002a0a4 <extCertPolicyAnyOid>:
   2a0a4:	00201d55                                U. .

0002a0a8 <extAltNamesHwNameOid>:
   2a0a8:	0501062b 04080705                       +.......

0002a0b0 <extExtKeyUsageAnyOid>:
   2a0b0:	00251d55                                U.%.

0002a0b4 <extExtKeyUsageServerAuthOid>:
   2a0b4:	0501062b 01030705                       +.......

0002a0bc <extExtKeyUsageClientAuthOid>:
   2a0bc:	0501062b 02030705                       +.......

0002a0c4 <extExtKeyUsageCodeSigningOid>:
   2a0c4:	0501062b 03030705                       +.......

0002a0cc <extExtKeyUsageEmailProtectOid>:
   2a0cc:	0501062b 04030705                       +.......

0002a0d4 <extExtKeyUsageTimestampOid>:
   2a0d4:	0501062b 08030705                       +.......

0002a0dc <extExtKeyUsageOcspSignOid>:
   2a0dc:	0501062b 09030705                       +.......

0002a0e4 <pbkdf2Oid>:
   2a0e4:	8648862a 05010df7 0000000c              *.H.........

0002a0f0 <pbes2>:
   2a0f0:	8648862a 05010df7 0000000d 00006b52     *.H.........Rk..
   2a100:	00006b7c 00006baa 00006bc2 00006bd2     |k...k...k...k..
   2a110:	00006e3a 00006c32 00006ccc 00006ce2     :n..2l...l...l..
   2a120:	00006cf8 00006d0e 00006d86 00006db6     .l...m...m...m..
   2a130:	00006df8 00006da0 00006e22 00006be8     .m...m.."n...k..
   2a140:	00006e3e 00006e3e 00006e3e 00006c0c     >n..>n..>n...l..
   2a150:	00006e3e 00006e3e 00006e3e 00006e3e     >n..>n..>n..>n..
   2a160:	00006e3e 00006e3e 00006e3e 00006e3e     >n..>n..>n..>n..
   2a170:	00006e3e 00006e3e 00006e3e 00006e3e     >n..>n..>n..>n..
   2a180:	00006e3e 00006e3e 00006e3e 00006bf4     >n..>n..>n...k..
   2a190:	00006e3e 00006e3e 00006e3e 00006c18     >n..>n..>n...l..
   2a1a0:	00006e3e 00006e3e 00006e3e 00006e3e     >n..>n..>n..>n..
   2a1b0:	00006e3e 00006e3e 00006e3e 00006e3e     >n..>n..>n..>n..
   2a1c0:	00006e3e 00006e3e 00006e3e 00006e3e     >n..>n..>n..>n..
   2a1d0:	00006e3e 00006e3e 00006e3e 00006c00     >n..>n..>n...l..
   2a1e0:	00006e3e 00006e3e 00006e3e 00006c24     >n..>n..>n..$l..
   2a1f0:	00006c6a 00006ef8 00006ef8 00006ef8     jl...n...n...n..
   2a200:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a210:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a220:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a230:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a240:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a250:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a260:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a270:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a280:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a290:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a2a0:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a2b0:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a2c0:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a2d0:	00006ef8 00006ef8 00006ef8 00006c82     .n...n...n...l..
   2a2e0:	00006c9a 00006ef8 00006c52 00006ef8     .l...n..Rl...n..
   2a2f0:	00006c46 00006ef8 00006ef8 00006ef8     Fl...n...n...n..
   2a300:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a310:	00006ef8 00006ef8 00006ef8 00006cbe     .n...n...n...l..
   2a320:	00006c5e 00006c8e 00006ef8 00006ef8     ^l...l...n...n..
   2a330:	00006c76 00006ef8 00006cb2 00006ef8     vl...n...l...n..
   2a340:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a350:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a360:	00006ef8 00006ef8 00006ef8 00006ef8     .n...n...n...n..
   2a370:	00006ef8 00006ef8 00006ef8 00006ca6     .n...n...n...l..

0002a380 <rcon>:
   2a380:	01000000 02000000 04000000 08000000     ................
   2a390:	10000000 20000000 40000000 80000000     ....... ...@....
   2a3a0:	1b000000 36000000                       .......6

0002a3a8 <Te>:
   2a3a8:	c66363a5 f87c7c84 ee777799 f67b7b8d     .cc..||..ww..{{.
   2a3b8:	fff2f20d d66b6bbd de6f6fb1 91c5c554     .....kk..oo.T...
   2a3c8:	60303050 02010103 ce6767a9 562b2b7d     P00`.....gg.}++V
   2a3d8:	e7fefe19 b5d7d762 4dababe6 ec76769a     ....b......M.vv.
   2a3e8:	8fcaca45 1f82829d 89c9c940 fa7d7d87     E.......@....}}.
   2a3f8:	effafa15 b25959eb 8e4747c9 fbf0f00b     .....YY..GG.....
   2a408:	41adadec b3d4d467 5fa2a2fd 45afafea     ...Ag......_...E
   2a418:	239c9cbf 53a4a4f7 e4727296 9bc0c05b     ...#...S.rr.[...
   2a428:	75b7b7c2 e1fdfd1c 3d9393ae 4c26266a     ...u.......=j&&L
   2a438:	6c36365a 7e3f3f41 f5f7f702 83cccc4f     Z66lA??~....O...
   2a448:	6834345c 51a5a5f4 d1e5e534 f9f1f108     \44h...Q4.......
   2a458:	e2717193 abd8d873 62313153 2a15153f     .qq.s...S11b?..*
   2a468:	0804040c 95c7c752 46232365 9dc3c35e     ....R...e##F^...
   2a478:	30181828 379696a1 0a05050f 2f9a9ab5     (..0...7......./
   2a488:	0e070709 24121236 1b80809b dfe2e23d     ....6..$....=...
   2a498:	cdebeb26 4e272769 7fb2b2cd ea75759f     &...i''N.....uu.
   2a4a8:	1209091b 1d83839e 582c2c74 341a1a2e     ........t,,X...4
   2a4b8:	361b1b2d dc6e6eb2 b45a5aee 5ba0a0fb     -..6.nn..ZZ....[
   2a4c8:	a45252f6 763b3b4d b7d6d661 7db3b3ce     .RR.M;;va......}
   2a4d8:	5229297b dde3e33e 5e2f2f71 13848497     {))R>...q//^....
   2a4e8:	a65353f5 b9d1d168 00000000 c1eded2c     .SS.h.......,...
   2a4f8:	40202060 e3fcfc1f 79b1b1c8 b65b5bed     `  @.......y.[[.
   2a508:	d46a6abe 8dcbcb46 67bebed9 7239394b     .jj.F......gK99r
   2a518:	944a4ade 984c4cd4 b05858e8 85cfcf4a     .JJ..LL..XX.J...
   2a528:	bbd0d06b c5efef2a 4faaaae5 edfbfb16     k...*......O....
   2a538:	864343c5 9a4d4dd7 66333355 11858594     .CC..MM.U33f....
   2a548:	8a4545cf e9f9f910 04020206 fe7f7f81     .EE.............
   2a558:	a05050f0 783c3c44 259f9fba 4ba8a8e3     .PP.D<<x...%...K
   2a568:	a25151f3 5da3a3fe 804040c0 058f8f8a     .QQ....].@@.....
   2a578:	3f9292ad 219d9dbc 70383848 f1f5f504     ...?...!H88p....
   2a588:	63bcbcdf 77b6b6c1 afdada75 42212163     ...c...wu...c!!B
   2a598:	20101030 e5ffff1a fdf3f30e bfd2d26d     0.. ........m...
   2a5a8:	81cdcd4c 180c0c14 26131335 c3ecec2f     L.......5..&/...
   2a5b8:	be5f5fe1 359797a2 884444cc 2e171739     .__....5.DD.9...
   2a5c8:	93c4c457 55a7a7f2 fc7e7e82 7a3d3d47     W......U.~~.G==z
   2a5d8:	c86464ac ba5d5de7 3219192b e6737395     .dd..]].+..2.ss.
   2a5e8:	c06060a0 19818198 9e4f4fd1 a3dcdc7f     .``......OO.....
   2a5f8:	44222266 542a2a7e 3b9090ab 0b888883     f""D~**T...;....
   2a608:	8c4646ca c7eeee29 6bb8b8d3 2814143c     .FF.)......k<..(
   2a618:	a7dede79 bc5e5ee2 160b0b1d addbdb76     y....^^.....v...
   2a628:	dbe0e03b 64323256 743a3a4e 140a0a1e     ;...V22dN::t....
   2a638:	924949db 0c06060a 4824246c b85c5ce4     .II.....l$$H.\\.
   2a648:	9fc2c25d bdd3d36e 43acacef c46262a6     ]...n......C.bb.
   2a658:	399191a8 319595a4 d3e4e437 f279798b     ...9...17....yy.
   2a668:	d5e7e732 8bc8c843 6e373759 da6d6db7     2...C...Y77n.mm.
   2a678:	018d8d8c b1d5d564 9c4e4ed2 49a9a9e0     ....d....NN....I
   2a688:	d86c6cb4 ac5656fa f3f4f407 cfeaea25     .ll..VV.....%...
   2a698:	ca6565af f47a7a8e 47aeaee9 10080818     .ee..zz....G....
   2a6a8:	6fbabad5 f0787888 4a25256f 5c2e2e72     ...o.xx.o%%Jr..\
   2a6b8:	381c1c24 57a6a6f1 73b4b4c7 97c6c651     $..8...W...sQ...
   2a6c8:	cbe8e823 a1dddd7c e874749c 3e1f1f21     #...|....tt.!..>
   2a6d8:	964b4bdd 61bdbddc 0d8b8b86 0f8a8a85     .KK....a........
   2a6e8:	e0707090 7c3e3e42 71b5b5c4 cc6666aa     .pp.B>>|...q.ff.
   2a6f8:	904848d8 06030305 f7f6f601 1c0e0e12     .HH.............
   2a708:	c26161a3 6a35355f ae5757f9 69b9b9d0     .aa._55j.WW....i
   2a718:	17868691 99c1c158 3a1d1d27 279e9eb9     ....X...'..:...'
   2a728:	d9e1e138 ebf8f813 2b9898b3 22111133     8..........+3.."
   2a738:	d26969bb a9d9d970 078e8e89 339494a7     .ii.p..........3
   2a748:	2d9b9bb6 3c1e1e22 15878792 c9e9e920     ...-"..<.... ...
   2a758:	87cece49 aa5555ff 50282878 a5dfdf7a     I....UU.x((Pz...
   2a768:	038c8c8f 59a1a1f8 09898980 1a0d0d17     .......Y........
   2a778:	65bfbfda d7e6e631 844242c6 d06868b8     ...e1....BB..hh.
   2a788:	824141c3 299999b0 5a2d2d77 1e0f0f11     .AA....)w--Z....
   2a798:	7bb0b0cb a85454fc 6dbbbbd6 2c16163a     ...{.TT....m:..,
   2a7a8:	a5c66363 84f87c7c 99ee7777 8df67b7b     cc..||..ww..{{..
   2a7b8:	0dfff2f2 bdd66b6b b1de6f6f 5491c5c5     ....kk..oo.....T
   2a7c8:	50603030 03020101 a9ce6767 7d562b2b     00`P....gg..++V}
   2a7d8:	19e7fefe 62b5d7d7 e64dabab 9aec7676     .......b..M.vv..
   2a7e8:	458fcaca 9d1f8282 4089c9c9 87fa7d7d     ...E.......@}}..
   2a7f8:	15effafa ebb25959 c98e4747 0bfbf0f0     ....YY..GG......
   2a808:	ec41adad 67b3d4d4 fd5fa2a2 ea45afaf     ..A....g.._...E.
   2a818:	bf239c9c f753a4a4 96e47272 5b9bc0c0     ..#...S.rr.....[
   2a828:	c275b7b7 1ce1fdfd ae3d9393 6a4c2626     ..u.......=.&&Lj
   2a838:	5a6c3636 417e3f3f 02f5f7f7 4f83cccc     66lZ??~A.......O
   2a848:	5c683434 f451a5a5 34d1e5e5 08f9f1f1     44h\..Q....4....
   2a858:	93e27171 73abd8d8 53623131 3f2a1515     qq.....s11bS..*?
   2a868:	0c080404 5295c7c7 65462323 5e9dc3c3     .......R##Fe...^
   2a878:	28301818 a1379696 0f0a0505 b52f9a9a     ..0(..7......./.
   2a888:	090e0707 36241212 9b1b8080 3ddfe2e2     ......$6.......=
   2a898:	26cdebeb 694e2727 cd7fb2b2 9fea7575     ...&''Ni....uu..
   2a8a8:	1b120909 9e1d8383 74582c2c 2e341a1a     ........,,Xt..4.
   2a8b8:	2d361b1b b2dc6e6e eeb45a5a fb5ba0a0     ..6-nn..ZZ....[.
   2a8c8:	f6a45252 4d763b3b 61b7d6d6 ce7db3b3     RR..;;vM...a..}.
   2a8d8:	7b522929 3edde3e3 715e2f2f 97138484     ))R{...>//^q....
   2a8e8:	f5a65353 68b9d1d1 00000000 2cc1eded     SS.....h.......,
   2a8f8:	60402020 1fe3fcfc c879b1b1 edb65b5b       @`......y.[[..
   2a908:	bed46a6a 468dcbcb d967bebe 4b723939     jj.....F..g.99rK
   2a918:	de944a4a d4984c4c e8b05858 4a85cfcf     JJ..LL..XX.....J
   2a928:	6bbbd0d0 2ac5efef e54faaaa 16edfbfb     ...k...*..O.....
   2a938:	c5864343 d79a4d4d 55663333 94118585     CC..MM..33fU....
   2a948:	cf8a4545 10e9f9f9 06040202 81fe7f7f     EE..............
   2a958:	f0a05050 44783c3c ba259f9f e34ba8a8     PP..<<xD..%...K.
   2a968:	f3a25151 fe5da3a3 c0804040 8a058f8f     QQ....].@@......
   2a978:	ad3f9292 bc219d9d 48703838 04f1f5f5     ..?...!.88pH....
   2a988:	df63bcbc c177b6b6 75afdada 63422121     ..c...w....u!!Bc
   2a998:	30201010 1ae5ffff 0efdf3f3 6dbfd2d2     .. 0...........m
   2a9a8:	4c81cdcd 14180c0c 35261313 2fc3ecec     ...L......&5.../
   2a9b8:	e1be5f5f a2359797 cc884444 392e1717     __....5.DD.....9
   2a9c8:	5793c4c4 f255a7a7 82fc7e7e 477a3d3d     ...W..U.~~..==zG
   2a9d8:	acc86464 e7ba5d5d 2b321919 95e67373     dd..]]....2+ss..
   2a9e8:	a0c06060 98198181 d19e4f4f 7fa3dcdc     ``......OO......
   2a9f8:	66442222 7e542a2a ab3b9090 830b8888     ""Df**T~..;.....
   2aa08:	ca8c4646 29c7eeee d36bb8b8 3c281414     FF.....)..k...(<
   2aa18:	79a7dede e2bc5e5e 1d160b0b 76addbdb     ...y^^.........v
   2aa28:	3bdbe0e0 56643232 4e743a3a 1e140a0a     ...;22dV::tN....
   2aa38:	db924949 0a0c0606 6c482424 e4b85c5c     II......$$Hl\\..
   2aa48:	5d9fc2c2 6ebdd3d3 ef43acac a6c46262     ...]...n..C.bb..
   2aa58:	a8399191 a4319595 37d3e4e4 8bf27979     ..9...1....7yy..
   2aa68:	32d5e7e7 438bc8c8 596e3737 b7da6d6d     ...2...C77nYmm..
   2aa78:	8c018d8d 64b1d5d5 d29c4e4e e049a9a9     .......dNN....I.
   2aa88:	b4d86c6c faac5656 07f3f4f4 25cfeaea     ll..VV.........%
   2aa98:	afca6565 8ef47a7a e947aeae 18100808     ee..zz....G.....
   2aaa8:	d56fbaba 88f07878 6f4a2525 725c2e2e     ..o.xx..%%Jo..\r
   2aab8:	24381c1c f157a6a6 c773b4b4 5197c6c6     ..8$..W...s....Q
   2aac8:	23cbe8e8 7ca1dddd 9ce87474 213e1f1f     ...#...|tt....>!
   2aad8:	dd964b4b dc61bdbd 860d8b8b 850f8a8a     KK....a.........
   2aae8:	90e07070 427c3e3e c471b5b5 aacc6666     pp..>>|B..q.ff..
   2aaf8:	d8904848 05060303 01f7f6f6 121c0e0e     HH..............
   2ab08:	a3c26161 5f6a3535 f9ae5757 d069b9b9     aa..55j_WW....i.
   2ab18:	91178686 5899c1c1 273a1d1d b9279e9e     .......X..:'..'.
   2ab28:	38d9e1e1 13ebf8f8 b32b9898 33221111     ...8......+..."3
   2ab38:	bbd26969 70a9d9d9 89078e8e a7339494     ii.....p......3.
   2ab48:	b62d9b9b 223c1e1e 92158787 20c9e9e9     ..-...<"....... 
   2ab58:	4987cece ffaa5555 78502828 7aa5dfdf     ...IUU..((Px...z
   2ab68:	8f038c8c f859a1a1 80098989 171a0d0d     ......Y.........
   2ab78:	da65bfbf 31d7e6e6 c6844242 b8d06868     ..e....1BB..hh..
   2ab88:	c3824141 b0299999 775a2d2d 111e0f0f     AA....).--Zw....
   2ab98:	cb7bb0b0 fca85454 d66dbbbb 3a2c1616     ..{.TT....m...,:
   2aba8:	63a5c663 7c84f87c 7799ee77 7b8df67b     c..c|..|w..w{..{
   2abb8:	f20dfff2 6bbdd66b 6fb1de6f c55491c5     ....k..ko..o..T.
   2abc8:	30506030 01030201 67a9ce67 2b7d562b     0`P0....g..g+V}+
   2abd8:	fe19e7fe d762b5d7 abe64dab 769aec76     ......b..M..v..v
   2abe8:	ca458fca 829d1f82 c94089c9 7d87fa7d     ..E.......@.}..}
   2abf8:	fa15effa 59ebb259 47c98e47 f00bfbf0     ....Y..YG..G....
   2ac08:	adec41ad d467b3d4 a2fd5fa2 afea45af     .A....g.._...E..
   2ac18:	9cbf239c a4f753a4 7296e472 c05b9bc0     .#...S..r..r..[.
   2ac28:	b7c275b7 fd1ce1fd 93ae3d93 266a4c26     .u.......=..&Lj&
   2ac38:	365a6c36 3f417e3f f702f5f7 cc4f83cc     6lZ6?~A?......O.
   2ac48:	345c6834 a5f451a5 e534d1e5 f108f9f1     4h\4.Q....4.....
   2ac58:	7193e271 d873abd8 31536231 153f2a15     q..q..s.1bS1.*?.
   2ac68:	040c0804 c75295c7 23654623 c35e9dc3     ......R.#Fe#..^.
   2ac78:	18283018 96a13796 050f0a05 9ab52f9a     .0(..7......./..
   2ac88:	07090e07 12362412 809b1b80 e23ddfe2     .....$6.......=.
   2ac98:	eb26cdeb 27694e27 b2cd7fb2 759fea75     ..&.'Ni'....u..u
   2aca8:	091b1209 839e1d83 2c74582c 1a2e341a     ........,Xt,.4..
   2acb8:	1b2d361b 6eb2dc6e 5aeeb45a a0fb5ba0     .6-.n..nZ..Z.[..
   2acc8:	52f6a452 3b4d763b d661b7d6 b3ce7db3     R..R;vM;..a..}..
   2acd8:	297b5229 e33edde3 2f715e2f 84971384     )R{)..>./^q/....
   2ace8:	53f5a653 d168b9d1 00000000 ed2cc1ed     S..S..h.......,.
   2acf8:	20604020 fc1fe3fc b1c879b1 5bedb65b      @` .....y..[..[
   2ad08:	6abed46a cb468dcb bed967be 394b7239     j..j..F..g..9rK9
   2ad18:	4ade944a 4cd4984c 58e8b058 cf4a85cf     J..JL..LX..X..J.
   2ad28:	d06bbbd0 ef2ac5ef aae54faa fb16edfb     ..k...*..O......
   2ad38:	43c58643 4dd79a4d 33556633 85941185     C..CM..M3fU3....
   2ad48:	45cf8a45 f910e9f9 02060402 7f81fe7f     E..E............
   2ad58:	50f0a050 3c44783c 9fba259f a8e34ba8     P..P<xD<.%...K..
   2ad68:	51f3a251 a3fe5da3 40c08040 8f8a058f     Q..Q.]..@..@....
   2ad78:	92ad3f92 9dbc219d 38487038 f504f1f5     .?...!..8pH8....
   2ad88:	bcdf63bc b6c177b6 da75afda 21634221     .c...w....u.!Bc!
   2ad98:	10302010 ff1ae5ff f30efdf3 d26dbfd2     . 0...........m.
   2ada8:	cd4c81cd 0c14180c 13352613 ec2fc3ec     ..L......&5.../.
   2adb8:	5fe1be5f 97a23597 44cc8844 17392e17     _.._.5..D..D..9.
   2adc8:	c45793c4 a7f255a7 7e82fc7e 3d477a3d     ..W..U..~..~=zG=
   2add8:	64acc864 5de7ba5d 192b3219 7395e673     d..d]..].2+.s..s
   2ade8:	60a0c060 81981981 4fd19e4f dc7fa3dc     `..`....O..O....
   2adf8:	22664422 2a7e542a 90ab3b90 88830b88     "Df"*T~*.;......
   2ae08:	46ca8c46 ee29c7ee b8d36bb8 143c2814     F..F..)..k...(<.
   2ae18:	de79a7de 5ee2bc5e 0b1d160b db76addb     ..y.^..^......v.
   2ae28:	e03bdbe0 32566432 3a4e743a 0a1e140a     ..;.2dV2:tN:....
   2ae38:	49db9249 060a0c06 246c4824 5ce4b85c     I..I....$Hl$\..\
   2ae48:	c25d9fc2 d36ebdd3 acef43ac 62a6c462     ..]...n..C..b..b
   2ae58:	91a83991 95a43195 e437d3e4 798bf279     .9...1....7.y..y
   2ae68:	e732d5e7 c8438bc8 37596e37 6db7da6d     ..2...C.7nY7m..m
   2ae78:	8d8c018d d564b1d5 4ed29c4e a9e049a9     ......d.N..N.I..
   2ae88:	6cb4d86c 56faac56 f407f3f4 ea25cfea     l..lV..V......%.
   2ae98:	65afca65 7a8ef47a aee947ae 08181008     e..ez..z.G......
   2aea8:	bad56fba 7888f078 256f4a25 2e725c2e     .o..x..x%Jo%.\r.
   2aeb8:	1c24381c a6f157a6 b4c773b4 c65197c6     .8$..W...s....Q.
   2aec8:	e823cbe8 dd7ca1dd 749ce874 1f213e1f     ..#...|.t..t.>!.
   2aed8:	4bdd964b bddc61bd 8b860d8b 8a850f8a     K..K.a..........
   2aee8:	7090e070 3e427c3e b5c471b5 66aacc66     p..p>|B>.q..f..f
   2aef8:	48d89048 03050603 f601f7f6 0e121c0e     H..H............
   2af08:	61a3c261 355f6a35 57f9ae57 b9d069b9     a..a5j_5W..W.i..
   2af18:	86911786 c15899c1 1d273a1d 9eb9279e     ......X..:'..'..
   2af28:	e138d9e1 f813ebf8 98b32b98 11332211     ..8......+..."3.
   2af38:	69bbd269 d970a9d9 8e89078e 94a73394     i..i..p......3..
   2af48:	9bb62d9b 1e223c1e 87921587 e920c9e9     .-...<"....... .
   2af58:	ce4987ce 55ffaa55 28785028 df7aa5df     ..I.U..U(Px(..z.
   2af68:	8c8f038c a1f859a1 89800989 0d171a0d     .....Y..........
   2af78:	bfda65bf e631d7e6 42c68442 68b8d068     .e....1.B..Bh..h
   2af88:	41c38241 99b02999 2d775a2d 0f111e0f     A..A.)..-Zw-....
   2af98:	b0cb7bb0 54fca854 bbd66dbb 163a2c16     .{..T..T.m...,:.
   2afa8:	6363a5c6 7c7c84f8 777799ee 7b7b8df6     ..cc..||..ww..{{
   2afb8:	f2f20dff 6b6bbdd6 6f6fb1de c5c55491     ......kk..oo.T..
   2afc8:	30305060 01010302 6767a9ce 2b2b7d56     `P00......ggV}++
   2afd8:	fefe19e7 d7d762b5 ababe64d 76769aec     .....b..M.....vv
   2afe8:	caca458f 82829d1f c9c94089 7d7d87fa     .E.......@....}}
   2aff8:	fafa15ef 5959ebb2 4747c98e f0f00bfb     ......YY..GG....
   2b008:	adadec41 d4d467b3 a2a2fd5f afafea45     A....g.._...E...
   2b018:	9c9cbf23 a4a4f753 727296e4 c0c05b9b     #...S.....rr.[..
   2b028:	b7b7c275 fdfd1ce1 9393ae3d 26266a4c     u.......=...Lj&&
   2b038:	36365a6c 3f3f417e f7f702f5 cccc4f83     lZ66~A??.....O..
   2b048:	34345c68 a5a5f451 e5e534d1 f1f108f9     h\44Q....4......
   2b058:	717193e2 d8d873ab 31315362 15153f2a     ..qq.s..bS11*?..
   2b068:	04040c08 c7c75295 23236546 c3c35e9d     .....R..Fe##.^..
   2b078:	18182830 9696a137 05050f0a 9a9ab52f     0(..7......./...
   2b088:	0707090e 12123624 80809b1b e2e23ddf     ....$6.......=..
   2b098:	ebeb26cd 2727694e b2b2cd7f 75759fea     .&..Ni''......uu
   2b0a8:	09091b12 83839e1d 2c2c7458 1a1a2e34     ........Xt,,4...
   2b0b8:	1b1b2d36 6e6eb2dc 5a5aeeb4 a0a0fb5b     6-....nn..ZZ[...
   2b0c8:	5252f6a4 3b3b4d76 d6d661b7 b3b3ce7d     ..RRvM;;.a..}...
   2b0d8:	29297b52 e3e33edd 2f2f715e 84849713     R{)).>..^q//....
   2b0e8:	5353f5a6 d1d168b9 00000000 eded2cc1     ..SS.h.......,..
   2b0f8:	20206040 fcfc1fe3 b1b1c879 5b5bedb6     @`  ....y.....[[
   2b108:	6a6abed4 cbcb468d bebed967 39394b72     ..jj.F..g...rK99
   2b118:	4a4ade94 4c4cd498 5858e8b0 cfcf4a85     ..JJ..LL..XX.J..
   2b128:	d0d06bbb efef2ac5 aaaae54f fbfb16ed     .k...*..O.......
   2b138:	4343c586 4d4dd79a 33335566 85859411     ..CC..MMfU33....
   2b148:	4545cf8a f9f910e9 02020604 7f7f81fe     ..EE............
   2b158:	5050f0a0 3c3c4478 9f9fba25 a8a8e34b     ..PPxD<<%...K...
   2b168:	5151f3a2 a3a3fe5d 4040c080 8f8f8a05     ..QQ].....@@....
   2b178:	9292ad3f 9d9dbc21 38384870 f5f504f1     ?...!...pH88....
   2b188:	bcbcdf63 b6b6c177 dada75af 21216342     c...w....u..Bc!!
   2b198:	10103020 ffff1ae5 f3f30efd d2d26dbf      0...........m..
   2b1a8:	cdcd4c81 0c0c1418 13133526 ecec2fc3     .L......&5.../..
   2b1b8:	5f5fe1be 9797a235 4444cc88 1717392e     ..__5.....DD.9..
   2b1c8:	c4c45793 a7a7f255 7e7e82fc 3d3d477a     .W..U.....~~zG==
   2b1d8:	6464acc8 5d5de7ba 19192b32 737395e6     ..dd..]]2+....ss
   2b1e8:	6060a0c0 81819819 4f4fd19e dcdc7fa3     ..``......OO....
   2b1f8:	22226644 2a2a7e54 9090ab3b 8888830b     Df""T~**;.......
   2b208:	4646ca8c eeee29c7 b8b8d36b 14143c28     ..FF.)..k...(<..
   2b218:	dede79a7 5e5ee2bc 0b0b1d16 dbdb76ad     .y....^^.....v..
   2b228:	e0e03bdb 32325664 3a3a4e74 0a0a1e14     .;..dV22tN::....
   2b238:	4949db92 06060a0c 24246c48 5c5ce4b8     ..II....Hl$$..\\
   2b248:	c2c25d9f d3d36ebd acacef43 6262a6c4     .]...n..C.....bb
   2b258:	9191a839 9595a431 e4e437d3 79798bf2     9...1....7....yy
   2b268:	e7e732d5 c8c8438b 3737596e 6d6db7da     .2...C..nY77..mm
   2b278:	8d8d8c01 d5d564b1 4e4ed29c a9a9e049     .....d....NNI...
   2b288:	6c6cb4d8 5656faac f4f407f3 eaea25cf     ..ll..VV.....%..
   2b298:	6565afca 7a7a8ef4 aeaee947 08081810     ..ee..zzG.......
   2b2a8:	babad56f 787888f0 25256f4a 2e2e725c     o.....xxJo%%\r..
   2b2b8:	1c1c2438 a6a6f157 b4b4c773 c6c65197     8$..W...s....Q..
   2b2c8:	e8e823cb dddd7ca1 74749ce8 1f1f213e     .#...|....tt>!..
   2b2d8:	4b4bdd96 bdbddc61 8b8b860d 8a8a850f     ..KKa...........
   2b2e8:	707090e0 3e3e427c b5b5c471 6666aacc     ..pp|B>>q.....ff
   2b2f8:	4848d890 03030506 f6f601f7 0e0e121c     ..HH............
   2b308:	6161a3c2 35355f6a 5757f9ae b9b9d069     ..aaj_55..WWi...
   2b318:	86869117 c1c15899 1d1d273a 9e9eb927     .....X..:'..'...
   2b328:	e1e138d9 f8f813eb 9898b32b 11113322     .8......+..."3..
   2b338:	6969bbd2 d9d970a9 8e8e8907 9494a733     ..ii.p......3...
   2b348:	9b9bb62d 1e1e223c 87879215 e9e920c9     -...<"....... ..
   2b358:	cece4987 5555ffaa 28287850 dfdf7aa5     .I....UUPx((.z..
   2b368:	8c8c8f03 a1a1f859 89898009 0d0d171a     ....Y...........
   2b378:	bfbfda65 e6e631d7 4242c684 6868b8d0     e....1....BB..hh
   2b388:	4141c382 9999b029 2d2d775a 0f0f111e     ..AA)...Zw--....
   2b398:	b0b0cb7b 5454fca8 bbbbd66d 16163a2c     {.....TTm...,:..

0002b3a8 <Td>:
   2b3a8:	51f4a750 7e416553 1a17a4c3 3a275e96     P..QSeA~.....^':
   2b3b8:	3bab6bcb 1f9d45f1 acfa58ab 4be30393     .k.;.E...X.....K
   2b3c8:	2030fa55 ad766df6 88cc7691 f5024c25     U.0 .mv..v..%L..
   2b3d8:	4fe5d7fc c52acbd7 26354480 b562a38f     ...O..*..D5&..b.
   2b3e8:	deb15a49 25ba1b67 45ea0e98 5dfec0e1     IZ..g..%...E...]
   2b3f8:	c32f7502 814cf012 8d4697a3 6bd3f9c6     .u/...L...F....k
   2b408:	038f5fe7 15929c95 bf6d7aeb 955259da     ._.......zm..YR.
   2b418:	d4be832d 587421d3 49e06929 8ec9c844     -....!tX)i.ID...
   2b428:	75c2896a f48e7978 99583e6b 27b971dd     j..uxy..k>X..q.'
   2b438:	bee14fb6 f088ad17 c920ac66 7dce3ab4     .O......f. ..:.}
   2b448:	63df4a18 e51a3182 97513360 62537f45     .J.c.1..`3Q.E.Sb
   2b458:	b16477e0 bb6bae84 fe81a01c f9082b94     .wd...k......+..
   2b468:	70486858 8f45fd19 94de6c87 527bf8b7     XhHp..E..l....{R
   2b478:	ab73d323 724b02e2 e31f8f57 6655ab2a     #.s...KrW...*.Uf
   2b488:	b2eb2807 2fb5c203 86c57b9a d33708a5     .(...../.{....7.
   2b498:	302887f2 23bfa5b2 02036aba ed16825c     ..(0...#.j..\...
   2b4a8:	8acf1c2b a779b492 f307f2f0 4e69e2a1     +.....y.......iN
   2b4b8:	65daf4cd 0605bed5 d134621f c4a6fe8a     ...e.....b4.....
   2b4c8:	342e539d a2f355a0 058ae132 a4f6eb75     .S.4.U..2...u...
   2b4d8:	0b83ec39 4060efaa 5e719f06 bd6e1051     9.....`@..q^Q.n.
   2b4e8:	3e218af9 96dd063d dd3e05ae 4de6bd46     ..!>=.....>.F..M
   2b4f8:	91548db5 71c45d05 0406d46f 605015ff     ..T..].qo.....P`
   2b508:	1998fb24 d6bde997 894043cc 67d99e77     $........C@.w..g
   2b518:	b0e842bd 07898b88 e7195b38 79c8eedb     .B......8[.....y
   2b528:	a17c0a47 7c420fe9 f8841ec9 00000000     G.|...B|........
   2b538:	09808683 322bed48 1e1170ac 6c5a724e     ....H.+2.p..NrZl
   2b548:	fd0efffb 0f853856 3daed51e 362d3927     ....V8.....='9-6
   2b558:	0a0fd964 685ca621 9b5b54d1 24362e3a     d...!.\h.T[.:.6$
   2b568:	0c0a67b1 9357e70f b4ee96d2 1b9b919e     .g....W.........
   2b578:	80c0c54f 61dc20a2 5a774b69 1c121a16     O.... .aiKwZ....
   2b588:	e293ba0a c0a02ae5 3c22e043 121b171d     .....*..C."<....
   2b598:	0e090d0b f28bc7ad 2db6a8b9 141ea9c8     ...........-....
   2b5a8:	57f11985 af75074c ee99ddbb a37f60fd     ...WL.u......`..
   2b5b8:	f701269f 5c72f5bc 44663bc5 5bfb7e34     .&....r\.;fD4~.[
   2b5c8:	8b432976 cb23c6dc b6edfc68 b8e4f163     v)C...#.h...c...
   2b5d8:	d731dcca 42638510 13972240 84c61120     ..1...cB@".. ...
   2b5e8:	854a247d d2bb3df8 aef93211 c729a16d     }$J..=...2..m.).
   2b5f8:	1d9e2f4b dcb230f3 0d8652ec 77c1e3d0     K/...0...R.....w
   2b608:	2bb3166c a970b999 119448fa 47e96422     l..+..p..H.."d.G
   2b618:	a8fc8cc4 a0f03f1a 567d2cd8 223390ef     .....?...,}V..3"
   2b628:	87494ec7 d938d1c1 8ccaa2fe 98d40b36     .NI...8.....6...
   2b638:	a6f581cf a57ade28 dab78e26 3fadbfa4     ....(.z.&......?
   2b648:	2c3a9de4 5078920d 6a5fcc9b 547e4662     ..:,..xP.._jbF~T
   2b658:	f68d13c2 90d8b8e8 2e39f75e 82c3aff5     ........^.9.....
   2b668:	9f5d80be 69d0937c 6fd52da9 cf2512b3     ..].|..i.-.o..%.
   2b678:	c8ac993b 10187da7 e89c636e db3bbb7b     ;....}..nc..{.;.
   2b688:	cd267809 6e5918f4 ec9ab701 834f9aa8     .x&...Yn......O.
   2b698:	e6956e65 aaffe67e 21bccf08 ef15e8e6     en..~......!....
   2b6a8:	bae79bd9 4a6f36ce ea9f09d4 29b07cd6     .....6oJ.....|.)
   2b6b8:	31a4b2af 2a3f2331 c6a59430 35a266c0     ...11#?*0....f.5
   2b6c8:	744ebc37 fc82caa6 e090d0b0 33a7d815     7.Nt...........3
   2b6d8:	f104984a 41ecdaf7 7fcd500e 1791f62f     J......A.P../...
   2b6e8:	764dd68d 43efb04d ccaa4d54 e49604df     ..MvM..CTM......
   2b6f8:	9ed1b5e3 4c6a881b c12c1fb8 4665517f     ......jL..,..QeF
   2b708:	9d5eea04 018c355d fa877473 fb0b412e     ..^.]5..st...A..
   2b718:	b3671d5a 92dbd252 e9105633 6dd64713     Z.g.R...3V...G.m
   2b728:	9ad7618c 37a10c7a 59f8148e eb133c89     .a..z..7...Y.<..
   2b738:	cea927ee b761c935 e11ce5ed 7a47b13c     .'..5.a.....<.Gz
   2b748:	9cd2df59 55f2733f 1814ce79 73c737bf     Y...?s.Uy....7.s
   2b758:	53f7cdea 5ffdaa5b df3d6f14 7844db86     ...S[.._.o=...Dx
   2b768:	caaff381 b968c43e 3824342c c2a3405f     ....>.h.,4$8_@..
   2b778:	161dc372 bce2250c 283c498b ff0d9541     r....%...I<(A...
   2b788:	39a80171 080cb3de d8b4e49c 6456c190     q..9..........Vd
   2b798:	7bcb8461 d532b670 486c5c74 d0b85742     a..{p.2.t\lHBW..
   2b7a8:	5051f4a7 537e4165 c31a17a4 963a275e     ..QPeA~S....^':.
   2b7b8:	cb3bab6b f11f9d45 abacfa58 934be303     k.;.E...X.....K.
   2b7c8:	552030fa f6ad766d 9188cc76 25f5024c     .0 Umv..v...L..%
   2b7d8:	fc4fe5d7 d7c52acb 80263544 8fb562a3     ..O..*..D5&..b..
   2b7e8:	49deb15a 6725ba1b 9845ea0e e15dfec0     Z..I..%g..E...].
   2b7f8:	02c32f75 12814cf0 a38d4697 c66bd3f9     u/...L...F....k.
   2b808:	e7038f5f 9515929c ebbf6d7a da955259     _.......zm..YR..
   2b818:	2dd4be83 d3587421 2949e069 448ec9c8     ...-!tX.i.I)...D
   2b828:	6a75c289 78f48e79 6b99583e dd27b971     ..ujy..x>X.kq.'.
   2b838:	b6bee14f 17f088ad 66c920ac b47dce3a     O........ .f:.}.
   2b848:	1863df4a 82e51a31 60975133 4562537f     J.c.1...3Q.`.SbE
   2b858:	e0b16477 84bb6bae 1cfe81a0 94f9082b     wd...k......+...
   2b868:	58704868 198f45fd 8794de6c b7527bf8     hHpX.E..l....{R.
   2b878:	23ab73d3 e2724b02 57e31f8f 2a6655ab     .s.#.Kr....W.Uf*
   2b888:	07b2eb28 032fb5c2 9a86c57b a5d33708     (...../.{....7..
   2b898:	f2302887 b223bfa5 ba02036a 5ced1682     .(0...#.j......\
   2b8a8:	2b8acf1c 92a779b4 f0f307f2 a14e69e2     ...+.y.......iN.
   2b8b8:	cd65daf4 d50605be 1fd13462 8ac4a6fe     ..e.....b4......
   2b8c8:	9d342e53 a0a2f355 32058ae1 75a4f6eb     S.4.U......2...u
   2b8d8:	390b83ec aa4060ef 065e719f 51bd6e10     ...9.`@..q^..n.Q
   2b8e8:	f93e218a 3d96dd06 aedd3e05 464de6bd     .!>....=.>....MF
   2b8f8:	b591548d 0571c45d 6f0406d4 ff605015     .T..].q....o.P`.
   2b908:	241998fb 97d6bde9 cc894043 7767d99e     ...$....C@....gw
   2b918:	bdb0e842 8807898b 38e7195b db79c8ee     B.......[..8..y.
   2b928:	47a17c0a e97c420f c9f8841e 00000000     .|.G.B|.........
   2b938:	83098086 48322bed ac1e1170 4e6c5a72     .....+2Hp...rZlN
   2b948:	fbfd0eff 560f8538 1e3daed5 27362d39     ....8..V..=.9-6'
   2b958:	640a0fd9 21685ca6 d19b5b54 3a24362e     ...d.\h!T[...6$:
   2b968:	b10c0a67 0f9357e7 d2b4ee96 9e1b9b91     g....W..........
   2b978:	4f80c0c5 a261dc20 695a774b 161c121a     ...O .a.KwZi....
   2b988:	0ae293ba e5c0a02a 433c22e0 1d121b17     ....*...."<C....
   2b998:	0b0e090d adf28bc7 b92db6a8 c8141ea9     ..........-.....
   2b9a8:	8557f119 4caf7507 bbee99dd fda37f60     ..W..u.L....`...
   2b9b8:	9ff70126 bc5c72f5 c544663b 345bfb7e     &....r\.;fD.~.[4
   2b9c8:	768b4329 dccb23c6 68b6edfc 63b8e4f1     )C.v.#.....h...c
   2b9d8:	cad731dc 10426385 40139722 2084c611     .1...cB."..@... 
   2b9e8:	7d854a24 f8d2bb3d 11aef932 6dc729a1     $J.}=...2....).m
   2b9f8:	4b1d9e2f f3dcb230 ec0d8652 d077c1e3     /..K0...R.....w.
   2ba08:	6c2bb316 99a970b9 fa119448 2247e964     ..+l.p..H...d.G"
   2ba18:	c4a8fc8c 1aa0f03f d8567d2c ef223390     ....?...,}V..3".
   2ba28:	c787494e c1d938d1 fe8ccaa2 3698d40b     NI...8.........6
   2ba38:	cfa6f581 28a57ade 26dab78e a43fadbf     .....z.(...&..?.
   2ba48:	e42c3a9d 0d507892 9b6a5fcc 62547e46     .:,..xP.._j.F~Tb
   2ba58:	c2f68d13 e890d8b8 5e2e39f7 f582c3af     .........9.^....
   2ba68:	be9f5d80 7c69d093 a96fd52d b3cf2512     .]....i|-.o..%..
   2ba78:	3bc8ac99 a710187d 6ee89c63 7bdb3bbb     ...;}...c..n.;.{
   2ba88:	09cd2678 f46e5918 01ec9ab7 a8834f9a     x&...Yn......O..
   2ba98:	65e6956e 7eaaffe6 0821bccf e6ef15e8     n..e...~..!.....
   2baa8:	d9bae79b ce4a6f36 d4ea9f09 d629b07c     ....6oJ.....|.).
   2bab8:	af31a4b2 312a3f23 30c6a594 c035a266     ..1.#?*1...0f.5.
   2bac8:	37744ebc a6fc82ca b0e090d0 1533a7d8     .Nt7..........3.
   2bad8:	4af10498 f741ecda 0e7fcd50 2f1791f6     ...J..A.P....../
   2bae8:	8d764dd6 4d43efb0 54ccaa4d dfe49604     .Mv...CMM..T....
   2baf8:	e39ed1b5 1b4c6a88 b8c12c1f 7f466551     .....jL..,..QeF.
   2bb08:	049d5eea 5d018c35 73fa8774 2efb0b41     .^..5..]t..sA...
   2bb18:	5ab3671d 5292dbd2 33e91056 136dd647     .g.Z...RV..3G.m.
   2bb28:	8c9ad761 7a37a10c 8e59f814 89eb133c     a.....7z..Y.<...
   2bb38:	eecea927 35b761c9 ede11ce5 3c7a47b1     '....a.5.....Gz<
   2bb48:	599cd2df 3f55f273 791814ce bf73c737     ...Ys.U?...y7.s.
   2bb58:	ea53f7cd 5b5ffdaa 14df3d6f 867844db     ..S..._[o=...Dx.
   2bb68:	81caaff3 3eb968c4 2c382434 5fc2a340     .....h.>4$8,@.._
   2bb78:	72161dc3 0cbce225 8b283c49 41ff0d95     ...r%...I<(....A
   2bb88:	7139a801 de080cb3 9cd8b4e4 906456c1     ..9q.........Vd.
   2bb98:	617bcb84 70d532b6 74486c5c 42d0b857     ..{a.2.p\lHtW..B
   2bba8:	a75051f4 65537e41 a4c31a17 5e963a27     .QP.A~Se....':.^
   2bbb8:	6bcb3bab 45f11f9d 58abacfa 03934be3     .;.k...E...X.K..
   2bbc8:	fa552030 6df6ad76 769188cc 4c25f502     0 U.v..m...v..%L
   2bbd8:	d7fc4fe5 cbd7c52a 44802635 a38fb562     .O..*...5&.Db...
   2bbe8:	5a49deb1 1b6725ba 0e9845ea c0e15dfe     ..IZ.%g..E...]..
   2bbf8:	7502c32f f012814c 97a38d46 f9c66bd3     /..uL...F....k..
   2bc08:	5fe7038f 9c951592 7aebbf6d 59da9552     ..._....m..zR..Y
   2bc18:	832dd4be 21d35874 692949e0 c8448ec9     ..-.tX.!.I)i..D.
   2bc28:	896a75c2 7978f48e 3e6b9958 71dd27b9     .uj...xyX.k>.'.q
   2bc38:	4fb6bee1 ad17f088 ac66c920 3ab47dce     ...O.... .f..}.:
   2bc48:	4a1863df 3182e51a 33609751 7f456253     .c.J...1Q.`3SbE.
   2bc58:	77e0b164 ae84bb6b a01cfe81 2b94f908     d..wk..........+
   2bc68:	68587048 fd198f45 6c8794de f8b7527b     HpXhE......l{R..
   2bc78:	d323ab73 02e2724b 8f57e31f ab2a6655     s.#.Kr....W.Uf*.
   2bc88:	2807b2eb c2032fb5 7b9a86c5 08a5d337     ...(./.....{7...
   2bc98:	87f23028 a5b223bf 6aba0203 825ced16     (0...#.....j..\.
   2bca8:	1c2b8acf b492a779 f2f0f307 e2a14e69     ..+.y.......iN..
   2bcb8:	f4cd65da bed50605 621fd134 fe8ac4a6     .e......4..b....
   2bcc8:	539d342e 55a0a2f3 e132058a eb75a4f6     .4.S...U..2...u.
   2bcd8:	ec390b83 efaa4060 9f065e71 1051bd6e     ..9.`@..q^..n.Q.
   2bce8:	8af93e21 063d96dd 05aedd3e bd464de6     !>....=.>....MF.
   2bcf8:	8db59154 5d0571c4 d46f0406 15ff6050     T....q.]..o.P`..
   2bd08:	fb241998 e997d6bd 43cc8940 9e7767d9     ..$.....@..C.gw.
   2bd18:	42bdb0e8 8b880789 5b38e719 eedb79c8     ...B......8[.y..
   2bd28:	0a47a17c 0fe97c42 1ec9f884 00000000     |.G.B|..........
   2bd38:	86830980 ed48322b 70ac1e11 724e6c5a     ....+2H....pZlNr
   2bd48:	fffbfd0e 38560f85 d51e3dae 3927362d     ......V8.=..-6'9
   2bd58:	d9640a0f a621685c 54d19b5b 2e3a2436     ..d.\h!.[..T6$:.
   2bd68:	67b10c0a e70f9357 96d2b4ee 919e1b9b     ...gW...........
   2bd78:	c54f80c0 20a261dc 4b695a77 1a161c12     ..O..a. wZiK....
   2bd88:	ba0ae293 2ae5c0a0 e0433c22 171d121b     .......*"<C.....
   2bd98:	0d0b0e09 c7adf28b a8b92db6 a9c8141e     .........-......
   2bda8:	198557f1 074caf75 ddbbee99 60fda37f     .W..u.L........`
   2bdb8:	269ff701 f5bc5c72 3bc54466 7e345bfb     ...&r\..fD.;.[4~
   2bdc8:	29768b43 c6dccb23 fc68b6ed f163b8e4     C.v)#.....h...c.
   2bdd8:	dccad731 85104263 22401397 112084c6     1...cB....@".. .
   2bde8:	247d854a 3df8d2bb 3211aef9 a16dc729     J.}$...=...2).m.
   2bdf8:	2f4b1d9e 30f3dcb2 52ec0d86 e3d077c1     ..K/...0...R.w..
   2be08:	166c2bb3 b999a970 48fa1194 642247e9     .+l.p......H.G"d
   2be18:	8cc4a8fc 3f1aa0f0 2cd8567d 90ef2233     .......?}V.,3"..
   2be28:	4ec78749 d1c1d938 a2fe8cca 0b3698d4     I..N8.........6.
   2be38:	81cfa6f5 de28a57a 8e26dab7 bfa43fad     ....z.(...&..?..
   2be48:	9de42c3a 920d5078 cc9b6a5f 4662547e     :,..xP.._j..~TbF
   2be58:	13c2f68d b8e890d8 f75e2e39 aff582c3     ........9.^.....
   2be68:	80be9f5d 937c69d0 2da96fd5 12b3cf25     ]....i|..o.-%...
   2be78:	993bc8ac 7da71018 636ee89c bb7bdb3b     ..;....}..nc;.{.
   2be88:	7809cd26 18f46e59 b701ec9a 9aa8834f     &..xYn......O...
   2be98:	6e65e695 e67eaaff cf0821bc e8e6ef15     ..en..~..!......
   2bea8:	9bd9bae7 36ce4a6f 09d4ea9f 7cd629b0     ....oJ.6.....).|
   2beb8:	b2af31a4 23312a3f 9430c6a5 66c035a2     .1..?*1#..0..5.f
   2bec8:	bc37744e caa6fc82 d0b0e090 d81533a7     Nt7..........3..
   2bed8:	984af104 daf741ec 500e7fcd f62f1791     ..J..A.....P../.
   2bee8:	d68d764d b04d43ef 4d54ccaa 04dfe496     Mv...CM...TM....
   2bef8:	b5e39ed1 881b4c6a 1fb8c12c 517f4665     ....jL..,...eF.Q
   2bf08:	ea049d5e 355d018c 7473fa87 412efb0b     ^.....]5..st...A
   2bf18:	1d5ab367 d25292db 5633e910 47136dd6     g.Z...R...3V.m.G
   2bf28:	618c9ad7 0c7a37a1 148e59f8 3c89eb13     ...a.7z..Y.....<
   2bf38:	27eecea9 c935b761 e5ede11c b13c7a47     ...'a.5.....Gz<.
   2bf48:	df599cd2 733f55f2 ce791814 37bf73c7     ..Y..U?s..y..s.7
   2bf58:	cdea53f7 aa5b5ffd 6f14df3d db867844     .S..._[.=..oDx..
   2bf68:	f381caaf c43eb968 342c3824 405fc2a3     ....h.>.$8,4.._@
   2bf78:	c372161d 250cbce2 498b283c 9541ff0d     ..r....%<(.I..A.
   2bf88:	017139a8 b3de080c e49cd8b4 c1906456     .9q.........Vd..
   2bf98:	84617bcb b670d532 5c74486c 5742d0b8     .{a.2.p.lHt\..BW
   2bfa8:	f4a75051 4165537e 17a4c31a 275e963a     QP..~SeA....:.^'
   2bfb8:	ab6bcb3b 9d45f11f fa58abac e303934b     ;.k...E...X.K...
   2bfc8:	30fa5520 766df6ad cc769188 024c25f5      U.0..mv..v..%L.
   2bfd8:	e5d7fc4f 2acbd7c5 35448026 62a38fb5     O......*&.D5...b
   2bfe8:	b15a49de ba1b6725 ea0e9845 fec0e15d     .IZ.%g..E...]...
   2bff8:	2f7502c3 4cf01281 4697a38d d3f9c66b     ..u/...L...Fk...
   2c008:	8f5fe703 929c9515 6d7aebbf 5259da95     .._.......zm..YR
   2c018:	be832dd4 7421d358 e0692949 c9c8448e     .-..X.!tI)i..D..
   2c028:	c2896a75 8e7978f4 583e6b99 b971dd27     uj...xy..k>X'.q.
   2c038:	e14fb6be 88ad17f0 20ac66c9 ce3ab47d     ..O......f. }.:.
   2c048:	df4a1863 1a3182e5 51336097 537f4562     c.J...1..`3QbE.S
   2c058:	6477e0b1 6bae84bb 81a01cfe 082b94f9     ..wd...k......+.
   2c068:	48685870 45fd198f de6c8794 7bf8b752     pXhH...E..l.R..{
   2c078:	73d323ab 4b02e272 1f8f57e3 55ab2a66     .#.sr..K.W..f*.U
   2c088:	eb2807b2 b5c2032f c57b9a86 3708a5d3     ..(./.....{....7
   2c098:	2887f230 bfa5b223 036aba02 16825ced     0..(#.....j..\..
   2c0a8:	cf1c2b8a 79b492a7 07f2f0f3 69e2a14e     .+.....y....N..i
   2c0b8:	daf4cd65 05bed506 34621fd1 a6fe8ac4     e.........b4....
   2c0c8:	2e539d34 f355a0a2 8ae13205 f6eb75a4     4.S...U..2...u..
   2c0d8:	83ec390b 60efaa40 719f065e 6e1051bd     .9..@..`^..q.Q.n
   2c0e8:	218af93e dd063d96 3e05aedd e6bd464d     >..!.=.....>MF..
   2c0f8:	548db591 c45d0571 06d46f04 5015ff60     ...Tq.]..o..`..P
   2c108:	98fb2419 bde997d6 4043cc89 d99e7767     .$........C@gw..
   2c118:	e842bdb0 898b8807 195b38e7 c8eedb79     ..B......8[.y...
   2c128:	7c0a47a1 420fe97c 841ec9f8 00000000     .G.||..B........
   2c138:	80868309 2bed4832 1170ac1e 5a724e6c     ....2H.+..p.lNrZ
   2c148:	0efffbfd 8538560f aed51e3d 2d392736     .....V8.=...6'9-
   2c158:	0fd9640a 5ca62168 5b54d19b 362e3a24     .d..h!.\..T[$:.6
   2c168:	0a67b10c 57e70f93 ee96d2b4 9b919e1b     ..g....W........
   2c178:	c0c54f80 dc20a261 774b695a 121a161c     .O..a. .ZiKw....
   2c188:	93ba0ae2 a02ae5c0 22e0433c 1b171d12     ......*.<C."....
   2c198:	090d0b0e 8bc7adf2 b6a8b92d 1ea9c814     ........-.......
   2c1a8:	f1198557 75074caf 99ddbbee 7f60fda3     W....L.u......`.
   2c1b8:	01269ff7 72f5bc5c 663bc544 fb7e345b     ..&.\..rD.;f[4~.
   2c1c8:	4329768b 23c6dccb edfc68b6 e4f163b8     .v)C...#.h...c..
   2c1d8:	31dccad7 63851042 97224013 c6112084     ...1B..c.@".. ..
   2c1e8:	4a247d85 bb3df8d2 f93211ae 29a16dc7     .}$J..=...2..m.)
   2c1f8:	9e2f4b1d b230f3dc 8652ec0d c1e3d077     .K/...0...R.w...
   2c208:	b3166c2b 70b999a9 9448fa11 e9642247     +l.....p..H.G"d.
   2c218:	fc8cc4a8 f03f1aa0 7d2cd856 3390ef22     ......?.V.,}"..3
   2c228:	494ec787 38d1c1d9 caa2fe8c d40b3698     ..NI...8.....6..
   2c238:	f581cfa6 7ade28a5 b78e26da adbfa43f     .....(.z.&..?...
   2c248:	3a9de42c 78920d50 5fcc9b6a 7e466254     ,..:P..xj.._TbF~
   2c258:	8d13c2f6 d8b8e890 39f75e2e c3aff582     .........^.9....
   2c268:	5d80be9f d0937c69 d52da96f 2512b3cf     ...]i|..o.-....%
   2c278:	ac993bc8 187da710 9c636ee8 3bbb7bdb     .;....}..nc..{.;
   2c288:	267809cd 5918f46e 9ab701ec 4f9aa883     ..x&n..Y.......O
   2c298:	956e65e6 ffe67eaa bccf0821 15e8e6ef     .en..~..!.......
   2c2a8:	e79bd9ba 6f36ce4a 9f09d4ea b07cd629     ....J.6o....).|.
   2c2b8:	a4b2af31 3f23312a a59430c6 a266c035     1...*1#?.0..5.f.
   2c2c8:	4ebc3774 82caa6fc 90d0b0e0 a7d81533     t7.N........3...
   2c2d8:	04984af1 ecdaf741 cd500e7f 91f62f17     .J..A.....P../..
   2c2e8:	4dd68d76 efb04d43 aa4d54cc 9604dfe4     v..MCM...TM.....
   2c2f8:	d1b5e39e 6a881b4c 2c1fb8c1 65517f46     ....L..j...,F.Qe
   2c308:	5eea049d 8c355d01 877473fa 0b412efb     ...^.]5..st...A.
   2c318:	671d5ab3 dbd25292 105633e9 d647136d     .Z.g.R...3V.m.G.
   2c328:	d7618c9a a10c7a37 f8148e59 133c89eb     ..a.7z..Y.....<.
   2c338:	a927eece 61c935b7 1ce5ede1 47b13c7a     ..'..5.a....z<.G
   2c348:	d2df599c f2733f55 14ce7918 c737bf73     .Y..U?s..y..s.7.
   2c358:	f7cdea53 fdaa5b5f 3d6f14df 44db8678     S..._[....o=x..D
   2c368:	aff381ca 68c43eb9 24342c38 a3405fc2     .....>.h8,4$._@.
   2c378:	1dc37216 e2250cbc 3c498b28 0d9541ff     .r....%.(.I<.A..
   2c388:	a8017139 0cb3de08 b4e49cd8 56c19064     9q..........d..V
   2c398:	cb84617b 32b670d5 6c5c7448 b85742d0     {a...p.2Ht\l.BW.

0002c3a8 <Td4>:
   2c3a8:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
   2c3b8:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
   2c3c8:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
   2c3d8:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
   2c3e8:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
   2c3f8:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
   2c408:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
   2c418:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
   2c428:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
   2c438:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
   2c448:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
   2c458:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
   2c468:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
   2c478:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
   2c488:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
   2c498:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

0002c4a8 <K>:
   2c4a8:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   2c4b8:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   2c4c8:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   2c4d8:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   2c4e8:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   2c4f8:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   2c508:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   2c518:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   2c528:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   2c538:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   2c548:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   2c558:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   2c568:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   2c578:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   2c588:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   2c598:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

0002c5a8 <ecc_oid_secp256r1>:
   2c5a8:	ce48862a 0701033d 50434553 52363532     *.H.=...SECP256R
   2c5b8:	00000031 46464646 46464646 30303030     1...FFFFFFFF0000
   2c5c8:	31303030 30303030 30303030 30303030     0001000000000000
   2c5d8:	30303030 30303030 30303030 46464646     000000000000FFFF
   2c5e8:	46464646 46464646 46464646 46464646     FFFFFFFFFFFFFFFF
   2c5f8:	46464646 00000000 46464646 46464646     FFFF....FFFFFFFF
   2c608:	30303030 31303030 30303030 30303030     0000000100000000
   2c618:	30303030 30303030 30303030 30303030     0000000000000000
   2c628:	46464646 46464646 46464646 46464646     FFFFFFFFFFFFFFFF
   2c638:	46464646 43464646 00000000 36434135     FFFFFFFC....5AC6
   2c648:	38443533 41334141 37453339 42453342     35D8AA3A93E7B3EB
   2c658:	35354442 38393637 43423638 44313536     BD55769886BC651D
   2c668:	30423630 33354343 36463042 45434233     06B0CC53B0F63BCE
   2c678:	45334333 32443732 42343036 00000000     3C3E27D2604B....
   2c688:	46464646 46464646 30303030 30303030     FFFFFFFF00000000
   2c698:	46464646 46464646 46464646 46464646     FFFFFFFFFFFFFFFF
   2c6a8:	36454342 44414146 37313741 34384539     BCE6FAADA7179E84
   2c6b8:	39423346 32434143 33364346 31353532     F3B9CAC2FC632551
   2c6c8:	00000000 37314236 32463144 43323145     ....6B17D1F2E12C
   2c6d8:	37343234 43423846 35453645 34413336     4247F8BCE6E563A4
   2c6e8:	32463034 33303737 31384437 42454432     40F277037D812DEB
   2c6f8:	30413333 31413446 35343933 38393844     33A0F4A13945D898
   2c708:	36393243 00000000 33454634 32453234     C296....4FE342E2
   2c718:	41314546 42394637 37454538 41344245     FE1A7F9B8EE7EB4A
   2c728:	46304337 36314539 45434232 37353333     7C0F9E162BCE3357
   2c738:	31334236 45434535 36424243 38363034     6B315ECECBB64068
   2c748:	46423733 35463135 00000000              37BF51F5....

0002c754 <ecc_sets>:
   2c754:	00000020 00000007 0002c5b0 0002c5bc      ...............
   2c764:	0002c600 0002c644 0002c688 0002c6cc     ....D...........
   2c774:	0002c710 0002c5a8 00000008 0000020e     ................
   2c784:	00000001 00000000 ffffffff 00000000     ................
	...
   2c7bc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   2c7cc:	4a494847 4e4d4c4b 5251504f 56555453     GHIJKLMNOPQRSTUV
   2c7dc:	5a595857 64636261 68676665 6c6b6a69     WXYZabcdefghijkl
   2c7ec:	706f6e6d 74737271 78777675 2f2b7a79     mnopqrstuvwxyz+/
   2c7fc:	00000000 61520a0d 6d6f646e 6d754e20     ......Random Num
   2c80c:	00726562 00000000 0000001f 0000003b     ber.........;...
   2c81c:	0000005a 00000078 00000097 000000b5     Z...x...........
   2c82c:	000000d4 000000f3 00000111 00000130     ............0...
   2c83c:	0000014e 43455441 61462043 72756c69     N...ATECC Failur
   2c84c:	25203a65 00000a78 43455441 38303543     e: %x...ATECC508
   2c85c:	65522041 69736976 203a6e6f 000a7825     A Revision: %x..
   2c86c:	61637461 5f736c74 61657263 6b5f6574     atcatls_create_k
   2c87c:	635f7965 72203a62 25207465 00000a64     ey_cb: ret %d...
   2c88c:	61637461 63655f62 655f6864 203a636e     atcab_ecdh_enc: 
   2c89c:	20746572 000a6425 61637461 5f736c74     ret %d..atcatls_
   2c8ac:	6e676973 7265635f 69666974 65746163     sign_certificate
   2c8bc:	3a62635f 74657220 0a642520 00000000     _cb: ret %d.....
   2c8cc:	61637461 5f736c74 69726576 735f7966     atcatls_verify_s
   2c8dc:	616e6769 65727574 3a62635f 74657220     ignature_cb: ret
   2c8ec:	0a642520 00000000 000108f6 000108de      %d.............
   2c8fc:	000108e4 000108ea 000108f0              ............

0002c908 <ecc_clikey_der_256>:
   2c908:	01027730 f8200401 bd6b92cf a8f1281e     0w.... ...k..(..
   2c918:	4f23a1ab 88187432 c77ead50 8ff892ec     ..#O2t..P.~.....
   2c928:	56af4d97 a0c76589 2a08060a 3dce4886     .M.V.e.....*.H.=
   2c938:	a1070103 00420344 f4bf5504 9a50440f     ....D.B..U...DP.
   2c948:	b79bce3d f54dc5f0 ecd47b70 80198e24     =.....M.p{..$...
   2c958:	a24c5aec 2c620324 a2efda9b 84431235     .ZL.$.b,....5.C.
   2c968:	56c61676 01cc0695 75f6bda9 bdf7421a     v..V.......u.B..
   2c978:	2236b2a9 7f5dc75f 000000b4              ..6"_.].....

0002c984 <ecc_key_der_256>:
   2c984:	01027730 45200401 730269b6 a1856c9c     0w.... E.i.s.l..
   2c994:	e8725b38 c4acc7e8 35538d03 286cfa04     8[r.......S5..l(
   2c9a4:	e18d34dc a08c09a8 2a08060a 3dce4886     .4.........*.H.=
   2c9b4:	a1070103 00420344 ac33bb04 4a50274c     ....D.B...3.L'PJ
   2c9c4:	04a54ac6 9fde3cc3 2d72db36 2bea94ce     .J...<..6.r-...+
   2c9d4:	0920cbfa e8162c39 afe90261 9302d34d     .. .9,..a...M...
   2c9e4:	975b319a f07f2192 91da18cf 86340211     .1[..!........4.
   2c9f4:	335820e8 8934800b 000000d8 65207325     . X3..4.....%s e
   2ca04:	726f7272 25203d20 00000a64 6c697542     rror = %d...Buil
   2ca14:	73762064 6e757220 656d6974 74616d20     d vs runtime mat
   2ca24:	696d2068 74616d73 000a6863 6c697542     h mismatch..Buil
   2ca34:	73762064 6e757220 656d6974 73616620     d vs runtime fas
   2ca44:	74616d74 50462068 58414d5f 5449425f     tmath FP_MAX_BIT
   2ca54:	696d2053 74616d73 000a6863 6f727265     S mismatch..erro
   2ca64:	20202072 73657420 61662074 64656c69     r    test failed
   2ca74:	00000a21 6f727265 20202072 73657420     !...error    tes
   2ca84:	61702074 64657373 00000a21 65736162     t passed!...base
   2ca94:	20203436 73657420 61662074 64656c69     64   test failed
   2caa4:	00000a21 65736162 20203436 73657420     !...base64   tes
   2cab4:	61702074 64657373 00000a21 206e7361     t passed!...asn 
   2cac4:	20202020 73657420 61662074 64656c69          test failed
   2cad4:	00000a21 206e7361 20202020 73657420     !...asn      tes
   2cae4:	61702074 64657373 00000a21 20414853     t passed!...SHA 
   2caf4:	20202020 73657420 61662074 64656c69          test failed
   2cb04:	00000a21 20414853 20202020 73657420     !...SHA      tes
   2cb14:	61702074 64657373 00000a21 2d414853     t passed!...SHA-
   2cb24:	20363532 73657420 61662074 64656c69     256  test failed
   2cb34:	00000a21 2d414853 20363532 73657420     !...SHA-256  tes
   2cb44:	61702074 64657373 00000a21 68736148     t passed!...Hash
   2cb54:	20202020 73657420 61662074 64656c69          test failed
   2cb64:	00000a21 68736148 20202020 73657420     !...Hash     tes
   2cb74:	61702074 64657373 00000a21 43414d48     t passed!...HMAC
   2cb84:	4148532d 73657420 61662074 64656c69     -SHA test failed
   2cb94:	00000a21 43414d48 4148532d 73657420     !...HMAC-SHA tes
   2cba4:	61702074 64657373 00000a21 43414d48     t passed!...HMAC
   2cbb4:	4148532d 20363532 74736574 69616620     -SHA256 test fai
   2cbc4:	2164656c 0000000a 43414d48 4148532d     led!....HMAC-SHA
   2cbd4:	20363532 74736574 73617020 21646573     256 test passed!
   2cbe4:	0000000a 43414d47 20202020 73657420     ....GMAC     tes
   2cbf4:	61662074 64656c69 00000a21 43414d47     t failed!...GMAC
   2cc04:	20202020 73657420 61702074 64657373          test passed
   2cc14:	00000a21 20534541 20202020 73657420     !...AES      tes
   2cc24:	61662074 64656c69 00000a21 20534541     t failed!...AES 
   2cc34:	20202020 73657420 61702074 64657373          test passed
   2cc44:	00000a21 31534541 20203239 73657420     !...AES192   tes
   2cc54:	61662074 64656c69 00000a21 31534541     t failed!...AES1
   2cc64:	20203239 73657420 61702074 64657373     92   test passed
   2cc74:	00000a21 32534541 20203635 73657420     !...AES256   tes
   2cc84:	61662074 64656c69 00000a21 32534541     t failed!...AES2
   2cc94:	20203635 73657420 61702074 64657373     56   test passed
   2cca4:	00000a21 2d534541 204d4347 73657420     !...AES-GCM  tes
   2ccb4:	61662074 64656c69 00000a21 2d534541     t failed!...AES-
   2ccc4:	204d4347 73657420 61702074 64657373     GCM  test passed
   2ccd4:	00000a21 444e4152 20204d4f 73657420     !...RANDOM   tes
   2cce4:	61662074 64656c69 00000a21 444e4152     t failed!...RAND
   2ccf4:	20204d4f 73657420 61702074 64657373     OM   test passed
   2cd04:	00000a21 20434345 20202020 73657420     !...ECC      tes
   2cd14:	61662074 64656c69 00000a21 20434345     t failed!...ECC 
   2cd24:	20202020 73657420 61702074 64657373          test passed
   2cd34:	00000a21 20434345 66667562 74207265     !...ECC buffer t
   2cd44:	20747365 6c696166 0a216465 00000000     est failed!.....
   2cd54:	20434345 66667562 74207265 20747365     ECC buffer test 
   2cd64:	73736170 0a216465 00000000 67676f6c     passed!.....logg
   2cd74:	20676e69 73657420 61662074 64656c69     ing  test failed
   2cd84:	00000a21 67676f6c 20676e69 73657420     !...logging  tes
   2cd94:	61702074 64657373 00000a21 6574756d     t passed!...mute
   2cda4:	20202078 73657420 61662074 64656c69     x    test failed
   2cdb4:	00000a21 6574756d 20202078 73657420     !...mutex    tes
   2cdc4:	61702074 64657373 00000a21 74736554     t passed!...Test
   2cdd4:	6d6f6320 74656c70 00000a65 ffffff86      complete.......
   2cde4:	ffffff85 ffffff84 ffffff81 ffffff80     ................
   2cdf4:	ffffff7f ffffff5d ffffff5c ffffff5b     ....]...\...[...
   2ce04:	ffffff5a ffffff59 ffffff58 ffffff57     Z...Y...X...W...
   2ce14:	ffffff4d ffffff17 00000000 64472b41     M...........A+Gd
   2ce24:	00000000 64472b41 000a0d20 20414141     ....A+Gd ...AAA 
   2ce34:	3d6a6447 00000000 7e414141 3d6a6447     Gdj=....AAA~Gdj=
   2ce44:	00000000 64472b41 00000020 2f435452     ....A+Gd ...RTC/
   2ce54:	656d6954 746f6e20 74657320 00000a21     Time not set!...
   2ce64:	36310d17 31313830 37303032 005a3733     ..160811200737Z.
   2ce74:	00000000 eea339da 0d4b6b5e efbf5532     .....9..^kK.2U..
   2ce84:	90186095 0907d8af 00000000 00636261     .`..........abc.
   2ce94:	363e99a9 6a810647 71253eba 6cc25078     ..>6G..j.>%qxP.l
   2cea4:	9dd8d09c 00000000 64636261 65646362     ........abcdbcde
   2ceb4:	66656463 67666564 68676665 69686766     cdefdefgefghfghi
   2cec4:	6a696867 6b6a6968 6c6b6a69 6d6c6b6a     ghijhijkijkljklm
   2ced4:	6e6d6c6b 6f6e6d6c 706f6e6d 71706f6e     klmnlmnomnopnopq
   2cee4:	00000000 443e9884 6ed23b1c a14aaeba     ......>D.;.n..J.
   2cef4:	e52951f9 f17046e5 00000000 61616161     .Q)..Fp.....aaaa
   2cf04:	61616161 61616161 61616161 61616161     aaaaaaaaaaaaaaaa
   2cf14:	61616161 61616161 61616161 61616161     aaaaaaaaaaaaaaaa
   2cf24:	61616161 61616161 61616161 61616161     aaaaaaaaaaaaaaaa
   2cf34:	61616161 61616161 61616161 00000000     aaaaaaaaaaaa....
   2cf44:	82ba9800 42165c4b 12a1d77b 2a445a2a     ....K\.B{...*ZD*
   2cf54:	4d64ec25 00000000 61616161 61616161     %.dM....aaaaaaaa
   2cf64:	61616161 61616161 61616161 61616161     aaaaaaaaaaaaaaaa
   2cf74:	61616161 61616161 61616161 61616161     aaaaaaaaaaaaaaaa
   2cf84:	61616161 61616161 61616161 61616161     aaaaaaaaaaaaaaaa
   2cf94:	61616161 61616161 61616161 61616161     aaaaaaaaaaaaaaaa
   2cfa4:	61616161 61616161 61616161 61616161     aaaaaaaaaaaaaaaa
   2cfb4:	61616161 61616161 61616161 61616161     aaaaaaaaaaaaaaaa
   2cfc4:	61616161 61616161 61616161 61616161     aaaaaaaaaaaaaaaa
   2cfd4:	61616161 61616161 00000000 db3f5bad     aaaaaaaa.....[?.
   2cfe4:	786752cb 2f9d83c2 53a71e15 a0265e99     .Rgx.../...S.^&.
   2cff4:	00000000 4802778b d3dbe839 2405f49a     .....w.H9......$
   2d004:	9e2d1266 ac0ad9c5 00000000 42c4b0e3     f.-............B
   2d014:	141cfc98 c8f4fb9a 24b96f99 e441ae27     .........o.$'.A.
   2d024:	4c939b64 1b9995a4 55b85278 00000000     d..L....xR.U....
   2d034:	bf1678ba eacf018f de404141 2322ae5d     .x......AA@.]."#
   2d044:	a36103b0 9c7a1796 61ff10b4 ad1500f2     ..a...z....a....
   2d054:	00000000 616a8d24 b83806d2 9326c0e5     ....$.ja..8...&.
   2d064:	39603e0c 59e43ca3 6721ff64 d4edecf6     .>`9.<.Yd.!g....
   2d074:	c106db19 00000000 873e7827 fb4e3a96     ........'x>..:N.
   2d084:	31b52968 b457bac9 7f79454f 63bd7067     h).1..W.OEy.gp.c
   2d094:	800dbf7f e0babd7c 00000000 33323130     ....|.......0123
   2d0a4:	37363534 62613938 66656463 33323130     456789abcdef0123
   2d0b4:	37363534 62613938 66656463 33323130     456789abcdef0123
   2d0c4:	00003534 06050403 00000807 08070503     45..............
   2d0d4:	00000000 02010900 0d0c0b0a 0b0a0201     ................
   2d0e4:	000e0d0c 54206948 65726568 00000000     ....Hi There....
   2d0f4:	863117b6 64720555 b6c08be2 8e8c37fb     ..1.U.rd.....7..
   2d104:	00be46f1 00000000 74616877 206f6420     .F......what do 
   2d114:	77206179 20746e61 20726f66 68746f6e     ya want for noth
   2d124:	3f676e69 00000000 6adffcef a22febe5     ing?.......j../.
   2d134:	d51674d2 9cdf84f1 797c9a25 00000000     .t......%.|y....
   2d144:	dddddddd dddddddd dddddddd dddddddd     ................
   2d154:	dddddddd dddddddd dddddddd dddddddd     ................
   2d164:	dddddddd dddddddd dddddddd dddddddd     ................
   2d174:	0000dddd 42735d12 cd11acb9 f49aa391     .....]sB........
   2d184:	4f7ba18a d375f163 00000000 0b0b0b0b     ..{Oc.u.........
   2d194:	0b0b0b0b 0b0b0b0b 0b0b0b0b 0b0b0b0b     ................
   2d1a4:	00000000 6566654a 00000000 aaaaaaaa     ....Jefe........
   2d1b4:	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa     ................
   2d1c4:	00000000 0002d190 0002d1a8 0002d1b0     ................
   2d1d4:	614c34b0 5338dbd8 ceafa85c 2bf10baf     .4La..8S\......+
   2d1e4:	00c21d88 a73d83c9 6c37e926 f7cf322e     ......=.&.7l.2..
   2d1f4:	00000000 46c1dc5b 4e7560bf 2624046a     ....[..F.`uNj.$&
   2d204:	c7759508 083f005a 8339279d b958ec9d     ..u.Z.?..'9...X.
   2d214:	4338ec64 00000000 1ea93e77 460e8036     d.8C....w>..6..F
   2d224:	ebb84d85 a78191d0 8b095929 22c1f83e     .M......)Y..>.."
   2d234:	145563d9 fe65d5ce 00000000 d44fe586     .cU...e.......O.
   2d244:	7e5d7248 23e2cf5d af28c853 b41e7848     Hr]~]..#S.(.Hx..
   2d254:	0681ae8c 98d4e1a7 463e9f94 00000000     ..........>F....
   2d264:	0002d190 0002d1a8 0002d1b0 0002d1b0     ................
   2d274:	33323130 37363534 62613938 66656463     0123456789abcdef
   2d284:	33323130 37363534 62613938 66656463     0123456789abcdef
   2d294:	33323130 37363534 33323130 37363534     0123456701234567
   2d2a4:	62613938 66656463 33323130 37363534     89abcdef01234567
   2d2b4:	62613938 66656463 34333231 38373635     89abcdef12345678
   2d2c4:	62613039 66656463 00000000 20776f6e     90abcdef....now 
   2d2d4:	74207369 74206568 20656d69 20726f66     is the time for 
   2d2e4:	206c6c61 33323130 37363534 62613938     all 0123456789ab
   2d2f4:	66656463 00202020 34333231 38373635     cdef   .12345678
   2d304:	62613039 66656463 00202020 57929495     90abcdef   ....W
   2d314:	5381425f 469dcc2c cb33a277 e2bec16b     _B.S,..Fw.3.k...
   2d324:	969f402e 117e3de9 2a179373 578a2dae     .@...=~.s..*.-.W
   2d334:	9cac031e ac6fb79e 518eaf45 acab4976     ......o.E..QvI..
   2d344:	46b21981 9b8ee9ce 7d19e912 9bcb8650     ...F.......}P...
   2d354:	ee197250 3a11db95 b2787691 16157e2b     Pr.....:.vx.+~..
   2d364:	a6d2ae28 8815f7ab 3c4fcf09 03020100     (.........O<....
   2d374:	07060504 0b0a0908 0f0e0d0c e2bec16b     ............k...
   2d384:	969f402e 117e3de9 2a179373 b21d024f     .@...=~.s..*O...
   2d394:	3d63bc43 3a187871 e871a09f f7b0738e     C.c=qx.:..q..s..
   2d3a4:	52640eda 2bf310c8 e5799080 d2eaf862     ..dR...+..y.b...
   2d3b4:	7b6b2c52 044c8cf5 baf1e5d6 fbab9e77     R,k{..L.....w...
   2d3c4:	d6fb7b5f 10eb3d60 be71ca15 f0ae732b     _{..`=....q.+s..
   2d3d4:	81777d85 072c351f d708613b a310982d     .}w..5,.;a..-...
   2d3e4:	f4df1409 1cfa8e29 62cf29cf bf2468ae     ....)....).b.h$.
   2d3f4:	fc5795c1 3fa9586f fa07d2e1 6d2fede4     ..W.oX.?....../m
   2d404:	cdbc38cc ad36c56b 95139b91 0138d6f5     .8..k.6.......8.
   2d414:	68809ff9 aca55cd6 af2d8763 0139b916     ...h.\..c.-...9.
   2d424:	d2af1f02 73394638 5602e8ff b1c6b1e5     ....8F9s...V....
   2d434:	9c4ecedf 3d1091d2 33e6e47f 9de7d951     ..N....=...3Q...
   2d444:	1e39fd3d 46106732 a92d2158 dbb72165     =.9.2g.FX!-.e!..
   2d454:	ef652454 f7169359 05567a3a f2d9a209     T$e.Y...:zV.....
   2d464:	38bb6d01 fe6da7da eb84a37d 640324f1     .m.8..m.}....$.d
   2d474:	3aef9307 782f78da e3ff8ac9 eca9344b     ...:.x/x....K4..
   2d484:	4b526357 16561d19 b7f647c5 f4a39a60     WcRK..V..G..`...
   2d494:	fec01b54 adda3199 0c5de12e 59ecaf33     T....1....].3..Y
   2d4a4:	68af5bc4 131b5e9a 193642ae cc451eb0     .[.h.^...B6...E.
   2d4b4:	baaa8830 813da49f 3f8281d4 664a2c5a     0.....=....?Z,Jf
   2d4c4:	45138746 e1d54b6a f9804201 683cf544     F..EjK...B..D.<h
   2d4d4:	ffb26411 253231d9 e50684f8 c50959a5     .d...12%.....Y..
   2d4e4:	9a26f5af 53a9a786 daf73415 3d304c2e     ..&....S.4...L0=
   2d4f4:	728a318a 950c3c1c 53096895 240ecf2f     .1.r.<...h.S/..$
   2d504:	25b5a649 f5ed6ab1 57e60daa 397b63ba     I..%.j.....W.c{9
   2d514:	cefaedfe efbeadde cefaedfe efbeadde     ................
   2d524:	d2daadab 92e9fffe 1c736586 948f6a6d     .........es.mj..
   2d534:	08833067 92e9fffe 1c736586 948f6a6d     g0.......es.mj..
   2d544:	08833067 bebafeca addbcefa 88f8cade     g0..............
   2d554:	f0c12d52 077d5699 a3377ff4 7d42842a     R-...V}...7.*.B}
   2d564:	dc8c3a64 c9c0e5bf bda29875 aad15525     d:......u...%U..
   2d574:	488eb08c 3dbb0d59 108bb0a7 38888256     ...HY..=....V..8
   2d584:	631ef6c5 0a7aba93 62f6c9bc ce6efc76     ...c..z....bv.n.
   2d594:	68174e0f 5388dfcd 1b552dbb 92e9fffe     .N.h...S.-U.....
   2d5a4:	1c736586 948f6a6d 08833067 92e9fffe     .es.mj..g0......
   2d5b4:	1c736586 5d221393 e50684f8 5a9c9055     .es..."]....U..Z
   2d5c4:	aa6952ff 38957a6a a17d4f53 d203c3e4     .Ri.jz.8SO}.....
   2d5d4:	28a718a3 51c9c0c3 39958056 42e2f0fc     ...(...QV..9...B
   2d5e4:	54526b9a f5dbae16 576adea0 9bb337a6     .kRT......jW.7..
   2d5f4:	68887ed2 3c24e31c 5a163048 fff9dc8f     .~.h..$<H0.Z....
   2d604:	d8a1e91d ef47b4e6 98b7f76e 456e6628     ......G.n...(fnE
   2d614:	1290e781 d9dd34af 5837f0e2 b32d299b     .....4....7X.)-.
   2d624:	67037ce6 e722fa45 3b37b7e9 ff66f5dc     .|.gE."...7;..f.
   2d634:	bb251c29 c38f56b8 d9a676d3 1f45ce57     ).%..V...v..W.E.
   2d644:	a535e2a5 3ba21a8e e2afcb77 03d701bb     ..5....;w.......
   2d654:	1a101c81 d2ffe035 4bf2ba91 9db35f6b     ....5......Kk_..
   2d664:	4f7ac5c1 c24d51f3 07d0f0d5 d7dcfc40     ..zO.QM.....@...
   2d674:	f18bd74a 55607c3e 54dd5150 01ed9006     J...>|`UPQ.T....
   2d684:	95c6dd34 f92a2e31 a61e7a57 e949c989     4...1.*.Wz....I.
   2d694:	01af04c8 b304564d c8f25994 c804b1d1     ....MV...Y......
   2d6a4:	941ebf15 168f8ce2 63cdad82 d9a93f8d     ...........c.?..
   2d6b4:	0041e8f3 77071ed6 629ddb88 43d02e17     ..A....w...b...C
   2d6c4:	6df110aa 1bc47d22 b2ecf740 d4aa6d52     ...m"}..@...Rm..
   2d6d4:	f41d2574 5bf69e88 066e9cee 03454515     t%.....[..n..EE.
   2d6e4:	a724601a 872c8194 18154e07 af35b834     .`$...,..N..4.5.
   2d6f4:	567ea51c 8e7981c6 9fb0da3d bbb0838d     ..~V..y.=.......
   2d704:	0091b614 efbeadde 43d02e17 6df110aa     ...........C...m
   2d714:	1bc47d22 e21af9a3 03b3a61b 2f476498     "}...........dG/
   2d724:	c6444118 0ecd62af 00000000 37326166     .AD..b......fa27
   2d734:	62663733 38343339 39316438 66656163     37fb93488d19caef
   2d744:	65613131 66616637 66376236 64636234     11ae7faf6b7f4bcd
   2d754:	32623736 33653638 34356366 36613865     67b286e3fc54e8a6
   2d764:	62326335 65613437 30626363 00000000     5c2b74aeccb0....
   2d774:	63633464 61643664 38393665 61383032     d4ccd6dae698208a
   2d784:	33633861 33663661 35346539 64303135     a8c3a6f39e45510d
   2d794:	65623330 32623930 34323166 30636662     03be09b2f124bfc0
   2d7a4:	35383736 32336336 62396634 39306434     67856c324f9b4d09
   2d7b4:	00000000 34336562 38616162 30343064     ....be34baa8d040
   2d7c4:	39623361 39663139 62353730 61623635     a3b991f9075b56ba
   2d7d4:	66323932 62353537 34653039 63643662     292f755b90e4b6dc
   2d7e4:	61643031 37363364 33633531 64666333     10dad36715c33cfd
   2d7f4:	35326361 00000000 32386232 64356636     ac25....2b826f5d
   2d804:	32653434 36623064 33356564 39646131     44e2d0b6de531ad9
   2d814:	31356236 30663865 66363563 61656664     6b51e8f0c56fdfea
   2d824:	32633364 39383633 64346532 61653438     d3c236892e4d84ea
   2d834:	33636663 63353762 00000000 34323261     cfc3b75c....a224
   2d844:	32366238 64333063 61353362 36646337     8b62c03db35a7cd6
   2d854:	61386533 61303231 31323533 64393861     3e8a120a3521a89d
   2d864:	66326433 66663136 33303939 31326135     3d2f61ff99035a21
   2d874:	65613834 33653233 38343261 00000000     48ae32e3a248....
   2d884:	5d6f822b b6d0e244 d91a53de f0e8516b     +.o]D....S..kQ..
   2d894:	eadf6fc5 8936c2d3 ea844d2e 5cb7c3cf     .o....6..M.....\
   2d8a4:	00000000 628b24a2 5ab33dc0 8a3ed67c     .....$.b.=.Z|.>.
   2d8b4:	21350a12 2f3d9da8 0399ff61 ae48215a     ..5!..=/a...Z!H.
   2d8c4:	48a2e332 00000000 50434553 52363532     2..H....SECP256R
   2d8d4:	00000031 74736574 6c6f7720 4c535366     1...test wolfSSL
   2d8e4:	43434520 62757020 2063696c 006e6567      ECC public gen.
   2d8f4:	5f636365 74736574 7275635f 735f6576     ecc_test_curve_s
   2d904:	20657a69 66206425 656c6961 203a2164     ize %d failed!: 
   2d914:	000a6425 5f636365 74736574 6365765f     %d..ecc_test_vec
   2d924:	20726f74 66206425 656c6961 203a2164     tor %d failed!: 
   2d934:	000a6425 72657645 656e6f79 74656720     %d..Everyone get
   2d944:	72462073 79616469 66666f20 0000002e     s Friday off....
   2d954:	659502f2 592af6cb ff052c39 feaf290e     ...e..*Y9,...)..
   2d964:	998c3347 8364588d 330a58a6 5f5f840b     G3...Xd..X.3..__
   2d974:	65346137 38373832 31613039 61373461     7a4e287890a1a47a
   2d984:	35343364 32356537 37663266 33386136     d3457e52f2f76a83
   2d994:	36346563 39636263 31363734 63306436     ce46cbc947616d0c
   2d9a4:	38616162 33323332 61383138 64333937     baa82323818a793d
   2d9b4:	00000000 34636565 66343830 39326235     ....eec4084f5b29
   2d9c4:	32666265 34346339 33656363 35303362     ebf29c44cce3b305
   2d9d4:	30313639 66323239 30336238 65366165     9610922f8b30ea6e
   2d9e4:	31313838 61323437 33323763 38656638     8811742ac7238fe8
   2d9f4:	38303337 00000000 34316338 33393762     7308....8c14b793
   2da04:	39316263 65373331 61333233 65326436     cb19137e323a6d2e
   2da14:	37386132 61636230 61376532 65333934     2a870bca2e7a493e
   2da24:	35313163 61336233 65663539 34613862     c1153b3a95feb8a4
   2da34:	66333738 38306438 00000000 5f636365     873f8d08....ecc_
   2da44:	74736574 6b616d5f 75705f65 61662062     test_make_pub fa
   2da54:	64656c69 25203a21 00000a64 72657645     iled!: %d...Ever
   2da64:	656e6f79 74656720 72462073 79616469     yone gets Friday
   2da74:	66666f20 6365202e 00702063 6b6f6f74      off. ecc p.took
   2da84:	00000000 6f636573 0073646e 6c637943     ....seconds.Cycl
   2da94:	70207365 62207265 00657479 009282e3     es per byte.....
   2daa4:	e392a7e7 87e5a781 8690e7a6 00000000     ................
   2dab4:	9083e331 e3a482e3 81e38883 9f81e382     1...............
   2dac4:	e38a82e3 82e3ae81 a482e3b5 e3af82e3     ................
   2dad4:	95e6ab83 000000b0 6c627570 00006369     ........public..
   2dae4:	76697270 00657461 2079656b 006e6567     private.key gen.
   2daf4:	65726761 00000065 6e676973 00000000     agree...sign....
   2db04:	69726576 00007966 72636e65 69747079     verify..encrypti
   2db14:	00006e6f 72636564 69747079 00006e6f     on..decryption..
   2db24:	e9ac85e5 8de98b96 000000b5 e598a7e7     ................
   2db34:	8de986af 000000b5 e7b58de9 88e69f94     ................
   2db44:	00000090 e5b58de9 9ce6b185 00000089     ................
   2db54:	e5b2bde7 00008d90 e89ca4e6 0000bca8     ................
   2db64:	e5979ae6 8ce5b78f 00000096 e5a9bee5     ................
   2db74:	8ce5b78f 00000096 2073706f 6b6f6f74     ........ops took
   2db84:	00000000 00636573 00677661 2f73706f     ....sec.avg.ops/
   2db94:	00636573 e59e9be5 90e7a687 9282e386     sec.............
   2dba4:	00000000 e392a7e7 aee5a781 bd96e69f     ................
   2dbb4:	00000000 e5b3b9e5 0000879d e7a687e5     ................
   2dbc4:	e72f8690 000092a7 0000424d 0000424b     ../.....MB..KB..
   2dbd4:	65747962 00000073 0000426d 0000426b     bytes...mB..kB..
   2dbe4:	252c7325 2c66332e 00000000 36312d25     %s,%.3f,....%-16
   2dbf4:	20732573 302e3525 73252066 20732520     s%s %5.0f %s %s 
   2dc04:	332e3525 73252066 3825202c 2066332e     %5.3f %s, %8.3f 
   2dc14:	732f7325 00000000 00000000 00007325     %s/s........%s..
   2dc24:	636e6542 72616d68 7325206b 69616620     Benchmark %s fai
   2dc34:	3a64656c 0a642520 00000000 7973410a     led: %d......Asy
   2dc44:	74656d6d 20636972 68706943 3a737265     mmetric Ciphers:
   2dc54:	00000a0a 6f676c41 68746972 76612c6d     ....Algorithm,av
   2dc64:	736d2067 73706f2c 6365732f 00000a2c     g ms,ops/sec,...
   2dc74:	25207325 73252064 332e252c 2e252c66     %s %d %s,%.3f,%.
   2dc84:	0a2c6633 00000000 73362d25 64352520     3f,.....%-6s %5d
   2dc94:	392d2520 73252073 64362520 20732520      %-9s %s %6d %s 
   2dca4:	332e3525 73252066 7325202c 2e352520     %5.3f %s, %s %5.
   2dcb4:	6d206633 25202c73 2066332e 000a7325     3f ms, %.3f %s..
   2dcc4:	636e6542 72616d68 7325206b 20732520     Benchmark %s %s 
   2dcd4:	66206425 656c6961 25203a64 00000a64     %d failed: %d...
   2dce4:	74696e49 20474e52 6c696166 000a6465     InitRNG failed..
   2dcf4:	636e6542 72616d68 6c62206b 206b636f     Benchmark block 
   2dd04:	66667562 61207265 636f6c6c 69616620     buffer alloc fai
   2dd14:	2164656c 0000000a 666c6f77 70797243     led!....wolfCryp
   2dd24:	6e495f74 66207469 656c6961 64252064     t_Init failed %d
   2dd34:	0000000a 666c6f77 70797243 65422074     ....wolfCrypt Be
   2dd44:	6d68636e 206b7261 6f6c6228 62206b63     nchmark (block b
   2dd54:	73657479 2c642520 6e696d20 312e2520     ytes %d, min %.1
   2dd64:	65732066 61652063 0a296863 00000000     f sec each).....
   2dd74:	73696854 726f6620 2074616d 6f6c6c61     This format allo
   2dd84:	79207377 7420756f 6165206f 796c6973     ws you to easily
   2dd94:	706f6320 68742079 756f2065 74757074      copy the output
   2dda4:	206f7420 73632061 69662076 002e656c      to a csv file..
   2ddb4:	79530a0a 74656d6d 20636972 68706943     ..Symmetric Ciph
   2ddc4:	3a737265 00000a0a 6f676c41 68746972     ers:....Algorith
   2ddd4:	424d2c6d 432c732f 656c6379 65702073     m,MB/s,Cycles pe
   2dde4:	79622072 0a2c6574 00000000 6f727265     r byte,.....erro
   2ddf4:	64252072 74697720 6f772068 7243666c     r %d with wolfCr
   2de04:	5f747079 61656c43 0a70756e 00000000     ypt_Cleanup.....
   2de14:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   2de24:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   2de34:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   2de44:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   2de54:	2d2d2d2d 2d2d2d2d 2d2d2d2d 000a2d2d     --------------..
   2de64:	2e302e34 00000030 6c6f7720 4c535366     4.0.0... wolfSSL
   2de74:	72657620 6e6f6973 0a732520 00000000      version %s.....
   2de84:	636e6542 72616d68 6f63206b 656c706d     Benchmark comple
   2de94:	000a6574 74696e49 20474e52 6c696166     te..InitRNG fail
   2dea4:	25206465 00000a64 00474e52 49736541     ed %d...RNG.AesI
   2deb4:	2074696e 6c696166 202c6465 20746572     nit failed, ret 
   2dec4:	6425203d 0000000a 53736541 654b7465     = %d....AesSetKe
   2ded4:	61662079 64656c69 6572202c 203d2074     y failed, ret = 
   2dee4:	000a6425 2d534541 2d383231 2d434243     %d..AES-128-CBC-
   2def4:	00636564 2d534541 2d383231 2d434243     dec.AES-128-CBC-
   2df04:	00636e65 2d534541 2d323931 2d434243     enc.AES-192-CBC-
   2df14:	00636564 2d534541 2d323931 2d434243     dec.AES-192-CBC-
   2df24:	00636e65 2d534541 2d363532 2d434243     enc.AES-256-CBC-
   2df34:	00636564 2d534541 2d363532 2d434243     dec.AES-256-CBC-
   2df44:	00636e65 47736541 65536d63 79654b74     enc.AesGcmSetKey
   2df54:	69616620 2c64656c 74657220 25203d20      failed, ret = %
   2df64:	00000a64 636e6562 65615f68 6d636773     d...bench_aesgcm
   2df74:	69616620 3a64656c 0a642520 00000000      failed: %d.....
   2df84:	2d534541 2d383231 2d4d4347 00636564     AES-128-GCM-dec.
   2df94:	2d534541 2d383231 2d4d4347 00636e65     AES-128-GCM-enc.
   2dfa4:	2d534541 2d323931 2d4d4347 00636564     AES-192-GCM-dec.
   2dfb4:	2d534541 2d323931 2d4d4347 00636e65     AES-192-GCM-enc.
   2dfc4:	2d534541 2d363532 2d4d4347 00636564     AES-256-GCM-dec.
   2dfd4:	2d534541 2d363532 2d4d4347 00636e65     AES-256-GCM-enc.
   2dfe4:	74696e49 20616853 6c696166 202c6465     InitSha failed, 
   2dff4:	20746572 6425203d 0000000a 00414853     ret = %d....SHA.
   2e004:	74696e49 32616853 655f3635 61662078     InitSha256_ex fa
   2e014:	64656c69 6572202c 203d2074 000a6425     iled, ret = %d..
   2e024:	2d414853 00363532 485f6377 4963616d     SHA-256.wc_HmacI
   2e034:	2074696e 6c696166 66206465 2520726f     nit failed for %
   2e044:	72202c73 3d207465 0a642520 00000000     s, ret = %d.....
   2e054:	485f6377 5363616d 654b7465 61662079     wc_HmacSetKey fa
   2e064:	64656c69 726f6620 2c732520 74657220     iled for %s, ret
   2e074:	25203d20 00000a64 43414d48 4148532d      = %d...HMAC-SHA
   2e084:	00000000 0b0b0b0b 0b0b0b0b 0b0b0b0b     ................
   2e094:	0b0b0b0b 0b0b0b0b 43414d48 4148532d     ........HMAC-SHA
   2e0a4:	00363532 0b0b0b0b 0b0b0b0b 0b0b0b0b     256.............
   2e0b4:	0b0b0b0b 0b0b0b0b 0b0b0b0b 0b0b0b0b     ................
   2e0c4:	0b0b0b0b 00434345 48444345 00000045     ....ECC.ECDHE...
   2e0d4:	53444345 00000041                       ECDSA...

0002e0dc <bench_key_buf>:
   2e0dc:	67452301 efcdab89 98badefe 10325476     .#Eg........vT2.
   2e0ec:	efcdab89 67452301 67452301 efcdab89     .....#Eg.#Eg....

0002e0fc <bench_iv_buf>:
   2e0fc:	78563412 efcdab90 01010101 01010101     .4Vx............
   2e10c:	41312111 81716151 6142203a 6e692064     .!1AQaq.: Bad in
   2e11c:	20747570 61726170 6574656d 2d207372     put parameters -
   2e12c:	7453202d 73757461 3025203a 0a0d5832     - Status: %02X..
   2e13c:	00000000 4345203a 46204844 656c6961     ....: ECDH Faile
   2e14c:	2d2d2064 61745320 3a737574 32302520     d -- Status: %02
   2e15c:	000a0d58 6e45203a 70797263 20646574     X...: Encrypted 
   2e16c:	64616572 69616620 2064656c 53202d2d     read failed -- S
   2e17c:	75746174 25203a73 0d583230 0000000a     tatus: %02X.....
   2e18c:	6f4e203a 2065636e 6c696166 2d206465     : Nonce failed -
   2e19c:	7453202d 73757461 3025203a 0a0d5832     - Status: %02X..
   2e1ac:	00000000 6143203a 5420636c 4b706d65     ....: Calc TempK
   2e1bc:	66207965 656c6961 2d2d2064 61745320     ey failed -- Sta
   2e1cc:	3a737574 32302520 000a0d58 6547203a     tus: %02X...: Ge
   2e1dc:	6769446e 69616620 2064656c 53202d2d     nDig failed -- S
   2e1ec:	75746174 25203a73 0d583230 0000000a     tatus: %02X.....
   2e1fc:	2d20203a 7453202d 73757461 3025203a     :  -- Status: %0
   2e20c:	0a0d5832 00000000 6552203a 65206461     2X......: Read e
   2e21c:	7972636e 64657470 69616620 2064656c     ncrypted failed 
   2e22c:	53202d2d 75746174 25203a73 0d583230     -- Status: %02X.
   2e23c:	0000000a 6e49203a 696c6176 61502064     ....: Invalid Pa
   2e24c:	656d6172 73726574 202d2d20 74617453     rameters -- Stat
   2e25c:	203a7375 58323025 00000a0d 6552203a     us: %02X....: Re
   2e26c:	63206461 69666e6f 6f7a2067 6620656e     ad config zone f
   2e27c:	656c6961 2d2d2064 61745320 3a737574     ailed -- Status:
   2e28c:	32302520 000a0d58 6146203a 64656c69      %02X...: Failed
   2e29c:	206f7420 20746567 666e6f63 7a206769      to get config z
   2e2ac:	20656e6f 657a6973 202d2d20 74617453     one size -- Stat
   2e2bc:	203a7375 58323025 00000a0d 00000a0d     us: %02X........
   2e2cc:	00007325 58323025 00000020 58323025     %s..%02X ...%02X
   2e2dc:	00000000 6142203a 34366573 61686320     ....: Base64 cha
   2e2ec:	61207372 72657466 646e6520 64617020     rs after end pad
   2e2fc:	676e6964 202d2d20 74617453 203a7375     ding -- Status: 
   2e30c:	58323025 00000a0d 6564203a 65646f63     %02X....: decode
   2e31c:	75622064 72656666 6f6f7420 616d7320     d buffer too sma
   2e32c:	2d206c6c 7453202d 73757461 3025203a     ll -- Status: %0
   2e33c:	0a0d5832 00000000 754e203a 69206c6c     2X......: Null i
   2e34c:	7475706e 72617020 74656d61 2d207265     nput parameter -
   2e35c:	7453202d 73757461 3025203a 0a0d5832     - Status: %02X..
   2e36c:	00000000 6e49203a 696c6176 61622064     ....: Invalid ba
   2e37c:	34366573 61686320 74636172 2d207265     se64 character -
   2e38c:	7453202d 73757461 3025203a 0a0d5832     - Status: %02X..
   2e39c:	00000000 6e49203a 696c6176 756e2064     ....: Invalid nu
   2e3ac:	7265626d 20666f20 65736162 63203436     mber of base64 c
   2e3bc:	73726168 202d2d20 74617453 203a7375     hars -- Status: 
   2e3cc:	58323025 00000a0d 656e203a 6e696c77     %02X....: newlin
   2e3dc:	75722065 5b73656c 6d205d33 20747375     e rules[3] must 
   2e3ec:	6d206562 69746c75 20656c70 3420666f     be multiple of 4
   2e3fc:	202d2d20 74617453 203a7375 58323025      -- Status: %02X
   2e40c:	00000a0d 654c203a 6874676e 20666f20     ....: Length of 
   2e41c:	6f636e65 20646564 66667562 74207265     encoded buffer t
   2e42c:	73206f6f 6c6c616d 202d2d20 74617453     oo small -- Stat
   2e43c:	203a7375 58323025 00000a0d 0001bb34     us: %02X....4...
   2e44c:	0001bb3c 0001bb44 0001bb4c 0001bb54     <...D...L...T...
   2e45c:	0001bb54 0001bb54 0001bb4c 0001c9a8     T...T...L.......
   2e46c:	0001c9ec 0001c9ec 0001c9ec 0001c9ec     ................
   2e47c:	0001c9ec 0001ca48 0001ca5e 0001ca5e     ....H...^...^...
   2e48c:	0001ca5e 0001ca5e 0001ca5e 43331104     ^...^...^.....3C
   2e49c:	40c40704 0001ccae 0001ccb6 0001ccbe     ...@............
   2e4ac:	0001ccc6 0001ccce 0001ccd6              ............

0002e4b8 <hashContext_h_init.5777>:
   2e4b8:	67452301 efcdab89 98badcfe 10325476     .#Eg........vT2.
   2e4c8:	c3d2e1f0                                ....

0002e4cc <k.4600>:
   2e4cc:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   2e4dc:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   2e4ec:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   2e4fc:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   2e50c:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   2e51c:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   2e52c:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   2e53c:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   2e54c:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   2e55c:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   2e56c:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   2e57c:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   2e58c:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   2e59c:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   2e5ac:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   2e5bc:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

0002e5cc <hash_init.4632>:
   2e5cc:	6a09e667 bb67ae85 3c6ef372 a54ff53a     g..j..g.r.n<:.O.
   2e5dc:	510e527f 9b05688c 1f83d9ab 5be0cd19     .R.Q.h.........[

0002e5ec <ATCACERT_DATE_FORMAT_SIZES>:
   2e5ec:	00000014 0000000d 00000004 00000004     ................
   2e5fc:	0000000f 0001e2ea 0001e2fa 0001e30a     ................
   2e60c:	0001e31a 0001e32a 0001e3a4 0001e3b4     ....*...........
   2e61c:	0001e3c4 0001e3d4 0001e3e4 0001e43a     ............:...
   2e62c:	0001e460 0001e486 0001e4ac 0001e4d2     `...............

0002e63c <month_secs.4754>:
   2e63c:	0028de80 0024ea00 0028de80 00278d00     ..(...$...(...'.
   2e64c:	0028de80 00278d00 0028de80 0028de80     ..(...'...(...(.
   2e65c:	00278d00 0028de80 00278d00 0028de80     ..'...(...'...(.
   2e66c:	000216d8 00021704 00021740 00021858     ........@...X...
   2e67c:	00021740 00021858 00021740 00021858     @...X...@...X...

0002e68c <device_sn_dev_loc.5044>:
   2e68c:	00000000 00000d00                       ........

0002e694 <g_ecc_configdata>:
   2e694:	00002301 00500000 07060504 000100ee     .#....P.........
   2e6a4:	005500b0 44c4208f 44c42087 26c40f8f     ..U.. .D. .D...&
   2e6b4:	208f0f9f 0f0f0f0f 0f0f0f0f 0f0f0f0f     ... ............
   2e6c4:	0f0f0f0f ffffffff 00000000 ffffffff     ................
   2e6d4:	00000000 ffffffff ffffffff ffffffff     ................
   2e6e4:	ffffffff 00000000 0000ffff 00000000     ................
   2e6f4:	001c0033 001c0013 001c003c 0033003c     3.......<...<.3.
   2e704:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.

0002e714 <g_signer_ca_private_key>:
   2e714:	00000000 091e0c49 00af40e2 32436be9     ....I....@...kC2
   2e724:	8f150e92 d48e5869 8bf6c725 5d526a0c     ....iX..%....jR]
   2e734:	ee4f210d                                .!O.

0002e738 <g_signer_0_ca_public_key>:
   2e738:	f30429f9 5c6cd0bf c34c0242 3f8b045e     .)....l\B.L.^..?
   2e748:	c8c3c7a3 a96fc607 1e4218e4 7c940f34     ......o...B.4..|
   2e758:	52df4dbd a05ad96f 08487e55 85fb11ac     .M.Ro.Z.U~H.....
   2e768:	59cf0950 0b054fdb aa673d4d 91c497e9     P..Y.O..M=g.....

0002e778 <g_cert_def_0_signer>:
   2e778:	00000100 0000070a 00000000 00040401     ................
   2e788:	0200019b 0000000b 0c020048 48000000     ........H......H
   2e798:	4000f700 4a01ab00 0d007500 0f008400     ...@...J.u......
   2e7a8:	0400d800 10000f00 14018b00 14016a00     .............j..
   2e7b8:	00000000 e97c0000 01f40002 00000000     ......|.........

0002e7c8 <g_cert_def_0_device>:
   2e7c8:	00000200 0000070a 00000000 00040401     ................
   2e7d8:	02000157 00000100 0a020040 48000000     W.......@......H
   2e7e8:	4000f600 4a016700 0d007900 0f008800     ...@.g.J.y......
   2e7f8:	04007100 10000f00 14014700 00000000     .q.......G......
   2e808:	00000000 eb700000 01b20002 00000000     ......p.........
   2e818:	6e676953 43207265 6c732041 2520746f     Signer CA slot %
   2e828:	6f6e2064 76612074 616c6961 2e656c62     d not available.
   2e838:	67695320 2072656e 61204143 7320646e      Signer CA and s
   2e848:	656e6769 69772072 62206c6c 68732065     igner will be sh
   2e858:	6e697261 20612067 2e79656b 00000a0d     aring a key.....
   2e868:	6e726157 3a676e69 69725020 69725776     Warning: PrivWri
   2e878:	74206574 6c73206f 2520746f 61662064     te to slot %d fa
   2e888:	64656c69 7845202e 6c706d61 616d2065     iled. Example ma
   2e898:	74732079 206c6c69 6b726f77 6f687420     y still work tho
   2e8a8:	2e686775 0000000a 6e676953 43207265     ugh.....Signer C
   2e8b8:	75502041 63696c62 79654b20 000a0d3a     A Public Key:...
   2e8c8:	6e676953 50207265 696c6275 654b2063     Signer Public Ke
   2e8d8:	0a0d3a79 00000000 69766544 50206563     y:......Device P
   2e8e8:	696c6275 654b2063 0a0d3a79 00000000     ublic Key:......
   2e8f8:	6e676953 43207265 69747265 61636966     Signer Certifica
   2e908:	0d3a6574 0000000a 69766544 43206563     te:.....Device C
   2e918:	69747265 61636966 0d3a6574 0000000a     ertificate:.....
   2e928:	00008bc4 00000000 00000000 00000014     ................
   2e938:	00000002 00000007 00000072 00000000     ........r.......
   2e948:	00000000 00000015 00000003 00000008     ................
   2e958:	00000073 66d01232 c752edf5 aaff9879     s...2..f..R.y...
   2e968:	602243ac 109cffdd 66416f99 fa23603a     .C"`.....oAf:`#.
   2e978:	c53eaaf6                                ..>.

0002e97c <g_cert_template_0_signer>:
   2e97c:	f0018230 97018230 010203a0 69110202     0...0..........i
   2e98c:	710d508a a537fca3 05441db8 01c42fba     .P.q..7...D../..
   2e99c:	08060a30 ce48862a 0203043d 1d314330     0...*.H.=...0C1.
   2e9ac:	03061b30 0c0a0455 61784514 656c706d     0...U....Example
   2e9bc:	67724f20 7a696e61 6f697461 3022316e      Organization1"0
   2e9cc:	55030620 190c0304 6d617845 20656c70      ..U....Example 
   2e9dc:	43455441 38303543 6f522041 4320746f     ATECC508A Root C
   2e9ec:	17203041 3135310d 32373132 30303033     A0 ..15121723000
   2e9fc:	0f185a30 39393939 31333231 39353332     0Z..999912312359
   2ea0c:	305a3935 301d3147 5503061b 140c0a04     59Z0G1.0...U....
   2ea1c:	6d617845 20656c70 6167724f 617a696e     Example Organiza
   2ea2c:	6e6f6974 24302631 04550306 451d0c03     tion1&0$..U....E
   2ea3c:	706d6178 4120656c 43434554 41383035     xample ATECC508A
   2ea4c:	67695320 2072656e 34333030 13305930      Signer 00340Y0.
   2ea5c:	862a0706 023dce48 2a080601 3dce4886     ..*.H.=....*.H.=
   2ea6c:	03070103 44040042 5ec5e60a 2abed53d     ....B..D...^=..*
   2ea7c:	4b0049ce 01f38d1a 26572c1b 9f95e186     .I.K.....,W&....
   2ea8c:	18715cf1 6dfc8e06 8c051bb1 96efbde2     .\q....m........
   2ea9c:	095354d9 f2b95781 8b40908a 52837055     .TS..W....@.Up.R
   2eaac:	8b5aeba6 a374c17f 30643066 55030612     ..Z...t.f0d0...U
   2eabc:	0101131d 300804ff ff010106 30000102     .......0.......0
   2eacc:	5503060e 01010f1d 030404ff 30840202     ...U...........0
   2eadc:	5503061d 16040e1d cd041404 832e19e7     ...U............
   2eaec:	3bc5a465 ac8ca9ae fbaf1cd2 1f302ccf     e..;.........,0.
   2eafc:	1d550306 30180423 37148016 eb3aa10a     ..U.#..0...7..:.
   2eb0c:	8909cfeb 3a6b8270 96fb74b2 30d36872     ....p.k:.t..rh.0
   2eb1c:	2a08060a 3dce4886 03020304 44300047     ...*.H.=....G.0D
   2eb2c:	5e772002 72a48a46 1526e823 71f21f9f     . w^F..r#.&....q
   2eb3c:	4a730be5 c4f499a8 a76556fe 0b0af7e6     ..sJ.....Ve.....
   2eb4c:	2002cbe2 ec24981a 980d51d0 88e91fd2     ... ..$..Q......
   2eb5c:	5f1f4c83 d397cb75 fb58530c ac0a3058     .L._u....SX.X0..
   2eb6c:	1dba451b                                .E..

0002eb70 <g_cert_template_0_device>:
   2eb70:	ae018230 53018230 010203a0 40110202     0...0..S.......@
   2eb80:	04030201 08070605 0c0b0a09 020f0e0d     ................
   2eb90:	08060a30 ce48862a 0203043d 1d314730     0...*.H.=...0G1.
   2eba0:	03061b30 0c0a0455 61784514 656c706d     0...U....Example
   2ebb0:	67724f20 7a696e61 6f697461 3026316e      Organization1&0
   2ebc0:	55030624 1d0c0304 6d617845 20656c70     $..U....Example 
   2ebd0:	43455441 38303543 69532041 72656e67     ATECC508A Signer
   2ebe0:	33303020 17203034 3135310d 30363132      00340 ..1512160
   2ebf0:	33313532 0f185a37 39393939 31333231     25137Z..99991231
   2ec00:	39353332 305a3935 301d3142 5503061b     235959Z0B1.0...U
   2ec10:	140c0a04 6d617845 20656c70 6167724f     ....Example Orga
   2ec20:	617a696e 6e6f6974 1f302131 04550306     nization1!0...U.
   2ec30:	45180c03 706d6178 4120656c 43434554     ...Example ATECC
   2ec40:	41383035 76654420 30656369 06133059     508A Device0Y0..
   2ec50:	48862a07 01023dce 862a0806 033dce48     .*.H.=....*.H.=.
   2ec60:	42030701 9a810400 e323769b 6d85e920     ...B.....v#. ..m
   2ec70:	94ccee74 7edb0660 b386e364 4208f53b     t...`..~d...;..B
   2ec80:	5d8e3947 5baf22d3 c6bb57dc f818d2c0     G9.].".[.W......
   2ec90:	1e2f0182 f2f7da3b caaa22ed 3a7cf588     ../.;...."....|:
   2eca0:	3e3c5aee 23a3f51d 1f302130 1d550306     .Z<>...#0!0...U.
   2ecb0:	30180423 04148016 2e19e7cd c5a46583     #..0.........e..
   2ecc0:	8ca9ae3b af1cd2ac 302ccffb 2a08060a     ;.........,0...*
   2ecd0:	3dce4886 03020304 46300049 c3002102     .H.=....I.0F.!..
   2ece0:	26b65410 9e0b02e1 a4e702a8 94c30f58     .T.&........X...
   2ecf0:	b264a480 e2500ac8 32877169 02aac34b     ..d...P.iq.2K...
   2ed00:	a2840021 1dabed28 36169aa9 e01e2a77     !...(......6w*..
   2ed10:	4b1f3bbb d26bbccf 5fb7ba54 4456bb79     .;.K..k.T.._y.VD
   2ed20:	0007e430                                         0.

0002ed22 <access_key_slot.6662>:
   2ed22:	42640007 41320002 42380002 41280002     ..dB..2A..8B..(A
   2ed32:	42380002 42420002 42380002 41280002     ..8B..BB..8B..(A
   2ed42:	41320002 41320002 42420002 41280002     ..2A..2A..BB..(A
   2ed52:	411e0002 411e0002 411e0002 44940002     ...A...A...A...D
   2ed62:	4aac0002 496c0002 496c0002 496a0002     ...J..lI..lI..jI
   2ed72:	4a840002 4a840002 4a760002 496a0002     ...J...J..vJ..jI
   2ed82:	4a840002 4a760002 4a840002 496a0002     ...J..vJ...J..jI
   2ed92:	4a8c0002 4a8c0002 4a8c0002 4c8c0002     ...J...J...J...L
   2eda2:	00c00002                                         ..

0002eda4 <_global_impure_ptr>:
   2eda4:	200000c0 4f500043 00584953 4e49002e     ... C.POSIX...IN
   2edb4:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
   2edc4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   2edd4:	32313000 36353433 61393837 65646362     .0123456789abcde
   2ede4:	20000066                                         f.

0002ede6 <_ctype_>:
   2ede6:	20202000 20202020 28282020 20282828     .         ((((( 
   2edf6:	20202020 20202020 20202020 20202020                     
   2ee06:	10108820 10101010 10101010 10101010      ...............
   2ee16:	04040410 04040404 10040404 10101010     ................
   2ee26:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2ee36:	01010101 01010101 01010101 10101010     ................
   2ee46:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2ee56:	02020202 02020202 02020202 10101010     ................
   2ee66:	00000020 00000000 00000000 00000000      ...............
	...
   2eee6:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

0002eef4 <__sf_fake_stdin>:
	...

0002ef14 <__sf_fake_stdout>:
	...

0002ef34 <__sf_fake_stderr>:
	...

0002ef58 <__mprec_tens>:
   2ef58:	00000000 3ff00000 00000000 40240000     .......?......$@
   2ef68:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   2ef78:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   2ef88:	00000000 412e8480 00000000 416312d0     .......A......cA
   2ef98:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   2efa8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   2efb8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   2efc8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   2efd8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   2efe8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   2eff8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   2f008:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   2f018:	79d99db4 44ea7843                       ...yCx.D

0002f020 <__mprec_bigtens>:
   2f020:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   2f030:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   2f040:	7f73bf3c 75154fdd                       <.s..O.u

0002f048 <p05.6097>:
   2f048:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   2f058:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....

0002f068 <_init>:
   2f068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f06a:	46c0      	nop			; (mov r8, r8)
   2f06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2f06e:	bc08      	pop	{r3}
   2f070:	469e      	mov	lr, r3
   2f072:	4770      	bx	lr

0002f074 <__init_array_start>:
   2f074:	000000dd 	.word	0x000000dd

0002f078 <_fini>:
   2f078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f07a:	46c0      	nop			; (mov r8, r8)
   2f07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2f07e:	bc08      	pop	{r3}
   2f080:	469e      	mov	lr, r3
   2f082:	4770      	bx	lr

0002f084 <__fini_array_start>:
   2f084:	000000b5 	.word	0x000000b5
